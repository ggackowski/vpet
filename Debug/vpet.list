
vpet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017b64  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003580  08017cfc  08017cfc  00027cfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b27c  0801b27c  0003027c  2**0
                  CONTENTS
  4 .ARM          00000008  0801b27c  0801b27c  0002b27c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b284  0801b284  0003027c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801b284  0801b284  0002b284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b28c  0801b28c  0002b28c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000027c  20000000  0801b290  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000854  2000027c  0801b50c  0003027c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ad0  0801b50c  00030ad0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003027c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000b1e80  00000000  00000000  000302ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000cc9b  00000000  00000000  000e212c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00005540  00000000  00000000  000eedc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00005270  00000000  00000000  000f4308  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000236ed  00000000  00000000  000f9578  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000352e6  00000000  00000000  0011cc65  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f9f68  00000000  00000000  00151f4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0024beb3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000196d4  00000000  00000000  0024bf30  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000027c 	.word	0x2000027c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08017ce4 	.word	0x08017ce4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000280 	.word	0x20000280
 80001d4:	08017ce4 	.word	0x08017ce4

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001fc:	f000 b972 	b.w	80004e4 <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9e08      	ldr	r6, [sp, #32]
 800021e:	4604      	mov	r4, r0
 8000220:	4688      	mov	r8, r1
 8000222:	2b00      	cmp	r3, #0
 8000224:	d14b      	bne.n	80002be <__udivmoddi4+0xa6>
 8000226:	428a      	cmp	r2, r1
 8000228:	4615      	mov	r5, r2
 800022a:	d967      	bls.n	80002fc <__udivmoddi4+0xe4>
 800022c:	fab2 f282 	clz	r2, r2
 8000230:	b14a      	cbz	r2, 8000246 <__udivmoddi4+0x2e>
 8000232:	f1c2 0720 	rsb	r7, r2, #32
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	fa20 f707 	lsr.w	r7, r0, r7
 800023e:	4095      	lsls	r5, r2
 8000240:	ea47 0803 	orr.w	r8, r7, r3
 8000244:	4094      	lsls	r4, r2
 8000246:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800024a:	0c23      	lsrs	r3, r4, #16
 800024c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000250:	fa1f fc85 	uxth.w	ip, r5
 8000254:	fb0e 8817 	mls	r8, lr, r7, r8
 8000258:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800025c:	fb07 f10c 	mul.w	r1, r7, ip
 8000260:	4299      	cmp	r1, r3
 8000262:	d909      	bls.n	8000278 <__udivmoddi4+0x60>
 8000264:	18eb      	adds	r3, r5, r3
 8000266:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800026a:	f080 811b 	bcs.w	80004a4 <__udivmoddi4+0x28c>
 800026e:	4299      	cmp	r1, r3
 8000270:	f240 8118 	bls.w	80004a4 <__udivmoddi4+0x28c>
 8000274:	3f02      	subs	r7, #2
 8000276:	442b      	add	r3, r5
 8000278:	1a5b      	subs	r3, r3, r1
 800027a:	b2a4      	uxth	r4, r4
 800027c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000280:	fb0e 3310 	mls	r3, lr, r0, r3
 8000284:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000288:	fb00 fc0c 	mul.w	ip, r0, ip
 800028c:	45a4      	cmp	ip, r4
 800028e:	d909      	bls.n	80002a4 <__udivmoddi4+0x8c>
 8000290:	192c      	adds	r4, r5, r4
 8000292:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000296:	f080 8107 	bcs.w	80004a8 <__udivmoddi4+0x290>
 800029a:	45a4      	cmp	ip, r4
 800029c:	f240 8104 	bls.w	80004a8 <__udivmoddi4+0x290>
 80002a0:	3802      	subs	r0, #2
 80002a2:	442c      	add	r4, r5
 80002a4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a8:	eba4 040c 	sub.w	r4, r4, ip
 80002ac:	2700      	movs	r7, #0
 80002ae:	b11e      	cbz	r6, 80002b8 <__udivmoddi4+0xa0>
 80002b0:	40d4      	lsrs	r4, r2
 80002b2:	2300      	movs	r3, #0
 80002b4:	e9c6 4300 	strd	r4, r3, [r6]
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	428b      	cmp	r3, r1
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0xbe>
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	f000 80eb 	beq.w	800049e <__udivmoddi4+0x286>
 80002c8:	2700      	movs	r7, #0
 80002ca:	e9c6 0100 	strd	r0, r1, [r6]
 80002ce:	4638      	mov	r0, r7
 80002d0:	4639      	mov	r1, r7
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	fab3 f783 	clz	r7, r3
 80002da:	2f00      	cmp	r7, #0
 80002dc:	d147      	bne.n	800036e <__udivmoddi4+0x156>
 80002de:	428b      	cmp	r3, r1
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xd0>
 80002e2:	4282      	cmp	r2, r0
 80002e4:	f200 80fa 	bhi.w	80004dc <__udivmoddi4+0x2c4>
 80002e8:	1a84      	subs	r4, r0, r2
 80002ea:	eb61 0303 	sbc.w	r3, r1, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	4698      	mov	r8, r3
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d0e0      	beq.n	80002b8 <__udivmoddi4+0xa0>
 80002f6:	e9c6 4800 	strd	r4, r8, [r6]
 80002fa:	e7dd      	b.n	80002b8 <__udivmoddi4+0xa0>
 80002fc:	b902      	cbnz	r2, 8000300 <__udivmoddi4+0xe8>
 80002fe:	deff      	udf	#255	; 0xff
 8000300:	fab2 f282 	clz	r2, r2
 8000304:	2a00      	cmp	r2, #0
 8000306:	f040 808f 	bne.w	8000428 <__udivmoddi4+0x210>
 800030a:	1b49      	subs	r1, r1, r5
 800030c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000310:	fa1f f885 	uxth.w	r8, r5
 8000314:	2701      	movs	r7, #1
 8000316:	fbb1 fcfe 	udiv	ip, r1, lr
 800031a:	0c23      	lsrs	r3, r4, #16
 800031c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb08 f10c 	mul.w	r1, r8, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x124>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x122>
 8000334:	4299      	cmp	r1, r3
 8000336:	f200 80cd 	bhi.w	80004d4 <__udivmoddi4+0x2bc>
 800033a:	4684      	mov	ip, r0
 800033c:	1a59      	subs	r1, r3, r1
 800033e:	b2a3      	uxth	r3, r4
 8000340:	fbb1 f0fe 	udiv	r0, r1, lr
 8000344:	fb0e 1410 	mls	r4, lr, r0, r1
 8000348:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800034c:	fb08 f800 	mul.w	r8, r8, r0
 8000350:	45a0      	cmp	r8, r4
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x14c>
 8000354:	192c      	adds	r4, r5, r4
 8000356:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x14a>
 800035c:	45a0      	cmp	r8, r4
 800035e:	f200 80b6 	bhi.w	80004ce <__udivmoddi4+0x2b6>
 8000362:	4618      	mov	r0, r3
 8000364:	eba4 0408 	sub.w	r4, r4, r8
 8000368:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800036c:	e79f      	b.n	80002ae <__udivmoddi4+0x96>
 800036e:	f1c7 0c20 	rsb	ip, r7, #32
 8000372:	40bb      	lsls	r3, r7
 8000374:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000378:	ea4e 0e03 	orr.w	lr, lr, r3
 800037c:	fa01 f407 	lsl.w	r4, r1, r7
 8000380:	fa20 f50c 	lsr.w	r5, r0, ip
 8000384:	fa21 f30c 	lsr.w	r3, r1, ip
 8000388:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800038c:	4325      	orrs	r5, r4
 800038e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000392:	0c2c      	lsrs	r4, r5, #16
 8000394:	fb08 3319 	mls	r3, r8, r9, r3
 8000398:	fa1f fa8e 	uxth.w	sl, lr
 800039c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a0:	fb09 f40a 	mul.w	r4, r9, sl
 80003a4:	429c      	cmp	r4, r3
 80003a6:	fa02 f207 	lsl.w	r2, r2, r7
 80003aa:	fa00 f107 	lsl.w	r1, r0, r7
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b0>
 80003b0:	eb1e 0303 	adds.w	r3, lr, r3
 80003b4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003b8:	f080 8087 	bcs.w	80004ca <__udivmoddi4+0x2b2>
 80003bc:	429c      	cmp	r4, r3
 80003be:	f240 8084 	bls.w	80004ca <__udivmoddi4+0x2b2>
 80003c2:	f1a9 0902 	sub.w	r9, r9, #2
 80003c6:	4473      	add	r3, lr
 80003c8:	1b1b      	subs	r3, r3, r4
 80003ca:	b2ad      	uxth	r5, r5
 80003cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d0:	fb08 3310 	mls	r3, r8, r0, r3
 80003d4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003dc:	45a2      	cmp	sl, r4
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1da>
 80003e0:	eb1e 0404 	adds.w	r4, lr, r4
 80003e4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003e8:	d26b      	bcs.n	80004c2 <__udivmoddi4+0x2aa>
 80003ea:	45a2      	cmp	sl, r4
 80003ec:	d969      	bls.n	80004c2 <__udivmoddi4+0x2aa>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4474      	add	r4, lr
 80003f2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003f6:	fba0 8902 	umull	r8, r9, r0, r2
 80003fa:	eba4 040a 	sub.w	r4, r4, sl
 80003fe:	454c      	cmp	r4, r9
 8000400:	46c2      	mov	sl, r8
 8000402:	464b      	mov	r3, r9
 8000404:	d354      	bcc.n	80004b0 <__udivmoddi4+0x298>
 8000406:	d051      	beq.n	80004ac <__udivmoddi4+0x294>
 8000408:	2e00      	cmp	r6, #0
 800040a:	d069      	beq.n	80004e0 <__udivmoddi4+0x2c8>
 800040c:	ebb1 050a 	subs.w	r5, r1, sl
 8000410:	eb64 0403 	sbc.w	r4, r4, r3
 8000414:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000418:	40fd      	lsrs	r5, r7
 800041a:	40fc      	lsrs	r4, r7
 800041c:	ea4c 0505 	orr.w	r5, ip, r5
 8000420:	e9c6 5400 	strd	r5, r4, [r6]
 8000424:	2700      	movs	r7, #0
 8000426:	e747      	b.n	80002b8 <__udivmoddi4+0xa0>
 8000428:	f1c2 0320 	rsb	r3, r2, #32
 800042c:	fa20 f703 	lsr.w	r7, r0, r3
 8000430:	4095      	lsls	r5, r2
 8000432:	fa01 f002 	lsl.w	r0, r1, r2
 8000436:	fa21 f303 	lsr.w	r3, r1, r3
 800043a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800043e:	4338      	orrs	r0, r7
 8000440:	0c01      	lsrs	r1, r0, #16
 8000442:	fbb3 f7fe 	udiv	r7, r3, lr
 8000446:	fa1f f885 	uxth.w	r8, r5
 800044a:	fb0e 3317 	mls	r3, lr, r7, r3
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb07 f308 	mul.w	r3, r7, r8
 8000456:	428b      	cmp	r3, r1
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d907      	bls.n	800046e <__udivmoddi4+0x256>
 800045e:	1869      	adds	r1, r5, r1
 8000460:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000464:	d22f      	bcs.n	80004c6 <__udivmoddi4+0x2ae>
 8000466:	428b      	cmp	r3, r1
 8000468:	d92d      	bls.n	80004c6 <__udivmoddi4+0x2ae>
 800046a:	3f02      	subs	r7, #2
 800046c:	4429      	add	r1, r5
 800046e:	1acb      	subs	r3, r1, r3
 8000470:	b281      	uxth	r1, r0
 8000472:	fbb3 f0fe 	udiv	r0, r3, lr
 8000476:	fb0e 3310 	mls	r3, lr, r0, r3
 800047a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047e:	fb00 f308 	mul.w	r3, r0, r8
 8000482:	428b      	cmp	r3, r1
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x27e>
 8000486:	1869      	adds	r1, r5, r1
 8000488:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800048c:	d217      	bcs.n	80004be <__udivmoddi4+0x2a6>
 800048e:	428b      	cmp	r3, r1
 8000490:	d915      	bls.n	80004be <__udivmoddi4+0x2a6>
 8000492:	3802      	subs	r0, #2
 8000494:	4429      	add	r1, r5
 8000496:	1ac9      	subs	r1, r1, r3
 8000498:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800049c:	e73b      	b.n	8000316 <__udivmoddi4+0xfe>
 800049e:	4637      	mov	r7, r6
 80004a0:	4630      	mov	r0, r6
 80004a2:	e709      	b.n	80002b8 <__udivmoddi4+0xa0>
 80004a4:	4607      	mov	r7, r0
 80004a6:	e6e7      	b.n	8000278 <__udivmoddi4+0x60>
 80004a8:	4618      	mov	r0, r3
 80004aa:	e6fb      	b.n	80002a4 <__udivmoddi4+0x8c>
 80004ac:	4541      	cmp	r1, r8
 80004ae:	d2ab      	bcs.n	8000408 <__udivmoddi4+0x1f0>
 80004b0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004b4:	eb69 020e 	sbc.w	r2, r9, lr
 80004b8:	3801      	subs	r0, #1
 80004ba:	4613      	mov	r3, r2
 80004bc:	e7a4      	b.n	8000408 <__udivmoddi4+0x1f0>
 80004be:	4660      	mov	r0, ip
 80004c0:	e7e9      	b.n	8000496 <__udivmoddi4+0x27e>
 80004c2:	4618      	mov	r0, r3
 80004c4:	e795      	b.n	80003f2 <__udivmoddi4+0x1da>
 80004c6:	4667      	mov	r7, ip
 80004c8:	e7d1      	b.n	800046e <__udivmoddi4+0x256>
 80004ca:	4681      	mov	r9, r0
 80004cc:	e77c      	b.n	80003c8 <__udivmoddi4+0x1b0>
 80004ce:	3802      	subs	r0, #2
 80004d0:	442c      	add	r4, r5
 80004d2:	e747      	b.n	8000364 <__udivmoddi4+0x14c>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	442b      	add	r3, r5
 80004da:	e72f      	b.n	800033c <__udivmoddi4+0x124>
 80004dc:	4638      	mov	r0, r7
 80004de:	e708      	b.n	80002f2 <__udivmoddi4+0xda>
 80004e0:	4637      	mov	r7, r6
 80004e2:	e6e9      	b.n	80002b8 <__udivmoddi4+0xa0>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <_ZN4tama5Vec2dplES0_>:
//

#include "Vec2d.h"

tama::Vec2d tama::Vec2d::operator+(tama::Vec2d delta)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b084      	sub	sp, #16
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	60f8      	str	r0, [r7, #12]
 80004f0:	60b9      	str	r1, [r7, #8]
 80004f2:	4639      	mov	r1, r7
 80004f4:	e881 000c 	stmia.w	r1, {r2, r3}
    return Vec2d(this->x + delta.x, this->y + delta.y);
 80004f8:	68bb      	ldr	r3, [r7, #8]
 80004fa:	681a      	ldr	r2, [r3, #0]
 80004fc:	683b      	ldr	r3, [r7, #0]
 80004fe:	18d1      	adds	r1, r2, r3
 8000500:	68bb      	ldr	r3, [r7, #8]
 8000502:	685a      	ldr	r2, [r3, #4]
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	4413      	add	r3, r2
 8000508:	461a      	mov	r2, r3
 800050a:	68f8      	ldr	r0, [r7, #12]
 800050c:	f000 f804 	bl	8000518 <_ZN4tama5Vec2dC1Eii>
}
 8000510:	68f8      	ldr	r0, [r7, #12]
 8000512:	3710      	adds	r7, #16
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}

08000518 <_ZN4tama5Vec2dC1Eii>:

tama::Vec2d::Vec2d(int i, int j)
 8000518:	b480      	push	{r7}
 800051a:	b085      	sub	sp, #20
 800051c:	af00      	add	r7, sp, #0
 800051e:	60f8      	str	r0, [r7, #12]
 8000520:	60b9      	str	r1, [r7, #8]
 8000522:	607a      	str	r2, [r7, #4]
{
    x = i;
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	68ba      	ldr	r2, [r7, #8]
 8000528:	601a      	str	r2, [r3, #0]
    y = j;
 800052a:	68fb      	ldr	r3, [r7, #12]
 800052c:	687a      	ldr	r2, [r7, #4]
 800052e:	605a      	str	r2, [r3, #4]
}
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	4618      	mov	r0, r3
 8000534:	3714      	adds	r7, #20
 8000536:	46bd      	mov	sp, r7
 8000538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053c:	4770      	bx	lr

0800053e <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800053e:	b480      	push	{r7}
 8000540:	b083      	sub	sp, #12
 8000542:	af00      	add	r7, sp, #0
 8000544:	6078      	str	r0, [r7, #4]
 8000546:	6039      	str	r1, [r7, #0]
 8000548:	683b      	ldr	r3, [r7, #0]
 800054a:	4618      	mov	r0, r3
 800054c:	370c      	adds	r7, #12
 800054e:	46bd      	mov	sp, r7
 8000550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000554:	4770      	bx	lr

08000556 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_add_ref_copyEv>:
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 8000556:	b480      	push	{r7}
 8000558:	b083      	sub	sp, #12
 800055a:	af00      	add	r7, sp, #0
 800055c:	6078      	str	r0, [r7, #4]
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	685b      	ldr	r3, [r3, #4]
 8000562:	1c5a      	adds	r2, r3, #1
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	605a      	str	r2, [r3, #4]
 8000568:	bf00      	nop
 800056a:	370c      	adds	r7, #12
 800056c:	46bd      	mov	sp, r7
 800056e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000572:	4770      	bx	lr

08000574 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
      if (--_M_use_count == 0)
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	685b      	ldr	r3, [r3, #4]
 8000580:	1e5a      	subs	r2, r3, #1
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	605a      	str	r2, [r3, #4]
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	685b      	ldr	r3, [r3, #4]
 800058a:	2b00      	cmp	r3, #0
 800058c:	bf0c      	ite	eq
 800058e:	2301      	moveq	r3, #1
 8000590:	2300      	movne	r3, #0
 8000592:	b2db      	uxtb	r3, r3
 8000594:	2b00      	cmp	r3, #0
 8000596:	d019      	beq.n	80005cc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x58>
        {
          _M_dispose();
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	3308      	adds	r3, #8
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	6878      	ldr	r0, [r7, #4]
 80005a2:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	689b      	ldr	r3, [r3, #8]
 80005a8:	1e5a      	subs	r2, r3, #1
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	609a      	str	r2, [r3, #8]
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	689b      	ldr	r3, [r3, #8]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	bf0c      	ite	eq
 80005b6:	2301      	moveq	r3, #1
 80005b8:	2300      	movne	r3, #0
 80005ba:	b2db      	uxtb	r3, r3
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d005      	beq.n	80005cc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x58>
            _M_destroy();
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	330c      	adds	r3, #12
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	6878      	ldr	r0, [r7, #4]
 80005ca:	4798      	blx	r3
        }
    }
 80005cc:	bf00      	nop
 80005ce:	3708      	adds	r7, #8
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}

080005d4 <_ZN4tama5Input11addListenerESt10shared_ptrINS_7OnInputEE>:
//

#include "Input.h"

void tama::Input::addListener(std::shared_ptr<tama::OnInput> listener)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
 80005dc:	6039      	str	r1, [r7, #0]
    listeners.push_back(listener);
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	3304      	adds	r3, #4
 80005e2:	6839      	ldr	r1, [r7, #0]
 80005e4:	4618      	mov	r0, r3
 80005e6:	f000 f804 	bl	80005f2 <_ZNSt6vectorISt10shared_ptrIN4tama7OnInputEESaIS3_EE9push_backERKS3_>
}
 80005ea:	bf00      	nop
 80005ec:	3708      	adds	r7, #8
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}

080005f2 <_ZNSt6vectorISt10shared_ptrIN4tama7OnInputEESaIS3_EE9push_backERKS3_>:
       *  to it.  Due to the nature of a %vector this operation can be
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      void
      push_back(const value_type& __x)
 80005f2:	b580      	push	{r7, lr}
 80005f4:	b082      	sub	sp, #8
 80005f6:	af00      	add	r7, sp, #0
 80005f8:	6078      	str	r0, [r7, #4]
 80005fa:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	685a      	ldr	r2, [r3, #4]
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	689b      	ldr	r3, [r3, #8]
 8000604:	429a      	cmp	r2, r3
 8000606:	d00d      	beq.n	8000624 <_ZNSt6vectorISt10shared_ptrIN4tama7OnInputEESaIS3_EE9push_backERKS3_+0x32>
	  {
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8000608:	6878      	ldr	r0, [r7, #4]
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	685b      	ldr	r3, [r3, #4]
 800060e:	683a      	ldr	r2, [r7, #0]
 8000610:	4619      	mov	r1, r3
 8000612:	f000 f81f 	bl	8000654 <_ZNSt16allocator_traitsISaISt10shared_ptrIN4tama7OnInputEEEE9constructIS3_JRKS3_EEEvRS4_PT_DpOT0_>
				     __x);
	    ++this->_M_impl._M_finish;
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	685b      	ldr	r3, [r3, #4]
 800061a:	f103 0208 	add.w	r2, r3, #8
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	605a      	str	r2, [r3, #4]
	  }
	else
	  _M_realloc_insert(end(), __x);
      }
 8000622:	e008      	b.n	8000636 <_ZNSt6vectorISt10shared_ptrIN4tama7OnInputEESaIS3_EE9push_backERKS3_+0x44>
	  _M_realloc_insert(end(), __x);
 8000624:	6878      	ldr	r0, [r7, #4]
 8000626:	f000 f828 	bl	800067a <_ZNSt6vectorISt10shared_ptrIN4tama7OnInputEESaIS3_EE3endEv>
 800062a:	4603      	mov	r3, r0
 800062c:	683a      	ldr	r2, [r7, #0]
 800062e:	4619      	mov	r1, r3
 8000630:	6878      	ldr	r0, [r7, #4]
 8000632:	f000 f833 	bl	800069c <_ZNSt6vectorISt10shared_ptrIN4tama7OnInputEESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_>
      }
 8000636:	bf00      	nop
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}

0800063e <_ZSt7forwardIRKSt10shared_ptrIN4tama7OnInputEEEOT_RNSt16remove_referenceIS6_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800063e:	b480      	push	{r7}
 8000640:	b083      	sub	sp, #12
 8000642:	af00      	add	r7, sp, #0
 8000644:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	4618      	mov	r0, r3
 800064a:	370c      	adds	r7, #12
 800064c:	46bd      	mov	sp, r7
 800064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000652:	4770      	bx	lr

08000654 <_ZNSt16allocator_traitsISaISt10shared_ptrIN4tama7OnInputEEEE9constructIS3_JRKS3_EEEvRS4_PT_DpOT0_>:
       *
       *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
      */
      template<typename _Up, typename... _Args>
	static void
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8000654:	b580      	push	{r7, lr}
 8000656:	b084      	sub	sp, #16
 8000658:	af00      	add	r7, sp, #0
 800065a:	60f8      	str	r0, [r7, #12]
 800065c:	60b9      	str	r1, [r7, #8]
 800065e:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8000660:	6878      	ldr	r0, [r7, #4]
 8000662:	f7ff ffec 	bl	800063e <_ZSt7forwardIRKSt10shared_ptrIN4tama7OnInputEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8000666:	4603      	mov	r3, r0
 8000668:	461a      	mov	r2, r3
 800066a:	68b9      	ldr	r1, [r7, #8]
 800066c:	68f8      	ldr	r0, [r7, #12]
 800066e:	f000 f8d5 	bl	800081c <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama7OnInputEEE9constructIS4_JRKS4_EEEvPT_DpOT0_>
 8000672:	bf00      	nop
 8000674:	3710      	adds	r7, #16
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}

0800067a <_ZNSt6vectorISt10shared_ptrIN4tama7OnInputEESaIS3_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800067a:	b580      	push	{r7, lr}
 800067c:	b084      	sub	sp, #16
 800067e:	af00      	add	r7, sp, #0
 8000680:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	1d1a      	adds	r2, r3, #4
 8000686:	f107 030c 	add.w	r3, r7, #12
 800068a:	4611      	mov	r1, r2
 800068c:	4618      	mov	r0, r3
 800068e:	f000 f8df 	bl	8000850 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama7OnInputEESt6vectorIS4_SaIS4_EEEC1ERKS5_>
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	4618      	mov	r0, r3
 8000696:	3710      	adds	r7, #16
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}

0800069c <_ZNSt6vectorISt10shared_ptrIN4tama7OnInputEESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 800069c:	b5b0      	push	{r4, r5, r7, lr}
 800069e:	b08a      	sub	sp, #40	; 0x28
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	60f8      	str	r0, [r7, #12]
 80006a4:	60b9      	str	r1, [r7, #8]
 80006a6:	607a      	str	r2, [r7, #4]
    void
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
 80006a8:	4a41      	ldr	r2, [pc, #260]	; (80007b0 <_ZNSt6vectorISt10shared_ptrIN4tama7OnInputEESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0x114>)
 80006aa:	2101      	movs	r1, #1
 80006ac:	68f8      	ldr	r0, [r7, #12]
 80006ae:	f000 f8df 	bl	8000870 <_ZNKSt6vectorISt10shared_ptrIN4tama7OnInputEESaIS3_EE12_M_check_lenEjPKc>
 80006b2:	6278      	str	r0, [r7, #36]	; 0x24
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
      const size_type __elems_before = __position - begin();
 80006b4:	68f8      	ldr	r0, [r7, #12]
 80006b6:	f000 f923 	bl	8000900 <_ZNSt6vectorISt10shared_ptrIN4tama7OnInputEESaIS3_EE5beginEv>
 80006ba:	4603      	mov	r3, r0
 80006bc:	617b      	str	r3, [r7, #20]
 80006be:	f107 0214 	add.w	r2, r7, #20
 80006c2:	f107 0308 	add.w	r3, r7, #8
 80006c6:	4611      	mov	r1, r2
 80006c8:	4618      	mov	r0, r3
 80006ca:	f000 f929 	bl	8000920 <_ZN9__gnu_cxxmiIPSt10shared_ptrIN4tama7OnInputEESt6vectorIS4_SaIS4_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_>
 80006ce:	4603      	mov	r3, r0
 80006d0:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80006d6:	4618      	mov	r0, r3
 80006d8:	f000 f938 	bl	800094c <_ZNSt12_Vector_baseISt10shared_ptrIN4tama7OnInputEESaIS3_EE11_M_allocateEj>
 80006dc:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 80006de:	69fb      	ldr	r3, [r7, #28]
 80006e0:	61bb      	str	r3, [r7, #24]
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 80006e2:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 80006e4:	6a3b      	ldr	r3, [r7, #32]
 80006e6:	00db      	lsls	r3, r3, #3
	  _Alloc_traits::construct(this->_M_impl,
 80006e8:	69fa      	ldr	r2, [r7, #28]
 80006ea:	18d5      	adds	r5, r2, r3
 80006ec:	6878      	ldr	r0, [r7, #4]
 80006ee:	f7ff ffa6 	bl	800063e <_ZSt7forwardIRKSt10shared_ptrIN4tama7OnInputEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80006f2:	4603      	mov	r3, r0
 80006f4:	461a      	mov	r2, r3
 80006f6:	4629      	mov	r1, r5
 80006f8:	4620      	mov	r0, r4
 80006fa:	f7ff ffab 	bl	8000654 <_ZNSt16allocator_traitsISaISt10shared_ptrIN4tama7OnInputEEEE9constructIS3_JRKS3_EEEvRS4_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 80006fe:	2300      	movs	r3, #0
 8000700:	61bb      	str	r3, [r7, #24]

	  __new_finish
	    = std::__uninitialized_move_if_noexcept_a
	    (this->_M_impl._M_start, __position.base(),
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	681c      	ldr	r4, [r3, #0]
 8000706:	f107 0308 	add.w	r3, r7, #8
 800070a:	4618      	mov	r0, r3
 800070c:	f000 f932 	bl	8000974 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama7OnInputEESt6vectorIS4_SaIS4_EEE4baseEv>
 8000710:	4603      	mov	r3, r0
 8000712:	681d      	ldr	r5, [r3, #0]
	     __new_start, _M_get_Tp_allocator());
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	4618      	mov	r0, r3
 8000718:	f000 f937 	bl	800098a <_ZNSt12_Vector_baseISt10shared_ptrIN4tama7OnInputEESaIS3_EE19_M_get_Tp_allocatorEv>
 800071c:	4603      	mov	r3, r0
	  __new_finish
 800071e:	69fa      	ldr	r2, [r7, #28]
 8000720:	4629      	mov	r1, r5
 8000722:	4620      	mov	r0, r4
 8000724:	f000 f93c 	bl	80009a0 <_ZSt34__uninitialized_move_if_noexcept_aIPSt10shared_ptrIN4tama7OnInputEES4_SaIS3_EET0_T_S7_S6_RT1_>
 8000728:	61b8      	str	r0, [r7, #24]

	  ++__new_finish;
 800072a:	69bb      	ldr	r3, [r7, #24]
 800072c:	3308      	adds	r3, #8
 800072e:	61bb      	str	r3, [r7, #24]

	  __new_finish
	    = std::__uninitialized_move_if_noexcept_a
	    (__position.base(), this->_M_impl._M_finish,
 8000730:	f107 0308 	add.w	r3, r7, #8
 8000734:	4618      	mov	r0, r3
 8000736:	f000 f91d 	bl	8000974 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama7OnInputEESt6vectorIS4_SaIS4_EEE4baseEv>
 800073a:	4603      	mov	r3, r0
 800073c:	681c      	ldr	r4, [r3, #0]
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	685d      	ldr	r5, [r3, #4]
	     __new_finish, _M_get_Tp_allocator());
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	4618      	mov	r0, r3
 8000746:	f000 f920 	bl	800098a <_ZNSt12_Vector_baseISt10shared_ptrIN4tama7OnInputEESaIS3_EE19_M_get_Tp_allocatorEv>
 800074a:	4603      	mov	r3, r0
	  __new_finish
 800074c:	69ba      	ldr	r2, [r7, #24]
 800074e:	4629      	mov	r1, r5
 8000750:	4620      	mov	r0, r4
 8000752:	f000 f925 	bl	80009a0 <_ZSt34__uninitialized_move_if_noexcept_aIPSt10shared_ptrIN4tama7OnInputEES4_SaIS3_EET0_T_S7_S6_RT1_>
 8000756:	61b8      	str	r0, [r7, #24]
	  else
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	681c      	ldr	r4, [r3, #0]
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	685d      	ldr	r5, [r3, #4]
		    _M_get_Tp_allocator());
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	4618      	mov	r0, r3
 8000764:	f000 f911 	bl	800098a <_ZNSt12_Vector_baseISt10shared_ptrIN4tama7OnInputEESaIS3_EE19_M_get_Tp_allocatorEv>
 8000768:	4603      	mov	r3, r0
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800076a:	461a      	mov	r2, r3
 800076c:	4629      	mov	r1, r5
 800076e:	4620      	mov	r0, r4
 8000770:	f000 f92f 	bl	80009d2 <_ZSt8_DestroyIPSt10shared_ptrIN4tama7OnInputEES3_EvT_S5_RSaIT0_E>
      _M_deallocate(this->_M_impl._M_start,
 8000774:	68f8      	ldr	r0, [r7, #12]
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	6819      	ldr	r1, [r3, #0]
		    this->_M_impl._M_end_of_storage
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	689b      	ldr	r3, [r3, #8]
		    - this->_M_impl._M_start);
 800077e:	461a      	mov	r2, r3
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	1ad3      	subs	r3, r2, r3
 8000786:	10db      	asrs	r3, r3, #3
      _M_deallocate(this->_M_impl._M_start,
 8000788:	461a      	mov	r2, r3
 800078a:	f000 f930 	bl	80009ee <_ZNSt12_Vector_baseISt10shared_ptrIN4tama7OnInputEESaIS3_EE13_M_deallocateEPS3_j>
      this->_M_impl._M_start = __new_start;
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	69fa      	ldr	r2, [r7, #28]
 8000792:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	69ba      	ldr	r2, [r7, #24]
 8000798:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800079a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800079c:	00db      	lsls	r3, r3, #3
 800079e:	69fa      	ldr	r2, [r7, #28]
 80007a0:	441a      	add	r2, r3
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	609a      	str	r2, [r3, #8]
    }
 80007a6:	bf00      	nop
 80007a8:	3728      	adds	r7, #40	; 0x28
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bdb0      	pop	{r4, r5, r7, pc}
 80007ae:	bf00      	nop
 80007b0:	08017cfc 	.word	0x08017cfc

080007b4 <_ZNSt12__shared_ptrIN4tama7OnInputELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
 80007bc:	6039      	str	r1, [r7, #0]
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	681a      	ldr	r2, [r3, #0]
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	1d1a      	adds	r2, r3, #4
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	3304      	adds	r3, #4
 80007ce:	4619      	mov	r1, r3
 80007d0:	4610      	mov	r0, r2
 80007d2:	f000 f91f 	bl	8000a14 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	4618      	mov	r0, r3
 80007da:	3708      	adds	r7, #8
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}

080007e0 <_ZNSt12__shared_ptrIN4tama7OnInputELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	3304      	adds	r3, #4
 80007ec:	4618      	mov	r0, r3
 80007ee:	f000 f928 	bl	8000a42 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	4618      	mov	r0, r3
 80007f6:	3708      	adds	r7, #8
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}

080007fc <_ZNSt10shared_ptrIN4tama7OnInputEEC1ERKS2_>:
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
 8000804:	6039      	str	r1, [r7, #0]
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	683a      	ldr	r2, [r7, #0]
 800080a:	4611      	mov	r1, r2
 800080c:	4618      	mov	r0, r3
 800080e:	f7ff ffd1 	bl	80007b4 <_ZNSt12__shared_ptrIN4tama7OnInputELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	4618      	mov	r0, r3
 8000816:	3708      	adds	r7, #8
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}

0800081c <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama7OnInputEEE9constructIS4_JRKS4_EEEvPT_DpOT0_>:
      { return size_t(-1) / sizeof(_Tp); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 800081c:	b590      	push	{r4, r7, lr}
 800081e:	b085      	sub	sp, #20
 8000820:	af00      	add	r7, sp, #0
 8000822:	60f8      	str	r0, [r7, #12]
 8000824:	60b9      	str	r1, [r7, #8]
 8000826:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8000828:	6878      	ldr	r0, [r7, #4]
 800082a:	f7ff ff08 	bl	800063e <_ZSt7forwardIRKSt10shared_ptrIN4tama7OnInputEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800082e:	4604      	mov	r4, r0
 8000830:	68bb      	ldr	r3, [r7, #8]
 8000832:	4619      	mov	r1, r3
 8000834:	2008      	movs	r0, #8
 8000836:	f7ff fe82 	bl	800053e <_ZnwjPv>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d003      	beq.n	8000848 <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama7OnInputEEE9constructIS4_JRKS4_EEEvPT_DpOT0_+0x2c>
 8000840:	4621      	mov	r1, r4
 8000842:	4618      	mov	r0, r3
 8000844:	f7ff ffda 	bl	80007fc <_ZNSt10shared_ptrIN4tama7OnInputEEC1ERKS2_>
 8000848:	bf00      	nop
 800084a:	3714      	adds	r7, #20
 800084c:	46bd      	mov	sp, r7
 800084e:	bd90      	pop	{r4, r7, pc}

08000850 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama7OnInputEESt6vectorIS4_SaIS4_EEEC1ERKS5_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
 8000858:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	681a      	ldr	r2, [r3, #0]
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	601a      	str	r2, [r3, #0]
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	4618      	mov	r0, r3
 8000866:	370c      	adds	r7, #12
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr

08000870 <_ZNKSt6vectorISt10shared_ptrIN4tama7OnInputEESaIS3_EE12_M_check_lenEjPKc>:
      { return _M_insert_rval(__position, std::move(__v)); }
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
 8000870:	b590      	push	{r4, r7, lr}
 8000872:	b087      	sub	sp, #28
 8000874:	af00      	add	r7, sp, #0
 8000876:	60f8      	str	r0, [r7, #12]
 8000878:	60b9      	str	r1, [r7, #8]
 800087a:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 800087c:	68f8      	ldr	r0, [r7, #12]
 800087e:	f000 f8f2 	bl	8000a66 <_ZNKSt6vectorISt10shared_ptrIN4tama7OnInputEESaIS3_EE8max_sizeEv>
 8000882:	4604      	mov	r4, r0
 8000884:	68f8      	ldr	r0, [r7, #12]
 8000886:	f000 f8ff 	bl	8000a88 <_ZNKSt6vectorISt10shared_ptrIN4tama7OnInputEESaIS3_EE4sizeEv>
 800088a:	4603      	mov	r3, r0
 800088c:	1ae2      	subs	r2, r4, r3
 800088e:	68bb      	ldr	r3, [r7, #8]
 8000890:	429a      	cmp	r2, r3
 8000892:	bf34      	ite	cc
 8000894:	2301      	movcc	r3, #1
 8000896:	2300      	movcs	r3, #0
 8000898:	b2db      	uxtb	r3, r3
 800089a:	2b00      	cmp	r3, #0
 800089c:	d003      	beq.n	80008a6 <_ZNKSt6vectorISt10shared_ptrIN4tama7OnInputEESaIS3_EE12_M_check_lenEjPKc+0x36>
	  __throw_length_error(__N(__s));
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	4618      	mov	r0, r3
 80008a2:	f016 fe3c 	bl	801751e <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + std::max(size(), __n);
 80008a6:	68f8      	ldr	r0, [r7, #12]
 80008a8:	f000 f8ee 	bl	8000a88 <_ZNKSt6vectorISt10shared_ptrIN4tama7OnInputEESaIS3_EE4sizeEv>
 80008ac:	4604      	mov	r4, r0
 80008ae:	68f8      	ldr	r0, [r7, #12]
 80008b0:	f000 f8ea 	bl	8000a88 <_ZNKSt6vectorISt10shared_ptrIN4tama7OnInputEESaIS3_EE4sizeEv>
 80008b4:	4603      	mov	r3, r0
 80008b6:	613b      	str	r3, [r7, #16]
 80008b8:	f107 0208 	add.w	r2, r7, #8
 80008bc:	f107 0310 	add.w	r3, r7, #16
 80008c0:	4611      	mov	r1, r2
 80008c2:	4618      	mov	r0, r3
 80008c4:	f000 f8f1 	bl	8000aaa <_ZSt3maxIjERKT_S2_S2_>
 80008c8:	4603      	mov	r3, r0
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4423      	add	r3, r4
 80008ce:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80008d0:	68f8      	ldr	r0, [r7, #12]
 80008d2:	f000 f8d9 	bl	8000a88 <_ZNKSt6vectorISt10shared_ptrIN4tama7OnInputEESaIS3_EE4sizeEv>
 80008d6:	4602      	mov	r2, r0
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	4293      	cmp	r3, r2
 80008dc:	d306      	bcc.n	80008ec <_ZNKSt6vectorISt10shared_ptrIN4tama7OnInputEESaIS3_EE12_M_check_lenEjPKc+0x7c>
 80008de:	68f8      	ldr	r0, [r7, #12]
 80008e0:	f000 f8c1 	bl	8000a66 <_ZNKSt6vectorISt10shared_ptrIN4tama7OnInputEESaIS3_EE8max_sizeEv>
 80008e4:	4602      	mov	r2, r0
 80008e6:	697b      	ldr	r3, [r7, #20]
 80008e8:	4293      	cmp	r3, r2
 80008ea:	d904      	bls.n	80008f6 <_ZNKSt6vectorISt10shared_ptrIN4tama7OnInputEESaIS3_EE12_M_check_lenEjPKc+0x86>
 80008ec:	68f8      	ldr	r0, [r7, #12]
 80008ee:	f000 f8ba 	bl	8000a66 <_ZNKSt6vectorISt10shared_ptrIN4tama7OnInputEESaIS3_EE8max_sizeEv>
 80008f2:	4603      	mov	r3, r0
 80008f4:	e000      	b.n	80008f8 <_ZNKSt6vectorISt10shared_ptrIN4tama7OnInputEESaIS3_EE12_M_check_lenEjPKc+0x88>
 80008f6:	697b      	ldr	r3, [r7, #20]
      }
 80008f8:	4618      	mov	r0, r3
 80008fa:	371c      	adds	r7, #28
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd90      	pop	{r4, r7, pc}

08000900 <_ZNSt6vectorISt10shared_ptrIN4tama7OnInputEESaIS3_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8000908:	687a      	ldr	r2, [r7, #4]
 800090a:	f107 030c 	add.w	r3, r7, #12
 800090e:	4611      	mov	r1, r2
 8000910:	4618      	mov	r0, r3
 8000912:	f7ff ff9d 	bl	8000850 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama7OnInputEESt6vectorIS4_SaIS4_EEEC1ERKS5_>
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	4618      	mov	r0, r3
 800091a:	3710      	adds	r7, #16
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}

08000920 <_ZN9__gnu_cxxmiIPSt10shared_ptrIN4tama7OnInputEESt6vectorIS4_SaIS4_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_>:
#endif
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8000920:	b590      	push	{r4, r7, lr}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
 8000928:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 800092a:	6878      	ldr	r0, [r7, #4]
 800092c:	f000 f822 	bl	8000974 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama7OnInputEESt6vectorIS4_SaIS4_EEE4baseEv>
 8000930:	4603      	mov	r3, r0
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	461c      	mov	r4, r3
 8000936:	6838      	ldr	r0, [r7, #0]
 8000938:	f000 f81c 	bl	8000974 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama7OnInputEESt6vectorIS4_SaIS4_EEE4baseEv>
 800093c:	4603      	mov	r3, r0
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	1ae3      	subs	r3, r4, r3
 8000942:	10db      	asrs	r3, r3, #3
 8000944:	4618      	mov	r0, r3
 8000946:	370c      	adds	r7, #12
 8000948:	46bd      	mov	sp, r7
 800094a:	bd90      	pop	{r4, r7, pc}

0800094c <_ZNSt12_Vector_baseISt10shared_ptrIN4tama7OnInputEESaIS3_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
 8000954:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d006      	beq.n	800096a <_ZNSt12_Vector_baseISt10shared_ptrIN4tama7OnInputEESaIS3_EE11_M_allocateEj+0x1e>
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	6839      	ldr	r1, [r7, #0]
 8000960:	4618      	mov	r0, r3
 8000962:	f000 f8b6 	bl	8000ad2 <_ZNSt16allocator_traitsISaISt10shared_ptrIN4tama7OnInputEEEE8allocateERS4_j>
 8000966:	4603      	mov	r3, r0
 8000968:	e000      	b.n	800096c <_ZNSt12_Vector_baseISt10shared_ptrIN4tama7OnInputEESaIS3_EE11_M_allocateEj+0x20>
 800096a:	2300      	movs	r3, #0
      }
 800096c:	4618      	mov	r0, r3
 800096e:	3708      	adds	r7, #8
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}

08000974 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama7OnInputEESt6vectorIS4_SaIS4_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	4618      	mov	r0, r3
 8000980:	370c      	adds	r7, #12
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr

0800098a <_ZNSt12_Vector_baseISt10shared_ptrIN4tama7OnInputEESaIS3_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800098a:	b480      	push	{r7}
 800098c:	b083      	sub	sp, #12
 800098e:	af00      	add	r7, sp, #0
 8000990:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	4618      	mov	r0, r3
 8000996:	370c      	adds	r7, #12
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr

080009a0 <_ZSt34__uninitialized_move_if_noexcept_aIPSt10shared_ptrIN4tama7OnInputEES4_SaIS3_EET0_T_S7_S6_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 80009a0:	b590      	push	{r4, r7, lr}
 80009a2:	b085      	sub	sp, #20
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	60f8      	str	r0, [r7, #12]
 80009a8:	60b9      	str	r1, [r7, #8]
 80009aa:	607a      	str	r2, [r7, #4]
 80009ac:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 80009ae:	68f8      	ldr	r0, [r7, #12]
 80009b0:	f000 f89e 	bl	8000af0 <_ZSt32__make_move_if_noexcept_iteratorISt10shared_ptrIN4tama7OnInputEESt13move_iteratorIPS3_EET0_PT_>
 80009b4:	4604      	mov	r4, r0
 80009b6:	68b8      	ldr	r0, [r7, #8]
 80009b8:	f000 f89a 	bl	8000af0 <_ZSt32__make_move_if_noexcept_iteratorISt10shared_ptrIN4tama7OnInputEESt13move_iteratorIPS3_EET0_PT_>
 80009bc:	4601      	mov	r1, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	687a      	ldr	r2, [r7, #4]
 80009c2:	4620      	mov	r0, r4
 80009c4:	f000 f8a3 	bl	8000b0e <_ZSt22__uninitialized_copy_aISt13move_iteratorIPSt10shared_ptrIN4tama7OnInputEEES5_S4_ET0_T_S8_S7_RSaIT1_E>
 80009c8:	4603      	mov	r3, r0
    }
 80009ca:	4618      	mov	r0, r3
 80009cc:	3714      	adds	r7, #20
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd90      	pop	{r4, r7, pc}

080009d2 <_ZSt8_DestroyIPSt10shared_ptrIN4tama7OnInputEES3_EvT_S5_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80009d2:	b580      	push	{r7, lr}
 80009d4:	b084      	sub	sp, #16
 80009d6:	af00      	add	r7, sp, #0
 80009d8:	60f8      	str	r0, [r7, #12]
 80009da:	60b9      	str	r1, [r7, #8]
 80009dc:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 80009de:	68b9      	ldr	r1, [r7, #8]
 80009e0:	68f8      	ldr	r0, [r7, #12]
 80009e2:	f000 f8b2 	bl	8000b4a <_ZSt8_DestroyIPSt10shared_ptrIN4tama7OnInputEEEvT_S5_>
    }
 80009e6:	bf00      	nop
 80009e8:	3710      	adds	r7, #16
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}

080009ee <_ZNSt12_Vector_baseISt10shared_ptrIN4tama7OnInputEESaIS3_EE13_M_deallocateEPS3_j>:
      _M_deallocate(pointer __p, size_t __n)
 80009ee:	b580      	push	{r7, lr}
 80009f0:	b084      	sub	sp, #16
 80009f2:	af00      	add	r7, sp, #0
 80009f4:	60f8      	str	r0, [r7, #12]
 80009f6:	60b9      	str	r1, [r7, #8]
 80009f8:	607a      	str	r2, [r7, #4]
	if (__p)
 80009fa:	68bb      	ldr	r3, [r7, #8]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d005      	beq.n	8000a0c <_ZNSt12_Vector_baseISt10shared_ptrIN4tama7OnInputEESaIS3_EE13_M_deallocateEPS3_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	687a      	ldr	r2, [r7, #4]
 8000a04:	68b9      	ldr	r1, [r7, #8]
 8000a06:	4618      	mov	r0, r3
 8000a08:	f000 f8ac 	bl	8000b64 <_ZNSt16allocator_traitsISaISt10shared_ptrIN4tama7OnInputEEEE10deallocateERS4_PS3_j>
      }
 8000a0c:	bf00      	nop
 8000a0e:	3710      	adds	r7, #16
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}

08000a14 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      __shared_count(const __shared_count& __r) noexcept
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
 8000a1c:	6039      	str	r1, [r7, #0]
      : _M_pi(__r._M_pi)
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	681a      	ldr	r2, [r3, #0]
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	601a      	str	r2, [r3, #0]
	if (_M_pi != 0)
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d004      	beq.n	8000a38 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0x24>
	  _M_pi->_M_add_ref_copy();
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	4618      	mov	r0, r3
 8000a34:	f7ff fd8f 	bl	8000556 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_add_ref_copyEv>
      }
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	3708      	adds	r7, #8
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}

08000a42 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
 8000a42:	b580      	push	{r7, lr}
 8000a44:	b082      	sub	sp, #8
 8000a46:	af00      	add	r7, sp, #0
 8000a48:	6078      	str	r0, [r7, #4]
	if (_M_pi != nullptr)
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d004      	beq.n	8000a5c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x1a>
	  _M_pi->_M_release();
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4618      	mov	r0, r3
 8000a58:	f7ff fd8c 	bl	8000574 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	4618      	mov	r0, r3
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}

08000a66 <_ZNKSt6vectorISt10shared_ptrIN4tama7OnInputEESaIS3_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8000a66:	b580      	push	{r7, lr}
 8000a68:	b082      	sub	sp, #8
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	4618      	mov	r0, r3
 8000a72:	f000 f892 	bl	8000b9a <_ZNKSt12_Vector_baseISt10shared_ptrIN4tama7OnInputEESaIS3_EE19_M_get_Tp_allocatorEv>
 8000a76:	4603      	mov	r3, r0
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f000 f882 	bl	8000b82 <_ZNSt16allocator_traitsISaISt10shared_ptrIN4tama7OnInputEEEE8max_sizeERKS4_>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	4618      	mov	r0, r3
 8000a82:	3708      	adds	r7, #8
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}

08000a88 <_ZNKSt6vectorISt10shared_ptrIN4tama7OnInputEESaIS3_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	461a      	mov	r2, r3
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	1ad3      	subs	r3, r2, r3
 8000a9c:	10db      	asrs	r3, r3, #3
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	370c      	adds	r7, #12
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr

08000aaa <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8000aaa:	b480      	push	{r7}
 8000aac:	b083      	sub	sp, #12
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	6078      	str	r0, [r7, #4]
 8000ab2:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681a      	ldr	r2, [r3, #0]
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	429a      	cmp	r2, r3
 8000abe:	d201      	bcs.n	8000ac4 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	e000      	b.n	8000ac6 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8000ac4:	687b      	ldr	r3, [r7, #4]
    }
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	370c      	adds	r7, #12
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr

08000ad2 <_ZNSt16allocator_traitsISaISt10shared_ptrIN4tama7OnInputEEEE8allocateERS4_j>:
      allocate(allocator_type& __a, size_type __n)
 8000ad2:	b580      	push	{r7, lr}
 8000ad4:	b082      	sub	sp, #8
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	6078      	str	r0, [r7, #4]
 8000ada:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8000adc:	2200      	movs	r2, #0
 8000ade:	6839      	ldr	r1, [r7, #0]
 8000ae0:	6878      	ldr	r0, [r7, #4]
 8000ae2:	f000 f865 	bl	8000bb0 <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama7OnInputEEE8allocateEjPKv>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	4618      	mov	r0, r3
 8000aea:	3708      	adds	r7, #8
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <_ZSt32__make_move_if_noexcept_iteratorISt10shared_ptrIN4tama7OnInputEESt13move_iteratorIPS3_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8000af8:	f107 030c 	add.w	r3, r7, #12
 8000afc:	6879      	ldr	r1, [r7, #4]
 8000afe:	4618      	mov	r0, r3
 8000b00:	f000 f874 	bl	8000bec <_ZNSt13move_iteratorIPSt10shared_ptrIN4tama7OnInputEEEC1ES4_>
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	4618      	mov	r0, r3
 8000b08:	3710      	adds	r7, #16
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}

08000b0e <_ZSt22__uninitialized_copy_aISt13move_iteratorIPSt10shared_ptrIN4tama7OnInputEEES5_S4_ET0_T_S8_S7_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8000b0e:	b580      	push	{r7, lr}
 8000b10:	b084      	sub	sp, #16
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	60f8      	str	r0, [r7, #12]
 8000b16:	60b9      	str	r1, [r7, #8]
 8000b18:	607a      	str	r2, [r7, #4]
 8000b1a:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8000b1c:	687a      	ldr	r2, [r7, #4]
 8000b1e:	68b9      	ldr	r1, [r7, #8]
 8000b20:	68f8      	ldr	r0, [r7, #12]
 8000b22:	f000 f872 	bl	8000c0a <_ZSt18uninitialized_copyISt13move_iteratorIPSt10shared_ptrIN4tama7OnInputEEES5_ET0_T_S8_S7_>
 8000b26:	4603      	mov	r3, r0
 8000b28:	4618      	mov	r0, r3
 8000b2a:	3710      	adds	r7, #16
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}

08000b30 <_ZNSt10shared_ptrIN4tama7OnInputEED1Ev>:
    class shared_ptr : public __shared_ptr<_Tp>
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f7ff fe50 	bl	80007e0 <_ZNSt12__shared_ptrIN4tama7OnInputELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	4618      	mov	r0, r3
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}

08000b4a <_ZSt8_DestroyIPSt10shared_ptrIN4tama7OnInputEEEvT_S5_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	b082      	sub	sp, #8
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	6078      	str	r0, [r7, #4]
 8000b52:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8000b54:	6839      	ldr	r1, [r7, #0]
 8000b56:	6878      	ldr	r0, [r7, #4]
 8000b58:	f000 f874 	bl	8000c44 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt10shared_ptrIN4tama7OnInputEEEEvT_S7_>
    }
 8000b5c:	bf00      	nop
 8000b5e:	3708      	adds	r7, #8
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <_ZNSt16allocator_traitsISaISt10shared_ptrIN4tama7OnInputEEEE10deallocateERS4_PS3_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	60f8      	str	r0, [r7, #12]
 8000b6c:	60b9      	str	r1, [r7, #8]
 8000b6e:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8000b70:	687a      	ldr	r2, [r7, #4]
 8000b72:	68b9      	ldr	r1, [r7, #8]
 8000b74:	68f8      	ldr	r0, [r7, #12]
 8000b76:	f000 f87d 	bl	8000c74 <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama7OnInputEEE10deallocateEPS4_j>
 8000b7a:	bf00      	nop
 8000b7c:	3710      	adds	r7, #16
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}

08000b82 <_ZNSt16allocator_traitsISaISt10shared_ptrIN4tama7OnInputEEEE8max_sizeERKS4_>:
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */
      static size_type
      max_size(const allocator_type& __a) noexcept
 8000b82:	b580      	push	{r7, lr}
 8000b84:	b082      	sub	sp, #8
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8000b8a:	6878      	ldr	r0, [r7, #4]
 8000b8c:	f000 f87f 	bl	8000c8e <_ZNK9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama7OnInputEEE8max_sizeEv>
 8000b90:	4603      	mov	r3, r0
 8000b92:	4618      	mov	r0, r3
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}

08000b9a <_ZNKSt12_Vector_baseISt10shared_ptrIN4tama7OnInputEESaIS3_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8000b9a:	b480      	push	{r7}
 8000b9c:	b083      	sub	sp, #12
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	370c      	adds	r7, #12
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr

08000bb0 <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama7OnInputEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b084      	sub	sp, #16
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	60f8      	str	r0, [r7, #12]
 8000bb8:	60b9      	str	r1, [r7, #8]
 8000bba:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8000bbc:	68f8      	ldr	r0, [r7, #12]
 8000bbe:	f000 f866 	bl	8000c8e <_ZNK9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama7OnInputEEE8max_sizeEv>
 8000bc2:	4602      	mov	r2, r0
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	bf8c      	ite	hi
 8000bca:	2301      	movhi	r3, #1
 8000bcc:	2300      	movls	r3, #0
 8000bce:	b2db      	uxtb	r3, r3
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama7OnInputEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8000bd4:	f016 fc9d 	bl	8017512 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	00db      	lsls	r3, r3, #3
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f016 fc6a 	bl	80174b6 <_Znwj>
 8000be2:	4603      	mov	r3, r0
      }
 8000be4:	4618      	mov	r0, r3
 8000be6:	3710      	adds	r7, #16
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}

08000bec <_ZNSt13move_iteratorIPSt10shared_ptrIN4tama7OnInputEEEC1ES4_>:
      move_iterator(iterator_type __i)
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
 8000bf4:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	683a      	ldr	r2, [r7, #0]
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	4618      	mov	r0, r3
 8000c00:	370c      	adds	r7, #12
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr

08000c0a <_ZSt18uninitialized_copyISt13move_iteratorIPSt10shared_ptrIN4tama7OnInputEEES5_ET0_T_S8_S7_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8000c0a:	b580      	push	{r7, lr}
 8000c0c:	b086      	sub	sp, #24
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	60f8      	str	r0, [r7, #12]
 8000c12:	60b9      	str	r1, [r7, #8]
 8000c14:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8000c16:	2301      	movs	r3, #1
 8000c18:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8000c1a:	687a      	ldr	r2, [r7, #4]
 8000c1c:	68b9      	ldr	r1, [r7, #8]
 8000c1e:	68f8      	ldr	r0, [r7, #12]
 8000c20:	f000 f841 	bl	8000ca6 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPSt10shared_ptrIN4tama7OnInputEEES7_EET0_T_SA_S9_>
 8000c24:	4603      	mov	r3, r0
    }
 8000c26:	4618      	mov	r0, r3
 8000c28:	3718      	adds	r7, #24
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <_ZSt11__addressofISt10shared_ptrIN4tama7OnInputEEEPT_RS4_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8000c2e:	b480      	push	{r7}
 8000c30:	b083      	sub	sp, #12
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	4618      	mov	r0, r3
 8000c3a:	370c      	adds	r7, #12
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr

08000c44 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt10shared_ptrIN4tama7OnInputEEEEvT_S7_>:
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
 8000c4c:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8000c4e:	687a      	ldr	r2, [r7, #4]
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	429a      	cmp	r2, r3
 8000c54:	d00a      	beq.n	8000c6c <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt10shared_ptrIN4tama7OnInputEEEEvT_S7_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 8000c56:	6878      	ldr	r0, [r7, #4]
 8000c58:	f7ff ffe9 	bl	8000c2e <_ZSt11__addressofISt10shared_ptrIN4tama7OnInputEEEPT_RS4_>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f000 f850 	bl	8000d04 <_ZSt8_DestroyISt10shared_ptrIN4tama7OnInputEEEvPT_>
	  for (; __first != __last; ++__first)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	3308      	adds	r3, #8
 8000c68:	607b      	str	r3, [r7, #4]
 8000c6a:	e7f0      	b.n	8000c4e <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt10shared_ptrIN4tama7OnInputEEEEvT_S7_+0xa>
	}
 8000c6c:	bf00      	nop
 8000c6e:	3708      	adds	r7, #8
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}

08000c74 <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama7OnInputEEE10deallocateEPS4_j>:
      deallocate(pointer __p, size_type)
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	60f8      	str	r0, [r7, #12]
 8000c7c:	60b9      	str	r1, [r7, #8]
 8000c7e:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8000c80:	68b8      	ldr	r0, [r7, #8]
 8000c82:	f016 fc31 	bl	80174e8 <_ZdlPv>
      }
 8000c86:	bf00      	nop
 8000c88:	3710      	adds	r7, #16
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <_ZNK9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama7OnInputEEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8000c8e:	b480      	push	{r7}
 8000c90:	b083      	sub	sp, #12
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8000c96:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	370c      	adds	r7, #12
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr

08000ca6 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPSt10shared_ptrIN4tama7OnInputEEES7_EET0_T_SA_S9_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8000ca6:	b590      	push	{r4, r7, lr}
 8000ca8:	b087      	sub	sp, #28
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	60f8      	str	r0, [r7, #12]
 8000cae:	60b9      	str	r1, [r7, #8]
 8000cb0:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 8000cb6:	f107 0208 	add.w	r2, r7, #8
 8000cba:	f107 030c 	add.w	r3, r7, #12
 8000cbe:	4611      	mov	r1, r2
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f000 f82a 	bl	8000d1a <_ZStneIPSt10shared_ptrIN4tama7OnInputEEEbRKSt13move_iteratorIT_ES9_>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d016      	beq.n	8000cfa <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPSt10shared_ptrIN4tama7OnInputEEES7_EET0_T_SA_S9_+0x54>
		std::_Construct(std::__addressof(*__cur), *__first);
 8000ccc:	6978      	ldr	r0, [r7, #20]
 8000cce:	f7ff ffae 	bl	8000c2e <_ZSt11__addressofISt10shared_ptrIN4tama7OnInputEEEPT_RS4_>
 8000cd2:	4604      	mov	r4, r0
 8000cd4:	f107 030c 	add.w	r3, r7, #12
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f000 f840 	bl	8000d5e <_ZNKSt13move_iteratorIPSt10shared_ptrIN4tama7OnInputEEEdeEv>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	4620      	mov	r0, r4
 8000ce4:	f000 f852 	bl	8000d8c <_ZSt10_ConstructISt10shared_ptrIN4tama7OnInputEEJS3_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 8000ce8:	f107 030c 	add.w	r3, r7, #12
 8000cec:	4618      	mov	r0, r3
 8000cee:	f000 f825 	bl	8000d3c <_ZNSt13move_iteratorIPSt10shared_ptrIN4tama7OnInputEEEppEv>
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	3308      	adds	r3, #8
 8000cf6:	617b      	str	r3, [r7, #20]
 8000cf8:	e7dd      	b.n	8000cb6 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPSt10shared_ptrIN4tama7OnInputEEES7_EET0_T_SA_S9_+0x10>
	      return __cur;
 8000cfa:	697b      	ldr	r3, [r7, #20]
	}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	371c      	adds	r7, #28
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd90      	pop	{r4, r7, pc}

08000d04 <_ZSt8_DestroyISt10shared_ptrIN4tama7OnInputEEEvPT_>:
    _Destroy(_Tp* __pointer)
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
    { __pointer->~_Tp(); }
 8000d0c:	6878      	ldr	r0, [r7, #4]
 8000d0e:	f7ff ff0f 	bl	8000b30 <_ZNSt10shared_ptrIN4tama7OnInputEED1Ev>
 8000d12:	bf00      	nop
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}

08000d1a <_ZStneIPSt10shared_ptrIN4tama7OnInputEEEbRKSt13move_iteratorIT_ES9_>:
    operator!=(const move_iterator<_Iterator>& __x,
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	b082      	sub	sp, #8
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	6078      	str	r0, [r7, #4]
 8000d22:	6039      	str	r1, [r7, #0]
    { return !(__x == __y); }
 8000d24:	6839      	ldr	r1, [r7, #0]
 8000d26:	6878      	ldr	r0, [r7, #4]
 8000d28:	f000 f849 	bl	8000dbe <_ZSteqIPSt10shared_ptrIN4tama7OnInputEEEbRKSt13move_iteratorIT_ES9_>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	f083 0301 	eor.w	r3, r3, #1
 8000d32:	b2db      	uxtb	r3, r3
 8000d34:	4618      	mov	r0, r3
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <_ZNSt13move_iteratorIPSt10shared_ptrIN4tama7OnInputEEEppEv>:
      operator++()
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
	++_M_current;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f103 0208 	add.w	r2, r3, #8
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	601a      	str	r2, [r3, #0]
	return *this;
 8000d50:	687b      	ldr	r3, [r7, #4]
      }
 8000d52:	4618      	mov	r0, r3
 8000d54:	370c      	adds	r7, #12
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr

08000d5e <_ZNKSt13move_iteratorIPSt10shared_ptrIN4tama7OnInputEEEdeEv>:
      operator*() const
 8000d5e:	b480      	push	{r7}
 8000d60:	b083      	sub	sp, #12
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	6078      	str	r0, [r7, #4]
      { return static_cast<reference>(*_M_current); }
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	370c      	adds	r7, #12
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr

08000d76 <_ZSt7forwardISt10shared_ptrIN4tama7OnInputEEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8000d76:	b480      	push	{r7}
 8000d78:	b083      	sub	sp, #12
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4618      	mov	r0, r3
 8000d82:	370c      	adds	r7, #12
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr

08000d8c <_ZSt10_ConstructISt10shared_ptrIN4tama7OnInputEEJS3_EEvPT_DpOT0_>:
    _Construct(_T1* __p, _Args&&... __args)
 8000d8c:	b590      	push	{r4, r7, lr}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	6039      	str	r1, [r7, #0]
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
 8000d96:	6838      	ldr	r0, [r7, #0]
 8000d98:	f7ff ffed 	bl	8000d76 <_ZSt7forwardISt10shared_ptrIN4tama7OnInputEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8000d9c:	4604      	mov	r4, r0
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4619      	mov	r1, r3
 8000da2:	2008      	movs	r0, #8
 8000da4:	f7ff fbcb 	bl	800053e <_ZnwjPv>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d003      	beq.n	8000db6 <_ZSt10_ConstructISt10shared_ptrIN4tama7OnInputEEJS3_EEvPT_DpOT0_+0x2a>
 8000dae:	4621      	mov	r1, r4
 8000db0:	4618      	mov	r0, r3
 8000db2:	f000 f825 	bl	8000e00 <_ZNSt10shared_ptrIN4tama7OnInputEEC1EOS2_>
 8000db6:	bf00      	nop
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd90      	pop	{r4, r7, pc}

08000dbe <_ZSteqIPSt10shared_ptrIN4tama7OnInputEEEbRKSt13move_iteratorIT_ES9_>:
    operator==(const move_iterator<_Iterator>& __x,
 8000dbe:	b590      	push	{r4, r7, lr}
 8000dc0:	b083      	sub	sp, #12
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	6078      	str	r0, [r7, #4]
 8000dc6:	6039      	str	r1, [r7, #0]
    { return __x.base() == __y.base(); }
 8000dc8:	6878      	ldr	r0, [r7, #4]
 8000dca:	f000 f82c 	bl	8000e26 <_ZNKSt13move_iteratorIPSt10shared_ptrIN4tama7OnInputEEE4baseEv>
 8000dce:	4604      	mov	r4, r0
 8000dd0:	6838      	ldr	r0, [r7, #0]
 8000dd2:	f000 f828 	bl	8000e26 <_ZNKSt13move_iteratorIPSt10shared_ptrIN4tama7OnInputEEE4baseEv>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	429c      	cmp	r4, r3
 8000dda:	bf0c      	ite	eq
 8000ddc:	2301      	moveq	r3, #1
 8000dde:	2300      	movne	r3, #0
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	4618      	mov	r0, r3
 8000de4:	370c      	adds	r7, #12
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd90      	pop	{r4, r7, pc}

08000dea <_ZSt4moveIRSt10shared_ptrIN4tama7OnInputEEEONSt16remove_referenceIT_E4typeEOS6_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8000dea:	b480      	push	{r7}
 8000dec:	b083      	sub	sp, #12
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4618      	mov	r0, r3
 8000df6:	370c      	adds	r7, #12
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr

08000e00 <_ZNSt10shared_ptrIN4tama7OnInputEEC1EOS2_>:
      /**
       *  @brief  Move-constructs a %shared_ptr instance from @a __r.
       *  @param  __r  A %shared_ptr rvalue.
       *  @post   *this contains the old value of @a __r, @a __r is empty.
       */
      shared_ptr(shared_ptr&& __r) noexcept
 8000e00:	b590      	push	{r4, r7, lr}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
 8000e08:	6039      	str	r1, [r7, #0]
      : __shared_ptr<_Tp>(std::move(__r)) { }
 8000e0a:	687c      	ldr	r4, [r7, #4]
 8000e0c:	6838      	ldr	r0, [r7, #0]
 8000e0e:	f7ff ffec 	bl	8000dea <_ZSt4moveIRSt10shared_ptrIN4tama7OnInputEEEONSt16remove_referenceIT_E4typeEOS6_>
 8000e12:	4603      	mov	r3, r0
 8000e14:	4619      	mov	r1, r3
 8000e16:	4620      	mov	r0, r4
 8000e18:	f000 f811 	bl	8000e3e <_ZNSt12__shared_ptrIN4tama7OnInputELN9__gnu_cxx12_Lock_policyE0EEC1EOS4_>
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	4618      	mov	r0, r3
 8000e20:	370c      	adds	r7, #12
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd90      	pop	{r4, r7, pc}

08000e26 <_ZNKSt13move_iteratorIPSt10shared_ptrIN4tama7OnInputEEE4baseEv>:
      base() const
 8000e26:	b480      	push	{r7}
 8000e28:	b083      	sub	sp, #12
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4618      	mov	r0, r3
 8000e34:	370c      	adds	r7, #12
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr

08000e3e <_ZNSt12__shared_ptrIN4tama7OnInputELN9__gnu_cxx12_Lock_policyE0EEC1EOS4_>:
      template<typename _Yp, typename = _Compatible<_Yp>>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	b082      	sub	sp, #8
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	6078      	str	r0, [r7, #4]
 8000e46:	6039      	str	r1, [r7, #0]
      : _M_ptr(__r._M_ptr), _M_refcount()
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	3304      	adds	r3, #4
 8000e54:	4618      	mov	r0, r3
 8000e56:	f000 f810 	bl	8000e7a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
      {
	_M_refcount._M_swap(__r._M_refcount);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	1d1a      	adds	r2, r3, #4
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	3304      	adds	r3, #4
 8000e62:	4619      	mov	r1, r3
 8000e64:	4610      	mov	r0, r2
 8000e66:	f000 f816 	bl	8000e96 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	__r._M_ptr = 0;
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
      }
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	4618      	mov	r0, r3
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}

08000e7a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      constexpr __shared_count() noexcept : _M_pi(0)
 8000e7a:	b480      	push	{r7}
 8000e7c:	b083      	sub	sp, #12
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	6078      	str	r0, [r7, #4]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
      { }
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	370c      	adds	r7, #12
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr

08000e96 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>:
      _M_swap(__shared_count& __r) noexcept
 8000e96:	b480      	push	{r7}
 8000e98:	b085      	sub	sp, #20
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
 8000e9e:	6039      	str	r1, [r7, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	60fb      	str	r3, [r7, #12]
	__r._M_pi = _M_pi;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	601a      	str	r2, [r3, #0]
	_M_pi = __tmp;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	68fa      	ldr	r2, [r7, #12]
 8000eb2:	601a      	str	r2, [r3, #0]
      }
 8000eb4:	bf00      	nop
 8000eb6:	3714      	adds	r7, #20
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr

08000ec0 <_ZSt16__deque_buf_sizej>:
#define _GLIBCXX_DEQUE_BUF_SIZE 512
#endif

  _GLIBCXX_CONSTEXPR inline size_t
  __deque_buf_size(size_t __size)
  { return (__size < _GLIBCXX_DEQUE_BUF_SIZE
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
	    ? size_t(_GLIBCXX_DEQUE_BUF_SIZE / __size) : size_t(1)); }
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ece:	d205      	bcs.n	8000edc <_ZSt16__deque_buf_sizej+0x1c>
 8000ed0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eda:	e000      	b.n	8000ede <_ZSt16__deque_buf_sizej+0x1e>
 8000edc:	2301      	movs	r3, #1
 8000ede:	4618      	mov	r0, r3
 8000ee0:	370c      	adds	r7, #12
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr

08000eea <_ZN4tama7Context12openNewStageESt10shared_ptrINS_5StageEE>:


#include <utility>

void tama::Context::openNewStage(std::shared_ptr<Stage> stage)
{
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b082      	sub	sp, #8
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	6078      	str	r0, [r7, #4]
 8000ef2:	6039      	str	r1, [r7, #0]
    stages.push(stage);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6839      	ldr	r1, [r7, #0]
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f000 f918 	bl	800112e <_ZNSt5stackISt10shared_ptrIN4tama5StageEESt5dequeIS3_SaIS3_EEE4pushERKS3_>
}
 8000efe:	bf00      	nop
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <_ZNSt12__shared_ptrIN4tama5StageELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b082      	sub	sp, #8
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	6078      	str	r0, [r7, #4]
 8000f0e:	6039      	str	r1, [r7, #0]
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	601a      	str	r2, [r3, #0]
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	1d1a      	adds	r2, r3, #4
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	3304      	adds	r3, #4
 8000f20:	4619      	mov	r1, r3
 8000f22:	4610      	mov	r0, r2
 8000f24:	f7ff fd76 	bl	8000a14 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}

08000f32 <_ZNSt12__shared_ptrIN4tama5StageELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_ptr() = default;
 8000f32:	b580      	push	{r7, lr}
 8000f34:	b082      	sub	sp, #8
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	6078      	str	r0, [r7, #4]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	3304      	adds	r3, #4
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f7ff fd7f 	bl	8000a42 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	4618      	mov	r0, r3
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}

08000f4e <_ZNSt10shared_ptrIN4tama5StageEEC1ERKS2_>:
      shared_ptr(const shared_ptr&) noexcept = default;
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b082      	sub	sp, #8
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	6078      	str	r0, [r7, #4]
 8000f56:	6039      	str	r1, [r7, #0]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	683a      	ldr	r2, [r7, #0]
 8000f5c:	4611      	mov	r1, r2
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f7ff ffd1 	bl	8000f06 <_ZNSt12__shared_ptrIN4tama5StageELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	4618      	mov	r0, r3
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}

08000f6e <_ZNSt10shared_ptrIN4tama5StageEED1Ev>:
    class shared_ptr : public __shared_ptr<_Tp>
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b082      	sub	sp, #8
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	6078      	str	r0, [r7, #4]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f7ff ffda 	bl	8000f32 <_ZNSt12__shared_ptrIN4tama5StageELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4618      	mov	r0, r3
 8000f82:	3708      	adds	r7, #8
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <_ZN4tama7Context14getActiveStageEv>:
    }
    stages.push(stage);
}

std::shared_ptr<tama::Stage> tama::Context::getActiveStage()
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	6039      	str	r1, [r7, #0]
    return stages.top(); // @todo return null object if no stage created
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	4618      	mov	r0, r3
 8000f96:	f000 f8d8 	bl	800114a <_ZNSt5stackISt10shared_ptrIN4tama5StageEESt5dequeIS3_SaIS3_EEE3topEv>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f7ff ffd5 	bl	8000f4e <_ZNSt10shared_ptrIN4tama5StageEEC1ERKS2_>
}
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	3708      	adds	r7, #8
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}

08000fac <_ZNSt12__shared_ptrIN4tama13TextureLoaderELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	6039      	str	r1, [r7, #0]
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	601a      	str	r2, [r3, #0]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	1d1a      	adds	r2, r3, #4
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	3304      	adds	r3, #4
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	4610      	mov	r0, r2
 8000fca:	f7ff fd23 	bl	8000a14 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <_ZNSt10shared_ptrIN4tama13TextureLoaderEEC1ERKS2_>:
      shared_ptr(const shared_ptr&) noexcept = default;
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	6039      	str	r1, [r7, #0]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	683a      	ldr	r2, [r7, #0]
 8000fe6:	4611      	mov	r1, r2
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff ffdf 	bl	8000fac <_ZNSt12__shared_ptrIN4tama13TextureLoaderELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <_ZNSt12__shared_ptrIN4tama5InputELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	6039      	str	r1, [r7, #0]
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	601a      	str	r2, [r3, #0]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	1d1a      	adds	r2, r3, #4
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	3304      	adds	r3, #4
 8001012:	4619      	mov	r1, r3
 8001014:	4610      	mov	r0, r2
 8001016:	f7ff fcfd 	bl	8000a14 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4618      	mov	r0, r3
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}

08001024 <_ZNSt10shared_ptrIN4tama5InputEEC1ERKS2_>:
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	6039      	str	r1, [r7, #0]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	683a      	ldr	r2, [r7, #0]
 8001032:	4611      	mov	r1, r2
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff ffdf 	bl	8000ff8 <_ZNSt12__shared_ptrIN4tama5InputELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4618      	mov	r0, r3
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}

08001044 <_ZNSt12__shared_ptrIN4tama11SoundPlayerELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	6039      	str	r1, [r7, #0]
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	1d1a      	adds	r2, r3, #4
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	3304      	adds	r3, #4
 800105e:	4619      	mov	r1, r3
 8001060:	4610      	mov	r0, r2
 8001062:	f7ff fcd7 	bl	8000a14 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4618      	mov	r0, r3
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}

08001070 <_ZNSt10shared_ptrIN4tama11SoundPlayerEEC1ERKS2_>:
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	6039      	str	r1, [r7, #0]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	683a      	ldr	r2, [r7, #0]
 800107e:	4611      	mov	r1, r2
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff ffdf 	bl	8001044 <_ZNSt12__shared_ptrIN4tama11SoundPlayerELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4618      	mov	r0, r3
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}

08001090 <_ZN4tama7ContextC1ESt10shared_ptrINS_13TextureLoaderEES1_INS_5InputEES1_INS_11SoundPlayerEE>:

tama::Context::Context(std::shared_ptr<TextureLoader> textureLoader, std::shared_ptr<Input> input, std::shared_ptr<SoundPlayer> player)
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	60f8      	str	r0, [r7, #12]
 8001098:	60b9      	str	r1, [r7, #8]
 800109a:	607a      	str	r2, [r7, #4]
 800109c:	603b      	str	r3, [r7, #0]
: textureLoader(textureLoader), input(input), player(player)
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	4618      	mov	r0, r3
 80010a2:	f000 f85f 	bl	8001164 <_ZNSt5stackISt10shared_ptrIN4tama5StageEESt5dequeIS3_SaIS3_EEEC1IS6_vEEv>
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	3328      	adds	r3, #40	; 0x28
 80010aa:	68b9      	ldr	r1, [r7, #8]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff ff93 	bl	8000fd8 <_ZNSt10shared_ptrIN4tama13TextureLoaderEEC1ERKS2_>
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	3330      	adds	r3, #48	; 0x30
 80010b6:	6879      	ldr	r1, [r7, #4]
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff ffb3 	bl	8001024 <_ZNSt10shared_ptrIN4tama5InputEEC1ERKS2_>
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	3338      	adds	r3, #56	; 0x38
 80010c2:	6839      	ldr	r1, [r7, #0]
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff ffd3 	bl	8001070 <_ZNSt10shared_ptrIN4tama11SoundPlayerEEC1ERKS2_>
{
}
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	4618      	mov	r0, r3
 80010ce:	3710      	adds	r7, #16
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <_ZN4tama7Context16getTextureLoaderEv>:

std::shared_ptr<tama::TextureLoader> tama::Context::getTextureLoader()
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	6039      	str	r1, [r7, #0]
    return textureLoader;
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	3328      	adds	r3, #40	; 0x28
 80010e2:	4619      	mov	r1, r3
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f7ff ff77 	bl	8000fd8 <_ZNSt10shared_ptrIN4tama13TextureLoaderEEC1ERKS2_>
}
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <_ZN4tama7Context8getInputEv>:

std::shared_ptr<tama::Input> tama::Context::getInput()
{
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b082      	sub	sp, #8
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
 80010fa:	6039      	str	r1, [r7, #0]
    return input;
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	3330      	adds	r3, #48	; 0x30
 8001100:	4619      	mov	r1, r3
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f7ff ff8e 	bl	8001024 <_ZNSt10shared_ptrIN4tama5InputEEC1ERKS2_>
}
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}

08001110 <_ZN4tama7Context14getSoundPlayerEv>:

std::shared_ptr<tama::SoundPlayer> tama::Context::getSoundPlayer()
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	6039      	str	r1, [r7, #0]
    return player;
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	3338      	adds	r3, #56	; 0x38
 800111e:	4619      	mov	r1, r3
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f7ff ffa5 	bl	8001070 <_ZNSt10shared_ptrIN4tama11SoundPlayerEEC1ERKS2_>
}
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <_ZNSt5stackISt10shared_ptrIN4tama5StageEESt5dequeIS3_SaIS3_EEE4pushERKS3_>:
       *  element at the top of the %stack and assigns the given data
       *  to it.  The time complexity of the operation depends on the
       *  underlying sequence.
       */
      void
      push(const value_type& __x)
 800112e:	b580      	push	{r7, lr}
 8001130:	b082      	sub	sp, #8
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
 8001136:	6039      	str	r1, [r7, #0]
      { c.push_back(__x); }
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6839      	ldr	r1, [r7, #0]
 800113c:	4618      	mov	r0, r3
 800113e:	f000 f81e 	bl	800117e <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE9push_backERKS3_>
 8001142:	bf00      	nop
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <_ZNSt5stackISt10shared_ptrIN4tama5StageEESt5dequeIS3_SaIS3_EEE3topEv>:
      top()
 800114a:	b580      	push	{r7, lr}
 800114c:	b082      	sub	sp, #8
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
	return c.back();
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4618      	mov	r0, r3
 8001156:	f000 f834 	bl	80011c2 <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE4backEv>
 800115a:	4603      	mov	r3, r0
      }
 800115c:	4618      	mov	r0, r3
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}

08001164 <_ZNSt5stackISt10shared_ptrIN4tama5StageEESt5dequeIS3_SaIS3_EEEC1IS6_vEEv>:
	stack()
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
	: c() { }
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	4618      	mov	r0, r3
 8001170:	f000 f840 	bl	80011f4 <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EEC1Ev>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	4618      	mov	r0, r3
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE9push_backERKS3_>:
       *  element at the end of the %deque and assigns the given data
       *  to it.  Due to the nature of a %deque this operation can be
       *  done in constant time.
       */
      void
      push_back(const value_type& __x)
 800117e:	b580      	push	{r7, lr}
 8001180:	b082      	sub	sp, #8
 8001182:	af00      	add	r7, sp, #0
 8001184:	6078      	str	r0, [r7, #4]
 8001186:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_finish._M_cur
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6a1b      	ldr	r3, [r3, #32]
 8001190:	3b08      	subs	r3, #8
	if (this->_M_impl._M_finish._M_cur
 8001192:	429a      	cmp	r2, r3
 8001194:	d00d      	beq.n	80011b2 <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE9push_backERKS3_+0x34>
	  {
	    _Alloc_traits::construct(this->_M_impl,
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	699b      	ldr	r3, [r3, #24]
 800119c:	683a      	ldr	r2, [r7, #0]
 800119e:	4619      	mov	r1, r3
 80011a0:	f000 f876 	bl	8001290 <_ZNSt16allocator_traitsISaISt10shared_ptrIN4tama5StageEEEE9constructIS3_JRKS3_EEEvRS4_PT_DpOT0_>
				     this->_M_impl._M_finish._M_cur, __x);
	    ++this->_M_impl._M_finish._M_cur;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	699b      	ldr	r3, [r3, #24]
 80011a8:	f103 0208 	add.w	r2, r3, #8
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	619a      	str	r2, [r3, #24]
	  }
	else
	  _M_push_back_aux(__x);
      }
 80011b0:	e003      	b.n	80011ba <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE9push_backERKS3_+0x3c>
	  _M_push_back_aux(__x);
 80011b2:	6839      	ldr	r1, [r7, #0]
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f000 f87e 	bl	80012b6 <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE16_M_push_back_auxIJRKS3_EEEvDpOT_>
      }
 80011ba:	bf00      	nop
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 80011c2:	b580      	push	{r7, lr}
 80011c4:	b086      	sub	sp, #24
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	6078      	str	r0, [r7, #4]
	iterator __tmp = end();
 80011ca:	f107 0308 	add.w	r3, r7, #8
 80011ce:	6879      	ldr	r1, [r7, #4]
 80011d0:	4618      	mov	r0, r3
 80011d2:	f000 f81c 	bl	800120e <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE3endEv>
	--__tmp;
 80011d6:	f107 0308 	add.w	r3, r7, #8
 80011da:	4618      	mov	r0, r3
 80011dc:	f000 f89b 	bl	8001316 <_ZNSt15_Deque_iteratorISt10shared_ptrIN4tama5StageEERS3_PS3_EmmEv>
	return *__tmp;
 80011e0:	f107 0308 	add.w	r3, r7, #8
 80011e4:	4618      	mov	r0, r3
 80011e6:	f000 f8b6 	bl	8001356 <_ZNKSt15_Deque_iteratorISt10shared_ptrIN4tama5StageEERS3_PS3_EdeEv>
 80011ea:	4603      	mov	r3, r0
      }
 80011ec:	4618      	mov	r0, r3
 80011ee:	3718      	adds	r7, #24
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EEC1Ev>:
      deque() : _Base() { }
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	4618      	mov	r0, r3
 8001200:	f000 f8b5 	bl	800136e <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EEC1Ev>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	4618      	mov	r0, r3
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}

0800120e <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800120e:	b580      	push	{r7, lr}
 8001210:	b082      	sub	sp, #8
 8001212:	af00      	add	r7, sp, #0
 8001214:	6078      	str	r0, [r7, #4]
 8001216:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	3318      	adds	r3, #24
 800121c:	4619      	mov	r1, r3
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f000 f80f 	bl	8001242 <_ZNSt15_Deque_iteratorISt10shared_ptrIN4tama5StageEERS3_PS3_EC1ERKS6_>
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}

0800122c <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	4618      	mov	r0, r3
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr

08001242 <_ZNSt15_Deque_iteratorISt10shared_ptrIN4tama5StageEERS3_PS3_EC1ERKS6_>:
      _Deque_iterator(const iterator& __x) _GLIBCXX_NOEXCEPT
 8001242:	b480      	push	{r7}
 8001244:	b083      	sub	sp, #12
 8001246:	af00      	add	r7, sp, #0
 8001248:	6078      	str	r0, [r7, #4]
 800124a:	6039      	str	r1, [r7, #0]
      : _M_cur(__x._M_cur), _M_first(__x._M_first),
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	681a      	ldr	r2, [r3, #0]
	_M_last(__x._M_last), _M_node(__x._M_node) { }
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	601a      	str	r2, [r3, #0]
      : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685a      	ldr	r2, [r3, #4]
	_M_last(__x._M_last), _M_node(__x._M_node) { }
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	605a      	str	r2, [r3, #4]
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	689a      	ldr	r2, [r3, #8]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	609a      	str	r2, [r3, #8]
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	68da      	ldr	r2, [r3, #12]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	60da      	str	r2, [r3, #12]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	4618      	mov	r0, r3
 8001270:	370c      	adds	r7, #12
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr

0800127a <_ZSt7forwardIRKSt10shared_ptrIN4tama5StageEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800127a:	b480      	push	{r7}
 800127c:	b083      	sub	sp, #12
 800127e:	af00      	add	r7, sp, #0
 8001280:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4618      	mov	r0, r3
 8001286:	370c      	adds	r7, #12
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <_ZNSt16allocator_traitsISaISt10shared_ptrIN4tama5StageEEEE9constructIS3_JRKS3_EEEvRS4_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	60f8      	str	r0, [r7, #12]
 8001298:	60b9      	str	r1, [r7, #8]
 800129a:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f7ff ffec 	bl	800127a <_ZSt7forwardIRKSt10shared_ptrIN4tama5StageEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80012a2:	4603      	mov	r3, r0
 80012a4:	461a      	mov	r2, r3
 80012a6:	68b9      	ldr	r1, [r7, #8]
 80012a8:	68f8      	ldr	r0, [r7, #12]
 80012aa:	f000 f88d 	bl	80013c8 <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama5StageEEE9constructIS4_JRKS4_EEEvPT_DpOT0_>
 80012ae:	bf00      	nop
 80012b0:	3710      	adds	r7, #16
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE16_M_push_back_auxIJRKS3_EEEvDpOT_>:
  // Called only if _M_impl._M_finish._M_cur == _M_impl._M_finish._M_last - 1.
  template<typename _Tp, typename _Alloc>
#if __cplusplus >= 201103L
    template<typename... _Args>
      void
      deque<_Tp, _Alloc>::
 80012b6:	b5b0      	push	{r4, r5, r7, lr}
 80012b8:	b082      	sub	sp, #8
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	6078      	str	r0, [r7, #4]
 80012be:	6039      	str	r1, [r7, #0]
      void
      deque<_Tp, _Alloc>::
      _M_push_back_aux(const value_type& __t)
#endif
      {
	_M_reserve_map_at_back();
 80012c0:	2101      	movs	r1, #1
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f000 f89a 	bl	80013fc <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE22_M_reserve_map_at_backEj>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 80012c8:	687a      	ldr	r2, [r7, #4]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ce:	1d1c      	adds	r4, r3, #4
 80012d0:	4610      	mov	r0, r2
 80012d2:	f000 f8af 	bl	8001434 <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE16_M_allocate_nodeEv>
 80012d6:	4603      	mov	r3, r0
 80012d8:	6023      	str	r3, [r4, #0]
	__try
	  {
#if __cplusplus >= 201103L
	    _Alloc_traits::construct(this->_M_impl,
 80012da:	687c      	ldr	r4, [r7, #4]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	699d      	ldr	r5, [r3, #24]
 80012e0:	6838      	ldr	r0, [r7, #0]
 80012e2:	f7ff ffca 	bl	800127a <_ZSt7forwardIRKSt10shared_ptrIN4tama5StageEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80012e6:	4603      	mov	r3, r0
 80012e8:	461a      	mov	r2, r3
 80012ea:	4629      	mov	r1, r5
 80012ec:	4620      	mov	r0, r4
 80012ee:	f7ff ffcf 	bl	8001290 <_ZNSt16allocator_traitsISaISt10shared_ptrIN4tama5StageEEEE9constructIS3_JRKS3_EEEvRS4_PT_DpOT0_>
	                             this->_M_impl._M_finish._M_cur,
			             std::forward<_Args>(__args)...);
#else
	    this->_M_impl.construct(this->_M_impl._M_finish._M_cur, __t);
#endif
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	f103 0218 	add.w	r2, r3, #24
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012fc:	3304      	adds	r3, #4
 80012fe:	4619      	mov	r1, r3
 8001300:	4610      	mov	r0, r2
 8001302:	f000 f8a9 	bl	8001458 <_ZNSt15_Deque_iteratorISt10shared_ptrIN4tama5StageEERS3_PS3_E11_M_set_nodeEPS5_>
						+ 1);
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	69da      	ldr	r2, [r3, #28]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	619a      	str	r2, [r3, #24]
	__catch(...)
	  {
	    _M_deallocate_node(*(this->_M_impl._M_finish._M_node + 1));
	    __throw_exception_again;
	  }
      }
 800130e:	bf00      	nop
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bdb0      	pop	{r4, r5, r7, pc}

08001316 <_ZNSt15_Deque_iteratorISt10shared_ptrIN4tama5StageEERS3_PS3_EmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8001316:	b580      	push	{r7, lr}
 8001318:	b082      	sub	sp, #8
 800131a:	af00      	add	r7, sp, #0
 800131c:	6078      	str	r0, [r7, #4]
	if (_M_cur == _M_first)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	429a      	cmp	r2, r3
 8001328:	d10a      	bne.n	8001340 <_ZNSt15_Deque_iteratorISt10shared_ptrIN4tama5StageEERS3_PS3_EmmEv+0x2a>
	    _M_set_node(_M_node - 1);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	68db      	ldr	r3, [r3, #12]
 800132e:	3b04      	subs	r3, #4
 8001330:	4619      	mov	r1, r3
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f000 f890 	bl	8001458 <_ZNSt15_Deque_iteratorISt10shared_ptrIN4tama5StageEERS3_PS3_E11_M_set_nodeEPS5_>
	    _M_cur = _M_last;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	689a      	ldr	r2, [r3, #8]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	601a      	str	r2, [r3, #0]
	--_M_cur;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f1a3 0208 	sub.w	r2, r3, #8
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	601a      	str	r2, [r3, #0]
	return *this;
 800134c:	687b      	ldr	r3, [r7, #4]
      }
 800134e:	4618      	mov	r0, r3
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}

08001356 <_ZNKSt15_Deque_iteratorISt10shared_ptrIN4tama5StageEERS3_PS3_EdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8001356:	b480      	push	{r7}
 8001358:	b083      	sub	sp, #12
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4618      	mov	r0, r3
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr

0800136e <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EEC1Ev>:
      _Deque_base()
 800136e:	b580      	push	{r7, lr}
 8001370:	b082      	sub	sp, #8
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
      : _M_impl()
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4618      	mov	r0, r3
 800137a:	f000 f8a1 	bl	80014c0 <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 800137e:	2100      	movs	r1, #0
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f000 f8b9 	bl	80014f8 <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE17_M_initialize_mapEj>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4618      	mov	r0, r3
 800138a:	3708      	adds	r7, #8
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}

08001390 <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE17_M_deallocate_mapEPPS3_j>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 8001390:	b580      	push	{r7, lr}
 8001392:	b086      	sub	sp, #24
 8001394:	af00      	add	r7, sp, #0
 8001396:	60f8      	str	r0, [r7, #12]
 8001398:	60b9      	str	r1, [r7, #8]
 800139a:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 800139c:	f107 0314 	add.w	r3, r7, #20
 80013a0:	68f9      	ldr	r1, [r7, #12]
 80013a2:	4618      	mov	r0, r3
 80013a4:	f000 f90b 	bl	80015be <_ZNKSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 80013a8:	f107 0314 	add.w	r3, r7, #20
 80013ac:	687a      	ldr	r2, [r7, #4]
 80013ae:	68b9      	ldr	r1, [r7, #8]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f000 f921 	bl	80015f8 <_ZNSt16allocator_traitsISaIPSt10shared_ptrIN4tama5StageEEEE10deallocateERS5_PS4_j>
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 80013b6:	f107 0314 	add.w	r3, r7, #20
 80013ba:	4618      	mov	r0, r3
 80013bc:	f000 f910 	bl	80015e0 <_ZNSaIPSt10shared_ptrIN4tama5StageEEED1Ev>
      }
 80013c0:	bf00      	nop
 80013c2:	3718      	adds	r7, #24
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama5StageEEE9constructIS4_JRKS4_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 80013c8:	b590      	push	{r4, r7, lr}
 80013ca:	b085      	sub	sp, #20
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	60b9      	str	r1, [r7, #8]
 80013d2:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f7ff ff50 	bl	800127a <_ZSt7forwardIRKSt10shared_ptrIN4tama5StageEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80013da:	4604      	mov	r4, r0
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	4619      	mov	r1, r3
 80013e0:	2008      	movs	r0, #8
 80013e2:	f7ff f8ac 	bl	800053e <_ZnwjPv>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d003      	beq.n	80013f4 <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama5StageEEE9constructIS4_JRKS4_EEEvPT_DpOT0_+0x2c>
 80013ec:	4621      	mov	r1, r4
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff fdad 	bl	8000f4e <_ZNSt10shared_ptrIN4tama5StageEEC1ERKS2_>
 80013f4:	bf00      	nop
 80013f6:	3714      	adds	r7, #20
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd90      	pop	{r4, r7, pc}

080013fc <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE22_M_reserve_map_at_backEj>:
       *  Makes sure the _M_map has space for new nodes.  Does not
       *  actually add the nodes.  Can invalidate _M_map pointers.
       *  (And consequently, %deque iterators.)
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	6039      	str	r1, [r7, #0]
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	1c5a      	adds	r2, r3, #1
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	685b      	ldr	r3, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 800140e:	6879      	ldr	r1, [r7, #4]
 8001410:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8001412:	4608      	mov	r0, r1
 8001414:	6879      	ldr	r1, [r7, #4]
 8001416:	6809      	ldr	r1, [r1, #0]
 8001418:	1a41      	subs	r1, r0, r1
 800141a:	1089      	asrs	r1, r1, #2
 800141c:	1a5b      	subs	r3, r3, r1
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 800141e:	429a      	cmp	r2, r3
 8001420:	d904      	bls.n	800142c <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE22_M_reserve_map_at_backEj+0x30>
	  _M_reallocate_map(__nodes_to_add, false);
 8001422:	2200      	movs	r2, #0
 8001424:	6839      	ldr	r1, [r7, #0]
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f000 f8f5 	bl	8001616 <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE17_M_reallocate_mapEjb>
      }
 800142c:	bf00      	nop
 800142e:	3708      	adds	r7, #8
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}

08001434 <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE16_M_allocate_nodeEv>:
      _M_allocate_node()
 8001434:	b590      	push	{r4, r7, lr}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 800143c:	687c      	ldr	r4, [r7, #4]
 800143e:	2008      	movs	r0, #8
 8001440:	f7ff fd3e 	bl	8000ec0 <_ZSt16__deque_buf_sizej>
 8001444:	4603      	mov	r3, r0
 8001446:	4619      	mov	r1, r3
 8001448:	4620      	mov	r0, r4
 800144a:	f000 f97f 	bl	800174c <_ZNSt16allocator_traitsISaISt10shared_ptrIN4tama5StageEEEE8allocateERS4_j>
 800144e:	4603      	mov	r3, r0
      }
 8001450:	4618      	mov	r0, r3
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	bd90      	pop	{r4, r7, pc}

08001458 <_ZNSt15_Deque_iteratorISt10shared_ptrIN4tama5StageEERS3_PS3_E11_M_set_nodeEPS5_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 8001458:	b590      	push	{r4, r7, lr}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	683a      	ldr	r2, [r7, #0]
 8001466:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	685c      	ldr	r4, [r3, #4]
 8001474:	f000 f81c 	bl	80014b0 <_ZNSt15_Deque_iteratorISt10shared_ptrIN4tama5StageEERS3_PS3_E14_S_buffer_sizeEv>
 8001478:	4603      	mov	r3, r0
 800147a:	00db      	lsls	r3, r3, #3
 800147c:	18e2      	adds	r2, r4, r3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	609a      	str	r2, [r3, #8]
      }
 8001482:	bf00      	nop
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	bd90      	pop	{r4, r7, pc}

0800148a <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE18_M_deallocate_nodeEPS3_>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 800148a:	b590      	push	{r4, r7, lr}
 800148c:	b083      	sub	sp, #12
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]
 8001492:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 8001494:	687c      	ldr	r4, [r7, #4]
 8001496:	2008      	movs	r0, #8
 8001498:	f7ff fd12 	bl	8000ec0 <_ZSt16__deque_buf_sizej>
 800149c:	4603      	mov	r3, r0
 800149e:	461a      	mov	r2, r3
 80014a0:	6839      	ldr	r1, [r7, #0]
 80014a2:	4620      	mov	r0, r4
 80014a4:	f000 f961 	bl	800176a <_ZNSt16allocator_traitsISaISt10shared_ptrIN4tama5StageEEEE10deallocateERS4_PS3_j>
      }
 80014a8:	bf00      	nop
 80014aa:	370c      	adds	r7, #12
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd90      	pop	{r4, r7, pc}

080014b0 <_ZNSt15_Deque_iteratorISt10shared_ptrIN4tama5StageEERS3_PS3_E14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 80014b4:	2008      	movs	r0, #8
 80014b6:	f7ff fd03 	bl	8000ec0 <_ZSt16__deque_buf_sizej>
 80014ba:	4603      	mov	r3, r0
 80014bc:	4618      	mov	r0, r3
 80014be:	bd80      	pop	{r7, pc}

080014c0 <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE11_Deque_implC1Ev>:
	_Deque_impl()
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
	  _M_start(), _M_finish()
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	f000 f95d 	bl	8001788 <_ZNSaISt10shared_ptrIN4tama5StageEEEC1Ev>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2200      	movs	r2, #0
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	3308      	adds	r3, #8
 80014de:	4618      	mov	r0, r3
 80014e0:	f000 f95e 	bl	80017a0 <_ZNSt15_Deque_iteratorISt10shared_ptrIN4tama5StageEERS3_PS3_EC1Ev>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	3318      	adds	r3, #24
 80014e8:	4618      	mov	r0, r3
 80014ea:	f000 f959 	bl	80017a0 <_ZNSt15_Deque_iteratorISt10shared_ptrIN4tama5StageEERS3_PS3_EC1Ev>
	{ }
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4618      	mov	r0, r3
 80014f2:	3708      	adds	r7, #8
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 80014f8:	b590      	push	{r4, r7, lr}
 80014fa:	b089      	sub	sp, #36	; 0x24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements/ __deque_buf_size(sizeof(_Tp))
 8001502:	2008      	movs	r0, #8
 8001504:	f7ff fcdc 	bl	8000ec0 <_ZSt16__deque_buf_sizej>
 8001508:	4602      	mov	r2, r0
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001510:	3301      	adds	r3, #1
 8001512:	61fb      	str	r3, [r7, #28]
					   size_t(__num_nodes + 2));
 8001514:	2308      	movs	r3, #8
 8001516:	60fb      	str	r3, [r7, #12]
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	3302      	adds	r3, #2
 800151c:	613b      	str	r3, [r7, #16]
 800151e:	f107 0210 	add.w	r2, r7, #16
 8001522:	f107 030c 	add.w	r3, r7, #12
 8001526:	4611      	mov	r1, r2
 8001528:	4618      	mov	r0, r3
 800152a:	f7ff fabe 	bl	8000aaa <_ZSt3maxIjERKT_S2_S2_>
 800152e:	4603      	mov	r3, r0
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	4619      	mov	r1, r3
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f000 f946 	bl	80017ce <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE15_M_allocate_mapEj>
 8001542:	4602      	mov	r2, r0
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6859      	ldr	r1, [r3, #4]
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	1acb      	subs	r3, r1, r3
 8001554:	085b      	lsrs	r3, r3, #1
 8001556:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 8001558:	4413      	add	r3, r2
 800155a:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	4413      	add	r3, r2
 8001564:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 8001566:	697a      	ldr	r2, [r7, #20]
 8001568:	69b9      	ldr	r1, [r7, #24]
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f000 f94b 	bl	8001806 <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE15_M_create_nodesEPPS3_S7_>
      this->_M_impl._M_start._M_set_node(__nstart);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	3308      	adds	r3, #8
 8001574:	69b9      	ldr	r1, [r7, #24]
 8001576:	4618      	mov	r0, r3
 8001578:	f7ff ff6e 	bl	8001458 <_ZNSt15_Deque_iteratorISt10shared_ptrIN4tama5StageEERS3_PS3_E11_M_set_nodeEPS5_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	f103 0218 	add.w	r2, r3, #24
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	3b04      	subs	r3, #4
 8001586:	4619      	mov	r1, r3
 8001588:	4610      	mov	r0, r2
 800158a:	f7ff ff65 	bl	8001458 <_ZNSt15_Deque_iteratorISt10shared_ptrIN4tama5StageEERS3_PS3_E11_M_set_nodeEPS5_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	68da      	ldr	r2, [r3, #12]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 800159a:	2008      	movs	r0, #8
 800159c:	f7ff fc90 	bl	8000ec0 <_ZSt16__deque_buf_sizej>
 80015a0:	4602      	mov	r2, r0
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	fbb3 f1f2 	udiv	r1, r3, r2
 80015a8:	fb02 f201 	mul.w	r2, r2, r1
 80015ac:	1a9b      	subs	r3, r3, r2
					+ __num_elements
 80015ae:	00db      	lsls	r3, r3, #3
 80015b0:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	619a      	str	r2, [r3, #24]
    }
 80015b6:	bf00      	nop
 80015b8:	3724      	adds	r7, #36	; 0x24
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd90      	pop	{r4, r7, pc}

080015be <_ZNKSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 80015be:	b580      	push	{r7, lr}
 80015c0:	b082      	sub	sp, #8
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]
 80015c6:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 80015c8:	6838      	ldr	r0, [r7, #0]
 80015ca:	f000 f936 	bl	800183a <_ZNKSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE19_M_get_Tp_allocatorEv>
 80015ce:	4603      	mov	r3, r0
 80015d0:	4619      	mov	r1, r3
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f000 f93c 	bl	8001850 <_ZNSaIPSt10shared_ptrIN4tama5StageEEEC1IS2_EERKSaIT_E>
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	3708      	adds	r7, #8
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}

080015e0 <_ZNSaIPSt10shared_ptrIN4tama5StageEEED1Ev>:
      : __allocator_base<_Tp>(__a) { }

      template<typename _Tp1>
	allocator(const allocator<_Tp1>&) throw() { }

      ~allocator() throw() { }
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f000 f93e 	bl	800186a <_ZN9__gnu_cxx13new_allocatorIPSt10shared_ptrIN4tama5StageEEED1Ev>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4618      	mov	r0, r3
 80015f2:	3708      	adds	r7, #8
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}

080015f8 <_ZNSt16allocator_traitsISaIPSt10shared_ptrIN4tama5StageEEEE10deallocateERS5_PS4_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	60f8      	str	r0, [r7, #12]
 8001600:	60b9      	str	r1, [r7, #8]
 8001602:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8001604:	687a      	ldr	r2, [r7, #4]
 8001606:	68b9      	ldr	r1, [r7, #8]
 8001608:	68f8      	ldr	r0, [r7, #12]
 800160a:	f000 f939 	bl	8001880 <_ZN9__gnu_cxx13new_allocatorIPSt10shared_ptrIN4tama5StageEEE10deallocateEPS5_j>
 800160e:	bf00      	nop
 8001610:	3710      	adds	r7, #16
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}

08001616 <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE17_M_reallocate_mapEjb>:
        }
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
 8001616:	b590      	push	{r4, r7, lr}
 8001618:	b08b      	sub	sp, #44	; 0x2c
 800161a:	af00      	add	r7, sp, #0
 800161c:	60f8      	str	r0, [r7, #12]
 800161e:	60b9      	str	r1, [r7, #8]
 8001620:	4613      	mov	r3, r2
 8001622:	71fb      	strb	r3, [r7, #7]
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001628:	461a      	mov	r2, r3
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	695b      	ldr	r3, [r3, #20]
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	109b      	asrs	r3, r3, #2
 8001632:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 8001634:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	6a3a      	ldr	r2, [r7, #32]
 800163a:	4413      	add	r3, r2
 800163c:	61fb      	str	r3, [r7, #28]

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	685a      	ldr	r2, [r3, #4]
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	429a      	cmp	r2, r3
 8001648:	d92d      	bls.n	80016a6 <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE17_M_reallocate_mapEjb+0x90>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	1acb      	subs	r3, r1, r3
 8001656:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8001658:	0099      	lsls	r1, r3, #2
	                 + (__add_at_front ? __nodes_to_add : 0);
 800165a:	79fb      	ldrb	r3, [r7, #7]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d002      	beq.n	8001666 <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE17_M_reallocate_mapEjb+0x50>
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	e000      	b.n	8001668 <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE17_M_reallocate_mapEjb+0x52>
 8001666:	2300      	movs	r3, #0
 8001668:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 800166a:	4413      	add	r3, r2
 800166c:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	695b      	ldr	r3, [r3, #20]
 8001672:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001674:	429a      	cmp	r2, r3
 8001676:	d209      	bcs.n	800168c <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE17_M_reallocate_mapEjb+0x76>
	    std::copy(this->_M_impl._M_start._M_node,
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 8001680:	3304      	adds	r3, #4
 8001682:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001684:	4619      	mov	r1, r3
 8001686:	f000 f908 	bl	800189a <_ZSt4copyIPPSt10shared_ptrIN4tama5StageEES5_ET0_T_S7_S6_>
 800168a:	e048      	b.n	800171e <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE17_M_reallocate_mapEjb+0x108>
		      __new_nstart);
	  else
	    std::copy_backward(this->_M_impl._M_start._M_node,
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8001694:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 8001696:	6a3b      	ldr	r3, [r7, #32]
 8001698:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 800169a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800169c:	4413      	add	r3, r2
 800169e:	461a      	mov	r2, r3
 80016a0:	f000 f913 	bl	80018ca <_ZSt13copy_backwardIPPSt10shared_ptrIN4tama5StageEES5_ET0_T_S7_S6_>
 80016a4:	e03b      	b.n	800171e <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE17_M_reallocate_mapEjb+0x108>
	}
      else
	{
	  size_type __new_map_size = this->_M_impl._M_map_size
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	685c      	ldr	r4, [r3, #4]
	                             + std::max(this->_M_impl._M_map_size,
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	3304      	adds	r3, #4
 80016ae:	f107 0208 	add.w	r2, r7, #8
 80016b2:	4611      	mov	r1, r2
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7ff f9f8 	bl	8000aaa <_ZSt3maxIjERKT_S2_S2_>
 80016ba:	4603      	mov	r3, r0
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 80016c0:	3302      	adds	r3, #2
 80016c2:	61bb      	str	r3, [r7, #24]
						__nodes_to_add) + 2;

	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	69b9      	ldr	r1, [r7, #24]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f000 f880 	bl	80017ce <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE15_M_allocate_mapEj>
 80016ce:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 80016d0:	69ba      	ldr	r2, [r7, #24]
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	085b      	lsrs	r3, r3, #1
 80016d8:	009a      	lsls	r2, r3, #2
	                 + (__add_at_front ? __nodes_to_add : 0);
 80016da:	79fb      	ldrb	r3, [r7, #7]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d002      	beq.n	80016e6 <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE17_M_reallocate_mapEjb+0xd0>
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	e000      	b.n	80016e8 <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE17_M_reallocate_mapEjb+0xd2>
 80016e6:	2300      	movs	r3, #0
 80016e8:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 80016ea:	697a      	ldr	r2, [r7, #20]
 80016ec:	4413      	add	r3, r2
 80016ee:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 80016f8:	3304      	adds	r3, #4
 80016fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016fc:	4619      	mov	r1, r3
 80016fe:	f000 f8cc 	bl	800189a <_ZSt4copyIPPSt10shared_ptrIN4tama5StageEES5_ET0_T_S7_S6_>
		    __new_nstart);
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8001702:	68f8      	ldr	r0, [r7, #12]
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	6819      	ldr	r1, [r3, #0]
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	461a      	mov	r2, r3
 800170e:	f7ff fe3f 	bl	8001390 <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE17_M_deallocate_mapEPPS3_j>

	  this->_M_impl._M_map = __new_map;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	697a      	ldr	r2, [r7, #20]
 8001716:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	69ba      	ldr	r2, [r7, #24]
 800171c:	605a      	str	r2, [r3, #4]
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	3308      	adds	r3, #8
 8001722:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff fe97 	bl	8001458 <_ZNSt15_Deque_iteratorISt10shared_ptrIN4tama5StageEERS3_PS3_E11_M_set_nodeEPS5_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	f103 0018 	add.w	r0, r3, #24
 8001730:	6a3b      	ldr	r3, [r7, #32]
 8001732:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001736:	3b01      	subs	r3, #1
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800173c:	4413      	add	r3, r2
 800173e:	4619      	mov	r1, r3
 8001740:	f7ff fe8a 	bl	8001458 <_ZNSt15_Deque_iteratorISt10shared_ptrIN4tama5StageEERS3_PS3_E11_M_set_nodeEPS5_>
    }
 8001744:	bf00      	nop
 8001746:	372c      	adds	r7, #44	; 0x2c
 8001748:	46bd      	mov	sp, r7
 800174a:	bd90      	pop	{r4, r7, pc}

0800174c <_ZNSt16allocator_traitsISaISt10shared_ptrIN4tama5StageEEEE8allocateERS4_j>:
      allocate(allocator_type& __a, size_type __n)
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8001756:	2200      	movs	r2, #0
 8001758:	6839      	ldr	r1, [r7, #0]
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f000 f8cd 	bl	80018fa <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama5StageEEE8allocateEjPKv>
 8001760:	4603      	mov	r3, r0
 8001762:	4618      	mov	r0, r3
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <_ZNSt16allocator_traitsISaISt10shared_ptrIN4tama5StageEEEE10deallocateERS4_PS3_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800176a:	b580      	push	{r7, lr}
 800176c:	b084      	sub	sp, #16
 800176e:	af00      	add	r7, sp, #0
 8001770:	60f8      	str	r0, [r7, #12]
 8001772:	60b9      	str	r1, [r7, #8]
 8001774:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	68b9      	ldr	r1, [r7, #8]
 800177a:	68f8      	ldr	r0, [r7, #12]
 800177c:	f000 f8db 	bl	8001936 <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama5StageEEE10deallocateEPS4_j>
 8001780:	bf00      	nop
 8001782:	3710      	adds	r7, #16
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}

08001788 <_ZNSaISt10shared_ptrIN4tama5StageEEEC1Ev>:
      allocator() throw() { }
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f000 f8dd 	bl	8001950 <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama5StageEEEC1Ev>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4618      	mov	r0, r3
 800179a:	3708      	adds	r7, #8
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}

080017a0 <_ZNSt15_Deque_iteratorISt10shared_ptrIN4tama5StageEERS3_PS3_EC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2200      	movs	r2, #0
 80017ac:	601a      	str	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2200      	movs	r2, #0
 80017b2:	605a      	str	r2, [r3, #4]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2200      	movs	r2, #0
 80017b8:	609a      	str	r2, [r3, #8]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2200      	movs	r2, #0
 80017be:	60da      	str	r2, [r3, #12]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	4618      	mov	r0, r3
 80017c4:	370c      	adds	r7, #12
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr

080017ce <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 80017ce:	b590      	push	{r4, r7, lr}
 80017d0:	b085      	sub	sp, #20
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
 80017d6:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 80017d8:	f107 030c 	add.w	r3, r7, #12
 80017dc:	6879      	ldr	r1, [r7, #4]
 80017de:	4618      	mov	r0, r3
 80017e0:	f7ff feed 	bl	80015be <_ZNKSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 80017e4:	f107 030c 	add.w	r3, r7, #12
 80017e8:	6839      	ldr	r1, [r7, #0]
 80017ea:	4618      	mov	r0, r3
 80017ec:	f000 f8bb 	bl	8001966 <_ZNSt16allocator_traitsISaIPSt10shared_ptrIN4tama5StageEEEE8allocateERS5_j>
 80017f0:	4604      	mov	r4, r0
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 80017f2:	f107 030c 	add.w	r3, r7, #12
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7ff fef2 	bl	80015e0 <_ZNSaIPSt10shared_ptrIN4tama5StageEEED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 80017fc:	4623      	mov	r3, r4
      }
 80017fe:	4618      	mov	r0, r3
 8001800:	3714      	adds	r7, #20
 8001802:	46bd      	mov	sp, r7
 8001804:	bd90      	pop	{r4, r7, pc}

08001806 <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE15_M_create_nodesEPPS3_S7_>:
    _Deque_base<_Tp, _Alloc>::
 8001806:	b580      	push	{r7, lr}
 8001808:	b086      	sub	sp, #24
 800180a:	af00      	add	r7, sp, #0
 800180c:	60f8      	str	r0, [r7, #12]
 800180e:	60b9      	str	r1, [r7, #8]
 8001810:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	617b      	str	r3, [r7, #20]
 8001816:	697a      	ldr	r2, [r7, #20]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	429a      	cmp	r2, r3
 800181c:	d209      	bcs.n	8001832 <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE15_M_create_nodesEPPS3_S7_+0x2c>
	    *__cur = this->_M_allocate_node();
 800181e:	68f8      	ldr	r0, [r7, #12]
 8001820:	f7ff fe08 	bl	8001434 <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE16_M_allocate_nodeEv>
 8001824:	4602      	mov	r2, r0
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	3304      	adds	r3, #4
 800182e:	617b      	str	r3, [r7, #20]
 8001830:	e7f1      	b.n	8001816 <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE15_M_create_nodesEPPS3_S7_+0x10>
    }
 8001832:	bf00      	nop
 8001834:	3718      	adds	r7, #24
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}

0800183a <_ZNKSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800183a:	b480      	push	{r7}
 800183c:	b083      	sub	sp, #12
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4618      	mov	r0, r3
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <_ZNSaIPSt10shared_ptrIN4tama5StageEEEC1IS2_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) throw() { }
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	6039      	str	r1, [r7, #0]
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f000 f892 	bl	8001984 <_ZN9__gnu_cxx13new_allocatorIPSt10shared_ptrIN4tama5StageEEEC1Ev>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	4618      	mov	r0, r3
 8001864:	3708      	adds	r7, #8
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}

0800186a <_ZN9__gnu_cxx13new_allocatorIPSt10shared_ptrIN4tama5StageEEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800186a:	b480      	push	{r7}
 800186c:	b083      	sub	sp, #12
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4618      	mov	r0, r3
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr

08001880 <_ZN9__gnu_cxx13new_allocatorIPSt10shared_ptrIN4tama5StageEEE10deallocateEPS5_j>:
      deallocate(pointer __p, size_type)
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	60f8      	str	r0, [r7, #12]
 8001888:	60b9      	str	r1, [r7, #8]
 800188a:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800188c:	68b8      	ldr	r0, [r7, #8]
 800188e:	f015 fe2b 	bl	80174e8 <_ZdlPv>
      }
 8001892:	bf00      	nop
 8001894:	3710      	adds	r7, #16
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}

0800189a <_ZSt4copyIPPSt10shared_ptrIN4tama5StageEES5_ET0_T_S7_S6_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 800189a:	b590      	push	{r4, r7, lr}
 800189c:	b085      	sub	sp, #20
 800189e:	af00      	add	r7, sp, #0
 80018a0:	60f8      	str	r0, [r7, #12]
 80018a2:	60b9      	str	r1, [r7, #8]
 80018a4:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);

      return (std::__copy_move_a2<__is_move_iterator<_II>::__value>
	      (std::__miter_base(__first), std::__miter_base(__last),
 80018a6:	68f8      	ldr	r0, [r7, #12]
 80018a8:	f000 f877 	bl	800199a <_ZSt12__miter_baseIPPSt10shared_ptrIN4tama5StageEEET_S6_>
 80018ac:	4604      	mov	r4, r0
 80018ae:	68b8      	ldr	r0, [r7, #8]
 80018b0:	f000 f873 	bl	800199a <_ZSt12__miter_baseIPPSt10shared_ptrIN4tama5StageEEET_S6_>
 80018b4:	4603      	mov	r3, r0
	       __result));
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	4619      	mov	r1, r3
 80018ba:	4620      	mov	r0, r4
 80018bc:	f000 f878 	bl	80019b0 <_ZSt14__copy_move_a2ILb0EPPSt10shared_ptrIN4tama5StageEES5_ET1_T0_S7_S6_>
 80018c0:	4603      	mov	r3, r0
    }
 80018c2:	4618      	mov	r0, r3
 80018c4:	3714      	adds	r7, #20
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd90      	pop	{r4, r7, pc}

080018ca <_ZSt13copy_backwardIPPSt10shared_ptrIN4tama5StageEES5_ET0_T_S7_S6_>:
   *  Result may not be in the range (first,last].  Use copy instead.  Note
   *  that the start of the output range may overlap [first,last).
  */
  template<typename _BI1, typename _BI2>
    inline _BI2
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 80018ca:	b590      	push	{r4, r7, lr}
 80018cc:	b085      	sub	sp, #20
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	60f8      	str	r0, [r7, #12]
 80018d2:	60b9      	str	r1, [r7, #8]
 80018d4:	607a      	str	r2, [r7, #4]
	    typename iterator_traits<_BI1>::value_type,
	    typename iterator_traits<_BI2>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);

      return (std::__copy_move_backward_a2<__is_move_iterator<_BI1>::__value>
	      (std::__miter_base(__first), std::__miter_base(__last),
 80018d6:	68f8      	ldr	r0, [r7, #12]
 80018d8:	f000 f85f 	bl	800199a <_ZSt12__miter_baseIPPSt10shared_ptrIN4tama5StageEEET_S6_>
 80018dc:	4604      	mov	r4, r0
 80018de:	68b8      	ldr	r0, [r7, #8]
 80018e0:	f000 f85b 	bl	800199a <_ZSt12__miter_baseIPPSt10shared_ptrIN4tama5StageEEET_S6_>
 80018e4:	4603      	mov	r3, r0
	       __result));
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	4619      	mov	r1, r3
 80018ea:	4620      	mov	r0, r4
 80018ec:	f000 f87c 	bl	80019e8 <_ZSt23__copy_move_backward_a2ILb0EPPSt10shared_ptrIN4tama5StageEES5_ET1_T0_S7_S6_>
 80018f0:	4603      	mov	r3, r0
    }
 80018f2:	4618      	mov	r0, r3
 80018f4:	3714      	adds	r7, #20
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd90      	pop	{r4, r7, pc}

080018fa <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama5StageEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b084      	sub	sp, #16
 80018fe:	af00      	add	r7, sp, #0
 8001900:	60f8      	str	r0, [r7, #12]
 8001902:	60b9      	str	r1, [r7, #8]
 8001904:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8001906:	68f8      	ldr	r0, [r7, #12]
 8001908:	f000 f88a 	bl	8001a20 <_ZNK9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama5StageEEE8max_sizeEv>
 800190c:	4602      	mov	r2, r0
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	4293      	cmp	r3, r2
 8001912:	bf8c      	ite	hi
 8001914:	2301      	movhi	r3, #1
 8001916:	2300      	movls	r3, #0
 8001918:	b2db      	uxtb	r3, r3
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama5StageEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800191e:	f015 fdf8 	bl	8017512 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	00db      	lsls	r3, r3, #3
 8001926:	4618      	mov	r0, r3
 8001928:	f015 fdc5 	bl	80174b6 <_Znwj>
 800192c:	4603      	mov	r3, r0
      }
 800192e:	4618      	mov	r0, r3
 8001930:	3710      	adds	r7, #16
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}

08001936 <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama5StageEEE10deallocateEPS4_j>:
      deallocate(pointer __p, size_type)
 8001936:	b580      	push	{r7, lr}
 8001938:	b084      	sub	sp, #16
 800193a:	af00      	add	r7, sp, #0
 800193c:	60f8      	str	r0, [r7, #12]
 800193e:	60b9      	str	r1, [r7, #8]
 8001940:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8001942:	68b8      	ldr	r0, [r7, #8]
 8001944:	f015 fdd0 	bl	80174e8 <_ZdlPv>
      }
 8001948:	bf00      	nop
 800194a:	3710      	adds	r7, #16
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}

08001950 <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama5StageEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	4618      	mov	r0, r3
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr

08001966 <_ZNSt16allocator_traitsISaIPSt10shared_ptrIN4tama5StageEEEE8allocateERS5_j>:
      allocate(allocator_type& __a, size_type __n)
 8001966:	b580      	push	{r7, lr}
 8001968:	b082      	sub	sp, #8
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]
 800196e:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8001970:	2200      	movs	r2, #0
 8001972:	6839      	ldr	r1, [r7, #0]
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	f000 f85f 	bl	8001a38 <_ZN9__gnu_cxx13new_allocatorIPSt10shared_ptrIN4tama5StageEEE8allocateEjPKv>
 800197a:	4603      	mov	r3, r0
 800197c:	4618      	mov	r0, r3
 800197e:	3708      	adds	r7, #8
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}

08001984 <_ZN9__gnu_cxx13new_allocatorIPSt10shared_ptrIN4tama5StageEEEC1Ev>:
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	4618      	mov	r0, r3
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr

0800199a <_ZSt12__miter_baseIPPSt10shared_ptrIN4tama5StageEEET_S6_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
 800199a:	b480      	push	{r7}
 800199c:	b083      	sub	sp, #12
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
    { return __it; }
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4618      	mov	r0, r3
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <_ZSt14__copy_move_a2ILb0EPPSt10shared_ptrIN4tama5StageEES5_ET1_T0_S7_S6_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80019b0:	b5b0      	push	{r4, r5, r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	60b9      	str	r1, [r7, #8]
 80019ba:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 80019bc:	68f8      	ldr	r0, [r7, #12]
 80019be:	f000 f859 	bl	8001a74 <_ZSt12__niter_baseIPPSt10shared_ptrIN4tama5StageEEET_S6_>
 80019c2:	4604      	mov	r4, r0
 80019c4:	68b8      	ldr	r0, [r7, #8]
 80019c6:	f000 f855 	bl	8001a74 <_ZSt12__niter_baseIPPSt10shared_ptrIN4tama5StageEEET_S6_>
 80019ca:	4605      	mov	r5, r0
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f000 f851 	bl	8001a74 <_ZSt12__niter_baseIPPSt10shared_ptrIN4tama5StageEEET_S6_>
 80019d2:	4603      	mov	r3, r0
					     std::__niter_base(__result)));
 80019d4:	461a      	mov	r2, r3
 80019d6:	4629      	mov	r1, r5
 80019d8:	4620      	mov	r0, r4
 80019da:	f000 f856 	bl	8001a8a <_ZSt13__copy_move_aILb0EPPSt10shared_ptrIN4tama5StageEES5_ET1_T0_S7_S6_>
 80019de:	4603      	mov	r3, r0
    }
 80019e0:	4618      	mov	r0, r3
 80019e2:	3710      	adds	r7, #16
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bdb0      	pop	{r4, r5, r7, pc}

080019e8 <_ZSt23__copy_move_backward_a2ILb0EPPSt10shared_ptrIN4tama5StageEES5_ET1_T0_S7_S6_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 80019e8:	b5b0      	push	{r4, r5, r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	60f8      	str	r0, [r7, #12]
 80019f0:	60b9      	str	r1, [r7, #8]
 80019f2:	607a      	str	r2, [r7, #4]
		  (std::__niter_base(__first), std::__niter_base(__last),
 80019f4:	68f8      	ldr	r0, [r7, #12]
 80019f6:	f000 f83d 	bl	8001a74 <_ZSt12__niter_baseIPPSt10shared_ptrIN4tama5StageEEET_S6_>
 80019fa:	4604      	mov	r4, r0
 80019fc:	68b8      	ldr	r0, [r7, #8]
 80019fe:	f000 f839 	bl	8001a74 <_ZSt12__niter_baseIPPSt10shared_ptrIN4tama5StageEEET_S6_>
 8001a02:	4605      	mov	r5, r0
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f000 f835 	bl	8001a74 <_ZSt12__niter_baseIPPSt10shared_ptrIN4tama5StageEEET_S6_>
 8001a0a:	4603      	mov	r3, r0
		   std::__niter_base(__result)));
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	4629      	mov	r1, r5
 8001a10:	4620      	mov	r0, r4
 8001a12:	f000 f84c 	bl	8001aae <_ZSt22__copy_move_backward_aILb0EPPSt10shared_ptrIN4tama5StageEES5_ET1_T0_S7_S6_>
 8001a16:	4603      	mov	r3, r0
    }
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3710      	adds	r7, #16
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bdb0      	pop	{r4, r5, r7, pc}

08001a20 <_ZNK9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama5StageEEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8001a28:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	370c      	adds	r7, #12
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <_ZN9__gnu_cxx13new_allocatorIPSt10shared_ptrIN4tama5StageEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	60f8      	str	r0, [r7, #12]
 8001a40:	60b9      	str	r1, [r7, #8]
 8001a42:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8001a44:	68f8      	ldr	r0, [r7, #12]
 8001a46:	f000 f844 	bl	8001ad2 <_ZNK9__gnu_cxx13new_allocatorIPSt10shared_ptrIN4tama5StageEEE8max_sizeEv>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	bf8c      	ite	hi
 8001a52:	2301      	movhi	r3, #1
 8001a54:	2300      	movls	r3, #0
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <_ZN9__gnu_cxx13new_allocatorIPSt10shared_ptrIN4tama5StageEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8001a5c:	f015 fd59 	bl	8017512 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	4618      	mov	r0, r3
 8001a66:	f015 fd26 	bl	80174b6 <_Znwj>
 8001a6a:	4603      	mov	r3, r0
      }
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3710      	adds	r7, #16
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <_ZSt12__niter_baseIPPSt10shared_ptrIN4tama5StageEEET_S6_>:
    __niter_base(_Iterator __it)
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
    { return __it; }
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr

08001a8a <_ZSt13__copy_move_aILb0EPPSt10shared_ptrIN4tama5StageEES5_ET1_T0_S7_S6_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	b086      	sub	sp, #24
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	60f8      	str	r0, [r7, #12]
 8001a92:	60b9      	str	r1, [r7, #8]
 8001a94:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueTypeI)
 8001a96:	2301      	movs	r3, #1
 8001a98:	75fb      	strb	r3, [r7, #23]
	                      _Category>::__copy_m(__first, __last, __result);
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	68b9      	ldr	r1, [r7, #8]
 8001a9e:	68f8      	ldr	r0, [r7, #12]
 8001aa0:	f000 f823 	bl	8001aea <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPSt10shared_ptrIN4tama5StageEEEEPT_PKS8_SB_S9_>
 8001aa4:	4603      	mov	r3, r0
    }
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3718      	adds	r7, #24
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <_ZSt22__copy_move_backward_aILb0EPPSt10shared_ptrIN4tama5StageEES5_ET1_T0_S7_S6_>:
    __copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result)
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b086      	sub	sp, #24
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	60f8      	str	r0, [r7, #12]
 8001ab6:	60b9      	str	r1, [r7, #8]
 8001ab8:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueType1)
 8001aba:	2301      	movs	r3, #1
 8001abc:	75fb      	strb	r3, [r7, #23]
								 __result);
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	68b9      	ldr	r1, [r7, #8]
 8001ac2:	68f8      	ldr	r0, [r7, #12]
 8001ac4:	f000 f82e 	bl	8001b24 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPSt10shared_ptrIN4tama5StageEEEEPT_PKS8_SB_S9_>
 8001ac8:	4603      	mov	r3, r0
    }
 8001aca:	4618      	mov	r0, r3
 8001acc:	3718      	adds	r7, #24
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <_ZNK9__gnu_cxx13new_allocatorIPSt10shared_ptrIN4tama5StageEEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8001ad2:	b480      	push	{r7}
 8001ad4:	b083      	sub	sp, #12
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8001ada:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8001ade:	4618      	mov	r0, r3
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr

08001aea <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPSt10shared_ptrIN4tama5StageEEEEPT_PKS8_SB_S9_>:
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b086      	sub	sp, #24
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	60f8      	str	r0, [r7, #12]
 8001af2:	60b9      	str	r1, [r7, #8]
 8001af4:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8001af6:	68ba      	ldr	r2, [r7, #8]
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	109b      	asrs	r3, r3, #2
 8001afe:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d006      	beq.n	8001b14 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPSt10shared_ptrIN4tama5StageEEEEPT_PKS8_SB_S9_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	68f9      	ldr	r1, [r7, #12]
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f015 ffc9 	bl	8017aa6 <memmove>
	  return __result + _Num;
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	687a      	ldr	r2, [r7, #4]
 8001b1a:	4413      	add	r3, r2
	}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3718      	adds	r7, #24
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}

08001b24 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPSt10shared_ptrIN4tama5StageEEEEPT_PKS8_SB_S9_>:
        __copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b086      	sub	sp, #24
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	60b9      	str	r1, [r7, #8]
 8001b2e:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8001b30:	68ba      	ldr	r2, [r7, #8]
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	109b      	asrs	r3, r3, #2
 8001b38:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d00a      	beq.n	8001b56 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPSt10shared_ptrIN4tama5StageEEEEPT_PKS8_SB_S9_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	425b      	negs	r3, r3
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	18d0      	adds	r0, r2, r3
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	461a      	mov	r2, r3
 8001b50:	68f9      	ldr	r1, [r7, #12]
 8001b52:	f015 ffa8 	bl	8017aa6 <memmove>
	  return __result - _Num;
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	425b      	negs	r3, r3
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	4413      	add	r3, r2
	}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3718      	adds	r7, #24
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	6039      	str	r1, [r7, #0]
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	601a      	str	r2, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	1d1a      	adds	r2, r3, #4
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	3304      	adds	r3, #4
 8001b82:	4619      	mov	r1, r3
 8001b84:	4610      	mov	r0, r2
 8001b86:	f7fe ff45 	bl	8000a14 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3708      	adds	r7, #8
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_ptr() = default;
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	3304      	adds	r3, #4
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7fe ff4e 	bl	8000a42 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3708      	adds	r7, #8
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <_ZNSt10shared_ptrIN4tama5SceneEEC1ERKS2_>:
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	6039      	str	r1, [r7, #0]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	683a      	ldr	r2, [r7, #0]
 8001bbe:	4611      	mov	r1, r2
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff ffd1 	bl	8001b68 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3708      	adds	r7, #8
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <_ZNSt10shared_ptrIN4tama5SceneEED1Ev>:
    class shared_ptr : public __shared_ptr<_Tp>
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7ff ffda 	bl	8001b94 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	4618      	mov	r0, r3
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}

08001bea <_ZN4tama5Stage8getSceneEv>:
//

#include "Stage.h"

std::shared_ptr<tama::Scene> tama::Stage::getScene()
{
 8001bea:	b580      	push	{r7, lr}
 8001bec:	b082      	sub	sp, #8
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
 8001bf2:	6039      	str	r1, [r7, #0]
    return scene;
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	3304      	adds	r3, #4
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f7ff ffd8 	bl	8001bb0 <_ZNSt10shared_ptrIN4tama5SceneEEC1ERKS2_>
}
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	3708      	adds	r7, #8
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}

08001c08 <_ZN4tama7OnInputC1Ev>:

#include "../../input/button.h"

namespace tama
{
    class OnInput
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	4a04      	ldr	r2, [pc, #16]	; (8001c24 <_ZN4tama7OnInputC1Ev+0x1c>)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	601a      	str	r2, [r3, #0]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4618      	mov	r0, r3
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr
 8001c24:	08017e54 	.word	0x08017e54

08001c28 <_ZNSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	601a      	str	r2, [r3, #0]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	1d1a      	adds	r2, r3, #4
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	3304      	adds	r3, #4
 8001c42:	4619      	mov	r1, r3
 8001c44:	4610      	mov	r0, r2
 8001c46:	f7fe fee5 	bl	8000a14 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3708      	adds	r7, #8
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}

08001c54 <_ZNSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_ptr() = default;
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	3304      	adds	r3, #4
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7fe feee 	bl	8000a42 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3708      	adds	r7, #8
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <_ZNSt10shared_ptrIN4tama7ContextEEC1ERKS2_>:
      shared_ptr(const shared_ptr&) noexcept = default;
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	6039      	str	r1, [r7, #0]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	683a      	ldr	r2, [r7, #0]
 8001c7e:	4611      	mov	r1, r2
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7ff ffd1 	bl	8001c28 <_ZNSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3708      	adds	r7, #8
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <_ZNSt10shared_ptrIN4tama7ContextEED1Ev>:
    class shared_ptr : public __shared_ptr<_Tp>
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7ff ffda 	bl	8001c54 <_ZNSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <_ZNSt12__shared_ptrIN4tama5InputELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b082      	sub	sp, #8
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	3304      	adds	r3, #4
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7fe fec3 	bl	8000a42 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}

08001cc6 <_ZNSt10shared_ptrIN4tama5InputEED1Ev>:
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	b082      	sub	sp, #8
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7ff ffea 	bl	8001caa <_ZNSt12__shared_ptrIN4tama5InputELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3708      	adds	r7, #8
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <_ZN4tama5StageC1ERKSt10shared_ptrINS_7ContextEE>:

tama::Stage::Stage(const std::shared_ptr<Context> &context) : context(context)
 8001ce0:	b590      	push	{r4, r7, lr}
 8001ce2:	b08b      	sub	sp, #44	; 0x2c
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	6039      	str	r1, [r7, #0]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7ff ff8b 	bl	8001c08 <_ZN4tama7OnInputC1Ev>
 8001cf2:	4a2c      	ldr	r2, [pc, #176]	; (8001da4 <_ZN4tama5StageC1ERKSt10shared_ptrINS_7ContextEE+0xc4>)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	601a      	str	r2, [r3, #0]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	3304      	adds	r3, #4
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f000 f864 	bl	8001dca <_ZNSt10shared_ptrIN4tama5SceneEEC1Ev>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	330c      	adds	r3, #12
 8001d06:	6839      	ldr	r1, [r7, #0]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7ff ffb1 	bl	8001c70 <_ZNSt10shared_ptrIN4tama7ContextEEC1ERKS2_>
{
    context->getInput()->addListener(std::shared_ptr<Stage>(this));
 8001d0e:	6838      	ldr	r0, [r7, #0]
 8001d10:	f000 f868 	bl	8001de4 <_ZNKSt19__shared_ptr_accessIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8001d14:	4602      	mov	r2, r0
 8001d16:	f107 0308 	add.w	r3, r7, #8
 8001d1a:	4611      	mov	r1, r2
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7ff f9e8 	bl	80010f2 <_ZN4tama7Context8getInputEv>
 8001d22:	f107 0308 	add.w	r3, r7, #8
 8001d26:	4618      	mov	r0, r3
 8001d28:	f000 f868 	bl	8001dfc <_ZNKSt19__shared_ptr_accessIN4tama5InputELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8001d2c:	4604      	mov	r4, r0
 8001d2e:	f107 0318 	add.w	r3, r7, #24
 8001d32:	6879      	ldr	r1, [r7, #4]
 8001d34:	4618      	mov	r0, r3
 8001d36:	f000 f86d 	bl	8001e14 <_ZNSt10shared_ptrIN4tama5StageEEC1IS1_vEEPT_>
 8001d3a:	f107 0218 	add.w	r2, r7, #24
 8001d3e:	f107 0310 	add.w	r3, r7, #16
 8001d42:	4611      	mov	r1, r2
 8001d44:	4618      	mov	r0, r3
 8001d46:	f000 f87f 	bl	8001e48 <_ZNSt10shared_ptrIN4tama7OnInputEEC1INS0_5StageEvEEOS_IT_E>
 8001d4a:	f107 0310 	add.w	r3, r7, #16
 8001d4e:	4619      	mov	r1, r3
 8001d50:	4620      	mov	r0, r4
 8001d52:	f7fe fc3f 	bl	80005d4 <_ZN4tama5Input11addListenerESt10shared_ptrINS_7OnInputEE>
 8001d56:	f107 0310 	add.w	r3, r7, #16
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7fe fee8 	bl	8000b30 <_ZNSt10shared_ptrIN4tama7OnInputEED1Ev>
 8001d60:	f107 0318 	add.w	r3, r7, #24
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7ff f902 	bl	8000f6e <_ZNSt10shared_ptrIN4tama5StageEED1Ev>
 8001d6a:	f107 0308 	add.w	r3, r7, #8
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7ff ffa9 	bl	8001cc6 <_ZNSt10shared_ptrIN4tama5InputEED1Ev>
    scene = std::make_shared<Scene>();
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	1d1c      	adds	r4, r3, #4
 8001d78:	f107 0320 	add.w	r3, r7, #32
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f000 f876 	bl	8001e6e <_ZSt11make_sharedIN4tama5SceneEJEESt10shared_ptrIT_EDpOT0_>
 8001d82:	f107 0320 	add.w	r3, r7, #32
 8001d86:	4619      	mov	r1, r3
 8001d88:	4620      	mov	r0, r4
 8001d8a:	f000 f894 	bl	8001eb6 <_ZNSt10shared_ptrIN4tama5SceneEEaSEOS2_>
 8001d8e:	f107 0320 	add.w	r3, r7, #32
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7ff ff1c 	bl	8001bd0 <_ZNSt10shared_ptrIN4tama5SceneEED1Ev>
}
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	372c      	adds	r7, #44	; 0x2c
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd90      	pop	{r4, r7, pc}
 8001da2:	bf00      	nop
 8001da4:	08017e40 	.word	0x08017e40

08001da8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
      { delete this; }
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d005      	beq.n	8001dc2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x1a>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	3304      	adds	r3, #4
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	4798      	blx	r3
 8001dc2:	bf00      	nop
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}

08001dca <_ZNSt10shared_ptrIN4tama5SceneEEC1Ev>:
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	b082      	sub	sp, #8
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f000 f8a1 	bl	8001f1c <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3708      	adds	r7, #8
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <_ZNKSt19__shared_ptr_accessIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
	return _M_get();
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f000 f8a6 	bl	8001f3e <_ZNKSt19__shared_ptr_accessIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 8001df2:	4603      	mov	r3, r0
      }
 8001df4:	4618      	mov	r0, r3
 8001df6:	3708      	adds	r7, #8
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <_ZNKSt19__shared_ptr_accessIN4tama5InputELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
	return _M_get();
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f000 f8a6 	bl	8001f56 <_ZNKSt19__shared_ptr_accessIN4tama5InputELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 8001e0a:	4603      	mov	r3, r0
      }
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3708      	adds	r7, #8
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <_ZNSt10shared_ptrIN4tama5StageEEC1IS1_vEEPT_>:
	shared_ptr(_Yp* __p) : __shared_ptr<_Tp>(__p) { }
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	6039      	str	r1, [r7, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6839      	ldr	r1, [r7, #0]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f000 f8a3 	bl	8001f6e <_ZNSt12__shared_ptrIN4tama5StageELN9__gnu_cxx12_Lock_policyE0EEC1IS1_vEEPT_>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <_ZSt4moveIRSt10shared_ptrIN4tama5StageEEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 8001e32:	b480      	push	{r7}
 8001e34:	b083      	sub	sp, #12
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	370c      	adds	r7, #12
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr

08001e48 <_ZNSt10shared_ptrIN4tama7OnInputEEC1INS0_5StageEvEEOS_IT_E>:
       *  @brief  Move-constructs a %shared_ptr instance from @a __r.
       *  @param  __r  A %shared_ptr rvalue.
       *  @post   *this contains the old value of @a __r, @a __r is empty.
       */
      template<typename _Yp, typename = _Constructible<shared_ptr<_Yp>>>
	shared_ptr(shared_ptr<_Yp>&& __r) noexcept
 8001e48:	b590      	push	{r4, r7, lr}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(std::move(__r)) { }
 8001e52:	687c      	ldr	r4, [r7, #4]
 8001e54:	6838      	ldr	r0, [r7, #0]
 8001e56:	f7ff ffec 	bl	8001e32 <_ZSt4moveIRSt10shared_ptrIN4tama5StageEEEONSt16remove_referenceIT_E4typeEOS6_>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	4620      	mov	r0, r4
 8001e60:	f000 f89d 	bl	8001f9e <_ZNSt12__shared_ptrIN4tama7OnInputELN9__gnu_cxx12_Lock_policyE0EEC1INS0_5StageEvEEOS_IT_LS3_0EE>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	4618      	mov	r0, r3
 8001e68:	370c      	adds	r7, #12
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd90      	pop	{r4, r7, pc}

08001e6e <_ZSt11make_sharedIN4tama5SceneEJEESt10shared_ptrIT_EDpOT0_>:
   *  @throw  std::bad_alloc, or an exception thrown from the
   *          constructor of @a _Tp.
   */
  template<typename _Tp, typename... _Args>
    inline shared_ptr<_Tp>
    make_shared(_Args&&... __args)
 8001e6e:	b580      	push	{r7, lr}
 8001e70:	b084      	sub	sp, #16
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
    {
      typedef typename std::remove_const<_Tp>::type _Tp_nc;
      return std::allocate_shared<_Tp>(std::allocator<_Tp_nc>(),
				       std::forward<_Args>(__args)...);
 8001e76:	f107 030c 	add.w	r3, r7, #12
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f000 f8ad 	bl	8001fda <_ZNSaIN4tama5SceneEEC1Ev>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f107 020c 	add.w	r2, r7, #12
 8001e86:	4611      	mov	r1, r2
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f000 f8be 	bl	800200a <_ZSt15allocate_sharedIN4tama5SceneESaIS1_EJEESt10shared_ptrIT_ERKT0_DpOT1_>
 8001e8e:	f107 030c 	add.w	r3, r7, #12
 8001e92:	4618      	mov	r0, r3
 8001e94:	f000 f8ad 	bl	8001ff2 <_ZNSaIN4tama5SceneEED1Ev>
    }
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	3710      	adds	r7, #16
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <_ZSt4moveIRSt10shared_ptrIN4tama5SceneEEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	370c      	adds	r7, #12
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr

08001eb6 <_ZNSt10shared_ptrIN4tama5SceneEEaSEOS2_>:
      operator=(shared_ptr&& __r) noexcept
 8001eb6:	b590      	push	{r4, r7, lr}
 8001eb8:	b083      	sub	sp, #12
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]
 8001ebe:	6039      	str	r1, [r7, #0]
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
 8001ec0:	687c      	ldr	r4, [r7, #4]
 8001ec2:	6838      	ldr	r0, [r7, #0]
 8001ec4:	f7ff ffec 	bl	8001ea0 <_ZSt4moveIRSt10shared_ptrIN4tama5SceneEEEONSt16remove_referenceIT_E4typeEOS6_>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	4619      	mov	r1, r3
 8001ecc:	4620      	mov	r0, r4
 8001ece:	f000 f8b5 	bl	800203c <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_>
	return *this;
 8001ed2:	687b      	ldr	r3, [r7, #4]
      }
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	370c      	adds	r7, #12
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd90      	pop	{r4, r7, pc}

08001edc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_base() noexcept
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
      { }
 8001ee4:	4a04      	ldr	r2, [pc, #16]	; (8001ef8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x1c>)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	601a      	str	r2, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4618      	mov	r0, r3
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr
 8001ef8:	08017e60 	.word	0x08017e60

08001efc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_base() noexcept
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
      { }
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f7ff ffe9 	bl	8001edc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8001f0a:	210c      	movs	r1, #12
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f015 fad0 	bl	80174b2 <_ZdlPvj>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4618      	mov	r0, r3
 8001f16:	3708      	adds	r7, #8
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      constexpr __shared_ptr() noexcept
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
      : _M_ptr(0), _M_refcount()
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2200      	movs	r2, #0
 8001f28:	601a      	str	r2, [r3, #0]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	3304      	adds	r3, #4
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7fe ffa3 	bl	8000e7a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
      { }
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	4618      	mov	r0, r3
 8001f38:	3708      	adds	r7, #8
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <_ZNKSt19__shared_ptr_accessIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b082      	sub	sp, #8
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f000 f897 	bl	800207a <_ZNKSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EE3getEv>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3708      	adds	r7, #8
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}

08001f56 <_ZNKSt19__shared_ptr_accessIN4tama5InputELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 8001f56:	b580      	push	{r7, lr}
 8001f58:	b082      	sub	sp, #8
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f000 f897 	bl	8002092 <_ZNKSt12__shared_ptrIN4tama5InputELN9__gnu_cxx12_Lock_policyE0EE3getEv>
 8001f64:	4603      	mov	r3, r0
 8001f66:	4618      	mov	r0, r3
 8001f68:	3708      	adds	r7, #8
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}

08001f6e <_ZNSt12__shared_ptrIN4tama5StageELN9__gnu_cxx12_Lock_policyE0EEC1IS1_vEEPT_>:
	__shared_ptr(_Yp* __p)
 8001f6e:	b590      	push	{r4, r7, lr}
 8001f70:	b085      	sub	sp, #20
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
 8001f76:	6039      	str	r1, [r7, #0]
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	683a      	ldr	r2, [r7, #0]
 8001f7c:	601a      	str	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	3304      	adds	r3, #4
 8001f82:	4622      	mov	r2, r4
 8001f84:	6839      	ldr	r1, [r7, #0]
 8001f86:	4618      	mov	r0, r3
 8001f88:	f000 f88f 	bl	80020aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama5StageEEET_St17integral_constantIbLb0EE>
	  _M_enable_shared_from_this_with(__p);
 8001f8c:	6839      	ldr	r1, [r7, #0]
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f000 f89a 	bl	80020c8 <_ZNSt12__shared_ptrIN4tama5StageELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	}
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	4618      	mov	r0, r3
 8001f98:	3714      	adds	r7, #20
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd90      	pop	{r4, r7, pc}

08001f9e <_ZNSt12__shared_ptrIN4tama7OnInputELN9__gnu_cxx12_Lock_policyE0EEC1INS0_5StageEvEEOS_IT_LS3_0EE>:

      template<typename _Yp, typename = _Compatible<_Yp>>
	__shared_ptr(__shared_ptr<_Yp, _Lp>&& __r) noexcept
 8001f9e:	b580      	push	{r7, lr}
 8001fa0:	b082      	sub	sp, #8
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
 8001fa6:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r._M_ptr), _M_refcount()
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	601a      	str	r2, [r3, #0]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	3304      	adds	r3, #4
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7fe ff60 	bl	8000e7a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	{
	  _M_refcount._M_swap(__r._M_refcount);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	1d1a      	adds	r2, r3, #4
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	3304      	adds	r3, #4
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	4610      	mov	r0, r2
 8001fc6:	f7fe ff66 	bl	8000e96 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  __r._M_ptr = 0;
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	601a      	str	r2, [r3, #0]
	}
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3708      	adds	r7, #8
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}

08001fda <_ZNSaIN4tama5SceneEEC1Ev>:
      allocator() throw() { }
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	b082      	sub	sp, #8
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	6078      	str	r0, [r7, #4]
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f000 f87b 	bl	80020de <_ZN9__gnu_cxx13new_allocatorIN4tama5SceneEEC1Ev>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4618      	mov	r0, r3
 8001fec:	3708      	adds	r7, #8
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <_ZNSaIN4tama5SceneEED1Ev>:
      ~allocator() throw() { }
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	b082      	sub	sp, #8
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f000 f87a 	bl	80020f4 <_ZN9__gnu_cxx13new_allocatorIN4tama5SceneEED1Ev>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	4618      	mov	r0, r3
 8002004:	3708      	adds	r7, #8
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}

0800200a <_ZSt15allocate_sharedIN4tama5SceneESaIS1_EJEESt10shared_ptrIT_ERKT0_DpOT1_>:
    allocate_shared(const _Alloc& __a, _Args&&... __args)
 800200a:	b580      	push	{r7, lr}
 800200c:	b084      	sub	sp, #16
 800200e:	af00      	add	r7, sp, #0
 8002010:	6078      	str	r0, [r7, #4]
 8002012:	6039      	str	r1, [r7, #0]
			     std::forward<_Args>(__args)...);
 8002014:	683a      	ldr	r2, [r7, #0]
 8002016:	4619      	mov	r1, r3
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f000 f876 	bl	800210a <_ZNSt10shared_ptrIN4tama5SceneEEC1ISaIS1_EJEEESt19_Sp_make_shared_tagRKT_DpOT0_>
    }
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	3710      	adds	r7, #16
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}

08002026 <_ZSt4moveIRSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 8002026:	b480      	push	{r7}
 8002028:	b083      	sub	sp, #12
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4618      	mov	r0, r3
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_>:
	  return *this;
	}
#endif

      __shared_ptr&
      operator=(__shared_ptr&& __r) noexcept
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]
      {
	__shared_ptr(std::move(__r)).swap(*this);
 8002046:	6838      	ldr	r0, [r7, #0]
 8002048:	f7ff ffed 	bl	8002026 <_ZSt4moveIRSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EEEONSt16remove_referenceIT_E4typeEOS8_>
 800204c:	4602      	mov	r2, r0
 800204e:	f107 0308 	add.w	r3, r7, #8
 8002052:	4611      	mov	r1, r2
 8002054:	4618      	mov	r0, r3
 8002056:	f000 f869 	bl	800212c <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EEC1EOS4_>
 800205a:	f107 0308 	add.w	r3, r7, #8
 800205e:	6879      	ldr	r1, [r7, #4]
 8002060:	4618      	mov	r0, r3
 8002062:	f000 f881 	bl	8002168 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE4swapERS4_>
 8002066:	f107 0308 	add.w	r3, r7, #8
 800206a:	4618      	mov	r0, r3
 800206c:	f7ff fd92 	bl	8001b94 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EED1Ev>
	return *this;
 8002070:	687b      	ldr	r3, [r7, #4]
      }
 8002072:	4618      	mov	r0, r3
 8002074:	3710      	adds	r7, #16
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}

0800207a <_ZNKSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EE3getEv>:
	_SafeConv<_Yp>
	reset(_Yp* __p, _Deleter __d, _Alloc __a)
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      element_type*
      get() const noexcept
 800207a:	b480      	push	{r7}
 800207c:	b083      	sub	sp, #12
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4618      	mov	r0, r3
 8002088:	370c      	adds	r7, #12
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr

08002092 <_ZNKSt12__shared_ptrIN4tama5InputELN9__gnu_cxx12_Lock_policyE0EE3getEv>:
      get() const noexcept
 8002092:	b480      	push	{r7}
 8002094:	b083      	sub	sp, #12
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4618      	mov	r0, r3
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr

080020aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama5StageEEET_St17integral_constantIbLb0EE>:
	__shared_count(_Ptr __p, /* is_array = */ false_type)
 80020aa:	b580      	push	{r7, lr}
 80020ac:	b084      	sub	sp, #16
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	60f8      	str	r0, [r7, #12]
 80020b2:	60b9      	str	r1, [r7, #8]
 80020b4:	713a      	strb	r2, [r7, #4]
	: __shared_count(__p)
 80020b6:	68b9      	ldr	r1, [r7, #8]
 80020b8:	68f8      	ldr	r0, [r7, #12]
 80020ba:	f000 f885 	bl	80021c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama5StageEEET_>
	{ }
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	4618      	mov	r0, r3
 80020c2:	3710      	adds	r7, #16
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}

080020c8 <_ZNSt12__shared_ptrIN4tama5StageELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	    __base->_M_weak_assign(const_cast<_Yp2*>(__p), _M_refcount);
	}

      template<typename _Yp, typename _Yp2 = typename remove_cv<_Yp>::type>
	typename enable_if<!__has_esft_base<_Yp2>::value>::type
	_M_enable_shared_from_this_with(_Yp*) noexcept
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	6039      	str	r1, [r7, #0]
	{ }
 80020d2:	bf00      	nop
 80020d4:	370c      	adds	r7, #12
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr

080020de <_ZN9__gnu_cxx13new_allocatorIN4tama5SceneEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80020de:	b480      	push	{r7}
 80020e0:	b083      	sub	sp, #12
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4618      	mov	r0, r3
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <_ZN9__gnu_cxx13new_allocatorIN4tama5SceneEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	4618      	mov	r0, r3
 8002100:	370c      	adds	r7, #12
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr

0800210a <_ZNSt10shared_ptrIN4tama5SceneEEC1ISaIS1_EJEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 800210a:	b590      	push	{r4, r7, lr}
 800210c:	b085      	sub	sp, #20
 800210e:	af00      	add	r7, sp, #0
 8002110:	60f8      	str	r0, [r7, #12]
 8002112:	7239      	strb	r1, [r7, #8]
 8002114:	607a      	str	r2, [r7, #4]
	: __shared_ptr<_Tp>(__tag, __a, std::forward<_Args>(__args)...)
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	4621      	mov	r1, r4
 800211c:	4618      	mov	r0, r3
 800211e:	f000 f888 	bl	8002232 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJEEESt19_Sp_make_shared_tagRKT_DpOT0_>
	{ }
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	4618      	mov	r0, r3
 8002126:	3714      	adds	r7, #20
 8002128:	46bd      	mov	sp, r7
 800212a:	bd90      	pop	{r4, r7, pc}

0800212c <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EEC1EOS4_>:
      __shared_ptr(__shared_ptr&& __r) noexcept
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	6039      	str	r1, [r7, #0]
      : _M_ptr(__r._M_ptr), _M_refcount()
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	601a      	str	r2, [r3, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	3304      	adds	r3, #4
 8002142:	4618      	mov	r0, r3
 8002144:	f7fe fe99 	bl	8000e7a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	_M_refcount._M_swap(__r._M_refcount);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	1d1a      	adds	r2, r3, #4
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	3304      	adds	r3, #4
 8002150:	4619      	mov	r1, r3
 8002152:	4610      	mov	r0, r2
 8002154:	f7fe fe9f 	bl	8000e96 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	__r._M_ptr = 0;
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	2200      	movs	r2, #0
 800215c:	601a      	str	r2, [r3, #0]
      }
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4618      	mov	r0, r3
 8002162:	3708      	adds	r7, #8
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE4swapERS4_>:
      swap(__shared_ptr<_Tp, _Lp>& __other) noexcept
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	6039      	str	r1, [r7, #0]
	std::swap(_M_ptr, __other._M_ptr);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	683a      	ldr	r2, [r7, #0]
 8002176:	4611      	mov	r1, r2
 8002178:	4618      	mov	r0, r3
 800217a:	f000 f8db 	bl	8002334 <_ZSt4swapIPN4tama5SceneEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS7_ESt18is_move_assignableIS7_EEE5valueEvE4typeERS7_SH_>
	_M_refcount._M_swap(__other._M_refcount);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	1d1a      	adds	r2, r3, #4
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	3304      	adds	r3, #4
 8002186:	4619      	mov	r1, r3
 8002188:	4610      	mov	r0, r2
 800218a:	f7fe fe84 	bl	8000e96 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
      }
 800218e:	bf00      	nop
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
	...

08002198 <_ZN4tama5StageD1Ev>:

namespace tama
{
    class Context;

class Stage : public OnInput
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	4a08      	ldr	r2, [pc, #32]	; (80021c4 <_ZN4tama5StageD1Ev+0x2c>)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	601a      	str	r2, [r3, #0]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	330c      	adds	r3, #12
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7ff fd70 	bl	8001c90 <_ZNSt10shared_ptrIN4tama7ContextEED1Ev>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	3304      	adds	r3, #4
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7ff fd0b 	bl	8001bd0 <_ZNSt10shared_ptrIN4tama5SceneEED1Ev>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4618      	mov	r0, r3
 80021be:	3708      	adds	r7, #8
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	08017e40 	.word	0x08017e40

080021c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama5StageEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 80021c8:	b590      	push	{r4, r7, lr}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	6039      	str	r1, [r7, #0]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	601a      	str	r2, [r3, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80021d8:	2010      	movs	r0, #16
 80021da:	f015 f96c 	bl	80174b6 <_Znwj>
 80021de:	4603      	mov	r3, r0
 80021e0:	461c      	mov	r4, r3
 80021e2:	6839      	ldr	r1, [r7, #0]
 80021e4:	4620      	mov	r0, r4
 80021e6:	f000 f8c5 	bl	8002374 <_ZNSt15_Sp_counted_ptrIPN4tama5StageELN9__gnu_cxx12_Lock_policyE0EEC1ES2_>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	601c      	str	r4, [r3, #0]
	}
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4618      	mov	r0, r3
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd90      	pop	{r4, r7, pc}

080021f8 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>:
        struct _Deleter
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	4618      	mov	r0, r3
 8002204:	f7ff fef5 	bl	8001ff2 <_ZNSaIN4tama5SceneEED1Ev>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4618      	mov	r0, r3
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>:
 8002212:	b580      	push	{r7, lr}
 8002214:	b082      	sub	sp, #8
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
 800221a:	6039      	str	r1, [r7, #0]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	683a      	ldr	r2, [r7, #0]
 8002220:	4611      	mov	r1, r2
 8002222:	4618      	mov	r0, r3
 8002224:	f000 f8bc 	bl	80023a0 <_ZNSaIN4tama5SceneEEC1ERKS1_>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	4618      	mov	r0, r3
 800222c:	3708      	adds	r7, #8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}

08002232 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 8002232:	b580      	push	{r7, lr}
 8002234:	b08c      	sub	sp, #48	; 0x30
 8002236:	af00      	add	r7, sp, #0
 8002238:	60f8      	str	r0, [r7, #12]
 800223a:	7239      	strb	r1, [r7, #8]
 800223c:	607a      	str	r2, [r7, #4]
	: _M_ptr(), _M_refcount()
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2200      	movs	r2, #0
 8002242:	601a      	str	r2, [r3, #0]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	3304      	adds	r3, #4
 8002248:	4618      	mov	r0, r3
 800224a:	f7fe fe16 	bl	8000e7a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 800224e:	f107 0320 	add.w	r3, r7, #32
 8002252:	6879      	ldr	r1, [r7, #4]
 8002254:	4618      	mov	r0, r3
 8002256:	f000 f8a3 	bl	80023a0 <_ZNSaIN4tama5SceneEEC1ERKS1_>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 800225a:	f107 0318 	add.w	r3, r7, #24
 800225e:	f107 0220 	add.w	r2, r7, #32
 8002262:	4611      	mov	r1, r2
 8002264:	4618      	mov	r0, r3
 8002266:	f000 f8a9 	bl	80023bc <_ZSt18__allocate_guardedISaIN4tama5SceneEEESt15__allocated_ptrIT_ERS4_>
	  auto __ptr = __guard.get();
 800226a:	f107 0318 	add.w	r3, r7, #24
 800226e:	4618      	mov	r0, r3
 8002270:	f000 f8cc 	bl	800240c <_ZNSt15__allocated_ptrISaIN4tama5SceneEEE3getEv>
 8002274:	62f8      	str	r0, [r7, #44]	; 0x2c
	  __traits::construct(__del._M_alloc, __ptr,
 8002276:	f107 0320 	add.w	r3, r7, #32
 800227a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800227c:	4618      	mov	r0, r3
 800227e:	f000 f8d3 	bl	8002428 <_ZNSt16allocator_traitsISaIN4tama5SceneEEE9constructIS1_JEEEvRS2_PT_DpOT0_>
	  __guard = nullptr;
 8002282:	f107 0318 	add.w	r3, r7, #24
 8002286:	2100      	movs	r1, #0
 8002288:	4618      	mov	r0, r3
 800228a:	f000 f8da 	bl	8002442 <_ZNSt15__allocated_ptrISaIN4tama5SceneEEEaSEDn>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 800228e:	f107 0220 	add.w	r2, r7, #32
 8002292:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002296:	4611      	mov	r1, r2
 8002298:	4618      	mov	r0, r3
 800229a:	f7ff ffba 	bl	8002212 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>
 800229e:	f107 0220 	add.w	r2, r7, #32
 80022a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022a6:	4611      	mov	r1, r2
 80022a8:	4618      	mov	r0, r3
 80022aa:	f000 f879 	bl	80023a0 <_ZNSaIN4tama5SceneEEC1ERKS1_>
 80022ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022b2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80022b6:	f107 0014 	add.w	r0, r7, #20
 80022ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80022bc:	f000 f8f6 	bl	80024ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama5SceneENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
 80022c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7ff fe94 	bl	8001ff2 <_ZNSaIN4tama5SceneEED1Ev>
 80022ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7ff ff92 	bl	80021f8 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	  _M_refcount._M_swap(__count);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	3304      	adds	r3, #4
 80022d8:	f107 0214 	add.w	r2, r7, #20
 80022dc:	4611      	mov	r1, r2
 80022de:	4618      	mov	r0, r3
 80022e0:	f7fe fdd9 	bl	8000e96 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  _M_ptr = __ptr;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022e8:	601a      	str	r2, [r3, #0]
	  _M_enable_shared_from_this_with(_M_ptr);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4619      	mov	r1, r3
 80022f0:	68f8      	ldr	r0, [r7, #12]
 80022f2:	f000 f932 	bl	800255a <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 80022f6:	f107 0314 	add.w	r3, r7, #20
 80022fa:	4618      	mov	r0, r3
 80022fc:	f7fe fba1 	bl	8000a42 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 8002300:	f107 0318 	add.w	r3, r7, #24
 8002304:	4618      	mov	r0, r3
 8002306:	f000 f86c 	bl	80023e2 <_ZNSt15__allocated_ptrISaIN4tama5SceneEEED1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 800230a:	f107 0320 	add.w	r3, r7, #32
 800230e:	4618      	mov	r0, r3
 8002310:	f7ff ff72 	bl	80021f8 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	}
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	4618      	mov	r0, r3
 8002318:	3730      	adds	r7, #48	; 0x30
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}

0800231e <_ZSt4moveIRPN4tama5SceneEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800231e:	b480      	push	{r7}
 8002320:	b083      	sub	sp, #12
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4618      	mov	r0, r3
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <_ZSt4swapIPN4tama5SceneEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS7_ESt18is_move_assignableIS7_EEE5valueEvE4typeERS7_SH_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f7ff ffed 	bl	800231e <_ZSt4moveIRPN4tama5SceneEEONSt16remove_referenceIT_E4typeEOS5_>
 8002344:	4603      	mov	r3, r0
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 800234a:	6838      	ldr	r0, [r7, #0]
 800234c:	f7ff ffe7 	bl	800231e <_ZSt4moveIRPN4tama5SceneEEONSt16remove_referenceIT_E4typeEOS5_>
 8002350:	4603      	mov	r3, r0
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8002358:	f107 030c 	add.w	r3, r7, #12
 800235c:	4618      	mov	r0, r3
 800235e:	f7ff ffde 	bl	800231e <_ZSt4moveIRPN4tama5SceneEEONSt16remove_referenceIT_E4typeEOS5_>
 8002362:	4603      	mov	r3, r0
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	601a      	str	r2, [r3, #0]
    }
 800236a:	bf00      	nop
 800236c:	3710      	adds	r7, #16
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
	...

08002374 <_ZNSt15_Sp_counted_ptrIPN4tama5StageELN9__gnu_cxx12_Lock_policyE0EEC1ES2_>:
      _Sp_counted_ptr(_Ptr __p) noexcept
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	6039      	str	r1, [r7, #0]
      : _M_ptr(__p) { }
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4618      	mov	r0, r3
 8002382:	f000 f8f5 	bl	8002570 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 8002386:	4a05      	ldr	r2, [pc, #20]	; (800239c <_ZNSt15_Sp_counted_ptrIPN4tama5StageELN9__gnu_cxx12_Lock_policyE0EEC1ES2_+0x28>)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	601a      	str	r2, [r3, #0]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	683a      	ldr	r2, [r7, #0]
 8002390:	60da      	str	r2, [r3, #12]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4618      	mov	r0, r3
 8002396:	3708      	adds	r7, #8
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	08017e24 	.word	0x08017e24

080023a0 <_ZNSaIN4tama5SceneEEC1ERKS1_>:
      allocator(const allocator& __a) throw()
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 80023aa:	6839      	ldr	r1, [r7, #0]
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f000 f8f5 	bl	800259c <_ZN9__gnu_cxx13new_allocatorIN4tama5SceneEEC1ERKS3_>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4618      	mov	r0, r3
 80023b6:	3708      	adds	r7, #8
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}

080023bc <_ZSt18__allocate_guardedISaIN4tama5SceneEEESt15__allocated_ptrIT_ERS4_>:
    };

  /// Allocate space for a single object using __a
  template<typename _Alloc>
    __allocated_ptr<_Alloc>
    __allocate_guarded(_Alloc& __a)
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
    {
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 80023c6:	2101      	movs	r1, #1
 80023c8:	6838      	ldr	r0, [r7, #0]
 80023ca:	f000 f8f3 	bl	80025b4 <_ZNSt16allocator_traitsISaIN4tama5SceneEEE8allocateERS2_j>
 80023ce:	4603      	mov	r3, r0
 80023d0:	461a      	mov	r2, r3
 80023d2:	6839      	ldr	r1, [r7, #0]
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f000 f8fc 	bl	80025d2 <_ZNSt15__allocated_ptrISaIN4tama5SceneEEEC1ERS2_PS1_>
    }
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	3708      	adds	r7, #8
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}

080023e2 <_ZNSt15__allocated_ptrISaIN4tama5SceneEEED1Ev>:
      ~__allocated_ptr()
 80023e2:	b580      	push	{r7, lr}
 80023e4:	b082      	sub	sp, #8
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d007      	beq.n	8002402 <_ZNSt15__allocated_ptrISaIN4tama5SceneEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6818      	ldr	r0, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	2201      	movs	r2, #1
 80023fc:	4619      	mov	r1, r3
 80023fe:	f000 f8fc 	bl	80025fa <_ZNSt16allocator_traitsISaIN4tama5SceneEEE10deallocateERS2_PS1_j>
      }
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4618      	mov	r0, r3
 8002406:	3708      	adds	r7, #8
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <_ZNSt15__allocated_ptrISaIN4tama5SceneEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	4618      	mov	r0, r3
 800241a:	f000 f8fd 	bl	8002618 <_ZNSt15__allocated_ptrISaIN4tama5SceneEEE10_S_raw_ptrEPS1_>
 800241e:	4603      	mov	r3, r0
 8002420:	4618      	mov	r0, r3
 8002422:	3708      	adds	r7, #8
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}

08002428 <_ZNSt16allocator_traitsISaIN4tama5SceneEEE9constructIS1_JEEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8002432:	6839      	ldr	r1, [r7, #0]
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f000 f8fa 	bl	800262e <_ZN9__gnu_cxx13new_allocatorIN4tama5SceneEE9constructIS2_JEEEvPT_DpOT0_>
 800243a:	bf00      	nop
 800243c:	3708      	adds	r7, #8
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}

08002442 <_ZNSt15__allocated_ptrISaIN4tama5SceneEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 8002442:	b480      	push	{r7}
 8002444:	b083      	sub	sp, #12
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
 800244a:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	605a      	str	r2, [r3, #4]
	return *this;
 8002452:	687b      	ldr	r3, [r7, #4]
      }
 8002454:	4618      	mov	r0, r3
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr

08002460 <_ZSt4moveIRNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	4618      	mov	r0, r3
 800246c:	370c      	adds	r7, #12
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr

08002476 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>:
        struct _Deleter
 8002476:	b580      	push	{r7, lr}
 8002478:	b082      	sub	sp, #8
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
 800247e:	6039      	str	r1, [r7, #0]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	683a      	ldr	r2, [r7, #0]
 8002484:	4611      	mov	r1, r2
 8002486:	4618      	mov	r0, r3
 8002488:	f7ff ff8a 	bl	80023a0 <_ZNSaIN4tama5SceneEEC1ERKS1_>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	4618      	mov	r0, r3
 8002490:	3708      	adds	r7, #8
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}

08002496 <_ZSt4moveIRSaIN4tama5SceneEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8002496:	b480      	push	{r7}
 8002498:	b083      	sub	sp, #12
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4618      	mov	r0, r3
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr

080024ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama5SceneENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
 80024ac:	b5b0      	push	{r4, r5, r7, lr}
 80024ae:	b08a      	sub	sp, #40	; 0x28
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	60f8      	str	r0, [r7, #12]
 80024b4:	60b9      	str	r1, [r7, #8]
 80024b6:	607a      	str	r2, [r7, #4]
 80024b8:	603b      	str	r3, [r7, #0]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2200      	movs	r2, #0
 80024be:	601a      	str	r2, [r3, #0]
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 80024c0:	f107 031c 	add.w	r3, r7, #28
 80024c4:	6839      	ldr	r1, [r7, #0]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f000 f8c5 	bl	8002656 <_ZNSaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	      auto __guard = std::__allocate_guarded(__a2);
 80024cc:	f107 0314 	add.w	r3, r7, #20
 80024d0:	f107 021c 	add.w	r2, r7, #28
 80024d4:	4611      	mov	r1, r2
 80024d6:	4618      	mov	r0, r3
 80024d8:	f000 f8d6 	bl	8002688 <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>
	      _Sp_cd_type* __mem = __guard.get();
 80024dc:	f107 0314 	add.w	r3, r7, #20
 80024e0:	4618      	mov	r0, r3
 80024e2:	f000 f8f9 	bl	80026d8 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>
 80024e6:	6278      	str	r0, [r7, #36]	; 0x24
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f7ff ffb9 	bl	8002460 <_ZSt4moveIRNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 80024ee:	4602      	mov	r2, r0
 80024f0:	f107 0320 	add.w	r3, r7, #32
 80024f4:	4611      	mov	r1, r2
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7ff ffbd 	bl	8002476 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 80024fc:	f107 0420 	add.w	r4, r7, #32
 8002500:	6838      	ldr	r0, [r7, #0]
 8002502:	f7ff ffc8 	bl	8002496 <_ZSt4moveIRSaIN4tama5SceneEEEONSt16remove_referenceIT_E4typeEOS5_>
 8002506:	4605      	mov	r5, r0
 8002508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250a:	4619      	mov	r1, r3
 800250c:	2014      	movs	r0, #20
 800250e:	f7fe f816 	bl	800053e <_ZnwjPv>
 8002512:	2800      	cmp	r0, #0
 8002514:	d004      	beq.n	8002520 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama5SceneENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x74>
 8002516:	462b      	mov	r3, r5
 8002518:	4622      	mov	r2, r4
 800251a:	68b9      	ldr	r1, [r7, #8]
 800251c:	f000 f916 	bl	800274c <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>
 8002520:	f107 0320 	add.w	r3, r7, #32
 8002524:	4618      	mov	r0, r3
 8002526:	f7ff fe67 	bl	80021f8 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	      _M_pi = __mem;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800252e:	601a      	str	r2, [r3, #0]
	      __guard = nullptr;
 8002530:	f107 0314 	add.w	r3, r7, #20
 8002534:	2100      	movs	r1, #0
 8002536:	4618      	mov	r0, r3
 8002538:	f000 f936 	bl	80027a8 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>
	      auto __guard = std::__allocate_guarded(__a2);
 800253c:	f107 0314 	add.w	r3, r7, #20
 8002540:	4618      	mov	r0, r3
 8002542:	f000 f8b4 	bl	80026ae <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 8002546:	f107 031c 	add.w	r3, r7, #28
 800254a:	4618      	mov	r0, r3
 800254c:	f000 f890 	bl	8002670 <_ZNSaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
	}
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	4618      	mov	r0, r3
 8002554:	3728      	adds	r7, #40	; 0x28
 8002556:	46bd      	mov	sp, r7
 8002558:	bdb0      	pop	{r4, r5, r7, pc}

0800255a <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp*) noexcept
 800255a:	b480      	push	{r7}
 800255c:	b083      	sub	sp, #12
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
 8002562:	6039      	str	r1, [r7, #0]
	{ }
 8002564:	bf00      	nop
 8002566:	370c      	adds	r7, #12
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      _Sp_counted_base() noexcept
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
      : _M_use_count(1), _M_weak_count(1) { }
 8002578:	4a07      	ldr	r2, [pc, #28]	; (8002598 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev+0x28>)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	601a      	str	r2, [r3, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2201      	movs	r2, #1
 8002582:	605a      	str	r2, [r3, #4]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2201      	movs	r2, #1
 8002588:	609a      	str	r2, [r3, #8]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4618      	mov	r0, r3
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr
 8002598:	08017e60 	.word	0x08017e60

0800259c <_ZN9__gnu_cxx13new_allocatorIN4tama5SceneEEC1ERKS3_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4618      	mov	r0, r3
 80025aa:	370c      	adds	r7, #12
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr

080025b4 <_ZNSt16allocator_traitsISaIN4tama5SceneEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80025be:	2200      	movs	r2, #0
 80025c0:	6839      	ldr	r1, [r7, #0]
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f000 f91f 	bl	8002806 <_ZN9__gnu_cxx13new_allocatorIN4tama5SceneEE8allocateEjPKv>
 80025c8:	4603      	mov	r3, r0
 80025ca:	4618      	mov	r0, r3
 80025cc:	3708      	adds	r7, #8
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}

080025d2 <_ZNSt15__allocated_ptrISaIN4tama5SceneEEEC1ERS2_PS1_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 80025d2:	b580      	push	{r7, lr}
 80025d4:	b084      	sub	sp, #16
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	60f8      	str	r0, [r7, #12]
 80025da:	60b9      	str	r1, [r7, #8]
 80025dc:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 80025de:	68b8      	ldr	r0, [r7, #8]
 80025e0:	f000 f92f 	bl	8002842 <_ZSt11__addressofISaIN4tama5SceneEEEPT_RS3_>
 80025e4:	4602      	mov	r2, r0
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	601a      	str	r2, [r3, #0]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	605a      	str	r2, [r3, #4]
      { }
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	4618      	mov	r0, r3
 80025f4:	3710      	adds	r7, #16
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}

080025fa <_ZNSt16allocator_traitsISaIN4tama5SceneEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80025fa:	b580      	push	{r7, lr}
 80025fc:	b084      	sub	sp, #16
 80025fe:	af00      	add	r7, sp, #0
 8002600:	60f8      	str	r0, [r7, #12]
 8002602:	60b9      	str	r1, [r7, #8]
 8002604:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	68b9      	ldr	r1, [r7, #8]
 800260a:	68f8      	ldr	r0, [r7, #12]
 800260c:	f000 f924 	bl	8002858 <_ZN9__gnu_cxx13new_allocatorIN4tama5SceneEE10deallocateEPS2_j>
 8002610:	bf00      	nop
 8002612:	3710      	adds	r7, #16
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}

08002618 <_ZNSt15__allocated_ptrISaIN4tama5SceneEEE10_S_raw_ptrEPS1_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	4618      	mov	r0, r3
 8002624:	370c      	adds	r7, #12
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr

0800262e <_ZN9__gnu_cxx13new_allocatorIN4tama5SceneEE9constructIS2_JEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800262e:	b580      	push	{r7, lr}
 8002630:	b082      	sub	sp, #8
 8002632:	af00      	add	r7, sp, #0
 8002634:	6078      	str	r0, [r7, #4]
 8002636:	6039      	str	r1, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	4619      	mov	r1, r3
 800263c:	2020      	movs	r0, #32
 800263e:	f7fd ff7e 	bl	800053e <_ZnwjPv>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d002      	beq.n	800264e <_ZN9__gnu_cxx13new_allocatorIN4tama5SceneEE9constructIS2_JEEEvPT_DpOT0_+0x20>
 8002648:	4618      	mov	r0, r3
 800264a:	f006 f913 	bl	8008874 <_ZN4tama5SceneC1Ev>
 800264e:	bf00      	nop
 8002650:	3708      	adds	r7, #8
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}

08002656 <_ZNSaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) throw() { }
 8002656:	b580      	push	{r7, lr}
 8002658:	b082      	sub	sp, #8
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
 800265e:	6039      	str	r1, [r7, #0]
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f000 f906 	bl	8002872 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4618      	mov	r0, r3
 800266a:	3708      	adds	r7, #8
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}

08002670 <_ZNSaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>:
      ~allocator() throw() { }
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f000 f905 	bl	8002888 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4618      	mov	r0, r3
 8002682:	3708      	adds	r7, #8
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}

08002688 <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>:
    __allocate_guarded(_Alloc& __a)
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 8002692:	2101      	movs	r1, #1
 8002694:	6838      	ldr	r0, [r7, #0]
 8002696:	f000 f902 	bl	800289e <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>
 800269a:	4603      	mov	r3, r0
 800269c:	461a      	mov	r2, r3
 800269e:	6839      	ldr	r1, [r7, #0]
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f000 f90b 	bl	80028bc <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
    }
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	3708      	adds	r7, #8
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}

080026ae <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>:
      ~__allocated_ptr()
 80026ae:	b580      	push	{r7, lr}
 80026b0:	b082      	sub	sp, #8
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d007      	beq.n	80026ce <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6818      	ldr	r0, [r3, #0]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	2201      	movs	r2, #1
 80026c8:	4619      	mov	r1, r3
 80026ca:	f000 f90b 	bl	80028e4 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>
      }
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4618      	mov	r0, r3
 80026d2:	3708      	adds	r7, #8
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	4618      	mov	r0, r3
 80026e6:	f000 f90c 	bl	8002902 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>
 80026ea:	4603      	mov	r3, r0
 80026ec:	4618      	mov	r0, r3
 80026ee:	3708      	adds	r7, #8
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, false>
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	4618      	mov	r0, r3
 8002700:	f7ff fd7a 	bl	80021f8 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	4618      	mov	r0, r3
 8002708:	3708      	adds	r7, #8
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}

0800270e <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama5SceneEELb1EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, true> : private _Tp
 800270e:	b580      	push	{r7, lr}
 8002710:	b082      	sub	sp, #8
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f7ff fc6b 	bl	8001ff2 <_ZNSaIN4tama5SceneEED1Ev>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	4618      	mov	r0, r3
 8002720:	3708      	adds	r7, #8
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}

08002726 <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>:
      class _Impl : _Sp_ebo_helper<0, _Deleter>, _Sp_ebo_helper<1, _Alloc>
 8002726:	b580      	push	{r7, lr}
 8002728:	b082      	sub	sp, #8
 800272a:	af00      	add	r7, sp, #0
 800272c:	6078      	str	r0, [r7, #4]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	3301      	adds	r3, #1
 8002732:	4618      	mov	r0, r3
 8002734:	f7ff ffeb 	bl	800270e <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama5SceneEELb1EED1Ev>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	4618      	mov	r0, r3
 800273c:	f7ff ffda 	bl	80026f4 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	4618      	mov	r0, r3
 8002744:	3708      	adds	r7, #8
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
	...

0800274c <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>:
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 800274c:	b590      	push	{r4, r7, lr}
 800274e:	b087      	sub	sp, #28
 8002750:	af00      	add	r7, sp, #0
 8002752:	60f8      	str	r0, [r7, #12]
 8002754:	60b9      	str	r1, [r7, #8]
 8002756:	607a      	str	r2, [r7, #4]
 8002758:	603b      	str	r3, [r7, #0]
      : _M_impl(__p, std::move(__d), __a) { }
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	4618      	mov	r0, r3
 800275e:	f7ff ff07 	bl	8002570 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 8002762:	4a10      	ldr	r2, [pc, #64]	; (80027a4 <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_+0x58>)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	601a      	str	r2, [r3, #0]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f103 040c 	add.w	r4, r3, #12
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f7ff fe76 	bl	8002460 <_ZSt4moveIRNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 8002774:	4602      	mov	r2, r0
 8002776:	f107 0314 	add.w	r3, r7, #20
 800277a:	4611      	mov	r1, r2
 800277c:	4618      	mov	r0, r3
 800277e:	f7ff fe7a 	bl	8002476 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 8002782:	f107 0214 	add.w	r2, r7, #20
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	68b9      	ldr	r1, [r7, #8]
 800278a:	4620      	mov	r0, r4
 800278c:	f000 f8c4 	bl	8002918 <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>
 8002790:	f107 0314 	add.w	r3, r7, #20
 8002794:	4618      	mov	r0, r3
 8002796:	f7ff fd2f 	bl	80021f8 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	4618      	mov	r0, r3
 800279e:	371c      	adds	r7, #28
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd90      	pop	{r4, r7, pc}
 80027a4:	08017e08 	.word	0x08017e08

080027a8 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	605a      	str	r2, [r3, #4]
	return *this;
 80027b8:	687b      	ldr	r3, [r7, #4]
      }
 80027ba:	4618      	mov	r0, r3
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr

080027c6 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>:
          void operator()(typename _Alloc::value_type* __ptr)
 80027c6:	b590      	push	{r4, r7, lr}
 80027c8:	b085      	sub	sp, #20
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
 80027ce:	6039      	str	r1, [r7, #0]
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 80027d0:	6879      	ldr	r1, [r7, #4]
 80027d2:	f107 0308 	add.w	r3, r7, #8
 80027d6:	683a      	ldr	r2, [r7, #0]
 80027d8:	4618      	mov	r0, r3
 80027da:	f7ff fefa 	bl	80025d2 <_ZNSt15__allocated_ptrISaIN4tama5SceneEEEC1ERS2_PS1_>
	    allocator_traits<_Alloc>::destroy(_M_alloc, __guard.get());
 80027de:	687c      	ldr	r4, [r7, #4]
 80027e0:	f107 0308 	add.w	r3, r7, #8
 80027e4:	4618      	mov	r0, r3
 80027e6:	f7ff fe11 	bl	800240c <_ZNSt15__allocated_ptrISaIN4tama5SceneEEE3getEv>
 80027ea:	4603      	mov	r3, r0
 80027ec:	4619      	mov	r1, r3
 80027ee:	4620      	mov	r0, r4
 80027f0:	f000 f8b0 	bl	8002954 <_ZNSt16allocator_traitsISaIN4tama5SceneEEE7destroyIS1_EEvRS2_PT_>
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 80027f4:	f107 0308 	add.w	r3, r7, #8
 80027f8:	4618      	mov	r0, r3
 80027fa:	f7ff fdf2 	bl	80023e2 <_ZNSt15__allocated_ptrISaIN4tama5SceneEEED1Ev>
          }
 80027fe:	bf00      	nop
 8002800:	3714      	adds	r7, #20
 8002802:	46bd      	mov	sp, r7
 8002804:	bd90      	pop	{r4, r7, pc}

08002806 <_ZN9__gnu_cxx13new_allocatorIN4tama5SceneEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8002806:	b580      	push	{r7, lr}
 8002808:	b084      	sub	sp, #16
 800280a:	af00      	add	r7, sp, #0
 800280c:	60f8      	str	r0, [r7, #12]
 800280e:	60b9      	str	r1, [r7, #8]
 8002810:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8002812:	68f8      	ldr	r0, [r7, #12]
 8002814:	f000 f8ab 	bl	800296e <_ZNK9__gnu_cxx13new_allocatorIN4tama5SceneEE8max_sizeEv>
 8002818:	4602      	mov	r2, r0
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	4293      	cmp	r3, r2
 800281e:	bf8c      	ite	hi
 8002820:	2301      	movhi	r3, #1
 8002822:	2300      	movls	r3, #0
 8002824:	b2db      	uxtb	r3, r3
 8002826:	2b00      	cmp	r3, #0
 8002828:	d001      	beq.n	800282e <_ZN9__gnu_cxx13new_allocatorIN4tama5SceneEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800282a:	f014 fe72 	bl	8017512 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	015b      	lsls	r3, r3, #5
 8002832:	4618      	mov	r0, r3
 8002834:	f014 fe3f 	bl	80174b6 <_Znwj>
 8002838:	4603      	mov	r3, r0
      }
 800283a:	4618      	mov	r0, r3
 800283c:	3710      	adds	r7, #16
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}

08002842 <_ZSt11__addressofISaIN4tama5SceneEEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8002842:	b480      	push	{r7}
 8002844:	b083      	sub	sp, #12
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4618      	mov	r0, r3
 800284e:	370c      	adds	r7, #12
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr

08002858 <_ZN9__gnu_cxx13new_allocatorIN4tama5SceneEE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	60b9      	str	r1, [r7, #8]
 8002862:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8002864:	68b8      	ldr	r0, [r7, #8]
 8002866:	f014 fe3f 	bl	80174e8 <_ZdlPv>
      }
 800286a:	bf00      	nop
 800286c:	3710      	adds	r7, #16
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}

08002872 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8002872:	b480      	push	{r7}
 8002874:	b083      	sub	sp, #12
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4618      	mov	r0, r3
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	4618      	mov	r0, r3
 8002894:	370c      	adds	r7, #12
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr

0800289e <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>:
      allocate(allocator_type& __a, size_type __n)
 800289e:	b580      	push	{r7, lr}
 80028a0:	b082      	sub	sp, #8
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
 80028a6:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80028a8:	2200      	movs	r2, #0
 80028aa:	6839      	ldr	r1, [r7, #0]
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f000 f86a 	bl	8002986 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>
 80028b2:	4603      	mov	r3, r0
 80028b4:	4618      	mov	r0, r3
 80028b6:	3708      	adds	r7, #8
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}

080028bc <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	60f8      	str	r0, [r7, #12]
 80028c4:	60b9      	str	r1, [r7, #8]
 80028c6:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 80028c8:	68b8      	ldr	r0, [r7, #8]
 80028ca:	f000 f87d 	bl	80029c8 <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>
 80028ce:	4602      	mov	r2, r0
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	601a      	str	r2, [r3, #0]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	605a      	str	r2, [r3, #4]
      { }
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	4618      	mov	r0, r3
 80028de:	3710      	adds	r7, #16
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	60f8      	str	r0, [r7, #12]
 80028ec:	60b9      	str	r1, [r7, #8]
 80028ee:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	68b9      	ldr	r1, [r7, #8]
 80028f4:	68f8      	ldr	r0, [r7, #12]
 80028f6:	f000 f872 	bl	80029de <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>
 80028fa:	bf00      	nop
 80028fc:	3710      	adds	r7, #16
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}

08002902 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 8002902:	b480      	push	{r7}
 8002904:	b083      	sub	sp, #12
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4618      	mov	r0, r3
 800290e:	370c      	adds	r7, #12
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr

08002918 <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 8002918:	b590      	push	{r4, r7, lr}
 800291a:	b085      	sub	sp, #20
 800291c:	af00      	add	r7, sp, #0
 800291e:	60f8      	str	r0, [r7, #12]
 8002920:	60b9      	str	r1, [r7, #8]
 8002922:	607a      	str	r2, [r7, #4]
 8002924:	603b      	str	r3, [r7, #0]
	: _M_ptr(__p), _Del_base(std::move(__d)), _Alloc_base(__a)
 8002926:	68fc      	ldr	r4, [r7, #12]
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f7ff fd99 	bl	8002460 <_ZSt4moveIRNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 800292e:	4603      	mov	r3, r0
 8002930:	4619      	mov	r1, r3
 8002932:	4620      	mov	r0, r4
 8002934:	f000 f860 	bl	80029f8 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	3301      	adds	r3, #1
 800293c:	6839      	ldr	r1, [r7, #0]
 800293e:	4618      	mov	r0, r3
 8002940:	f000 f86d 	bl	8002a1e <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama5SceneEELb1EEC1ERKS2_>
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	68ba      	ldr	r2, [r7, #8]
 8002948:	605a      	str	r2, [r3, #4]
	{ }
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	4618      	mov	r0, r3
 800294e:	3714      	adds	r7, #20
 8002950:	46bd      	mov	sp, r7
 8002952:	bd90      	pop	{r4, r7, pc}

08002954 <_ZNSt16allocator_traitsISaIN4tama5SceneEEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 800295e:	6839      	ldr	r1, [r7, #0]
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f000 f89d 	bl	8002aa0 <_ZN9__gnu_cxx13new_allocatorIN4tama5SceneEE7destroyIS2_EEvPT_>
 8002966:	bf00      	nop
 8002968:	3708      	adds	r7, #8
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}

0800296e <_ZNK9__gnu_cxx13new_allocatorIN4tama5SceneEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800296e:	b480      	push	{r7}
 8002970:	b083      	sub	sp, #12
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8002976:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
 800297a:	4618      	mov	r0, r3
 800297c:	370c      	adds	r7, #12
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr

08002986 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8002986:	b580      	push	{r7, lr}
 8002988:	b084      	sub	sp, #16
 800298a:	af00      	add	r7, sp, #0
 800298c:	60f8      	str	r0, [r7, #12]
 800298e:	60b9      	str	r1, [r7, #8]
 8002990:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8002992:	68f8      	ldr	r0, [r7, #12]
 8002994:	f000 f890 	bl	8002ab8 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>
 8002998:	4602      	mov	r2, r0
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	4293      	cmp	r3, r2
 800299e:	bf8c      	ite	hi
 80029a0:	2301      	movhi	r3, #1
 80029a2:	2300      	movls	r3, #0
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d001      	beq.n	80029ae <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80029aa:	f014 fdb2 	bl	8017512 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80029ae:	68ba      	ldr	r2, [r7, #8]
 80029b0:	4613      	mov	r3, r2
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	4413      	add	r3, r2
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	4618      	mov	r0, r3
 80029ba:	f014 fd7c 	bl	80174b6 <_Znwj>
 80029be:	4603      	mov	r3, r0
      }
 80029c0:	4618      	mov	r0, r3
 80029c2:	3710      	adds	r7, #16
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	4618      	mov	r0, r3
 80029d4:	370c      	adds	r7, #12
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr

080029de <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>:
      deallocate(pointer __p, size_type)
 80029de:	b580      	push	{r7, lr}
 80029e0:	b084      	sub	sp, #16
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	60f8      	str	r0, [r7, #12]
 80029e6:	60b9      	str	r1, [r7, #8]
 80029e8:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 80029ea:	68b8      	ldr	r0, [r7, #8]
 80029ec:	f014 fd7c 	bl	80174e8 <_ZdlPv>
      }
 80029f0:	bf00      	nop
 80029f2:	3710      	adds	r7, #16
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>:
      explicit _Sp_ebo_helper(_Tp&& __tp) : _M_tp(std::move(__tp)) { }
 80029f8:	b590      	push	{r4, r7, lr}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]
 8002a02:	687c      	ldr	r4, [r7, #4]
 8002a04:	6838      	ldr	r0, [r7, #0]
 8002a06:	f7ff fd2b 	bl	8002460 <_ZSt4moveIRNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	4620      	mov	r0, r4
 8002a10:	f7ff fd31 	bl	8002476 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	4618      	mov	r0, r3
 8002a18:	370c      	adds	r7, #12
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd90      	pop	{r4, r7, pc}

08002a1e <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama5SceneEELb1EEC1ERKS2_>:
      explicit _Sp_ebo_helper(const _Tp& __tp) : _Tp(__tp) { }
 8002a1e:	b580      	push	{r7, lr}
 8002a20:	b082      	sub	sp, #8
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
 8002a26:	6039      	str	r1, [r7, #0]
 8002a28:	6839      	ldr	r1, [r7, #0]
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f7ff fcb8 	bl	80023a0 <_ZNSaIN4tama5SceneEEC1ERKS1_>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	4618      	mov	r0, r3
 8002a34:	3708      	adds	r7, #8
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}

08002a3a <_ZNSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_ptr() = default;
 8002a3a:	b580      	push	{r7, lr}
 8002a3c:	b082      	sub	sp, #8
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	3304      	adds	r3, #4
 8002a46:	4618      	mov	r0, r3
 8002a48:	f7fd fffb 	bl	8000a42 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3708      	adds	r7, #8
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}

08002a56 <_ZNSt10shared_ptrIN4tama14ChangeObserverEED1Ev>:
    class shared_ptr : public __shared_ptr<_Tp>
 8002a56:	b580      	push	{r7, lr}
 8002a58:	b082      	sub	sp, #8
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4618      	mov	r0, r3
 8002a62:	f7ff ffea 	bl	8002a3a <_ZNSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3708      	adds	r7, #8
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}

08002a70 <_ZN4tama5SceneD1Ev>:
#include "../drawable/Drawable.h"
#include "../../../../Configuration/display.config.h"

namespace tama
{
    class Scene : public ChangeObserver
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b082      	sub	sp, #8
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	4a08      	ldr	r2, [pc, #32]	; (8002a9c <_ZN4tama5SceneD1Ev+0x2c>)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	601a      	str	r2, [r3, #0]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	330c      	adds	r3, #12
 8002a82:	4618      	mov	r0, r3
 8002a84:	f000 f826 	bl	8002ad4 <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EED1Ev>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	3304      	adds	r3, #4
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f7ff ffe2 	bl	8002a56 <_ZNSt10shared_ptrIN4tama14ChangeObserverEED1Ev>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4618      	mov	r0, r3
 8002a96:	3708      	adds	r7, #8
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	0801b008 	.word	0x0801b008

08002aa0 <_ZN9__gnu_cxx13new_allocatorIN4tama5SceneEE7destroyIS2_EEvPT_>:

      template<typename _Up>
	void
	destroy(_Up* __p) { __p->~_Up(); }
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]
 8002aaa:	6838      	ldr	r0, [r7, #0]
 8002aac:	f7ff ffe0 	bl	8002a70 <_ZN4tama5SceneD1Ev>
 8002ab0:	bf00      	nop
 8002ab2:	3708      	adds	r7, #8
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8002ac0:	4b03      	ldr	r3, [pc, #12]	; (8002ad0 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv+0x18>)
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	370c      	adds	r7, #12
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	0ccccccc 	.word	0x0ccccccc

08002ad4 <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8002ad4:	b5b0      	push	{r4, r5, r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681c      	ldr	r4, [r3, #0]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator()); }
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f000 f835 	bl	8002b56 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE19_M_get_Tp_allocatorEv>
 8002aec:	4603      	mov	r3, r0
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002aee:	461a      	mov	r2, r3
 8002af0:	4629      	mov	r1, r5
 8002af2:	4620      	mov	r0, r4
 8002af4:	f000 f83a 	bl	8002b6c <_ZSt8_DestroyIPSt10shared_ptrIN4tama8DrawableEES3_EvT_S5_RSaIT0_E>
		      _M_get_Tp_allocator()); }
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	4618      	mov	r0, r3
 8002afc:	f000 f811 	bl	8002b22 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EED1Ev>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	4618      	mov	r0, r3
 8002b04:	3708      	adds	r7, #8
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bdb0      	pop	{r4, r5, r7, pc}

08002b0a <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8002b0a:	b580      	push	{r7, lr}
 8002b0c:	b082      	sub	sp, #8
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f000 f838 	bl	8002b88 <_ZNSaISt10shared_ptrIN4tama8DrawableEEED1Ev>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3708      	adds	r7, #8
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}

08002b22 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8002b22:	b580      	push	{r7, lr}
 8002b24:	b082      	sub	sp, #8
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6819      	ldr	r1, [r3, #0]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	689b      	ldr	r3, [r3, #8]
		      - this->_M_impl._M_start); }
 8002b32:	461a      	mov	r2, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	10db      	asrs	r3, r3, #3
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f000 f82e 	bl	8002ba0 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE13_M_deallocateEPS3_j>
		      - this->_M_impl._M_start); }
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7ff ffdf 	bl	8002b0a <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE12_Vector_implD1Ev>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3708      	adds	r7, #8
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}

08002b56 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8002b56:	b480      	push	{r7}
 8002b58:	b083      	sub	sp, #12
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4618      	mov	r0, r3
 8002b62:	370c      	adds	r7, #12
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr

08002b6c <_ZSt8_DestroyIPSt10shared_ptrIN4tama8DrawableEES3_EvT_S5_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b084      	sub	sp, #16
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	60f8      	str	r0, [r7, #12]
 8002b74:	60b9      	str	r1, [r7, #8]
 8002b76:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8002b78:	68b9      	ldr	r1, [r7, #8]
 8002b7a:	68f8      	ldr	r0, [r7, #12]
 8002b7c:	f000 f823 	bl	8002bc6 <_ZSt8_DestroyIPSt10shared_ptrIN4tama8DrawableEEEvT_S5_>
    }
 8002b80:	bf00      	nop
 8002b82:	3710      	adds	r7, #16
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <_ZNSaISt10shared_ptrIN4tama8DrawableEEED1Ev>:
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f000 f825 	bl	8002be0 <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama8DrawableEEED1Ev>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3708      	adds	r7, #8
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE13_M_deallocateEPS3_j>:
      _M_deallocate(pointer __p, size_t __n)
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	60f8      	str	r0, [r7, #12]
 8002ba8:	60b9      	str	r1, [r7, #8]
 8002baa:	607a      	str	r2, [r7, #4]
	if (__p)
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d005      	beq.n	8002bbe <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE13_M_deallocateEPS3_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	68b9      	ldr	r1, [r7, #8]
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f000 f81c 	bl	8002bf6 <_ZNSt16allocator_traitsISaISt10shared_ptrIN4tama8DrawableEEEE10deallocateERS4_PS3_j>
      }
 8002bbe:	bf00      	nop
 8002bc0:	3710      	adds	r7, #16
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}

08002bc6 <_ZSt8_DestroyIPSt10shared_ptrIN4tama8DrawableEEEvT_S5_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8002bc6:	b580      	push	{r7, lr}
 8002bc8:	b082      	sub	sp, #8
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	6078      	str	r0, [r7, #4]
 8002bce:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8002bd0:	6839      	ldr	r1, [r7, #0]
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f000 f829 	bl	8002c2a <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt10shared_ptrIN4tama8DrawableEEEEvT_S7_>
    }
 8002bd8:	bf00      	nop
 8002bda:	3708      	adds	r7, #8
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama8DrawableEEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	4618      	mov	r0, r3
 8002bec:	370c      	adds	r7, #12
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr

08002bf6 <_ZNSt16allocator_traitsISaISt10shared_ptrIN4tama8DrawableEEEE10deallocateERS4_PS3_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8002bf6:	b580      	push	{r7, lr}
 8002bf8:	b084      	sub	sp, #16
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	60f8      	str	r0, [r7, #12]
 8002bfe:	60b9      	str	r1, [r7, #8]
 8002c00:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	68b9      	ldr	r1, [r7, #8]
 8002c06:	68f8      	ldr	r0, [r7, #12]
 8002c08:	f000 f827 	bl	8002c5a <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama8DrawableEEE10deallocateEPS4_j>
 8002c0c:	bf00      	nop
 8002c0e:	3710      	adds	r7, #16
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <_ZSt11__addressofISt10shared_ptrIN4tama8DrawableEEEPT_RS4_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	4618      	mov	r0, r3
 8002c20:	370c      	adds	r7, #12
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr

08002c2a <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt10shared_ptrIN4tama8DrawableEEEEvT_S7_>:
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
 8002c2a:	b580      	push	{r7, lr}
 8002c2c:	b082      	sub	sp, #8
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
 8002c32:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d00a      	beq.n	8002c52 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt10shared_ptrIN4tama8DrawableEEEEvT_S7_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f7ff ffe9 	bl	8002c14 <_ZSt11__addressofISt10shared_ptrIN4tama8DrawableEEEPT_RS4_>
 8002c42:	4603      	mov	r3, r0
 8002c44:	4618      	mov	r0, r3
 8002c46:	f000 f830 	bl	8002caa <_ZSt8_DestroyISt10shared_ptrIN4tama8DrawableEEEvPT_>
	  for (; __first != __last; ++__first)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	3308      	adds	r3, #8
 8002c4e:	607b      	str	r3, [r7, #4]
 8002c50:	e7f0      	b.n	8002c34 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt10shared_ptrIN4tama8DrawableEEEEvT_S7_+0xa>
	}
 8002c52:	bf00      	nop
 8002c54:	3708      	adds	r7, #8
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}

08002c5a <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama8DrawableEEE10deallocateEPS4_j>:
      deallocate(pointer __p, size_type)
 8002c5a:	b580      	push	{r7, lr}
 8002c5c:	b084      	sub	sp, #16
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	60f8      	str	r0, [r7, #12]
 8002c62:	60b9      	str	r1, [r7, #8]
 8002c64:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8002c66:	68b8      	ldr	r0, [r7, #8]
 8002c68:	f014 fc3e 	bl	80174e8 <_ZdlPv>
      }
 8002c6c:	bf00      	nop
 8002c6e:	3710      	adds	r7, #16
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <_ZNSt12__shared_ptrIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	3304      	adds	r3, #4
 8002c80:	4618      	mov	r0, r3
 8002c82:	f7fd fede 	bl	8000a42 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3708      	adds	r7, #8
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <_ZNSt10shared_ptrIN4tama8DrawableEED1Ev>:
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f7ff ffea 	bl	8002c74 <_ZNSt12__shared_ptrIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3708      	adds	r7, #8
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}

08002caa <_ZSt8_DestroyISt10shared_ptrIN4tama8DrawableEEEvPT_>:
    _Destroy(_Tp* __pointer)
 8002caa:	b580      	push	{r7, lr}
 8002cac:	b082      	sub	sp, #8
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
    { __pointer->~_Tp(); }
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f7ff ffec 	bl	8002c90 <_ZNSt10shared_ptrIN4tama8DrawableEED1Ev>
 8002cb8:	bf00      	nop
 8002cba:	3708      	adds	r7, #8
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <_ZNSt15_Sp_counted_ptrIPN4tama5StageELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	4a05      	ldr	r2, [pc, #20]	; (8002ce0 <_ZNSt15_Sp_counted_ptrIPN4tama5StageELN9__gnu_cxx12_Lock_policyE0EED1Ev+0x20>)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	601a      	str	r2, [r3, #0]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7ff f903 	bl	8001edc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3708      	adds	r7, #8
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	08017e24 	.word	0x08017e24

08002ce4 <_ZNSt15_Sp_counted_ptrIPN4tama5StageELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b082      	sub	sp, #8
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f7ff ffe7 	bl	8002cc0 <_ZNSt15_Sp_counted_ptrIPN4tama5StageELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8002cf2:	2110      	movs	r1, #16
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f014 fbdc 	bl	80174b2 <_ZdlPvj>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3708      	adds	r7, #8
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:
      ~_Sp_counted_deleter() noexcept { }
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	4a08      	ldr	r2, [pc, #32]	; (8002d30 <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev+0x2c>)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	601a      	str	r2, [r3, #0]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	330c      	adds	r3, #12
 8002d16:	4618      	mov	r0, r3
 8002d18:	f7ff fd05 	bl	8002726 <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7ff f8dc 	bl	8001edc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	4618      	mov	r0, r3
 8002d28:	3708      	adds	r7, #8
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	08017e08 	.word	0x08017e08

08002d34 <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b082      	sub	sp, #8
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f7ff ffe1 	bl	8002d04 <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
 8002d42:	2114      	movs	r1, #20
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f014 fbb4 	bl	80174b2 <_ZdlPvj>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3708      	adds	r7, #8
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      _M_dispose() noexcept
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
      { _M_impl._M_del()(_M_impl._M_ptr); }
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	330c      	adds	r3, #12
 8002d60:	4618      	mov	r0, r3
 8002d62:	f000 f86d 	bl	8002e40 <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>
 8002d66:	4602      	mov	r2, r0
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	691b      	ldr	r3, [r3, #16]
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	4610      	mov	r0, r2
 8002d70:	f7ff fd29 	bl	80027c6 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>
 8002d74:	bf00      	nop
 8002d76:	3708      	adds	r7, #8
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}

08002d7c <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b086      	sub	sp, #24
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	330c      	adds	r3, #12
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f000 f866 	bl	8002e5a <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	f107 0314 	add.w	r3, r7, #20
 8002d94:	4611      	mov	r1, r2
 8002d96:	4618      	mov	r0, r3
 8002d98:	f7ff fc5d 	bl	8002656 <_ZNSaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 8002d9c:	f107 0114 	add.w	r1, r7, #20
 8002da0:	f107 030c 	add.w	r3, r7, #12
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7ff fd88 	bl	80028bc <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
	this->~_Sp_counted_deleter();
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	f7ff ffa9 	bl	8002d04 <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 8002db2:	f107 030c 	add.w	r3, r7, #12
 8002db6:	4618      	mov	r0, r3
 8002db8:	f7ff fc79 	bl	80026ae <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	__allocator_type __a(_M_impl._M_alloc());
 8002dbc:	f107 0314 	add.w	r3, r7, #20
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f7ff fc55 	bl	8002670 <_ZNSaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
      }
 8002dc6:	bf00      	nop
 8002dc8:	3718      	adds	r7, #24
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}

08002dce <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept
 8002dce:	b480      	push	{r7}
 8002dd0:	b083      	sub	sp, #12
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	6078      	str	r0, [r7, #4]
 8002dd6:	6039      	str	r1, [r7, #0]
        return nullptr;
 8002dd8:	2300      	movs	r3, #0
      }
 8002dda:	4618      	mov	r0, r3
 8002ddc:	370c      	adds	r7, #12
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr

08002de6 <_ZNSt15_Sp_counted_ptrIPN4tama5StageELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 8002de6:	b590      	push	{r4, r7, lr}
 8002de8:	b083      	sub	sp, #12
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
      { delete _M_ptr; }
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	68dc      	ldr	r4, [r3, #12]
 8002df2:	2c00      	cmp	r4, #0
 8002df4:	d006      	beq.n	8002e04 <_ZNSt15_Sp_counted_ptrIPN4tama5StageELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x1e>
 8002df6:	4620      	mov	r0, r4
 8002df8:	f7ff f9ce 	bl	8002198 <_ZN4tama5StageD1Ev>
 8002dfc:	2114      	movs	r1, #20
 8002dfe:	4620      	mov	r0, r4
 8002e00:	f014 fb57 	bl	80174b2 <_ZdlPvj>
 8002e04:	bf00      	nop
 8002e06:	370c      	adds	r7, #12
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd90      	pop	{r4, r7, pc}

08002e0c <_ZNSt15_Sp_counted_ptrIPN4tama5StageELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
      { delete this; }
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d002      	beq.n	8002e20 <_ZNSt15_Sp_counted_ptrIPN4tama5StageELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x14>
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f7ff ff62 	bl	8002ce4 <_ZNSt15_Sp_counted_ptrIPN4tama5StageELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 8002e20:	bf00      	nop
 8002e22:	3708      	adds	r7, #8
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <_ZNSt15_Sp_counted_ptrIPN4tama5StageELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info&) noexcept
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	6039      	str	r1, [r7, #0]
      { return nullptr; }
 8002e32:	2300      	movs	r3, #0
 8002e34:	4618      	mov	r0, r3
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>:
	_Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f000 f813 	bl	8002e76 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>
 8002e50:	4603      	mov	r3, r0
 8002e52:	4618      	mov	r0, r3
 8002e54:	3708      	adds	r7, #8
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}

08002e5a <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }
 8002e5a:	b580      	push	{r7, lr}
 8002e5c:	b082      	sub	sp, #8
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	6078      	str	r0, [r7, #4]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	3301      	adds	r3, #1
 8002e66:	4618      	mov	r0, r3
 8002e68:	f000 f810 	bl	8002e8c <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama5SceneEELb1EE6_S_getERS3_>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3708      	adds	r7, #8
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}

08002e76 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>:
      _S_get(_Sp_ebo_helper& __eboh)
 8002e76:	b480      	push	{r7}
 8002e78:	b083      	sub	sp, #12
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6078      	str	r0, [r7, #4]
      { return __eboh._M_tp; }
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4618      	mov	r0, r3
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr

08002e8c <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama5SceneEELb1EE6_S_getERS3_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	4618      	mov	r0, r3
 8002e98:	370c      	adds	r7, #12
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr

08002ea2 <_ZSt4moveIRSt6vectorIN4tama4ToneESaIS2_EEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 8002ea2:	b480      	push	{r7}
 8002ea4:	b083      	sub	sp, #12
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4618      	mov	r0, r3
 8002eae:	370c      	adds	r7, #12
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr

08002eb8 <_ZN4tama11SoundPlayer4playESt6vectorINS_4ToneESaIS2_EE>:
#include "SoundPlayer.h"

#include <utility>

void tama::SoundPlayer::play(std::vector<tama::Tone> tones)
{
 8002eb8:	b590      	push	{r4, r7, lr}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	6039      	str	r1, [r7, #0]
    currentTone = 0;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	61da      	str	r2, [r3, #28]
    playingNow = true;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 2020 	strb.w	r2, [r3, #32]
    melody = std::move(tones);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	f103 0410 	add.w	r4, r3, #16
 8002ed6:	6838      	ldr	r0, [r7, #0]
 8002ed8:	f7ff ffe3 	bl	8002ea2 <_ZSt4moveIRSt6vectorIN4tama4ToneESaIS2_EEEONSt16remove_referenceIT_E4typeEOS7_>
 8002edc:	4603      	mov	r3, r0
 8002ede:	4619      	mov	r1, r3
 8002ee0:	4620      	mov	r0, r4
 8002ee2:	f000 f8ea 	bl	80030ba <_ZNSt6vectorIN4tama4ToneESaIS1_EEaSEOS3_>
    time->startTimer();
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f000 f8fb 	bl	80030e4 <_ZNKSt19__shared_ptr_accessIN4tama11TimeMonitorELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	6813      	ldr	r3, [r2, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4610      	mov	r0, r2
 8002ef6:	4798      	blx	r3
}
 8002ef8:	bf00      	nop
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd90      	pop	{r4, r7, pc}

08002f00 <_ZN4tama11SoundPlayer6updateEv>:

void tama::SoundPlayer::update()
{
 8002f00:	b5b0      	push	{r4, r5, r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
    if (!playingNow)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f0e:	f083 0301 	eor.w	r3, r3, #1
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d168      	bne.n	8002fea <_ZN4tama11SoundPlayer6updateEv+0xea>
    {
        return;
    }
    if (time->getElapsedTime() > melody[currentTone].duration)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f000 f8e2 	bl	80030e4 <_ZNKSt19__shared_ptr_accessIN4tama11TimeMonitorELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8002f20:	4602      	mov	r2, r0
 8002f22:	6813      	ldr	r3, [r2, #0]
 8002f24:	3304      	adds	r3, #4
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4610      	mov	r0, r2
 8002f2a:	4798      	blx	r3
 8002f2c:	4604      	mov	r4, r0
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f103 0210 	add.w	r2, r3, #16
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	69db      	ldr	r3, [r3, #28]
 8002f38:	4619      	mov	r1, r3
 8002f3a:	4610      	mov	r0, r2
 8002f3c:	f000 f8de 	bl	80030fc <_ZNSt6vectorIN4tama4ToneESaIS1_EEixEj>
 8002f40:	4603      	mov	r3, r0
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	429c      	cmp	r4, r3
 8002f46:	bf8c      	ite	hi
 8002f48:	2301      	movhi	r3, #1
 8002f4a:	2300      	movls	r3, #0
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d034      	beq.n	8002fbc <_ZN4tama11SoundPlayer6updateEv+0xbc>
    {
    	int w = melody.size();
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	3310      	adds	r3, #16
 8002f56:	4618      	mov	r0, r3
 8002f58:	f000 f8e0 	bl	800311c <_ZNKSt6vectorIN4tama4ToneESaIS1_EE4sizeEv>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	60fb      	str	r3, [r7, #12]
        if (melody.size() == currentTone + 1)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	3310      	adds	r3, #16
 8002f64:	4618      	mov	r0, r3
 8002f66:	f000 f8d9 	bl	800311c <_ZNKSt6vectorIN4tama4ToneESaIS1_EE4sizeEv>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	69db      	ldr	r3, [r3, #28]
 8002f70:	3301      	adds	r3, #1
 8002f72:	429a      	cmp	r2, r3
 8002f74:	bf0c      	ite	eq
 8002f76:	2301      	moveq	r3, #1
 8002f78:	2300      	movne	r3, #0
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d00f      	beq.n	8002fa0 <_ZN4tama11SoundPlayer6updateEv+0xa0>
        {
            playingNow = false;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 2020 	strb.w	r2, [r3, #32]
            player->stop();
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	3308      	adds	r3, #8
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f000 f8d6 	bl	800313e <_ZNKSt19__shared_ptr_accessIN4tama20SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8002f92:	4602      	mov	r2, r0
 8002f94:	6813      	ldr	r3, [r2, #0]
 8002f96:	3304      	adds	r3, #4
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4610      	mov	r0, r2
 8002f9c:	4798      	blx	r3
            return;
 8002f9e:	e025      	b.n	8002fec <_ZN4tama11SoundPlayer6updateEv+0xec>
        } else {
            currentTone++;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	69db      	ldr	r3, [r3, #28]
 8002fa4:	1c5a      	adds	r2, r3, #1
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	61da      	str	r2, [r3, #28]
            time->startTimer();
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4618      	mov	r0, r3
 8002fae:	f000 f899 	bl	80030e4 <_ZNKSt19__shared_ptr_accessIN4tama11TimeMonitorELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	6813      	ldr	r3, [r2, #0]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4610      	mov	r0, r2
 8002fba:	4798      	blx	r3
        }
    }
    player->play(melody[currentTone]);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	3308      	adds	r3, #8
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f000 f8bc 	bl	800313e <_ZNKSt19__shared_ptr_accessIN4tama20SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8002fc6:	4605      	mov	r5, r0
 8002fc8:	682b      	ldr	r3, [r5, #0]
 8002fca:	681c      	ldr	r4, [r3, #0]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f103 0210 	add.w	r2, r3, #16
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	69db      	ldr	r3, [r3, #28]
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	4610      	mov	r0, r2
 8002fda:	f000 f88f 	bl	80030fc <_ZNSt6vectorIN4tama4ToneESaIS1_EEixEj>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002fe4:	4628      	mov	r0, r5
 8002fe6:	47a0      	blx	r4
 8002fe8:	e000      	b.n	8002fec <_ZN4tama11SoundPlayer6updateEv+0xec>
        return;
 8002fea:	bf00      	nop
}
 8002fec:	3710      	adds	r7, #16
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bdb0      	pop	{r4, r5, r7, pc}

08002ff2 <_ZNSt12__shared_ptrIN4tama20SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EEaSERKS4_>:
    class __shared_ptr
 8002ff2:	b580      	push	{r7, lr}
 8002ff4:	b082      	sub	sp, #8
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	6078      	str	r0, [r7, #4]
 8002ffa:	6039      	str	r1, [r7, #0]
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	601a      	str	r2, [r3, #0]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	1d1a      	adds	r2, r3, #4
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	3304      	adds	r3, #4
 800300c:	4619      	mov	r1, r3
 800300e:	4610      	mov	r0, r2
 8003010:	f000 f8a1 	bl	8003156 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	4618      	mov	r0, r3
 8003018:	3708      	adds	r7, #8
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}

0800301e <_ZNSt10shared_ptrIN4tama20SoundPlayingStrategyEEaSERKS2_>:
 800301e:	b580      	push	{r7, lr}
 8003020:	b082      	sub	sp, #8
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
 8003026:	6039      	str	r1, [r7, #0]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	683a      	ldr	r2, [r7, #0]
 800302c:	4611      	mov	r1, r2
 800302e:	4618      	mov	r0, r3
 8003030:	f7ff ffdf 	bl	8002ff2 <_ZNSt12__shared_ptrIN4tama20SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EEaSERKS4_>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	4618      	mov	r0, r3
 8003038:	3708      	adds	r7, #8
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}

0800303e <_ZN4tama11SoundPlayer18setPlayingStrategyESt10shared_ptrINS_20SoundPlayingStrategyEE>:

void tama::SoundPlayer::setPlayingStrategy(std::shared_ptr<SoundPlayingStrategy> player)
{
 800303e:	b580      	push	{r7, lr}
 8003040:	b082      	sub	sp, #8
 8003042:	af00      	add	r7, sp, #0
 8003044:	6078      	str	r0, [r7, #4]
 8003046:	6039      	str	r1, [r7, #0]
    this->player = player;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	3308      	adds	r3, #8
 800304c:	6839      	ldr	r1, [r7, #0]
 800304e:	4618      	mov	r0, r3
 8003050:	f7ff ffe5 	bl	800301e <_ZNSt10shared_ptrIN4tama20SoundPlayingStrategyEEaSERKS2_>
}
 8003054:	bf00      	nop
 8003056:	3708      	adds	r7, #8
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}

0800305c <_ZSt4moveIRSt10shared_ptrIN4tama11TimeMonitorEEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	4618      	mov	r0, r3
 8003068:	370c      	adds	r7, #12
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr

08003072 <_ZN4tama11SoundPlayerC1ESt10shared_ptrINS_11TimeMonitorEE>:

tama::SoundPlayer::SoundPlayer(std::shared_ptr<TimeMonitor> time) : time(std::move(time))
 8003072:	b590      	push	{r4, r7, lr}
 8003074:	b083      	sub	sp, #12
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
 800307a:	6039      	str	r1, [r7, #0]
 800307c:	687c      	ldr	r4, [r7, #4]
 800307e:	6838      	ldr	r0, [r7, #0]
 8003080:	f7ff ffec 	bl	800305c <_ZSt4moveIRSt10shared_ptrIN4tama11TimeMonitorEEEONSt16remove_referenceIT_E4typeEOS6_>
 8003084:	4603      	mov	r3, r0
 8003086:	4619      	mov	r1, r3
 8003088:	4620      	mov	r0, r4
 800308a:	f000 f888 	bl	800319e <_ZNSt10shared_ptrIN4tama11TimeMonitorEEC1EOS2_>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	3308      	adds	r3, #8
 8003092:	4618      	mov	r0, r3
 8003094:	f000 f896 	bl	80031c4 <_ZNSt10shared_ptrIN4tama20SoundPlayingStrategyEEC1Ev>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	3310      	adds	r3, #16
 800309c:	4618      	mov	r0, r3
 800309e:	f000 f89e 	bl	80031de <_ZNSt6vectorIN4tama4ToneESaIS1_EEC1Ev>
{
    this->playingNow = false;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 2020 	strb.w	r2, [r3, #32]
    this->currentTone = 0;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	61da      	str	r2, [r3, #28]
}
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	4618      	mov	r0, r3
 80030b4:	370c      	adds	r7, #12
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd90      	pop	{r4, r7, pc}

080030ba <_ZNSt6vectorIN4tama4ToneESaIS1_EEaSEOS3_>:
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 80030ba:	b590      	push	{r4, r7, lr}
 80030bc:	b085      	sub	sp, #20
 80030be:	af00      	add	r7, sp, #0
 80030c0:	6078      	str	r0, [r7, #4]
 80030c2:	6039      	str	r1, [r7, #0]
	constexpr bool __move_storage =
 80030c4:	2301      	movs	r3, #1
 80030c6:	73fb      	strb	r3, [r7, #15]
	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 80030c8:	6838      	ldr	r0, [r7, #0]
 80030ca:	f7ff feea 	bl	8002ea2 <_ZSt4moveIRSt6vectorIN4tama4ToneESaIS2_EEEONSt16remove_referenceIT_E4typeEOS7_>
 80030ce:	4603      	mov	r3, r0
 80030d0:	4622      	mov	r2, r4
 80030d2:	4619      	mov	r1, r3
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	f000 f8aa 	bl	800322e <_ZNSt6vectorIN4tama4ToneESaIS1_EE14_M_move_assignEOS3_St17integral_constantIbLb1EE>
	return *this;
 80030da:	687b      	ldr	r3, [r7, #4]
      }
 80030dc:	4618      	mov	r0, r3
 80030de:	3714      	adds	r7, #20
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd90      	pop	{r4, r7, pc}

080030e4 <_ZNKSt19__shared_ptr_accessIN4tama11TimeMonitorELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
	return _M_get();
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f000 f8dc 	bl	80032aa <_ZNKSt19__shared_ptr_accessIN4tama11TimeMonitorELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 80030f2:	4603      	mov	r3, r0
      }
 80030f4:	4618      	mov	r0, r3
 80030f6:	3708      	adds	r7, #8
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}

080030fc <_ZNSt6vectorIN4tama4ToneESaIS1_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	00db      	lsls	r3, r3, #3
 800310e:	4413      	add	r3, r2
      }
 8003110:	4618      	mov	r0, r3
 8003112:	370c      	adds	r7, #12
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr

0800311c <_ZNKSt6vectorIN4tama4ToneESaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	461a      	mov	r2, r3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	10db      	asrs	r3, r3, #3
 8003132:	4618      	mov	r0, r3
 8003134:	370c      	adds	r7, #12
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr

0800313e <_ZNKSt19__shared_ptr_accessIN4tama20SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 800313e:	b580      	push	{r7, lr}
 8003140:	b082      	sub	sp, #8
 8003142:	af00      	add	r7, sp, #0
 8003144:	6078      	str	r0, [r7, #4]
	return _M_get();
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f000 f8bb 	bl	80032c2 <_ZNKSt19__shared_ptr_accessIN4tama20SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 800314c:	4603      	mov	r3, r0
      }
 800314e:	4618      	mov	r0, r3
 8003150:	3708      	adds	r7, #8
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}

08003156 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>:
      operator=(const __shared_count& __r) noexcept
 8003156:	b580      	push	{r7, lr}
 8003158:	b084      	sub	sp, #16
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
 800315e:	6039      	str	r1, [r7, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	60fb      	str	r3, [r7, #12]
	if (__tmp != _M_pi)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	68fa      	ldr	r2, [r7, #12]
 800316c:	429a      	cmp	r2, r3
 800316e:	d011      	beq.n	8003194 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x3e>
	    if (__tmp != 0)
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d002      	beq.n	800317c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x26>
	      __tmp->_M_add_ref_copy();
 8003176:	68f8      	ldr	r0, [r7, #12]
 8003178:	f7fd f9ed 	bl	8000556 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_add_ref_copyEv>
	    if (_M_pi != 0)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d004      	beq.n	800318e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x38>
	      _M_pi->_M_release();
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4618      	mov	r0, r3
 800318a:	f7fd f9f3 	bl	8000574 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	68fa      	ldr	r2, [r7, #12]
 8003192:	601a      	str	r2, [r3, #0]
	return *this;
 8003194:	687b      	ldr	r3, [r7, #4]
      }
 8003196:	4618      	mov	r0, r3
 8003198:	3710      	adds	r7, #16
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}

0800319e <_ZNSt10shared_ptrIN4tama11TimeMonitorEEC1EOS2_>:
      shared_ptr(shared_ptr&& __r) noexcept
 800319e:	b590      	push	{r4, r7, lr}
 80031a0:	b083      	sub	sp, #12
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
 80031a6:	6039      	str	r1, [r7, #0]
      : __shared_ptr<_Tp>(std::move(__r)) { }
 80031a8:	687c      	ldr	r4, [r7, #4]
 80031aa:	6838      	ldr	r0, [r7, #0]
 80031ac:	f7ff ff56 	bl	800305c <_ZSt4moveIRSt10shared_ptrIN4tama11TimeMonitorEEEONSt16remove_referenceIT_E4typeEOS6_>
 80031b0:	4603      	mov	r3, r0
 80031b2:	4619      	mov	r1, r3
 80031b4:	4620      	mov	r0, r4
 80031b6:	f000 f890 	bl	80032da <_ZNSt12__shared_ptrIN4tama11TimeMonitorELN9__gnu_cxx12_Lock_policyE0EEC1EOS4_>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4618      	mov	r0, r3
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd90      	pop	{r4, r7, pc}

080031c4 <_ZNSt10shared_ptrIN4tama20SoundPlayingStrategyEEC1Ev>:
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b082      	sub	sp, #8
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	4618      	mov	r0, r3
 80031d0:	f000 f8a1 	bl	8003316 <_ZNSt12__shared_ptrIN4tama20SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	4618      	mov	r0, r3
 80031d8:	3708      	adds	r7, #8
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}

080031de <_ZNSt6vectorIN4tama4ToneESaIS1_EEC1Ev>:
      vector()
 80031de:	b580      	push	{r7, lr}
 80031e0:	b082      	sub	sp, #8
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
      : _Base() { }
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4618      	mov	r0, r3
 80031ea:	f000 f8b1 	bl	8003350 <_ZNSt12_Vector_baseIN4tama4ToneESaIS1_EEC1Ev>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4618      	mov	r0, r3
 80031f2:	3708      	adds	r7, #8
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}

080031f8 <_ZNSt6vectorIN4tama4ToneESaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 80031f8:	b5b0      	push	{r4, r5, r7, lr}
 80031fa:	b082      	sub	sp, #8
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681c      	ldr	r4, [r3, #0]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator()); }
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	4618      	mov	r0, r3
 800320c:	f000 f8c7 	bl	800339e <_ZNSt12_Vector_baseIN4tama4ToneESaIS1_EE19_M_get_Tp_allocatorEv>
 8003210:	4603      	mov	r3, r0
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8003212:	461a      	mov	r2, r3
 8003214:	4629      	mov	r1, r5
 8003216:	4620      	mov	r0, r4
 8003218:	f000 f8cc 	bl	80033b4 <_ZSt8_DestroyIPN4tama4ToneES1_EvT_S3_RSaIT0_E>
		      _M_get_Tp_allocator()); }
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	4618      	mov	r0, r3
 8003220:	f000 f8a3 	bl	800336a <_ZNSt12_Vector_baseIN4tama4ToneESaIS1_EED1Ev>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	4618      	mov	r0, r3
 8003228:	3708      	adds	r7, #8
 800322a:	46bd      	mov	sp, r7
 800322c:	bdb0      	pop	{r4, r5, r7, pc}

0800322e <_ZNSt6vectorIN4tama4ToneESaIS1_EE14_M_move_assignEOS3_St17integral_constantIbLb1EE>:
    private:
      // Constant-time move assignment when source object's memory can be
      // moved, either because the source's allocator will move too
      // or because the allocators are equal.
      void
      _M_move_assign(vector&& __x, std::true_type) noexcept
 800322e:	b590      	push	{r4, r7, lr}
 8003230:	b089      	sub	sp, #36	; 0x24
 8003232:	af00      	add	r7, sp, #0
 8003234:	60f8      	str	r0, [r7, #12]
 8003236:	60b9      	str	r1, [r7, #8]
 8003238:	713a      	strb	r2, [r7, #4]
      {
	vector __tmp(get_allocator());
 800323a:	68fa      	ldr	r2, [r7, #12]
 800323c:	f107 031c 	add.w	r3, r7, #28
 8003240:	4611      	mov	r1, r2
 8003242:	4618      	mov	r0, r3
 8003244:	f000 f8c4 	bl	80033d0 <_ZNKSt12_Vector_baseIN4tama4ToneESaIS1_EE13get_allocatorEv>
 8003248:	f107 021c 	add.w	r2, r7, #28
 800324c:	f107 0310 	add.w	r3, r7, #16
 8003250:	4611      	mov	r1, r2
 8003252:	4618      	mov	r0, r3
 8003254:	f000 f8d9 	bl	800340a <_ZNSt6vectorIN4tama4ToneESaIS1_EEC1ERKS2_>
 8003258:	f107 031c 	add.w	r3, r7, #28
 800325c:	4618      	mov	r0, r3
 800325e:	f000 f8c8 	bl	80033f2 <_ZNSaIN4tama4ToneEED1Ev>
	this->_M_impl._M_swap_data(__tmp._M_impl);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	f107 0210 	add.w	r2, r7, #16
 8003268:	4611      	mov	r1, r2
 800326a:	4618      	mov	r0, r3
 800326c:	f000 f8dc 	bl	8003428 <_ZNSt12_Vector_baseIN4tama4ToneESaIS1_EE12_Vector_impl12_M_swap_dataERS4_>
	this->_M_impl._M_swap_data(__x._M_impl);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	68ba      	ldr	r2, [r7, #8]
 8003274:	4611      	mov	r1, r2
 8003276:	4618      	mov	r0, r3
 8003278:	f000 f8d6 	bl	8003428 <_ZNSt12_Vector_baseIN4tama4ToneESaIS1_EE12_Vector_impl12_M_swap_dataERS4_>
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	4618      	mov	r0, r3
 8003280:	f000 f88d 	bl	800339e <_ZNSt12_Vector_baseIN4tama4ToneESaIS1_EE19_M_get_Tp_allocatorEv>
 8003284:	4604      	mov	r4, r0
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	4618      	mov	r0, r3
 800328a:	f000 f888 	bl	800339e <_ZNSt12_Vector_baseIN4tama4ToneESaIS1_EE19_M_get_Tp_allocatorEv>
 800328e:	4603      	mov	r3, r0
 8003290:	4619      	mov	r1, r3
 8003292:	4620      	mov	r0, r4
 8003294:	f000 f8e8 	bl	8003468 <_ZSt15__alloc_on_moveISaIN4tama4ToneEEEvRT_S4_>
	vector __tmp(get_allocator());
 8003298:	f107 0310 	add.w	r3, r7, #16
 800329c:	4618      	mov	r0, r3
 800329e:	f7ff ffab 	bl	80031f8 <_ZNSt6vectorIN4tama4ToneESaIS1_EED1Ev>
      }
 80032a2:	bf00      	nop
 80032a4:	3724      	adds	r7, #36	; 0x24
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd90      	pop	{r4, r7, pc}

080032aa <_ZNKSt19__shared_ptr_accessIN4tama11TimeMonitorELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 80032aa:	b580      	push	{r7, lr}
 80032ac:	b082      	sub	sp, #8
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f000 f8e6 	bl	8003484 <_ZNKSt12__shared_ptrIN4tama11TimeMonitorELN9__gnu_cxx12_Lock_policyE0EE3getEv>
 80032b8:	4603      	mov	r3, r0
 80032ba:	4618      	mov	r0, r3
 80032bc:	3708      	adds	r7, #8
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <_ZNKSt19__shared_ptr_accessIN4tama20SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 80032c2:	b580      	push	{r7, lr}
 80032c4:	b082      	sub	sp, #8
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f000 f8e6 	bl	800349c <_ZNKSt12__shared_ptrIN4tama20SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EE3getEv>
 80032d0:	4603      	mov	r3, r0
 80032d2:	4618      	mov	r0, r3
 80032d4:	3708      	adds	r7, #8
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}

080032da <_ZNSt12__shared_ptrIN4tama11TimeMonitorELN9__gnu_cxx12_Lock_policyE0EEC1EOS4_>:
      __shared_ptr(__shared_ptr&& __r) noexcept
 80032da:	b580      	push	{r7, lr}
 80032dc:	b082      	sub	sp, #8
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
 80032e2:	6039      	str	r1, [r7, #0]
      : _M_ptr(__r._M_ptr), _M_refcount()
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	601a      	str	r2, [r3, #0]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	3304      	adds	r3, #4
 80032f0:	4618      	mov	r0, r3
 80032f2:	f7fd fdc2 	bl	8000e7a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	_M_refcount._M_swap(__r._M_refcount);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	1d1a      	adds	r2, r3, #4
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	3304      	adds	r3, #4
 80032fe:	4619      	mov	r1, r3
 8003300:	4610      	mov	r0, r2
 8003302:	f7fd fdc8 	bl	8000e96 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	__r._M_ptr = 0;
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	2200      	movs	r2, #0
 800330a:	601a      	str	r2, [r3, #0]
      }
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	4618      	mov	r0, r3
 8003310:	3708      	adds	r7, #8
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}

08003316 <_ZNSt12__shared_ptrIN4tama20SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      constexpr __shared_ptr() noexcept
 8003316:	b580      	push	{r7, lr}
 8003318:	b082      	sub	sp, #8
 800331a:	af00      	add	r7, sp, #0
 800331c:	6078      	str	r0, [r7, #4]
      : _M_ptr(0), _M_refcount()
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	601a      	str	r2, [r3, #0]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	3304      	adds	r3, #4
 8003328:	4618      	mov	r0, r3
 800332a:	f7fd fda6 	bl	8000e7a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
      { }
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4618      	mov	r0, r3
 8003332:	3708      	adds	r7, #8
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}

08003338 <_ZNSt12_Vector_baseIN4tama4ToneESaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f000 f856 	bl	80033f2 <_ZNSaIN4tama4ToneEED1Ev>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4618      	mov	r0, r3
 800334a:	3708      	adds	r7, #8
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}

08003350 <_ZNSt12_Vector_baseIN4tama4ToneESaIS1_EEC1Ev>:
      _Vector_base()
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	4618      	mov	r0, r3
 800335c:	f000 f8aa 	bl	80034b4 <_ZNSt12_Vector_baseIN4tama4ToneESaIS1_EE12_Vector_implC1Ev>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	4618      	mov	r0, r3
 8003364:	3708      	adds	r7, #8
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}

0800336a <_ZNSt12_Vector_baseIN4tama4ToneESaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800336a:	b580      	push	{r7, lr}
 800336c:	b082      	sub	sp, #8
 800336e:	af00      	add	r7, sp, #0
 8003370:	6078      	str	r0, [r7, #4]
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6819      	ldr	r1, [r3, #0]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	689b      	ldr	r3, [r3, #8]
		      - this->_M_impl._M_start); }
 800337a:	461a      	mov	r2, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	10db      	asrs	r3, r3, #3
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 8003384:	461a      	mov	r2, r3
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f000 f8a9 	bl	80034de <_ZNSt12_Vector_baseIN4tama4ToneESaIS1_EE13_M_deallocateEPS1_j>
		      - this->_M_impl._M_start); }
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	4618      	mov	r0, r3
 8003390:	f7ff ffd2 	bl	8003338 <_ZNSt12_Vector_baseIN4tama4ToneESaIS1_EE12_Vector_implD1Ev>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	4618      	mov	r0, r3
 8003398:	3708      	adds	r7, #8
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}

0800339e <_ZNSt12_Vector_baseIN4tama4ToneESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800339e:	b480      	push	{r7}
 80033a0:	b083      	sub	sp, #12
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4618      	mov	r0, r3
 80033aa:	370c      	adds	r7, #12
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <_ZSt8_DestroyIPN4tama4ToneES1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	60b9      	str	r1, [r7, #8]
 80033be:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 80033c0:	68b9      	ldr	r1, [r7, #8]
 80033c2:	68f8      	ldr	r0, [r7, #12]
 80033c4:	f000 f89e 	bl	8003504 <_ZSt8_DestroyIPN4tama4ToneEEvT_S3_>
    }
 80033c8:	bf00      	nop
 80033ca:	3710      	adds	r7, #16
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <_ZNKSt12_Vector_baseIN4tama4ToneESaIS1_EE13get_allocatorEv>:
      get_allocator() const _GLIBCXX_NOEXCEPT
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6039      	str	r1, [r7, #0]
      { return allocator_type(_M_get_Tp_allocator()); }
 80033da:	6838      	ldr	r0, [r7, #0]
 80033dc:	f000 f89f 	bl	800351e <_ZNKSt12_Vector_baseIN4tama4ToneESaIS1_EE19_M_get_Tp_allocatorEv>
 80033e0:	4603      	mov	r3, r0
 80033e2:	4619      	mov	r1, r3
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f000 f8a5 	bl	8003534 <_ZNSaIN4tama4ToneEEC1ERKS1_>
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	3708      	adds	r7, #8
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}

080033f2 <_ZNSaIN4tama4ToneEED1Ev>:
 80033f2:	b580      	push	{r7, lr}
 80033f4:	b082      	sub	sp, #8
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f000 f8a8 	bl	8003550 <_ZN9__gnu_cxx13new_allocatorIN4tama4ToneEED1Ev>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	4618      	mov	r0, r3
 8003404:	3708      	adds	r7, #8
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}

0800340a <_ZNSt6vectorIN4tama4ToneESaIS1_EEC1ERKS2_>:
      vector(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 800340a:	b580      	push	{r7, lr}
 800340c:	b082      	sub	sp, #8
 800340e:	af00      	add	r7, sp, #0
 8003410:	6078      	str	r0, [r7, #4]
 8003412:	6039      	str	r1, [r7, #0]
      : _Base(__a) { }
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6839      	ldr	r1, [r7, #0]
 8003418:	4618      	mov	r0, r3
 800341a:	f000 f8a4 	bl	8003566 <_ZNSt12_Vector_baseIN4tama4ToneESaIS1_EEC1ERKS2_>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4618      	mov	r0, r3
 8003422:	3708      	adds	r7, #8
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}

08003428 <_ZNSt12_Vector_baseIN4tama4ToneESaIS1_EE12_Vector_impl12_M_swap_dataERS4_>:
	void _M_swap_data(_Vector_impl& __x) _GLIBCXX_NOEXCEPT
 8003428:	b580      	push	{r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	6039      	str	r1, [r7, #0]
	  std::swap(_M_start, __x._M_start);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	683a      	ldr	r2, [r7, #0]
 8003436:	4611      	mov	r1, r2
 8003438:	4618      	mov	r0, r3
 800343a:	f000 f8ae 	bl	800359a <_ZSt4swapIPN4tama4ToneEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS7_ESt18is_move_assignableIS7_EEE5valueEvE4typeERS7_SH_>
	  std::swap(_M_finish, __x._M_finish);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	1d1a      	adds	r2, r3, #4
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	3304      	adds	r3, #4
 8003446:	4619      	mov	r1, r3
 8003448:	4610      	mov	r0, r2
 800344a:	f000 f8a6 	bl	800359a <_ZSt4swapIPN4tama4ToneEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS7_ESt18is_move_assignableIS7_EEE5valueEvE4typeERS7_SH_>
	  std::swap(_M_end_of_storage, __x._M_end_of_storage);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f103 0208 	add.w	r2, r3, #8
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	3308      	adds	r3, #8
 8003458:	4619      	mov	r1, r3
 800345a:	4610      	mov	r0, r2
 800345c:	f000 f89d 	bl	800359a <_ZSt4swapIPN4tama4ToneEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS7_ESt18is_move_assignableIS7_EEE5valueEvE4typeERS7_SH_>
	}
 8003460:	bf00      	nop
 8003462:	3708      	adds	r7, #8
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}

08003468 <_ZSt15__alloc_on_moveISaIN4tama4ToneEEEvRT_S4_>:
  template<typename _Alloc>
    inline void __do_alloc_on_move(_Alloc&, _Alloc&, false_type)
    { }

  template<typename _Alloc>
    inline void __alloc_on_move(_Alloc& __one, _Alloc& __two)
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	6039      	str	r1, [r7, #0]
    {
      typedef allocator_traits<_Alloc> __traits;
      typedef typename __traits::propagate_on_container_move_assignment __pocma;
      __do_alloc_on_move(__one, __two, __pocma());
 8003472:	461a      	mov	r2, r3
 8003474:	6839      	ldr	r1, [r7, #0]
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 f8b9 	bl	80035ee <_ZSt18__do_alloc_on_moveISaIN4tama4ToneEEEvRT_S4_St17integral_constantIbLb1EE>
    }
 800347c:	bf00      	nop
 800347e:	3710      	adds	r7, #16
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}

08003484 <_ZNKSt12__shared_ptrIN4tama11TimeMonitorELN9__gnu_cxx12_Lock_policyE0EE3getEv>:
      get() const noexcept
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4618      	mov	r0, r3
 8003492:	370c      	adds	r7, #12
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr

0800349c <_ZNKSt12__shared_ptrIN4tama20SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EE3getEv>:
      get() const noexcept
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4618      	mov	r0, r3
 80034aa:	370c      	adds	r7, #12
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr

080034b4 <_ZNSt12_Vector_baseIN4tama4ToneESaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl()
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f000 f8a3 	bl	8003608 <_ZNSaIN4tama4ToneEEC1Ev>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	601a      	str	r2, [r3, #0]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	605a      	str	r2, [r3, #4]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	609a      	str	r2, [r3, #8]
	{ }
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	4618      	mov	r0, r3
 80034d8:	3708      	adds	r7, #8
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}

080034de <_ZNSt12_Vector_baseIN4tama4ToneESaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 80034de:	b580      	push	{r7, lr}
 80034e0:	b084      	sub	sp, #16
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	60f8      	str	r0, [r7, #12]
 80034e6:	60b9      	str	r1, [r7, #8]
 80034e8:	607a      	str	r2, [r7, #4]
	if (__p)
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d005      	beq.n	80034fc <_ZNSt12_Vector_baseIN4tama4ToneESaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	68b9      	ldr	r1, [r7, #8]
 80034f6:	4618      	mov	r0, r3
 80034f8:	f000 f892 	bl	8003620 <_ZNSt16allocator_traitsISaIN4tama4ToneEEE10deallocateERS2_PS1_j>
      }
 80034fc:	bf00      	nop
 80034fe:	3710      	adds	r7, #16
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}

08003504 <_ZSt8_DestroyIPN4tama4ToneEEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8003504:	b580      	push	{r7, lr}
 8003506:	b082      	sub	sp, #8
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 800350e:	6839      	ldr	r1, [r7, #0]
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f000 f894 	bl	800363e <_ZNSt12_Destroy_auxILb1EE9__destroyIPN4tama4ToneEEEvT_S5_>
    }
 8003516:	bf00      	nop
 8003518:	3708      	adds	r7, #8
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}

0800351e <_ZNKSt12_Vector_baseIN4tama4ToneESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800351e:	b480      	push	{r7}
 8003520:	b083      	sub	sp, #12
 8003522:	af00      	add	r7, sp, #0
 8003524:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4618      	mov	r0, r3
 800352a:	370c      	adds	r7, #12
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr

08003534 <_ZNSaIN4tama4ToneEEC1ERKS1_>:
      allocator(const allocator& __a) throw()
 8003534:	b580      	push	{r7, lr}
 8003536:	b082      	sub	sp, #8
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 800353e:	6839      	ldr	r1, [r7, #0]
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f000 f887 	bl	8003654 <_ZN9__gnu_cxx13new_allocatorIN4tama4ToneEEC1ERKS3_>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4618      	mov	r0, r3
 800354a:	3708      	adds	r7, #8
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}

08003550 <_ZN9__gnu_cxx13new_allocatorIN4tama4ToneEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	4618      	mov	r0, r3
 800355c:	370c      	adds	r7, #12
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr

08003566 <_ZNSt12_Vector_baseIN4tama4ToneESaIS1_EEC1ERKS2_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 8003566:	b580      	push	{r7, lr}
 8003568:	b082      	sub	sp, #8
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
 800356e:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6839      	ldr	r1, [r7, #0]
 8003574:	4618      	mov	r0, r3
 8003576:	f000 f879 	bl	800366c <_ZNSt12_Vector_baseIN4tama4ToneESaIS1_EE12_Vector_implC1ERKS2_>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4618      	mov	r0, r3
 800357e:	3708      	adds	r7, #8
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}

08003584 <_ZSt4moveIRPN4tama4ToneEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8003584:	b480      	push	{r7}
 8003586:	b083      	sub	sp, #12
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	4618      	mov	r0, r3
 8003590:	370c      	adds	r7, #12
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr

0800359a <_ZSt4swapIPN4tama4ToneEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS7_ESt18is_move_assignableIS7_EEE5valueEvE4typeERS7_SH_>:
    swap(_Tp& __a, _Tp& __b)
 800359a:	b580      	push	{r7, lr}
 800359c:	b084      	sub	sp, #16
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
 80035a2:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f7ff ffed 	bl	8003584 <_ZSt4moveIRPN4tama4ToneEEONSt16remove_referenceIT_E4typeEOS5_>
 80035aa:	4603      	mov	r3, r0
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 80035b0:	6838      	ldr	r0, [r7, #0]
 80035b2:	f7ff ffe7 	bl	8003584 <_ZSt4moveIRPN4tama4ToneEEONSt16remove_referenceIT_E4typeEOS5_>
 80035b6:	4603      	mov	r3, r0
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80035be:	f107 030c 	add.w	r3, r7, #12
 80035c2:	4618      	mov	r0, r3
 80035c4:	f7ff ffde 	bl	8003584 <_ZSt4moveIRPN4tama4ToneEEONSt16remove_referenceIT_E4typeEOS5_>
 80035c8:	4603      	mov	r3, r0
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	601a      	str	r2, [r3, #0]
    }
 80035d0:	bf00      	nop
 80035d2:	3710      	adds	r7, #16
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}

080035d8 <_ZSt4moveIRSaIN4tama4ToneEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	4618      	mov	r0, r3
 80035e4:	370c      	adds	r7, #12
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr

080035ee <_ZSt18__do_alloc_on_moveISaIN4tama4ToneEEEvRT_S4_St17integral_constantIbLb1EE>:
    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
 80035ee:	b580      	push	{r7, lr}
 80035f0:	b084      	sub	sp, #16
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	60f8      	str	r0, [r7, #12]
 80035f6:	60b9      	str	r1, [r7, #8]
 80035f8:	713a      	strb	r2, [r7, #4]
    { __one = std::move(__two); }
 80035fa:	68b8      	ldr	r0, [r7, #8]
 80035fc:	f7ff ffec 	bl	80035d8 <_ZSt4moveIRSaIN4tama4ToneEEEONSt16remove_referenceIT_E4typeEOS5_>
 8003600:	bf00      	nop
 8003602:	3710      	adds	r7, #16
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}

08003608 <_ZNSaIN4tama4ToneEEC1Ev>:
      allocator() throw() { }
 8003608:	b580      	push	{r7, lr}
 800360a:	b082      	sub	sp, #8
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f000 f842 	bl	800369a <_ZN9__gnu_cxx13new_allocatorIN4tama4ToneEEC1Ev>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4618      	mov	r0, r3
 800361a:	3708      	adds	r7, #8
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}

08003620 <_ZNSt16allocator_traitsISaIN4tama4ToneEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	60b9      	str	r1, [r7, #8]
 800362a:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	68b9      	ldr	r1, [r7, #8]
 8003630:	68f8      	ldr	r0, [r7, #12]
 8003632:	f000 f83d 	bl	80036b0 <_ZN9__gnu_cxx13new_allocatorIN4tama4ToneEE10deallocateEPS2_j>
 8003636:	bf00      	nop
 8003638:	3710      	adds	r7, #16
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}

0800363e <_ZNSt12_Destroy_auxILb1EE9__destroyIPN4tama4ToneEEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800363e:	b480      	push	{r7}
 8003640:	b083      	sub	sp, #12
 8003642:	af00      	add	r7, sp, #0
 8003644:	6078      	str	r0, [r7, #4]
 8003646:	6039      	str	r1, [r7, #0]
 8003648:	bf00      	nop
 800364a:	370c      	adds	r7, #12
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr

08003654 <_ZN9__gnu_cxx13new_allocatorIN4tama4ToneEEC1ERKS3_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4618      	mov	r0, r3
 8003662:	370c      	adds	r7, #12
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr

0800366c <_ZNSt12_Vector_baseIN4tama4ToneESaIS1_EE12_Vector_implC1ERKS2_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 800366c:	b580      	push	{r7, lr}
 800366e:	b082      	sub	sp, #8
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
 8003676:	6839      	ldr	r1, [r7, #0]
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f7ff ff5b 	bl	8003534 <_ZNSaIN4tama4ToneEEC1ERKS1_>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	601a      	str	r2, [r3, #0]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	605a      	str	r2, [r3, #4]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	609a      	str	r2, [r3, #8]
	{ }
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	4618      	mov	r0, r3
 8003694:	3708      	adds	r7, #8
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}

0800369a <_ZN9__gnu_cxx13new_allocatorIN4tama4ToneEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800369a:	b480      	push	{r7}
 800369c:	b083      	sub	sp, #12
 800369e:	af00      	add	r7, sp, #0
 80036a0:	6078      	str	r0, [r7, #4]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	4618      	mov	r0, r3
 80036a6:	370c      	adds	r7, #12
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr

080036b0 <_ZN9__gnu_cxx13new_allocatorIN4tama4ToneEE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	60b9      	str	r1, [r7, #8]
 80036ba:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 80036bc:	68b8      	ldr	r0, [r7, #8]
 80036be:	f013 ff13 	bl	80174e8 <_ZdlPv>
      }
 80036c2:	bf00      	nop
 80036c4:	3710      	adds	r7, #16
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}

080036ca <_ZNSt12__shared_ptrIN4tama11SoundPlayerELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_ptr() = default;
 80036ca:	b580      	push	{r7, lr}
 80036cc:	b082      	sub	sp, #8
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	6078      	str	r0, [r7, #4]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	3304      	adds	r3, #4
 80036d6:	4618      	mov	r0, r3
 80036d8:	f7fd f9b3 	bl	8000a42 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	4618      	mov	r0, r3
 80036e0:	3708      	adds	r7, #8
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}

080036e6 <_ZNSt10shared_ptrIN4tama11SoundPlayerEED1Ev>:
    class shared_ptr : public __shared_ptr<_Tp>
 80036e6:	b580      	push	{r7, lr}
 80036e8:	b082      	sub	sp, #8
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	6078      	str	r0, [r7, #4]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4618      	mov	r0, r3
 80036f2:	f7ff ffea 	bl	80036ca <_ZNSt12__shared_ptrIN4tama11SoundPlayerELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4618      	mov	r0, r3
 80036fa:	3708      	adds	r7, #8
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}

08003700 <_ZN4tama14InitialLoading7onInputENS_6ButtonE>:
#include "../../assets/common/icon-bar-background.texture.h"
#include "../../assets/common/icon-bar-big-icons.texture.h"
#include "../../ui/display/drawable/text/Text.h"

void tama::InitialLoading::onInput(tama::Button button)
{
 8003700:	b590      	push	{r4, r7, lr}
 8003702:	b08d      	sub	sp, #52	; 0x34
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	460b      	mov	r3, r1
 800370a:	70fb      	strb	r3, [r7, #3]
    std::vector<Tone> music;
 800370c:	f107 0308 	add.w	r3, r7, #8
 8003710:	4618      	mov	r0, r3
 8003712:	f7ff fd64 	bl	80031de <_ZNSt6vectorIN4tama4ToneESaIS1_EEC1Ev>
    music.push_back({5, 14});
 8003716:	4a43      	ldr	r2, [pc, #268]	; (8003824 <_ZN4tama14InitialLoading7onInputENS_6ButtonE+0x124>)
 8003718:	f107 0314 	add.w	r3, r7, #20
 800371c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003720:	e883 0003 	stmia.w	r3, {r0, r1}
 8003724:	f107 0214 	add.w	r2, r7, #20
 8003728:	f107 0308 	add.w	r3, r7, #8
 800372c:	4611      	mov	r1, r2
 800372e:	4618      	mov	r0, r3
 8003730:	f000 feed 	bl	800450e <_ZNSt6vectorIN4tama4ToneESaIS1_EE9push_backEOS1_>
    context->getSoundPlayer()->play(music);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	330c      	adds	r3, #12
 8003738:	4618      	mov	r0, r3
 800373a:	f7fe fb53 	bl	8001de4 <_ZNKSt19__shared_ptr_accessIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800373e:	4602      	mov	r2, r0
 8003740:	f107 031c 	add.w	r3, r7, #28
 8003744:	4611      	mov	r1, r2
 8003746:	4618      	mov	r0, r3
 8003748:	f7fd fce2 	bl	8001110 <_ZN4tama7Context14getSoundPlayerEv>
 800374c:	f107 031c 	add.w	r3, r7, #28
 8003750:	4618      	mov	r0, r3
 8003752:	f000 feed 	bl	8004530 <_ZNKSt19__shared_ptr_accessIN4tama11SoundPlayerELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8003756:	4604      	mov	r4, r0
 8003758:	f107 0208 	add.w	r2, r7, #8
 800375c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003760:	4611      	mov	r1, r2
 8003762:	4618      	mov	r0, r3
 8003764:	f000 fef0 	bl	8004548 <_ZNSt6vectorIN4tama4ToneESaIS1_EEC1ERKS3_>
 8003768:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800376c:	4619      	mov	r1, r3
 800376e:	4620      	mov	r0, r4
 8003770:	f7ff fba2 	bl	8002eb8 <_ZN4tama11SoundPlayer4playESt6vectorINS_4ToneESaIS2_EE>
 8003774:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003778:	4618      	mov	r0, r3
 800377a:	f7ff fd3d 	bl	80031f8 <_ZNSt6vectorIN4tama4ToneESaIS1_EED1Ev>
 800377e:	f107 031c 	add.w	r3, r7, #28
 8003782:	4618      	mov	r0, r3
 8003784:	f7ff ffaf 	bl	80036e6 <_ZNSt10shared_ptrIN4tama11SoundPlayerEED1Ev>
    if (button == Button::C)
 8003788:	78fb      	ldrb	r3, [r7, #3]
 800378a:	2b02      	cmp	r3, #2
 800378c:	d141      	bne.n	8003812 <_ZN4tama14InitialLoading7onInputENS_6ButtonE+0x112>
    {
        if (selectedIconIndex != 9)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8003794:	2b09      	cmp	r3, #9
 8003796:	d00f      	beq.n	80037b8 <_ZN4tama14InitialLoading7onInputENS_6ButtonE+0xb8>
        {
            bigIcons.at(selectedIconIndex).hide();
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f103 0214 	add.w	r2, r3, #20
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 80037a4:	4619      	mov	r1, r3
 80037a6:	4610      	mov	r0, r2
 80037a8:	f000 ff0c 	bl	80045c4 <_ZNSt5arrayIN4tama6SpriteELj9EE2atEj>
 80037ac:	4602      	mov	r2, r0
 80037ae:	6813      	ldr	r3, [r2, #0]
 80037b0:	3314      	adds	r3, #20
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4610      	mov	r0, r2
 80037b6:	4798      	blx	r3
        }
        selectedIconIndex++;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 80037be:	1c5a      	adds	r2, r3, #1
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
        selectedIconIndex %= 10;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f8d3 119c 	ldr.w	r1, [r3, #412]	; 0x19c
 80037cc:	4b16      	ldr	r3, [pc, #88]	; (8003828 <_ZN4tama14InitialLoading7onInputENS_6ButtonE+0x128>)
 80037ce:	fb83 2301 	smull	r2, r3, r3, r1
 80037d2:	109a      	asrs	r2, r3, #2
 80037d4:	17cb      	asrs	r3, r1, #31
 80037d6:	1ad2      	subs	r2, r2, r3
 80037d8:	4613      	mov	r3, r2
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	4413      	add	r3, r2
 80037de:	005b      	lsls	r3, r3, #1
 80037e0:	1aca      	subs	r2, r1, r3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
        if (selectedIconIndex != 9)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 80037ee:	2b09      	cmp	r3, #9
 80037f0:	d00f      	beq.n	8003812 <_ZN4tama14InitialLoading7onInputENS_6ButtonE+0x112>
        {
            bigIcons.at(selectedIconIndex).show();
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f103 0214 	add.w	r2, r3, #20
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 80037fe:	4619      	mov	r1, r3
 8003800:	4610      	mov	r0, r2
 8003802:	f000 fedf 	bl	80045c4 <_ZNSt5arrayIN4tama6SpriteELj9EE2atEj>
 8003806:	4602      	mov	r2, r0
 8003808:	6813      	ldr	r3, [r2, #0]
 800380a:	3318      	adds	r3, #24
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4610      	mov	r0, r2
 8003810:	4798      	blx	r3
    std::vector<Tone> music;
 8003812:	f107 0308 	add.w	r3, r7, #8
 8003816:	4618      	mov	r0, r3
 8003818:	f7ff fcee 	bl	80031f8 <_ZNSt6vectorIN4tama4ToneESaIS1_EED1Ev>
        }
    }
}
 800381c:	bf00      	nop
 800381e:	3734      	adds	r7, #52	; 0x34
 8003820:	46bd      	mov	sp, r7
 8003822:	bd90      	pop	{r4, r7, pc}
 8003824:	08017d18 	.word	0x08017d18
 8003828:	66666667 	.word	0x66666667

0800382c <_ZN4tama14InitialLoading6onInitEv>:

void tama::InitialLoading::onInit()
{
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]

}
 8003834:	bf00      	nop
 8003836:	370c      	adds	r7, #12
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr

08003840 <_ZN4tama14InitialLoading7onFrameEv>:

void tama::InitialLoading::onFrame()
{
 8003840:	b480      	push	{r7}
 8003842:	b083      	sub	sp, #12
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]

}
 8003848:	bf00      	nop
 800384a:	370c      	adds	r7, #12
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	3304      	adds	r3, #4
 8003860:	4618      	mov	r0, r3
 8003862:	f7fd f8ee 	bl	8000a42 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4618      	mov	r0, r3
 800386a:	3708      	adds	r7, #8
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}

08003870 <_ZNSt10shared_ptrIN4tama7TextureEED1Ev>:
 8003870:	b580      	push	{r7, lr}
 8003872:	b082      	sub	sp, #8
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	4618      	mov	r0, r3
 800387c:	f7ff ffea 	bl	8003854 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4618      	mov	r0, r3
 8003884:	3708      	adds	r7, #8
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
	...

0800388c <_ZN4tama6SpriteD1Ev>:
#include <memory>
#include "../Drawable.h"

namespace tama
{
    class Sprite : public Drawable
 800388c:	b580      	push	{r7, lr}
 800388e:	b082      	sub	sp, #8
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	4a08      	ldr	r2, [pc, #32]	; (80038b8 <_ZN4tama6SpriteD1Ev+0x2c>)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	601a      	str	r2, [r3, #0]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	3318      	adds	r3, #24
 800389e:	4618      	mov	r0, r3
 80038a0:	f7ff f8d9 	bl	8002a56 <_ZNSt10shared_ptrIN4tama14ChangeObserverEED1Ev>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	3304      	adds	r3, #4
 80038a8:	4618      	mov	r0, r3
 80038aa:	f7ff ffe1 	bl	8003870 <_ZNSt10shared_ptrIN4tama7TextureEED1Ev>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4618      	mov	r0, r3
 80038b2:	3708      	adds	r7, #8
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	0801a4c0 	.word	0x0801a4c0

080038bc <_ZNSt5arrayIN4tama6SpriteELj9EEC1Ev>:
   *
   *  @tparam  Tp  Type of element. Required to be a complete type.
   *  @tparam  N  Number of elements.
  */
  template<typename _Tp, std::size_t _Nm>
    struct array
 80038bc:	b5b0      	push	{r4, r5, r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2408      	movs	r4, #8
 80038c8:	461d      	mov	r5, r3
 80038ca:	2c00      	cmp	r4, #0
 80038cc:	db05      	blt.n	80038da <_ZNSt5arrayIN4tama6SpriteELj9EEC1Ev+0x1e>
 80038ce:	4628      	mov	r0, r5
 80038d0:	f002 feb8 	bl	8006644 <_ZN4tama6SpriteC1Ev>
 80038d4:	3520      	adds	r5, #32
 80038d6:	3c01      	subs	r4, #1
 80038d8:	e7f7      	b.n	80038ca <_ZNSt5arrayIN4tama6SpriteELj9EEC1Ev+0xe>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4618      	mov	r0, r3
 80038de:	3708      	adds	r7, #8
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bdb0      	pop	{r4, r5, r7, pc}

080038e4 <_ZN4tama4TextD1Ev>:
#include "../Drawable.h"
#include "../texture-loader/TextureLoader.h"

namespace tama
{
    class Text : public Drawable
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b082      	sub	sp, #8
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	4a0d      	ldr	r2, [pc, #52]	; (8003924 <_ZN4tama4TextD1Ev+0x40>)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	601a      	str	r2, [r3, #0]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	3328      	adds	r3, #40	; 0x28
 80038f6:	4618      	mov	r0, r3
 80038f8:	f7ff ffba 	bl	8003870 <_ZNSt10shared_ptrIN4tama7TextureEED1Ev>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	3310      	adds	r3, #16
 8003900:	4618      	mov	r0, r3
 8003902:	f013 fef0 	bl	80176e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	3308      	adds	r3, #8
 800390a:	4618      	mov	r0, r3
 800390c:	f7ff f8a3 	bl	8002a56 <_ZNSt10shared_ptrIN4tama14ChangeObserverEED1Ev>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	3304      	adds	r3, #4
 8003914:	4618      	mov	r0, r3
 8003916:	f000 fe6f 	bl	80045f8 <_ZNSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EED1Ev>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4618      	mov	r0, r3
 800391e:	3708      	adds	r7, #8
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}
 8003924:	0801afc0 	.word	0x0801afc0

08003928 <_ZNSt12__shared_ptrIN4tama13TextureLoaderELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
 8003928:	b580      	push	{r7, lr}
 800392a:	b082      	sub	sp, #8
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	3304      	adds	r3, #4
 8003934:	4618      	mov	r0, r3
 8003936:	f7fd f884 	bl	8000a42 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4618      	mov	r0, r3
 800393e:	3708      	adds	r7, #8
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}

08003944 <_ZNSt10shared_ptrIN4tama13TextureLoaderEED1Ev>:
 8003944:	b580      	push	{r7, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	4618      	mov	r0, r3
 8003950:	f7ff ffea 	bl	8003928 <_ZNSt12__shared_ptrIN4tama13TextureLoaderELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	4618      	mov	r0, r3
 8003958:	3708      	adds	r7, #8
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}

0800395e <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
 800395e:	b580      	push	{r7, lr}
 8003960:	b082      	sub	sp, #8
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	3304      	adds	r3, #4
 800396a:	4618      	mov	r0, r3
 800396c:	f7fd f869 	bl	8000a42 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	4618      	mov	r0, r3
 8003974:	3708      	adds	r7, #8
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}

0800397a <_ZNSt10shared_ptrIN4tama6SpriteEED1Ev>:
 800397a:	b580      	push	{r7, lr}
 800397c:	b082      	sub	sp, #8
 800397e:	af00      	add	r7, sp, #0
 8003980:	6078      	str	r0, [r7, #4]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4618      	mov	r0, r3
 8003986:	f7ff ffea 	bl	800395e <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4618      	mov	r0, r3
 800398e:	3708      	adds	r7, #8
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}

08003994 <_ZN4tama8DrawableaSEOS0_>:
#include "../../../common/observers/ChangeObserver.h"
#include "texture.h"

namespace tama
{
    class Drawable
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	6039      	str	r1, [r7, #0]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4618      	mov	r0, r3
 80039a2:	370c      	adds	r7, #12
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr

080039ac <_ZN4tama4TextaSEOS0_>:
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b082      	sub	sp, #8
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	6039      	str	r1, [r7, #0]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	683a      	ldr	r2, [r7, #0]
 80039ba:	4611      	mov	r1, r2
 80039bc:	4618      	mov	r0, r3
 80039be:	f7ff ffe9 	bl	8003994 <_ZN4tama8DrawableaSEOS0_>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	1d1a      	adds	r2, r3, #4
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	3304      	adds	r3, #4
 80039ca:	4619      	mov	r1, r3
 80039cc:	4610      	mov	r0, r2
 80039ce:	f000 fea0 	bl	8004712 <_ZNSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEaSEOS4_>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f103 0208 	add.w	r2, r3, #8
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	3308      	adds	r3, #8
 80039dc:	4619      	mov	r1, r3
 80039de:	4610      	mov	r0, r2
 80039e0:	f000 febe 	bl	8004760 <_ZNSt10shared_ptrIN4tama14ChangeObserverEEaSEOS2_>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f103 0210 	add.w	r2, r3, #16
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	3310      	adds	r3, #16
 80039ee:	4619      	mov	r1, r3
 80039f0:	4610      	mov	r0, r2
 80039f2:	f013 fe84 	bl	80176fe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	3328      	adds	r3, #40	; 0x28
 8003a00:	4619      	mov	r1, r3
 8003a02:	4610      	mov	r0, r2
 8003a04:	f000 feca 	bl	800479c <_ZNSt10shared_ptrIN4tama7TextureEEaSEOS2_>
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	631a      	str	r2, [r3, #48]	; 0x30
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	683a      	ldr	r2, [r7, #0]
 8003a20:	3338      	adds	r3, #56	; 0x38
 8003a22:	3238      	adds	r2, #56	; 0x38
 8003a24:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003a28:	e883 0003 	stmia.w	r3, {r0, r1}
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	683a      	ldr	r2, [r7, #0]
 8003a30:	3340      	adds	r3, #64	; 0x40
 8003a32:	3240      	adds	r2, #64	; 0x40
 8003a34:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003a38:	e883 0003 	stmia.w	r3, {r0, r1}
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3708      	adds	r7, #8
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}

08003a46 <_ZNSt12__shared_ptrIN4tama4TextELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
 8003a46:	b580      	push	{r7, lr}
 8003a48:	b082      	sub	sp, #8
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	3304      	adds	r3, #4
 8003a52:	4618      	mov	r0, r3
 8003a54:	f7fc fff5 	bl	8000a42 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3708      	adds	r7, #8
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}

08003a62 <_ZNSt10shared_ptrIN4tama4TextEED1Ev>:
 8003a62:	b580      	push	{r7, lr}
 8003a64:	b082      	sub	sp, #8
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	6078      	str	r0, [r7, #4]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f7ff ffea 	bl	8003a46 <_ZNSt12__shared_ptrIN4tama4TextELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4618      	mov	r0, r3
 8003a76:	3708      	adds	r7, #8
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}

08003a7c <_ZN4tama14InitialLoadingC1ERKSt10shared_ptrINS_7ContextEE>:

tama::InitialLoading::InitialLoading(const std::shared_ptr<Context> &context) : Stage(context)
 8003a7c:	b590      	push	{r4, r7, lr}
 8003a7e:	b0b5      	sub	sp, #212	; 0xd4
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	6039      	str	r1, [r7, #0]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6839      	ldr	r1, [r7, #0]
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f7fe f928 	bl	8001ce0 <_ZN4tama5StageC1ERKSt10shared_ptrINS_7ContextEE>
 8003a90:	4a84      	ldr	r2, [pc, #528]	; (8003ca4 <_ZN4tama14InitialLoadingC1ERKSt10shared_ptrINS_7ContextEE+0x228>)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	601a      	str	r2, [r3, #0]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	3314      	adds	r3, #20
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f7ff ff0e 	bl	80038bc <_ZNSt5arrayIN4tama6SpriteELj9EEC1Ev>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f002 fdcc 	bl	8006644 <_ZN4tama6SpriteC1Ev>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f003 fbcc 	bl	8007250 <_ZN4tama4TextC1Ev>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2209      	movs	r2, #9
 8003abc:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
{
    initMenu();
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f000 f925 	bl	8003d10 <_ZN4tama14InitialLoading8initMenuEv>
    scene->addDrawable(std::make_shared<Sprite>(context->getTextureLoader()->load(tama::asset::egg1), Vec2d(40, 35)));
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	3304      	adds	r3, #4
 8003aca:	4618      	mov	r0, r3
 8003acc:	f000 fdb3 	bl	8004636 <_ZNKSt19__shared_ptr_accessIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8003ad0:	4604      	mov	r4, r0
 8003ad2:	6838      	ldr	r0, [r7, #0]
 8003ad4:	f7fe f986 	bl	8001de4 <_ZNKSt19__shared_ptr_accessIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	f107 0320 	add.w	r3, r7, #32
 8003ade:	4611      	mov	r1, r2
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f7fd faf7 	bl	80010d4 <_ZN4tama7Context16getTextureLoaderEv>
 8003ae6:	f107 0320 	add.w	r3, r7, #32
 8003aea:	4618      	mov	r0, r3
 8003aec:	f000 fdaf 	bl	800464e <_ZNKSt19__shared_ptr_accessIN4tama13TextureLoaderELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8003af0:	4601      	mov	r1, r0
 8003af2:	680b      	ldr	r3, [r1, #0]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f107 0018 	add.w	r0, r7, #24
 8003afa:	4a6b      	ldr	r2, [pc, #428]	; (8003ca8 <_ZN4tama14InitialLoadingC1ERKSt10shared_ptrINS_7ContextEE+0x22c>)
 8003afc:	4798      	blx	r3
 8003afe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b02:	2223      	movs	r2, #35	; 0x23
 8003b04:	2128      	movs	r1, #40	; 0x28
 8003b06:	4618      	mov	r0, r3
 8003b08:	f7fc fd06 	bl	8000518 <_ZN4tama5Vec2dC1Eii>
 8003b0c:	f107 0310 	add.w	r3, r7, #16
 8003b10:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003b14:	f107 0118 	add.w	r1, r7, #24
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f000 fdba 	bl	8004692 <_ZSt11make_sharedIN4tama6SpriteEJSt10shared_ptrINS0_7TextureEENS0_5Vec2dEEES2_IT_EDpOT0_>
 8003b1e:	f107 0210 	add.w	r2, r7, #16
 8003b22:	f107 0308 	add.w	r3, r7, #8
 8003b26:	4611      	mov	r1, r2
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f000 fddf 	bl	80046ec <_ZNSt10shared_ptrIN4tama8DrawableEEC1INS0_6SpriteEvEEOS_IT_E>
 8003b2e:	f107 0308 	add.w	r3, r7, #8
 8003b32:	4619      	mov	r1, r3
 8003b34:	4620      	mov	r0, r4
 8003b36:	f004 fed3 	bl	80088e0 <_ZN4tama5Scene11addDrawableESt10shared_ptrINS_8DrawableEE>
 8003b3a:	f107 0308 	add.w	r3, r7, #8
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f7ff f8a6 	bl	8002c90 <_ZNSt10shared_ptrIN4tama8DrawableEED1Ev>
 8003b44:	f107 0310 	add.w	r3, r7, #16
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f7ff ff16 	bl	800397a <_ZNSt10shared_ptrIN4tama6SpriteEED1Ev>
 8003b4e:	f107 0318 	add.w	r3, r7, #24
 8003b52:	4618      	mov	r0, r3
 8003b54:	f7ff fe8c 	bl	8003870 <_ZNSt10shared_ptrIN4tama7TextureEED1Ev>
 8003b58:	f107 0320 	add.w	r3, r7, #32
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f7ff fef1 	bl	8003944 <_ZNSt10shared_ptrIN4tama13TextureLoaderEED1Ev>
    text = Text(Vec2d(25, 5));
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f503 74aa 	add.w	r4, r3, #340	; 0x154
 8003b68:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003b6c:	2205      	movs	r2, #5
 8003b6e:	2119      	movs	r1, #25
 8003b70:	4618      	mov	r0, r3
 8003b72:	f7fc fcd1 	bl	8000518 <_ZN4tama5Vec2dC1Eii>
 8003b76:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003b7a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003b7e:	4611      	mov	r1, r2
 8003b80:	4618      	mov	r0, r3
 8003b82:	f003 f81d 	bl	8006bc0 <_ZN4tama4TextC1ERKNS_5Vec2dE>
 8003b86:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003b8a:	4619      	mov	r1, r3
 8003b8c:	4620      	mov	r0, r4
 8003b8e:	f7ff ff0d 	bl	80039ac <_ZN4tama4TextaSEOS0_>
 8003b92:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003b96:	4618      	mov	r0, r3
 8003b98:	f7ff fea4 	bl	80038e4 <_ZN4tama4TextD1Ev>
    scene->addDrawable(
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	3304      	adds	r3, #4
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f000 fd48 	bl	8004636 <_ZNKSt19__shared_ptr_accessIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8003ba6:	4604      	mov	r4, r0
            std::shared_ptr<Text>(&text)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f503 72aa 	add.w	r2, r3, #340	; 0x154
 8003bae:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8003bb2:	4611      	mov	r1, r2
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f000 fe04 	bl	80047c2 <_ZNSt10shared_ptrIN4tama4TextEEC1IS1_vEEPT_>
    scene->addDrawable(
 8003bba:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003bbe:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003bc2:	4611      	mov	r1, r2
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f000 fe16 	bl	80047f6 <_ZNSt10shared_ptrIN4tama8DrawableEEC1INS0_4TextEvEEOS_IT_E>
 8003bca:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003bce:	4619      	mov	r1, r3
 8003bd0:	4620      	mov	r0, r4
 8003bd2:	f004 fe85 	bl	80088e0 <_ZN4tama5Scene11addDrawableESt10shared_ptrINS_8DrawableEE>
 8003bd6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f7ff f858 	bl	8002c90 <_ZNSt10shared_ptrIN4tama8DrawableEED1Ev>
            std::shared_ptr<Text>(&text)
 8003be0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8003be4:	4618      	mov	r0, r3
 8003be6:	f7ff ff3c 	bl	8003a62 <_ZNSt10shared_ptrIN4tama4TextEED1Ev>
            );
    text.show();
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f002 ff83 	bl	8006afc <_ZN4tama4Text4showEv>
    text.setPosition(Vec2d(14, 0));
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f503 74aa 	add.w	r4, r3, #340	; 0x154
 8003bfc:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003c00:	2200      	movs	r2, #0
 8003c02:	210e      	movs	r1, #14
 8003c04:	4618      	mov	r0, r3
 8003c06:	f7fc fc87 	bl	8000518 <_ZN4tama5Vec2dC1Eii>
 8003c0a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003c0e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003c12:	4620      	mov	r0, r4
 8003c14:	f002 ff0d 	bl	8006a32 <_ZN4tama4Text11setPositionENS_5Vec2dE>
    text.setText(std::string("HALO"));
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f503 74aa 	add.w	r4, r3, #340	; 0x154
 8003c1e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003c22:	4618      	mov	r0, r3
 8003c24:	f013 fc73 	bl	801750e <_ZNSaIcEC1Ev>
 8003c28:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8003c2c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003c30:	491e      	ldr	r1, [pc, #120]	; (8003cac <_ZN4tama14InitialLoadingC1ERKSt10shared_ptrINS_7ContextEE+0x230>)
 8003c32:	4618      	mov	r0, r3
 8003c34:	f013 fe46 	bl	80178c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003c38:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003c3c:	4619      	mov	r1, r3
 8003c3e:	4620      	mov	r0, r4
 8003c40:	f002 ff8a 	bl	8006b58 <_ZN4tama4Text7setTextENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8003c44:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f013 fd4c 	bl	80176e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003c4e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003c52:	4618      	mov	r0, r3
 8003c54:	f013 fc5c 	bl	8017510 <_ZNSaIcED1Ev>
    text.setText(std::string("HALOA"));
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	f503 74aa 	add.w	r4, r3, #340	; 0x154
 8003c5e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003c62:	4618      	mov	r0, r3
 8003c64:	f013 fc53 	bl	801750e <_ZNSaIcEC1Ev>
 8003c68:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 8003c6c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003c70:	490f      	ldr	r1, [pc, #60]	; (8003cb0 <_ZN4tama14InitialLoadingC1ERKSt10shared_ptrINS_7ContextEE+0x234>)
 8003c72:	4618      	mov	r0, r3
 8003c74:	f013 fe26 	bl	80178c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003c78:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	4620      	mov	r0, r4
 8003c80:	f002 ff6a 	bl	8006b58 <_ZN4tama4Text7setTextENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8003c84:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f013 fd2c 	bl	80176e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003c8e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003c92:	4618      	mov	r0, r3
 8003c94:	f013 fc3c 	bl	8017510 <_ZNSaIcED1Ev>
}
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	37d4      	adds	r7, #212	; 0xd4
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd90      	pop	{r4, r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	0801a4ac 	.word	0x0801a4ac
 8003ca8:	20000000 	.word	0x20000000
 8003cac:	08017d20 	.word	0x08017d20
 8003cb0:	08017d28 	.word	0x08017d28

08003cb4 <_ZN4tama6SpriteaSEOS0_>:
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b082      	sub	sp, #8
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	683a      	ldr	r2, [r7, #0]
 8003cc2:	4611      	mov	r1, r2
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f7ff fe65 	bl	8003994 <_ZN4tama8DrawableaSEOS0_>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	1d1a      	adds	r2, r3, #4
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	3304      	adds	r3, #4
 8003cd2:	4619      	mov	r1, r3
 8003cd4:	4610      	mov	r0, r2
 8003cd6:	f000 fd61 	bl	800479c <_ZNSt10shared_ptrIN4tama7TextureEEaSEOS2_>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	683a      	ldr	r2, [r7, #0]
 8003cde:	330c      	adds	r3, #12
 8003ce0:	320c      	adds	r2, #12
 8003ce2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003ce6:	e883 0003 	stmia.w	r3, {r0, r1}
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	7d1a      	ldrb	r2, [r3, #20]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	751a      	strb	r2, [r3, #20]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	f103 0218 	add.w	r2, r3, #24
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	3318      	adds	r3, #24
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	4610      	mov	r0, r2
 8003d00:	f000 fd2e 	bl	8004760 <_ZNSt10shared_ptrIN4tama14ChangeObserverEEaSEOS2_>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	4618      	mov	r0, r3
 8003d08:	3708      	adds	r7, #8
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
	...

08003d10 <_ZN4tama14InitialLoading8initMenuEv>:

void tama::InitialLoading::initMenu()
{
 8003d10:	b590      	push	{r4, r7, lr}
 8003d12:	f5ad 7d2d 	sub.w	sp, sp, #692	; 0x2b4
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	1d3b      	adds	r3, r7, #4
 8003d1a:	6018      	str	r0, [r3, #0]
    scene->addDrawable(std::make_shared<Sprite>(context->getTextureLoader()->load(tama::asset::iconBarBackgroundLeft), Vec2d(0, 0)));
 8003d1c:	1d3b      	adds	r3, r7, #4
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	3304      	adds	r3, #4
 8003d22:	4618      	mov	r0, r3
 8003d24:	f000 fc87 	bl	8004636 <_ZNKSt19__shared_ptr_accessIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8003d28:	4604      	mov	r4, r0
 8003d2a:	1d3b      	adds	r3, r7, #4
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	330c      	adds	r3, #12
 8003d30:	4618      	mov	r0, r3
 8003d32:	f7fe f857 	bl	8001de4 <_ZNKSt19__shared_ptr_accessIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8003d36:	4602      	mov	r2, r0
 8003d38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d3c:	4611      	mov	r1, r2
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f7fd f9c8 	bl	80010d4 <_ZN4tama7Context16getTextureLoaderEv>
 8003d44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f000 fc80 	bl	800464e <_ZNKSt19__shared_ptr_accessIN4tama13TextureLoaderELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8003d4e:	4601      	mov	r1, r0
 8003d50:	680b      	ldr	r3, [r1, #0]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f107 001c 	add.w	r0, r7, #28
 8003d58:	4aea      	ldr	r2, [pc, #936]	; (8004104 <_ZN4tama14InitialLoading8initMenuEv+0x3f4>)
 8003d5a:	4798      	blx	r3
 8003d5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003d60:	2200      	movs	r2, #0
 8003d62:	2100      	movs	r1, #0
 8003d64:	4618      	mov	r0, r3
 8003d66:	f7fc fbd7 	bl	8000518 <_ZN4tama5Vec2dC1Eii>
 8003d6a:	f107 0314 	add.w	r3, r7, #20
 8003d6e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8003d72:	f107 011c 	add.w	r1, r7, #28
 8003d76:	4618      	mov	r0, r3
 8003d78:	f000 fc8b 	bl	8004692 <_ZSt11make_sharedIN4tama6SpriteEJSt10shared_ptrINS0_7TextureEENS0_5Vec2dEEES2_IT_EDpOT0_>
 8003d7c:	f107 0214 	add.w	r2, r7, #20
 8003d80:	f107 030c 	add.w	r3, r7, #12
 8003d84:	4611      	mov	r1, r2
 8003d86:	4618      	mov	r0, r3
 8003d88:	f000 fcb0 	bl	80046ec <_ZNSt10shared_ptrIN4tama8DrawableEEC1INS0_6SpriteEvEEOS_IT_E>
 8003d8c:	f107 030c 	add.w	r3, r7, #12
 8003d90:	4619      	mov	r1, r3
 8003d92:	4620      	mov	r0, r4
 8003d94:	f004 fda4 	bl	80088e0 <_ZN4tama5Scene11addDrawableESt10shared_ptrINS_8DrawableEE>
 8003d98:	f107 030c 	add.w	r3, r7, #12
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f7fe ff77 	bl	8002c90 <_ZNSt10shared_ptrIN4tama8DrawableEED1Ev>
 8003da2:	f107 0314 	add.w	r3, r7, #20
 8003da6:	4618      	mov	r0, r3
 8003da8:	f7ff fde7 	bl	800397a <_ZNSt10shared_ptrIN4tama6SpriteEED1Ev>
 8003dac:	f107 031c 	add.w	r3, r7, #28
 8003db0:	4618      	mov	r0, r3
 8003db2:	f7ff fd5d 	bl	8003870 <_ZNSt10shared_ptrIN4tama7TextureEED1Ev>
 8003db6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f7ff fdc2 	bl	8003944 <_ZNSt10shared_ptrIN4tama13TextureLoaderEED1Ev>
    scene->addDrawable(std::make_shared<Sprite>(context->getTextureLoader()->load(tama::asset::iconBarBackgroundRight), Vec2d(84-14, 0)));
 8003dc0:	1d3b      	adds	r3, r7, #4
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	3304      	adds	r3, #4
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f000 fc35 	bl	8004636 <_ZNKSt19__shared_ptr_accessIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8003dcc:	4604      	mov	r4, r0
 8003dce:	1d3b      	adds	r3, r7, #4
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	330c      	adds	r3, #12
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f7fe f805 	bl	8001de4 <_ZNKSt19__shared_ptr_accessIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003de0:	4611      	mov	r1, r2
 8003de2:	4618      	mov	r0, r3
 8003de4:	f7fd f976 	bl	80010d4 <_ZN4tama7Context16getTextureLoaderEv>
 8003de8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003dec:	4618      	mov	r0, r3
 8003dee:	f000 fc2e 	bl	800464e <_ZNKSt19__shared_ptr_accessIN4tama13TextureLoaderELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8003df2:	4601      	mov	r1, r0
 8003df4:	680b      	ldr	r3, [r1, #0]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8003dfc:	4ac2      	ldr	r2, [pc, #776]	; (8004108 <_ZN4tama14InitialLoading8initMenuEv+0x3f8>)
 8003dfe:	4798      	blx	r3
 8003e00:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003e04:	2200      	movs	r2, #0
 8003e06:	2146      	movs	r1, #70	; 0x46
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f7fc fb85 	bl	8000518 <_ZN4tama5Vec2dC1Eii>
 8003e0e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003e12:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8003e16:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f000 fc39 	bl	8004692 <_ZSt11make_sharedIN4tama6SpriteEJSt10shared_ptrINS0_7TextureEENS0_5Vec2dEEES2_IT_EDpOT0_>
 8003e20:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003e24:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003e28:	4611      	mov	r1, r2
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f000 fc5e 	bl	80046ec <_ZNSt10shared_ptrIN4tama8DrawableEEC1INS0_6SpriteEvEEOS_IT_E>
 8003e30:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003e34:	4619      	mov	r1, r3
 8003e36:	4620      	mov	r0, r4
 8003e38:	f004 fd52 	bl	80088e0 <_ZN4tama5Scene11addDrawableESt10shared_ptrINS_8DrawableEE>
 8003e3c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003e40:	4618      	mov	r0, r3
 8003e42:	f7fe ff25 	bl	8002c90 <_ZNSt10shared_ptrIN4tama8DrawableEED1Ev>
 8003e46:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f7ff fd95 	bl	800397a <_ZNSt10shared_ptrIN4tama6SpriteEED1Ev>
 8003e50:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003e54:	4618      	mov	r0, r3
 8003e56:	f7ff fd0b 	bl	8003870 <_ZNSt10shared_ptrIN4tama7TextureEED1Ev>
 8003e5a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f7ff fd70 	bl	8003944 <_ZNSt10shared_ptrIN4tama13TextureLoaderEED1Ev>

    bigIcons.at(0) = Sprite(context->getTextureLoader()->load(tama::asset::bigIcon1), Vec2d(0, 0));
 8003e64:	1d3b      	adds	r3, r7, #4
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	3314      	adds	r3, #20
 8003e6a:	2100      	movs	r1, #0
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f000 fba9 	bl	80045c4 <_ZNSt5arrayIN4tama6SpriteELj9EE2atEj>
 8003e72:	4604      	mov	r4, r0
 8003e74:	1d3b      	adds	r3, r7, #4
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	330c      	adds	r3, #12
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f7fd ffb2 	bl	8001de4 <_ZNKSt19__shared_ptr_accessIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8003e80:	4602      	mov	r2, r0
 8003e82:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8003e86:	4611      	mov	r1, r2
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f7fd f923 	bl	80010d4 <_ZN4tama7Context16getTextureLoaderEv>
 8003e8e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8003e92:	4618      	mov	r0, r3
 8003e94:	f000 fbdb 	bl	800464e <_ZNKSt19__shared_ptr_accessIN4tama13TextureLoaderELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8003e98:	4601      	mov	r1, r0
 8003e9a:	680b      	ldr	r3, [r1, #0]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 8003ea2:	4a9a      	ldr	r2, [pc, #616]	; (800410c <_ZN4tama14InitialLoading8initMenuEv+0x3fc>)
 8003ea4:	4798      	blx	r3
 8003ea6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003eaa:	2200      	movs	r2, #0
 8003eac:	2100      	movs	r1, #0
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f7fc fb32 	bl	8000518 <_ZN4tama5Vec2dC1Eii>
 8003eb4:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8003eb8:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 8003ebc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f002 fb81 	bl	80065c8 <_ZN4tama6SpriteC1ERKSt10shared_ptrINS_7TextureEERKNS_5Vec2dE>
 8003ec6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003eca:	4619      	mov	r1, r3
 8003ecc:	4620      	mov	r0, r4
 8003ece:	f7ff fef1 	bl	8003cb4 <_ZN4tama6SpriteaSEOS0_>
 8003ed2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f7ff fcd8 	bl	800388c <_ZN4tama6SpriteD1Ev>
 8003edc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f7ff fcc5 	bl	8003870 <_ZNSt10shared_ptrIN4tama7TextureEED1Ev>
 8003ee6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8003eea:	4618      	mov	r0, r3
 8003eec:	f7ff fd2a 	bl	8003944 <_ZNSt10shared_ptrIN4tama13TextureLoaderEED1Ev>
    bigIcons.at(1) = Sprite(context->getTextureLoader()->load(tama::asset::bigIcon2), Vec2d(0, 8));
 8003ef0:	1d3b      	adds	r3, r7, #4
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	3314      	adds	r3, #20
 8003ef6:	2101      	movs	r1, #1
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f000 fb63 	bl	80045c4 <_ZNSt5arrayIN4tama6SpriteELj9EE2atEj>
 8003efe:	4604      	mov	r4, r0
 8003f00:	1d3b      	adds	r3, r7, #4
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	330c      	adds	r3, #12
 8003f06:	4618      	mov	r0, r3
 8003f08:	f7fd ff6c 	bl	8001de4 <_ZNKSt19__shared_ptr_accessIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003f12:	4611      	mov	r1, r2
 8003f14:	4618      	mov	r0, r3
 8003f16:	f7fd f8dd 	bl	80010d4 <_ZN4tama7Context16getTextureLoaderEv>
 8003f1a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f000 fb95 	bl	800464e <_ZNKSt19__shared_ptr_accessIN4tama13TextureLoaderELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8003f24:	4601      	mov	r1, r0
 8003f26:	680b      	ldr	r3, [r1, #0]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f107 00b4 	add.w	r0, r7, #180	; 0xb4
 8003f2e:	4a78      	ldr	r2, [pc, #480]	; (8004110 <_ZN4tama14InitialLoading8initMenuEv+0x400>)
 8003f30:	4798      	blx	r3
 8003f32:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003f36:	2208      	movs	r2, #8
 8003f38:	2100      	movs	r1, #0
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f7fc faec 	bl	8000518 <_ZN4tama5Vec2dC1Eii>
 8003f40:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8003f44:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 8003f48:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f002 fb3b 	bl	80065c8 <_ZN4tama6SpriteC1ERKSt10shared_ptrINS_7TextureEERKNS_5Vec2dE>
 8003f52:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003f56:	4619      	mov	r1, r3
 8003f58:	4620      	mov	r0, r4
 8003f5a:	f7ff feab 	bl	8003cb4 <_ZN4tama6SpriteaSEOS0_>
 8003f5e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003f62:	4618      	mov	r0, r3
 8003f64:	f7ff fc92 	bl	800388c <_ZN4tama6SpriteD1Ev>
 8003f68:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f7ff fc7f 	bl	8003870 <_ZNSt10shared_ptrIN4tama7TextureEED1Ev>
 8003f72:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003f76:	4618      	mov	r0, r3
 8003f78:	f7ff fce4 	bl	8003944 <_ZNSt10shared_ptrIN4tama13TextureLoaderEED1Ev>
    bigIcons.at(2) = Sprite(context->getTextureLoader()->load(tama::asset::bigIcon3), Vec2d(0, 15));
 8003f7c:	1d3b      	adds	r3, r7, #4
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	3314      	adds	r3, #20
 8003f82:	2102      	movs	r1, #2
 8003f84:	4618      	mov	r0, r3
 8003f86:	f000 fb1d 	bl	80045c4 <_ZNSt5arrayIN4tama6SpriteELj9EE2atEj>
 8003f8a:	4604      	mov	r4, r0
 8003f8c:	1d3b      	adds	r3, r7, #4
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	330c      	adds	r3, #12
 8003f92:	4618      	mov	r0, r3
 8003f94:	f7fd ff26 	bl	8001de4 <_ZNKSt19__shared_ptr_accessIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003f9e:	4611      	mov	r1, r2
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f7fd f897 	bl	80010d4 <_ZN4tama7Context16getTextureLoaderEv>
 8003fa6:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003faa:	4618      	mov	r0, r3
 8003fac:	f000 fb4f 	bl	800464e <_ZNKSt19__shared_ptr_accessIN4tama13TextureLoaderELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8003fb0:	4601      	mov	r1, r0
 8003fb2:	680b      	ldr	r3, [r1, #0]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f107 00ec 	add.w	r0, r7, #236	; 0xec
 8003fba:	4a56      	ldr	r2, [pc, #344]	; (8004114 <_ZN4tama14InitialLoading8initMenuEv+0x404>)
 8003fbc:	4798      	blx	r3
 8003fbe:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003fc2:	220f      	movs	r2, #15
 8003fc4:	2100      	movs	r1, #0
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f7fc faa6 	bl	8000518 <_ZN4tama5Vec2dC1Eii>
 8003fcc:	f107 02fc 	add.w	r2, r7, #252	; 0xfc
 8003fd0:	f107 01ec 	add.w	r1, r7, #236	; 0xec
 8003fd4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f002 faf5 	bl	80065c8 <_ZN4tama6SpriteC1ERKSt10shared_ptrINS_7TextureEERKNS_5Vec2dE>
 8003fde:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	4620      	mov	r0, r4
 8003fe6:	f7ff fe65 	bl	8003cb4 <_ZN4tama6SpriteaSEOS0_>
 8003fea:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f7ff fc4c 	bl	800388c <_ZN4tama6SpriteD1Ev>
 8003ff4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f7ff fc39 	bl	8003870 <_ZNSt10shared_ptrIN4tama7TextureEED1Ev>
 8003ffe:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8004002:	4618      	mov	r0, r3
 8004004:	f7ff fc9e 	bl	8003944 <_ZNSt10shared_ptrIN4tama13TextureLoaderEED1Ev>
    bigIcons.at(3) = Sprite(context->getTextureLoader()->load(tama::asset::bigIcon4), Vec2d(0, 22));
 8004008:	1d3b      	adds	r3, r7, #4
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	3314      	adds	r3, #20
 800400e:	2103      	movs	r1, #3
 8004010:	4618      	mov	r0, r3
 8004012:	f000 fad7 	bl	80045c4 <_ZNSt5arrayIN4tama6SpriteELj9EE2atEj>
 8004016:	4604      	mov	r4, r0
 8004018:	1d3b      	adds	r3, r7, #4
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	330c      	adds	r3, #12
 800401e:	4618      	mov	r0, r3
 8004020:	f7fd fee0 	bl	8001de4 <_ZNKSt19__shared_ptr_accessIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8004024:	4602      	mov	r2, r0
 8004026:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800402a:	4611      	mov	r1, r2
 800402c:	4618      	mov	r0, r3
 800402e:	f7fd f851 	bl	80010d4 <_ZN4tama7Context16getTextureLoaderEv>
 8004032:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8004036:	4618      	mov	r0, r3
 8004038:	f000 fb09 	bl	800464e <_ZNKSt19__shared_ptr_accessIN4tama13TextureLoaderELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800403c:	4601      	mov	r1, r0
 800403e:	680b      	ldr	r3, [r1, #0]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f507 7092 	add.w	r0, r7, #292	; 0x124
 8004046:	4a34      	ldr	r2, [pc, #208]	; (8004118 <_ZN4tama14InitialLoading8initMenuEv+0x408>)
 8004048:	4798      	blx	r3
 800404a:	f507 739a 	add.w	r3, r7, #308	; 0x134
 800404e:	2216      	movs	r2, #22
 8004050:	2100      	movs	r1, #0
 8004052:	4618      	mov	r0, r3
 8004054:	f7fc fa60 	bl	8000518 <_ZN4tama5Vec2dC1Eii>
 8004058:	f507 729a 	add.w	r2, r7, #308	; 0x134
 800405c:	f507 7192 	add.w	r1, r7, #292	; 0x124
 8004060:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8004064:	4618      	mov	r0, r3
 8004066:	f002 faaf 	bl	80065c8 <_ZN4tama6SpriteC1ERKSt10shared_ptrINS_7TextureEERKNS_5Vec2dE>
 800406a:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800406e:	4619      	mov	r1, r3
 8004070:	4620      	mov	r0, r4
 8004072:	f7ff fe1f 	bl	8003cb4 <_ZN4tama6SpriteaSEOS0_>
 8004076:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800407a:	4618      	mov	r0, r3
 800407c:	f7ff fc06 	bl	800388c <_ZN4tama6SpriteD1Ev>
 8004080:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8004084:	4618      	mov	r0, r3
 8004086:	f7ff fbf3 	bl	8003870 <_ZNSt10shared_ptrIN4tama7TextureEED1Ev>
 800408a:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800408e:	4618      	mov	r0, r3
 8004090:	f7ff fc58 	bl	8003944 <_ZNSt10shared_ptrIN4tama13TextureLoaderEED1Ev>
    bigIcons.at(4) = Sprite(context->getTextureLoader()->load(tama::asset::bigIcon5), Vec2d(0, 29));
 8004094:	1d3b      	adds	r3, r7, #4
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	3314      	adds	r3, #20
 800409a:	2104      	movs	r1, #4
 800409c:	4618      	mov	r0, r3
 800409e:	f000 fa91 	bl	80045c4 <_ZNSt5arrayIN4tama6SpriteELj9EE2atEj>
 80040a2:	4604      	mov	r4, r0
 80040a4:	1d3b      	adds	r3, r7, #4
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	330c      	adds	r3, #12
 80040aa:	4618      	mov	r0, r3
 80040ac:	f7fd fe9a 	bl	8001de4 <_ZNKSt19__shared_ptr_accessIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 80040b0:	4602      	mov	r2, r0
 80040b2:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 80040b6:	4611      	mov	r1, r2
 80040b8:	4618      	mov	r0, r3
 80040ba:	f7fd f80b 	bl	80010d4 <_ZN4tama7Context16getTextureLoaderEv>
 80040be:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 80040c2:	4618      	mov	r0, r3
 80040c4:	f000 fac3 	bl	800464e <_ZNKSt19__shared_ptr_accessIN4tama13TextureLoaderELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 80040c8:	4601      	mov	r1, r0
 80040ca:	680b      	ldr	r3, [r1, #0]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f507 70ae 	add.w	r0, r7, #348	; 0x15c
 80040d2:	4a12      	ldr	r2, [pc, #72]	; (800411c <_ZN4tama14InitialLoading8initMenuEv+0x40c>)
 80040d4:	4798      	blx	r3
 80040d6:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 80040da:	221d      	movs	r2, #29
 80040dc:	2100      	movs	r1, #0
 80040de:	4618      	mov	r0, r3
 80040e0:	f7fc fa1a 	bl	8000518 <_ZN4tama5Vec2dC1Eii>
 80040e4:	f507 72b6 	add.w	r2, r7, #364	; 0x16c
 80040e8:	f507 71ae 	add.w	r1, r7, #348	; 0x15c
 80040ec:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 80040f0:	4618      	mov	r0, r3
 80040f2:	f002 fa69 	bl	80065c8 <_ZN4tama6SpriteC1ERKSt10shared_ptrINS_7TextureEERKNS_5Vec2dE>
 80040f6:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 80040fa:	4619      	mov	r1, r3
 80040fc:	4620      	mov	r0, r4
 80040fe:	f7ff fdd9 	bl	8003cb4 <_ZN4tama6SpriteaSEOS0_>
 8004102:	e00d      	b.n	8004120 <_ZN4tama14InitialLoading8initMenuEv+0x410>
 8004104:	2000000c 	.word	0x2000000c
 8004108:	20000018 	.word	0x20000018
 800410c:	20000030 	.word	0x20000030
 8004110:	2000003c 	.word	0x2000003c
 8004114:	20000048 	.word	0x20000048
 8004118:	20000054 	.word	0x20000054
 800411c:	20000060 	.word	0x20000060
 8004120:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8004124:	4618      	mov	r0, r3
 8004126:	f7ff fbb1 	bl	800388c <_ZN4tama6SpriteD1Ev>
 800412a:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 800412e:	4618      	mov	r0, r3
 8004130:	f7ff fb9e 	bl	8003870 <_ZNSt10shared_ptrIN4tama7TextureEED1Ev>
 8004134:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8004138:	4618      	mov	r0, r3
 800413a:	f7ff fc03 	bl	8003944 <_ZNSt10shared_ptrIN4tama13TextureLoaderEED1Ev>
    bigIcons.at(5) = Sprite(context->getTextureLoader()->load(tama::asset::bigIcon6), Vec2d(65, 0));
 800413e:	1d3b      	adds	r3, r7, #4
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	3314      	adds	r3, #20
 8004144:	2105      	movs	r1, #5
 8004146:	4618      	mov	r0, r3
 8004148:	f000 fa3c 	bl	80045c4 <_ZNSt5arrayIN4tama6SpriteELj9EE2atEj>
 800414c:	4604      	mov	r4, r0
 800414e:	1d3b      	adds	r3, r7, #4
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	330c      	adds	r3, #12
 8004154:	4618      	mov	r0, r3
 8004156:	f7fd fe45 	bl	8001de4 <_ZNKSt19__shared_ptr_accessIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800415a:	4602      	mov	r2, r0
 800415c:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8004160:	4611      	mov	r1, r2
 8004162:	4618      	mov	r0, r3
 8004164:	f7fc ffb6 	bl	80010d4 <_ZN4tama7Context16getTextureLoaderEv>
 8004168:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 800416c:	4618      	mov	r0, r3
 800416e:	f000 fa6e 	bl	800464e <_ZNKSt19__shared_ptr_accessIN4tama13TextureLoaderELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8004172:	4601      	mov	r1, r0
 8004174:	680b      	ldr	r3, [r1, #0]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f507 70ca 	add.w	r0, r7, #404	; 0x194
 800417c:	4ad9      	ldr	r2, [pc, #868]	; (80044e4 <_ZN4tama14InitialLoading8initMenuEv+0x7d4>)
 800417e:	4798      	blx	r3
 8004180:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 8004184:	2200      	movs	r2, #0
 8004186:	2141      	movs	r1, #65	; 0x41
 8004188:	4618      	mov	r0, r3
 800418a:	f7fc f9c5 	bl	8000518 <_ZN4tama5Vec2dC1Eii>
 800418e:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 8004192:	f507 71ca 	add.w	r1, r7, #404	; 0x194
 8004196:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 800419a:	4618      	mov	r0, r3
 800419c:	f002 fa14 	bl	80065c8 <_ZN4tama6SpriteC1ERKSt10shared_ptrINS_7TextureEERKNS_5Vec2dE>
 80041a0:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 80041a4:	4619      	mov	r1, r3
 80041a6:	4620      	mov	r0, r4
 80041a8:	f7ff fd84 	bl	8003cb4 <_ZN4tama6SpriteaSEOS0_>
 80041ac:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 80041b0:	4618      	mov	r0, r3
 80041b2:	f7ff fb6b 	bl	800388c <_ZN4tama6SpriteD1Ev>
 80041b6:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 80041ba:	4618      	mov	r0, r3
 80041bc:	f7ff fb58 	bl	8003870 <_ZNSt10shared_ptrIN4tama7TextureEED1Ev>
 80041c0:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 80041c4:	4618      	mov	r0, r3
 80041c6:	f7ff fbbd 	bl	8003944 <_ZNSt10shared_ptrIN4tama13TextureLoaderEED1Ev>
    bigIcons.at(6) = Sprite(context->getTextureLoader()->load(tama::asset::bigIcon7), Vec2d(65, 8));
 80041ca:	1d3b      	adds	r3, r7, #4
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	3314      	adds	r3, #20
 80041d0:	2106      	movs	r1, #6
 80041d2:	4618      	mov	r0, r3
 80041d4:	f000 f9f6 	bl	80045c4 <_ZNSt5arrayIN4tama6SpriteELj9EE2atEj>
 80041d8:	4604      	mov	r4, r0
 80041da:	1d3b      	adds	r3, r7, #4
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	330c      	adds	r3, #12
 80041e0:	4618      	mov	r0, r3
 80041e2:	f7fd fdff 	bl	8001de4 <_ZNKSt19__shared_ptr_accessIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 80041e6:	4602      	mov	r2, r0
 80041e8:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 80041ec:	4611      	mov	r1, r2
 80041ee:	4618      	mov	r0, r3
 80041f0:	f7fc ff70 	bl	80010d4 <_ZN4tama7Context16getTextureLoaderEv>
 80041f4:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 80041f8:	4618      	mov	r0, r3
 80041fa:	f000 fa28 	bl	800464e <_ZNKSt19__shared_ptr_accessIN4tama13TextureLoaderELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 80041fe:	4601      	mov	r1, r0
 8004200:	680b      	ldr	r3, [r1, #0]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f507 70e6 	add.w	r0, r7, #460	; 0x1cc
 8004208:	4ab7      	ldr	r2, [pc, #732]	; (80044e8 <_ZN4tama14InitialLoading8initMenuEv+0x7d8>)
 800420a:	4798      	blx	r3
 800420c:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 8004210:	2208      	movs	r2, #8
 8004212:	2141      	movs	r1, #65	; 0x41
 8004214:	4618      	mov	r0, r3
 8004216:	f7fc f97f 	bl	8000518 <_ZN4tama5Vec2dC1Eii>
 800421a:	f507 72ee 	add.w	r2, r7, #476	; 0x1dc
 800421e:	f507 71e6 	add.w	r1, r7, #460	; 0x1cc
 8004222:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8004226:	4618      	mov	r0, r3
 8004228:	f002 f9ce 	bl	80065c8 <_ZN4tama6SpriteC1ERKSt10shared_ptrINS_7TextureEERKNS_5Vec2dE>
 800422c:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8004230:	4619      	mov	r1, r3
 8004232:	4620      	mov	r0, r4
 8004234:	f7ff fd3e 	bl	8003cb4 <_ZN4tama6SpriteaSEOS0_>
 8004238:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 800423c:	4618      	mov	r0, r3
 800423e:	f7ff fb25 	bl	800388c <_ZN4tama6SpriteD1Ev>
 8004242:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 8004246:	4618      	mov	r0, r3
 8004248:	f7ff fb12 	bl	8003870 <_ZNSt10shared_ptrIN4tama7TextureEED1Ev>
 800424c:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 8004250:	4618      	mov	r0, r3
 8004252:	f7ff fb77 	bl	8003944 <_ZNSt10shared_ptrIN4tama13TextureLoaderEED1Ev>
    bigIcons.at(7) = Sprite(context->getTextureLoader()->load(tama::asset::bigIcon8), Vec2d(65, 15));
 8004256:	1d3b      	adds	r3, r7, #4
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	3314      	adds	r3, #20
 800425c:	2107      	movs	r1, #7
 800425e:	4618      	mov	r0, r3
 8004260:	f000 f9b0 	bl	80045c4 <_ZNSt5arrayIN4tama6SpriteELj9EE2atEj>
 8004264:	4604      	mov	r4, r0
 8004266:	1d3b      	adds	r3, r7, #4
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	330c      	adds	r3, #12
 800426c:	4618      	mov	r0, r3
 800426e:	f7fd fdb9 	bl	8001de4 <_ZNKSt19__shared_ptr_accessIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8004272:	4602      	mov	r2, r0
 8004274:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8004278:	4611      	mov	r1, r2
 800427a:	4618      	mov	r0, r3
 800427c:	f7fc ff2a 	bl	80010d4 <_ZN4tama7Context16getTextureLoaderEv>
 8004280:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8004284:	4618      	mov	r0, r3
 8004286:	f000 f9e2 	bl	800464e <_ZNKSt19__shared_ptr_accessIN4tama13TextureLoaderELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800428a:	4601      	mov	r1, r0
 800428c:	680b      	ldr	r3, [r1, #0]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f507 7001 	add.w	r0, r7, #516	; 0x204
 8004294:	4a95      	ldr	r2, [pc, #596]	; (80044ec <_ZN4tama14InitialLoading8initMenuEv+0x7dc>)
 8004296:	4798      	blx	r3
 8004298:	f507 7305 	add.w	r3, r7, #532	; 0x214
 800429c:	220f      	movs	r2, #15
 800429e:	2141      	movs	r1, #65	; 0x41
 80042a0:	4618      	mov	r0, r3
 80042a2:	f7fc f939 	bl	8000518 <_ZN4tama5Vec2dC1Eii>
 80042a6:	f507 7205 	add.w	r2, r7, #532	; 0x214
 80042aa:	f507 7101 	add.w	r1, r7, #516	; 0x204
 80042ae:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 80042b2:	4618      	mov	r0, r3
 80042b4:	f002 f988 	bl	80065c8 <_ZN4tama6SpriteC1ERKSt10shared_ptrINS_7TextureEERKNS_5Vec2dE>
 80042b8:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 80042bc:	4619      	mov	r1, r3
 80042be:	4620      	mov	r0, r4
 80042c0:	f7ff fcf8 	bl	8003cb4 <_ZN4tama6SpriteaSEOS0_>
 80042c4:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 80042c8:	4618      	mov	r0, r3
 80042ca:	f7ff fadf 	bl	800388c <_ZN4tama6SpriteD1Ev>
 80042ce:	f507 7301 	add.w	r3, r7, #516	; 0x204
 80042d2:	4618      	mov	r0, r3
 80042d4:	f7ff facc 	bl	8003870 <_ZNSt10shared_ptrIN4tama7TextureEED1Ev>
 80042d8:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 80042dc:	4618      	mov	r0, r3
 80042de:	f7ff fb31 	bl	8003944 <_ZNSt10shared_ptrIN4tama13TextureLoaderEED1Ev>
    bigIcons.at(8) = Sprite(context->getTextureLoader()->load(tama::asset::bigIcon9), Vec2d(65, 20));
 80042e2:	1d3b      	adds	r3, r7, #4
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	3314      	adds	r3, #20
 80042e8:	2108      	movs	r1, #8
 80042ea:	4618      	mov	r0, r3
 80042ec:	f000 f96a 	bl	80045c4 <_ZNSt5arrayIN4tama6SpriteELj9EE2atEj>
 80042f0:	4604      	mov	r4, r0
 80042f2:	1d3b      	adds	r3, r7, #4
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	330c      	adds	r3, #12
 80042f8:	4618      	mov	r0, r3
 80042fa:	f7fd fd73 	bl	8001de4 <_ZNKSt19__shared_ptr_accessIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 80042fe:	4602      	mov	r2, r0
 8004300:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8004304:	4611      	mov	r1, r2
 8004306:	4618      	mov	r0, r3
 8004308:	f7fc fee4 	bl	80010d4 <_ZN4tama7Context16getTextureLoaderEv>
 800430c:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8004310:	4618      	mov	r0, r3
 8004312:	f000 f99c 	bl	800464e <_ZNKSt19__shared_ptr_accessIN4tama13TextureLoaderELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8004316:	4601      	mov	r1, r0
 8004318:	680b      	ldr	r3, [r1, #0]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f507 700f 	add.w	r0, r7, #572	; 0x23c
 8004320:	4a73      	ldr	r2, [pc, #460]	; (80044f0 <_ZN4tama14InitialLoading8initMenuEv+0x7e0>)
 8004322:	4798      	blx	r3
 8004324:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 8004328:	2214      	movs	r2, #20
 800432a:	2141      	movs	r1, #65	; 0x41
 800432c:	4618      	mov	r0, r3
 800432e:	f7fc f8f3 	bl	8000518 <_ZN4tama5Vec2dC1Eii>
 8004332:	f507 7213 	add.w	r2, r7, #588	; 0x24c
 8004336:	f507 710f 	add.w	r1, r7, #572	; 0x23c
 800433a:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800433e:	4618      	mov	r0, r3
 8004340:	f002 f942 	bl	80065c8 <_ZN4tama6SpriteC1ERKSt10shared_ptrINS_7TextureEERKNS_5Vec2dE>
 8004344:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8004348:	4619      	mov	r1, r3
 800434a:	4620      	mov	r0, r4
 800434c:	f7ff fcb2 	bl	8003cb4 <_ZN4tama6SpriteaSEOS0_>
 8004350:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8004354:	4618      	mov	r0, r3
 8004356:	f7ff fa99 	bl	800388c <_ZN4tama6SpriteD1Ev>
 800435a:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 800435e:	4618      	mov	r0, r3
 8004360:	f7ff fa86 	bl	8003870 <_ZNSt10shared_ptrIN4tama7TextureEED1Ev>
 8004364:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8004368:	4618      	mov	r0, r3
 800436a:	f7ff faeb 	bl	8003944 <_ZNSt10shared_ptrIN4tama13TextureLoaderEED1Ev>

    for (int i = 0; i < 9; ++i)
 800436e:	2300      	movs	r3, #0
 8004370:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 8004374:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8004378:	2b08      	cmp	r3, #8
 800437a:	dc43      	bgt.n	8004404 <_ZN4tama14InitialLoading8initMenuEv+0x6f4>
    {
        bigIcons.at(i).hide();
 800437c:	1d3b      	adds	r3, r7, #4
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	3314      	adds	r3, #20
 8004382:	f8d7 22ac 	ldr.w	r2, [r7, #684]	; 0x2ac
 8004386:	4611      	mov	r1, r2
 8004388:	4618      	mov	r0, r3
 800438a:	f000 f91b 	bl	80045c4 <_ZNSt5arrayIN4tama6SpriteELj9EE2atEj>
 800438e:	4602      	mov	r2, r0
 8004390:	6813      	ldr	r3, [r2, #0]
 8004392:	3314      	adds	r3, #20
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4610      	mov	r0, r2
 8004398:	4798      	blx	r3
        scene->addDrawable(std::shared_ptr<Sprite>(&bigIcons.at(i)));
 800439a:	1d3b      	adds	r3, r7, #4
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	3304      	adds	r3, #4
 80043a0:	4618      	mov	r0, r3
 80043a2:	f000 f948 	bl	8004636 <_ZNKSt19__shared_ptr_accessIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 80043a6:	4604      	mov	r4, r0
 80043a8:	1d3b      	adds	r3, r7, #4
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	3314      	adds	r3, #20
 80043ae:	f8d7 22ac 	ldr.w	r2, [r7, #684]	; 0x2ac
 80043b2:	4611      	mov	r1, r2
 80043b4:	4618      	mov	r0, r3
 80043b6:	f000 f905 	bl	80045c4 <_ZNSt5arrayIN4tama6SpriteELj9EE2atEj>
 80043ba:	4602      	mov	r2, r0
 80043bc:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 80043c0:	4611      	mov	r1, r2
 80043c2:	4618      	mov	r0, r3
 80043c4:	f000 fa2a 	bl	800481c <_ZNSt10shared_ptrIN4tama6SpriteEEC1IS1_vEEPT_>
 80043c8:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 80043cc:	f507 7315 	add.w	r3, r7, #596	; 0x254
 80043d0:	4611      	mov	r1, r2
 80043d2:	4618      	mov	r0, r3
 80043d4:	f000 f98a 	bl	80046ec <_ZNSt10shared_ptrIN4tama8DrawableEEC1INS0_6SpriteEvEEOS_IT_E>
 80043d8:	f507 7315 	add.w	r3, r7, #596	; 0x254
 80043dc:	4619      	mov	r1, r3
 80043de:	4620      	mov	r0, r4
 80043e0:	f004 fa7e 	bl	80088e0 <_ZN4tama5Scene11addDrawableESt10shared_ptrINS_8DrawableEE>
 80043e4:	f507 7315 	add.w	r3, r7, #596	; 0x254
 80043e8:	4618      	mov	r0, r3
 80043ea:	f7fe fc51 	bl	8002c90 <_ZNSt10shared_ptrIN4tama8DrawableEED1Ev>
 80043ee:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 80043f2:	4618      	mov	r0, r3
 80043f4:	f7ff fac1 	bl	800397a <_ZNSt10shared_ptrIN4tama6SpriteEED1Ev>
    for (int i = 0; i < 9; ++i)
 80043f8:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 80043fc:	3301      	adds	r3, #1
 80043fe:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 8004402:	e7b7      	b.n	8004374 <_ZN4tama14InitialLoading8initMenuEv+0x664>
    }

    okIcon = Sprite(context->getTextureLoader()->load(tama::asset::okIcon), Vec2d(84 - 11, 48 - 8));
 8004404:	1d3b      	adds	r3, r7, #4
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f503 749a 	add.w	r4, r3, #308	; 0x134
 800440c:	1d3b      	adds	r3, r7, #4
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	330c      	adds	r3, #12
 8004412:	4618      	mov	r0, r3
 8004414:	f7fd fce6 	bl	8001de4 <_ZNKSt19__shared_ptr_accessIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8004418:	4602      	mov	r2, r0
 800441a:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 800441e:	4611      	mov	r1, r2
 8004420:	4618      	mov	r0, r3
 8004422:	f7fc fe57 	bl	80010d4 <_ZN4tama7Context16getTextureLoaderEv>
 8004426:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 800442a:	4618      	mov	r0, r3
 800442c:	f000 f90f 	bl	800464e <_ZNKSt19__shared_ptr_accessIN4tama13TextureLoaderELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8004430:	4601      	mov	r1, r0
 8004432:	680b      	ldr	r3, [r1, #0]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f507 7021 	add.w	r0, r7, #644	; 0x284
 800443a:	4a2e      	ldr	r2, [pc, #184]	; (80044f4 <_ZN4tama14InitialLoading8initMenuEv+0x7e4>)
 800443c:	4798      	blx	r3
 800443e:	f507 7325 	add.w	r3, r7, #660	; 0x294
 8004442:	2228      	movs	r2, #40	; 0x28
 8004444:	2149      	movs	r1, #73	; 0x49
 8004446:	4618      	mov	r0, r3
 8004448:	f7fc f866 	bl	8000518 <_ZN4tama5Vec2dC1Eii>
 800444c:	f507 7225 	add.w	r2, r7, #660	; 0x294
 8004450:	f507 7121 	add.w	r1, r7, #644	; 0x284
 8004454:	f507 7319 	add.w	r3, r7, #612	; 0x264
 8004458:	4618      	mov	r0, r3
 800445a:	f002 f8b5 	bl	80065c8 <_ZN4tama6SpriteC1ERKSt10shared_ptrINS_7TextureEERKNS_5Vec2dE>
 800445e:	f507 7319 	add.w	r3, r7, #612	; 0x264
 8004462:	4619      	mov	r1, r3
 8004464:	4620      	mov	r0, r4
 8004466:	f7ff fc25 	bl	8003cb4 <_ZN4tama6SpriteaSEOS0_>
 800446a:	f507 7319 	add.w	r3, r7, #612	; 0x264
 800446e:	4618      	mov	r0, r3
 8004470:	f7ff fa0c 	bl	800388c <_ZN4tama6SpriteD1Ev>
 8004474:	f507 7321 	add.w	r3, r7, #644	; 0x284
 8004478:	4618      	mov	r0, r3
 800447a:	f7ff f9f9 	bl	8003870 <_ZNSt10shared_ptrIN4tama7TextureEED1Ev>
 800447e:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 8004482:	4618      	mov	r0, r3
 8004484:	f7ff fa5e 	bl	8003944 <_ZNSt10shared_ptrIN4tama13TextureLoaderEED1Ev>
    scene->addDrawable(std::shared_ptr<Sprite>(&okIcon));
 8004488:	1d3b      	adds	r3, r7, #4
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	3304      	adds	r3, #4
 800448e:	4618      	mov	r0, r3
 8004490:	f000 f8d1 	bl	8004636 <_ZNKSt19__shared_ptr_accessIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8004494:	4604      	mov	r4, r0
 8004496:	1d3b      	adds	r3, r7, #4
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f503 729a 	add.w	r2, r3, #308	; 0x134
 800449e:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 80044a2:	4611      	mov	r1, r2
 80044a4:	4618      	mov	r0, r3
 80044a6:	f000 f9b9 	bl	800481c <_ZNSt10shared_ptrIN4tama6SpriteEEC1IS1_vEEPT_>
 80044aa:	f507 7229 	add.w	r2, r7, #676	; 0x2a4
 80044ae:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 80044b2:	4611      	mov	r1, r2
 80044b4:	4618      	mov	r0, r3
 80044b6:	f000 f919 	bl	80046ec <_ZNSt10shared_ptrIN4tama8DrawableEEC1INS0_6SpriteEvEEOS_IT_E>
 80044ba:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 80044be:	4619      	mov	r1, r3
 80044c0:	4620      	mov	r0, r4
 80044c2:	f004 fa0d 	bl	80088e0 <_ZN4tama5Scene11addDrawableESt10shared_ptrINS_8DrawableEE>
 80044c6:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 80044ca:	4618      	mov	r0, r3
 80044cc:	f7fe fbe0 	bl	8002c90 <_ZNSt10shared_ptrIN4tama8DrawableEED1Ev>
 80044d0:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 80044d4:	4618      	mov	r0, r3
 80044d6:	f7ff fa50 	bl	800397a <_ZNSt10shared_ptrIN4tama6SpriteEED1Ev>
}
 80044da:	bf00      	nop
 80044dc:	f507 772d 	add.w	r7, r7, #692	; 0x2b4
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd90      	pop	{r4, r7, pc}
 80044e4:	2000006c 	.word	0x2000006c
 80044e8:	20000078 	.word	0x20000078
 80044ec:	20000084 	.word	0x20000084
 80044f0:	20000090 	.word	0x20000090
 80044f4:	20000024 	.word	0x20000024

080044f8 <_ZSt4moveIRN4tama4ToneEEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	4618      	mov	r0, r3
 8004504:	370c      	adds	r7, #12
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr

0800450e <_ZNSt6vectorIN4tama4ToneESaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 800450e:	b580      	push	{r7, lr}
 8004510:	b082      	sub	sp, #8
 8004512:	af00      	add	r7, sp, #0
 8004514:	6078      	str	r0, [r7, #4]
 8004516:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 8004518:	6838      	ldr	r0, [r7, #0]
 800451a:	f7ff ffed 	bl	80044f8 <_ZSt4moveIRN4tama4ToneEEONSt16remove_referenceIT_E4typeEOS4_>
 800451e:	4603      	mov	r3, r0
 8004520:	4619      	mov	r1, r3
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f000 f994 	bl	8004850 <_ZNSt6vectorIN4tama4ToneESaIS1_EE12emplace_backIJS1_EEEvDpOT_>
 8004528:	bf00      	nop
 800452a:	3708      	adds	r7, #8
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}

08004530 <_ZNKSt19__shared_ptr_accessIN4tama11SoundPlayerELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 8004530:	b580      	push	{r7, lr}
 8004532:	b082      	sub	sp, #8
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
	return _M_get();
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	f000 f9b8 	bl	80048ae <_ZNKSt19__shared_ptr_accessIN4tama11SoundPlayerELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 800453e:	4603      	mov	r3, r0
      }
 8004540:	4618      	mov	r0, r3
 8004542:	3708      	adds	r7, #8
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}

08004548 <_ZNSt6vectorIN4tama4ToneESaIS1_EEC1ERKS3_>:
      vector(const vector& __x)
 8004548:	b5f0      	push	{r4, r5, r6, r7, lr}
 800454a:	b085      	sub	sp, #20
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	6039      	str	r1, [r7, #0]
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 8004552:	687c      	ldr	r4, [r7, #4]
 8004554:	6838      	ldr	r0, [r7, #0]
 8004556:	f7fe fde1 	bl	800311c <_ZNKSt6vectorIN4tama4ToneESaIS1_EE4sizeEv>
 800455a:	4605      	mov	r5, r0
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	4618      	mov	r0, r3
 8004560:	f7fe ffdd 	bl	800351e <_ZNKSt12_Vector_baseIN4tama4ToneESaIS1_EE19_M_get_Tp_allocatorEv>
 8004564:	4602      	mov	r2, r0
 8004566:	f107 030c 	add.w	r3, r7, #12
 800456a:	4611      	mov	r1, r2
 800456c:	4618      	mov	r0, r3
 800456e:	f000 f9aa 	bl	80048c6 <_ZN9__gnu_cxx14__alloc_traitsISaIN4tama4ToneEEE17_S_select_on_copyERKS3_>
 8004572:	f107 030c 	add.w	r3, r7, #12
 8004576:	461a      	mov	r2, r3
 8004578:	4629      	mov	r1, r5
 800457a:	4620      	mov	r0, r4
 800457c:	f000 f9b1 	bl	80048e2 <_ZNSt12_Vector_baseIN4tama4ToneESaIS1_EEC1EjRKS2_>
 8004580:	f107 030c 	add.w	r3, r7, #12
 8004584:	4618      	mov	r0, r3
 8004586:	f7fe ff34 	bl	80033f2 <_ZNSaIN4tama4ToneEED1Ev>
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 800458a:	6838      	ldr	r0, [r7, #0]
 800458c:	f000 f9bd 	bl	800490a <_ZNKSt6vectorIN4tama4ToneESaIS1_EE5beginEv>
 8004590:	4605      	mov	r5, r0
 8004592:	6838      	ldr	r0, [r7, #0]
 8004594:	f000 f9cd 	bl	8004932 <_ZNKSt6vectorIN4tama4ToneESaIS1_EE3endEv>
 8004598:	4606      	mov	r6, r0
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681c      	ldr	r4, [r3, #0]
				      _M_get_Tp_allocator());
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4618      	mov	r0, r3
 80045a2:	f7fe fefc 	bl	800339e <_ZNSt12_Vector_baseIN4tama4ToneESaIS1_EE19_M_get_Tp_allocatorEv>
 80045a6:	4603      	mov	r3, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 80045a8:	4622      	mov	r2, r4
 80045aa:	4631      	mov	r1, r6
 80045ac:	4628      	mov	r0, r5
 80045ae:	f000 f9d4 	bl	800495a <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKN4tama4ToneESt6vectorIS3_SaIS3_EEEEPS3_S3_ET0_T_SC_SB_RSaIT1_E>
 80045b2:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	605a      	str	r2, [r3, #4]
      }
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	4618      	mov	r0, r3
 80045bc:	3714      	adds	r7, #20
 80045be:	46bd      	mov	sp, r7
 80045c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080045c4 <_ZNSt5arrayIN4tama6SpriteELj9EE2atEj>:
      constexpr const_reference
      operator[](size_type __n) const noexcept
      { return _AT_Type::_S_ref(_M_elems, __n); }

      _GLIBCXX17_CONSTEXPR reference
      at(size_type __n)
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b082      	sub	sp, #8
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	6039      	str	r1, [r7, #0]
      {
	if (__n >= _Nm)
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	2b08      	cmp	r3, #8
 80045d2:	d904      	bls.n	80045de <_ZNSt5arrayIN4tama6SpriteELj9EE2atEj+0x1a>
	  std::__throw_out_of_range_fmt(__N("array::at: __n (which is %zu) "
 80045d4:	2209      	movs	r2, #9
 80045d6:	6839      	ldr	r1, [r7, #0]
 80045d8:	4806      	ldr	r0, [pc, #24]	; (80045f4 <_ZNSt5arrayIN4tama6SpriteELj9EE2atEj+0x30>)
 80045da:	f012 ffa3 	bl	8017524 <_ZSt24__throw_out_of_range_fmtPKcz>
					    ">= _Nm (which is %zu)"),
					__n, _Nm);
	return _AT_Type::_S_ref(_M_elems, __n);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6839      	ldr	r1, [r7, #0]
 80045e2:	4618      	mov	r0, r3
 80045e4:	f000 f9ca 	bl	800497c <_ZNSt14__array_traitsIN4tama6SpriteELj9EE6_S_refERA9_KS1_j>
 80045e8:	4603      	mov	r3, r0
      }
 80045ea:	4618      	mov	r0, r3
 80045ec:	3708      	adds	r7, #8
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	bf00      	nop
 80045f4:	08017d30 	.word	0x08017d30

080045f8 <_ZNSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EED1Ev>:
	       is_convertible<_Up*, _Tp*>, is_same<_Dp, default_delete<_Tp>>>>
	unique_ptr(auto_ptr<_Up>&& __u) noexcept;
#endif

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b084      	sub	sp, #16
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
      {
	auto& __ptr = _M_t._M_ptr();
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	4618      	mov	r0, r3
 8004604:	f000 f9c9 	bl	800499a <_ZNSt15__uniq_ptr_implIN4tama13TextureLoaderESt14default_deleteIS1_EE6_M_ptrEv>
 8004608:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d009      	beq.n	8004626 <_ZNSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EED1Ev+0x2e>
	  get_deleter()(__ptr);
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f000 f9ce 	bl	80049b4 <_ZNSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EE11get_deleterEv>
 8004618:	4602      	mov	r2, r0
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4619      	mov	r1, r3
 8004620:	4610      	mov	r0, r2
 8004622:	f000 f9d4 	bl	80049ce <_ZNKSt14default_deleteIN4tama13TextureLoaderEEclEPS1_>
	__ptr = pointer();
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2200      	movs	r2, #0
 800462a:	601a      	str	r2, [r3, #0]
      }
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	4618      	mov	r0, r3
 8004630:	3710      	adds	r7, #16
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}

08004636 <_ZNKSt19__shared_ptr_accessIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 8004636:	b580      	push	{r7, lr}
 8004638:	b082      	sub	sp, #8
 800463a:	af00      	add	r7, sp, #0
 800463c:	6078      	str	r0, [r7, #4]
	return _M_get();
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f000 f9d2 	bl	80049e8 <_ZNKSt19__shared_ptr_accessIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 8004644:	4603      	mov	r3, r0
      }
 8004646:	4618      	mov	r0, r3
 8004648:	3708      	adds	r7, #8
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}

0800464e <_ZNKSt19__shared_ptr_accessIN4tama13TextureLoaderELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 800464e:	b580      	push	{r7, lr}
 8004650:	b082      	sub	sp, #8
 8004652:	af00      	add	r7, sp, #0
 8004654:	6078      	str	r0, [r7, #4]
	return _M_get();
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f000 f9d2 	bl	8004a00 <_ZNKSt19__shared_ptr_accessIN4tama13TextureLoaderELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 800465c:	4603      	mov	r3, r0
      }
 800465e:	4618      	mov	r0, r3
 8004660:	3708      	adds	r7, #8
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}

08004666 <_ZSt7forwardISt10shared_ptrIN4tama7TextureEEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004666:	b480      	push	{r7}
 8004668:	b083      	sub	sp, #12
 800466a:	af00      	add	r7, sp, #0
 800466c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	4618      	mov	r0, r3
 8004672:	370c      	adds	r7, #12
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr

0800467c <_ZSt7forwardIN4tama5Vec2dEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800467c:	b480      	push	{r7}
 800467e:	b083      	sub	sp, #12
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	4618      	mov	r0, r3
 8004688:	370c      	adds	r7, #12
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr

08004692 <_ZSt11make_sharedIN4tama6SpriteEJSt10shared_ptrINS0_7TextureEENS0_5Vec2dEEES2_IT_EDpOT0_>:
    make_shared(_Args&&... __args)
 8004692:	b590      	push	{r4, r7, lr}
 8004694:	b087      	sub	sp, #28
 8004696:	af00      	add	r7, sp, #0
 8004698:	60f8      	str	r0, [r7, #12]
 800469a:	60b9      	str	r1, [r7, #8]
 800469c:	607a      	str	r2, [r7, #4]
				       std::forward<_Args>(__args)...);
 800469e:	f107 0314 	add.w	r3, r7, #20
 80046a2:	4618      	mov	r0, r3
 80046a4:	f000 f9b8 	bl	8004a18 <_ZNSaIN4tama6SpriteEEC1Ev>
 80046a8:	68b8      	ldr	r0, [r7, #8]
 80046aa:	f7ff ffdc 	bl	8004666 <_ZSt7forwardISt10shared_ptrIN4tama7TextureEEEOT_RNSt16remove_referenceIS4_E4typeE>
 80046ae:	4604      	mov	r4, r0
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f7ff ffe3 	bl	800467c <_ZSt7forwardIN4tama5Vec2dEEOT_RNSt16remove_referenceIS2_E4typeE>
 80046b6:	4603      	mov	r3, r0
 80046b8:	68f8      	ldr	r0, [r7, #12]
 80046ba:	f107 0114 	add.w	r1, r7, #20
 80046be:	4622      	mov	r2, r4
 80046c0:	f000 f9c2 	bl	8004a48 <_ZSt15allocate_sharedIN4tama6SpriteESaIS1_EJSt10shared_ptrINS0_7TextureEENS0_5Vec2dEEES3_IT_ERKT0_DpOT1_>
 80046c4:	f107 0314 	add.w	r3, r7, #20
 80046c8:	4618      	mov	r0, r3
 80046ca:	f000 f9b1 	bl	8004a30 <_ZNSaIN4tama6SpriteEED1Ev>
    }
 80046ce:	68f8      	ldr	r0, [r7, #12]
 80046d0:	371c      	adds	r7, #28
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd90      	pop	{r4, r7, pc}

080046d6 <_ZSt4moveIRSt10shared_ptrIN4tama6SpriteEEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 80046d6:	b480      	push	{r7}
 80046d8:	b083      	sub	sp, #12
 80046da:	af00      	add	r7, sp, #0
 80046dc:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	4618      	mov	r0, r3
 80046e2:	370c      	adds	r7, #12
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr

080046ec <_ZNSt10shared_ptrIN4tama8DrawableEEC1INS0_6SpriteEvEEOS_IT_E>:
	shared_ptr(shared_ptr<_Yp>&& __r) noexcept
 80046ec:	b590      	push	{r4, r7, lr}
 80046ee:	b083      	sub	sp, #12
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(std::move(__r)) { }
 80046f6:	687c      	ldr	r4, [r7, #4]
 80046f8:	6838      	ldr	r0, [r7, #0]
 80046fa:	f7ff ffec 	bl	80046d6 <_ZSt4moveIRSt10shared_ptrIN4tama6SpriteEEEONSt16remove_referenceIT_E4typeEOS6_>
 80046fe:	4603      	mov	r3, r0
 8004700:	4619      	mov	r1, r3
 8004702:	4620      	mov	r0, r4
 8004704:	f000 f9ba 	bl	8004a7c <_ZNSt12__shared_ptrIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0EEC1INS0_6SpriteEvEEOS_IT_LS3_0EE>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	4618      	mov	r0, r3
 800470c:	370c      	adds	r7, #12
 800470e:	46bd      	mov	sp, r7
 8004710:	bd90      	pop	{r4, r7, pc}

08004712 <_ZNSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEaSEOS4_>:
       * @param __u  The object to transfer ownership from.
       *
       * Invokes the deleter first if this object owns a pointer.
       */
      unique_ptr&
      operator=(unique_ptr&& __u) noexcept
 8004712:	b580      	push	{r7, lr}
 8004714:	b082      	sub	sp, #8
 8004716:	af00      	add	r7, sp, #0
 8004718:	6078      	str	r0, [r7, #4]
 800471a:	6039      	str	r1, [r7, #0]
      {
	reset(__u.release());
 800471c:	6838      	ldr	r0, [r7, #0]
 800471e:	f000 f9ea 	bl	8004af6 <_ZNSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EE7releaseEv>
 8004722:	4603      	mov	r3, r0
 8004724:	4619      	mov	r1, r3
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f000 f9c6 	bl	8004ab8 <_ZNSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EE5resetEPS1_>
	get_deleter() = std::forward<deleter_type>(__u.get_deleter());
 800472c:	6838      	ldr	r0, [r7, #0]
 800472e:	f000 f941 	bl	80049b4 <_ZNSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EE11get_deleterEv>
 8004732:	4603      	mov	r3, r0
 8004734:	4618      	mov	r0, r3
 8004736:	f000 f9f2 	bl	8004b1e <_ZSt7forwardISt14default_deleteIN4tama13TextureLoaderEEEOT_RNSt16remove_referenceIS4_E4typeE>
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 f93a 	bl	80049b4 <_ZNSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EE11get_deleterEv>
	return *this;
 8004740:	687b      	ldr	r3, [r7, #4]
      }
 8004742:	4618      	mov	r0, r3
 8004744:	3708      	adds	r7, #8
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}

0800474a <_ZSt4moveIRSt10shared_ptrIN4tama14ChangeObserverEEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 800474a:	b480      	push	{r7}
 800474c:	b083      	sub	sp, #12
 800474e:	af00      	add	r7, sp, #0
 8004750:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4618      	mov	r0, r3
 8004756:	370c      	adds	r7, #12
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr

08004760 <_ZNSt10shared_ptrIN4tama14ChangeObserverEEaSEOS2_>:
      operator=(shared_ptr&& __r) noexcept
 8004760:	b590      	push	{r4, r7, lr}
 8004762:	b083      	sub	sp, #12
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	6039      	str	r1, [r7, #0]
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
 800476a:	687c      	ldr	r4, [r7, #4]
 800476c:	6838      	ldr	r0, [r7, #0]
 800476e:	f7ff ffec 	bl	800474a <_ZSt4moveIRSt10shared_ptrIN4tama14ChangeObserverEEEONSt16remove_referenceIT_E4typeEOS6_>
 8004772:	4603      	mov	r3, r0
 8004774:	4619      	mov	r1, r3
 8004776:	4620      	mov	r0, r4
 8004778:	f000 f9e7 	bl	8004b4a <_ZNSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_>
	return *this;
 800477c:	687b      	ldr	r3, [r7, #4]
      }
 800477e:	4618      	mov	r0, r3
 8004780:	370c      	adds	r7, #12
 8004782:	46bd      	mov	sp, r7
 8004784:	bd90      	pop	{r4, r7, pc}

08004786 <_ZSt4moveIRSt10shared_ptrIN4tama7TextureEEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 8004786:	b480      	push	{r7}
 8004788:	b083      	sub	sp, #12
 800478a:	af00      	add	r7, sp, #0
 800478c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4618      	mov	r0, r3
 8004792:	370c      	adds	r7, #12
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr

0800479c <_ZNSt10shared_ptrIN4tama7TextureEEaSEOS2_>:
      operator=(shared_ptr&& __r) noexcept
 800479c:	b590      	push	{r4, r7, lr}
 800479e:	b083      	sub	sp, #12
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	6039      	str	r1, [r7, #0]
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
 80047a6:	687c      	ldr	r4, [r7, #4]
 80047a8:	6838      	ldr	r0, [r7, #0]
 80047aa:	f7ff ffec 	bl	8004786 <_ZSt4moveIRSt10shared_ptrIN4tama7TextureEEEONSt16remove_referenceIT_E4typeEOS6_>
 80047ae:	4603      	mov	r3, r0
 80047b0:	4619      	mov	r1, r3
 80047b2:	4620      	mov	r0, r4
 80047b4:	f000 f9f3 	bl	8004b9e <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_>
	return *this;
 80047b8:	687b      	ldr	r3, [r7, #4]
      }
 80047ba:	4618      	mov	r0, r3
 80047bc:	370c      	adds	r7, #12
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd90      	pop	{r4, r7, pc}

080047c2 <_ZNSt10shared_ptrIN4tama4TextEEC1IS1_vEEPT_>:
	shared_ptr(_Yp* __p) : __shared_ptr<_Tp>(__p) { }
 80047c2:	b580      	push	{r7, lr}
 80047c4:	b082      	sub	sp, #8
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	6078      	str	r0, [r7, #4]
 80047ca:	6039      	str	r1, [r7, #0]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6839      	ldr	r1, [r7, #0]
 80047d0:	4618      	mov	r0, r3
 80047d2:	f000 fa03 	bl	8004bdc <_ZNSt12__shared_ptrIN4tama4TextELN9__gnu_cxx12_Lock_policyE0EEC1IS1_vEEPT_>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	4618      	mov	r0, r3
 80047da:	3708      	adds	r7, #8
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}

080047e0 <_ZSt4moveIRSt10shared_ptrIN4tama4TextEEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 80047e0:	b480      	push	{r7}
 80047e2:	b083      	sub	sp, #12
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	4618      	mov	r0, r3
 80047ec:	370c      	adds	r7, #12
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr

080047f6 <_ZNSt10shared_ptrIN4tama8DrawableEEC1INS0_4TextEvEEOS_IT_E>:
	shared_ptr(shared_ptr<_Yp>&& __r) noexcept
 80047f6:	b590      	push	{r4, r7, lr}
 80047f8:	b083      	sub	sp, #12
 80047fa:	af00      	add	r7, sp, #0
 80047fc:	6078      	str	r0, [r7, #4]
 80047fe:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(std::move(__r)) { }
 8004800:	687c      	ldr	r4, [r7, #4]
 8004802:	6838      	ldr	r0, [r7, #0]
 8004804:	f7ff ffec 	bl	80047e0 <_ZSt4moveIRSt10shared_ptrIN4tama4TextEEEONSt16remove_referenceIT_E4typeEOS6_>
 8004808:	4603      	mov	r3, r0
 800480a:	4619      	mov	r1, r3
 800480c:	4620      	mov	r0, r4
 800480e:	f000 f9fd 	bl	8004c0c <_ZNSt12__shared_ptrIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0EEC1INS0_4TextEvEEOS_IT_LS3_0EE>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	4618      	mov	r0, r3
 8004816:	370c      	adds	r7, #12
 8004818:	46bd      	mov	sp, r7
 800481a:	bd90      	pop	{r4, r7, pc}

0800481c <_ZNSt10shared_ptrIN4tama6SpriteEEC1IS1_vEEPT_>:
	shared_ptr(_Yp* __p) : __shared_ptr<_Tp>(__p) { }
 800481c:	b580      	push	{r7, lr}
 800481e:	b082      	sub	sp, #8
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	6039      	str	r1, [r7, #0]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6839      	ldr	r1, [r7, #0]
 800482a:	4618      	mov	r0, r3
 800482c:	f000 fa0c 	bl	8004c48 <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EEC1IS1_vEEPT_>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	4618      	mov	r0, r3
 8004834:	3708      	adds	r7, #8
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}

0800483a <_ZSt7forwardIN4tama4ToneEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800483a:	b480      	push	{r7}
 800483c:	b083      	sub	sp, #12
 800483e:	af00      	add	r7, sp, #0
 8004840:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4618      	mov	r0, r3
 8004846:	370c      	adds	r7, #12
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr

08004850 <_ZNSt6vectorIN4tama4ToneESaIS1_EE12emplace_backIJS1_EEEvDpOT_>:
      vector<_Tp, _Alloc>::
 8004850:	b5b0      	push	{r4, r5, r7, lr}
 8004852:	b082      	sub	sp, #8
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	685a      	ldr	r2, [r3, #4]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	429a      	cmp	r2, r3
 8004864:	d012      	beq.n	800488c <_ZNSt6vectorIN4tama4ToneESaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x3c>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8004866:	687c      	ldr	r4, [r7, #4]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	685d      	ldr	r5, [r3, #4]
 800486c:	6838      	ldr	r0, [r7, #0]
 800486e:	f7ff ffe4 	bl	800483a <_ZSt7forwardIN4tama4ToneEEOT_RNSt16remove_referenceIS2_E4typeE>
 8004872:	4603      	mov	r3, r0
 8004874:	461a      	mov	r2, r3
 8004876:	4629      	mov	r1, r5
 8004878:	4620      	mov	r0, r4
 800487a:	f000 f9fd 	bl	8004c78 <_ZNSt16allocator_traitsISaIN4tama4ToneEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	f103 0208 	add.w	r2, r3, #8
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	605a      	str	r2, [r3, #4]
      }
 800488a:	e00c      	b.n	80048a6 <_ZNSt6vectorIN4tama4ToneESaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x56>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	f000 fa06 	bl	8004c9e <_ZNSt6vectorIN4tama4ToneESaIS1_EE3endEv>
 8004892:	4604      	mov	r4, r0
 8004894:	6838      	ldr	r0, [r7, #0]
 8004896:	f7ff ffd0 	bl	800483a <_ZSt7forwardIN4tama4ToneEEOT_RNSt16remove_referenceIS2_E4typeE>
 800489a:	4603      	mov	r3, r0
 800489c:	461a      	mov	r2, r3
 800489e:	4621      	mov	r1, r4
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f000 fa0d 	bl	8004cc0 <_ZNSt6vectorIN4tama4ToneESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 80048a6:	bf00      	nop
 80048a8:	3708      	adds	r7, #8
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bdb0      	pop	{r4, r5, r7, pc}

080048ae <_ZNKSt19__shared_ptr_accessIN4tama11SoundPlayerELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 80048ae:	b580      	push	{r7, lr}
 80048b0:	b082      	sub	sp, #8
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f000 fa8e 	bl	8004dd8 <_ZNKSt12__shared_ptrIN4tama11SoundPlayerELN9__gnu_cxx12_Lock_policyE0EE3getEv>
 80048bc:	4603      	mov	r3, r0
 80048be:	4618      	mov	r0, r3
 80048c0:	3708      	adds	r7, #8
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}

080048c6 <_ZN9__gnu_cxx14__alloc_traitsISaIN4tama4ToneEEE17_S_select_on_copyERKS3_>:
    template<typename _Ptr>
      static typename std::enable_if<__is_custom_pointer<_Ptr>::value>::type
      destroy(_Alloc& __a, _Ptr __p)
      { _Base_type::destroy(__a, std::addressof(*__p)); }

    static _Alloc _S_select_on_copy(const _Alloc& __a)
 80048c6:	b580      	push	{r7, lr}
 80048c8:	b082      	sub	sp, #8
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	6078      	str	r0, [r7, #4]
 80048ce:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6839      	ldr	r1, [r7, #0]
 80048d4:	4618      	mov	r0, r3
 80048d6:	f000 fa8b 	bl	8004df0 <_ZNSt16allocator_traitsISaIN4tama4ToneEEE37select_on_container_copy_constructionERKS2_>
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	3708      	adds	r7, #8
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}

080048e2 <_ZNSt12_Vector_baseIN4tama4ToneESaIS1_EEC1EjRKS2_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 80048e2:	b580      	push	{r7, lr}
 80048e4:	b084      	sub	sp, #16
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	60f8      	str	r0, [r7, #12]
 80048ea:	60b9      	str	r1, [r7, #8]
 80048ec:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	6879      	ldr	r1, [r7, #4]
 80048f2:	4618      	mov	r0, r3
 80048f4:	f7fe feba 	bl	800366c <_ZNSt12_Vector_baseIN4tama4ToneESaIS1_EE12_Vector_implC1ERKS2_>
      { _M_create_storage(__n); }
 80048f8:	68b9      	ldr	r1, [r7, #8]
 80048fa:	68f8      	ldr	r0, [r7, #12]
 80048fc:	f000 fa85 	bl	8004e0a <_ZNSt12_Vector_baseIN4tama4ToneESaIS1_EE17_M_create_storageEj>
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	4618      	mov	r0, r3
 8004904:	3710      	adds	r7, #16
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}

0800490a <_ZNKSt6vectorIN4tama4ToneESaIS1_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 800490a:	b580      	push	{r7, lr}
 800490c:	b084      	sub	sp, #16
 800490e:	af00      	add	r7, sp, #0
 8004910:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	60fb      	str	r3, [r7, #12]
 8004918:	f107 020c 	add.w	r2, r7, #12
 800491c:	f107 0308 	add.w	r3, r7, #8
 8004920:	4611      	mov	r1, r2
 8004922:	4618      	mov	r0, r3
 8004924:	f000 fa8c 	bl	8004e40 <_ZN9__gnu_cxx17__normal_iteratorIPKN4tama4ToneESt6vectorIS2_SaIS2_EEEC1ERKS4_>
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	4618      	mov	r0, r3
 800492c:	3710      	adds	r7, #16
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}

08004932 <_ZNKSt6vectorIN4tama4ToneESaIS1_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8004932:	b580      	push	{r7, lr}
 8004934:	b084      	sub	sp, #16
 8004936:	af00      	add	r7, sp, #0
 8004938:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	60fb      	str	r3, [r7, #12]
 8004940:	f107 020c 	add.w	r2, r7, #12
 8004944:	f107 0308 	add.w	r3, r7, #8
 8004948:	4611      	mov	r1, r2
 800494a:	4618      	mov	r0, r3
 800494c:	f000 fa78 	bl	8004e40 <_ZN9__gnu_cxx17__normal_iteratorIPKN4tama4ToneESt6vectorIS2_SaIS2_EEEC1ERKS4_>
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	4618      	mov	r0, r3
 8004954:	3710      	adds	r7, #16
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}

0800495a <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKN4tama4ToneESt6vectorIS3_SaIS3_EEEEPS3_S3_ET0_T_SC_SB_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800495a:	b580      	push	{r7, lr}
 800495c:	b084      	sub	sp, #16
 800495e:	af00      	add	r7, sp, #0
 8004960:	60f8      	str	r0, [r7, #12]
 8004962:	60b9      	str	r1, [r7, #8]
 8004964:	607a      	str	r2, [r7, #4]
 8004966:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	68b9      	ldr	r1, [r7, #8]
 800496c:	68f8      	ldr	r0, [r7, #12]
 800496e:	f000 fa77 	bl	8004e60 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKN4tama4ToneESt6vectorIS3_SaIS3_EEEEPS3_ET0_T_SC_SB_>
 8004972:	4603      	mov	r3, r0
 8004974:	4618      	mov	r0, r3
 8004976:	3710      	adds	r7, #16
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}

0800497c <_ZNSt14__array_traitsIN4tama6SpriteELj9EE6_S_refERA9_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800497c:	b480      	push	{r7}
 800497e:	b083      	sub	sp, #12
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
 8004984:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	015b      	lsls	r3, r3, #5
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	4413      	add	r3, r2
 800498e:	4618      	mov	r0, r3
 8004990:	370c      	adds	r7, #12
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr

0800499a <_ZNSt15__uniq_ptr_implIN4tama13TextureLoaderESt14default_deleteIS1_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 800499a:	b580      	push	{r7, lr}
 800499c:	b082      	sub	sp, #8
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	4618      	mov	r0, r3
 80049a6:	f000 fa6d 	bl	8004e84 <_ZSt3getILj0EJPN4tama13TextureLoaderESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>
 80049aa:	4603      	mov	r3, r0
 80049ac:	4618      	mov	r0, r3
 80049ae:	3708      	adds	r7, #8
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}

080049b4 <_ZNSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EE11get_deleterEv>:
      get() const noexcept
      { return _M_t._M_ptr(); }

      /// Return a reference to the stored deleter.
      deleter_type&
      get_deleter() noexcept
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b082      	sub	sp, #8
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	4618      	mov	r0, r3
 80049c0:	f000 fa6d 	bl	8004e9e <_ZNSt15__uniq_ptr_implIN4tama13TextureLoaderESt14default_deleteIS1_EE10_M_deleterEv>
 80049c4:	4603      	mov	r3, r0
 80049c6:	4618      	mov	r0, r3
 80049c8:	3708      	adds	r7, #8
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}

080049ce <_ZNKSt14default_deleteIN4tama13TextureLoaderEEclEPS1_>:
      operator()(_Tp* __ptr) const
 80049ce:	b580      	push	{r7, lr}
 80049d0:	b082      	sub	sp, #8
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	6078      	str	r0, [r7, #4]
 80049d6:	6039      	str	r1, [r7, #0]
	delete __ptr;
 80049d8:	2104      	movs	r1, #4
 80049da:	6838      	ldr	r0, [r7, #0]
 80049dc:	f012 fd69 	bl	80174b2 <_ZdlPvj>
      }
 80049e0:	bf00      	nop
 80049e2:	3708      	adds	r7, #8
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}

080049e8 <_ZNKSt19__shared_ptr_accessIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b082      	sub	sp, #8
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f000 fa61 	bl	8004eb8 <_ZNKSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE3getEv>
 80049f6:	4603      	mov	r3, r0
 80049f8:	4618      	mov	r0, r3
 80049fa:	3708      	adds	r7, #8
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}

08004a00 <_ZNKSt19__shared_ptr_accessIN4tama13TextureLoaderELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b082      	sub	sp, #8
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f000 fa61 	bl	8004ed0 <_ZNKSt12__shared_ptrIN4tama13TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE3getEv>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	4618      	mov	r0, r3
 8004a12:	3708      	adds	r7, #8
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}

08004a18 <_ZNSaIN4tama6SpriteEEC1Ev>:
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b082      	sub	sp, #8
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f000 fa61 	bl	8004ee8 <_ZN9__gnu_cxx13new_allocatorIN4tama6SpriteEEC1Ev>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3708      	adds	r7, #8
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}

08004a30 <_ZNSaIN4tama6SpriteEED1Ev>:
      ~allocator() throw() { }
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b082      	sub	sp, #8
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	f000 fa60 	bl	8004efe <_ZN9__gnu_cxx13new_allocatorIN4tama6SpriteEED1Ev>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	4618      	mov	r0, r3
 8004a42:	3708      	adds	r7, #8
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}

08004a48 <_ZSt15allocate_sharedIN4tama6SpriteESaIS1_EJSt10shared_ptrINS0_7TextureEENS0_5Vec2dEEES3_IT_ERKT0_DpOT1_>:
    allocate_shared(const _Alloc& __a, _Args&&... __args)
 8004a48:	b5b0      	push	{r4, r5, r7, lr}
 8004a4a:	b088      	sub	sp, #32
 8004a4c:	af02      	add	r7, sp, #8
 8004a4e:	60f8      	str	r0, [r7, #12]
 8004a50:	60b9      	str	r1, [r7, #8]
 8004a52:	607a      	str	r2, [r7, #4]
 8004a54:	603b      	str	r3, [r7, #0]
			     std::forward<_Args>(__args)...);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f7ff fe05 	bl	8004666 <_ZSt7forwardISt10shared_ptrIN4tama7TextureEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8004a5c:	4604      	mov	r4, r0
 8004a5e:	6838      	ldr	r0, [r7, #0]
 8004a60:	f7ff fe0c 	bl	800467c <_ZSt7forwardIN4tama5Vec2dEEOT_RNSt16remove_referenceIS2_E4typeE>
 8004a64:	4603      	mov	r3, r0
 8004a66:	9300      	str	r3, [sp, #0]
 8004a68:	4623      	mov	r3, r4
 8004a6a:	68ba      	ldr	r2, [r7, #8]
 8004a6c:	4629      	mov	r1, r5
 8004a6e:	68f8      	ldr	r0, [r7, #12]
 8004a70:	f000 fa50 	bl	8004f14 <_ZNSt10shared_ptrIN4tama6SpriteEEC1ISaIS1_EJS_INS0_7TextureEENS0_5Vec2dEEEESt19_Sp_make_shared_tagRKT_DpOT0_>
    }
 8004a74:	68f8      	ldr	r0, [r7, #12]
 8004a76:	3718      	adds	r7, #24
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bdb0      	pop	{r4, r5, r7, pc}

08004a7c <_ZNSt12__shared_ptrIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0EEC1INS0_6SpriteEvEEOS_IT_LS3_0EE>:
	__shared_ptr(__shared_ptr<_Yp, _Lp>&& __r) noexcept
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b082      	sub	sp, #8
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r._M_ptr), _M_refcount()
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	601a      	str	r2, [r3, #0]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	3304      	adds	r3, #4
 8004a92:	4618      	mov	r0, r3
 8004a94:	f7fc f9f1 	bl	8000e7a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _M_refcount._M_swap(__r._M_refcount);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	1d1a      	adds	r2, r3, #4
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	3304      	adds	r3, #4
 8004aa0:	4619      	mov	r1, r3
 8004aa2:	4610      	mov	r0, r2
 8004aa4:	f7fc f9f7 	bl	8000e96 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  __r._M_ptr = 0;
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	601a      	str	r2, [r3, #0]
	}
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3708      	adds	r7, #8
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}

08004ab8 <_ZNSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EE5resetEPS1_>:
       * @param __p  The new pointer to store.
       *
       * The deleter will be invoked if a pointer is already owned.
       */
      void
      reset(pointer __p = pointer()) noexcept
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b082      	sub	sp, #8
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	6039      	str	r1, [r7, #0]
      {
	using std::swap;
	swap(_M_t._M_ptr(), __p);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f7ff ff68 	bl	800499a <_ZNSt15__uniq_ptr_implIN4tama13TextureLoaderESt14default_deleteIS1_EE6_M_ptrEv>
 8004aca:	4602      	mov	r2, r0
 8004acc:	463b      	mov	r3, r7
 8004ace:	4619      	mov	r1, r3
 8004ad0:	4610      	mov	r0, r2
 8004ad2:	f000 fa46 	bl	8004f62 <_ZSt4swapIPN4tama13TextureLoaderEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS7_ESt18is_move_assignableIS7_EEE5valueEvE4typeERS7_SH_>
	if (__p != pointer())
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d008      	beq.n	8004aee <_ZNSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EE5resetEPS1_+0x36>
	  get_deleter()(__p);
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f7ff ff69 	bl	80049b4 <_ZNSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EE11get_deleterEv>
 8004ae2:	4602      	mov	r2, r0
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	4619      	mov	r1, r3
 8004ae8:	4610      	mov	r0, r2
 8004aea:	f7ff ff70 	bl	80049ce <_ZNKSt14default_deleteIN4tama13TextureLoaderEEclEPS1_>
      }
 8004aee:	bf00      	nop
 8004af0:	3708      	adds	r7, #8
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}

08004af6 <_ZNSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EE7releaseEv>:
      release() noexcept
 8004af6:	b580      	push	{r7, lr}
 8004af8:	b084      	sub	sp, #16
 8004afa:	af00      	add	r7, sp, #0
 8004afc:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f000 fa4e 	bl	8004fa0 <_ZNKSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EE3getEv>
 8004b04:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f7ff ff46 	bl	800499a <_ZNSt15__uniq_ptr_implIN4tama13TextureLoaderESt14default_deleteIS1_EE6_M_ptrEv>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	2300      	movs	r3, #0
 8004b12:	6013      	str	r3, [r2, #0]
	return __p;
 8004b14:	68fb      	ldr	r3, [r7, #12]
      }
 8004b16:	4618      	mov	r0, r3
 8004b18:	3710      	adds	r7, #16
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}

08004b1e <_ZSt7forwardISt14default_deleteIN4tama13TextureLoaderEEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004b1e:	b480      	push	{r7}
 8004b20:	b083      	sub	sp, #12
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	4618      	mov	r0, r3
 8004b2a:	370c      	adds	r7, #12
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr

08004b34 <_ZSt4moveIRSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 8004b34:	b480      	push	{r7}
 8004b36:	b083      	sub	sp, #12
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	4618      	mov	r0, r3
 8004b40:	370c      	adds	r7, #12
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr

08004b4a <_ZNSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_>:
      operator=(__shared_ptr&& __r) noexcept
 8004b4a:	b580      	push	{r7, lr}
 8004b4c:	b084      	sub	sp, #16
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	6078      	str	r0, [r7, #4]
 8004b52:	6039      	str	r1, [r7, #0]
	__shared_ptr(std::move(__r)).swap(*this);
 8004b54:	6838      	ldr	r0, [r7, #0]
 8004b56:	f7ff ffed 	bl	8004b34 <_ZSt4moveIRSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EEEONSt16remove_referenceIT_E4typeEOS8_>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	f107 0308 	add.w	r3, r7, #8
 8004b60:	4611      	mov	r1, r2
 8004b62:	4618      	mov	r0, r3
 8004b64:	f000 fa29 	bl	8004fba <_ZNSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EEC1EOS4_>
 8004b68:	f107 0308 	add.w	r3, r7, #8
 8004b6c:	6879      	ldr	r1, [r7, #4]
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f000 fa41 	bl	8004ff6 <_ZNSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EE4swapERS4_>
 8004b74:	f107 0308 	add.w	r3, r7, #8
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f7fd ff5e 	bl	8002a3a <_ZNSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EED1Ev>
	return *this;
 8004b7e:	687b      	ldr	r3, [r7, #4]
      }
 8004b80:	4618      	mov	r0, r3
 8004b82:	3710      	adds	r7, #16
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}

08004b88 <_ZSt4moveIRSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 8004b88:	b480      	push	{r7}
 8004b8a:	b083      	sub	sp, #12
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	4618      	mov	r0, r3
 8004b94:	370c      	adds	r7, #12
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr

08004b9e <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_>:
      operator=(__shared_ptr&& __r) noexcept
 8004b9e:	b580      	push	{r7, lr}
 8004ba0:	b084      	sub	sp, #16
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	6078      	str	r0, [r7, #4]
 8004ba6:	6039      	str	r1, [r7, #0]
	__shared_ptr(std::move(__r)).swap(*this);
 8004ba8:	6838      	ldr	r0, [r7, #0]
 8004baa:	f7ff ffed 	bl	8004b88 <_ZSt4moveIRSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EEEONSt16remove_referenceIT_E4typeEOS8_>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	f107 0308 	add.w	r3, r7, #8
 8004bb4:	4611      	mov	r1, r2
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f000 fa34 	bl	8005024 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EEC1EOS4_>
 8004bbc:	f107 0308 	add.w	r3, r7, #8
 8004bc0:	6879      	ldr	r1, [r7, #4]
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f000 fa4c 	bl	8005060 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE4swapERS4_>
 8004bc8:	f107 0308 	add.w	r3, r7, #8
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f7fe fe41 	bl	8003854 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EED1Ev>
	return *this;
 8004bd2:	687b      	ldr	r3, [r7, #4]
      }
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3710      	adds	r7, #16
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}

08004bdc <_ZNSt12__shared_ptrIN4tama4TextELN9__gnu_cxx12_Lock_policyE0EEC1IS1_vEEPT_>:
	__shared_ptr(_Yp* __p)
 8004bdc:	b590      	push	{r4, r7, lr}
 8004bde:	b085      	sub	sp, #20
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	6039      	str	r1, [r7, #0]
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	683a      	ldr	r2, [r7, #0]
 8004bea:	601a      	str	r2, [r3, #0]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	3304      	adds	r3, #4
 8004bf0:	4622      	mov	r2, r4
 8004bf2:	6839      	ldr	r1, [r7, #0]
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f000 fa4a 	bl	800508e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama4TextEEET_St17integral_constantIbLb0EE>
	  _M_enable_shared_from_this_with(__p);
 8004bfa:	6839      	ldr	r1, [r7, #0]
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f000 fa55 	bl	80050ac <_ZNSt12__shared_ptrIN4tama4TextELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	}
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	4618      	mov	r0, r3
 8004c06:	3714      	adds	r7, #20
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd90      	pop	{r4, r7, pc}

08004c0c <_ZNSt12__shared_ptrIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0EEC1INS0_4TextEvEEOS_IT_LS3_0EE>:
	__shared_ptr(__shared_ptr<_Yp, _Lp>&& __r) noexcept
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b082      	sub	sp, #8
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r._M_ptr), _M_refcount()
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	601a      	str	r2, [r3, #0]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	3304      	adds	r3, #4
 8004c22:	4618      	mov	r0, r3
 8004c24:	f7fc f929 	bl	8000e7a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _M_refcount._M_swap(__r._M_refcount);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	1d1a      	adds	r2, r3, #4
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	3304      	adds	r3, #4
 8004c30:	4619      	mov	r1, r3
 8004c32:	4610      	mov	r0, r2
 8004c34:	f7fc f92f 	bl	8000e96 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  __r._M_ptr = 0;
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	601a      	str	r2, [r3, #0]
	}
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4618      	mov	r0, r3
 8004c42:	3708      	adds	r7, #8
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EEC1IS1_vEEPT_>:
	__shared_ptr(_Yp* __p)
 8004c48:	b590      	push	{r4, r7, lr}
 8004c4a:	b085      	sub	sp, #20
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	6039      	str	r1, [r7, #0]
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	683a      	ldr	r2, [r7, #0]
 8004c56:	601a      	str	r2, [r3, #0]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	3304      	adds	r3, #4
 8004c5c:	4622      	mov	r2, r4
 8004c5e:	6839      	ldr	r1, [r7, #0]
 8004c60:	4618      	mov	r0, r3
 8004c62:	f000 fa2e 	bl	80050c2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama6SpriteEEET_St17integral_constantIbLb0EE>
	  _M_enable_shared_from_this_with(__p);
 8004c66:	6839      	ldr	r1, [r7, #0]
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f000 fa39 	bl	80050e0 <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	}
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	4618      	mov	r0, r3
 8004c72:	3714      	adds	r7, #20
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd90      	pop	{r4, r7, pc}

08004c78 <_ZNSt16allocator_traitsISaIN4tama4ToneEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b084      	sub	sp, #16
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	60f8      	str	r0, [r7, #12]
 8004c80:	60b9      	str	r1, [r7, #8]
 8004c82:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f7ff fdd8 	bl	800483a <_ZSt7forwardIN4tama4ToneEEOT_RNSt16remove_referenceIS2_E4typeE>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	68b9      	ldr	r1, [r7, #8]
 8004c90:	68f8      	ldr	r0, [r7, #12]
 8004c92:	f000 fa30 	bl	80050f6 <_ZN9__gnu_cxx13new_allocatorIN4tama4ToneEE9constructIS2_JS2_EEEvPT_DpOT0_>
 8004c96:	bf00      	nop
 8004c98:	3710      	adds	r7, #16
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}

08004c9e <_ZNSt6vectorIN4tama4ToneESaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8004c9e:	b580      	push	{r7, lr}
 8004ca0:	b084      	sub	sp, #16
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	1d1a      	adds	r2, r3, #4
 8004caa:	f107 030c 	add.w	r3, r7, #12
 8004cae:	4611      	mov	r1, r2
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f000 fa3b 	bl	800512c <_ZN9__gnu_cxx17__normal_iteratorIPN4tama4ToneESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3710      	adds	r7, #16
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}

08004cc0 <_ZNSt6vectorIN4tama4ToneESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8004cc0:	b5b0      	push	{r4, r5, r7, lr}
 8004cc2:	b08a      	sub	sp, #40	; 0x28
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	60f8      	str	r0, [r7, #12]
 8004cc8:	60b9      	str	r1, [r7, #8]
 8004cca:	607a      	str	r2, [r7, #4]
      const size_type __len =
 8004ccc:	4a41      	ldr	r2, [pc, #260]	; (8004dd4 <_ZNSt6vectorIN4tama4ToneESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x114>)
 8004cce:	2101      	movs	r1, #1
 8004cd0:	68f8      	ldr	r0, [r7, #12]
 8004cd2:	f000 fa3b 	bl	800514c <_ZNKSt6vectorIN4tama4ToneESaIS1_EE12_M_check_lenEjPKc>
 8004cd6:	6278      	str	r0, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 8004cd8:	68f8      	ldr	r0, [r7, #12]
 8004cda:	f000 fa7f 	bl	80051dc <_ZNSt6vectorIN4tama4ToneESaIS1_EE5beginEv>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	617b      	str	r3, [r7, #20]
 8004ce2:	f107 0214 	add.w	r2, r7, #20
 8004ce6:	f107 0308 	add.w	r3, r7, #8
 8004cea:	4611      	mov	r1, r2
 8004cec:	4618      	mov	r0, r3
 8004cee:	f000 fa85 	bl	80051fc <_ZN9__gnu_cxxmiIPN4tama4ToneESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f000 fa94 	bl	8005228 <_ZNSt12_Vector_baseIN4tama4ToneESaIS1_EE11_M_allocateEj>
 8004d00:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 8004d02:	69fb      	ldr	r3, [r7, #28]
 8004d04:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 8004d06:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8004d08:	6a3b      	ldr	r3, [r7, #32]
 8004d0a:	00db      	lsls	r3, r3, #3
	  _Alloc_traits::construct(this->_M_impl,
 8004d0c:	69fa      	ldr	r2, [r7, #28]
 8004d0e:	18d5      	adds	r5, r2, r3
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f7ff fd92 	bl	800483a <_ZSt7forwardIN4tama4ToneEEOT_RNSt16remove_referenceIS2_E4typeE>
 8004d16:	4603      	mov	r3, r0
 8004d18:	461a      	mov	r2, r3
 8004d1a:	4629      	mov	r1, r5
 8004d1c:	4620      	mov	r0, r4
 8004d1e:	f7ff ffab 	bl	8004c78 <_ZNSt16allocator_traitsISaIN4tama4ToneEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 8004d22:	2300      	movs	r3, #0
 8004d24:	61bb      	str	r3, [r7, #24]
	    (this->_M_impl._M_start, __position.base(),
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681c      	ldr	r4, [r3, #0]
 8004d2a:	f107 0308 	add.w	r3, r7, #8
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f000 fa8e 	bl	8005250 <_ZNK9__gnu_cxx17__normal_iteratorIPN4tama4ToneESt6vectorIS2_SaIS2_EEE4baseEv>
 8004d34:	4603      	mov	r3, r0
 8004d36:	681d      	ldr	r5, [r3, #0]
	     __new_start, _M_get_Tp_allocator());
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f7fe fb2f 	bl	800339e <_ZNSt12_Vector_baseIN4tama4ToneESaIS1_EE19_M_get_Tp_allocatorEv>
 8004d40:	4603      	mov	r3, r0
	  __new_finish
 8004d42:	69fa      	ldr	r2, [r7, #28]
 8004d44:	4629      	mov	r1, r5
 8004d46:	4620      	mov	r0, r4
 8004d48:	f000 fa8d 	bl	8005266 <_ZSt34__uninitialized_move_if_noexcept_aIPN4tama4ToneES2_SaIS1_EET0_T_S5_S4_RT1_>
 8004d4c:	61b8      	str	r0, [r7, #24]
	  ++__new_finish;
 8004d4e:	69bb      	ldr	r3, [r7, #24]
 8004d50:	3308      	adds	r3, #8
 8004d52:	61bb      	str	r3, [r7, #24]
	    (__position.base(), this->_M_impl._M_finish,
 8004d54:	f107 0308 	add.w	r3, r7, #8
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f000 fa79 	bl	8005250 <_ZNK9__gnu_cxx17__normal_iteratorIPN4tama4ToneESt6vectorIS2_SaIS2_EEE4baseEv>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	681c      	ldr	r4, [r3, #0]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	685d      	ldr	r5, [r3, #4]
	     __new_finish, _M_get_Tp_allocator());
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f7fe fb18 	bl	800339e <_ZNSt12_Vector_baseIN4tama4ToneESaIS1_EE19_M_get_Tp_allocatorEv>
 8004d6e:	4603      	mov	r3, r0
	  __new_finish
 8004d70:	69ba      	ldr	r2, [r7, #24]
 8004d72:	4629      	mov	r1, r5
 8004d74:	4620      	mov	r0, r4
 8004d76:	f000 fa76 	bl	8005266 <_ZSt34__uninitialized_move_if_noexcept_aIPN4tama4ToneES2_SaIS1_EET0_T_S5_S4_RT1_>
 8004d7a:	61b8      	str	r0, [r7, #24]
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681c      	ldr	r4, [r3, #0]
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	685d      	ldr	r5, [r3, #4]
		    _M_get_Tp_allocator());
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	4618      	mov	r0, r3
 8004d88:	f7fe fb09 	bl	800339e <_ZNSt12_Vector_baseIN4tama4ToneESaIS1_EE19_M_get_Tp_allocatorEv>
 8004d8c:	4603      	mov	r3, r0
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8004d8e:	461a      	mov	r2, r3
 8004d90:	4629      	mov	r1, r5
 8004d92:	4620      	mov	r0, r4
 8004d94:	f7fe fb0e 	bl	80033b4 <_ZSt8_DestroyIPN4tama4ToneES1_EvT_S3_RSaIT0_E>
      _M_deallocate(this->_M_impl._M_start,
 8004d98:	68f8      	ldr	r0, [r7, #12]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	6819      	ldr	r1, [r3, #0]
		    this->_M_impl._M_end_of_storage
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	689b      	ldr	r3, [r3, #8]
		    - this->_M_impl._M_start);
 8004da2:	461a      	mov	r2, r3
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	1ad3      	subs	r3, r2, r3
 8004daa:	10db      	asrs	r3, r3, #3
      _M_deallocate(this->_M_impl._M_start,
 8004dac:	461a      	mov	r2, r3
 8004dae:	f7fe fb96 	bl	80034de <_ZNSt12_Vector_baseIN4tama4ToneESaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	69fa      	ldr	r2, [r7, #28]
 8004db6:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	69ba      	ldr	r2, [r7, #24]
 8004dbc:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8004dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc0:	00db      	lsls	r3, r3, #3
 8004dc2:	69fa      	ldr	r2, [r7, #28]
 8004dc4:	441a      	add	r2, r3
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	609a      	str	r2, [r3, #8]
    }
 8004dca:	bf00      	nop
 8004dcc:	3728      	adds	r7, #40	; 0x28
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bdb0      	pop	{r4, r5, r7, pc}
 8004dd2:	bf00      	nop
 8004dd4:	08017d64 	.word	0x08017d64

08004dd8 <_ZNKSt12__shared_ptrIN4tama11SoundPlayerELN9__gnu_cxx12_Lock_policyE0EE3getEv>:
      get() const noexcept
 8004dd8:	b480      	push	{r7}
 8004dda:	b083      	sub	sp, #12
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4618      	mov	r0, r3
 8004de6:	370c      	adds	r7, #12
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr

08004df0 <_ZNSt16allocator_traitsISaIN4tama4ToneEEE37select_on_container_copy_constructionERKS2_>:
      select_on_container_copy_construction(const allocator_type& __rhs)
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b082      	sub	sp, #8
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 8004dfa:	6839      	ldr	r1, [r7, #0]
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f7fe fb99 	bl	8003534 <_ZNSaIN4tama4ToneEEC1ERKS1_>
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	3708      	adds	r7, #8
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}

08004e0a <_ZNSt12_Vector_baseIN4tama4ToneESaIS1_EE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 8004e0a:	b580      	push	{r7, lr}
 8004e0c:	b082      	sub	sp, #8
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	6078      	str	r0, [r7, #4]
 8004e12:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 8004e14:	6839      	ldr	r1, [r7, #0]
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f000 fa06 	bl	8005228 <_ZNSt12_Vector_baseIN4tama4ToneESaIS1_EE11_M_allocateEj>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	00db      	lsls	r3, r3, #3
 8004e32:	441a      	add	r2, r3
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	609a      	str	r2, [r3, #8]
      }
 8004e38:	bf00      	nop
 8004e3a:	3708      	adds	r7, #8
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}

08004e40 <_ZN9__gnu_cxx17__normal_iteratorIPKN4tama4ToneESt6vectorIS2_SaIS2_EEEC1ERKS4_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8004e40:	b480      	push	{r7}
 8004e42:	b083      	sub	sp, #12
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	601a      	str	r2, [r3, #0]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4618      	mov	r0, r3
 8004e56:	370c      	adds	r7, #12
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5e:	4770      	bx	lr

08004e60 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKN4tama4ToneESt6vectorIS3_SaIS3_EEEEPS3_ET0_T_SC_SB_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b086      	sub	sp, #24
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	60f8      	str	r0, [r7, #12]
 8004e68:	60b9      	str	r1, [r7, #8]
 8004e6a:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	68b9      	ldr	r1, [r7, #8]
 8004e74:	68f8      	ldr	r0, [r7, #12]
 8004e76:	f000 fa0f 	bl	8005298 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN4tama4ToneESt6vectorIS5_SaIS5_EEEEPS5_EET0_T_SE_SD_>
 8004e7a:	4603      	mov	r3, r0
    }
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3718      	adds	r7, #24
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}

08004e84 <_ZSt3getILj0EJPN4tama13TextureLoaderESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>:
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }

  /// Return a reference to the ith element of a tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b082      	sub	sp, #8
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f000 fa12 	bl	80052b8 <_ZSt12__get_helperILj0EPN4tama13TextureLoaderEJSt14default_deleteIS1_EEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>
 8004e94:	4603      	mov	r3, r0
 8004e96:	4618      	mov	r0, r3
 8004e98:	3708      	adds	r7, #8
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}

08004e9e <_ZNSt15__uniq_ptr_implIN4tama13TextureLoaderESt14default_deleteIS1_EE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 8004e9e:	b580      	push	{r7, lr}
 8004ea0:	b082      	sub	sp, #8
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	6078      	str	r0, [r7, #4]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f000 fa11 	bl	80052d0 <_ZSt3getILj1EJPN4tama13TextureLoaderESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3708      	adds	r7, #8
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}

08004eb8 <_ZNKSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE3getEv>:
      get() const noexcept
 8004eb8:	b480      	push	{r7}
 8004eba:	b083      	sub	sp, #12
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	370c      	adds	r7, #12
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr

08004ed0 <_ZNKSt12__shared_ptrIN4tama13TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE3getEv>:
      get() const noexcept
 8004ed0:	b480      	push	{r7}
 8004ed2:	b083      	sub	sp, #12
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4618      	mov	r0, r3
 8004ede:	370c      	adds	r7, #12
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr

08004ee8 <_ZN9__gnu_cxx13new_allocatorIN4tama6SpriteEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8004ee8:	b480      	push	{r7}
 8004eea:	b083      	sub	sp, #12
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	370c      	adds	r7, #12
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr

08004efe <_ZN9__gnu_cxx13new_allocatorIN4tama6SpriteEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8004efe:	b480      	push	{r7}
 8004f00:	b083      	sub	sp, #12
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	6078      	str	r0, [r7, #4]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	4618      	mov	r0, r3
 8004f0a:	370c      	adds	r7, #12
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr

08004f14 <_ZNSt10shared_ptrIN4tama6SpriteEEC1ISaIS1_EJS_INS0_7TextureEENS0_5Vec2dEEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 8004f14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f16:	b087      	sub	sp, #28
 8004f18:	af02      	add	r7, sp, #8
 8004f1a:	60f8      	str	r0, [r7, #12]
 8004f1c:	7239      	strb	r1, [r7, #8]
 8004f1e:	607a      	str	r2, [r7, #4]
 8004f20:	603b      	str	r3, [r7, #0]
	: __shared_ptr<_Tp>(__tag, __a, std::forward<_Args>(__args)...)
 8004f22:	68fc      	ldr	r4, [r7, #12]
 8004f24:	6838      	ldr	r0, [r7, #0]
 8004f26:	f7ff fb9e 	bl	8004666 <_ZSt7forwardISt10shared_ptrIN4tama7TextureEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8004f2a:	4605      	mov	r5, r0
 8004f2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f2e:	f7ff fba5 	bl	800467c <_ZSt7forwardIN4tama5Vec2dEEOT_RNSt16remove_referenceIS2_E4typeE>
 8004f32:	4603      	mov	r3, r0
 8004f34:	9300      	str	r3, [sp, #0]
 8004f36:	462b      	mov	r3, r5
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	4631      	mov	r1, r6
 8004f3c:	4620      	mov	r0, r4
 8004f3e:	f000 f9f0 	bl	8005322 <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJSt10shared_ptrINS0_7TextureEENS0_5Vec2dEEEESt19_Sp_make_shared_tagRKT_DpOT0_>
	{ }
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	4618      	mov	r0, r3
 8004f46:	3714      	adds	r7, #20
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004f4c <_ZSt4moveIRPN4tama13TextureLoaderEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8004f4c:	b480      	push	{r7}
 8004f4e:	b083      	sub	sp, #12
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	4618      	mov	r0, r3
 8004f58:	370c      	adds	r7, #12
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr

08004f62 <_ZSt4swapIPN4tama13TextureLoaderEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS7_ESt18is_move_assignableIS7_EEE5valueEvE4typeERS7_SH_>:
    swap(_Tp& __a, _Tp& __b)
 8004f62:	b580      	push	{r7, lr}
 8004f64:	b084      	sub	sp, #16
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	6078      	str	r0, [r7, #4]
 8004f6a:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	f7ff ffed 	bl	8004f4c <_ZSt4moveIRPN4tama13TextureLoaderEEONSt16remove_referenceIT_E4typeEOS5_>
 8004f72:	4603      	mov	r3, r0
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8004f78:	6838      	ldr	r0, [r7, #0]
 8004f7a:	f7ff ffe7 	bl	8004f4c <_ZSt4moveIRPN4tama13TextureLoaderEEONSt16remove_referenceIT_E4typeEOS5_>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8004f86:	f107 030c 	add.w	r3, r7, #12
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f7ff ffde 	bl	8004f4c <_ZSt4moveIRPN4tama13TextureLoaderEEONSt16remove_referenceIT_E4typeEOS5_>
 8004f90:	4603      	mov	r3, r0
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	601a      	str	r2, [r3, #0]
    }
 8004f98:	bf00      	nop
 8004f9a:	3710      	adds	r7, #16
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}

08004fa0 <_ZNKSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EE3getEv>:
      get() const noexcept
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b082      	sub	sp, #8
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	4618      	mov	r0, r3
 8004fac:	f000 fa38 	bl	8005420 <_ZNKSt15__uniq_ptr_implIN4tama13TextureLoaderESt14default_deleteIS1_EE6_M_ptrEv>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3708      	adds	r7, #8
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}

08004fba <_ZNSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EEC1EOS4_>:
      __shared_ptr(__shared_ptr&& __r) noexcept
 8004fba:	b580      	push	{r7, lr}
 8004fbc:	b082      	sub	sp, #8
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	6078      	str	r0, [r7, #4]
 8004fc2:	6039      	str	r1, [r7, #0]
      : _M_ptr(__r._M_ptr), _M_refcount()
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	601a      	str	r2, [r3, #0]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	3304      	adds	r3, #4
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f7fb ff52 	bl	8000e7a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	_M_refcount._M_swap(__r._M_refcount);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	1d1a      	adds	r2, r3, #4
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	3304      	adds	r3, #4
 8004fde:	4619      	mov	r1, r3
 8004fe0:	4610      	mov	r0, r2
 8004fe2:	f7fb ff58 	bl	8000e96 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	__r._M_ptr = 0;
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	601a      	str	r2, [r3, #0]
      }
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3708      	adds	r7, #8
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}

08004ff6 <_ZNSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EE4swapERS4_>:
      swap(__shared_ptr<_Tp, _Lp>& __other) noexcept
 8004ff6:	b580      	push	{r7, lr}
 8004ff8:	b082      	sub	sp, #8
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	6078      	str	r0, [r7, #4]
 8004ffe:	6039      	str	r1, [r7, #0]
	std::swap(_M_ptr, __other._M_ptr);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	683a      	ldr	r2, [r7, #0]
 8005004:	4611      	mov	r1, r2
 8005006:	4618      	mov	r0, r3
 8005008:	f000 fa23 	bl	8005452 <_ZSt4swapIPN4tama14ChangeObserverEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS7_ESt18is_move_assignableIS7_EEE5valueEvE4typeERS7_SH_>
	_M_refcount._M_swap(__other._M_refcount);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	1d1a      	adds	r2, r3, #4
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	3304      	adds	r3, #4
 8005014:	4619      	mov	r1, r3
 8005016:	4610      	mov	r0, r2
 8005018:	f7fb ff3d 	bl	8000e96 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
      }
 800501c:	bf00      	nop
 800501e:	3708      	adds	r7, #8
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}

08005024 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EEC1EOS4_>:
      __shared_ptr(__shared_ptr&& __r) noexcept
 8005024:	b580      	push	{r7, lr}
 8005026:	b082      	sub	sp, #8
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	6039      	str	r1, [r7, #0]
      : _M_ptr(__r._M_ptr), _M_refcount()
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	601a      	str	r2, [r3, #0]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	3304      	adds	r3, #4
 800503a:	4618      	mov	r0, r3
 800503c:	f7fb ff1d 	bl	8000e7a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	_M_refcount._M_swap(__r._M_refcount);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	1d1a      	adds	r2, r3, #4
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	3304      	adds	r3, #4
 8005048:	4619      	mov	r1, r3
 800504a:	4610      	mov	r0, r2
 800504c:	f7fb ff23 	bl	8000e96 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	__r._M_ptr = 0;
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	2200      	movs	r2, #0
 8005054:	601a      	str	r2, [r3, #0]
      }
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4618      	mov	r0, r3
 800505a:	3708      	adds	r7, #8
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}

08005060 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE4swapERS4_>:
      swap(__shared_ptr<_Tp, _Lp>& __other) noexcept
 8005060:	b580      	push	{r7, lr}
 8005062:	b082      	sub	sp, #8
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	6039      	str	r1, [r7, #0]
	std::swap(_M_ptr, __other._M_ptr);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	683a      	ldr	r2, [r7, #0]
 800506e:	4611      	mov	r1, r2
 8005070:	4618      	mov	r0, r3
 8005072:	f000 fa18 	bl	80054a6 <_ZSt4swapIPN4tama7TextureEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS7_ESt18is_move_assignableIS7_EEE5valueEvE4typeERS7_SH_>
	_M_refcount._M_swap(__other._M_refcount);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	1d1a      	adds	r2, r3, #4
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	3304      	adds	r3, #4
 800507e:	4619      	mov	r1, r3
 8005080:	4610      	mov	r0, r2
 8005082:	f7fb ff08 	bl	8000e96 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
      }
 8005086:	bf00      	nop
 8005088:	3708      	adds	r7, #8
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}

0800508e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama4TextEEET_St17integral_constantIbLb0EE>:
	__shared_count(_Ptr __p, /* is_array = */ false_type)
 800508e:	b580      	push	{r7, lr}
 8005090:	b084      	sub	sp, #16
 8005092:	af00      	add	r7, sp, #0
 8005094:	60f8      	str	r0, [r7, #12]
 8005096:	60b9      	str	r1, [r7, #8]
 8005098:	713a      	strb	r2, [r7, #4]
	: __shared_count(__p)
 800509a:	68b9      	ldr	r1, [r7, #8]
 800509c:	68f8      	ldr	r0, [r7, #12]
 800509e:	f000 fa21 	bl	80054e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama4TextEEET_>
	{ }
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	4618      	mov	r0, r3
 80050a6:	3710      	adds	r7, #16
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}

080050ac <_ZNSt12__shared_ptrIN4tama4TextELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp*) noexcept
 80050ac:	b480      	push	{r7}
 80050ae:	b083      	sub	sp, #12
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	6039      	str	r1, [r7, #0]
	{ }
 80050b6:	bf00      	nop
 80050b8:	370c      	adds	r7, #12
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr

080050c2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama6SpriteEEET_St17integral_constantIbLb0EE>:
	__shared_count(_Ptr __p, /* is_array = */ false_type)
 80050c2:	b580      	push	{r7, lr}
 80050c4:	b084      	sub	sp, #16
 80050c6:	af00      	add	r7, sp, #0
 80050c8:	60f8      	str	r0, [r7, #12]
 80050ca:	60b9      	str	r1, [r7, #8]
 80050cc:	713a      	strb	r2, [r7, #4]
	: __shared_count(__p)
 80050ce:	68b9      	ldr	r1, [r7, #8]
 80050d0:	68f8      	ldr	r0, [r7, #12]
 80050d2:	f000 fa1f 	bl	8005514 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama6SpriteEEET_>
	{ }
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	4618      	mov	r0, r3
 80050da:	3710      	adds	r7, #16
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}

080050e0 <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp*) noexcept
 80050e0:	b480      	push	{r7}
 80050e2:	b083      	sub	sp, #12
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	6039      	str	r1, [r7, #0]
	{ }
 80050ea:	bf00      	nop
 80050ec:	370c      	adds	r7, #12
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr

080050f6 <_ZN9__gnu_cxx13new_allocatorIN4tama4ToneEE9constructIS2_JS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 80050f6:	b590      	push	{r4, r7, lr}
 80050f8:	b085      	sub	sp, #20
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	60f8      	str	r0, [r7, #12]
 80050fe:	60b9      	str	r1, [r7, #8]
 8005100:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f7ff fb99 	bl	800483a <_ZSt7forwardIN4tama4ToneEEOT_RNSt16remove_referenceIS2_E4typeE>
 8005108:	4604      	mov	r4, r0
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	4619      	mov	r1, r3
 800510e:	2008      	movs	r0, #8
 8005110:	f7fb fa15 	bl	800053e <_ZnwjPv>
 8005114:	4603      	mov	r3, r0
 8005116:	2b00      	cmp	r3, #0
 8005118:	d004      	beq.n	8005124 <_ZN9__gnu_cxx13new_allocatorIN4tama4ToneEE9constructIS2_JS2_EEEvPT_DpOT0_+0x2e>
 800511a:	4622      	mov	r2, r4
 800511c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005120:	e883 0003 	stmia.w	r3, {r0, r1}
 8005124:	bf00      	nop
 8005126:	3714      	adds	r7, #20
 8005128:	46bd      	mov	sp, r7
 800512a:	bd90      	pop	{r4, r7, pc}

0800512c <_ZN9__gnu_cxx17__normal_iteratorIPN4tama4ToneESt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800512c:	b480      	push	{r7}
 800512e:	b083      	sub	sp, #12
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	601a      	str	r2, [r3, #0]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4618      	mov	r0, r3
 8005142:	370c      	adds	r7, #12
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr

0800514c <_ZNKSt6vectorIN4tama4ToneESaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800514c:	b590      	push	{r4, r7, lr}
 800514e:	b087      	sub	sp, #28
 8005150:	af00      	add	r7, sp, #0
 8005152:	60f8      	str	r0, [r7, #12]
 8005154:	60b9      	str	r1, [r7, #8]
 8005156:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8005158:	68f8      	ldr	r0, [r7, #12]
 800515a:	f000 f9f3 	bl	8005544 <_ZNKSt6vectorIN4tama4ToneESaIS1_EE8max_sizeEv>
 800515e:	4604      	mov	r4, r0
 8005160:	68f8      	ldr	r0, [r7, #12]
 8005162:	f7fd ffdb 	bl	800311c <_ZNKSt6vectorIN4tama4ToneESaIS1_EE4sizeEv>
 8005166:	4603      	mov	r3, r0
 8005168:	1ae2      	subs	r2, r4, r3
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	429a      	cmp	r2, r3
 800516e:	bf34      	ite	cc
 8005170:	2301      	movcc	r3, #1
 8005172:	2300      	movcs	r3, #0
 8005174:	b2db      	uxtb	r3, r3
 8005176:	2b00      	cmp	r3, #0
 8005178:	d003      	beq.n	8005182 <_ZNKSt6vectorIN4tama4ToneESaIS1_EE12_M_check_lenEjPKc+0x36>
	  __throw_length_error(__N(__s));
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4618      	mov	r0, r3
 800517e:	f012 f9ce 	bl	801751e <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + std::max(size(), __n);
 8005182:	68f8      	ldr	r0, [r7, #12]
 8005184:	f7fd ffca 	bl	800311c <_ZNKSt6vectorIN4tama4ToneESaIS1_EE4sizeEv>
 8005188:	4604      	mov	r4, r0
 800518a:	68f8      	ldr	r0, [r7, #12]
 800518c:	f7fd ffc6 	bl	800311c <_ZNKSt6vectorIN4tama4ToneESaIS1_EE4sizeEv>
 8005190:	4603      	mov	r3, r0
 8005192:	613b      	str	r3, [r7, #16]
 8005194:	f107 0208 	add.w	r2, r7, #8
 8005198:	f107 0310 	add.w	r3, r7, #16
 800519c:	4611      	mov	r1, r2
 800519e:	4618      	mov	r0, r3
 80051a0:	f7fb fc83 	bl	8000aaa <_ZSt3maxIjERKT_S2_S2_>
 80051a4:	4603      	mov	r3, r0
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4423      	add	r3, r4
 80051aa:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80051ac:	68f8      	ldr	r0, [r7, #12]
 80051ae:	f7fd ffb5 	bl	800311c <_ZNKSt6vectorIN4tama4ToneESaIS1_EE4sizeEv>
 80051b2:	4602      	mov	r2, r0
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d306      	bcc.n	80051c8 <_ZNKSt6vectorIN4tama4ToneESaIS1_EE12_M_check_lenEjPKc+0x7c>
 80051ba:	68f8      	ldr	r0, [r7, #12]
 80051bc:	f000 f9c2 	bl	8005544 <_ZNKSt6vectorIN4tama4ToneESaIS1_EE8max_sizeEv>
 80051c0:	4602      	mov	r2, r0
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d904      	bls.n	80051d2 <_ZNKSt6vectorIN4tama4ToneESaIS1_EE12_M_check_lenEjPKc+0x86>
 80051c8:	68f8      	ldr	r0, [r7, #12]
 80051ca:	f000 f9bb 	bl	8005544 <_ZNKSt6vectorIN4tama4ToneESaIS1_EE8max_sizeEv>
 80051ce:	4603      	mov	r3, r0
 80051d0:	e000      	b.n	80051d4 <_ZNKSt6vectorIN4tama4ToneESaIS1_EE12_M_check_lenEjPKc+0x88>
 80051d2:	697b      	ldr	r3, [r7, #20]
      }
 80051d4:	4618      	mov	r0, r3
 80051d6:	371c      	adds	r7, #28
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd90      	pop	{r4, r7, pc}

080051dc <_ZNSt6vectorIN4tama4ToneESaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80051dc:	b580      	push	{r7, lr}
 80051de:	b084      	sub	sp, #16
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 80051e4:	687a      	ldr	r2, [r7, #4]
 80051e6:	f107 030c 	add.w	r3, r7, #12
 80051ea:	4611      	mov	r1, r2
 80051ec:	4618      	mov	r0, r3
 80051ee:	f7ff ff9d 	bl	800512c <_ZN9__gnu_cxx17__normal_iteratorIPN4tama4ToneESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	4618      	mov	r0, r3
 80051f6:	3710      	adds	r7, #16
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}

080051fc <_ZN9__gnu_cxxmiIPN4tama4ToneESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 80051fc:	b590      	push	{r4, r7, lr}
 80051fe:	b083      	sub	sp, #12
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
 8005204:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f000 f822 	bl	8005250 <_ZNK9__gnu_cxx17__normal_iteratorIPN4tama4ToneESt6vectorIS2_SaIS2_EEE4baseEv>
 800520c:	4603      	mov	r3, r0
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	461c      	mov	r4, r3
 8005212:	6838      	ldr	r0, [r7, #0]
 8005214:	f000 f81c 	bl	8005250 <_ZNK9__gnu_cxx17__normal_iteratorIPN4tama4ToneESt6vectorIS2_SaIS2_EEE4baseEv>
 8005218:	4603      	mov	r3, r0
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	1ae3      	subs	r3, r4, r3
 800521e:	10db      	asrs	r3, r3, #3
 8005220:	4618      	mov	r0, r3
 8005222:	370c      	adds	r7, #12
 8005224:	46bd      	mov	sp, r7
 8005226:	bd90      	pop	{r4, r7, pc}

08005228 <_ZNSt12_Vector_baseIN4tama4ToneESaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8005228:	b580      	push	{r7, lr}
 800522a:	b082      	sub	sp, #8
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d006      	beq.n	8005246 <_ZNSt12_Vector_baseIN4tama4ToneESaIS1_EE11_M_allocateEj+0x1e>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6839      	ldr	r1, [r7, #0]
 800523c:	4618      	mov	r0, r3
 800523e:	f000 f992 	bl	8005566 <_ZNSt16allocator_traitsISaIN4tama4ToneEEE8allocateERS2_j>
 8005242:	4603      	mov	r3, r0
 8005244:	e000      	b.n	8005248 <_ZNSt12_Vector_baseIN4tama4ToneESaIS1_EE11_M_allocateEj+0x20>
 8005246:	2300      	movs	r3, #0
      }
 8005248:	4618      	mov	r0, r3
 800524a:	3708      	adds	r7, #8
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}

08005250 <_ZNK9__gnu_cxx17__normal_iteratorIPN4tama4ToneESt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8005250:	b480      	push	{r7}
 8005252:	b083      	sub	sp, #12
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	4618      	mov	r0, r3
 800525c:	370c      	adds	r7, #12
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr

08005266 <_ZSt34__uninitialized_move_if_noexcept_aIPN4tama4ToneES2_SaIS1_EET0_T_S5_S4_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8005266:	b590      	push	{r4, r7, lr}
 8005268:	b085      	sub	sp, #20
 800526a:	af00      	add	r7, sp, #0
 800526c:	60f8      	str	r0, [r7, #12]
 800526e:	60b9      	str	r1, [r7, #8]
 8005270:	607a      	str	r2, [r7, #4]
 8005272:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8005274:	68f8      	ldr	r0, [r7, #12]
 8005276:	f000 f985 	bl	8005584 <_ZSt32__make_move_if_noexcept_iteratorIN4tama4ToneESt13move_iteratorIPS1_EET0_PT_>
 800527a:	4604      	mov	r4, r0
 800527c:	68b8      	ldr	r0, [r7, #8]
 800527e:	f000 f981 	bl	8005584 <_ZSt32__make_move_if_noexcept_iteratorIN4tama4ToneESt13move_iteratorIPS1_EET0_PT_>
 8005282:	4601      	mov	r1, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	4620      	mov	r0, r4
 800528a:	f000 f98a 	bl	80055a2 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPN4tama4ToneEES3_S2_ET0_T_S6_S5_RSaIT1_E>
 800528e:	4603      	mov	r3, r0
    }
 8005290:	4618      	mov	r0, r3
 8005292:	3714      	adds	r7, #20
 8005294:	46bd      	mov	sp, r7
 8005296:	bd90      	pop	{r4, r7, pc}

08005298 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN4tama4ToneESt6vectorIS5_SaIS5_EEEEPS5_EET0_T_SE_SD_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8005298:	b580      	push	{r7, lr}
 800529a:	b084      	sub	sp, #16
 800529c:	af00      	add	r7, sp, #0
 800529e:	60f8      	str	r0, [r7, #12]
 80052a0:	60b9      	str	r1, [r7, #8]
 80052a2:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 80052a4:	687a      	ldr	r2, [r7, #4]
 80052a6:	68b9      	ldr	r1, [r7, #8]
 80052a8:	68f8      	ldr	r0, [r7, #12]
 80052aa:	f000 f98b 	bl	80055c4 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKN4tama4ToneESt6vectorIS3_SaIS3_EEEEPS3_ET0_T_SC_SB_>
 80052ae:	4603      	mov	r3, r0
 80052b0:	4618      	mov	r0, r3
 80052b2:	3710      	adds	r7, #16
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}

080052b8 <_ZSt12__get_helperILj0EPN4tama13TextureLoaderEJSt14default_deleteIS1_EEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b082      	sub	sp, #8
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f000 f997 	bl	80055f4 <_ZNSt11_Tuple_implILj0EJPN4tama13TextureLoaderESt14default_deleteIS1_EEE7_M_headERS5_>
 80052c6:	4603      	mov	r3, r0
 80052c8:	4618      	mov	r0, r3
 80052ca:	3708      	adds	r7, #8
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}

080052d0 <_ZSt3getILj1EJPN4tama13TextureLoaderESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>:
    get(tuple<_Elements...>& __t) noexcept
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b082      	sub	sp, #8
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	f000 f998 	bl	800560e <_ZSt12__get_helperILj1ESt14default_deleteIN4tama13TextureLoaderEEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80052de:	4603      	mov	r3, r0
 80052e0:	4618      	mov	r0, r3
 80052e2:	3708      	adds	r7, #8
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}

080052e8 <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>:
        struct _Deleter
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b082      	sub	sp, #8
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	4618      	mov	r0, r3
 80052f4:	f7ff fb9c 	bl	8004a30 <_ZNSaIN4tama6SpriteEED1Ev>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	4618      	mov	r0, r3
 80052fc:	3708      	adds	r7, #8
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}

08005302 <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>:
 8005302:	b580      	push	{r7, lr}
 8005304:	b082      	sub	sp, #8
 8005306:	af00      	add	r7, sp, #0
 8005308:	6078      	str	r0, [r7, #4]
 800530a:	6039      	str	r1, [r7, #0]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	683a      	ldr	r2, [r7, #0]
 8005310:	4611      	mov	r1, r2
 8005312:	4618      	mov	r0, r3
 8005314:	f000 f987 	bl	8005626 <_ZNSaIN4tama6SpriteEEC1ERKS1_>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	4618      	mov	r0, r3
 800531c:	3708      	adds	r7, #8
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}

08005322 <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJSt10shared_ptrINS0_7TextureEENS0_5Vec2dEEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 8005322:	b590      	push	{r4, r7, lr}
 8005324:	b08d      	sub	sp, #52	; 0x34
 8005326:	af00      	add	r7, sp, #0
 8005328:	60f8      	str	r0, [r7, #12]
 800532a:	7239      	strb	r1, [r7, #8]
 800532c:	607a      	str	r2, [r7, #4]
 800532e:	603b      	str	r3, [r7, #0]
	: _M_ptr(), _M_refcount()
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2200      	movs	r2, #0
 8005334:	601a      	str	r2, [r3, #0]
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	3304      	adds	r3, #4
 800533a:	4618      	mov	r0, r3
 800533c:	f7fb fd9d 	bl	8000e7a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 8005340:	f107 0320 	add.w	r3, r7, #32
 8005344:	6879      	ldr	r1, [r7, #4]
 8005346:	4618      	mov	r0, r3
 8005348:	f000 f96d 	bl	8005626 <_ZNSaIN4tama6SpriteEEC1ERKS1_>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 800534c:	f107 0318 	add.w	r3, r7, #24
 8005350:	f107 0220 	add.w	r2, r7, #32
 8005354:	4611      	mov	r1, r2
 8005356:	4618      	mov	r0, r3
 8005358:	f000 f973 	bl	8005642 <_ZSt18__allocate_guardedISaIN4tama6SpriteEEESt15__allocated_ptrIT_ERS4_>
	  auto __ptr = __guard.get();
 800535c:	f107 0318 	add.w	r3, r7, #24
 8005360:	4618      	mov	r0, r3
 8005362:	f000 f996 	bl	8005692 <_ZNSt15__allocated_ptrISaIN4tama6SpriteEEE3getEv>
 8005366:	62f8      	str	r0, [r7, #44]	; 0x2c
	  __traits::construct(__del._M_alloc, __ptr,
 8005368:	6838      	ldr	r0, [r7, #0]
 800536a:	f7ff f97c 	bl	8004666 <_ZSt7forwardISt10shared_ptrIN4tama7TextureEEEOT_RNSt16remove_referenceIS4_E4typeE>
 800536e:	4604      	mov	r4, r0
 8005370:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8005372:	f7ff f983 	bl	800467c <_ZSt7forwardIN4tama5Vec2dEEOT_RNSt16remove_referenceIS2_E4typeE>
 8005376:	4603      	mov	r3, r0
 8005378:	f107 0020 	add.w	r0, r7, #32
 800537c:	4622      	mov	r2, r4
 800537e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005380:	f000 f995 	bl	80056ae <_ZNSt16allocator_traitsISaIN4tama6SpriteEEE9constructIS1_JSt10shared_ptrINS0_7TextureEENS0_5Vec2dEEEEvRS2_PT_DpOT0_>
	  __guard = nullptr;
 8005384:	f107 0318 	add.w	r3, r7, #24
 8005388:	2100      	movs	r1, #0
 800538a:	4618      	mov	r0, r3
 800538c:	f000 f9a7 	bl	80056de <_ZNSt15__allocated_ptrISaIN4tama6SpriteEEEaSEDn>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 8005390:	f107 0220 	add.w	r2, r7, #32
 8005394:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005398:	4611      	mov	r1, r2
 800539a:	4618      	mov	r0, r3
 800539c:	f7ff ffb1 	bl	8005302 <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>
 80053a0:	f107 0220 	add.w	r2, r7, #32
 80053a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80053a8:	4611      	mov	r1, r2
 80053aa:	4618      	mov	r0, r3
 80053ac:	f000 f93b 	bl	8005626 <_ZNSaIN4tama6SpriteEEC1ERKS1_>
 80053b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80053b4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80053b8:	f107 0014 	add.w	r0, r7, #20
 80053bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80053be:	f000 f9c3 	bl	8005748 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama6SpriteENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
 80053c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80053c6:	4618      	mov	r0, r3
 80053c8:	f7ff fb32 	bl	8004a30 <_ZNSaIN4tama6SpriteEED1Ev>
 80053cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053d0:	4618      	mov	r0, r3
 80053d2:	f7ff ff89 	bl	80052e8 <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	  _M_refcount._M_swap(__count);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	3304      	adds	r3, #4
 80053da:	f107 0214 	add.w	r2, r7, #20
 80053de:	4611      	mov	r1, r2
 80053e0:	4618      	mov	r0, r3
 80053e2:	f7fb fd58 	bl	8000e96 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  _M_ptr = __ptr;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053ea:	601a      	str	r2, [r3, #0]
	  _M_enable_shared_from_this_with(_M_ptr);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4619      	mov	r1, r3
 80053f2:	68f8      	ldr	r0, [r7, #12]
 80053f4:	f7ff fe74 	bl	80050e0 <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 80053f8:	f107 0314 	add.w	r3, r7, #20
 80053fc:	4618      	mov	r0, r3
 80053fe:	f7fb fb20 	bl	8000a42 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 8005402:	f107 0318 	add.w	r3, r7, #24
 8005406:	4618      	mov	r0, r3
 8005408:	f000 f92e 	bl	8005668 <_ZNSt15__allocated_ptrISaIN4tama6SpriteEEED1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 800540c:	f107 0320 	add.w	r3, r7, #32
 8005410:	4618      	mov	r0, r3
 8005412:	f7ff ff69 	bl	80052e8 <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	}
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	4618      	mov	r0, r3
 800541a:	3734      	adds	r7, #52	; 0x34
 800541c:	46bd      	mov	sp, r7
 800541e:	bd90      	pop	{r4, r7, pc}

08005420 <_ZNKSt15__uniq_ptr_implIN4tama13TextureLoaderESt14default_deleteIS1_EE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8005420:	b580      	push	{r7, lr}
 8005422:	b082      	sub	sp, #8
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	4618      	mov	r0, r3
 800542c:	f000 f9e3 	bl	80057f6 <_ZSt3getILj0EJPN4tama13TextureLoaderESt14default_deleteIS1_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_>
 8005430:	4603      	mov	r3, r0
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4618      	mov	r0, r3
 8005436:	3708      	adds	r7, #8
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}

0800543c <_ZSt4moveIRPN4tama14ChangeObserverEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800543c:	b480      	push	{r7}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	4618      	mov	r0, r3
 8005448:	370c      	adds	r7, #12
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr

08005452 <_ZSt4swapIPN4tama14ChangeObserverEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS7_ESt18is_move_assignableIS7_EEE5valueEvE4typeERS7_SH_>:
    swap(_Tp& __a, _Tp& __b)
 8005452:	b580      	push	{r7, lr}
 8005454:	b084      	sub	sp, #16
 8005456:	af00      	add	r7, sp, #0
 8005458:	6078      	str	r0, [r7, #4]
 800545a:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f7ff ffed 	bl	800543c <_ZSt4moveIRPN4tama14ChangeObserverEEONSt16remove_referenceIT_E4typeEOS5_>
 8005462:	4603      	mov	r3, r0
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8005468:	6838      	ldr	r0, [r7, #0]
 800546a:	f7ff ffe7 	bl	800543c <_ZSt4moveIRPN4tama14ChangeObserverEEONSt16remove_referenceIT_E4typeEOS5_>
 800546e:	4603      	mov	r3, r0
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8005476:	f107 030c 	add.w	r3, r7, #12
 800547a:	4618      	mov	r0, r3
 800547c:	f7ff ffde 	bl	800543c <_ZSt4moveIRPN4tama14ChangeObserverEEONSt16remove_referenceIT_E4typeEOS5_>
 8005480:	4603      	mov	r3, r0
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	601a      	str	r2, [r3, #0]
    }
 8005488:	bf00      	nop
 800548a:	3710      	adds	r7, #16
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}

08005490 <_ZSt4moveIRPN4tama7TextureEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8005490:	b480      	push	{r7}
 8005492:	b083      	sub	sp, #12
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	4618      	mov	r0, r3
 800549c:	370c      	adds	r7, #12
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr

080054a6 <_ZSt4swapIPN4tama7TextureEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS7_ESt18is_move_assignableIS7_EEE5valueEvE4typeERS7_SH_>:
    swap(_Tp& __a, _Tp& __b)
 80054a6:	b580      	push	{r7, lr}
 80054a8:	b084      	sub	sp, #16
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	6078      	str	r0, [r7, #4]
 80054ae:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	f7ff ffed 	bl	8005490 <_ZSt4moveIRPN4tama7TextureEEONSt16remove_referenceIT_E4typeEOS5_>
 80054b6:	4603      	mov	r3, r0
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 80054bc:	6838      	ldr	r0, [r7, #0]
 80054be:	f7ff ffe7 	bl	8005490 <_ZSt4moveIRPN4tama7TextureEEONSt16remove_referenceIT_E4typeEOS5_>
 80054c2:	4603      	mov	r3, r0
 80054c4:	681a      	ldr	r2, [r3, #0]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80054ca:	f107 030c 	add.w	r3, r7, #12
 80054ce:	4618      	mov	r0, r3
 80054d0:	f7ff ffde 	bl	8005490 <_ZSt4moveIRPN4tama7TextureEEONSt16remove_referenceIT_E4typeEOS5_>
 80054d4:	4603      	mov	r3, r0
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	601a      	str	r2, [r3, #0]
    }
 80054dc:	bf00      	nop
 80054de:	3710      	adds	r7, #16
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}

080054e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama4TextEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 80054e4:	b590      	push	{r4, r7, lr}
 80054e6:	b083      	sub	sp, #12
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	6039      	str	r1, [r7, #0]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2200      	movs	r2, #0
 80054f2:	601a      	str	r2, [r3, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80054f4:	2010      	movs	r0, #16
 80054f6:	f011 ffde 	bl	80174b6 <_Znwj>
 80054fa:	4603      	mov	r3, r0
 80054fc:	461c      	mov	r4, r3
 80054fe:	6839      	ldr	r1, [r7, #0]
 8005500:	4620      	mov	r0, r4
 8005502:	f000 f985 	bl	8005810 <_ZNSt15_Sp_counted_ptrIPN4tama4TextELN9__gnu_cxx12_Lock_policyE0EEC1ES2_>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	601c      	str	r4, [r3, #0]
	}
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	4618      	mov	r0, r3
 800550e:	370c      	adds	r7, #12
 8005510:	46bd      	mov	sp, r7
 8005512:	bd90      	pop	{r4, r7, pc}

08005514 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama6SpriteEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 8005514:	b590      	push	{r4, r7, lr}
 8005516:	b083      	sub	sp, #12
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	6039      	str	r1, [r7, #0]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2200      	movs	r2, #0
 8005522:	601a      	str	r2, [r3, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8005524:	2010      	movs	r0, #16
 8005526:	f011 ffc6 	bl	80174b6 <_Znwj>
 800552a:	4603      	mov	r3, r0
 800552c:	461c      	mov	r4, r3
 800552e:	6839      	ldr	r1, [r7, #0]
 8005530:	4620      	mov	r0, r4
 8005532:	f000 f983 	bl	800583c <_ZNSt15_Sp_counted_ptrIPN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EEC1ES2_>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	601c      	str	r4, [r3, #0]
	}
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	4618      	mov	r0, r3
 800553e:	370c      	adds	r7, #12
 8005540:	46bd      	mov	sp, r7
 8005542:	bd90      	pop	{r4, r7, pc}

08005544 <_ZNKSt6vectorIN4tama4ToneESaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8005544:	b580      	push	{r7, lr}
 8005546:	b082      	sub	sp, #8
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	4618      	mov	r0, r3
 8005550:	f7fd ffe5 	bl	800351e <_ZNKSt12_Vector_baseIN4tama4ToneESaIS1_EE19_M_get_Tp_allocatorEv>
 8005554:	4603      	mov	r3, r0
 8005556:	4618      	mov	r0, r3
 8005558:	f000 f986 	bl	8005868 <_ZNSt16allocator_traitsISaIN4tama4ToneEEE8max_sizeERKS2_>
 800555c:	4603      	mov	r3, r0
 800555e:	4618      	mov	r0, r3
 8005560:	3708      	adds	r7, #8
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}

08005566 <_ZNSt16allocator_traitsISaIN4tama4ToneEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8005566:	b580      	push	{r7, lr}
 8005568:	b082      	sub	sp, #8
 800556a:	af00      	add	r7, sp, #0
 800556c:	6078      	str	r0, [r7, #4]
 800556e:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8005570:	2200      	movs	r2, #0
 8005572:	6839      	ldr	r1, [r7, #0]
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f000 f983 	bl	8005880 <_ZN9__gnu_cxx13new_allocatorIN4tama4ToneEE8allocateEjPKv>
 800557a:	4603      	mov	r3, r0
 800557c:	4618      	mov	r0, r3
 800557e:	3708      	adds	r7, #8
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}

08005584 <_ZSt32__make_move_if_noexcept_iteratorIN4tama4ToneESt13move_iteratorIPS1_EET0_PT_>:
    __make_move_if_noexcept_iterator(_Tp* __i)
 8005584:	b580      	push	{r7, lr}
 8005586:	b084      	sub	sp, #16
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 800558c:	f107 030c 	add.w	r3, r7, #12
 8005590:	6879      	ldr	r1, [r7, #4]
 8005592:	4618      	mov	r0, r3
 8005594:	f000 f992 	bl	80058bc <_ZNSt13move_iteratorIPN4tama4ToneEEC1ES2_>
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	4618      	mov	r0, r3
 800559c:	3710      	adds	r7, #16
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}

080055a2 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPN4tama4ToneEES3_S2_ET0_T_S6_S5_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 80055a2:	b580      	push	{r7, lr}
 80055a4:	b084      	sub	sp, #16
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	60f8      	str	r0, [r7, #12]
 80055aa:	60b9      	str	r1, [r7, #8]
 80055ac:	607a      	str	r2, [r7, #4]
 80055ae:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	68b9      	ldr	r1, [r7, #8]
 80055b4:	68f8      	ldr	r0, [r7, #12]
 80055b6:	f000 f990 	bl	80058da <_ZSt18uninitialized_copyISt13move_iteratorIPN4tama4ToneEES3_ET0_T_S6_S5_>
 80055ba:	4603      	mov	r3, r0
 80055bc:	4618      	mov	r0, r3
 80055be:	3710      	adds	r7, #16
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}

080055c4 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKN4tama4ToneESt6vectorIS3_SaIS3_EEEEPS3_ET0_T_SC_SB_>:
    copy(_II __first, _II __last, _OI __result)
 80055c4:	b590      	push	{r4, r7, lr}
 80055c6:	b085      	sub	sp, #20
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	60f8      	str	r0, [r7, #12]
 80055cc:	60b9      	str	r1, [r7, #8]
 80055ce:	607a      	str	r2, [r7, #4]
	      (std::__miter_base(__first), std::__miter_base(__last),
 80055d0:	68f8      	ldr	r0, [r7, #12]
 80055d2:	f000 f994 	bl	80058fe <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKN4tama4ToneESt6vectorIS3_SaIS3_EEEEET_SA_>
 80055d6:	4604      	mov	r4, r0
 80055d8:	68b8      	ldr	r0, [r7, #8]
 80055da:	f000 f990 	bl	80058fe <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKN4tama4ToneESt6vectorIS3_SaIS3_EEEEET_SA_>
 80055de:	4603      	mov	r3, r0
	       __result));
 80055e0:	687a      	ldr	r2, [r7, #4]
 80055e2:	4619      	mov	r1, r3
 80055e4:	4620      	mov	r0, r4
 80055e6:	f000 f995 	bl	8005914 <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKN4tama4ToneESt6vectorIS3_SaIS3_EEEEPS3_ET1_T0_SC_SB_>
 80055ea:	4603      	mov	r3, r0
    }
 80055ec:	4618      	mov	r0, r3
 80055ee:	3714      	adds	r7, #20
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd90      	pop	{r4, r7, pc}

080055f4 <_ZNSt11_Tuple_implILj0EJPN4tama13TextureLoaderESt14default_deleteIS1_EEE7_M_headERS5_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b082      	sub	sp, #8
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	4618      	mov	r0, r3
 8005600:	f000 f9a4 	bl	800594c <_ZNSt10_Head_baseILj0EPN4tama13TextureLoaderELb0EE7_M_headERS3_>
 8005604:	4603      	mov	r3, r0
 8005606:	4618      	mov	r0, r3
 8005608:	3708      	adds	r7, #8
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}

0800560e <_ZSt12__get_helperILj1ESt14default_deleteIN4tama13TextureLoaderEEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800560e:	b580      	push	{r7, lr}
 8005610:	b082      	sub	sp, #8
 8005612:	af00      	add	r7, sp, #0
 8005614:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f000 f9a3 	bl	8005962 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN4tama13TextureLoaderEEEE7_M_headERS4_>
 800561c:	4603      	mov	r3, r0
 800561e:	4618      	mov	r0, r3
 8005620:	3708      	adds	r7, #8
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}

08005626 <_ZNSaIN4tama6SpriteEEC1ERKS1_>:
      allocator(const allocator& __a) throw()
 8005626:	b580      	push	{r7, lr}
 8005628:	b082      	sub	sp, #8
 800562a:	af00      	add	r7, sp, #0
 800562c:	6078      	str	r0, [r7, #4]
 800562e:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8005630:	6839      	ldr	r1, [r7, #0]
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f000 f9a1 	bl	800597a <_ZN9__gnu_cxx13new_allocatorIN4tama6SpriteEEC1ERKS3_>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	4618      	mov	r0, r3
 800563c:	3708      	adds	r7, #8
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}

08005642 <_ZSt18__allocate_guardedISaIN4tama6SpriteEEESt15__allocated_ptrIT_ERS4_>:
    __allocate_guarded(_Alloc& __a)
 8005642:	b580      	push	{r7, lr}
 8005644:	b082      	sub	sp, #8
 8005646:	af00      	add	r7, sp, #0
 8005648:	6078      	str	r0, [r7, #4]
 800564a:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 800564c:	2101      	movs	r1, #1
 800564e:	6838      	ldr	r0, [r7, #0]
 8005650:	f000 f99f 	bl	8005992 <_ZNSt16allocator_traitsISaIN4tama6SpriteEEE8allocateERS2_j>
 8005654:	4603      	mov	r3, r0
 8005656:	461a      	mov	r2, r3
 8005658:	6839      	ldr	r1, [r7, #0]
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f000 f9a8 	bl	80059b0 <_ZNSt15__allocated_ptrISaIN4tama6SpriteEEEC1ERS2_PS1_>
    }
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	3708      	adds	r7, #8
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}

08005668 <_ZNSt15__allocated_ptrISaIN4tama6SpriteEEED1Ev>:
      ~__allocated_ptr()
 8005668:	b580      	push	{r7, lr}
 800566a:	b082      	sub	sp, #8
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d007      	beq.n	8005688 <_ZNSt15__allocated_ptrISaIN4tama6SpriteEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6818      	ldr	r0, [r3, #0]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	2201      	movs	r2, #1
 8005682:	4619      	mov	r1, r3
 8005684:	f000 f9a8 	bl	80059d8 <_ZNSt16allocator_traitsISaIN4tama6SpriteEEE10deallocateERS2_PS1_j>
      }
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	4618      	mov	r0, r3
 800568c:	3708      	adds	r7, #8
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}

08005692 <_ZNSt15__allocated_ptrISaIN4tama6SpriteEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 8005692:	b580      	push	{r7, lr}
 8005694:	b082      	sub	sp, #8
 8005696:	af00      	add	r7, sp, #0
 8005698:	6078      	str	r0, [r7, #4]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	4618      	mov	r0, r3
 80056a0:	f000 f9a9 	bl	80059f6 <_ZNSt15__allocated_ptrISaIN4tama6SpriteEEE10_S_raw_ptrEPS1_>
 80056a4:	4603      	mov	r3, r0
 80056a6:	4618      	mov	r0, r3
 80056a8:	3708      	adds	r7, #8
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}

080056ae <_ZNSt16allocator_traitsISaIN4tama6SpriteEEE9constructIS1_JSt10shared_ptrINS0_7TextureEENS0_5Vec2dEEEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 80056ae:	b590      	push	{r4, r7, lr}
 80056b0:	b085      	sub	sp, #20
 80056b2:	af00      	add	r7, sp, #0
 80056b4:	60f8      	str	r0, [r7, #12]
 80056b6:	60b9      	str	r1, [r7, #8]
 80056b8:	607a      	str	r2, [r7, #4]
 80056ba:	603b      	str	r3, [r7, #0]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f7fe ffd2 	bl	8004666 <_ZSt7forwardISt10shared_ptrIN4tama7TextureEEEOT_RNSt16remove_referenceIS4_E4typeE>
 80056c2:	4604      	mov	r4, r0
 80056c4:	6838      	ldr	r0, [r7, #0]
 80056c6:	f7fe ffd9 	bl	800467c <_ZSt7forwardIN4tama5Vec2dEEOT_RNSt16remove_referenceIS2_E4typeE>
 80056ca:	4603      	mov	r3, r0
 80056cc:	4622      	mov	r2, r4
 80056ce:	68b9      	ldr	r1, [r7, #8]
 80056d0:	68f8      	ldr	r0, [r7, #12]
 80056d2:	f000 f99b 	bl	8005a0c <_ZN9__gnu_cxx13new_allocatorIN4tama6SpriteEE9constructIS2_JSt10shared_ptrINS1_7TextureEENS1_5Vec2dEEEEvPT_DpOT0_>
 80056d6:	bf00      	nop
 80056d8:	3714      	adds	r7, #20
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd90      	pop	{r4, r7, pc}

080056de <_ZNSt15__allocated_ptrISaIN4tama6SpriteEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 80056de:	b480      	push	{r7}
 80056e0:	b083      	sub	sp, #12
 80056e2:	af00      	add	r7, sp, #0
 80056e4:	6078      	str	r0, [r7, #4]
 80056e6:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2200      	movs	r2, #0
 80056ec:	605a      	str	r2, [r3, #4]
	return *this;
 80056ee:	687b      	ldr	r3, [r7, #4]
      }
 80056f0:	4618      	mov	r0, r3
 80056f2:	370c      	adds	r7, #12
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr

080056fc <_ZSt4moveIRNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
 80056fc:	b480      	push	{r7}
 80056fe:	b083      	sub	sp, #12
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	4618      	mov	r0, r3
 8005708:	370c      	adds	r7, #12
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr

08005712 <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>:
        struct _Deleter
 8005712:	b580      	push	{r7, lr}
 8005714:	b082      	sub	sp, #8
 8005716:	af00      	add	r7, sp, #0
 8005718:	6078      	str	r0, [r7, #4]
 800571a:	6039      	str	r1, [r7, #0]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	683a      	ldr	r2, [r7, #0]
 8005720:	4611      	mov	r1, r2
 8005722:	4618      	mov	r0, r3
 8005724:	f7ff ff7f 	bl	8005626 <_ZNSaIN4tama6SpriteEEC1ERKS1_>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	4618      	mov	r0, r3
 800572c:	3708      	adds	r7, #8
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}

08005732 <_ZSt4moveIRSaIN4tama6SpriteEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8005732:	b480      	push	{r7}
 8005734:	b083      	sub	sp, #12
 8005736:	af00      	add	r7, sp, #0
 8005738:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	4618      	mov	r0, r3
 800573e:	370c      	adds	r7, #12
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr

08005748 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama6SpriteENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
 8005748:	b5b0      	push	{r4, r5, r7, lr}
 800574a:	b08a      	sub	sp, #40	; 0x28
 800574c:	af00      	add	r7, sp, #0
 800574e:	60f8      	str	r0, [r7, #12]
 8005750:	60b9      	str	r1, [r7, #8]
 8005752:	607a      	str	r2, [r7, #4]
 8005754:	603b      	str	r3, [r7, #0]
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2200      	movs	r2, #0
 800575a:	601a      	str	r2, [r3, #0]
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 800575c:	f107 031c 	add.w	r3, r7, #28
 8005760:	6839      	ldr	r1, [r7, #0]
 8005762:	4618      	mov	r0, r3
 8005764:	f000 f972 	bl	8005a4c <_ZNSaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	      auto __guard = std::__allocate_guarded(__a2);
 8005768:	f107 0314 	add.w	r3, r7, #20
 800576c:	f107 021c 	add.w	r2, r7, #28
 8005770:	4611      	mov	r1, r2
 8005772:	4618      	mov	r0, r3
 8005774:	f000 f983 	bl	8005a7e <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>
	      _Sp_cd_type* __mem = __guard.get();
 8005778:	f107 0314 	add.w	r3, r7, #20
 800577c:	4618      	mov	r0, r3
 800577e:	f000 f9a6 	bl	8005ace <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>
 8005782:	6278      	str	r0, [r7, #36]	; 0x24
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f7ff ffb9 	bl	80056fc <_ZSt4moveIRNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 800578a:	4602      	mov	r2, r0
 800578c:	f107 0320 	add.w	r3, r7, #32
 8005790:	4611      	mov	r1, r2
 8005792:	4618      	mov	r0, r3
 8005794:	f7ff ffbd 	bl	8005712 <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 8005798:	f107 0420 	add.w	r4, r7, #32
 800579c:	6838      	ldr	r0, [r7, #0]
 800579e:	f7ff ffc8 	bl	8005732 <_ZSt4moveIRSaIN4tama6SpriteEEEONSt16remove_referenceIT_E4typeEOS5_>
 80057a2:	4605      	mov	r5, r0
 80057a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a6:	4619      	mov	r1, r3
 80057a8:	2014      	movs	r0, #20
 80057aa:	f7fa fec8 	bl	800053e <_ZnwjPv>
 80057ae:	2800      	cmp	r0, #0
 80057b0:	d004      	beq.n	80057bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama6SpriteENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x74>
 80057b2:	462b      	mov	r3, r5
 80057b4:	4622      	mov	r2, r4
 80057b6:	68b9      	ldr	r1, [r7, #8]
 80057b8:	f000 f9c2 	bl	8005b40 <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>
 80057bc:	f107 0320 	add.w	r3, r7, #32
 80057c0:	4618      	mov	r0, r3
 80057c2:	f7ff fd91 	bl	80052e8 <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	      _M_pi = __mem;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057ca:	601a      	str	r2, [r3, #0]
	      __guard = nullptr;
 80057cc:	f107 0314 	add.w	r3, r7, #20
 80057d0:	2100      	movs	r1, #0
 80057d2:	4618      	mov	r0, r3
 80057d4:	f000 f9e2 	bl	8005b9c <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>
	      auto __guard = std::__allocate_guarded(__a2);
 80057d8:	f107 0314 	add.w	r3, r7, #20
 80057dc:	4618      	mov	r0, r3
 80057de:	f000 f961 	bl	8005aa4 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 80057e2:	f107 031c 	add.w	r3, r7, #28
 80057e6:	4618      	mov	r0, r3
 80057e8:	f000 f93d 	bl	8005a66 <_ZNSaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
	}
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	4618      	mov	r0, r3
 80057f0:	3728      	adds	r7, #40	; 0x28
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bdb0      	pop	{r4, r5, r7, pc}

080057f6 <_ZSt3getILj0EJPN4tama13TextureLoaderESt14default_deleteIS1_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_>:

  /// Return a const reference to the ith element of a const tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 80057f6:	b580      	push	{r7, lr}
 80057f8:	b082      	sub	sp, #8
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4618      	mov	r0, r3
 8005802:	f000 f9fa 	bl	8005bfa <_ZSt12__get_helperILj0EPN4tama13TextureLoaderEJSt14default_deleteIS1_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE>
 8005806:	4603      	mov	r3, r0
 8005808:	4618      	mov	r0, r3
 800580a:	3708      	adds	r7, #8
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}

08005810 <_ZNSt15_Sp_counted_ptrIPN4tama4TextELN9__gnu_cxx12_Lock_policyE0EEC1ES2_>:
      _Sp_counted_ptr(_Ptr __p) noexcept
 8005810:	b580      	push	{r7, lr}
 8005812:	b082      	sub	sp, #8
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
 8005818:	6039      	str	r1, [r7, #0]
      : _M_ptr(__p) { }
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	4618      	mov	r0, r3
 800581e:	f7fc fea7 	bl	8002570 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 8005822:	4a05      	ldr	r2, [pc, #20]	; (8005838 <_ZNSt15_Sp_counted_ptrIPN4tama4TextELN9__gnu_cxx12_Lock_policyE0EEC1ES2_+0x28>)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	601a      	str	r2, [r3, #0]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	683a      	ldr	r2, [r7, #0]
 800582c:	60da      	str	r2, [r3, #12]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	4618      	mov	r0, r3
 8005832:	3708      	adds	r7, #8
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}
 8005838:	0801a490 	.word	0x0801a490

0800583c <_ZNSt15_Sp_counted_ptrIPN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EEC1ES2_>:
      _Sp_counted_ptr(_Ptr __p) noexcept
 800583c:	b580      	push	{r7, lr}
 800583e:	b082      	sub	sp, #8
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
 8005844:	6039      	str	r1, [r7, #0]
      : _M_ptr(__p) { }
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	4618      	mov	r0, r3
 800584a:	f7fc fe91 	bl	8002570 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 800584e:	4a05      	ldr	r2, [pc, #20]	; (8005864 <_ZNSt15_Sp_counted_ptrIPN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EEC1ES2_+0x28>)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	601a      	str	r2, [r3, #0]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	683a      	ldr	r2, [r7, #0]
 8005858:	60da      	str	r2, [r3, #12]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	4618      	mov	r0, r3
 800585e:	3708      	adds	r7, #8
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}
 8005864:	0801a474 	.word	0x0801a474

08005868 <_ZNSt16allocator_traitsISaIN4tama4ToneEEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a) noexcept
 8005868:	b580      	push	{r7, lr}
 800586a:	b082      	sub	sp, #8
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f000 f9ce 	bl	8005c12 <_ZNK9__gnu_cxx13new_allocatorIN4tama4ToneEE8max_sizeEv>
 8005876:	4603      	mov	r3, r0
 8005878:	4618      	mov	r0, r3
 800587a:	3708      	adds	r7, #8
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}

08005880 <_ZN9__gnu_cxx13new_allocatorIN4tama4ToneEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8005880:	b580      	push	{r7, lr}
 8005882:	b084      	sub	sp, #16
 8005884:	af00      	add	r7, sp, #0
 8005886:	60f8      	str	r0, [r7, #12]
 8005888:	60b9      	str	r1, [r7, #8]
 800588a:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800588c:	68f8      	ldr	r0, [r7, #12]
 800588e:	f000 f9c0 	bl	8005c12 <_ZNK9__gnu_cxx13new_allocatorIN4tama4ToneEE8max_sizeEv>
 8005892:	4602      	mov	r2, r0
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	4293      	cmp	r3, r2
 8005898:	bf8c      	ite	hi
 800589a:	2301      	movhi	r3, #1
 800589c:	2300      	movls	r3, #0
 800589e:	b2db      	uxtb	r3, r3
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d001      	beq.n	80058a8 <_ZN9__gnu_cxx13new_allocatorIN4tama4ToneEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80058a4:	f011 fe35 	bl	8017512 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	00db      	lsls	r3, r3, #3
 80058ac:	4618      	mov	r0, r3
 80058ae:	f011 fe02 	bl	80174b6 <_Znwj>
 80058b2:	4603      	mov	r3, r0
      }
 80058b4:	4618      	mov	r0, r3
 80058b6:	3710      	adds	r7, #16
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}

080058bc <_ZNSt13move_iteratorIPN4tama4ToneEEC1ES2_>:
      move_iterator(iterator_type __i)
 80058bc:	b480      	push	{r7}
 80058be:	b083      	sub	sp, #12
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
 80058c4:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	683a      	ldr	r2, [r7, #0]
 80058ca:	601a      	str	r2, [r3, #0]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	4618      	mov	r0, r3
 80058d0:	370c      	adds	r7, #12
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr

080058da <_ZSt18uninitialized_copyISt13move_iteratorIPN4tama4ToneEES3_ET0_T_S6_S5_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 80058da:	b580      	push	{r7, lr}
 80058dc:	b086      	sub	sp, #24
 80058de:	af00      	add	r7, sp, #0
 80058e0:	60f8      	str	r0, [r7, #12]
 80058e2:	60b9      	str	r1, [r7, #8]
 80058e4:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 80058e6:	2301      	movs	r3, #1
 80058e8:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 80058ea:	687a      	ldr	r2, [r7, #4]
 80058ec:	68b9      	ldr	r1, [r7, #8]
 80058ee:	68f8      	ldr	r0, [r7, #12]
 80058f0:	f000 f99b 	bl	8005c2a <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPN4tama4ToneEES5_EET0_T_S8_S7_>
 80058f4:	4603      	mov	r3, r0
    }
 80058f6:	4618      	mov	r0, r3
 80058f8:	3718      	adds	r7, #24
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}

080058fe <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKN4tama4ToneESt6vectorIS3_SaIS3_EEEEET_SA_>:
    __miter_base(_Iterator __it)
 80058fe:	b480      	push	{r7}
 8005900:	b083      	sub	sp, #12
 8005902:	af00      	add	r7, sp, #0
 8005904:	6078      	str	r0, [r7, #4]
    { return __it; }
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	4618      	mov	r0, r3
 800590a:	370c      	adds	r7, #12
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr

08005914 <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKN4tama4ToneESt6vectorIS3_SaIS3_EEEEPS3_ET1_T0_SC_SB_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8005914:	b5b0      	push	{r4, r5, r7, lr}
 8005916:	b084      	sub	sp, #16
 8005918:	af00      	add	r7, sp, #0
 800591a:	60f8      	str	r0, [r7, #12]
 800591c:	60b9      	str	r1, [r7, #8]
 800591e:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 8005920:	68f8      	ldr	r0, [r7, #12]
 8005922:	f000 f992 	bl	8005c4a <_ZSt12__niter_baseIPKN4tama4ToneESt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS7_T0_EE>
 8005926:	4604      	mov	r4, r0
 8005928:	68b8      	ldr	r0, [r7, #8]
 800592a:	f000 f98e 	bl	8005c4a <_ZSt12__niter_baseIPKN4tama4ToneESt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS7_T0_EE>
 800592e:	4605      	mov	r5, r0
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f000 f998 	bl	8005c66 <_ZSt12__niter_baseIPN4tama4ToneEET_S3_>
 8005936:	4603      	mov	r3, r0
					     std::__niter_base(__result)));
 8005938:	461a      	mov	r2, r3
 800593a:	4629      	mov	r1, r5
 800593c:	4620      	mov	r0, r4
 800593e:	f000 f99d 	bl	8005c7c <_ZSt13__copy_move_aILb0EPKN4tama4ToneEPS1_ET1_T0_S6_S5_>
 8005942:	4603      	mov	r3, r0
    }
 8005944:	4618      	mov	r0, r3
 8005946:	3710      	adds	r7, #16
 8005948:	46bd      	mov	sp, r7
 800594a:	bdb0      	pop	{r4, r5, r7, pc}

0800594c <_ZNSt10_Head_baseILj0EPN4tama13TextureLoaderELb0EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800594c:	b480      	push	{r7}
 800594e:	b083      	sub	sp, #12
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	4618      	mov	r0, r3
 8005958:	370c      	adds	r7, #12
 800595a:	46bd      	mov	sp, r7
 800595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005960:	4770      	bx	lr

08005962 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN4tama13TextureLoaderEEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8005962:	b580      	push	{r7, lr}
 8005964:	b082      	sub	sp, #8
 8005966:	af00      	add	r7, sp, #0
 8005968:	6078      	str	r0, [r7, #4]
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f000 f998 	bl	8005ca0 <_ZNSt10_Head_baseILj1ESt14default_deleteIN4tama13TextureLoaderEELb1EE7_M_headERS4_>
 8005970:	4603      	mov	r3, r0
 8005972:	4618      	mov	r0, r3
 8005974:	3708      	adds	r7, #8
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}

0800597a <_ZN9__gnu_cxx13new_allocatorIN4tama6SpriteEEC1ERKS3_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 800597a:	b480      	push	{r7}
 800597c:	b083      	sub	sp, #12
 800597e:	af00      	add	r7, sp, #0
 8005980:	6078      	str	r0, [r7, #4]
 8005982:	6039      	str	r1, [r7, #0]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	4618      	mov	r0, r3
 8005988:	370c      	adds	r7, #12
 800598a:	46bd      	mov	sp, r7
 800598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005990:	4770      	bx	lr

08005992 <_ZNSt16allocator_traitsISaIN4tama6SpriteEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8005992:	b580      	push	{r7, lr}
 8005994:	b082      	sub	sp, #8
 8005996:	af00      	add	r7, sp, #0
 8005998:	6078      	str	r0, [r7, #4]
 800599a:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800599c:	2200      	movs	r2, #0
 800599e:	6839      	ldr	r1, [r7, #0]
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f000 f988 	bl	8005cb6 <_ZN9__gnu_cxx13new_allocatorIN4tama6SpriteEE8allocateEjPKv>
 80059a6:	4603      	mov	r3, r0
 80059a8:	4618      	mov	r0, r3
 80059aa:	3708      	adds	r7, #8
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}

080059b0 <_ZNSt15__allocated_ptrISaIN4tama6SpriteEEEC1ERS2_PS1_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b084      	sub	sp, #16
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	60f8      	str	r0, [r7, #12]
 80059b8:	60b9      	str	r1, [r7, #8]
 80059ba:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 80059bc:	68b8      	ldr	r0, [r7, #8]
 80059be:	f000 f998 	bl	8005cf2 <_ZSt11__addressofISaIN4tama6SpriteEEEPT_RS3_>
 80059c2:	4602      	mov	r2, r0
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	601a      	str	r2, [r3, #0]
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	687a      	ldr	r2, [r7, #4]
 80059cc:	605a      	str	r2, [r3, #4]
      { }
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	4618      	mov	r0, r3
 80059d2:	3710      	adds	r7, #16
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}

080059d8 <_ZNSt16allocator_traitsISaIN4tama6SpriteEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80059d8:	b580      	push	{r7, lr}
 80059da:	b084      	sub	sp, #16
 80059dc:	af00      	add	r7, sp, #0
 80059de:	60f8      	str	r0, [r7, #12]
 80059e0:	60b9      	str	r1, [r7, #8]
 80059e2:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80059e4:	687a      	ldr	r2, [r7, #4]
 80059e6:	68b9      	ldr	r1, [r7, #8]
 80059e8:	68f8      	ldr	r0, [r7, #12]
 80059ea:	f000 f98d 	bl	8005d08 <_ZN9__gnu_cxx13new_allocatorIN4tama6SpriteEE10deallocateEPS2_j>
 80059ee:	bf00      	nop
 80059f0:	3710      	adds	r7, #16
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}

080059f6 <_ZNSt15__allocated_ptrISaIN4tama6SpriteEEE10_S_raw_ptrEPS1_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 80059f6:	b480      	push	{r7}
 80059f8:	b083      	sub	sp, #12
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	6078      	str	r0, [r7, #4]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	4618      	mov	r0, r3
 8005a02:	370c      	adds	r7, #12
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr

08005a0c <_ZN9__gnu_cxx13new_allocatorIN4tama6SpriteEE9constructIS2_JSt10shared_ptrINS1_7TextureEENS1_5Vec2dEEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8005a0c:	b5b0      	push	{r4, r5, r7, lr}
 8005a0e:	b084      	sub	sp, #16
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	60f8      	str	r0, [r7, #12]
 8005a14:	60b9      	str	r1, [r7, #8]
 8005a16:	607a      	str	r2, [r7, #4]
 8005a18:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f7fe fe23 	bl	8004666 <_ZSt7forwardISt10shared_ptrIN4tama7TextureEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8005a20:	4604      	mov	r4, r0
 8005a22:	6838      	ldr	r0, [r7, #0]
 8005a24:	f7fe fe2a 	bl	800467c <_ZSt7forwardIN4tama5Vec2dEEOT_RNSt16remove_referenceIS2_E4typeE>
 8005a28:	4605      	mov	r5, r0
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	4619      	mov	r1, r3
 8005a2e:	2020      	movs	r0, #32
 8005a30:	f7fa fd85 	bl	800053e <_ZnwjPv>
 8005a34:	4603      	mov	r3, r0
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d004      	beq.n	8005a44 <_ZN9__gnu_cxx13new_allocatorIN4tama6SpriteEE9constructIS2_JSt10shared_ptrINS1_7TextureEENS1_5Vec2dEEEEvPT_DpOT0_+0x38>
 8005a3a:	462a      	mov	r2, r5
 8005a3c:	4621      	mov	r1, r4
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f000 fdc2 	bl	80065c8 <_ZN4tama6SpriteC1ERKSt10shared_ptrINS_7TextureEERKNS_5Vec2dE>
 8005a44:	bf00      	nop
 8005a46:	3710      	adds	r7, #16
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bdb0      	pop	{r4, r5, r7, pc}

08005a4c <_ZNSaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) throw() { }
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b082      	sub	sp, #8
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
 8005a54:	6039      	str	r1, [r7, #0]
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f000 f963 	bl	8005d22 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3708      	adds	r7, #8
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}

08005a66 <_ZNSaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>:
      ~allocator() throw() { }
 8005a66:	b580      	push	{r7, lr}
 8005a68:	b082      	sub	sp, #8
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	6078      	str	r0, [r7, #4]
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f000 f962 	bl	8005d38 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	4618      	mov	r0, r3
 8005a78:	3708      	adds	r7, #8
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}

08005a7e <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>:
    __allocate_guarded(_Alloc& __a)
 8005a7e:	b580      	push	{r7, lr}
 8005a80:	b082      	sub	sp, #8
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	6078      	str	r0, [r7, #4]
 8005a86:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 8005a88:	2101      	movs	r1, #1
 8005a8a:	6838      	ldr	r0, [r7, #0]
 8005a8c:	f000 f95f 	bl	8005d4e <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>
 8005a90:	4603      	mov	r3, r0
 8005a92:	461a      	mov	r2, r3
 8005a94:	6839      	ldr	r1, [r7, #0]
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f000 f968 	bl	8005d6c <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
    }
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	3708      	adds	r7, #8
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}

08005aa4 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>:
      ~__allocated_ptr()
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b082      	sub	sp, #8
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d007      	beq.n	8005ac4 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6818      	ldr	r0, [r3, #0]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	2201      	movs	r2, #1
 8005abe:	4619      	mov	r1, r3
 8005ac0:	f000 f968 	bl	8005d94 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>
      }
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3708      	adds	r7, #8
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}

08005ace <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 8005ace:	b580      	push	{r7, lr}
 8005ad0:	b082      	sub	sp, #8
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	6078      	str	r0, [r7, #4]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	4618      	mov	r0, r3
 8005adc:	f000 f969 	bl	8005db2 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3708      	adds	r7, #8
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}

08005aea <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, false>
 8005aea:	b580      	push	{r7, lr}
 8005aec:	b082      	sub	sp, #8
 8005aee:	af00      	add	r7, sp, #0
 8005af0:	6078      	str	r0, [r7, #4]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	4618      	mov	r0, r3
 8005af6:	f7ff fbf7 	bl	80052e8 <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	4618      	mov	r0, r3
 8005afe:	3708      	adds	r7, #8
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}

08005b04 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama6SpriteEELb1EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, true> : private _Tp
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b082      	sub	sp, #8
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f7fe ff8f 	bl	8004a30 <_ZNSaIN4tama6SpriteEED1Ev>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	4618      	mov	r0, r3
 8005b16:	3708      	adds	r7, #8
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}

08005b1c <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>:
      class _Impl : _Sp_ebo_helper<0, _Deleter>, _Sp_ebo_helper<1, _Alloc>
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b082      	sub	sp, #8
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	3301      	adds	r3, #1
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f7ff ffeb 	bl	8005b04 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama6SpriteEELb1EED1Ev>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4618      	mov	r0, r3
 8005b32:	f7ff ffda 	bl	8005aea <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3708      	adds	r7, #8
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}

08005b40 <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>:
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 8005b40:	b590      	push	{r4, r7, lr}
 8005b42:	b087      	sub	sp, #28
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	60f8      	str	r0, [r7, #12]
 8005b48:	60b9      	str	r1, [r7, #8]
 8005b4a:	607a      	str	r2, [r7, #4]
 8005b4c:	603b      	str	r3, [r7, #0]
      : _M_impl(__p, std::move(__d), __a) { }
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	4618      	mov	r0, r3
 8005b52:	f7fc fd0d 	bl	8002570 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 8005b56:	4a10      	ldr	r2, [pc, #64]	; (8005b98 <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_+0x58>)
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	601a      	str	r2, [r3, #0]
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f103 040c 	add.w	r4, r3, #12
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f7ff fdca 	bl	80056fc <_ZSt4moveIRNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 8005b68:	4602      	mov	r2, r0
 8005b6a:	f107 0314 	add.w	r3, r7, #20
 8005b6e:	4611      	mov	r1, r2
 8005b70:	4618      	mov	r0, r3
 8005b72:	f7ff fdce 	bl	8005712 <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 8005b76:	f107 0214 	add.w	r2, r7, #20
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	68b9      	ldr	r1, [r7, #8]
 8005b7e:	4620      	mov	r0, r4
 8005b80:	f000 f922 	bl	8005dc8 <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>
 8005b84:	f107 0314 	add.w	r3, r7, #20
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f7ff fbad 	bl	80052e8 <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	4618      	mov	r0, r3
 8005b92:	371c      	adds	r7, #28
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd90      	pop	{r4, r7, pc}
 8005b98:	0801a458 	.word	0x0801a458

08005b9c <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 8005b9c:	b480      	push	{r7}
 8005b9e:	b083      	sub	sp, #12
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
 8005ba4:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	605a      	str	r2, [r3, #4]
	return *this;
 8005bac:	687b      	ldr	r3, [r7, #4]
      }
 8005bae:	4618      	mov	r0, r3
 8005bb0:	370c      	adds	r7, #12
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb8:	4770      	bx	lr

08005bba <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>:
          void operator()(typename _Alloc::value_type* __ptr)
 8005bba:	b590      	push	{r4, r7, lr}
 8005bbc:	b085      	sub	sp, #20
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	6078      	str	r0, [r7, #4]
 8005bc2:	6039      	str	r1, [r7, #0]
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 8005bc4:	6879      	ldr	r1, [r7, #4]
 8005bc6:	f107 0308 	add.w	r3, r7, #8
 8005bca:	683a      	ldr	r2, [r7, #0]
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f7ff feef 	bl	80059b0 <_ZNSt15__allocated_ptrISaIN4tama6SpriteEEEC1ERS2_PS1_>
	    allocator_traits<_Alloc>::destroy(_M_alloc, __guard.get());
 8005bd2:	687c      	ldr	r4, [r7, #4]
 8005bd4:	f107 0308 	add.w	r3, r7, #8
 8005bd8:	4618      	mov	r0, r3
 8005bda:	f7ff fd5a 	bl	8005692 <_ZNSt15__allocated_ptrISaIN4tama6SpriteEEE3getEv>
 8005bde:	4603      	mov	r3, r0
 8005be0:	4619      	mov	r1, r3
 8005be2:	4620      	mov	r0, r4
 8005be4:	f000 f90e 	bl	8005e04 <_ZNSt16allocator_traitsISaIN4tama6SpriteEEE7destroyIS1_EEvRS2_PT_>
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 8005be8:	f107 0308 	add.w	r3, r7, #8
 8005bec:	4618      	mov	r0, r3
 8005bee:	f7ff fd3b 	bl	8005668 <_ZNSt15__allocated_ptrISaIN4tama6SpriteEEED1Ev>
          }
 8005bf2:	bf00      	nop
 8005bf4:	3714      	adds	r7, #20
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd90      	pop	{r4, r7, pc}

08005bfa <_ZSt12__get_helperILj0EPN4tama13TextureLoaderEJSt14default_deleteIS1_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8005bfa:	b580      	push	{r7, lr}
 8005bfc:	b082      	sub	sp, #8
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f000 f90b 	bl	8005e1e <_ZNSt11_Tuple_implILj0EJPN4tama13TextureLoaderESt14default_deleteIS1_EEE7_M_headERKS5_>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3708      	adds	r7, #8
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}

08005c12 <_ZNK9__gnu_cxx13new_allocatorIN4tama4ToneEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8005c12:	b480      	push	{r7}
 8005c14:	b083      	sub	sp, #12
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8005c1a:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8005c1e:	4618      	mov	r0, r3
 8005c20:	370c      	adds	r7, #12
 8005c22:	46bd      	mov	sp, r7
 8005c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c28:	4770      	bx	lr

08005c2a <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPN4tama4ToneEES5_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8005c2a:	b580      	push	{r7, lr}
 8005c2c:	b084      	sub	sp, #16
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	60f8      	str	r0, [r7, #12]
 8005c32:	60b9      	str	r1, [r7, #8]
 8005c34:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8005c36:	687a      	ldr	r2, [r7, #4]
 8005c38:	68b9      	ldr	r1, [r7, #8]
 8005c3a:	68f8      	ldr	r0, [r7, #12]
 8005c3c:	f000 f8fc 	bl	8005e38 <_ZSt4copyISt13move_iteratorIPN4tama4ToneEES3_ET0_T_S6_S5_>
 8005c40:	4603      	mov	r3, r0
 8005c42:	4618      	mov	r0, r3
 8005c44:	3710      	adds	r7, #16
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}

08005c4a <_ZSt12__niter_baseIPKN4tama4ToneESt6vectorIS1_SaIS1_EEET_N9__gnu_cxx17__normal_iteratorIS7_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8005c4a:	b580      	push	{r7, lr}
 8005c4c:	b082      	sub	sp, #8
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 8005c52:	1d3b      	adds	r3, r7, #4
 8005c54:	4618      	mov	r0, r3
 8005c56:	f000 f907 	bl	8005e68 <_ZNK9__gnu_cxx17__normal_iteratorIPKN4tama4ToneESt6vectorIS2_SaIS2_EEE4baseEv>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3708      	adds	r7, #8
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}

08005c66 <_ZSt12__niter_baseIPN4tama4ToneEET_S3_>:
    __niter_base(_Iterator __it)
 8005c66:	b480      	push	{r7}
 8005c68:	b083      	sub	sp, #12
 8005c6a:	af00      	add	r7, sp, #0
 8005c6c:	6078      	str	r0, [r7, #4]
    { return __it; }
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	4618      	mov	r0, r3
 8005c72:	370c      	adds	r7, #12
 8005c74:	46bd      	mov	sp, r7
 8005c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7a:	4770      	bx	lr

08005c7c <_ZSt13__copy_move_aILb0EPKN4tama4ToneEPS1_ET1_T0_S6_S5_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b086      	sub	sp, #24
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	60f8      	str	r0, [r7, #12]
 8005c84:	60b9      	str	r1, [r7, #8]
 8005c86:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueTypeI)
 8005c88:	2301      	movs	r3, #1
 8005c8a:	75fb      	strb	r3, [r7, #23]
	                      _Category>::__copy_m(__first, __last, __result);
 8005c8c:	687a      	ldr	r2, [r7, #4]
 8005c8e:	68b9      	ldr	r1, [r7, #8]
 8005c90:	68f8      	ldr	r0, [r7, #12]
 8005c92:	f000 f8f4 	bl	8005e7e <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIN4tama4ToneEEEPT_PKS5_S8_S6_>
 8005c96:	4603      	mov	r3, r0
    }
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3718      	adds	r7, #24
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}

08005ca0 <_ZNSt10_Head_baseILj1ESt14default_deleteIN4tama13TextureLoaderEELb1EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b; }
 8005ca0:	b480      	push	{r7}
 8005ca2:	b083      	sub	sp, #12
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	4618      	mov	r0, r3
 8005cac:	370c      	adds	r7, #12
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb4:	4770      	bx	lr

08005cb6 <_ZN9__gnu_cxx13new_allocatorIN4tama6SpriteEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8005cb6:	b580      	push	{r7, lr}
 8005cb8:	b084      	sub	sp, #16
 8005cba:	af00      	add	r7, sp, #0
 8005cbc:	60f8      	str	r0, [r7, #12]
 8005cbe:	60b9      	str	r1, [r7, #8]
 8005cc0:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8005cc2:	68f8      	ldr	r0, [r7, #12]
 8005cc4:	f000 f8f8 	bl	8005eb8 <_ZNK9__gnu_cxx13new_allocatorIN4tama6SpriteEE8max_sizeEv>
 8005cc8:	4602      	mov	r2, r0
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	bf8c      	ite	hi
 8005cd0:	2301      	movhi	r3, #1
 8005cd2:	2300      	movls	r3, #0
 8005cd4:	b2db      	uxtb	r3, r3
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d001      	beq.n	8005cde <_ZN9__gnu_cxx13new_allocatorIN4tama6SpriteEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8005cda:	f011 fc1a 	bl	8017512 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	015b      	lsls	r3, r3, #5
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f011 fbe7 	bl	80174b6 <_Znwj>
 8005ce8:	4603      	mov	r3, r0
      }
 8005cea:	4618      	mov	r0, r3
 8005cec:	3710      	adds	r7, #16
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}

08005cf2 <_ZSt11__addressofISaIN4tama6SpriteEEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8005cf2:	b480      	push	{r7}
 8005cf4:	b083      	sub	sp, #12
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	370c      	adds	r7, #12
 8005d00:	46bd      	mov	sp, r7
 8005d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d06:	4770      	bx	lr

08005d08 <_ZN9__gnu_cxx13new_allocatorIN4tama6SpriteEE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b084      	sub	sp, #16
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	60f8      	str	r0, [r7, #12]
 8005d10:	60b9      	str	r1, [r7, #8]
 8005d12:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8005d14:	68b8      	ldr	r0, [r7, #8]
 8005d16:	f011 fbe7 	bl	80174e8 <_ZdlPv>
      }
 8005d1a:	bf00      	nop
 8005d1c:	3710      	adds	r7, #16
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}

08005d22 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8005d22:	b480      	push	{r7}
 8005d24:	b083      	sub	sp, #12
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	6078      	str	r0, [r7, #4]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	370c      	adds	r7, #12
 8005d30:	46bd      	mov	sp, r7
 8005d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d36:	4770      	bx	lr

08005d38 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8005d38:	b480      	push	{r7}
 8005d3a:	b083      	sub	sp, #12
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	4618      	mov	r0, r3
 8005d44:	370c      	adds	r7, #12
 8005d46:	46bd      	mov	sp, r7
 8005d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4c:	4770      	bx	lr

08005d4e <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>:
      allocate(allocator_type& __a, size_type __n)
 8005d4e:	b580      	push	{r7, lr}
 8005d50:	b082      	sub	sp, #8
 8005d52:	af00      	add	r7, sp, #0
 8005d54:	6078      	str	r0, [r7, #4]
 8005d56:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8005d58:	2200      	movs	r2, #0
 8005d5a:	6839      	ldr	r1, [r7, #0]
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	f000 f8b7 	bl	8005ed0 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>
 8005d62:	4603      	mov	r3, r0
 8005d64:	4618      	mov	r0, r3
 8005d66:	3708      	adds	r7, #8
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}

08005d6c <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b084      	sub	sp, #16
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	60f8      	str	r0, [r7, #12]
 8005d74:	60b9      	str	r1, [r7, #8]
 8005d76:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 8005d78:	68b8      	ldr	r0, [r7, #8]
 8005d7a:	f000 f8ca 	bl	8005f12 <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>
 8005d7e:	4602      	mov	r2, r0
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	601a      	str	r2, [r3, #0]
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	687a      	ldr	r2, [r7, #4]
 8005d88:	605a      	str	r2, [r3, #4]
      { }
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3710      	adds	r7, #16
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}

08005d94 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b084      	sub	sp, #16
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	60f8      	str	r0, [r7, #12]
 8005d9c:	60b9      	str	r1, [r7, #8]
 8005d9e:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8005da0:	687a      	ldr	r2, [r7, #4]
 8005da2:	68b9      	ldr	r1, [r7, #8]
 8005da4:	68f8      	ldr	r0, [r7, #12]
 8005da6:	f000 f8bf 	bl	8005f28 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>
 8005daa:	bf00      	nop
 8005dac:	3710      	adds	r7, #16
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}

08005db2 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 8005db2:	b480      	push	{r7}
 8005db4:	b083      	sub	sp, #12
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	6078      	str	r0, [r7, #4]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	370c      	adds	r7, #12
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr

08005dc8 <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 8005dc8:	b590      	push	{r4, r7, lr}
 8005dca:	b085      	sub	sp, #20
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	60f8      	str	r0, [r7, #12]
 8005dd0:	60b9      	str	r1, [r7, #8]
 8005dd2:	607a      	str	r2, [r7, #4]
 8005dd4:	603b      	str	r3, [r7, #0]
	: _M_ptr(__p), _Del_base(std::move(__d)), _Alloc_base(__a)
 8005dd6:	68fc      	ldr	r4, [r7, #12]
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f7ff fc8f 	bl	80056fc <_ZSt4moveIRNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 8005dde:	4603      	mov	r3, r0
 8005de0:	4619      	mov	r1, r3
 8005de2:	4620      	mov	r0, r4
 8005de4:	f000 f8ad 	bl	8005f42 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	3301      	adds	r3, #1
 8005dec:	6839      	ldr	r1, [r7, #0]
 8005dee:	4618      	mov	r0, r3
 8005df0:	f000 f8ba 	bl	8005f68 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama6SpriteEELb1EEC1ERKS2_>
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	68ba      	ldr	r2, [r7, #8]
 8005df8:	605a      	str	r2, [r3, #4]
	{ }
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	3714      	adds	r7, #20
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd90      	pop	{r4, r7, pc}

08005e04 <_ZNSt16allocator_traitsISaIN4tama6SpriteEEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b082      	sub	sp, #8
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 8005e0e:	6839      	ldr	r1, [r7, #0]
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f000 f8b7 	bl	8005f84 <_ZN9__gnu_cxx13new_allocatorIN4tama6SpriteEE7destroyIS2_EEvPT_>
 8005e16:	bf00      	nop
 8005e18:	3708      	adds	r7, #8
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}

08005e1e <_ZNSt11_Tuple_implILj0EJPN4tama13TextureLoaderESt14default_deleteIS1_EEE7_M_headERKS5_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8005e1e:	b580      	push	{r7, lr}
 8005e20:	b082      	sub	sp, #8
 8005e22:	af00      	add	r7, sp, #0
 8005e24:	6078      	str	r0, [r7, #4]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	4618      	mov	r0, r3
 8005e2a:	f000 f8b7 	bl	8005f9c <_ZNSt10_Head_baseILj0EPN4tama13TextureLoaderELb0EE7_M_headERKS3_>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	4618      	mov	r0, r3
 8005e32:	3708      	adds	r7, #8
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}

08005e38 <_ZSt4copyISt13move_iteratorIPN4tama4ToneEES3_ET0_T_S6_S5_>:
    copy(_II __first, _II __last, _OI __result)
 8005e38:	b590      	push	{r4, r7, lr}
 8005e3a:	b085      	sub	sp, #20
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	60f8      	str	r0, [r7, #12]
 8005e40:	60b9      	str	r1, [r7, #8]
 8005e42:	607a      	str	r2, [r7, #4]
	      (std::__miter_base(__first), std::__miter_base(__last),
 8005e44:	68f8      	ldr	r0, [r7, #12]
 8005e46:	f000 f8b4 	bl	8005fb2 <_ZSt12__miter_baseIPN4tama4ToneEEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8005e4a:	4604      	mov	r4, r0
 8005e4c:	68b8      	ldr	r0, [r7, #8]
 8005e4e:	f000 f8b0 	bl	8005fb2 <_ZSt12__miter_baseIPN4tama4ToneEEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8005e52:	4603      	mov	r3, r0
	       __result));
 8005e54:	687a      	ldr	r2, [r7, #4]
 8005e56:	4619      	mov	r1, r3
 8005e58:	4620      	mov	r0, r4
 8005e5a:	f000 f8bb 	bl	8005fd4 <_ZSt14__copy_move_a2ILb1EPN4tama4ToneES2_ET1_T0_S4_S3_>
 8005e5e:	4603      	mov	r3, r0
    }
 8005e60:	4618      	mov	r0, r3
 8005e62:	3714      	adds	r7, #20
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd90      	pop	{r4, r7, pc}

08005e68 <_ZNK9__gnu_cxx17__normal_iteratorIPKN4tama4ToneESt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8005e68:	b480      	push	{r7}
 8005e6a:	b083      	sub	sp, #12
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	4618      	mov	r0, r3
 8005e74:	370c      	adds	r7, #12
 8005e76:	46bd      	mov	sp, r7
 8005e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7c:	4770      	bx	lr

08005e7e <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIN4tama4ToneEEEPT_PKS5_S8_S6_>:
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8005e7e:	b580      	push	{r7, lr}
 8005e80:	b086      	sub	sp, #24
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	60f8      	str	r0, [r7, #12]
 8005e86:	60b9      	str	r1, [r7, #8]
 8005e88:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8005e8a:	68ba      	ldr	r2, [r7, #8]
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	1ad3      	subs	r3, r2, r3
 8005e90:	10db      	asrs	r3, r3, #3
 8005e92:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d006      	beq.n	8005ea8 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIN4tama4ToneEEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	00db      	lsls	r3, r3, #3
 8005e9e:	461a      	mov	r2, r3
 8005ea0:	68f9      	ldr	r1, [r7, #12]
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f011 fdff 	bl	8017aa6 <memmove>
	  return __result + _Num;
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	00db      	lsls	r3, r3, #3
 8005eac:	687a      	ldr	r2, [r7, #4]
 8005eae:	4413      	add	r3, r2
	}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3718      	adds	r7, #24
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}

08005eb8 <_ZNK9__gnu_cxx13new_allocatorIN4tama6SpriteEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8005eb8:	b480      	push	{r7}
 8005eba:	b083      	sub	sp, #12
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8005ec0:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	370c      	adds	r7, #12
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ece:	4770      	bx	lr

08005ed0 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b084      	sub	sp, #16
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	60f8      	str	r0, [r7, #12]
 8005ed8:	60b9      	str	r1, [r7, #8]
 8005eda:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8005edc:	68f8      	ldr	r0, [r7, #12]
 8005ede:	f000 f895 	bl	800600c <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	bf8c      	ite	hi
 8005eea:	2301      	movhi	r3, #1
 8005eec:	2300      	movls	r3, #0
 8005eee:	b2db      	uxtb	r3, r3
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d001      	beq.n	8005ef8 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8005ef4:	f011 fb0d 	bl	8017512 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8005ef8:	68ba      	ldr	r2, [r7, #8]
 8005efa:	4613      	mov	r3, r2
 8005efc:	009b      	lsls	r3, r3, #2
 8005efe:	4413      	add	r3, r2
 8005f00:	009b      	lsls	r3, r3, #2
 8005f02:	4618      	mov	r0, r3
 8005f04:	f011 fad7 	bl	80174b6 <_Znwj>
 8005f08:	4603      	mov	r3, r0
      }
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3710      	adds	r7, #16
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}

08005f12 <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8005f12:	b480      	push	{r7}
 8005f14:	b083      	sub	sp, #12
 8005f16:	af00      	add	r7, sp, #0
 8005f18:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	370c      	adds	r7, #12
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr

08005f28 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>:
      deallocate(pointer __p, size_type)
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b084      	sub	sp, #16
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	60f8      	str	r0, [r7, #12]
 8005f30:	60b9      	str	r1, [r7, #8]
 8005f32:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8005f34:	68b8      	ldr	r0, [r7, #8]
 8005f36:	f011 fad7 	bl	80174e8 <_ZdlPv>
      }
 8005f3a:	bf00      	nop
 8005f3c:	3710      	adds	r7, #16
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}

08005f42 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>:
      explicit _Sp_ebo_helper(_Tp&& __tp) : _M_tp(std::move(__tp)) { }
 8005f42:	b590      	push	{r4, r7, lr}
 8005f44:	b083      	sub	sp, #12
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	6078      	str	r0, [r7, #4]
 8005f4a:	6039      	str	r1, [r7, #0]
 8005f4c:	687c      	ldr	r4, [r7, #4]
 8005f4e:	6838      	ldr	r0, [r7, #0]
 8005f50:	f7ff fbd4 	bl	80056fc <_ZSt4moveIRNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 8005f54:	4603      	mov	r3, r0
 8005f56:	4619      	mov	r1, r3
 8005f58:	4620      	mov	r0, r4
 8005f5a:	f7ff fbda 	bl	8005712 <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	4618      	mov	r0, r3
 8005f62:	370c      	adds	r7, #12
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd90      	pop	{r4, r7, pc}

08005f68 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama6SpriteEELb1EEC1ERKS2_>:
      explicit _Sp_ebo_helper(const _Tp& __tp) : _Tp(__tp) { }
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b082      	sub	sp, #8
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	6039      	str	r1, [r7, #0]
 8005f72:	6839      	ldr	r1, [r7, #0]
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f7ff fb56 	bl	8005626 <_ZNSaIN4tama6SpriteEEC1ERKS1_>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3708      	adds	r7, #8
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}

08005f84 <_ZN9__gnu_cxx13new_allocatorIN4tama6SpriteEE7destroyIS2_EEvPT_>:
	destroy(_Up* __p) { __p->~_Up(); }
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b082      	sub	sp, #8
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
 8005f8c:	6039      	str	r1, [r7, #0]
 8005f8e:	6838      	ldr	r0, [r7, #0]
 8005f90:	f7fd fc7c 	bl	800388c <_ZN4tama6SpriteD1Ev>
 8005f94:	bf00      	nop
 8005f96:	3708      	adds	r7, #8
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}

08005f9c <_ZNSt10_Head_baseILj0EPN4tama13TextureLoaderELb0EE7_M_headERKS3_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8005f9c:	b480      	push	{r7}
 8005f9e:	b083      	sub	sp, #12
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	370c      	adds	r7, #12
 8005faa:	46bd      	mov	sp, r7
 8005fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb0:	4770      	bx	lr

08005fb2 <_ZSt12__miter_baseIPN4tama4ToneEEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
 8005fb2:	b580      	push	{r7, lr}
 8005fb4:	b082      	sub	sp, #8
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 8005fba:	1d3b      	adds	r3, r7, #4
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	f000 f833 	bl	8006028 <_ZNKSt13move_iteratorIPN4tama4ToneEE4baseEv>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f000 f83b 	bl	8006040 <_ZSt12__miter_baseIPN4tama4ToneEET_S3_>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3708      	adds	r7, #8
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}

08005fd4 <_ZSt14__copy_move_a2ILb1EPN4tama4ToneES2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8005fd4:	b5b0      	push	{r4, r5, r7, lr}
 8005fd6:	b084      	sub	sp, #16
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	60f8      	str	r0, [r7, #12]
 8005fdc:	60b9      	str	r1, [r7, #8]
 8005fde:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 8005fe0:	68f8      	ldr	r0, [r7, #12]
 8005fe2:	f7ff fe40 	bl	8005c66 <_ZSt12__niter_baseIPN4tama4ToneEET_S3_>
 8005fe6:	4604      	mov	r4, r0
 8005fe8:	68b8      	ldr	r0, [r7, #8]
 8005fea:	f7ff fe3c 	bl	8005c66 <_ZSt12__niter_baseIPN4tama4ToneEET_S3_>
 8005fee:	4605      	mov	r5, r0
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f7ff fe38 	bl	8005c66 <_ZSt12__niter_baseIPN4tama4ToneEET_S3_>
 8005ff6:	4603      	mov	r3, r0
					     std::__niter_base(__result)));
 8005ff8:	461a      	mov	r2, r3
 8005ffa:	4629      	mov	r1, r5
 8005ffc:	4620      	mov	r0, r4
 8005ffe:	f000 f82a 	bl	8006056 <_ZSt13__copy_move_aILb1EPN4tama4ToneES2_ET1_T0_S4_S3_>
 8006002:	4603      	mov	r3, r0
    }
 8006004:	4618      	mov	r0, r3
 8006006:	3710      	adds	r7, #16
 8006008:	46bd      	mov	sp, r7
 800600a:	bdb0      	pop	{r4, r5, r7, pc}

0800600c <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800600c:	b480      	push	{r7}
 800600e:	b083      	sub	sp, #12
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8006014:	4b03      	ldr	r3, [pc, #12]	; (8006024 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv+0x18>)
 8006016:	4618      	mov	r0, r3
 8006018:	370c      	adds	r7, #12
 800601a:	46bd      	mov	sp, r7
 800601c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006020:	4770      	bx	lr
 8006022:	bf00      	nop
 8006024:	0ccccccc 	.word	0x0ccccccc

08006028 <_ZNKSt13move_iteratorIPN4tama4ToneEE4baseEv>:
      base() const
 8006028:	b480      	push	{r7}
 800602a:	b083      	sub	sp, #12
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4618      	mov	r0, r3
 8006036:	370c      	adds	r7, #12
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr

08006040 <_ZSt12__miter_baseIPN4tama4ToneEET_S3_>:
    __miter_base(_Iterator __it)
 8006040:	b480      	push	{r7}
 8006042:	b083      	sub	sp, #12
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
    { return __it; }
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	4618      	mov	r0, r3
 800604c:	370c      	adds	r7, #12
 800604e:	46bd      	mov	sp, r7
 8006050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006054:	4770      	bx	lr

08006056 <_ZSt13__copy_move_aILb1EPN4tama4ToneES2_ET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8006056:	b580      	push	{r7, lr}
 8006058:	b086      	sub	sp, #24
 800605a:	af00      	add	r7, sp, #0
 800605c:	60f8      	str	r0, [r7, #12]
 800605e:	60b9      	str	r1, [r7, #8]
 8006060:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueTypeI)
 8006062:	2301      	movs	r3, #1
 8006064:	75fb      	strb	r3, [r7, #23]
	                      _Category>::__copy_m(__first, __last, __result);
 8006066:	687a      	ldr	r2, [r7, #4]
 8006068:	68b9      	ldr	r1, [r7, #8]
 800606a:	68f8      	ldr	r0, [r7, #12]
 800606c:	f000 f805 	bl	800607a <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIN4tama4ToneEEEPT_PKS5_S8_S6_>
 8006070:	4603      	mov	r3, r0
    }
 8006072:	4618      	mov	r0, r3
 8006074:	3718      	adds	r7, #24
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}

0800607a <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIN4tama4ToneEEEPT_PKS5_S8_S6_>:
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800607a:	b580      	push	{r7, lr}
 800607c:	b086      	sub	sp, #24
 800607e:	af00      	add	r7, sp, #0
 8006080:	60f8      	str	r0, [r7, #12]
 8006082:	60b9      	str	r1, [r7, #8]
 8006084:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8006086:	68ba      	ldr	r2, [r7, #8]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	1ad3      	subs	r3, r2, r3
 800608c:	10db      	asrs	r3, r3, #3
 800608e:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d006      	beq.n	80060a4 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIN4tama4ToneEEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	00db      	lsls	r3, r3, #3
 800609a:	461a      	mov	r2, r3
 800609c:	68f9      	ldr	r1, [r7, #12]
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f011 fd01 	bl	8017aa6 <memmove>
	  return __result + _Num;
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	00db      	lsls	r3, r3, #3
 80060a8:	687a      	ldr	r2, [r7, #4]
 80060aa:	4413      	add	r3, r2
	}
 80060ac:	4618      	mov	r0, r3
 80060ae:	3718      	adds	r7, #24
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}

080060b4 <_ZNSt15_Sp_counted_ptrIPN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b082      	sub	sp, #8
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	4a05      	ldr	r2, [pc, #20]	; (80060d4 <_ZNSt15_Sp_counted_ptrIPN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EED1Ev+0x20>)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	601a      	str	r2, [r3, #0]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	4618      	mov	r0, r3
 80060c6:	f7fb ff09 	bl	8001edc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	4618      	mov	r0, r3
 80060ce:	3708      	adds	r7, #8
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}
 80060d4:	0801a474 	.word	0x0801a474

080060d8 <_ZNSt15_Sp_counted_ptrIPN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 80060d8:	b580      	push	{r7, lr}
 80060da:	b082      	sub	sp, #8
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f7ff ffe7 	bl	80060b4 <_ZNSt15_Sp_counted_ptrIPN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80060e6:	2110      	movs	r1, #16
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f011 f9e2 	bl	80174b2 <_ZdlPvj>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	4618      	mov	r0, r3
 80060f2:	3708      	adds	r7, #8
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}

080060f8 <_ZNSt15_Sp_counted_ptrIPN4tama4TextELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b082      	sub	sp, #8
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	4a05      	ldr	r2, [pc, #20]	; (8006118 <_ZNSt15_Sp_counted_ptrIPN4tama4TextELN9__gnu_cxx12_Lock_policyE0EED1Ev+0x20>)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	601a      	str	r2, [r3, #0]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	4618      	mov	r0, r3
 800610a:	f7fb fee7 	bl	8001edc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	4618      	mov	r0, r3
 8006112:	3708      	adds	r7, #8
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}
 8006118:	0801a490 	.word	0x0801a490

0800611c <_ZNSt15_Sp_counted_ptrIPN4tama4TextELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 800611c:	b580      	push	{r7, lr}
 800611e:	b082      	sub	sp, #8
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f7ff ffe7 	bl	80060f8 <_ZNSt15_Sp_counted_ptrIPN4tama4TextELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800612a:	2110      	movs	r1, #16
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f011 f9c0 	bl	80174b2 <_ZdlPvj>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	4618      	mov	r0, r3
 8006136:	3708      	adds	r7, #8
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}

0800613c <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:
      ~_Sp_counted_deleter() noexcept { }
 800613c:	b580      	push	{r7, lr}
 800613e:	b082      	sub	sp, #8
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
 8006144:	4a08      	ldr	r2, [pc, #32]	; (8006168 <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev+0x2c>)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	601a      	str	r2, [r3, #0]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	330c      	adds	r3, #12
 800614e:	4618      	mov	r0, r3
 8006150:	f7ff fce4 	bl	8005b1c <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	4618      	mov	r0, r3
 8006158:	f7fb fec0 	bl	8001edc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	4618      	mov	r0, r3
 8006160:	3708      	adds	r7, #8
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}
 8006166:	bf00      	nop
 8006168:	0801a458 	.word	0x0801a458

0800616c <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
 800616c:	b580      	push	{r7, lr}
 800616e:	b082      	sub	sp, #8
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f7ff ffe1 	bl	800613c <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
 800617a:	2114      	movs	r1, #20
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	f011 f998 	bl	80174b2 <_ZdlPvj>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	4618      	mov	r0, r3
 8006186:	3708      	adds	r7, #8
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}

0800618c <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      _M_dispose() noexcept
 800618c:	b580      	push	{r7, lr}
 800618e:	b082      	sub	sp, #8
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
      { _M_impl._M_del()(_M_impl._M_ptr); }
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	330c      	adds	r3, #12
 8006198:	4618      	mov	r0, r3
 800619a:	f000 f89a 	bl	80062d2 <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>
 800619e:	4602      	mov	r2, r0
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	691b      	ldr	r3, [r3, #16]
 80061a4:	4619      	mov	r1, r3
 80061a6:	4610      	mov	r0, r2
 80061a8:	f7ff fd07 	bl	8005bba <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>
 80061ac:	bf00      	nop
 80061ae:	3708      	adds	r7, #8
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}

080061b4 <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      _M_destroy() noexcept
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b086      	sub	sp, #24
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	330c      	adds	r3, #12
 80061c0:	4618      	mov	r0, r3
 80061c2:	f000 f893 	bl	80062ec <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>
 80061c6:	4602      	mov	r2, r0
 80061c8:	f107 0314 	add.w	r3, r7, #20
 80061cc:	4611      	mov	r1, r2
 80061ce:	4618      	mov	r0, r3
 80061d0:	f7ff fc3c 	bl	8005a4c <_ZNSaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 80061d4:	f107 0114 	add.w	r1, r7, #20
 80061d8:	f107 030c 	add.w	r3, r7, #12
 80061dc:	687a      	ldr	r2, [r7, #4]
 80061de:	4618      	mov	r0, r3
 80061e0:	f7ff fdc4 	bl	8005d6c <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
	this->~_Sp_counted_deleter();
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f7ff ffa9 	bl	800613c <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 80061ea:	f107 030c 	add.w	r3, r7, #12
 80061ee:	4618      	mov	r0, r3
 80061f0:	f7ff fc58 	bl	8005aa4 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	__allocator_type __a(_M_impl._M_alloc());
 80061f4:	f107 0314 	add.w	r3, r7, #20
 80061f8:	4618      	mov	r0, r3
 80061fa:	f7ff fc34 	bl	8005a66 <_ZNSaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
      }
 80061fe:	bf00      	nop
 8006200:	3718      	adds	r7, #24
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}

08006206 <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept
 8006206:	b480      	push	{r7}
 8006208:	b083      	sub	sp, #12
 800620a:	af00      	add	r7, sp, #0
 800620c:	6078      	str	r0, [r7, #4]
 800620e:	6039      	str	r1, [r7, #0]
        return nullptr;
 8006210:	2300      	movs	r3, #0
      }
 8006212:	4618      	mov	r0, r3
 8006214:	370c      	adds	r7, #12
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr

0800621e <_ZNSt15_Sp_counted_ptrIPN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 800621e:	b590      	push	{r4, r7, lr}
 8006220:	b083      	sub	sp, #12
 8006222:	af00      	add	r7, sp, #0
 8006224:	6078      	str	r0, [r7, #4]
      { delete _M_ptr; }
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	68dc      	ldr	r4, [r3, #12]
 800622a:	2c00      	cmp	r4, #0
 800622c:	d006      	beq.n	800623c <_ZNSt15_Sp_counted_ptrIPN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x1e>
 800622e:	4620      	mov	r0, r4
 8006230:	f7fd fb2c 	bl	800388c <_ZN4tama6SpriteD1Ev>
 8006234:	2120      	movs	r1, #32
 8006236:	4620      	mov	r0, r4
 8006238:	f011 f93b 	bl	80174b2 <_ZdlPvj>
 800623c:	bf00      	nop
 800623e:	370c      	adds	r7, #12
 8006240:	46bd      	mov	sp, r7
 8006242:	bd90      	pop	{r4, r7, pc}

08006244 <_ZNSt15_Sp_counted_ptrIPN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8006244:	b580      	push	{r7, lr}
 8006246:	b082      	sub	sp, #8
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
      { delete this; }
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d002      	beq.n	8006258 <_ZNSt15_Sp_counted_ptrIPN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x14>
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f7ff ff40 	bl	80060d8 <_ZNSt15_Sp_counted_ptrIPN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 8006258:	bf00      	nop
 800625a:	3708      	adds	r7, #8
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}

08006260 <_ZNSt15_Sp_counted_ptrIPN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info&) noexcept
 8006260:	b480      	push	{r7}
 8006262:	b083      	sub	sp, #12
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
 8006268:	6039      	str	r1, [r7, #0]
      { return nullptr; }
 800626a:	2300      	movs	r3, #0
 800626c:	4618      	mov	r0, r3
 800626e:	370c      	adds	r7, #12
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr

08006278 <_ZNSt15_Sp_counted_ptrIPN4tama4TextELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 8006278:	b590      	push	{r4, r7, lr}
 800627a:	b083      	sub	sp, #12
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
      { delete _M_ptr; }
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	68dc      	ldr	r4, [r3, #12]
 8006284:	2c00      	cmp	r4, #0
 8006286:	d006      	beq.n	8006296 <_ZNSt15_Sp_counted_ptrIPN4tama4TextELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x1e>
 8006288:	4620      	mov	r0, r4
 800628a:	f7fd fb2b 	bl	80038e4 <_ZN4tama4TextD1Ev>
 800628e:	2148      	movs	r1, #72	; 0x48
 8006290:	4620      	mov	r0, r4
 8006292:	f011 f90e 	bl	80174b2 <_ZdlPvj>
 8006296:	bf00      	nop
 8006298:	370c      	adds	r7, #12
 800629a:	46bd      	mov	sp, r7
 800629c:	bd90      	pop	{r4, r7, pc}

0800629e <_ZNSt15_Sp_counted_ptrIPN4tama4TextELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 800629e:	b580      	push	{r7, lr}
 80062a0:	b082      	sub	sp, #8
 80062a2:	af00      	add	r7, sp, #0
 80062a4:	6078      	str	r0, [r7, #4]
      { delete this; }
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d002      	beq.n	80062b2 <_ZNSt15_Sp_counted_ptrIPN4tama4TextELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x14>
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f7ff ff35 	bl	800611c <_ZNSt15_Sp_counted_ptrIPN4tama4TextELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80062b2:	bf00      	nop
 80062b4:	3708      	adds	r7, #8
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}

080062ba <_ZNSt15_Sp_counted_ptrIPN4tama4TextELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info&) noexcept
 80062ba:	b480      	push	{r7}
 80062bc:	b083      	sub	sp, #12
 80062be:	af00      	add	r7, sp, #0
 80062c0:	6078      	str	r0, [r7, #4]
 80062c2:	6039      	str	r1, [r7, #0]
      { return nullptr; }
 80062c4:	2300      	movs	r3, #0
 80062c6:	4618      	mov	r0, r3
 80062c8:	370c      	adds	r7, #12
 80062ca:	46bd      	mov	sp, r7
 80062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d0:	4770      	bx	lr

080062d2 <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>:
	_Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }
 80062d2:	b580      	push	{r7, lr}
 80062d4:	b082      	sub	sp, #8
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	6078      	str	r0, [r7, #4]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	4618      	mov	r0, r3
 80062de:	f000 f813 	bl	8006308 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>
 80062e2:	4603      	mov	r3, r0
 80062e4:	4618      	mov	r0, r3
 80062e6:	3708      	adds	r7, #8
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}

080062ec <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b082      	sub	sp, #8
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	3301      	adds	r3, #1
 80062f8:	4618      	mov	r0, r3
 80062fa:	f000 f810 	bl	800631e <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama6SpriteEELb1EE6_S_getERS3_>
 80062fe:	4603      	mov	r3, r0
 8006300:	4618      	mov	r0, r3
 8006302:	3708      	adds	r7, #8
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}

08006308 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>:
      _S_get(_Sp_ebo_helper& __eboh)
 8006308:	b480      	push	{r7}
 800630a:	b083      	sub	sp, #12
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
      { return __eboh._M_tp; }
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	4618      	mov	r0, r3
 8006314:	370c      	adds	r7, #12
 8006316:	46bd      	mov	sp, r7
 8006318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631c:	4770      	bx	lr

0800631e <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama6SpriteEELb1EE6_S_getERS3_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 800631e:	b480      	push	{r7}
 8006320:	b083      	sub	sp, #12
 8006322:	af00      	add	r7, sp, #0
 8006324:	6078      	str	r0, [r7, #4]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	4618      	mov	r0, r3
 800632a:	370c      	adds	r7, #12
 800632c:	46bd      	mov	sp, r7
 800632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006332:	4770      	bx	lr

08006334 <_ZN4tama5Vec2dC1Ev>:
{
    class Vec2d
    {
    public:
        Vec2d(int x, int y);
        Vec2d(): x(0), y(0) {}
 8006334:	b480      	push	{r7}
 8006336:	b083      	sub	sp, #12
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2200      	movs	r2, #0
 8006340:	601a      	str	r2, [r3, #0]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2200      	movs	r2, #0
 8006346:	605a      	str	r2, [r3, #4]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	4618      	mov	r0, r3
 800634c:	370c      	adds	r7, #12
 800634e:	46bd      	mov	sp, r7
 8006350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006354:	4770      	bx	lr

08006356 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EEaSERKS4_>:
    class __shared_ptr
 8006356:	b580      	push	{r7, lr}
 8006358:	b082      	sub	sp, #8
 800635a:	af00      	add	r7, sp, #0
 800635c:	6078      	str	r0, [r7, #4]
 800635e:	6039      	str	r1, [r7, #0]
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	681a      	ldr	r2, [r3, #0]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	601a      	str	r2, [r3, #0]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	1d1a      	adds	r2, r3, #4
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	3304      	adds	r3, #4
 8006370:	4619      	mov	r1, r3
 8006372:	4610      	mov	r0, r2
 8006374:	f7fc feef 	bl	8003156 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	4618      	mov	r0, r3
 800637c:	3708      	adds	r7, #8
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}

08006382 <_ZNSt10shared_ptrIN4tama7TextureEEaSERKS2_>:
    class shared_ptr : public __shared_ptr<_Tp>
 8006382:	b580      	push	{r7, lr}
 8006384:	b082      	sub	sp, #8
 8006386:	af00      	add	r7, sp, #0
 8006388:	6078      	str	r0, [r7, #4]
 800638a:	6039      	str	r1, [r7, #0]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	683a      	ldr	r2, [r7, #0]
 8006390:	4611      	mov	r1, r2
 8006392:	4618      	mov	r0, r3
 8006394:	f7ff ffdf 	bl	8006356 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EEaSERKS4_>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	4618      	mov	r0, r3
 800639c:	3708      	adds	r7, #8
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}

080063a2 <_ZN4tama6Sprite10setTextureESt10shared_ptrINS_7TextureEE>:
//

#include "Sprite.h"

void tama::Sprite::setTexture(std::shared_ptr<tama::Texture> texture)
{
 80063a2:	b580      	push	{r7, lr}
 80063a4:	b082      	sub	sp, #8
 80063a6:	af00      	add	r7, sp, #0
 80063a8:	6078      	str	r0, [r7, #4]
 80063aa:	6039      	str	r1, [r7, #0]
    this->texture = texture;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	3304      	adds	r3, #4
 80063b0:	6839      	ldr	r1, [r7, #0]
 80063b2:	4618      	mov	r0, r3
 80063b4:	f7ff ffe5 	bl	8006382 <_ZNSt10shared_ptrIN4tama7TextureEEaSERKS2_>
}
 80063b8:	bf00      	nop
 80063ba:	3708      	adds	r7, #8
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}

080063c0 <_ZN4tama6Sprite11setPositionENS_5Vec2dE>:

void tama::Sprite::setPosition(tama::Vec2d position)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b084      	sub	sp, #16
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	60f8      	str	r0, [r7, #12]
 80063c8:	1d3b      	adds	r3, r7, #4
 80063ca:	e883 0006 	stmia.w	r3, {r1, r2}
    this->position = position;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	330c      	adds	r3, #12
 80063d2:	1d3a      	adds	r2, r7, #4
 80063d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80063d8:	e883 0003 	stmia.w	r3, {r0, r1}
    notifyObserver();
 80063dc:	68f8      	ldr	r0, [r7, #12]
 80063de:	f000 f8c8 	bl	8006572 <_ZN4tama6Sprite14notifyObserverEv>
}
 80063e2:	bf00      	nop
 80063e4:	3710      	adds	r7, #16
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}

080063ea <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80063ea:	b580      	push	{r7, lr}
 80063ec:	b082      	sub	sp, #8
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	6078      	str	r0, [r7, #4]
 80063f2:	6039      	str	r1, [r7, #0]
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	681a      	ldr	r2, [r3, #0]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	601a      	str	r2, [r3, #0]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	1d1a      	adds	r2, r3, #4
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	3304      	adds	r3, #4
 8006404:	4619      	mov	r1, r3
 8006406:	4610      	mov	r0, r2
 8006408:	f7fa fb04 	bl	8000a14 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	4618      	mov	r0, r3
 8006410:	3708      	adds	r7, #8
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}

08006416 <_ZNSt10shared_ptrIN4tama7TextureEEC1ERKS2_>:
      shared_ptr(const shared_ptr&) noexcept = default;
 8006416:	b580      	push	{r7, lr}
 8006418:	b082      	sub	sp, #8
 800641a:	af00      	add	r7, sp, #0
 800641c:	6078      	str	r0, [r7, #4]
 800641e:	6039      	str	r1, [r7, #0]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	683a      	ldr	r2, [r7, #0]
 8006424:	4611      	mov	r1, r2
 8006426:	4618      	mov	r0, r3
 8006428:	f7ff ffdf 	bl	80063ea <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	4618      	mov	r0, r3
 8006430:	3708      	adds	r7, #8
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}

08006436 <_ZN4tama6Sprite10getTextureEv>:

std::shared_ptr<tama::Texture> tama::Sprite::getTexture()
{
 8006436:	b580      	push	{r7, lr}
 8006438:	b082      	sub	sp, #8
 800643a:	af00      	add	r7, sp, #0
 800643c:	6078      	str	r0, [r7, #4]
 800643e:	6039      	str	r1, [r7, #0]
    return texture;
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	3304      	adds	r3, #4
 8006444:	4619      	mov	r1, r3
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f7ff ffe5 	bl	8006416 <_ZNSt10shared_ptrIN4tama7TextureEEC1ERKS2_>
}
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	3708      	adds	r7, #8
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}

08006454 <_ZN4tama6Sprite11getPositionEv>:

tama::Vec2d tama::Sprite::getPosition()
{
 8006454:	b480      	push	{r7}
 8006456:	b083      	sub	sp, #12
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
 800645c:	6039      	str	r1, [r7, #0]
    return position;
 800645e:	687a      	ldr	r2, [r7, #4]
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	330c      	adds	r3, #12
 8006464:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006468:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	370c      	adds	r7, #12
 8006470:	46bd      	mov	sp, r7
 8006472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006476:	4770      	bx	lr

08006478 <_ZN4tama6Sprite4moveENS_5Vec2dE>:

void tama::Sprite::move(tama::Vec2d delta)
{
 8006478:	b590      	push	{r4, r7, lr}
 800647a:	b087      	sub	sp, #28
 800647c:	af00      	add	r7, sp, #0
 800647e:	6178      	str	r0, [r7, #20]
 8006480:	f107 030c 	add.w	r3, r7, #12
 8006484:	e883 0006 	stmia.w	r3, {r1, r2}
    position = position + delta;
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	f103 010c 	add.w	r1, r3, #12
 800648e:	697c      	ldr	r4, [r7, #20]
 8006490:	4638      	mov	r0, r7
 8006492:	f107 030c 	add.w	r3, r7, #12
 8006496:	cb0c      	ldmia	r3, {r2, r3}
 8006498:	f7fa f826 	bl	80004e8 <_ZN4tama5Vec2dplES0_>
 800649c:	f104 030c 	add.w	r3, r4, #12
 80064a0:	463a      	mov	r2, r7
 80064a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80064a6:	e883 0003 	stmia.w	r3, {r0, r1}
    notifyObserver();
 80064aa:	6978      	ldr	r0, [r7, #20]
 80064ac:	f000 f861 	bl	8006572 <_ZN4tama6Sprite14notifyObserverEv>
}
 80064b0:	bf00      	nop
 80064b2:	371c      	adds	r7, #28
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd90      	pop	{r4, r7, pc}

080064b8 <_ZN4tama6Sprite4hideEv>:

void tama::Sprite::hide()
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b082      	sub	sp, #8
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
    visible = false;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2200      	movs	r2, #0
 80064c4:	751a      	strb	r2, [r3, #20]
    notifyObserver();
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f000 f853 	bl	8006572 <_ZN4tama6Sprite14notifyObserverEv>
}
 80064cc:	bf00      	nop
 80064ce:	3708      	adds	r7, #8
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}

080064d4 <_ZN4tama6Sprite4showEv>:

void tama::Sprite::show()
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b082      	sub	sp, #8
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
    visible = true;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2201      	movs	r2, #1
 80064e0:	751a      	strb	r2, [r3, #20]
    notifyObserver();
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f000 f845 	bl	8006572 <_ZN4tama6Sprite14notifyObserverEv>
}
 80064e8:	bf00      	nop
 80064ea:	3708      	adds	r7, #8
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}

080064f0 <_ZNSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EEaSERKS4_>:
    class __shared_ptr
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b082      	sub	sp, #8
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	6039      	str	r1, [r7, #0]
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	681a      	ldr	r2, [r3, #0]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	601a      	str	r2, [r3, #0]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	1d1a      	adds	r2, r3, #4
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	3304      	adds	r3, #4
 800650a:	4619      	mov	r1, r3
 800650c:	4610      	mov	r0, r2
 800650e:	f7fc fe22 	bl	8003156 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	4618      	mov	r0, r3
 8006516:	3708      	adds	r7, #8
 8006518:	46bd      	mov	sp, r7
 800651a:	bd80      	pop	{r7, pc}

0800651c <_ZNSt10shared_ptrIN4tama14ChangeObserverEEaSERKS2_>:
    class shared_ptr : public __shared_ptr<_Tp>
 800651c:	b580      	push	{r7, lr}
 800651e:	b082      	sub	sp, #8
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
 8006524:	6039      	str	r1, [r7, #0]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	683a      	ldr	r2, [r7, #0]
 800652a:	4611      	mov	r1, r2
 800652c:	4618      	mov	r0, r3
 800652e:	f7ff ffdf 	bl	80064f0 <_ZNSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EEaSERKS4_>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	4618      	mov	r0, r3
 8006536:	3708      	adds	r7, #8
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}

0800653c <_ZN4tama6Sprite17setChangeObserverESt10shared_ptrINS_14ChangeObserverEE>:

void tama::Sprite::setChangeObserver(std::shared_ptr<tama::ChangeObserver> observer)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b082      	sub	sp, #8
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
 8006544:	6039      	str	r1, [r7, #0]
    this->observer = observer;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	3318      	adds	r3, #24
 800654a:	6839      	ldr	r1, [r7, #0]
 800654c:	4618      	mov	r0, r3
 800654e:	f7ff ffe5 	bl	800651c <_ZNSt10shared_ptrIN4tama14ChangeObserverEEaSERKS2_>
}
 8006552:	bf00      	nop
 8006554:	3708      	adds	r7, #8
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}

0800655a <_ZN4tama6Sprite9isVisibleEv>:

bool tama::Sprite::isVisible()
{
 800655a:	b480      	push	{r7}
 800655c:	b083      	sub	sp, #12
 800655e:	af00      	add	r7, sp, #0
 8006560:	6078      	str	r0, [r7, #4]
    return visible;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	7d1b      	ldrb	r3, [r3, #20]
}
 8006566:	4618      	mov	r0, r3
 8006568:	370c      	adds	r7, #12
 800656a:	46bd      	mov	sp, r7
 800656c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006570:	4770      	bx	lr

08006572 <_ZN4tama6Sprite14notifyObserverEv>:

void tama::Sprite::notifyObserver()
{
 8006572:	b580      	push	{r7, lr}
 8006574:	b082      	sub	sp, #8
 8006576:	af00      	add	r7, sp, #0
 8006578:	6078      	str	r0, [r7, #4]
    if (observer != nullptr)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	3318      	adds	r3, #24
 800657e:	2100      	movs	r1, #0
 8006580:	4618      	mov	r0, r3
 8006582:	f000 f8a7 	bl	80066d4 <_ZStneIN4tama14ChangeObserverEEbRKSt10shared_ptrIT_EDn>
 8006586:	4603      	mov	r3, r0
 8006588:	2b00      	cmp	r3, #0
 800658a:	d009      	beq.n	80065a0 <_ZN4tama6Sprite14notifyObserverEv+0x2e>
    {
        observer->onChange();
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	3318      	adds	r3, #24
 8006590:	4618      	mov	r0, r3
 8006592:	f000 f8ad 	bl	80066f0 <_ZNKSt19__shared_ptr_accessIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8006596:	4602      	mov	r2, r0
 8006598:	6813      	ldr	r3, [r2, #0]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4610      	mov	r0, r2
 800659e:	4798      	blx	r3
    }
}
 80065a0:	bf00      	nop
 80065a2:	3708      	adds	r7, #8
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}

080065a8 <_ZN4tama8DrawableC1Ev>:
#include "../../../common/observers/ChangeObserver.h"
#include "texture.h"

namespace tama
{
    class Drawable
 80065a8:	b480      	push	{r7}
 80065aa:	b083      	sub	sp, #12
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
 80065b0:	4a04      	ldr	r2, [pc, #16]	; (80065c4 <_ZN4tama8DrawableC1Ev+0x1c>)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	601a      	str	r2, [r3, #0]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	4618      	mov	r0, r3
 80065ba:	370c      	adds	r7, #12
 80065bc:	46bd      	mov	sp, r7
 80065be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c2:	4770      	bx	lr
 80065c4:	0801a4ec 	.word	0x0801a4ec

080065c8 <_ZN4tama6SpriteC1ERKSt10shared_ptrINS_7TextureEERKNS_5Vec2dE>:

tama::Sprite::Sprite(const std::shared_ptr<Texture> &texture, const tama::Vec2d &position) : texture(texture),
 80065c8:	b590      	push	{r4, r7, lr}
 80065ca:	b087      	sub	sp, #28
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	60f8      	str	r0, [r7, #12]
 80065d0:	60b9      	str	r1, [r7, #8]
 80065d2:	607a      	str	r2, [r7, #4]
                                                                                             position(position)
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	4618      	mov	r0, r3
 80065d8:	f7ff ffe6 	bl	80065a8 <_ZN4tama8DrawableC1Ev>
 80065dc:	4a18      	ldr	r2, [pc, #96]	; (8006640 <_ZN4tama6SpriteC1ERKSt10shared_ptrINS_7TextureEERKNS_5Vec2dE+0x78>)
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	601a      	str	r2, [r3, #0]
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	3304      	adds	r3, #4
 80065e6:	68b9      	ldr	r1, [r7, #8]
 80065e8:	4618      	mov	r0, r3
 80065ea:	f7ff ff14 	bl	8006416 <_ZNSt10shared_ptrIN4tama7TextureEEC1ERKS2_>
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	687a      	ldr	r2, [r7, #4]
 80065f2:	330c      	adds	r3, #12
 80065f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80065f8:	e883 0003 	stmia.w	r3, {r0, r1}
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	3318      	adds	r3, #24
 8006600:	4618      	mov	r0, r3
 8006602:	f000 f881 	bl	8006708 <_ZNSt10shared_ptrIN4tama14ChangeObserverEEC1Ev>
{
    observer = nullptr;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	f103 0418 	add.w	r4, r3, #24
 800660c:	f107 0310 	add.w	r3, r7, #16
 8006610:	2100      	movs	r1, #0
 8006612:	4618      	mov	r0, r3
 8006614:	f000 f885 	bl	8006722 <_ZNSt10shared_ptrIN4tama14ChangeObserverEEC1EDn>
 8006618:	f107 0310 	add.w	r3, r7, #16
 800661c:	4619      	mov	r1, r3
 800661e:	4620      	mov	r0, r4
 8006620:	f7fe f89e 	bl	8004760 <_ZNSt10shared_ptrIN4tama14ChangeObserverEEaSEOS2_>
 8006624:	f107 0310 	add.w	r3, r7, #16
 8006628:	4618      	mov	r0, r3
 800662a:	f7fc fa14 	bl	8002a56 <_ZNSt10shared_ptrIN4tama14ChangeObserverEED1Ev>
    visible = true;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2201      	movs	r2, #1
 8006632:	751a      	strb	r2, [r3, #20]
}
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	4618      	mov	r0, r3
 8006638:	371c      	adds	r7, #28
 800663a:	46bd      	mov	sp, r7
 800663c:	bd90      	pop	{r4, r7, pc}
 800663e:	bf00      	nop
 8006640:	0801a4c0 	.word	0x0801a4c0

08006644 <_ZN4tama6SpriteC1Ev>:

tama::Sprite::Sprite()
 8006644:	b590      	push	{r4, r7, lr}
 8006646:	b087      	sub	sp, #28
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	4618      	mov	r0, r3
 8006650:	f7ff ffaa 	bl	80065a8 <_ZN4tama8DrawableC1Ev>
 8006654:	4a1e      	ldr	r2, [pc, #120]	; (80066d0 <_ZN4tama6SpriteC1Ev+0x8c>)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	601a      	str	r2, [r3, #0]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	3304      	adds	r3, #4
 800665e:	4618      	mov	r0, r3
 8006660:	f000 f86c 	bl	800673c <_ZNSt10shared_ptrIN4tama7TextureEEC1Ev>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	330c      	adds	r3, #12
 8006668:	4618      	mov	r0, r3
 800666a:	f7ff fe63 	bl	8006334 <_ZN4tama5Vec2dC1Ev>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	3318      	adds	r3, #24
 8006672:	4618      	mov	r0, r3
 8006674:	f000 f848 	bl	8006708 <_ZNSt10shared_ptrIN4tama14ChangeObserverEEC1Ev>
{
    observer = nullptr;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f103 0418 	add.w	r4, r3, #24
 800667e:	f107 0308 	add.w	r3, r7, #8
 8006682:	2100      	movs	r1, #0
 8006684:	4618      	mov	r0, r3
 8006686:	f000 f84c 	bl	8006722 <_ZNSt10shared_ptrIN4tama14ChangeObserverEEC1EDn>
 800668a:	f107 0308 	add.w	r3, r7, #8
 800668e:	4619      	mov	r1, r3
 8006690:	4620      	mov	r0, r4
 8006692:	f7fe f865 	bl	8004760 <_ZNSt10shared_ptrIN4tama14ChangeObserverEEaSEOS2_>
 8006696:	f107 0308 	add.w	r3, r7, #8
 800669a:	4618      	mov	r0, r3
 800669c:	f7fc f9db 	bl	8002a56 <_ZNSt10shared_ptrIN4tama14ChangeObserverEED1Ev>
    visible = true;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2201      	movs	r2, #1
 80066a4:	751a      	strb	r2, [r3, #20]
    position = Vec2d(0, 0);
 80066a6:	f107 0310 	add.w	r3, r7, #16
 80066aa:	2200      	movs	r2, #0
 80066ac:	2100      	movs	r1, #0
 80066ae:	4618      	mov	r0, r3
 80066b0:	f7f9 ff32 	bl	8000518 <_ZN4tama5Vec2dC1Eii>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	330c      	adds	r3, #12
 80066b8:	f107 0210 	add.w	r2, r7, #16
 80066bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80066c0:	e883 0003 	stmia.w	r3, {r0, r1}
}
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	4618      	mov	r0, r3
 80066c8:	371c      	adds	r7, #28
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd90      	pop	{r4, r7, pc}
 80066ce:	bf00      	nop
 80066d0:	0801a4c0 	.word	0x0801a4c0

080066d4 <_ZStneIN4tama14ChangeObserverEEbRKSt10shared_ptrIT_EDn>:
    operator!=(const shared_ptr<_Tp>& __a, nullptr_t) noexcept
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b082      	sub	sp, #8
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
 80066dc:	6039      	str	r1, [r7, #0]
    { return (bool)__a; }
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	4618      	mov	r0, r3
 80066e2:	f000 f838 	bl	8006756 <_ZNKSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EEcvbEv>
 80066e6:	4603      	mov	r3, r0
 80066e8:	4618      	mov	r0, r3
 80066ea:	3708      	adds	r7, #8
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}

080066f0 <_ZNKSt19__shared_ptr_accessIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b082      	sub	sp, #8
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
	return _M_get();
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f000 f83d 	bl	8006778 <_ZNKSt19__shared_ptr_accessIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 80066fe:	4603      	mov	r3, r0
      }
 8006700:	4618      	mov	r0, r3
 8006702:	3708      	adds	r7, #8
 8006704:	46bd      	mov	sp, r7
 8006706:	bd80      	pop	{r7, pc}

08006708 <_ZNSt10shared_ptrIN4tama14ChangeObserverEEC1Ev>:
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }
 8006708:	b580      	push	{r7, lr}
 800670a:	b082      	sub	sp, #8
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	4618      	mov	r0, r3
 8006714:	f000 f83c 	bl	8006790 <_ZNSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	4618      	mov	r0, r3
 800671c:	3708      	adds	r7, #8
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}

08006722 <_ZNSt10shared_ptrIN4tama14ChangeObserverEEC1EDn>:
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }
 8006722:	b580      	push	{r7, lr}
 8006724:	b082      	sub	sp, #8
 8006726:	af00      	add	r7, sp, #0
 8006728:	6078      	str	r0, [r7, #4]
 800672a:	6039      	str	r1, [r7, #0]
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f7ff ffeb 	bl	8006708 <_ZNSt10shared_ptrIN4tama14ChangeObserverEEC1Ev>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	4618      	mov	r0, r3
 8006736:	3708      	adds	r7, #8
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}

0800673c <_ZNSt10shared_ptrIN4tama7TextureEEC1Ev>:
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }
 800673c:	b580      	push	{r7, lr}
 800673e:	b082      	sub	sp, #8
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	4618      	mov	r0, r3
 8006748:	f000 f833 	bl	80067b2 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	4618      	mov	r0, r3
 8006750:	3708      	adds	r7, #8
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}

08006756 <_ZNKSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EEcvbEv>:
      explicit operator bool() const // never throws
 8006756:	b480      	push	{r7}
 8006758:	b083      	sub	sp, #12
 800675a:	af00      	add	r7, sp, #0
 800675c:	6078      	str	r0, [r7, #4]
      { return _M_ptr == 0 ? false : true; }
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	2b00      	cmp	r3, #0
 8006764:	bf14      	ite	ne
 8006766:	2301      	movne	r3, #1
 8006768:	2300      	moveq	r3, #0
 800676a:	b2db      	uxtb	r3, r3
 800676c:	4618      	mov	r0, r3
 800676e:	370c      	adds	r7, #12
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr

08006778 <_ZNKSt19__shared_ptr_accessIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 8006778:	b580      	push	{r7, lr}
 800677a:	b082      	sub	sp, #8
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	f000 f827 	bl	80067d4 <_ZNKSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EE3getEv>
 8006786:	4603      	mov	r3, r0
 8006788:	4618      	mov	r0, r3
 800678a:	3708      	adds	r7, #8
 800678c:	46bd      	mov	sp, r7
 800678e:	bd80      	pop	{r7, pc}

08006790 <_ZNSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      constexpr __shared_ptr() noexcept
 8006790:	b580      	push	{r7, lr}
 8006792:	b082      	sub	sp, #8
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
      : _M_ptr(0), _M_refcount()
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2200      	movs	r2, #0
 800679c:	601a      	str	r2, [r3, #0]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	3304      	adds	r3, #4
 80067a2:	4618      	mov	r0, r3
 80067a4:	f7fa fb69 	bl	8000e7a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
      { }
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	4618      	mov	r0, r3
 80067ac:	3708      	adds	r7, #8
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}

080067b2 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      constexpr __shared_ptr() noexcept
 80067b2:	b580      	push	{r7, lr}
 80067b4:	b082      	sub	sp, #8
 80067b6:	af00      	add	r7, sp, #0
 80067b8:	6078      	str	r0, [r7, #4]
      : _M_ptr(0), _M_refcount()
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2200      	movs	r2, #0
 80067be:	601a      	str	r2, [r3, #0]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	3304      	adds	r3, #4
 80067c4:	4618      	mov	r0, r3
 80067c6:	f7fa fb58 	bl	8000e7a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
      { }
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	4618      	mov	r0, r3
 80067ce:	3708      	adds	r7, #8
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}

080067d4 <_ZNKSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EE3getEv>:
      get() const noexcept
 80067d4:	b480      	push	{r7}
 80067d6:	b083      	sub	sp, #12
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4618      	mov	r0, r3
 80067e2:	370c      	adds	r7, #12
 80067e4:	46bd      	mov	sp, r7
 80067e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ea:	4770      	bx	lr

080067ec <_ZN4tama7TextureC1Ejj>:
    {
        unsigned width;
        unsigned height;
        PixelColor ** data;

        Texture(unsigned int width, unsigned int height) : width(width), height(height)
 80067ec:	b590      	push	{r4, r7, lr}
 80067ee:	b087      	sub	sp, #28
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	60f8      	str	r0, [r7, #12]
 80067f4:	60b9      	str	r1, [r7, #8]
 80067f6:	607a      	str	r2, [r7, #4]
 80067f8:	4a22      	ldr	r2, [pc, #136]	; (8006884 <_ZN4tama7TextureC1Ejj+0x98>)
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	601a      	str	r2, [r3, #0]
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	68ba      	ldr	r2, [r7, #8]
 8006802:	605a      	str	r2, [r3, #4]
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	687a      	ldr	r2, [r7, #4]
 8006808:	609a      	str	r2, [r3, #8]
        {
            data = new PixelColor*[height];
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	4a1e      	ldr	r2, [pc, #120]	; (8006888 <_ZN4tama7TextureC1Ejj+0x9c>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d801      	bhi.n	8006816 <_ZN4tama7TextureC1Ejj+0x2a>
 8006812:	009b      	lsls	r3, r3, #2
 8006814:	e001      	b.n	800681a <_ZN4tama7TextureC1Ejj+0x2e>
 8006816:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800681a:	4618      	mov	r0, r3
 800681c:	f010 fe47 	bl	80174ae <_Znaj>
 8006820:	4603      	mov	r3, r0
 8006822:	461a      	mov	r2, r3
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	60da      	str	r2, [r3, #12]
            for (unsigned i = 0; i < height; ++i)
 8006828:	2300      	movs	r3, #0
 800682a:	617b      	str	r3, [r7, #20]
 800682c:	697a      	ldr	r2, [r7, #20]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	429a      	cmp	r2, r3
 8006832:	d222      	bcs.n	800687a <_ZN4tama7TextureC1Ejj+0x8e>
            {
                data[i] = new PixelColor[width];
 8006834:	68b9      	ldr	r1, [r7, #8]
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	68da      	ldr	r2, [r3, #12]
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	009b      	lsls	r3, r3, #2
 800683e:	18d4      	adds	r4, r2, r3
 8006840:	4608      	mov	r0, r1
 8006842:	f010 fe34 	bl	80174ae <_Znaj>
 8006846:	4603      	mov	r3, r0
 8006848:	6023      	str	r3, [r4, #0]
                for (unsigned j = 0; j < width; ++j)
 800684a:	2300      	movs	r3, #0
 800684c:	613b      	str	r3, [r7, #16]
 800684e:	693a      	ldr	r2, [r7, #16]
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	429a      	cmp	r2, r3
 8006854:	d20d      	bcs.n	8006872 <_ZN4tama7TextureC1Ejj+0x86>
                {
                    data[i][j] = PixelColor::WHITE;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	68da      	ldr	r2, [r3, #12]
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	009b      	lsls	r3, r3, #2
 800685e:	4413      	add	r3, r2
 8006860:	681a      	ldr	r2, [r3, #0]
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	4413      	add	r3, r2
 8006866:	2200      	movs	r2, #0
 8006868:	701a      	strb	r2, [r3, #0]
                for (unsigned j = 0; j < width; ++j)
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	3301      	adds	r3, #1
 800686e:	613b      	str	r3, [r7, #16]
 8006870:	e7ed      	b.n	800684e <_ZN4tama7TextureC1Ejj+0x62>
            for (unsigned i = 0; i < height; ++i)
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	3301      	adds	r3, #1
 8006876:	617b      	str	r3, [r7, #20]
 8006878:	e7d8      	b.n	800682c <_ZN4tama7TextureC1Ejj+0x40>
                }
            }
        }
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	4618      	mov	r0, r3
 800687e:	371c      	adds	r7, #28
 8006880:	46bd      	mov	sp, r7
 8006882:	bd90      	pop	{r4, r7, pc}
 8006884:	0801aff8 	.word	0x0801aff8
 8006888:	1ffffffe 	.word	0x1ffffffe

0800688c <_ZN4tama7Texture8insertAtENS_5Vec2dESt10shared_ptrIS0_E>:

        Texture(unsigned int width, unsigned int height, PixelColor **data) : width(width), height(height), data(data)
        {}

        void insertAt(Vec2d position, std::shared_ptr<Texture> texture)
 800688c:	b580      	push	{r7, lr}
 800688e:	b08a      	sub	sp, #40	; 0x28
 8006890:	af02      	add	r7, sp, #8
 8006892:	60f8      	str	r0, [r7, #12]
 8006894:	1d38      	adds	r0, r7, #4
 8006896:	e880 0006 	stmia.w	r0, {r1, r2}
 800689a:	603b      	str	r3, [r7, #0]
        {
            for (unsigned i = 0; i < texture->height; ++i)
 800689c:	2300      	movs	r3, #0
 800689e:	61fb      	str	r3, [r7, #28]
 80068a0:	6838      	ldr	r0, [r7, #0]
 80068a2:	f000 fd21 	bl	80072e8 <_ZNKSt19__shared_ptr_accessIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 80068a6:	4603      	mov	r3, r0
 80068a8:	689b      	ldr	r3, [r3, #8]
 80068aa:	69fa      	ldr	r2, [r7, #28]
 80068ac:	429a      	cmp	r2, r3
 80068ae:	bf34      	ite	cc
 80068b0:	2301      	movcc	r3, #1
 80068b2:	2300      	movcs	r3, #0
 80068b4:	b2db      	uxtb	r3, r3
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d042      	beq.n	8006940 <_ZN4tama7Texture8insertAtENS_5Vec2dESt10shared_ptrIS0_E+0xb4>
            {
                for (unsigned j = 0; j < texture->width; ++j)
 80068ba:	2300      	movs	r3, #0
 80068bc:	61bb      	str	r3, [r7, #24]
 80068be:	6838      	ldr	r0, [r7, #0]
 80068c0:	f000 fd12 	bl	80072e8 <_ZNKSt19__shared_ptr_accessIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 80068c4:	4603      	mov	r3, r0
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	69ba      	ldr	r2, [r7, #24]
 80068ca:	429a      	cmp	r2, r3
 80068cc:	bf34      	ite	cc
 80068ce:	2301      	movcc	r3, #1
 80068d0:	2300      	movcs	r3, #0
 80068d2:	b2db      	uxtb	r3, r3
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d02f      	beq.n	8006938 <_ZN4tama7Texture8insertAtENS_5Vec2dESt10shared_ptrIS0_E+0xac>
                {
                    unsigned newY = i + position.y;
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	461a      	mov	r2, r3
 80068dc:	69fb      	ldr	r3, [r7, #28]
 80068de:	4413      	add	r3, r2
 80068e0:	617b      	str	r3, [r7, #20]
                    unsigned newX = j + position.x;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	461a      	mov	r2, r3
 80068e6:	69bb      	ldr	r3, [r7, #24]
 80068e8:	4413      	add	r3, r2
 80068ea:	613b      	str	r3, [r7, #16]
                    if (shouldDrawPixel(texture, i, j, newY, newX))
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	9301      	str	r3, [sp, #4]
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	9300      	str	r3, [sp, #0]
 80068f4:	69bb      	ldr	r3, [r7, #24]
 80068f6:	69fa      	ldr	r2, [r7, #28]
 80068f8:	6839      	ldr	r1, [r7, #0]
 80068fa:	68f8      	ldr	r0, [r7, #12]
 80068fc:	f000 f824 	bl	8006948 <_ZNK4tama7Texture15shouldDrawPixelERKSt10shared_ptrIS0_Ejjjj>
 8006900:	4603      	mov	r3, r0
 8006902:	2b00      	cmp	r3, #0
 8006904:	d014      	beq.n	8006930 <_ZN4tama7Texture8insertAtENS_5Vec2dESt10shared_ptrIS0_E+0xa4>
                    {
                        this->data[newY][newX] = texture->data[i][j];
 8006906:	6838      	ldr	r0, [r7, #0]
 8006908:	f000 fcee 	bl	80072e8 <_ZNKSt19__shared_ptr_accessIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800690c:	4603      	mov	r3, r0
 800690e:	68da      	ldr	r2, [r3, #12]
 8006910:	69fb      	ldr	r3, [r7, #28]
 8006912:	009b      	lsls	r3, r3, #2
 8006914:	4413      	add	r3, r2
 8006916:	681a      	ldr	r2, [r3, #0]
 8006918:	69bb      	ldr	r3, [r7, #24]
 800691a:	441a      	add	r2, r3
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	68d9      	ldr	r1, [r3, #12]
 8006920:	697b      	ldr	r3, [r7, #20]
 8006922:	009b      	lsls	r3, r3, #2
 8006924:	440b      	add	r3, r1
 8006926:	6819      	ldr	r1, [r3, #0]
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	440b      	add	r3, r1
 800692c:	7812      	ldrb	r2, [r2, #0]
 800692e:	701a      	strb	r2, [r3, #0]
                for (unsigned j = 0; j < texture->width; ++j)
 8006930:	69bb      	ldr	r3, [r7, #24]
 8006932:	3301      	adds	r3, #1
 8006934:	61bb      	str	r3, [r7, #24]
 8006936:	e7c2      	b.n	80068be <_ZN4tama7Texture8insertAtENS_5Vec2dESt10shared_ptrIS0_E+0x32>
            for (unsigned i = 0; i < texture->height; ++i)
 8006938:	69fb      	ldr	r3, [r7, #28]
 800693a:	3301      	adds	r3, #1
 800693c:	61fb      	str	r3, [r7, #28]
 800693e:	e7af      	b.n	80068a0 <_ZN4tama7Texture8insertAtENS_5Vec2dESt10shared_ptrIS0_E+0x14>
                    }
                }
            }
        }
 8006940:	bf00      	nop
 8006942:	3720      	adds	r7, #32
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}

08006948 <_ZNK4tama7Texture15shouldDrawPixelERKSt10shared_ptrIS0_Ejjjj>:

        bool shouldDrawPixel(const std::shared_ptr<Texture> &texture, unsigned int i, unsigned int j, unsigned int newY,
 8006948:	b580      	push	{r7, lr}
 800694a:	b084      	sub	sp, #16
 800694c:	af00      	add	r7, sp, #0
 800694e:	60f8      	str	r0, [r7, #12]
 8006950:	60b9      	str	r1, [r7, #8]
 8006952:	607a      	str	r2, [r7, #4]
 8006954:	603b      	str	r3, [r7, #0]
                             unsigned int newX) const
        { return newX < width && newY < height && texture->data[i][j] != PixelColor::TRANSPARENT; }
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	685b      	ldr	r3, [r3, #4]
 800695a:	69fa      	ldr	r2, [r7, #28]
 800695c:	429a      	cmp	r2, r3
 800695e:	d214      	bcs.n	800698a <_ZNK4tama7Texture15shouldDrawPixelERKSt10shared_ptrIS0_Ejjjj+0x42>
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	689b      	ldr	r3, [r3, #8]
 8006964:	69ba      	ldr	r2, [r7, #24]
 8006966:	429a      	cmp	r2, r3
 8006968:	d20f      	bcs.n	800698a <_ZNK4tama7Texture15shouldDrawPixelERKSt10shared_ptrIS0_Ejjjj+0x42>
 800696a:	68b8      	ldr	r0, [r7, #8]
 800696c:	f000 fcbc 	bl	80072e8 <_ZNKSt19__shared_ptr_accessIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8006970:	4603      	mov	r3, r0
 8006972:	68da      	ldr	r2, [r3, #12]
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	009b      	lsls	r3, r3, #2
 8006978:	4413      	add	r3, r2
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	4413      	add	r3, r2
 8006980:	781b      	ldrb	r3, [r3, #0]
 8006982:	2b02      	cmp	r3, #2
 8006984:	d001      	beq.n	800698a <_ZNK4tama7Texture15shouldDrawPixelERKSt10shared_ptrIS0_Ejjjj+0x42>
 8006986:	2301      	movs	r3, #1
 8006988:	e000      	b.n	800698c <_ZNK4tama7Texture15shouldDrawPixelERKSt10shared_ptrIS0_Ejjjj+0x44>
 800698a:	2300      	movs	r3, #0
 800698c:	4618      	mov	r0, r3
 800698e:	3710      	adds	r7, #16
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}

08006994 <_ZN4tama7TextureD1Ev>:

        virtual ~Texture()
 8006994:	b580      	push	{r7, lr}
 8006996:	b084      	sub	sp, #16
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
        {
 800699c:	4a16      	ldr	r2, [pc, #88]	; (80069f8 <_ZN4tama7TextureD1Ev+0x64>)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	601a      	str	r2, [r3, #0]
            for (unsigned i = 0; i < height; ++i)
 80069a2:	2300      	movs	r3, #0
 80069a4:	60fb      	str	r3, [r7, #12]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	689b      	ldr	r3, [r3, #8]
 80069aa:	68fa      	ldr	r2, [r7, #12]
 80069ac:	429a      	cmp	r2, r3
 80069ae:	d214      	bcs.n	80069da <_ZN4tama7TextureD1Ev+0x46>
            {
                delete[] data[i];
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	68da      	ldr	r2, [r3, #12]
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	009b      	lsls	r3, r3, #2
 80069b8:	4413      	add	r3, r2
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d008      	beq.n	80069d2 <_ZN4tama7TextureD1Ev+0x3e>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	68da      	ldr	r2, [r3, #12]
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	009b      	lsls	r3, r3, #2
 80069c8:	4413      	add	r3, r2
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4618      	mov	r0, r3
 80069ce:	f010 fd69 	bl	80174a4 <_ZdaPv>
            for (unsigned i = 0; i < height; ++i)
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	3301      	adds	r3, #1
 80069d6:	60fb      	str	r3, [r7, #12]
 80069d8:	e7e5      	b.n	80069a6 <_ZN4tama7TextureD1Ev+0x12>
            }
            delete[] data;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	68db      	ldr	r3, [r3, #12]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d004      	beq.n	80069ec <_ZN4tama7TextureD1Ev+0x58>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	68db      	ldr	r3, [r3, #12]
 80069e6:	4618      	mov	r0, r3
 80069e8:	f010 fd5c 	bl	80174a4 <_ZdaPv>
        }
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	4618      	mov	r0, r3
 80069f0:	3710      	adds	r7, #16
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}
 80069f6:	bf00      	nop
 80069f8:	0801aff8 	.word	0x0801aff8

080069fc <_ZN4tama7TextureD0Ev>:
        virtual ~Texture()
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b082      	sub	sp, #8
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
        }
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f7ff ffc5 	bl	8006994 <_ZN4tama7TextureD1Ev>
 8006a0a:	2110      	movs	r1, #16
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f010 fd50 	bl	80174b2 <_ZdlPvj>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	4618      	mov	r0, r3
 8006a16:	3708      	adds	r7, #8
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}

08006a1c <_ZN4tama4Text10setTextureESt10shared_ptrINS_7TextureEE>:
#include "Text.h"
#include "../../../../../STM32F411Disco-drivers/texture-loader/Stm32TextureLoader.h"
#include "../../../../assets/text/standard-font.texture.h"

void tama::Text::setTexture(std::shared_ptr<Texture> ptr)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b083      	sub	sp, #12
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
 8006a24:	6039      	str	r1, [r7, #0]

}
 8006a26:	bf00      	nop
 8006a28:	370c      	adds	r7, #12
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a30:	4770      	bx	lr

08006a32 <_ZN4tama4Text11setPositionENS_5Vec2dE>:

void tama::Text::setPosition(tama::Vec2d d)
{
 8006a32:	b580      	push	{r7, lr}
 8006a34:	b084      	sub	sp, #16
 8006a36:	af00      	add	r7, sp, #0
 8006a38:	60f8      	str	r0, [r7, #12]
 8006a3a:	1d3b      	adds	r3, r7, #4
 8006a3c:	e883 0006 	stmia.w	r3, {r1, r2}
    this->position = d;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	3338      	adds	r3, #56	; 0x38
 8006a44:	1d3a      	adds	r2, r7, #4
 8006a46:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006a4a:	e883 0003 	stmia.w	r3, {r0, r1}
    notifyObserver();
 8006a4e:	68f8      	ldr	r0, [r7, #12]
 8006a50:	f000 f89a 	bl	8006b88 <_ZN4tama4Text14notifyObserverEv>
}
 8006a54:	bf00      	nop
 8006a56:	3710      	adds	r7, #16
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bd80      	pop	{r7, pc}

08006a5c <_ZN4tama4Text10getTextureEv>:

std::shared_ptr<tama::Texture> tama::Text::getTexture()
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b082      	sub	sp, #8
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
 8006a64:	6039      	str	r1, [r7, #0]
    return texture;
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	3328      	adds	r3, #40	; 0x28
 8006a6a:	4619      	mov	r1, r3
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f7ff fcd2 	bl	8006416 <_ZNSt10shared_ptrIN4tama7TextureEEC1ERKS2_>
}
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	3708      	adds	r7, #8
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}

08006a7a <_ZN4tama4Text11getPositionEv>:

tama::Vec2d tama::Text::getPosition()
{
 8006a7a:	b480      	push	{r7}
 8006a7c:	b083      	sub	sp, #12
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	6078      	str	r0, [r7, #4]
 8006a82:	6039      	str	r1, [r7, #0]
    return position;
 8006a84:	687a      	ldr	r2, [r7, #4]
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	3338      	adds	r3, #56	; 0x38
 8006a8a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006a8e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	370c      	adds	r7, #12
 8006a96:	46bd      	mov	sp, r7
 8006a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9c:	4770      	bx	lr

08006a9e <_ZN4tama4Text4moveENS_5Vec2dE>:

void tama::Text::move(tama::Vec2d delta)
{
 8006a9e:	b590      	push	{r4, r7, lr}
 8006aa0:	b087      	sub	sp, #28
 8006aa2:	af00      	add	r7, sp, #0
 8006aa4:	6178      	str	r0, [r7, #20]
 8006aa6:	f107 030c 	add.w	r3, r7, #12
 8006aaa:	e883 0006 	stmia.w	r3, {r1, r2}
    position = position + delta;
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006ab4:	697c      	ldr	r4, [r7, #20]
 8006ab6:	4638      	mov	r0, r7
 8006ab8:	f107 030c 	add.w	r3, r7, #12
 8006abc:	cb0c      	ldmia	r3, {r2, r3}
 8006abe:	f7f9 fd13 	bl	80004e8 <_ZN4tama5Vec2dplES0_>
 8006ac2:	f104 0338 	add.w	r3, r4, #56	; 0x38
 8006ac6:	463a      	mov	r2, r7
 8006ac8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006acc:	e883 0003 	stmia.w	r3, {r0, r1}
    notifyObserver();
 8006ad0:	6978      	ldr	r0, [r7, #20]
 8006ad2:	f000 f859 	bl	8006b88 <_ZN4tama4Text14notifyObserverEv>
}
 8006ad6:	bf00      	nop
 8006ad8:	371c      	adds	r7, #28
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd90      	pop	{r4, r7, pc}

08006ade <_ZN4tama4Text4hideEv>:

void tama::Text::hide()
{
 8006ade:	b580      	push	{r7, lr}
 8006ae0:	b082      	sub	sp, #8
 8006ae2:	af00      	add	r7, sp, #0
 8006ae4:	6078      	str	r0, [r7, #4]
    visible = false;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    notifyObserver();
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f000 f84a 	bl	8006b88 <_ZN4tama4Text14notifyObserverEv>
}
 8006af4:	bf00      	nop
 8006af6:	3708      	adds	r7, #8
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}

08006afc <_ZN4tama4Text4showEv>:

void tama::Text::show()
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b082      	sub	sp, #8
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
    visible = true;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2201      	movs	r2, #1
 8006b08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    notifyObserver();
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	f000 f83b 	bl	8006b88 <_ZN4tama4Text14notifyObserverEv>
}
 8006b12:	bf00      	nop
 8006b14:	3708      	adds	r7, #8
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}

08006b1a <_ZN4tama4Text17setChangeObserverESt10shared_ptrINS_14ChangeObserverEE>:

void tama::Text::setChangeObserver(std::shared_ptr<ChangeObserver> ptr)
{
 8006b1a:	b580      	push	{r7, lr}
 8006b1c:	b082      	sub	sp, #8
 8006b1e:	af00      	add	r7, sp, #0
 8006b20:	6078      	str	r0, [r7, #4]
 8006b22:	6039      	str	r1, [r7, #0]
    this->observer = observer;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f103 0208 	add.w	r2, r3, #8
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	3308      	adds	r3, #8
 8006b2e:	4619      	mov	r1, r3
 8006b30:	4610      	mov	r0, r2
 8006b32:	f7ff fcf3 	bl	800651c <_ZNSt10shared_ptrIN4tama14ChangeObserverEEaSERKS2_>
}
 8006b36:	bf00      	nop
 8006b38:	3708      	adds	r7, #8
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}

08006b3e <_ZN4tama4Text9isVisibleEv>:

bool tama::Text::isVisible()
{
 8006b3e:	b480      	push	{r7}
 8006b40:	b083      	sub	sp, #12
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	6078      	str	r0, [r7, #4]
    return visible;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	370c      	adds	r7, #12
 8006b50:	46bd      	mov	sp, r7
 8006b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b56:	4770      	bx	lr

08006b58 <_ZN4tama4Text7setTextENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void tama::Text::setText(std::string text)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b082      	sub	sp, #8
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
 8006b60:	6039      	str	r1, [r7, #0]
    this->text = text;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	3310      	adds	r3, #16
 8006b66:	6839      	ldr	r1, [r7, #0]
 8006b68:	4618      	mov	r0, r3
 8006b6a:	f010 fdc2 	bl	80176f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
    recalculateDimensions();
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f000 fb3a 	bl	80071e8 <_ZN4tama4Text21recalculateDimensionsEv>
    updateTexture();
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f000 f895 	bl	8006ca4 <_ZN4tama4Text13updateTextureEv>
    notifyObserver();
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f000 f804 	bl	8006b88 <_ZN4tama4Text14notifyObserverEv>
}
 8006b80:	bf00      	nop
 8006b82:	3708      	adds	r7, #8
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}

08006b88 <_ZN4tama4Text14notifyObserverEv>:

void tama::Text::notifyObserver()
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b082      	sub	sp, #8
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
    if (observer != nullptr)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	3308      	adds	r3, #8
 8006b94:	2100      	movs	r1, #0
 8006b96:	4618      	mov	r0, r3
 8006b98:	f7ff fd9c 	bl	80066d4 <_ZStneIN4tama14ChangeObserverEEbRKSt10shared_ptrIT_EDn>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d009      	beq.n	8006bb6 <_ZN4tama4Text14notifyObserverEv+0x2e>
    {
        observer->onChange();
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	3308      	adds	r3, #8
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	f7ff fda2 	bl	80066f0 <_ZNKSt19__shared_ptr_accessIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8006bac:	4602      	mov	r2, r0
 8006bae:	6813      	ldr	r3, [r2, #0]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4610      	mov	r0, r2
 8006bb4:	4798      	blx	r3
    }
}
 8006bb6:	bf00      	nop
 8006bb8:	3708      	adds	r7, #8
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}
	...

08006bc0 <_ZN4tama4TextC1ERKNS_5Vec2dE>:

tama::Text::Text(const tama::Vec2d &position) :
 8006bc0:	b590      	push	{r4, r7, lr}
 8006bc2:	b087      	sub	sp, #28
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
 8006bc8:	6039      	str	r1, [r7, #0]
                                                position(position)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	4618      	mov	r0, r3
 8006bce:	f7ff fceb 	bl	80065a8 <_ZN4tama8DrawableC1Ev>
 8006bd2:	4a32      	ldr	r2, [pc, #200]	; (8006c9c <_ZN4tama4TextC1ERKNS_5Vec2dE+0xdc>)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	601a      	str	r2, [r3, #0]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	3304      	adds	r3, #4
 8006bdc:	4618      	mov	r0, r3
 8006bde:	f000 fba9 	bl	8007334 <_ZNSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEC1IS3_vEEv>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	3308      	adds	r3, #8
 8006be6:	4618      	mov	r0, r3
 8006be8:	f7ff fd8e 	bl	8006708 <_ZNSt10shared_ptrIN4tama14ChangeObserverEEC1Ev>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	3310      	adds	r3, #16
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	f010 fd71 	bl	80176d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	3328      	adds	r3, #40	; 0x28
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f7ff fd9e 	bl	800673c <_ZNSt10shared_ptrIN4tama7TextureEEC1Ev>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2207      	movs	r2, #7
 8006c04:	631a      	str	r2, [r3, #48]	; 0x30
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	683a      	ldr	r2, [r7, #0]
 8006c12:	3338      	adds	r3, #56	; 0x38
 8006c14:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006c18:	e883 0003 	stmia.w	r3, {r0, r1}
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	3340      	adds	r3, #64	; 0x40
 8006c20:	4618      	mov	r0, r3
 8006c22:	f7ff fb87 	bl	8006334 <_ZN4tama5Vec2dC1Ev>
{
    textureLoader = std::make_unique<tama::Stm32TextureLoader>();
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	1d1c      	adds	r4, r3, #4
 8006c2a:	f107 030c 	add.w	r3, r7, #12
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f000 fbb2 	bl	8007398 <_ZSt11make_uniqueIN4tama18Stm32TextureLoaderEJEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
 8006c34:	f107 030c 	add.w	r3, r7, #12
 8006c38:	4619      	mov	r1, r3
 8006c3a:	4620      	mov	r0, r4
 8006c3c:	f000 fbe1 	bl	8007402 <_ZNSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEaSINS0_18Stm32TextureLoaderES2_IS6_EEENSt9enable_ifIXsrSt6__and_IJS9_IJSt14is_convertibleINS_IT_T0_E7pointerEPS1_ESt6__not_ISt8is_arrayISB_EESt5__or_IJS9_IJSt12is_referenceIS3_ESt7is_sameIS3_SC_EEES9_IJSH_ISN_ESA_ISC_S3_EEEEEEESt13is_assignableIRS3_OSC_EEE5valueERS4_E4typeEOSD_>
 8006c40:	f107 030c 	add.w	r3, r7, #12
 8006c44:	4618      	mov	r0, r3
 8006c46:	f000 fbbd 	bl	80073c4 <_ZNSt10unique_ptrIN4tama18Stm32TextureLoaderESt14default_deleteIS1_EED1Ev>
    observer = nullptr;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f103 0408 	add.w	r4, r3, #8
 8006c50:	f107 0310 	add.w	r3, r7, #16
 8006c54:	2100      	movs	r1, #0
 8006c56:	4618      	mov	r0, r3
 8006c58:	f7ff fd63 	bl	8006722 <_ZNSt10shared_ptrIN4tama14ChangeObserverEEC1EDn>
 8006c5c:	f107 0310 	add.w	r3, r7, #16
 8006c60:	4619      	mov	r1, r3
 8006c62:	4620      	mov	r0, r4
 8006c64:	f7fd fd7c 	bl	8004760 <_ZNSt10shared_ptrIN4tama14ChangeObserverEEaSEOS2_>
 8006c68:	f107 0310 	add.w	r3, r7, #16
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f7fb fef2 	bl	8002a56 <_ZNSt10shared_ptrIN4tama14ChangeObserverEED1Ev>
    visible = true;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2201      	movs	r2, #1
 8006c76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    text = "";
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	3310      	adds	r3, #16
 8006c7e:	4908      	ldr	r1, [pc, #32]	; (8006ca0 <_ZN4tama4TextC1ERKNS_5Vec2dE+0xe0>)
 8006c80:	4618      	mov	r0, r3
 8006c82:	f010 fdf6 	bl	8017872 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
    recalculateDimensions();
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f000 faae 	bl	80071e8 <_ZN4tama4Text21recalculateDimensionsEv>
    updateTexture();
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f000 f809 	bl	8006ca4 <_ZN4tama4Text13updateTextureEv>
}
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	4618      	mov	r0, r3
 8006c96:	371c      	adds	r7, #28
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd90      	pop	{r4, r7, pc}
 8006c9c:	0801afc0 	.word	0x0801afc0
 8006ca0:	08017d80 	.word	0x08017d80

08006ca4 <_ZN4tama4Text13updateTextureEv>:

void tama::Text::updateTexture()
{
 8006ca4:	b590      	push	{r4, r7, lr}
 8006ca6:	b08f      	sub	sp, #60	; 0x3c
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
    texture = std::make_shared<Texture>(dimensions.x, dimensions.y);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f103 0244 	add.w	r2, r3, #68	; 0x44
 8006cbe:	f107 0314 	add.w	r3, r7, #20
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f000 fbcb 	bl	800745e <_ZSt11make_sharedIN4tama7TextureEJRiS2_EESt10shared_ptrIT_EDpOT0_>
 8006cc8:	f107 0314 	add.w	r3, r7, #20
 8006ccc:	4619      	mov	r1, r3
 8006cce:	4620      	mov	r0, r4
 8006cd0:	f7fd fd64 	bl	800479c <_ZNSt10shared_ptrIN4tama7TextureEEaSEOS2_>
 8006cd4:	f107 0314 	add.w	r3, r7, #20
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f7fc fdc9 	bl	8003870 <_ZNSt10shared_ptrIN4tama7TextureEED1Ev>
    unsigned line = 0;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	637b      	str	r3, [r7, #52]	; 0x34
    unsigned letterInLine = 0;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	633b      	str	r3, [r7, #48]	; 0x30

    for (unsigned i = 0; i < text.size(); ++i)
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	3310      	adds	r3, #16
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f010 fd30 	bl	8017754 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8006cf4:	4602      	mov	r2, r0
 8006cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	bf34      	ite	cc
 8006cfc:	2301      	movcc	r3, #1
 8006cfe:	2300      	movcs	r3, #0
 8006d00:	b2db      	uxtb	r3, r3
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d05b      	beq.n	8006dbe <_ZN4tama4Text13updateTextureEv+0x11a>
    {
        if (text[i] == '\n')
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	3310      	adds	r3, #16
 8006d0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f010 fd23 	bl	8017758 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8006d12:	4603      	mov	r3, r0
 8006d14:	781b      	ldrb	r3, [r3, #0]
 8006d16:	2b0a      	cmp	r3, #10
 8006d18:	bf0c      	ite	eq
 8006d1a:	2301      	moveq	r3, #1
 8006d1c:	2300      	movne	r3, #0
 8006d1e:	b2db      	uxtb	r3, r3
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d005      	beq.n	8006d30 <_ZN4tama4Text13updateTextureEv+0x8c>
        {
            line++;
 8006d24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d26:	3301      	adds	r3, #1
 8006d28:	637b      	str	r3, [r7, #52]	; 0x34
            letterInLine = 0;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	633b      	str	r3, [r7, #48]	; 0x30
 8006d2e:	e042      	b.n	8006db6 <_ZN4tama4Text13updateTextureEv+0x112>
            continue;
        }

        auto letter = getTextureForLetter(text[i]);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	3310      	adds	r3, #16
 8006d34:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d36:	4618      	mov	r0, r3
 8006d38:	f010 fd0e 	bl	8017758 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	781a      	ldrb	r2, [r3, #0]
 8006d40:	f107 030c 	add.w	r3, r7, #12
 8006d44:	6879      	ldr	r1, [r7, #4]
 8006d46:	4618      	mov	r0, r3
 8006d48:	f000 f83e 	bl	8006dc8 <_ZN4tama4Text19getTextureForLetterEc>
        texture->insertAt(Vec2d(letterInLine++ * (size + 1), line * (size + 1)), letter);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	3328      	adds	r3, #40	; 0x28
 8006d50:	4618      	mov	r0, r3
 8006d52:	f000 fac9 	bl	80072e8 <_ZNKSt19__shared_ptr_accessIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8006d56:	4604      	mov	r4, r0
 8006d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d5a:	1c5a      	adds	r2, r3, #1
 8006d5c:	633a      	str	r2, [r7, #48]	; 0x30
 8006d5e:	687a      	ldr	r2, [r7, #4]
 8006d60:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006d62:	3201      	adds	r2, #1
 8006d64:	fb02 f303 	mul.w	r3, r2, r3
 8006d68:	4619      	mov	r1, r3
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d6e:	3301      	adds	r3, #1
 8006d70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d72:	fb02 f303 	mul.w	r3, r2, r3
 8006d76:	461a      	mov	r2, r3
 8006d78:	f107 031c 	add.w	r3, r7, #28
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	f7f9 fbcb 	bl	8000518 <_ZN4tama5Vec2dC1Eii>
 8006d82:	f107 020c 	add.w	r2, r7, #12
 8006d86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d8a:	4611      	mov	r1, r2
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	f7ff fb42 	bl	8006416 <_ZNSt10shared_ptrIN4tama7TextureEEC1ERKS2_>
 8006d92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d96:	f107 021c 	add.w	r2, r7, #28
 8006d9a:	ca06      	ldmia	r2, {r1, r2}
 8006d9c:	4620      	mov	r0, r4
 8006d9e:	f7ff fd75 	bl	800688c <_ZN4tama7Texture8insertAtENS_5Vec2dESt10shared_ptrIS0_E>
 8006da2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006da6:	4618      	mov	r0, r3
 8006da8:	f7fc fd62 	bl	8003870 <_ZNSt10shared_ptrIN4tama7TextureEED1Ev>
        auto letter = getTextureForLetter(text[i]);
 8006dac:	f107 030c 	add.w	r3, r7, #12
 8006db0:	4618      	mov	r0, r3
 8006db2:	f7fc fd5d 	bl	8003870 <_ZNSt10shared_ptrIN4tama7TextureEED1Ev>
    for (unsigned i = 0; i < text.size(); ++i)
 8006db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006db8:	3301      	adds	r3, #1
 8006dba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006dbc:	e795      	b.n	8006cea <_ZN4tama4Text13updateTextureEv+0x46>
        //texture->insertAt(Vec2d(0, 0), letter);
    }
}
 8006dbe:	bf00      	nop
 8006dc0:	373c      	adds	r7, #60	; 0x3c
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd90      	pop	{r4, r7, pc}
	...

08006dc8 <_ZN4tama4Text19getTextureForLetterEc>:

std::shared_ptr<tama::Texture> tama::Text::getTextureForLetter(char letter)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b086      	sub	sp, #24
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	60f8      	str	r0, [r7, #12]
 8006dd0:	60b9      	str	r1, [r7, #8]
 8006dd2:	4613      	mov	r3, r2
 8006dd4:	71fb      	strb	r3, [r7, #7]
    switch (letter)
 8006dd6:	79fb      	ldrb	r3, [r7, #7]
 8006dd8:	3b20      	subs	r3, #32
 8006dda:	2b3a      	cmp	r3, #58	; 0x3a
 8006ddc:	f200 81f4 	bhi.w	80071c8 <_ZN4tama4Text19getTextureForLetterEc+0x400>
 8006de0:	a201      	add	r2, pc, #4	; (adr r2, 8006de8 <_ZN4tama4Text19getTextureForLetterEc+0x20>)
 8006de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006de6:	bf00      	nop
 8006de8:	08007145 	.word	0x08007145
 8006dec:	080071c9 	.word	0x080071c9
 8006df0:	080071c9 	.word	0x080071c9
 8006df4:	080071c9 	.word	0x080071c9
 8006df8:	080071c9 	.word	0x080071c9
 8006dfc:	080071c9 	.word	0x080071c9
 8006e00:	080071c9 	.word	0x080071c9
 8006e04:	080071c9 	.word	0x080071c9
 8006e08:	080071c9 	.word	0x080071c9
 8006e0c:	080071c9 	.word	0x080071c9
 8006e10:	080071c9 	.word	0x080071c9
 8006e14:	080071c9 	.word	0x080071c9
 8006e18:	080071c9 	.word	0x080071c9
 8006e1c:	080071c9 	.word	0x080071c9
 8006e20:	080071c9 	.word	0x080071c9
 8006e24:	080071c9 	.word	0x080071c9
 8006e28:	080071c9 	.word	0x080071c9
 8006e2c:	080071c9 	.word	0x080071c9
 8006e30:	080071c9 	.word	0x080071c9
 8006e34:	080071c9 	.word	0x080071c9
 8006e38:	080071c9 	.word	0x080071c9
 8006e3c:	080071c9 	.word	0x080071c9
 8006e40:	080071c9 	.word	0x080071c9
 8006e44:	080071c9 	.word	0x080071c9
 8006e48:	080071c9 	.word	0x080071c9
 8006e4c:	080071c9 	.word	0x080071c9
 8006e50:	080071c9 	.word	0x080071c9
 8006e54:	080071c9 	.word	0x080071c9
 8006e58:	080071c9 	.word	0x080071c9
 8006e5c:	080071c9 	.word	0x080071c9
 8006e60:	080071c9 	.word	0x080071c9
 8006e64:	080071c9 	.word	0x080071c9
 8006e68:	080071c9 	.word	0x080071c9
 8006e6c:	08006f65 	.word	0x08006f65
 8006e70:	08006f7d 	.word	0x08006f7d
 8006e74:	08006f95 	.word	0x08006f95
 8006e78:	08006f05 	.word	0x08006f05
 8006e7c:	08006fad 	.word	0x08006fad
 8006e80:	08006fc5 	.word	0x08006fc5
 8006e84:	08006fdd 	.word	0x08006fdd
 8006e88:	08006ff5 	.word	0x08006ff5
 8006e8c:	08006f4d 	.word	0x08006f4d
 8006e90:	08006ed5 	.word	0x08006ed5
 8006e94:	0800700d 	.word	0x0800700d
 8006e98:	08007025 	.word	0x08007025
 8006e9c:	0800703d 	.word	0x0800703d
 8006ea0:	08007055 	.word	0x08007055
 8006ea4:	0800706d 	.word	0x0800706d
 8006ea8:	08007085 	.word	0x08007085
 8006eac:	0800709d 	.word	0x0800709d
 8006eb0:	080070b5 	.word	0x080070b5
 8006eb4:	08006f1d 	.word	0x08006f1d
 8006eb8:	08006f35 	.word	0x08006f35
 8006ebc:	08006eed 	.word	0x08006eed
 8006ec0:	080070fd 	.word	0x080070fd
 8006ec4:	080070cd 	.word	0x080070cd
 8006ec8:	080070e5 	.word	0x080070e5
 8006ecc:	08007115 	.word	0x08007115
 8006ed0:	0800712d 	.word	0x0800712d
    {
        case 'J': return textureLoader->load(tama::asset::font::standard::J);
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	3304      	adds	r3, #4
 8006ed8:	4618      	mov	r0, r3
 8006eda:	f000 fae2 	bl	80074a2 <_ZNKSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEptEv>
 8006ede:	4601      	mov	r1, r0
 8006ee0:	680b      	ldr	r3, [r1, #0]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	68f8      	ldr	r0, [r7, #12]
 8006ee6:	4a9d      	ldr	r2, [pc, #628]	; (800715c <_ZN4tama4Text19getTextureForLetterEc+0x394>)
 8006ee8:	4798      	blx	r3
 8006eea:	e179      	b.n	80071e0 <_ZN4tama4Text19getTextureForLetterEc+0x418>
        case 'U': return textureLoader->load(tama::asset::font::standard::U);
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	3304      	adds	r3, #4
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	f000 fad6 	bl	80074a2 <_ZNKSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEptEv>
 8006ef6:	4601      	mov	r1, r0
 8006ef8:	680b      	ldr	r3, [r1, #0]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	68f8      	ldr	r0, [r7, #12]
 8006efe:	4a98      	ldr	r2, [pc, #608]	; (8007160 <_ZN4tama4Text19getTextureForLetterEc+0x398>)
 8006f00:	4798      	blx	r3
 8006f02:	e16d      	b.n	80071e0 <_ZN4tama4Text19getTextureForLetterEc+0x418>
        case 'D': return textureLoader->load(tama::asset::font::standard::D);
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	3304      	adds	r3, #4
 8006f08:	4618      	mov	r0, r3
 8006f0a:	f000 faca 	bl	80074a2 <_ZNKSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEptEv>
 8006f0e:	4601      	mov	r1, r0
 8006f10:	680b      	ldr	r3, [r1, #0]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	68f8      	ldr	r0, [r7, #12]
 8006f16:	4a93      	ldr	r2, [pc, #588]	; (8007164 <_ZN4tama4Text19getTextureForLetterEc+0x39c>)
 8006f18:	4798      	blx	r3
 8006f1a:	e161      	b.n	80071e0 <_ZN4tama4Text19getTextureForLetterEc+0x418>
        case 'S': return textureLoader->load(tama::asset::font::standard::S);
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	3304      	adds	r3, #4
 8006f20:	4618      	mov	r0, r3
 8006f22:	f000 fabe 	bl	80074a2 <_ZNKSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEptEv>
 8006f26:	4601      	mov	r1, r0
 8006f28:	680b      	ldr	r3, [r1, #0]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	68f8      	ldr	r0, [r7, #12]
 8006f2e:	4a8e      	ldr	r2, [pc, #568]	; (8007168 <_ZN4tama4Text19getTextureForLetterEc+0x3a0>)
 8006f30:	4798      	blx	r3
 8006f32:	e155      	b.n	80071e0 <_ZN4tama4Text19getTextureForLetterEc+0x418>
        case 'T': return textureLoader->load(tama::asset::font::standard::T);
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	3304      	adds	r3, #4
 8006f38:	4618      	mov	r0, r3
 8006f3a:	f000 fab2 	bl	80074a2 <_ZNKSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEptEv>
 8006f3e:	4601      	mov	r1, r0
 8006f40:	680b      	ldr	r3, [r1, #0]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	68f8      	ldr	r0, [r7, #12]
 8006f46:	4a89      	ldr	r2, [pc, #548]	; (800716c <_ZN4tama4Text19getTextureForLetterEc+0x3a4>)
 8006f48:	4798      	blx	r3
 8006f4a:	e149      	b.n	80071e0 <_ZN4tama4Text19getTextureForLetterEc+0x418>
        case 'I': return textureLoader->load(tama::asset::font::standard::I);
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	3304      	adds	r3, #4
 8006f50:	4618      	mov	r0, r3
 8006f52:	f000 faa6 	bl	80074a2 <_ZNKSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEptEv>
 8006f56:	4601      	mov	r1, r0
 8006f58:	680b      	ldr	r3, [r1, #0]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	68f8      	ldr	r0, [r7, #12]
 8006f5e:	4a84      	ldr	r2, [pc, #528]	; (8007170 <_ZN4tama4Text19getTextureForLetterEc+0x3a8>)
 8006f60:	4798      	blx	r3
 8006f62:	e13d      	b.n	80071e0 <_ZN4tama4Text19getTextureForLetterEc+0x418>
        case 'A': return textureLoader->load(tama::asset::font::standard::A);
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	3304      	adds	r3, #4
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f000 fa9a 	bl	80074a2 <_ZNKSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEptEv>
 8006f6e:	4601      	mov	r1, r0
 8006f70:	680b      	ldr	r3, [r1, #0]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	68f8      	ldr	r0, [r7, #12]
 8006f76:	4a7f      	ldr	r2, [pc, #508]	; (8007174 <_ZN4tama4Text19getTextureForLetterEc+0x3ac>)
 8006f78:	4798      	blx	r3
 8006f7a:	e131      	b.n	80071e0 <_ZN4tama4Text19getTextureForLetterEc+0x418>
        case 'B': return textureLoader->load(tama::asset::font::standard::B);
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	3304      	adds	r3, #4
 8006f80:	4618      	mov	r0, r3
 8006f82:	f000 fa8e 	bl	80074a2 <_ZNKSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEptEv>
 8006f86:	4601      	mov	r1, r0
 8006f88:	680b      	ldr	r3, [r1, #0]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	68f8      	ldr	r0, [r7, #12]
 8006f8e:	4a7a      	ldr	r2, [pc, #488]	; (8007178 <_ZN4tama4Text19getTextureForLetterEc+0x3b0>)
 8006f90:	4798      	blx	r3
 8006f92:	e125      	b.n	80071e0 <_ZN4tama4Text19getTextureForLetterEc+0x418>
        case 'C': return textureLoader->load(tama::asset::font::standard::C);
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	3304      	adds	r3, #4
 8006f98:	4618      	mov	r0, r3
 8006f9a:	f000 fa82 	bl	80074a2 <_ZNKSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEptEv>
 8006f9e:	4601      	mov	r1, r0
 8006fa0:	680b      	ldr	r3, [r1, #0]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	68f8      	ldr	r0, [r7, #12]
 8006fa6:	4a75      	ldr	r2, [pc, #468]	; (800717c <_ZN4tama4Text19getTextureForLetterEc+0x3b4>)
 8006fa8:	4798      	blx	r3
 8006faa:	e119      	b.n	80071e0 <_ZN4tama4Text19getTextureForLetterEc+0x418>
        case 'E': return textureLoader->load(tama::asset::font::standard::E);
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	3304      	adds	r3, #4
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	f000 fa76 	bl	80074a2 <_ZNKSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEptEv>
 8006fb6:	4601      	mov	r1, r0
 8006fb8:	680b      	ldr	r3, [r1, #0]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	68f8      	ldr	r0, [r7, #12]
 8006fbe:	4a70      	ldr	r2, [pc, #448]	; (8007180 <_ZN4tama4Text19getTextureForLetterEc+0x3b8>)
 8006fc0:	4798      	blx	r3
 8006fc2:	e10d      	b.n	80071e0 <_ZN4tama4Text19getTextureForLetterEc+0x418>
        case 'F': return textureLoader->load(tama::asset::font::standard::F);
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	3304      	adds	r3, #4
 8006fc8:	4618      	mov	r0, r3
 8006fca:	f000 fa6a 	bl	80074a2 <_ZNKSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEptEv>
 8006fce:	4601      	mov	r1, r0
 8006fd0:	680b      	ldr	r3, [r1, #0]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	68f8      	ldr	r0, [r7, #12]
 8006fd6:	4a6b      	ldr	r2, [pc, #428]	; (8007184 <_ZN4tama4Text19getTextureForLetterEc+0x3bc>)
 8006fd8:	4798      	blx	r3
 8006fda:	e101      	b.n	80071e0 <_ZN4tama4Text19getTextureForLetterEc+0x418>
        case 'G': return textureLoader->load(tama::asset::font::standard::G);
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	3304      	adds	r3, #4
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	f000 fa5e 	bl	80074a2 <_ZNKSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEptEv>
 8006fe6:	4601      	mov	r1, r0
 8006fe8:	680b      	ldr	r3, [r1, #0]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	68f8      	ldr	r0, [r7, #12]
 8006fee:	4a66      	ldr	r2, [pc, #408]	; (8007188 <_ZN4tama4Text19getTextureForLetterEc+0x3c0>)
 8006ff0:	4798      	blx	r3
 8006ff2:	e0f5      	b.n	80071e0 <_ZN4tama4Text19getTextureForLetterEc+0x418>
        case 'H': return textureLoader->load(tama::asset::font::standard::H);
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	3304      	adds	r3, #4
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	f000 fa52 	bl	80074a2 <_ZNKSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEptEv>
 8006ffe:	4601      	mov	r1, r0
 8007000:	680b      	ldr	r3, [r1, #0]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	68f8      	ldr	r0, [r7, #12]
 8007006:	4a61      	ldr	r2, [pc, #388]	; (800718c <_ZN4tama4Text19getTextureForLetterEc+0x3c4>)
 8007008:	4798      	blx	r3
 800700a:	e0e9      	b.n	80071e0 <_ZN4tama4Text19getTextureForLetterEc+0x418>
        case 'K': return textureLoader->load(tama::asset::font::standard::K);
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	3304      	adds	r3, #4
 8007010:	4618      	mov	r0, r3
 8007012:	f000 fa46 	bl	80074a2 <_ZNKSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEptEv>
 8007016:	4601      	mov	r1, r0
 8007018:	680b      	ldr	r3, [r1, #0]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	68f8      	ldr	r0, [r7, #12]
 800701e:	4a5c      	ldr	r2, [pc, #368]	; (8007190 <_ZN4tama4Text19getTextureForLetterEc+0x3c8>)
 8007020:	4798      	blx	r3
 8007022:	e0dd      	b.n	80071e0 <_ZN4tama4Text19getTextureForLetterEc+0x418>
        case 'L': return textureLoader->load(tama::asset::font::standard::L);
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	3304      	adds	r3, #4
 8007028:	4618      	mov	r0, r3
 800702a:	f000 fa3a 	bl	80074a2 <_ZNKSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEptEv>
 800702e:	4601      	mov	r1, r0
 8007030:	680b      	ldr	r3, [r1, #0]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	68f8      	ldr	r0, [r7, #12]
 8007036:	4a57      	ldr	r2, [pc, #348]	; (8007194 <_ZN4tama4Text19getTextureForLetterEc+0x3cc>)
 8007038:	4798      	blx	r3
 800703a:	e0d1      	b.n	80071e0 <_ZN4tama4Text19getTextureForLetterEc+0x418>
        case 'M': return textureLoader->load(tama::asset::font::standard::M);
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	3304      	adds	r3, #4
 8007040:	4618      	mov	r0, r3
 8007042:	f000 fa2e 	bl	80074a2 <_ZNKSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEptEv>
 8007046:	4601      	mov	r1, r0
 8007048:	680b      	ldr	r3, [r1, #0]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	68f8      	ldr	r0, [r7, #12]
 800704e:	4a52      	ldr	r2, [pc, #328]	; (8007198 <_ZN4tama4Text19getTextureForLetterEc+0x3d0>)
 8007050:	4798      	blx	r3
 8007052:	e0c5      	b.n	80071e0 <_ZN4tama4Text19getTextureForLetterEc+0x418>
        case 'N': return textureLoader->load(tama::asset::font::standard::N);
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	3304      	adds	r3, #4
 8007058:	4618      	mov	r0, r3
 800705a:	f000 fa22 	bl	80074a2 <_ZNKSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEptEv>
 800705e:	4601      	mov	r1, r0
 8007060:	680b      	ldr	r3, [r1, #0]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	68f8      	ldr	r0, [r7, #12]
 8007066:	4a4d      	ldr	r2, [pc, #308]	; (800719c <_ZN4tama4Text19getTextureForLetterEc+0x3d4>)
 8007068:	4798      	blx	r3
 800706a:	e0b9      	b.n	80071e0 <_ZN4tama4Text19getTextureForLetterEc+0x418>
        case 'O': return textureLoader->load(tama::asset::font::standard::O);
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	3304      	adds	r3, #4
 8007070:	4618      	mov	r0, r3
 8007072:	f000 fa16 	bl	80074a2 <_ZNKSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEptEv>
 8007076:	4601      	mov	r1, r0
 8007078:	680b      	ldr	r3, [r1, #0]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	68f8      	ldr	r0, [r7, #12]
 800707e:	4a48      	ldr	r2, [pc, #288]	; (80071a0 <_ZN4tama4Text19getTextureForLetterEc+0x3d8>)
 8007080:	4798      	blx	r3
 8007082:	e0ad      	b.n	80071e0 <_ZN4tama4Text19getTextureForLetterEc+0x418>
        case 'P': return textureLoader->load(tama::asset::font::standard::P);
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	3304      	adds	r3, #4
 8007088:	4618      	mov	r0, r3
 800708a:	f000 fa0a 	bl	80074a2 <_ZNKSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEptEv>
 800708e:	4601      	mov	r1, r0
 8007090:	680b      	ldr	r3, [r1, #0]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	68f8      	ldr	r0, [r7, #12]
 8007096:	4a43      	ldr	r2, [pc, #268]	; (80071a4 <_ZN4tama4Text19getTextureForLetterEc+0x3dc>)
 8007098:	4798      	blx	r3
 800709a:	e0a1      	b.n	80071e0 <_ZN4tama4Text19getTextureForLetterEc+0x418>
        case 'Q': return textureLoader->load(tama::asset::font::standard::Q);
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	3304      	adds	r3, #4
 80070a0:	4618      	mov	r0, r3
 80070a2:	f000 f9fe 	bl	80074a2 <_ZNKSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEptEv>
 80070a6:	4601      	mov	r1, r0
 80070a8:	680b      	ldr	r3, [r1, #0]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	68f8      	ldr	r0, [r7, #12]
 80070ae:	4a3e      	ldr	r2, [pc, #248]	; (80071a8 <_ZN4tama4Text19getTextureForLetterEc+0x3e0>)
 80070b0:	4798      	blx	r3
 80070b2:	e095      	b.n	80071e0 <_ZN4tama4Text19getTextureForLetterEc+0x418>
        case 'R': return textureLoader->load(tama::asset::font::standard::R);
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	3304      	adds	r3, #4
 80070b8:	4618      	mov	r0, r3
 80070ba:	f000 f9f2 	bl	80074a2 <_ZNKSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEptEv>
 80070be:	4601      	mov	r1, r0
 80070c0:	680b      	ldr	r3, [r1, #0]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	68f8      	ldr	r0, [r7, #12]
 80070c6:	4a39      	ldr	r2, [pc, #228]	; (80071ac <_ZN4tama4Text19getTextureForLetterEc+0x3e4>)
 80070c8:	4798      	blx	r3
 80070ca:	e089      	b.n	80071e0 <_ZN4tama4Text19getTextureForLetterEc+0x418>
        case 'W': return textureLoader->load(tama::asset::font::standard::W);
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	3304      	adds	r3, #4
 80070d0:	4618      	mov	r0, r3
 80070d2:	f000 f9e6 	bl	80074a2 <_ZNKSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEptEv>
 80070d6:	4601      	mov	r1, r0
 80070d8:	680b      	ldr	r3, [r1, #0]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	68f8      	ldr	r0, [r7, #12]
 80070de:	4a34      	ldr	r2, [pc, #208]	; (80071b0 <_ZN4tama4Text19getTextureForLetterEc+0x3e8>)
 80070e0:	4798      	blx	r3
 80070e2:	e07d      	b.n	80071e0 <_ZN4tama4Text19getTextureForLetterEc+0x418>
        case 'X': return textureLoader->load(tama::asset::font::standard::X);
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	3304      	adds	r3, #4
 80070e8:	4618      	mov	r0, r3
 80070ea:	f000 f9da 	bl	80074a2 <_ZNKSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEptEv>
 80070ee:	4601      	mov	r1, r0
 80070f0:	680b      	ldr	r3, [r1, #0]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	68f8      	ldr	r0, [r7, #12]
 80070f6:	4a2f      	ldr	r2, [pc, #188]	; (80071b4 <_ZN4tama4Text19getTextureForLetterEc+0x3ec>)
 80070f8:	4798      	blx	r3
 80070fa:	e071      	b.n	80071e0 <_ZN4tama4Text19getTextureForLetterEc+0x418>
        case 'V': return textureLoader->load(tama::asset::font::standard::V);
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	3304      	adds	r3, #4
 8007100:	4618      	mov	r0, r3
 8007102:	f000 f9ce 	bl	80074a2 <_ZNKSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEptEv>
 8007106:	4601      	mov	r1, r0
 8007108:	680b      	ldr	r3, [r1, #0]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	68f8      	ldr	r0, [r7, #12]
 800710e:	4a2a      	ldr	r2, [pc, #168]	; (80071b8 <_ZN4tama4Text19getTextureForLetterEc+0x3f0>)
 8007110:	4798      	blx	r3
 8007112:	e065      	b.n	80071e0 <_ZN4tama4Text19getTextureForLetterEc+0x418>
        case 'Y': return textureLoader->load(tama::asset::font::standard::Y);
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	3304      	adds	r3, #4
 8007118:	4618      	mov	r0, r3
 800711a:	f000 f9c2 	bl	80074a2 <_ZNKSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEptEv>
 800711e:	4601      	mov	r1, r0
 8007120:	680b      	ldr	r3, [r1, #0]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	68f8      	ldr	r0, [r7, #12]
 8007126:	4a25      	ldr	r2, [pc, #148]	; (80071bc <_ZN4tama4Text19getTextureForLetterEc+0x3f4>)
 8007128:	4798      	blx	r3
 800712a:	e059      	b.n	80071e0 <_ZN4tama4Text19getTextureForLetterEc+0x418>
        case 'Z': return textureLoader->load(tama::asset::font::standard::Z);
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	3304      	adds	r3, #4
 8007130:	4618      	mov	r0, r3
 8007132:	f000 f9b6 	bl	80074a2 <_ZNKSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEptEv>
 8007136:	4601      	mov	r1, r0
 8007138:	680b      	ldr	r3, [r1, #0]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	68f8      	ldr	r0, [r7, #12]
 800713e:	4a20      	ldr	r2, [pc, #128]	; (80071c0 <_ZN4tama4Text19getTextureForLetterEc+0x3f8>)
 8007140:	4798      	blx	r3
 8007142:	e04d      	b.n	80071e0 <_ZN4tama4Text19getTextureForLetterEc+0x418>
        case ' ': return textureLoader->load(tama::asset::font::standard::SPC);
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	3304      	adds	r3, #4
 8007148:	4618      	mov	r0, r3
 800714a:	f000 f9aa 	bl	80074a2 <_ZNKSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEptEv>
 800714e:	4601      	mov	r1, r0
 8007150:	680b      	ldr	r3, [r1, #0]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	68f8      	ldr	r0, [r7, #12]
 8007156:	4a1b      	ldr	r2, [pc, #108]	; (80071c4 <_ZN4tama4Text19getTextureForLetterEc+0x3fc>)
 8007158:	4798      	blx	r3
 800715a:	e041      	b.n	80071e0 <_ZN4tama4Text19getTextureForLetterEc+0x418>
 800715c:	200000a4 	.word	0x200000a4
 8007160:	200000b0 	.word	0x200000b0
 8007164:	200000bc 	.word	0x200000bc
 8007168:	200000c8 	.word	0x200000c8
 800716c:	200000d4 	.word	0x200000d4
 8007170:	200000e0 	.word	0x200000e0
 8007174:	200000ec 	.word	0x200000ec
 8007178:	200000f8 	.word	0x200000f8
 800717c:	20000104 	.word	0x20000104
 8007180:	20000110 	.word	0x20000110
 8007184:	2000011c 	.word	0x2000011c
 8007188:	20000128 	.word	0x20000128
 800718c:	20000134 	.word	0x20000134
 8007190:	20000140 	.word	0x20000140
 8007194:	2000014c 	.word	0x2000014c
 8007198:	20000158 	.word	0x20000158
 800719c:	20000164 	.word	0x20000164
 80071a0:	20000170 	.word	0x20000170
 80071a4:	2000017c 	.word	0x2000017c
 80071a8:	20000188 	.word	0x20000188
 80071ac:	20000194 	.word	0x20000194
 80071b0:	200001a0 	.word	0x200001a0
 80071b4:	200001b8 	.word	0x200001b8
 80071b8:	200001ac 	.word	0x200001ac
 80071bc:	200001c4 	.word	0x200001c4
 80071c0:	200001d0 	.word	0x200001d0
 80071c4:	200001dc 	.word	0x200001dc
    }
    return std::make_shared<tama::Texture>(0, 0);
 80071c8:	2300      	movs	r3, #0
 80071ca:	613b      	str	r3, [r7, #16]
 80071cc:	2300      	movs	r3, #0
 80071ce:	617b      	str	r3, [r7, #20]
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	f107 0214 	add.w	r2, r7, #20
 80071d6:	f107 0110 	add.w	r1, r7, #16
 80071da:	4618      	mov	r0, r3
 80071dc:	f000 f978 	bl	80074d0 <_ZSt11make_sharedIN4tama7TextureEJiiEESt10shared_ptrIT_EDpOT0_>
}
 80071e0:	68f8      	ldr	r0, [r7, #12]
 80071e2:	3718      	adds	r7, #24
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}

080071e8 <_ZN4tama4Text21recalculateDimensionsEv>:

void tama::Text::recalculateDimensions()
{
 80071e8:	b5b0      	push	{r4, r5, r7, lr}
 80071ea:	b084      	sub	sp, #16
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
    dimensions.x = (size + 1) * text.size();
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071f4:	1c5c      	adds	r4, r3, #1
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	3310      	adds	r3, #16
 80071fa:	4618      	mov	r0, r3
 80071fc:	f010 faaa 	bl	8017754 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8007200:	4603      	mov	r3, r0
 8007202:	fb03 f304 	mul.w	r3, r3, r4
 8007206:	461a      	mov	r2, r3
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	641a      	str	r2, [r3, #64]	; 0x40
    dimensions.y = (size + 1) * (std::count(text.begin(), text.end(), '\n') + 1) ;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007210:	1c5c      	adds	r4, r3, #1
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	3310      	adds	r3, #16
 8007216:	4618      	mov	r0, r3
 8007218:	f010 fa96 	bl	8017748 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5beginEv>
 800721c:	4605      	mov	r5, r0
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	3310      	adds	r3, #16
 8007222:	4618      	mov	r0, r3
 8007224:	f010 fa92 	bl	801774c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE3endEv>
 8007228:	4601      	mov	r1, r0
 800722a:	230a      	movs	r3, #10
 800722c:	73fb      	strb	r3, [r7, #15]
 800722e:	f107 030f 	add.w	r3, r7, #15
 8007232:	461a      	mov	r2, r3
 8007234:	4628      	mov	r0, r5
 8007236:	f000 f96d 	bl	8007514 <_ZSt5countIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEcENSt15iterator_traitsIT_E15difference_typeESB_SB_RKT0_>
 800723a:	4603      	mov	r3, r0
 800723c:	3301      	adds	r3, #1
 800723e:	fb03 f304 	mul.w	r3, r3, r4
 8007242:	461a      	mov	r2, r3
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	645a      	str	r2, [r3, #68]	; 0x44

}
 8007248:	bf00      	nop
 800724a:	3710      	adds	r7, #16
 800724c:	46bd      	mov	sp, r7
 800724e:	bdb0      	pop	{r4, r5, r7, pc}

08007250 <_ZN4tama4TextC1Ev>:
    visible = true;
    recalculateDimensions();
    updateTexture();
}

tama::Text::Text()
 8007250:	b580      	push	{r7, lr}
 8007252:	b096      	sub	sp, #88	; 0x58
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	4618      	mov	r0, r3
 800725c:	f7ff f9a4 	bl	80065a8 <_ZN4tama8DrawableC1Ev>
 8007260:	4a20      	ldr	r2, [pc, #128]	; (80072e4 <_ZN4tama4TextC1Ev+0x94>)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	601a      	str	r2, [r3, #0]
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	3304      	adds	r3, #4
 800726a:	4618      	mov	r0, r3
 800726c:	f000 f862 	bl	8007334 <_ZNSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEC1IS3_vEEv>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	3308      	adds	r3, #8
 8007274:	4618      	mov	r0, r3
 8007276:	f7ff fa47 	bl	8006708 <_ZNSt10shared_ptrIN4tama14ChangeObserverEEC1Ev>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	3310      	adds	r3, #16
 800727e:	4618      	mov	r0, r3
 8007280:	f010 fa2a 	bl	80176d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	3328      	adds	r3, #40	; 0x28
 8007288:	4618      	mov	r0, r3
 800728a:	f7ff fa57 	bl	800673c <_ZNSt10shared_ptrIN4tama7TextureEEC1Ev>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2207      	movs	r2, #7
 8007292:	631a      	str	r2, [r3, #48]	; 0x30
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2200      	movs	r2, #0
 8007298:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	3338      	adds	r3, #56	; 0x38
 80072a0:	4618      	mov	r0, r3
 80072a2:	f7ff f847 	bl	8006334 <_ZN4tama5Vec2dC1Ev>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	3340      	adds	r3, #64	; 0x40
 80072aa:	4618      	mov	r0, r3
 80072ac:	f7ff f842 	bl	8006334 <_ZN4tama5Vec2dC1Ev>
{
    tama::Text(Vec2d(0,0));
 80072b0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80072b4:	2200      	movs	r2, #0
 80072b6:	2100      	movs	r1, #0
 80072b8:	4618      	mov	r0, r3
 80072ba:	f7f9 f92d 	bl	8000518 <_ZN4tama5Vec2dC1Eii>
 80072be:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80072c2:	f107 0308 	add.w	r3, r7, #8
 80072c6:	4611      	mov	r1, r2
 80072c8:	4618      	mov	r0, r3
 80072ca:	f7ff fc79 	bl	8006bc0 <_ZN4tama4TextC1ERKNS_5Vec2dE>
 80072ce:	f107 0308 	add.w	r3, r7, #8
 80072d2:	4618      	mov	r0, r3
 80072d4:	f7fc fb06 	bl	80038e4 <_ZN4tama4TextD1Ev>
}
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	4618      	mov	r0, r3
 80072dc:	3758      	adds	r7, #88	; 0x58
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}
 80072e2:	bf00      	nop
 80072e4:	0801afc0 	.word	0x0801afc0

080072e8 <_ZNKSt19__shared_ptr_accessIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b082      	sub	sp, #8
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
	return _M_get();
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f000 f923 	bl	800753c <_ZNKSt19__shared_ptr_accessIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 80072f6:	4603      	mov	r3, r0
      }
 80072f8:	4618      	mov	r0, r3
 80072fa:	3708      	adds	r7, #8
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bd80      	pop	{r7, pc}

08007300 <_ZNSt5tupleIJPN4tama13TextureLoaderESt14default_deleteIS1_EEEC1IS2_S4_Lb1EEEv>:
      constexpr tuple()
 8007300:	b580      	push	{r7, lr}
 8007302:	b082      	sub	sp, #8
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
      : _Inherited() { }
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	4618      	mov	r0, r3
 800730c:	f000 f922 	bl	8007554 <_ZNSt11_Tuple_implILj0EJPN4tama13TextureLoaderESt14default_deleteIS1_EEEC1Ev>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	4618      	mov	r0, r3
 8007314:	3708      	adds	r7, #8
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}

0800731a <_ZNSt15__uniq_ptr_implIN4tama13TextureLoaderESt14default_deleteIS1_EEC1Ev>:
      __uniq_ptr_impl() = default;
 800731a:	b580      	push	{r7, lr}
 800731c:	b082      	sub	sp, #8
 800731e:	af00      	add	r7, sp, #0
 8007320:	6078      	str	r0, [r7, #4]
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	4618      	mov	r0, r3
 8007326:	f7ff ffeb 	bl	8007300 <_ZNSt5tupleIJPN4tama13TextureLoaderESt14default_deleteIS1_EEEC1IS2_S4_Lb1EEEv>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	4618      	mov	r0, r3
 800732e:	3708      	adds	r7, #8
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}

08007334 <_ZNSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEC1IS3_vEEv>:
	constexpr unique_ptr() noexcept
 8007334:	b580      	push	{r7, lr}
 8007336:	b082      	sub	sp, #8
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
	: _M_t()
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2200      	movs	r2, #0
 8007340:	601a      	str	r2, [r3, #0]
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	4618      	mov	r0, r3
 8007346:	f7ff ffe8 	bl	800731a <_ZNSt15__uniq_ptr_implIN4tama13TextureLoaderESt14default_deleteIS1_EEC1Ev>
        { }
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	4618      	mov	r0, r3
 800734e:	3708      	adds	r7, #8
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}

08007354 <_ZN4tama13TextureLoaderC1Ev>:
#include "../../../../assets/texture-asset.h"
#include <memory>

namespace tama
{
    class TextureLoader
 8007354:	b480      	push	{r7}
 8007356:	b083      	sub	sp, #12
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
 800735c:	4a04      	ldr	r2, [pc, #16]	; (8007370 <_ZN4tama13TextureLoaderC1Ev+0x1c>)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	601a      	str	r2, [r3, #0]
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	4618      	mov	r0, r3
 8007366:	370c      	adds	r7, #12
 8007368:	46bd      	mov	sp, r7
 800736a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736e:	4770      	bx	lr
 8007370:	0801afec 	.word	0x0801afec

08007374 <_ZN4tama18Stm32TextureLoaderC1Ev>:
#include "../../Core/ui/display/drawable/texture-loader/TextureLoader.h"
#include "../nokia5110-display-data-manager/Nokia5110DisplayDataManager.h"

namespace tama
{
    class Stm32TextureLoader : public TextureLoader
 8007374:	b580      	push	{r7, lr}
 8007376:	b082      	sub	sp, #8
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	4618      	mov	r0, r3
 8007380:	f7ff ffe8 	bl	8007354 <_ZN4tama13TextureLoaderC1Ev>
 8007384:	4a03      	ldr	r2, [pc, #12]	; (8007394 <_ZN4tama18Stm32TextureLoaderC1Ev+0x20>)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	601a      	str	r2, [r3, #0]
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	4618      	mov	r0, r3
 800738e:	3708      	adds	r7, #8
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}
 8007394:	0801b180 	.word	0x0801b180

08007398 <_ZSt11make_uniqueIN4tama18Stm32TextureLoaderEJEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>:
    { struct __invalid_type { }; };

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
 8007398:	b590      	push	{r4, r7, lr}
 800739a:	b083      	sub	sp, #12
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 80073a0:	2004      	movs	r0, #4
 80073a2:	f010 f888 	bl	80174b6 <_Znwj>
 80073a6:	4603      	mov	r3, r0
 80073a8:	461c      	mov	r4, r3
 80073aa:	2300      	movs	r3, #0
 80073ac:	6023      	str	r3, [r4, #0]
 80073ae:	4620      	mov	r0, r4
 80073b0:	f7ff ffe0 	bl	8007374 <_ZN4tama18Stm32TextureLoaderC1Ev>
 80073b4:	4621      	mov	r1, r4
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f000 f8dc 	bl	8007574 <_ZNSt10unique_ptrIN4tama18Stm32TextureLoaderESt14default_deleteIS1_EEC1IS3_vEEPS1_>
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	370c      	adds	r7, #12
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bd90      	pop	{r4, r7, pc}

080073c4 <_ZNSt10unique_ptrIN4tama18Stm32TextureLoaderESt14default_deleteIS1_EED1Ev>:
      ~unique_ptr() noexcept
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b084      	sub	sp, #16
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	4618      	mov	r0, r3
 80073d0:	f000 f8df 	bl	8007592 <_ZNSt15__uniq_ptr_implIN4tama18Stm32TextureLoaderESt14default_deleteIS1_EE6_M_ptrEv>
 80073d4:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d009      	beq.n	80073f2 <_ZNSt10unique_ptrIN4tama18Stm32TextureLoaderESt14default_deleteIS1_EED1Ev+0x2e>
	  get_deleter()(__ptr);
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f000 f8e4 	bl	80075ac <_ZNSt10unique_ptrIN4tama18Stm32TextureLoaderESt14default_deleteIS1_EE11get_deleterEv>
 80073e4:	4602      	mov	r2, r0
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4619      	mov	r1, r3
 80073ec:	4610      	mov	r0, r2
 80073ee:	f000 f8ea 	bl	80075c6 <_ZNKSt14default_deleteIN4tama18Stm32TextureLoaderEEclEPS1_>
	__ptr = pointer();
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	2200      	movs	r2, #0
 80073f6:	601a      	str	r2, [r3, #0]
      }
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	4618      	mov	r0, r3
 80073fc:	3710      	adds	r7, #16
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}

08007402 <_ZNSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEaSINS0_18Stm32TextureLoaderES2_IS6_EEENSt9enable_ifIXsrSt6__and_IJS9_IJSt14is_convertibleINS_IT_T0_E7pointerEPS1_ESt6__not_ISt8is_arrayISB_EESt5__or_IJS9_IJSt12is_referenceIS3_ESt7is_sameIS3_SC_EEES9_IJSH_ISN_ESA_ISC_S3_EEEEEEESt13is_assignableIRS3_OSC_EEE5valueERS4_E4typeEOSD_>:
	operator=(unique_ptr<_Up, _Ep>&& __u) noexcept
 8007402:	b580      	push	{r7, lr}
 8007404:	b084      	sub	sp, #16
 8007406:	af00      	add	r7, sp, #0
 8007408:	6078      	str	r0, [r7, #4]
 800740a:	6039      	str	r1, [r7, #0]
	  reset(__u.release());
 800740c:	6838      	ldr	r0, [r7, #0]
 800740e:	f000 f8e7 	bl	80075e0 <_ZNSt10unique_ptrIN4tama18Stm32TextureLoaderESt14default_deleteIS1_EE7releaseEv>
 8007412:	4603      	mov	r3, r0
 8007414:	4619      	mov	r1, r3
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f7fd fb4e 	bl	8004ab8 <_ZNSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EE5resetEPS1_>
	  get_deleter() = std::forward<_Ep>(__u.get_deleter());
 800741c:	6838      	ldr	r0, [r7, #0]
 800741e:	f000 f8c5 	bl	80075ac <_ZNSt10unique_ptrIN4tama18Stm32TextureLoaderESt14default_deleteIS1_EE11get_deleterEv>
 8007422:	4603      	mov	r3, r0
 8007424:	4618      	mov	r0, r3
 8007426:	f000 f8ef 	bl	8007608 <_ZSt7forwardISt14default_deleteIN4tama18Stm32TextureLoaderEEEOT_RNSt16remove_referenceIS4_E4typeE>
 800742a:	4602      	mov	r2, r0
 800742c:	f107 030c 	add.w	r3, r7, #12
 8007430:	4611      	mov	r1, r2
 8007432:	4618      	mov	r0, r3
 8007434:	f000 f8f3 	bl	800761e <_ZNSt14default_deleteIN4tama13TextureLoaderEEC1INS0_18Stm32TextureLoaderEvEERKS_IT_E>
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f7fd fabb 	bl	80049b4 <_ZNSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EE11get_deleterEv>
	  return *this;
 800743e:	687b      	ldr	r3, [r7, #4]
	}
 8007440:	4618      	mov	r0, r3
 8007442:	3710      	adds	r7, #16
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}

08007448 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8007448:	b480      	push	{r7}
 800744a:	b083      	sub	sp, #12
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	4618      	mov	r0, r3
 8007454:	370c      	adds	r7, #12
 8007456:	46bd      	mov	sp, r7
 8007458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745c:	4770      	bx	lr

0800745e <_ZSt11make_sharedIN4tama7TextureEJRiS2_EESt10shared_ptrIT_EDpOT0_>:
    make_shared(_Args&&... __args)
 800745e:	b590      	push	{r4, r7, lr}
 8007460:	b087      	sub	sp, #28
 8007462:	af00      	add	r7, sp, #0
 8007464:	60f8      	str	r0, [r7, #12]
 8007466:	60b9      	str	r1, [r7, #8]
 8007468:	607a      	str	r2, [r7, #4]
				       std::forward<_Args>(__args)...);
 800746a:	f107 0314 	add.w	r3, r7, #20
 800746e:	4618      	mov	r0, r3
 8007470:	f000 f8e1 	bl	8007636 <_ZNSaIN4tama7TextureEEC1Ev>
 8007474:	68b8      	ldr	r0, [r7, #8]
 8007476:	f7ff ffe7 	bl	8007448 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 800747a:	4604      	mov	r4, r0
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f7ff ffe3 	bl	8007448 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 8007482:	4603      	mov	r3, r0
 8007484:	68f8      	ldr	r0, [r7, #12]
 8007486:	f107 0114 	add.w	r1, r7, #20
 800748a:	4622      	mov	r2, r4
 800748c:	f000 f8eb 	bl	8007666 <_ZSt15allocate_sharedIN4tama7TextureESaIS1_EJRiS3_EESt10shared_ptrIT_ERKT0_DpOT1_>
 8007490:	f107 0314 	add.w	r3, r7, #20
 8007494:	4618      	mov	r0, r3
 8007496:	f000 f8da 	bl	800764e <_ZNSaIN4tama7TextureEED1Ev>
    }
 800749a:	68f8      	ldr	r0, [r7, #12]
 800749c:	371c      	adds	r7, #28
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd90      	pop	{r4, r7, pc}

080074a2 <_ZNKSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEptEv>:
      operator->() const noexcept
 80074a2:	b580      	push	{r7, lr}
 80074a4:	b082      	sub	sp, #8
 80074a6:	af00      	add	r7, sp, #0
 80074a8:	6078      	str	r0, [r7, #4]
	return get();
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f7fd fd78 	bl	8004fa0 <_ZNKSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EE3getEv>
 80074b0:	4603      	mov	r3, r0
      }
 80074b2:	4618      	mov	r0, r3
 80074b4:	3708      	adds	r7, #8
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}

080074ba <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80074ba:	b480      	push	{r7}
 80074bc:	b083      	sub	sp, #12
 80074be:	af00      	add	r7, sp, #0
 80074c0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	4618      	mov	r0, r3
 80074c6:	370c      	adds	r7, #12
 80074c8:	46bd      	mov	sp, r7
 80074ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ce:	4770      	bx	lr

080074d0 <_ZSt11make_sharedIN4tama7TextureEJiiEESt10shared_ptrIT_EDpOT0_>:
    make_shared(_Args&&... __args)
 80074d0:	b590      	push	{r4, r7, lr}
 80074d2:	b087      	sub	sp, #28
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	60f8      	str	r0, [r7, #12]
 80074d8:	60b9      	str	r1, [r7, #8]
 80074da:	607a      	str	r2, [r7, #4]
				       std::forward<_Args>(__args)...);
 80074dc:	f107 0314 	add.w	r3, r7, #20
 80074e0:	4618      	mov	r0, r3
 80074e2:	f000 f8a8 	bl	8007636 <_ZNSaIN4tama7TextureEEC1Ev>
 80074e6:	68b8      	ldr	r0, [r7, #8]
 80074e8:	f7ff ffe7 	bl	80074ba <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 80074ec:	4604      	mov	r4, r0
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f7ff ffe3 	bl	80074ba <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 80074f4:	4603      	mov	r3, r0
 80074f6:	68f8      	ldr	r0, [r7, #12]
 80074f8:	f107 0114 	add.w	r1, r7, #20
 80074fc:	4622      	mov	r2, r4
 80074fe:	f000 f8cc 	bl	800769a <_ZSt15allocate_sharedIN4tama7TextureESaIS1_EJiiEESt10shared_ptrIT_ERKT0_DpOT1_>
 8007502:	f107 0314 	add.w	r3, r7, #20
 8007506:	4618      	mov	r0, r3
 8007508:	f000 f8a1 	bl	800764e <_ZNSaIN4tama7TextureEED1Ev>
    }
 800750c:	68f8      	ldr	r0, [r7, #12]
 800750e:	371c      	adds	r7, #28
 8007510:	46bd      	mov	sp, r7
 8007512:	bd90      	pop	{r4, r7, pc}

08007514 <_ZSt5countIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEcENSt15iterator_traitsIT_E15difference_typeESB_SB_RKT0_>:
   *  @return   The number of iterators @c i in the range @p [__first,__last)
   *  for which @c *i == @p __value
  */
  template<typename _InputIterator, typename _Tp>
    inline typename iterator_traits<_InputIterator>::difference_type
    count(_InputIterator __first, _InputIterator __last, const _Tp& __value)
 8007514:	b580      	push	{r7, lr}
 8007516:	b084      	sub	sp, #16
 8007518:	af00      	add	r7, sp, #0
 800751a:	60f8      	str	r0, [r7, #12]
 800751c:	60b9      	str	r1, [r7, #8]
 800751e:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
      __glibcxx_function_requires(_EqualOpConcept<
	    typename iterator_traits<_InputIterator>::value_type, _Tp>)
      __glibcxx_requires_valid_range(__first, __last);

      return std::__count_if(__first, __last,
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f000 f8d4 	bl	80076ce <_ZN9__gnu_cxx5__ops17__iter_equals_valIKcEENS0_16_Iter_equals_valIT_EERS4_>
 8007526:	4603      	mov	r3, r0
			     __gnu_cxx::__ops::__iter_equals_val(__value));
 8007528:	461a      	mov	r2, r3
 800752a:	68b9      	ldr	r1, [r7, #8]
 800752c:	68f8      	ldr	r0, [r7, #12]
 800752e:	f000 f8dd 	bl	80076ec <_ZSt10__count_ifIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS0_5__ops16_Iter_equals_valIKcEEENSt15iterator_traitsIT_E15difference_typeESF_SF_T0_>
 8007532:	4603      	mov	r3, r0
    }
 8007534:	4618      	mov	r0, r3
 8007536:	3710      	adds	r7, #16
 8007538:	46bd      	mov	sp, r7
 800753a:	bd80      	pop	{r7, pc}

0800753c <_ZNKSt19__shared_ptr_accessIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 800753c:	b580      	push	{r7, lr}
 800753e:	b082      	sub	sp, #8
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f000 f8fa 	bl	800773e <_ZNKSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE3getEv>
 800754a:	4603      	mov	r3, r0
 800754c:	4618      	mov	r0, r3
 800754e:	3708      	adds	r7, #8
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}

08007554 <_ZNSt11_Tuple_implILj0EJPN4tama13TextureLoaderESt14default_deleteIS1_EEEC1Ev>:
      constexpr _Tuple_impl()
 8007554:	b580      	push	{r7, lr}
 8007556:	b082      	sub	sp, #8
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f000 f8fa 	bl	8007756 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN4tama13TextureLoaderEEEEC1Ev>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	4618      	mov	r0, r3
 8007566:	f000 f902 	bl	800776e <_ZNSt10_Head_baseILj0EPN4tama13TextureLoaderELb0EEC1Ev>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	4618      	mov	r0, r3
 800756e:	3708      	adds	r7, #8
 8007570:	46bd      	mov	sp, r7
 8007572:	bd80      	pop	{r7, pc}

08007574 <_ZNSt10unique_ptrIN4tama18Stm32TextureLoaderESt14default_deleteIS1_EEC1IS3_vEEPS1_>:
	unique_ptr(pointer __p) noexcept
 8007574:	b580      	push	{r7, lr}
 8007576:	b082      	sub	sp, #8
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
 800757c:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6839      	ldr	r1, [r7, #0]
 8007582:	4618      	mov	r0, r3
 8007584:	f000 f901 	bl	800778a <_ZNSt15__uniq_ptr_implIN4tama18Stm32TextureLoaderESt14default_deleteIS1_EEC1EPS1_>
        { }
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	4618      	mov	r0, r3
 800758c:	3708      	adds	r7, #8
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}

08007592 <_ZNSt15__uniq_ptr_implIN4tama18Stm32TextureLoaderESt14default_deleteIS1_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8007592:	b580      	push	{r7, lr}
 8007594:	b082      	sub	sp, #8
 8007596:	af00      	add	r7, sp, #0
 8007598:	6078      	str	r0, [r7, #4]
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	4618      	mov	r0, r3
 800759e:	f000 f908 	bl	80077b2 <_ZSt3getILj0EJPN4tama18Stm32TextureLoaderESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>
 80075a2:	4603      	mov	r3, r0
 80075a4:	4618      	mov	r0, r3
 80075a6:	3708      	adds	r7, #8
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}

080075ac <_ZNSt10unique_ptrIN4tama18Stm32TextureLoaderESt14default_deleteIS1_EE11get_deleterEv>:
      get_deleter() noexcept
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b082      	sub	sp, #8
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	4618      	mov	r0, r3
 80075b8:	f000 f908 	bl	80077cc <_ZNSt15__uniq_ptr_implIN4tama18Stm32TextureLoaderESt14default_deleteIS1_EE10_M_deleterEv>
 80075bc:	4603      	mov	r3, r0
 80075be:	4618      	mov	r0, r3
 80075c0:	3708      	adds	r7, #8
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}

080075c6 <_ZNKSt14default_deleteIN4tama18Stm32TextureLoaderEEclEPS1_>:
      operator()(_Tp* __ptr) const
 80075c6:	b580      	push	{r7, lr}
 80075c8:	b082      	sub	sp, #8
 80075ca:	af00      	add	r7, sp, #0
 80075cc:	6078      	str	r0, [r7, #4]
 80075ce:	6039      	str	r1, [r7, #0]
	delete __ptr;
 80075d0:	2104      	movs	r1, #4
 80075d2:	6838      	ldr	r0, [r7, #0]
 80075d4:	f00f ff6d 	bl	80174b2 <_ZdlPvj>
      }
 80075d8:	bf00      	nop
 80075da:	3708      	adds	r7, #8
 80075dc:	46bd      	mov	sp, r7
 80075de:	bd80      	pop	{r7, pc}

080075e0 <_ZNSt10unique_ptrIN4tama18Stm32TextureLoaderESt14default_deleteIS1_EE7releaseEv>:
      release() noexcept
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b084      	sub	sp, #16
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f000 f8fc 	bl	80077e6 <_ZNKSt10unique_ptrIN4tama18Stm32TextureLoaderESt14default_deleteIS1_EE3getEv>
 80075ee:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	4618      	mov	r0, r3
 80075f4:	f7ff ffcd 	bl	8007592 <_ZNSt15__uniq_ptr_implIN4tama18Stm32TextureLoaderESt14default_deleteIS1_EE6_M_ptrEv>
 80075f8:	4602      	mov	r2, r0
 80075fa:	2300      	movs	r3, #0
 80075fc:	6013      	str	r3, [r2, #0]
	return __p;
 80075fe:	68fb      	ldr	r3, [r7, #12]
      }
 8007600:	4618      	mov	r0, r3
 8007602:	3710      	adds	r7, #16
 8007604:	46bd      	mov	sp, r7
 8007606:	bd80      	pop	{r7, pc}

08007608 <_ZSt7forwardISt14default_deleteIN4tama18Stm32TextureLoaderEEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8007608:	b480      	push	{r7}
 800760a:	b083      	sub	sp, #12
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	4618      	mov	r0, r3
 8007614:	370c      	adds	r7, #12
 8007616:	46bd      	mov	sp, r7
 8007618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761c:	4770      	bx	lr

0800761e <_ZNSt14default_deleteIN4tama13TextureLoaderEEC1INS0_18Stm32TextureLoaderEvEERKS_IT_E>:
        default_delete(const default_delete<_Up>&) noexcept { }
 800761e:	b480      	push	{r7}
 8007620:	b083      	sub	sp, #12
 8007622:	af00      	add	r7, sp, #0
 8007624:	6078      	str	r0, [r7, #4]
 8007626:	6039      	str	r1, [r7, #0]
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	4618      	mov	r0, r3
 800762c:	370c      	adds	r7, #12
 800762e:	46bd      	mov	sp, r7
 8007630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007634:	4770      	bx	lr

08007636 <_ZNSaIN4tama7TextureEEC1Ev>:
      allocator() throw() { }
 8007636:	b580      	push	{r7, lr}
 8007638:	b082      	sub	sp, #8
 800763a:	af00      	add	r7, sp, #0
 800763c:	6078      	str	r0, [r7, #4]
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f000 f8de 	bl	8007800 <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEEC1Ev>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	4618      	mov	r0, r3
 8007648:	3708      	adds	r7, #8
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}

0800764e <_ZNSaIN4tama7TextureEED1Ev>:
      ~allocator() throw() { }
 800764e:	b580      	push	{r7, lr}
 8007650:	b082      	sub	sp, #8
 8007652:	af00      	add	r7, sp, #0
 8007654:	6078      	str	r0, [r7, #4]
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f000 f8dd 	bl	8007816 <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEED1Ev>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	4618      	mov	r0, r3
 8007660:	3708      	adds	r7, #8
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}

08007666 <_ZSt15allocate_sharedIN4tama7TextureESaIS1_EJRiS3_EESt10shared_ptrIT_ERKT0_DpOT1_>:
    allocate_shared(const _Alloc& __a, _Args&&... __args)
 8007666:	b5b0      	push	{r4, r5, r7, lr}
 8007668:	b088      	sub	sp, #32
 800766a:	af02      	add	r7, sp, #8
 800766c:	60f8      	str	r0, [r7, #12]
 800766e:	60b9      	str	r1, [r7, #8]
 8007670:	607a      	str	r2, [r7, #4]
 8007672:	603b      	str	r3, [r7, #0]
			     std::forward<_Args>(__args)...);
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f7ff fee7 	bl	8007448 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 800767a:	4604      	mov	r4, r0
 800767c:	6838      	ldr	r0, [r7, #0]
 800767e:	f7ff fee3 	bl	8007448 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 8007682:	4603      	mov	r3, r0
 8007684:	9300      	str	r3, [sp, #0]
 8007686:	4623      	mov	r3, r4
 8007688:	68ba      	ldr	r2, [r7, #8]
 800768a:	4629      	mov	r1, r5
 800768c:	68f8      	ldr	r0, [r7, #12]
 800768e:	f000 f8cd 	bl	800782c <_ZNSt10shared_ptrIN4tama7TextureEEC1ISaIS1_EJRiS5_EEESt19_Sp_make_shared_tagRKT_DpOT0_>
    }
 8007692:	68f8      	ldr	r0, [r7, #12]
 8007694:	3718      	adds	r7, #24
 8007696:	46bd      	mov	sp, r7
 8007698:	bdb0      	pop	{r4, r5, r7, pc}

0800769a <_ZSt15allocate_sharedIN4tama7TextureESaIS1_EJiiEESt10shared_ptrIT_ERKT0_DpOT1_>:
    allocate_shared(const _Alloc& __a, _Args&&... __args)
 800769a:	b5b0      	push	{r4, r5, r7, lr}
 800769c:	b088      	sub	sp, #32
 800769e:	af02      	add	r7, sp, #8
 80076a0:	60f8      	str	r0, [r7, #12]
 80076a2:	60b9      	str	r1, [r7, #8]
 80076a4:	607a      	str	r2, [r7, #4]
 80076a6:	603b      	str	r3, [r7, #0]
			     std::forward<_Args>(__args)...);
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f7ff ff06 	bl	80074ba <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 80076ae:	4604      	mov	r4, r0
 80076b0:	6838      	ldr	r0, [r7, #0]
 80076b2:	f7ff ff02 	bl	80074ba <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 80076b6:	4603      	mov	r3, r0
 80076b8:	9300      	str	r3, [sp, #0]
 80076ba:	4623      	mov	r3, r4
 80076bc:	68ba      	ldr	r2, [r7, #8]
 80076be:	4629      	mov	r1, r5
 80076c0:	68f8      	ldr	r0, [r7, #12]
 80076c2:	f000 f8cf 	bl	8007864 <_ZNSt10shared_ptrIN4tama7TextureEEC1ISaIS1_EJiiEEESt19_Sp_make_shared_tagRKT_DpOT0_>
    }
 80076c6:	68f8      	ldr	r0, [r7, #12]
 80076c8:	3718      	adds	r7, #24
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bdb0      	pop	{r4, r5, r7, pc}

080076ce <_ZN9__gnu_cxx5__ops17__iter_equals_valIKcEENS0_16_Iter_equals_valIT_EERS4_>:
	{ return *__it == _M_value; }
    };

  template<typename _Value>
    inline _Iter_equals_val<_Value>
    __iter_equals_val(_Value& __val)
 80076ce:	b580      	push	{r7, lr}
 80076d0:	b084      	sub	sp, #16
 80076d2:	af00      	add	r7, sp, #0
 80076d4:	6078      	str	r0, [r7, #4]
    { return _Iter_equals_val<_Value>(__val); }
 80076d6:	f107 030c 	add.w	r3, r7, #12
 80076da:	6879      	ldr	r1, [r7, #4]
 80076dc:	4618      	mov	r0, r3
 80076de:	f000 f8dd 	bl	800789c <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEC1ERS2_>
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	4618      	mov	r0, r3
 80076e6:	3710      	adds	r7, #16
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bd80      	pop	{r7, pc}

080076ec <_ZSt10__count_ifIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS0_5__ops16_Iter_equals_valIKcEEENSt15iterator_traitsIT_E15difference_typeESF_SF_T0_>:
    __count_if(_InputIterator __first, _InputIterator __last, _Predicate __pred)
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b086      	sub	sp, #24
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	60f8      	str	r0, [r7, #12]
 80076f4:	60b9      	str	r1, [r7, #8]
 80076f6:	607a      	str	r2, [r7, #4]
      typename iterator_traits<_InputIterator>::difference_type __n = 0;
 80076f8:	2300      	movs	r3, #0
 80076fa:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first)
 80076fc:	f107 0208 	add.w	r2, r7, #8
 8007700:	f107 030c 	add.w	r3, r7, #12
 8007704:	4611      	mov	r1, r2
 8007706:	4618      	mov	r0, r3
 8007708:	f000 f8d7 	bl	80078ba <_ZN9__gnu_cxxneIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 800770c:	4603      	mov	r3, r0
 800770e:	2b00      	cmp	r3, #0
 8007710:	d010      	beq.n	8007734 <_ZSt10__count_ifIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS0_5__ops16_Iter_equals_valIKcEEENSt15iterator_traitsIT_E15difference_typeESF_SF_T0_+0x48>
	if (__pred(__first))
 8007712:	1d3b      	adds	r3, r7, #4
 8007714:	68f9      	ldr	r1, [r7, #12]
 8007716:	4618      	mov	r0, r3
 8007718:	f000 f8f7 	bl	800790a <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclINS_17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEEbT_>
 800771c:	4603      	mov	r3, r0
 800771e:	2b00      	cmp	r3, #0
 8007720:	d002      	beq.n	8007728 <_ZSt10__count_ifIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS0_5__ops16_Iter_equals_valIKcEEENSt15iterator_traitsIT_E15difference_typeESF_SF_T0_+0x3c>
	  ++__n;
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	3301      	adds	r3, #1
 8007726:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first)
 8007728:	f107 030c 	add.w	r3, r7, #12
 800772c:	4618      	mov	r0, r3
 800772e:	f000 f8dc 	bl	80078ea <_ZN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv>
 8007732:	e7e3      	b.n	80076fc <_ZSt10__count_ifIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS0_5__ops16_Iter_equals_valIKcEEENSt15iterator_traitsIT_E15difference_typeESF_SF_T0_+0x10>
      return __n;
 8007734:	697b      	ldr	r3, [r7, #20]
    }
 8007736:	4618      	mov	r0, r3
 8007738:	3718      	adds	r7, #24
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}

0800773e <_ZNKSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE3getEv>:
      get() const noexcept
 800773e:	b480      	push	{r7}
 8007740:	b083      	sub	sp, #12
 8007742:	af00      	add	r7, sp, #0
 8007744:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	4618      	mov	r0, r3
 800774c:	370c      	adds	r7, #12
 800774e:	46bd      	mov	sp, r7
 8007750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007754:	4770      	bx	lr

08007756 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN4tama13TextureLoaderEEEEC1Ev>:
      constexpr _Tuple_impl()
 8007756:	b580      	push	{r7, lr}
 8007758:	b082      	sub	sp, #8
 800775a:	af00      	add	r7, sp, #0
 800775c:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f000 f8ea 	bl	8007938 <_ZNSt10_Head_baseILj1ESt14default_deleteIN4tama13TextureLoaderEELb1EEC1Ev>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	4618      	mov	r0, r3
 8007768:	3708      	adds	r7, #8
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}

0800776e <_ZNSt10_Head_baseILj0EPN4tama13TextureLoaderELb0EEC1Ev>:
      constexpr _Head_base()
 800776e:	b480      	push	{r7}
 8007770:	b083      	sub	sp, #12
 8007772:	af00      	add	r7, sp, #0
 8007774:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2200      	movs	r2, #0
 800777a:	601a      	str	r2, [r3, #0]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	4618      	mov	r0, r3
 8007780:	370c      	adds	r7, #12
 8007782:	46bd      	mov	sp, r7
 8007784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007788:	4770      	bx	lr

0800778a <_ZNSt15__uniq_ptr_implIN4tama18Stm32TextureLoaderESt14default_deleteIS1_EEC1EPS1_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 800778a:	b580      	push	{r7, lr}
 800778c:	b082      	sub	sp, #8
 800778e:	af00      	add	r7, sp, #0
 8007790:	6078      	str	r0, [r7, #4]
 8007792:	6039      	str	r1, [r7, #0]
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	4618      	mov	r0, r3
 8007798:	f000 f8d9 	bl	800794e <_ZNSt5tupleIJPN4tama18Stm32TextureLoaderESt14default_deleteIS1_EEEC1IS2_S4_Lb1EEEv>
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f7ff fef8 	bl	8007592 <_ZNSt15__uniq_ptr_implIN4tama18Stm32TextureLoaderESt14default_deleteIS1_EE6_M_ptrEv>
 80077a2:	4602      	mov	r2, r0
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	6013      	str	r3, [r2, #0]
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	4618      	mov	r0, r3
 80077ac:	3708      	adds	r7, #8
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}

080077b2 <_ZSt3getILj0EJPN4tama18Stm32TextureLoaderESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>:
    get(tuple<_Elements...>& __t) noexcept
 80077b2:	b580      	push	{r7, lr}
 80077b4:	b082      	sub	sp, #8
 80077b6:	af00      	add	r7, sp, #0
 80077b8:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	4618      	mov	r0, r3
 80077be:	f000 f8d3 	bl	8007968 <_ZSt12__get_helperILj0EPN4tama18Stm32TextureLoaderEJSt14default_deleteIS1_EEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>
 80077c2:	4603      	mov	r3, r0
 80077c4:	4618      	mov	r0, r3
 80077c6:	3708      	adds	r7, #8
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}

080077cc <_ZNSt15__uniq_ptr_implIN4tama18Stm32TextureLoaderESt14default_deleteIS1_EE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b082      	sub	sp, #8
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	4618      	mov	r0, r3
 80077d8:	f000 f8d2 	bl	8007980 <_ZSt3getILj1EJPN4tama18Stm32TextureLoaderESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>
 80077dc:	4603      	mov	r3, r0
 80077de:	4618      	mov	r0, r3
 80077e0:	3708      	adds	r7, #8
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}

080077e6 <_ZNKSt10unique_ptrIN4tama18Stm32TextureLoaderESt14default_deleteIS1_EE3getEv>:
      get() const noexcept
 80077e6:	b580      	push	{r7, lr}
 80077e8:	b082      	sub	sp, #8
 80077ea:	af00      	add	r7, sp, #0
 80077ec:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	4618      	mov	r0, r3
 80077f2:	f000 f8d1 	bl	8007998 <_ZNKSt15__uniq_ptr_implIN4tama18Stm32TextureLoaderESt14default_deleteIS1_EE6_M_ptrEv>
 80077f6:	4603      	mov	r3, r0
 80077f8:	4618      	mov	r0, r3
 80077fa:	3708      	adds	r7, #8
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bd80      	pop	{r7, pc}

08007800 <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8007800:	b480      	push	{r7}
 8007802:	b083      	sub	sp, #12
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	4618      	mov	r0, r3
 800780c:	370c      	adds	r7, #12
 800780e:	46bd      	mov	sp, r7
 8007810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007814:	4770      	bx	lr

08007816 <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8007816:	b480      	push	{r7}
 8007818:	b083      	sub	sp, #12
 800781a:	af00      	add	r7, sp, #0
 800781c:	6078      	str	r0, [r7, #4]
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	4618      	mov	r0, r3
 8007822:	370c      	adds	r7, #12
 8007824:	46bd      	mov	sp, r7
 8007826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782a:	4770      	bx	lr

0800782c <_ZNSt10shared_ptrIN4tama7TextureEEC1ISaIS1_EJRiS5_EEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 800782c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800782e:	b087      	sub	sp, #28
 8007830:	af02      	add	r7, sp, #8
 8007832:	60f8      	str	r0, [r7, #12]
 8007834:	7239      	strb	r1, [r7, #8]
 8007836:	607a      	str	r2, [r7, #4]
 8007838:	603b      	str	r3, [r7, #0]
	: __shared_ptr<_Tp>(__tag, __a, std::forward<_Args>(__args)...)
 800783a:	68fc      	ldr	r4, [r7, #12]
 800783c:	6838      	ldr	r0, [r7, #0]
 800783e:	f7ff fe03 	bl	8007448 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 8007842:	4605      	mov	r5, r0
 8007844:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007846:	f7ff fdff 	bl	8007448 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 800784a:	4603      	mov	r3, r0
 800784c:	9300      	str	r3, [sp, #0]
 800784e:	462b      	mov	r3, r5
 8007850:	687a      	ldr	r2, [r7, #4]
 8007852:	4631      	mov	r1, r6
 8007854:	4620      	mov	r0, r4
 8007856:	f000 f8ca 	bl	80079ee <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJRiS7_EEESt19_Sp_make_shared_tagRKT_DpOT0_>
	{ }
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	4618      	mov	r0, r3
 800785e:	3714      	adds	r7, #20
 8007860:	46bd      	mov	sp, r7
 8007862:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007864 <_ZNSt10shared_ptrIN4tama7TextureEEC1ISaIS1_EJiiEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 8007864:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007866:	b087      	sub	sp, #28
 8007868:	af02      	add	r7, sp, #8
 800786a:	60f8      	str	r0, [r7, #12]
 800786c:	7239      	strb	r1, [r7, #8]
 800786e:	607a      	str	r2, [r7, #4]
 8007870:	603b      	str	r3, [r7, #0]
	: __shared_ptr<_Tp>(__tag, __a, std::forward<_Args>(__args)...)
 8007872:	68fc      	ldr	r4, [r7, #12]
 8007874:	6838      	ldr	r0, [r7, #0]
 8007876:	f7ff fe20 	bl	80074ba <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 800787a:	4605      	mov	r5, r0
 800787c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800787e:	f7ff fe1c 	bl	80074ba <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 8007882:	4603      	mov	r3, r0
 8007884:	9300      	str	r3, [sp, #0]
 8007886:	462b      	mov	r3, r5
 8007888:	687a      	ldr	r2, [r7, #4]
 800788a:	4631      	mov	r1, r6
 800788c:	4620      	mov	r0, r4
 800788e:	f000 f92d 	bl	8007aec <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJiiEEESt19_Sp_make_shared_tagRKT_DpOT0_>
	{ }
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	4618      	mov	r0, r3
 8007896:	3714      	adds	r7, #20
 8007898:	46bd      	mov	sp, r7
 800789a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800789c <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEC1ERS2_>:
      _Iter_equals_val(_Value& __value)
 800789c:	b480      	push	{r7}
 800789e:	b083      	sub	sp, #12
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
 80078a4:	6039      	str	r1, [r7, #0]
	: _M_value(__value)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	683a      	ldr	r2, [r7, #0]
 80078aa:	601a      	str	r2, [r3, #0]
      { }
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	4618      	mov	r0, r3
 80078b0:	370c      	adds	r7, #12
 80078b2:	46bd      	mov	sp, r7
 80078b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b8:	4770      	bx	lr

080078ba <_ZN9__gnu_cxxneIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKNS_17__normal_iteratorIT_T0_EESD_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 80078ba:	b590      	push	{r4, r7, lr}
 80078bc:	b083      	sub	sp, #12
 80078be:	af00      	add	r7, sp, #0
 80078c0:	6078      	str	r0, [r7, #4]
 80078c2:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f000 f990 	bl	8007bea <_ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>
 80078ca:	4603      	mov	r3, r0
 80078cc:	681c      	ldr	r4, [r3, #0]
 80078ce:	6838      	ldr	r0, [r7, #0]
 80078d0:	f000 f98b 	bl	8007bea <_ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>
 80078d4:	4603      	mov	r3, r0
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	429c      	cmp	r4, r3
 80078da:	bf14      	ite	ne
 80078dc:	2301      	movne	r3, #1
 80078de:	2300      	moveq	r3, #0
 80078e0:	b2db      	uxtb	r3, r3
 80078e2:	4618      	mov	r0, r3
 80078e4:	370c      	adds	r7, #12
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd90      	pop	{r4, r7, pc}

080078ea <_ZN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 80078ea:	b480      	push	{r7}
 80078ec:	b083      	sub	sp, #12
 80078ee:	af00      	add	r7, sp, #0
 80078f0:	6078      	str	r0, [r7, #4]
	++_M_current;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	1c5a      	adds	r2, r3, #1
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	601a      	str	r2, [r3, #0]
	return *this;
 80078fc:	687b      	ldr	r3, [r7, #4]
      }
 80078fe:	4618      	mov	r0, r3
 8007900:	370c      	adds	r7, #12
 8007902:	46bd      	mov	sp, r7
 8007904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007908:	4770      	bx	lr

0800790a <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclINS_17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEEbT_>:
	operator()(_Iterator __it)
 800790a:	b580      	push	{r7, lr}
 800790c:	b082      	sub	sp, #8
 800790e:	af00      	add	r7, sp, #0
 8007910:	6078      	str	r0, [r7, #4]
 8007912:	6039      	str	r1, [r7, #0]
	{ return *__it == _M_value; }
 8007914:	463b      	mov	r3, r7
 8007916:	4618      	mov	r0, r3
 8007918:	f000 f972 	bl	8007c00 <_ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv>
 800791c:	4603      	mov	r3, r0
 800791e:	781a      	ldrb	r2, [r3, #0]
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	781b      	ldrb	r3, [r3, #0]
 8007926:	429a      	cmp	r2, r3
 8007928:	bf0c      	ite	eq
 800792a:	2301      	moveq	r3, #1
 800792c:	2300      	movne	r3, #0
 800792e:	b2db      	uxtb	r3, r3
 8007930:	4618      	mov	r0, r3
 8007932:	3708      	adds	r7, #8
 8007934:	46bd      	mov	sp, r7
 8007936:	bd80      	pop	{r7, pc}

08007938 <_ZNSt10_Head_baseILj1ESt14default_deleteIN4tama13TextureLoaderEELb1EEC1Ev>:
      constexpr _Head_base()
 8007938:	b480      	push	{r7}
 800793a:	b083      	sub	sp, #12
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
      : _Head() { }
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	4618      	mov	r0, r3
 8007944:	370c      	adds	r7, #12
 8007946:	46bd      	mov	sp, r7
 8007948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794c:	4770      	bx	lr

0800794e <_ZNSt5tupleIJPN4tama18Stm32TextureLoaderESt14default_deleteIS1_EEEC1IS2_S4_Lb1EEEv>:
      constexpr tuple()
 800794e:	b580      	push	{r7, lr}
 8007950:	b082      	sub	sp, #8
 8007952:	af00      	add	r7, sp, #0
 8007954:	6078      	str	r0, [r7, #4]
      : _Inherited() { }
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	4618      	mov	r0, r3
 800795a:	f000 f95d 	bl	8007c18 <_ZNSt11_Tuple_implILj0EJPN4tama18Stm32TextureLoaderESt14default_deleteIS1_EEEC1Ev>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	4618      	mov	r0, r3
 8007962:	3708      	adds	r7, #8
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}

08007968 <_ZSt12__get_helperILj0EPN4tama18Stm32TextureLoaderEJSt14default_deleteIS1_EEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8007968:	b580      	push	{r7, lr}
 800796a:	b082      	sub	sp, #8
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f000 f961 	bl	8007c38 <_ZNSt11_Tuple_implILj0EJPN4tama18Stm32TextureLoaderESt14default_deleteIS1_EEE7_M_headERS5_>
 8007976:	4603      	mov	r3, r0
 8007978:	4618      	mov	r0, r3
 800797a:	3708      	adds	r7, #8
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}

08007980 <_ZSt3getILj1EJPN4tama18Stm32TextureLoaderESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>:
    get(tuple<_Elements...>& __t) noexcept
 8007980:	b580      	push	{r7, lr}
 8007982:	b082      	sub	sp, #8
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f000 f962 	bl	8007c52 <_ZSt12__get_helperILj1ESt14default_deleteIN4tama18Stm32TextureLoaderEEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800798e:	4603      	mov	r3, r0
 8007990:	4618      	mov	r0, r3
 8007992:	3708      	adds	r7, #8
 8007994:	46bd      	mov	sp, r7
 8007996:	bd80      	pop	{r7, pc}

08007998 <_ZNKSt15__uniq_ptr_implIN4tama18Stm32TextureLoaderESt14default_deleteIS1_EE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8007998:	b580      	push	{r7, lr}
 800799a:	b082      	sub	sp, #8
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	4618      	mov	r0, r3
 80079a4:	f000 f961 	bl	8007c6a <_ZSt3getILj0EJPN4tama18Stm32TextureLoaderESt14default_deleteIS1_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_>
 80079a8:	4603      	mov	r3, r0
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4618      	mov	r0, r3
 80079ae:	3708      	adds	r7, #8
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}

080079b4 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>:
        struct _Deleter
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b082      	sub	sp, #8
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	4618      	mov	r0, r3
 80079c0:	f7ff fe45 	bl	800764e <_ZNSaIN4tama7TextureEED1Ev>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	4618      	mov	r0, r3
 80079c8:	3708      	adds	r7, #8
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}

080079ce <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>:
 80079ce:	b580      	push	{r7, lr}
 80079d0:	b082      	sub	sp, #8
 80079d2:	af00      	add	r7, sp, #0
 80079d4:	6078      	str	r0, [r7, #4]
 80079d6:	6039      	str	r1, [r7, #0]
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	683a      	ldr	r2, [r7, #0]
 80079dc:	4611      	mov	r1, r2
 80079de:	4618      	mov	r0, r3
 80079e0:	f000 f950 	bl	8007c84 <_ZNSaIN4tama7TextureEEC1ERKS1_>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	4618      	mov	r0, r3
 80079e8:	3708      	adds	r7, #8
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd80      	pop	{r7, pc}

080079ee <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJRiS7_EEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 80079ee:	b590      	push	{r4, r7, lr}
 80079f0:	b08d      	sub	sp, #52	; 0x34
 80079f2:	af00      	add	r7, sp, #0
 80079f4:	60f8      	str	r0, [r7, #12]
 80079f6:	7239      	strb	r1, [r7, #8]
 80079f8:	607a      	str	r2, [r7, #4]
 80079fa:	603b      	str	r3, [r7, #0]
	: _M_ptr(), _M_refcount()
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	2200      	movs	r2, #0
 8007a00:	601a      	str	r2, [r3, #0]
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	3304      	adds	r3, #4
 8007a06:	4618      	mov	r0, r3
 8007a08:	f7f9 fa37 	bl	8000e7a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 8007a0c:	f107 0320 	add.w	r3, r7, #32
 8007a10:	6879      	ldr	r1, [r7, #4]
 8007a12:	4618      	mov	r0, r3
 8007a14:	f000 f936 	bl	8007c84 <_ZNSaIN4tama7TextureEEC1ERKS1_>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 8007a18:	f107 0318 	add.w	r3, r7, #24
 8007a1c:	f107 0220 	add.w	r2, r7, #32
 8007a20:	4611      	mov	r1, r2
 8007a22:	4618      	mov	r0, r3
 8007a24:	f000 f93c 	bl	8007ca0 <_ZSt18__allocate_guardedISaIN4tama7TextureEEESt15__allocated_ptrIT_ERS4_>
	  auto __ptr = __guard.get();
 8007a28:	f107 0318 	add.w	r3, r7, #24
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	f000 f95f 	bl	8007cf0 <_ZNSt15__allocated_ptrISaIN4tama7TextureEEE3getEv>
 8007a32:	62f8      	str	r0, [r7, #44]	; 0x2c
	  __traits::construct(__del._M_alloc, __ptr,
 8007a34:	6838      	ldr	r0, [r7, #0]
 8007a36:	f7ff fd07 	bl	8007448 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 8007a3a:	4604      	mov	r4, r0
 8007a3c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8007a3e:	f7ff fd03 	bl	8007448 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 8007a42:	4603      	mov	r3, r0
 8007a44:	f107 0020 	add.w	r0, r7, #32
 8007a48:	4622      	mov	r2, r4
 8007a4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a4c:	f000 f95e 	bl	8007d0c <_ZNSt16allocator_traitsISaIN4tama7TextureEEE9constructIS1_JRiS5_EEEvRS2_PT_DpOT0_>
	  __guard = nullptr;
 8007a50:	f107 0318 	add.w	r3, r7, #24
 8007a54:	2100      	movs	r1, #0
 8007a56:	4618      	mov	r0, r3
 8007a58:	f000 f970 	bl	8007d3c <_ZNSt15__allocated_ptrISaIN4tama7TextureEEEaSEDn>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 8007a5c:	f107 0220 	add.w	r2, r7, #32
 8007a60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a64:	4611      	mov	r1, r2
 8007a66:	4618      	mov	r0, r3
 8007a68:	f7ff ffb1 	bl	80079ce <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>
 8007a6c:	f107 0220 	add.w	r2, r7, #32
 8007a70:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007a74:	4611      	mov	r1, r2
 8007a76:	4618      	mov	r0, r3
 8007a78:	f000 f904 	bl	8007c84 <_ZNSaIN4tama7TextureEEC1ERKS1_>
 8007a7c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007a80:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8007a84:	f107 0014 	add.w	r0, r7, #20
 8007a88:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a8a:	f000 f98c 	bl	8007da6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama7TextureENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
 8007a8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007a92:	4618      	mov	r0, r3
 8007a94:	f7ff fddb 	bl	800764e <_ZNSaIN4tama7TextureEED1Ev>
 8007a98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	f7ff ff89 	bl	80079b4 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	  _M_refcount._M_swap(__count);
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	3304      	adds	r3, #4
 8007aa6:	f107 0214 	add.w	r2, r7, #20
 8007aaa:	4611      	mov	r1, r2
 8007aac:	4618      	mov	r0, r3
 8007aae:	f7f9 f9f2 	bl	8000e96 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  _M_ptr = __ptr;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ab6:	601a      	str	r2, [r3, #0]
	  _M_enable_shared_from_this_with(_M_ptr);
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4619      	mov	r1, r3
 8007abe:	68f8      	ldr	r0, [r7, #12]
 8007ac0:	f000 f9c8 	bl	8007e54 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 8007ac4:	f107 0314 	add.w	r3, r7, #20
 8007ac8:	4618      	mov	r0, r3
 8007aca:	f7f8 ffba 	bl	8000a42 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 8007ace:	f107 0318 	add.w	r3, r7, #24
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	f000 f8f7 	bl	8007cc6 <_ZNSt15__allocated_ptrISaIN4tama7TextureEEED1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 8007ad8:	f107 0320 	add.w	r3, r7, #32
 8007adc:	4618      	mov	r0, r3
 8007ade:	f7ff ff69 	bl	80079b4 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	}
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	3734      	adds	r7, #52	; 0x34
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd90      	pop	{r4, r7, pc}

08007aec <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJiiEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 8007aec:	b590      	push	{r4, r7, lr}
 8007aee:	b08d      	sub	sp, #52	; 0x34
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	60f8      	str	r0, [r7, #12]
 8007af4:	7239      	strb	r1, [r7, #8]
 8007af6:	607a      	str	r2, [r7, #4]
 8007af8:	603b      	str	r3, [r7, #0]
	: _M_ptr(), _M_refcount()
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	2200      	movs	r2, #0
 8007afe:	601a      	str	r2, [r3, #0]
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	3304      	adds	r3, #4
 8007b04:	4618      	mov	r0, r3
 8007b06:	f7f9 f9b8 	bl	8000e7a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 8007b0a:	f107 0320 	add.w	r3, r7, #32
 8007b0e:	6879      	ldr	r1, [r7, #4]
 8007b10:	4618      	mov	r0, r3
 8007b12:	f000 f8b7 	bl	8007c84 <_ZNSaIN4tama7TextureEEC1ERKS1_>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 8007b16:	f107 0318 	add.w	r3, r7, #24
 8007b1a:	f107 0220 	add.w	r2, r7, #32
 8007b1e:	4611      	mov	r1, r2
 8007b20:	4618      	mov	r0, r3
 8007b22:	f000 f8bd 	bl	8007ca0 <_ZSt18__allocate_guardedISaIN4tama7TextureEEESt15__allocated_ptrIT_ERS4_>
	  auto __ptr = __guard.get();
 8007b26:	f107 0318 	add.w	r3, r7, #24
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	f000 f8e0 	bl	8007cf0 <_ZNSt15__allocated_ptrISaIN4tama7TextureEEE3getEv>
 8007b30:	62f8      	str	r0, [r7, #44]	; 0x2c
	  __traits::construct(__del._M_alloc, __ptr,
 8007b32:	6838      	ldr	r0, [r7, #0]
 8007b34:	f7ff fcc1 	bl	80074ba <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 8007b38:	4604      	mov	r4, r0
 8007b3a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8007b3c:	f7ff fcbd 	bl	80074ba <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 8007b40:	4603      	mov	r3, r0
 8007b42:	f107 0020 	add.w	r0, r7, #32
 8007b46:	4622      	mov	r2, r4
 8007b48:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b4a:	f000 f98e 	bl	8007e6a <_ZNSt16allocator_traitsISaIN4tama7TextureEEE9constructIS1_JiiEEEvRS2_PT_DpOT0_>
	  __guard = nullptr;
 8007b4e:	f107 0318 	add.w	r3, r7, #24
 8007b52:	2100      	movs	r1, #0
 8007b54:	4618      	mov	r0, r3
 8007b56:	f000 f8f1 	bl	8007d3c <_ZNSt15__allocated_ptrISaIN4tama7TextureEEEaSEDn>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 8007b5a:	f107 0220 	add.w	r2, r7, #32
 8007b5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007b62:	4611      	mov	r1, r2
 8007b64:	4618      	mov	r0, r3
 8007b66:	f7ff ff32 	bl	80079ce <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>
 8007b6a:	f107 0220 	add.w	r2, r7, #32
 8007b6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007b72:	4611      	mov	r1, r2
 8007b74:	4618      	mov	r0, r3
 8007b76:	f000 f885 	bl	8007c84 <_ZNSaIN4tama7TextureEEC1ERKS1_>
 8007b7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007b7e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8007b82:	f107 0014 	add.w	r0, r7, #20
 8007b86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b88:	f000 f90d 	bl	8007da6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama7TextureENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
 8007b8c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007b90:	4618      	mov	r0, r3
 8007b92:	f7ff fd5c 	bl	800764e <_ZNSaIN4tama7TextureEED1Ev>
 8007b96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	f7ff ff0a 	bl	80079b4 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	  _M_refcount._M_swap(__count);
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	3304      	adds	r3, #4
 8007ba4:	f107 0214 	add.w	r2, r7, #20
 8007ba8:	4611      	mov	r1, r2
 8007baa:	4618      	mov	r0, r3
 8007bac:	f7f9 f973 	bl	8000e96 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  _M_ptr = __ptr;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007bb4:	601a      	str	r2, [r3, #0]
	  _M_enable_shared_from_this_with(_M_ptr);
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4619      	mov	r1, r3
 8007bbc:	68f8      	ldr	r0, [r7, #12]
 8007bbe:	f000 f949 	bl	8007e54 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 8007bc2:	f107 0314 	add.w	r3, r7, #20
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f7f8 ff3b 	bl	8000a42 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 8007bcc:	f107 0318 	add.w	r3, r7, #24
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	f000 f878 	bl	8007cc6 <_ZNSt15__allocated_ptrISaIN4tama7TextureEEED1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 8007bd6:	f107 0320 	add.w	r3, r7, #32
 8007bda:	4618      	mov	r0, r3
 8007bdc:	f7ff feea 	bl	80079b4 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	}
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	4618      	mov	r0, r3
 8007be4:	3734      	adds	r7, #52	; 0x34
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd90      	pop	{r4, r7, pc}

08007bea <_ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8007bea:	b480      	push	{r7}
 8007bec:	b083      	sub	sp, #12
 8007bee:	af00      	add	r7, sp, #0
 8007bf0:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	370c      	adds	r7, #12
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfe:	4770      	bx	lr

08007c00 <_ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8007c00:	b480      	push	{r7}
 8007c02:	b083      	sub	sp, #12
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	370c      	adds	r7, #12
 8007c10:	46bd      	mov	sp, r7
 8007c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c16:	4770      	bx	lr

08007c18 <_ZNSt11_Tuple_implILj0EJPN4tama18Stm32TextureLoaderESt14default_deleteIS1_EEEC1Ev>:
      constexpr _Tuple_impl()
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b082      	sub	sp, #8
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f000 f93a 	bl	8007e9a <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN4tama18Stm32TextureLoaderEEEEC1Ev>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	4618      	mov	r0, r3
 8007c2a:	f000 f942 	bl	8007eb2 <_ZNSt10_Head_baseILj0EPN4tama18Stm32TextureLoaderELb0EEC1Ev>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	4618      	mov	r0, r3
 8007c32:	3708      	adds	r7, #8
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bd80      	pop	{r7, pc}

08007c38 <_ZNSt11_Tuple_implILj0EJPN4tama18Stm32TextureLoaderESt14default_deleteIS1_EEE7_M_headERS5_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b082      	sub	sp, #8
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	4618      	mov	r0, r3
 8007c44:	f000 f943 	bl	8007ece <_ZNSt10_Head_baseILj0EPN4tama18Stm32TextureLoaderELb0EE7_M_headERS3_>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	3708      	adds	r7, #8
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}

08007c52 <_ZSt12__get_helperILj1ESt14default_deleteIN4tama18Stm32TextureLoaderEEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8007c52:	b580      	push	{r7, lr}
 8007c54:	b082      	sub	sp, #8
 8007c56:	af00      	add	r7, sp, #0
 8007c58:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f000 f942 	bl	8007ee4 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN4tama18Stm32TextureLoaderEEEE7_M_headERS4_>
 8007c60:	4603      	mov	r3, r0
 8007c62:	4618      	mov	r0, r3
 8007c64:	3708      	adds	r7, #8
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bd80      	pop	{r7, pc}

08007c6a <_ZSt3getILj0EJPN4tama18Stm32TextureLoaderESt14default_deleteIS1_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_>:
    get(const tuple<_Elements...>& __t) noexcept
 8007c6a:	b580      	push	{r7, lr}
 8007c6c:	b082      	sub	sp, #8
 8007c6e:	af00      	add	r7, sp, #0
 8007c70:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	4618      	mov	r0, r3
 8007c76:	f000 f941 	bl	8007efc <_ZSt12__get_helperILj0EPN4tama18Stm32TextureLoaderEJSt14default_deleteIS1_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE>
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	3708      	adds	r7, #8
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd80      	pop	{r7, pc}

08007c84 <_ZNSaIN4tama7TextureEEC1ERKS1_>:
      allocator(const allocator& __a) throw()
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b082      	sub	sp, #8
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
 8007c8c:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8007c8e:	6839      	ldr	r1, [r7, #0]
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f000 f93f 	bl	8007f14 <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEEC1ERKS3_>
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	4618      	mov	r0, r3
 8007c9a:	3708      	adds	r7, #8
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}

08007ca0 <_ZSt18__allocate_guardedISaIN4tama7TextureEEESt15__allocated_ptrIT_ERS4_>:
    __allocate_guarded(_Alloc& __a)
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b082      	sub	sp, #8
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
 8007ca8:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 8007caa:	2101      	movs	r1, #1
 8007cac:	6838      	ldr	r0, [r7, #0]
 8007cae:	f000 f93d 	bl	8007f2c <_ZNSt16allocator_traitsISaIN4tama7TextureEEE8allocateERS2_j>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	461a      	mov	r2, r3
 8007cb6:	6839      	ldr	r1, [r7, #0]
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f000 f946 	bl	8007f4a <_ZNSt15__allocated_ptrISaIN4tama7TextureEEEC1ERS2_PS1_>
    }
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	3708      	adds	r7, #8
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}

08007cc6 <_ZNSt15__allocated_ptrISaIN4tama7TextureEEED1Ev>:
      ~__allocated_ptr()
 8007cc6:	b580      	push	{r7, lr}
 8007cc8:	b082      	sub	sp, #8
 8007cca:	af00      	add	r7, sp, #0
 8007ccc:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	685b      	ldr	r3, [r3, #4]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d007      	beq.n	8007ce6 <_ZNSt15__allocated_ptrISaIN4tama7TextureEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6818      	ldr	r0, [r3, #0]
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	685b      	ldr	r3, [r3, #4]
 8007cde:	2201      	movs	r2, #1
 8007ce0:	4619      	mov	r1, r3
 8007ce2:	f000 f946 	bl	8007f72 <_ZNSt16allocator_traitsISaIN4tama7TextureEEE10deallocateERS2_PS1_j>
      }
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3708      	adds	r7, #8
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}

08007cf0 <_ZNSt15__allocated_ptrISaIN4tama7TextureEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b082      	sub	sp, #8
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	685b      	ldr	r3, [r3, #4]
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	f000 f947 	bl	8007f90 <_ZNSt15__allocated_ptrISaIN4tama7TextureEEE10_S_raw_ptrEPS1_>
 8007d02:	4603      	mov	r3, r0
 8007d04:	4618      	mov	r0, r3
 8007d06:	3708      	adds	r7, #8
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd80      	pop	{r7, pc}

08007d0c <_ZNSt16allocator_traitsISaIN4tama7TextureEEE9constructIS1_JRiS5_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8007d0c:	b590      	push	{r4, r7, lr}
 8007d0e:	b085      	sub	sp, #20
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	60f8      	str	r0, [r7, #12]
 8007d14:	60b9      	str	r1, [r7, #8]
 8007d16:	607a      	str	r2, [r7, #4]
 8007d18:	603b      	str	r3, [r7, #0]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f7ff fb94 	bl	8007448 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 8007d20:	4604      	mov	r4, r0
 8007d22:	6838      	ldr	r0, [r7, #0]
 8007d24:	f7ff fb90 	bl	8007448 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	4622      	mov	r2, r4
 8007d2c:	68b9      	ldr	r1, [r7, #8]
 8007d2e:	68f8      	ldr	r0, [r7, #12]
 8007d30:	f000 f939 	bl	8007fa6 <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEE9constructIS2_JRiS5_EEEvPT_DpOT0_>
 8007d34:	bf00      	nop
 8007d36:	3714      	adds	r7, #20
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd90      	pop	{r4, r7, pc}

08007d3c <_ZNSt15__allocated_ptrISaIN4tama7TextureEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 8007d3c:	b480      	push	{r7}
 8007d3e:	b083      	sub	sp, #12
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
 8007d44:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2200      	movs	r2, #0
 8007d4a:	605a      	str	r2, [r3, #4]
	return *this;
 8007d4c:	687b      	ldr	r3, [r7, #4]
      }
 8007d4e:	4618      	mov	r0, r3
 8007d50:	370c      	adds	r7, #12
 8007d52:	46bd      	mov	sp, r7
 8007d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d58:	4770      	bx	lr

08007d5a <_ZSt4moveIRNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
 8007d5a:	b480      	push	{r7}
 8007d5c:	b083      	sub	sp, #12
 8007d5e:	af00      	add	r7, sp, #0
 8007d60:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	4618      	mov	r0, r3
 8007d66:	370c      	adds	r7, #12
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6e:	4770      	bx	lr

08007d70 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>:
        struct _Deleter
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b082      	sub	sp, #8
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
 8007d78:	6039      	str	r1, [r7, #0]
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	683a      	ldr	r2, [r7, #0]
 8007d7e:	4611      	mov	r1, r2
 8007d80:	4618      	mov	r0, r3
 8007d82:	f7ff ff7f 	bl	8007c84 <_ZNSaIN4tama7TextureEEC1ERKS1_>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	4618      	mov	r0, r3
 8007d8a:	3708      	adds	r7, #8
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}

08007d90 <_ZSt4moveIRSaIN4tama7TextureEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8007d90:	b480      	push	{r7}
 8007d92:	b083      	sub	sp, #12
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	370c      	adds	r7, #12
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da4:	4770      	bx	lr

08007da6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama7TextureENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
 8007da6:	b5b0      	push	{r4, r5, r7, lr}
 8007da8:	b08a      	sub	sp, #40	; 0x28
 8007daa:	af00      	add	r7, sp, #0
 8007dac:	60f8      	str	r0, [r7, #12]
 8007dae:	60b9      	str	r1, [r7, #8]
 8007db0:	607a      	str	r2, [r7, #4]
 8007db2:	603b      	str	r3, [r7, #0]
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	2200      	movs	r2, #0
 8007db8:	601a      	str	r2, [r3, #0]
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 8007dba:	f107 031c 	add.w	r3, r7, #28
 8007dbe:	6839      	ldr	r1, [r7, #0]
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	f000 f914 	bl	8007fee <_ZNSaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	      auto __guard = std::__allocate_guarded(__a2);
 8007dc6:	f107 0314 	add.w	r3, r7, #20
 8007dca:	f107 021c 	add.w	r2, r7, #28
 8007dce:	4611      	mov	r1, r2
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	f000 f925 	bl	8008020 <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>
	      _Sp_cd_type* __mem = __guard.get();
 8007dd6:	f107 0314 	add.w	r3, r7, #20
 8007dda:	4618      	mov	r0, r3
 8007ddc:	f000 f948 	bl	8008070 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>
 8007de0:	6278      	str	r0, [r7, #36]	; 0x24
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f7ff ffb9 	bl	8007d5a <_ZSt4moveIRNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 8007de8:	4602      	mov	r2, r0
 8007dea:	f107 0320 	add.w	r3, r7, #32
 8007dee:	4611      	mov	r1, r2
 8007df0:	4618      	mov	r0, r3
 8007df2:	f7ff ffbd 	bl	8007d70 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 8007df6:	f107 0420 	add.w	r4, r7, #32
 8007dfa:	6838      	ldr	r0, [r7, #0]
 8007dfc:	f7ff ffc8 	bl	8007d90 <_ZSt4moveIRSaIN4tama7TextureEEEONSt16remove_referenceIT_E4typeEOS5_>
 8007e00:	4605      	mov	r5, r0
 8007e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e04:	4619      	mov	r1, r3
 8007e06:	2014      	movs	r0, #20
 8007e08:	f7f8 fb99 	bl	800053e <_ZnwjPv>
 8007e0c:	2800      	cmp	r0, #0
 8007e0e:	d004      	beq.n	8007e1a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama7TextureENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x74>
 8007e10:	462b      	mov	r3, r5
 8007e12:	4622      	mov	r2, r4
 8007e14:	68b9      	ldr	r1, [r7, #8]
 8007e16:	f000 f965 	bl	80080e4 <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>
 8007e1a:	f107 0320 	add.w	r3, r7, #32
 8007e1e:	4618      	mov	r0, r3
 8007e20:	f7ff fdc8 	bl	80079b4 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	      _M_pi = __mem;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e28:	601a      	str	r2, [r3, #0]
	      __guard = nullptr;
 8007e2a:	f107 0314 	add.w	r3, r7, #20
 8007e2e:	2100      	movs	r1, #0
 8007e30:	4618      	mov	r0, r3
 8007e32:	f000 f985 	bl	8008140 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>
	      auto __guard = std::__allocate_guarded(__a2);
 8007e36:	f107 0314 	add.w	r3, r7, #20
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	f000 f903 	bl	8008046 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 8007e40:	f107 031c 	add.w	r3, r7, #28
 8007e44:	4618      	mov	r0, r3
 8007e46:	f000 f8df 	bl	8008008 <_ZNSaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
	}
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	3728      	adds	r7, #40	; 0x28
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bdb0      	pop	{r4, r5, r7, pc}

08007e54 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp*) noexcept
 8007e54:	b480      	push	{r7}
 8007e56:	b083      	sub	sp, #12
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
 8007e5c:	6039      	str	r1, [r7, #0]
	{ }
 8007e5e:	bf00      	nop
 8007e60:	370c      	adds	r7, #12
 8007e62:	46bd      	mov	sp, r7
 8007e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e68:	4770      	bx	lr

08007e6a <_ZNSt16allocator_traitsISaIN4tama7TextureEEE9constructIS1_JiiEEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8007e6a:	b590      	push	{r4, r7, lr}
 8007e6c:	b085      	sub	sp, #20
 8007e6e:	af00      	add	r7, sp, #0
 8007e70:	60f8      	str	r0, [r7, #12]
 8007e72:	60b9      	str	r1, [r7, #8]
 8007e74:	607a      	str	r2, [r7, #4]
 8007e76:	603b      	str	r3, [r7, #0]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f7ff fb1e 	bl	80074ba <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 8007e7e:	4604      	mov	r4, r0
 8007e80:	6838      	ldr	r0, [r7, #0]
 8007e82:	f7ff fb1a 	bl	80074ba <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 8007e86:	4603      	mov	r3, r0
 8007e88:	4622      	mov	r2, r4
 8007e8a:	68b9      	ldr	r1, [r7, #8]
 8007e8c:	68f8      	ldr	r0, [r7, #12]
 8007e8e:	f000 f986 	bl	800819e <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEE9constructIS2_JiiEEEvPT_DpOT0_>
 8007e92:	bf00      	nop
 8007e94:	3714      	adds	r7, #20
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd90      	pop	{r4, r7, pc}

08007e9a <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN4tama18Stm32TextureLoaderEEEEC1Ev>:
      constexpr _Tuple_impl()
 8007e9a:	b580      	push	{r7, lr}
 8007e9c:	b082      	sub	sp, #8
 8007e9e:	af00      	add	r7, sp, #0
 8007ea0:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f000 f99f 	bl	80081e6 <_ZNSt10_Head_baseILj1ESt14default_deleteIN4tama18Stm32TextureLoaderEELb1EEC1Ev>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	4618      	mov	r0, r3
 8007eac:	3708      	adds	r7, #8
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}

08007eb2 <_ZNSt10_Head_baseILj0EPN4tama18Stm32TextureLoaderELb0EEC1Ev>:
      constexpr _Head_base()
 8007eb2:	b480      	push	{r7}
 8007eb4:	b083      	sub	sp, #12
 8007eb6:	af00      	add	r7, sp, #0
 8007eb8:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	601a      	str	r2, [r3, #0]
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	370c      	adds	r7, #12
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ecc:	4770      	bx	lr

08007ece <_ZNSt10_Head_baseILj0EPN4tama18Stm32TextureLoaderELb0EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8007ece:	b480      	push	{r7}
 8007ed0:	b083      	sub	sp, #12
 8007ed2:	af00      	add	r7, sp, #0
 8007ed4:	6078      	str	r0, [r7, #4]
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	4618      	mov	r0, r3
 8007eda:	370c      	adds	r7, #12
 8007edc:	46bd      	mov	sp, r7
 8007ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee2:	4770      	bx	lr

08007ee4 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN4tama18Stm32TextureLoaderEEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b082      	sub	sp, #8
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f000 f985 	bl	80081fc <_ZNSt10_Head_baseILj1ESt14default_deleteIN4tama18Stm32TextureLoaderEELb1EE7_M_headERS4_>
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	3708      	adds	r7, #8
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bd80      	pop	{r7, pc}

08007efc <_ZSt12__get_helperILj0EPN4tama18Stm32TextureLoaderEJSt14default_deleteIS1_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b082      	sub	sp, #8
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f000 f984 	bl	8008212 <_ZNSt11_Tuple_implILj0EJPN4tama18Stm32TextureLoaderESt14default_deleteIS1_EEE7_M_headERKS5_>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	3708      	adds	r7, #8
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}

08007f14 <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEEC1ERKS3_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8007f14:	b480      	push	{r7}
 8007f16:	b083      	sub	sp, #12
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
 8007f1c:	6039      	str	r1, [r7, #0]
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	4618      	mov	r0, r3
 8007f22:	370c      	adds	r7, #12
 8007f24:	46bd      	mov	sp, r7
 8007f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2a:	4770      	bx	lr

08007f2c <_ZNSt16allocator_traitsISaIN4tama7TextureEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b082      	sub	sp, #8
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
 8007f34:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8007f36:	2200      	movs	r2, #0
 8007f38:	6839      	ldr	r1, [r7, #0]
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f000 f976 	bl	800822c <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEE8allocateEjPKv>
 8007f40:	4603      	mov	r3, r0
 8007f42:	4618      	mov	r0, r3
 8007f44:	3708      	adds	r7, #8
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}

08007f4a <_ZNSt15__allocated_ptrISaIN4tama7TextureEEEC1ERS2_PS1_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 8007f4a:	b580      	push	{r7, lr}
 8007f4c:	b084      	sub	sp, #16
 8007f4e:	af00      	add	r7, sp, #0
 8007f50:	60f8      	str	r0, [r7, #12]
 8007f52:	60b9      	str	r1, [r7, #8]
 8007f54:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 8007f56:	68b8      	ldr	r0, [r7, #8]
 8007f58:	f000 f986 	bl	8008268 <_ZSt11__addressofISaIN4tama7TextureEEEPT_RS3_>
 8007f5c:	4602      	mov	r2, r0
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	601a      	str	r2, [r3, #0]
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	687a      	ldr	r2, [r7, #4]
 8007f66:	605a      	str	r2, [r3, #4]
      { }
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	3710      	adds	r7, #16
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}

08007f72 <_ZNSt16allocator_traitsISaIN4tama7TextureEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8007f72:	b580      	push	{r7, lr}
 8007f74:	b084      	sub	sp, #16
 8007f76:	af00      	add	r7, sp, #0
 8007f78:	60f8      	str	r0, [r7, #12]
 8007f7a:	60b9      	str	r1, [r7, #8]
 8007f7c:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8007f7e:	687a      	ldr	r2, [r7, #4]
 8007f80:	68b9      	ldr	r1, [r7, #8]
 8007f82:	68f8      	ldr	r0, [r7, #12]
 8007f84:	f000 f97b 	bl	800827e <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEE10deallocateEPS2_j>
 8007f88:	bf00      	nop
 8007f8a:	3710      	adds	r7, #16
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}

08007f90 <_ZNSt15__allocated_ptrISaIN4tama7TextureEEE10_S_raw_ptrEPS1_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 8007f90:	b480      	push	{r7}
 8007f92:	b083      	sub	sp, #12
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	370c      	adds	r7, #12
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa4:	4770      	bx	lr

08007fa6 <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEE9constructIS2_JRiS5_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8007fa6:	b5b0      	push	{r4, r5, r7, lr}
 8007fa8:	b084      	sub	sp, #16
 8007faa:	af00      	add	r7, sp, #0
 8007fac:	60f8      	str	r0, [r7, #12]
 8007fae:	60b9      	str	r1, [r7, #8]
 8007fb0:	607a      	str	r2, [r7, #4]
 8007fb2:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f7ff fa47 	bl	8007448 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	461c      	mov	r4, r3
 8007fc0:	6838      	ldr	r0, [r7, #0]
 8007fc2:	f7ff fa41 	bl	8007448 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	461d      	mov	r5, r3
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	4619      	mov	r1, r3
 8007fd0:	2010      	movs	r0, #16
 8007fd2:	f7f8 fab4 	bl	800053e <_ZnwjPv>
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d004      	beq.n	8007fe6 <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEE9constructIS2_JRiS5_EEEvPT_DpOT0_+0x40>
 8007fdc:	462a      	mov	r2, r5
 8007fde:	4621      	mov	r1, r4
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	f7fe fc03 	bl	80067ec <_ZN4tama7TextureC1Ejj>
 8007fe6:	bf00      	nop
 8007fe8:	3710      	adds	r7, #16
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bdb0      	pop	{r4, r5, r7, pc}

08007fee <_ZNSaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) throw() { }
 8007fee:	b580      	push	{r7, lr}
 8007ff0:	b082      	sub	sp, #8
 8007ff2:	af00      	add	r7, sp, #0
 8007ff4:	6078      	str	r0, [r7, #4]
 8007ff6:	6039      	str	r1, [r7, #0]
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f000 f94d 	bl	8008298 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	4618      	mov	r0, r3
 8008002:	3708      	adds	r7, #8
 8008004:	46bd      	mov	sp, r7
 8008006:	bd80      	pop	{r7, pc}

08008008 <_ZNSaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>:
      ~allocator() throw() { }
 8008008:	b580      	push	{r7, lr}
 800800a:	b082      	sub	sp, #8
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f000 f94c 	bl	80082ae <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	4618      	mov	r0, r3
 800801a:	3708      	adds	r7, #8
 800801c:	46bd      	mov	sp, r7
 800801e:	bd80      	pop	{r7, pc}

08008020 <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>:
    __allocate_guarded(_Alloc& __a)
 8008020:	b580      	push	{r7, lr}
 8008022:	b082      	sub	sp, #8
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
 8008028:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 800802a:	2101      	movs	r1, #1
 800802c:	6838      	ldr	r0, [r7, #0]
 800802e:	f000 f949 	bl	80082c4 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>
 8008032:	4603      	mov	r3, r0
 8008034:	461a      	mov	r2, r3
 8008036:	6839      	ldr	r1, [r7, #0]
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f000 f952 	bl	80082e2 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
    }
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	3708      	adds	r7, #8
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}

08008046 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>:
      ~__allocated_ptr()
 8008046:	b580      	push	{r7, lr}
 8008048:	b082      	sub	sp, #8
 800804a:	af00      	add	r7, sp, #0
 800804c:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	685b      	ldr	r3, [r3, #4]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d007      	beq.n	8008066 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6818      	ldr	r0, [r3, #0]
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	685b      	ldr	r3, [r3, #4]
 800805e:	2201      	movs	r2, #1
 8008060:	4619      	mov	r1, r3
 8008062:	f000 f952 	bl	800830a <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>
      }
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	4618      	mov	r0, r3
 800806a:	3708      	adds	r7, #8
 800806c:	46bd      	mov	sp, r7
 800806e:	bd80      	pop	{r7, pc}

08008070 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 8008070:	b580      	push	{r7, lr}
 8008072:	b082      	sub	sp, #8
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	685b      	ldr	r3, [r3, #4]
 800807c:	4618      	mov	r0, r3
 800807e:	f000 f953 	bl	8008328 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>
 8008082:	4603      	mov	r3, r0
 8008084:	4618      	mov	r0, r3
 8008086:	3708      	adds	r7, #8
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}

0800808c <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, false>
 800808c:	b580      	push	{r7, lr}
 800808e:	b082      	sub	sp, #8
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	4618      	mov	r0, r3
 8008098:	f7ff fc8c 	bl	80079b4 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	4618      	mov	r0, r3
 80080a0:	3708      	adds	r7, #8
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}

080080a6 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama7TextureEELb1EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, true> : private _Tp
 80080a6:	b580      	push	{r7, lr}
 80080a8:	b082      	sub	sp, #8
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	6078      	str	r0, [r7, #4]
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f7ff facd 	bl	800764e <_ZNSaIN4tama7TextureEED1Ev>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	4618      	mov	r0, r3
 80080b8:	3708      	adds	r7, #8
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}

080080be <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>:
      class _Impl : _Sp_ebo_helper<0, _Deleter>, _Sp_ebo_helper<1, _Alloc>
 80080be:	b580      	push	{r7, lr}
 80080c0:	b082      	sub	sp, #8
 80080c2:	af00      	add	r7, sp, #0
 80080c4:	6078      	str	r0, [r7, #4]
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	3301      	adds	r3, #1
 80080ca:	4618      	mov	r0, r3
 80080cc:	f7ff ffeb 	bl	80080a6 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama7TextureEELb1EED1Ev>
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	4618      	mov	r0, r3
 80080d4:	f7ff ffda 	bl	800808c <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	4618      	mov	r0, r3
 80080dc:	3708      	adds	r7, #8
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}
	...

080080e4 <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>:
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 80080e4:	b590      	push	{r4, r7, lr}
 80080e6:	b087      	sub	sp, #28
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	60f8      	str	r0, [r7, #12]
 80080ec:	60b9      	str	r1, [r7, #8]
 80080ee:	607a      	str	r2, [r7, #4]
 80080f0:	603b      	str	r3, [r7, #0]
      : _M_impl(__p, std::move(__d), __a) { }
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	4618      	mov	r0, r3
 80080f6:	f7fa fa3b 	bl	8002570 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 80080fa:	4a10      	ldr	r2, [pc, #64]	; (800813c <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_+0x58>)
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	601a      	str	r2, [r3, #0]
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	f103 040c 	add.w	r4, r3, #12
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f7ff fe27 	bl	8007d5a <_ZSt4moveIRNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 800810c:	4602      	mov	r2, r0
 800810e:	f107 0314 	add.w	r3, r7, #20
 8008112:	4611      	mov	r1, r2
 8008114:	4618      	mov	r0, r3
 8008116:	f7ff fe2b 	bl	8007d70 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 800811a:	f107 0214 	add.w	r2, r7, #20
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	68b9      	ldr	r1, [r7, #8]
 8008122:	4620      	mov	r0, r4
 8008124:	f000 f90b 	bl	800833e <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>
 8008128:	f107 0314 	add.w	r3, r7, #20
 800812c:	4618      	mov	r0, r3
 800812e:	f7ff fc41 	bl	80079b4 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	4618      	mov	r0, r3
 8008136:	371c      	adds	r7, #28
 8008138:	46bd      	mov	sp, r7
 800813a:	bd90      	pop	{r4, r7, pc}
 800813c:	0801afa4 	.word	0x0801afa4

08008140 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 8008140:	b480      	push	{r7}
 8008142:	b083      	sub	sp, #12
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
 8008148:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2200      	movs	r2, #0
 800814e:	605a      	str	r2, [r3, #4]
	return *this;
 8008150:	687b      	ldr	r3, [r7, #4]
      }
 8008152:	4618      	mov	r0, r3
 8008154:	370c      	adds	r7, #12
 8008156:	46bd      	mov	sp, r7
 8008158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815c:	4770      	bx	lr

0800815e <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>:
          void operator()(typename _Alloc::value_type* __ptr)
 800815e:	b590      	push	{r4, r7, lr}
 8008160:	b085      	sub	sp, #20
 8008162:	af00      	add	r7, sp, #0
 8008164:	6078      	str	r0, [r7, #4]
 8008166:	6039      	str	r1, [r7, #0]
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 8008168:	6879      	ldr	r1, [r7, #4]
 800816a:	f107 0308 	add.w	r3, r7, #8
 800816e:	683a      	ldr	r2, [r7, #0]
 8008170:	4618      	mov	r0, r3
 8008172:	f7ff feea 	bl	8007f4a <_ZNSt15__allocated_ptrISaIN4tama7TextureEEEC1ERS2_PS1_>
	    allocator_traits<_Alloc>::destroy(_M_alloc, __guard.get());
 8008176:	687c      	ldr	r4, [r7, #4]
 8008178:	f107 0308 	add.w	r3, r7, #8
 800817c:	4618      	mov	r0, r3
 800817e:	f7ff fdb7 	bl	8007cf0 <_ZNSt15__allocated_ptrISaIN4tama7TextureEEE3getEv>
 8008182:	4603      	mov	r3, r0
 8008184:	4619      	mov	r1, r3
 8008186:	4620      	mov	r0, r4
 8008188:	f000 f8f7 	bl	800837a <_ZNSt16allocator_traitsISaIN4tama7TextureEEE7destroyIS1_EEvRS2_PT_>
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 800818c:	f107 0308 	add.w	r3, r7, #8
 8008190:	4618      	mov	r0, r3
 8008192:	f7ff fd98 	bl	8007cc6 <_ZNSt15__allocated_ptrISaIN4tama7TextureEEED1Ev>
          }
 8008196:	bf00      	nop
 8008198:	3714      	adds	r7, #20
 800819a:	46bd      	mov	sp, r7
 800819c:	bd90      	pop	{r4, r7, pc}

0800819e <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEE9constructIS2_JiiEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800819e:	b5b0      	push	{r4, r5, r7, lr}
 80081a0:	b084      	sub	sp, #16
 80081a2:	af00      	add	r7, sp, #0
 80081a4:	60f8      	str	r0, [r7, #12]
 80081a6:	60b9      	str	r1, [r7, #8]
 80081a8:	607a      	str	r2, [r7, #4]
 80081aa:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f7ff f984 	bl	80074ba <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 80081b2:	4603      	mov	r3, r0
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	461c      	mov	r4, r3
 80081b8:	6838      	ldr	r0, [r7, #0]
 80081ba:	f7ff f97e 	bl	80074ba <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 80081be:	4603      	mov	r3, r0
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	461d      	mov	r5, r3
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	4619      	mov	r1, r3
 80081c8:	2010      	movs	r0, #16
 80081ca:	f7f8 f9b8 	bl	800053e <_ZnwjPv>
 80081ce:	4603      	mov	r3, r0
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d004      	beq.n	80081de <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEE9constructIS2_JiiEEEvPT_DpOT0_+0x40>
 80081d4:	462a      	mov	r2, r5
 80081d6:	4621      	mov	r1, r4
 80081d8:	4618      	mov	r0, r3
 80081da:	f7fe fb07 	bl	80067ec <_ZN4tama7TextureC1Ejj>
 80081de:	bf00      	nop
 80081e0:	3710      	adds	r7, #16
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bdb0      	pop	{r4, r5, r7, pc}

080081e6 <_ZNSt10_Head_baseILj1ESt14default_deleteIN4tama18Stm32TextureLoaderEELb1EEC1Ev>:
      constexpr _Head_base()
 80081e6:	b480      	push	{r7}
 80081e8:	b083      	sub	sp, #12
 80081ea:	af00      	add	r7, sp, #0
 80081ec:	6078      	str	r0, [r7, #4]
      : _Head() { }
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	4618      	mov	r0, r3
 80081f2:	370c      	adds	r7, #12
 80081f4:	46bd      	mov	sp, r7
 80081f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fa:	4770      	bx	lr

080081fc <_ZNSt10_Head_baseILj1ESt14default_deleteIN4tama18Stm32TextureLoaderEELb1EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b; }
 80081fc:	b480      	push	{r7}
 80081fe:	b083      	sub	sp, #12
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	4618      	mov	r0, r3
 8008208:	370c      	adds	r7, #12
 800820a:	46bd      	mov	sp, r7
 800820c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008210:	4770      	bx	lr

08008212 <_ZNSt11_Tuple_implILj0EJPN4tama18Stm32TextureLoaderESt14default_deleteIS1_EEE7_M_headERKS5_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8008212:	b580      	push	{r7, lr}
 8008214:	b082      	sub	sp, #8
 8008216:	af00      	add	r7, sp, #0
 8008218:	6078      	str	r0, [r7, #4]
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	4618      	mov	r0, r3
 800821e:	f000 f8b9 	bl	8008394 <_ZNSt10_Head_baseILj0EPN4tama18Stm32TextureLoaderELb0EE7_M_headERKS3_>
 8008222:	4603      	mov	r3, r0
 8008224:	4618      	mov	r0, r3
 8008226:	3708      	adds	r7, #8
 8008228:	46bd      	mov	sp, r7
 800822a:	bd80      	pop	{r7, pc}

0800822c <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800822c:	b580      	push	{r7, lr}
 800822e:	b084      	sub	sp, #16
 8008230:	af00      	add	r7, sp, #0
 8008232:	60f8      	str	r0, [r7, #12]
 8008234:	60b9      	str	r1, [r7, #8]
 8008236:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8008238:	68f8      	ldr	r0, [r7, #12]
 800823a:	f000 f8b6 	bl	80083aa <_ZNK9__gnu_cxx13new_allocatorIN4tama7TextureEE8max_sizeEv>
 800823e:	4602      	mov	r2, r0
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	4293      	cmp	r3, r2
 8008244:	bf8c      	ite	hi
 8008246:	2301      	movhi	r3, #1
 8008248:	2300      	movls	r3, #0
 800824a:	b2db      	uxtb	r3, r3
 800824c:	2b00      	cmp	r3, #0
 800824e:	d001      	beq.n	8008254 <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8008250:	f00f f95f 	bl	8017512 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	011b      	lsls	r3, r3, #4
 8008258:	4618      	mov	r0, r3
 800825a:	f00f f92c 	bl	80174b6 <_Znwj>
 800825e:	4603      	mov	r3, r0
      }
 8008260:	4618      	mov	r0, r3
 8008262:	3710      	adds	r7, #16
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}

08008268 <_ZSt11__addressofISaIN4tama7TextureEEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8008268:	b480      	push	{r7}
 800826a:	b083      	sub	sp, #12
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	4618      	mov	r0, r3
 8008274:	370c      	adds	r7, #12
 8008276:	46bd      	mov	sp, r7
 8008278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827c:	4770      	bx	lr

0800827e <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 800827e:	b580      	push	{r7, lr}
 8008280:	b084      	sub	sp, #16
 8008282:	af00      	add	r7, sp, #0
 8008284:	60f8      	str	r0, [r7, #12]
 8008286:	60b9      	str	r1, [r7, #8]
 8008288:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800828a:	68b8      	ldr	r0, [r7, #8]
 800828c:	f00f f92c 	bl	80174e8 <_ZdlPv>
      }
 8008290:	bf00      	nop
 8008292:	3710      	adds	r7, #16
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}

08008298 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8008298:	b480      	push	{r7}
 800829a:	b083      	sub	sp, #12
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	4618      	mov	r0, r3
 80082a4:	370c      	adds	r7, #12
 80082a6:	46bd      	mov	sp, r7
 80082a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ac:	4770      	bx	lr

080082ae <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80082ae:	b480      	push	{r7}
 80082b0:	b083      	sub	sp, #12
 80082b2:	af00      	add	r7, sp, #0
 80082b4:	6078      	str	r0, [r7, #4]
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	4618      	mov	r0, r3
 80082ba:	370c      	adds	r7, #12
 80082bc:	46bd      	mov	sp, r7
 80082be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c2:	4770      	bx	lr

080082c4 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>:
      allocate(allocator_type& __a, size_type __n)
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b082      	sub	sp, #8
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
 80082cc:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80082ce:	2200      	movs	r2, #0
 80082d0:	6839      	ldr	r1, [r7, #0]
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f000 f875 	bl	80083c2 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>
 80082d8:	4603      	mov	r3, r0
 80082da:	4618      	mov	r0, r3
 80082dc:	3708      	adds	r7, #8
 80082de:	46bd      	mov	sp, r7
 80082e0:	bd80      	pop	{r7, pc}

080082e2 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 80082e2:	b580      	push	{r7, lr}
 80082e4:	b084      	sub	sp, #16
 80082e6:	af00      	add	r7, sp, #0
 80082e8:	60f8      	str	r0, [r7, #12]
 80082ea:	60b9      	str	r1, [r7, #8]
 80082ec:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 80082ee:	68b8      	ldr	r0, [r7, #8]
 80082f0:	f000 f888 	bl	8008404 <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>
 80082f4:	4602      	mov	r2, r0
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	601a      	str	r2, [r3, #0]
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	687a      	ldr	r2, [r7, #4]
 80082fe:	605a      	str	r2, [r3, #4]
      { }
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	4618      	mov	r0, r3
 8008304:	3710      	adds	r7, #16
 8008306:	46bd      	mov	sp, r7
 8008308:	bd80      	pop	{r7, pc}

0800830a <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800830a:	b580      	push	{r7, lr}
 800830c:	b084      	sub	sp, #16
 800830e:	af00      	add	r7, sp, #0
 8008310:	60f8      	str	r0, [r7, #12]
 8008312:	60b9      	str	r1, [r7, #8]
 8008314:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8008316:	687a      	ldr	r2, [r7, #4]
 8008318:	68b9      	ldr	r1, [r7, #8]
 800831a:	68f8      	ldr	r0, [r7, #12]
 800831c:	f000 f87d 	bl	800841a <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>
 8008320:	bf00      	nop
 8008322:	3710      	adds	r7, #16
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}

08008328 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 8008328:	b480      	push	{r7}
 800832a:	b083      	sub	sp, #12
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	4618      	mov	r0, r3
 8008334:	370c      	adds	r7, #12
 8008336:	46bd      	mov	sp, r7
 8008338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833c:	4770      	bx	lr

0800833e <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 800833e:	b590      	push	{r4, r7, lr}
 8008340:	b085      	sub	sp, #20
 8008342:	af00      	add	r7, sp, #0
 8008344:	60f8      	str	r0, [r7, #12]
 8008346:	60b9      	str	r1, [r7, #8]
 8008348:	607a      	str	r2, [r7, #4]
 800834a:	603b      	str	r3, [r7, #0]
	: _M_ptr(__p), _Del_base(std::move(__d)), _Alloc_base(__a)
 800834c:	68fc      	ldr	r4, [r7, #12]
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f7ff fd03 	bl	8007d5a <_ZSt4moveIRNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 8008354:	4603      	mov	r3, r0
 8008356:	4619      	mov	r1, r3
 8008358:	4620      	mov	r0, r4
 800835a:	f000 f86b 	bl	8008434 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	3301      	adds	r3, #1
 8008362:	6839      	ldr	r1, [r7, #0]
 8008364:	4618      	mov	r0, r3
 8008366:	f000 f878 	bl	800845a <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama7TextureEELb1EEC1ERKS2_>
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	68ba      	ldr	r2, [r7, #8]
 800836e:	605a      	str	r2, [r3, #4]
	{ }
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	4618      	mov	r0, r3
 8008374:	3714      	adds	r7, #20
 8008376:	46bd      	mov	sp, r7
 8008378:	bd90      	pop	{r4, r7, pc}

0800837a <_ZNSt16allocator_traitsISaIN4tama7TextureEEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 800837a:	b580      	push	{r7, lr}
 800837c:	b082      	sub	sp, #8
 800837e:	af00      	add	r7, sp, #0
 8008380:	6078      	str	r0, [r7, #4]
 8008382:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 8008384:	6839      	ldr	r1, [r7, #0]
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	f000 f875 	bl	8008476 <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEE7destroyIS2_EEvPT_>
 800838c:	bf00      	nop
 800838e:	3708      	adds	r7, #8
 8008390:	46bd      	mov	sp, r7
 8008392:	bd80      	pop	{r7, pc}

08008394 <_ZNSt10_Head_baseILj0EPN4tama18Stm32TextureLoaderELb0EE7_M_headERKS3_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8008394:	b480      	push	{r7}
 8008396:	b083      	sub	sp, #12
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	4618      	mov	r0, r3
 80083a0:	370c      	adds	r7, #12
 80083a2:	46bd      	mov	sp, r7
 80083a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a8:	4770      	bx	lr

080083aa <_ZNK9__gnu_cxx13new_allocatorIN4tama7TextureEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80083aa:	b480      	push	{r7}
 80083ac:	b083      	sub	sp, #12
 80083ae:	af00      	add	r7, sp, #0
 80083b0:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 80083b2:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 80083b6:	4618      	mov	r0, r3
 80083b8:	370c      	adds	r7, #12
 80083ba:	46bd      	mov	sp, r7
 80083bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c0:	4770      	bx	lr

080083c2 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80083c2:	b580      	push	{r7, lr}
 80083c4:	b084      	sub	sp, #16
 80083c6:	af00      	add	r7, sp, #0
 80083c8:	60f8      	str	r0, [r7, #12]
 80083ca:	60b9      	str	r1, [r7, #8]
 80083cc:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 80083ce:	68f8      	ldr	r0, [r7, #12]
 80083d0:	f000 f860 	bl	8008494 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>
 80083d4:	4602      	mov	r2, r0
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	4293      	cmp	r3, r2
 80083da:	bf8c      	ite	hi
 80083dc:	2301      	movhi	r3, #1
 80083de:	2300      	movls	r3, #0
 80083e0:	b2db      	uxtb	r3, r3
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d001      	beq.n	80083ea <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80083e6:	f00f f894 	bl	8017512 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80083ea:	68ba      	ldr	r2, [r7, #8]
 80083ec:	4613      	mov	r3, r2
 80083ee:	009b      	lsls	r3, r3, #2
 80083f0:	4413      	add	r3, r2
 80083f2:	009b      	lsls	r3, r3, #2
 80083f4:	4618      	mov	r0, r3
 80083f6:	f00f f85e 	bl	80174b6 <_Znwj>
 80083fa:	4603      	mov	r3, r0
      }
 80083fc:	4618      	mov	r0, r3
 80083fe:	3710      	adds	r7, #16
 8008400:	46bd      	mov	sp, r7
 8008402:	bd80      	pop	{r7, pc}

08008404 <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8008404:	b480      	push	{r7}
 8008406:	b083      	sub	sp, #12
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	4618      	mov	r0, r3
 8008410:	370c      	adds	r7, #12
 8008412:	46bd      	mov	sp, r7
 8008414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008418:	4770      	bx	lr

0800841a <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>:
      deallocate(pointer __p, size_type)
 800841a:	b580      	push	{r7, lr}
 800841c:	b084      	sub	sp, #16
 800841e:	af00      	add	r7, sp, #0
 8008420:	60f8      	str	r0, [r7, #12]
 8008422:	60b9      	str	r1, [r7, #8]
 8008424:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8008426:	68b8      	ldr	r0, [r7, #8]
 8008428:	f00f f85e 	bl	80174e8 <_ZdlPv>
      }
 800842c:	bf00      	nop
 800842e:	3710      	adds	r7, #16
 8008430:	46bd      	mov	sp, r7
 8008432:	bd80      	pop	{r7, pc}

08008434 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>:
      explicit _Sp_ebo_helper(_Tp&& __tp) : _M_tp(std::move(__tp)) { }
 8008434:	b590      	push	{r4, r7, lr}
 8008436:	b083      	sub	sp, #12
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
 800843c:	6039      	str	r1, [r7, #0]
 800843e:	687c      	ldr	r4, [r7, #4]
 8008440:	6838      	ldr	r0, [r7, #0]
 8008442:	f7ff fc8a 	bl	8007d5a <_ZSt4moveIRNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 8008446:	4603      	mov	r3, r0
 8008448:	4619      	mov	r1, r3
 800844a:	4620      	mov	r0, r4
 800844c:	f7ff fc90 	bl	8007d70 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	4618      	mov	r0, r3
 8008454:	370c      	adds	r7, #12
 8008456:	46bd      	mov	sp, r7
 8008458:	bd90      	pop	{r4, r7, pc}

0800845a <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama7TextureEELb1EEC1ERKS2_>:
      explicit _Sp_ebo_helper(const _Tp& __tp) : _Tp(__tp) { }
 800845a:	b580      	push	{r7, lr}
 800845c:	b082      	sub	sp, #8
 800845e:	af00      	add	r7, sp, #0
 8008460:	6078      	str	r0, [r7, #4]
 8008462:	6039      	str	r1, [r7, #0]
 8008464:	6839      	ldr	r1, [r7, #0]
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f7ff fc0c 	bl	8007c84 <_ZNSaIN4tama7TextureEEC1ERKS1_>
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	4618      	mov	r0, r3
 8008470:	3708      	adds	r7, #8
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}

08008476 <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEE7destroyIS2_EEvPT_>:
	destroy(_Up* __p) { __p->~_Up(); }
 8008476:	b580      	push	{r7, lr}
 8008478:	b082      	sub	sp, #8
 800847a:	af00      	add	r7, sp, #0
 800847c:	6078      	str	r0, [r7, #4]
 800847e:	6039      	str	r1, [r7, #0]
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	6838      	ldr	r0, [r7, #0]
 8008488:	4798      	blx	r3
 800848a:	bf00      	nop
 800848c:	3708      	adds	r7, #8
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}
	...

08008494 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8008494:	b480      	push	{r7}
 8008496:	b083      	sub	sp, #12
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 800849c:	4b03      	ldr	r3, [pc, #12]	; (80084ac <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv+0x18>)
 800849e:	4618      	mov	r0, r3
 80084a0:	370c      	adds	r7, #12
 80084a2:	46bd      	mov	sp, r7
 80084a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a8:	4770      	bx	lr
 80084aa:	bf00      	nop
 80084ac:	0ccccccc 	.word	0x0ccccccc

080084b0 <_Z41__static_initialization_and_destruction_0ii>:
 80084b0:	b480      	push	{r7}
 80084b2:	b083      	sub	sp, #12
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
 80084b8:	6039      	str	r1, [r7, #0]
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2b01      	cmp	r3, #1
 80084be:	f040 80de 	bne.w	800867e <_Z41__static_initialization_and_destruction_0ii+0x1ce>
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80084c8:	4293      	cmp	r3, r2
 80084ca:	f040 80d8 	bne.w	800867e <_Z41__static_initialization_and_destruction_0ii+0x1ce>
                const short X_data[] = {0x00,0x05,0x05,0x05,0x05,0x05,0x00,0x05,0x00,0x05,0x05,0x05,0x00,0x05,0x05,0x05,0x00,0x05,0x00,0x05,0x05,0x05,0x05,0x05,0x00,0x05,0x05,0x05,0x05,0x05,0x00,0x05,0x00,0x05,0x05,0x05,0x00,0x05,0x05,0x05,0x00,0x05,0x00,0x05,0x05,0x05,0x05,0x05,0x00};
                const short Y_data[] = {0x00,0x05,0x05,0x05,0x05,0x05,0x00,0x05,0x00,0x05,0x05,0x05,0x00,0x05,0x05,0x05,0x00,0x05,0x00,0x05,0x05,0x05,0x05,0x05,0x00,0x05,0x05,0x05,0x05,0x05,0x05,0x00,0x05,0x05,0x05,0x05,0x05,0x05,0x00,0x05,0x05,0x05,0x05,0x05,0x05,0x00,0x05,0x05,0x05};
                const short Z_data[] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x05,0x05,0x05,0x05,0x00,0x05,0x05,0x05,0x05,0x05,0x00,0x05,0x05,0x05,0x05,0x05,0x00,0x05,0x05,0x05,0x05,0x05,0x00,0x05,0x05,0x05,0x05,0x05,0x00,0x05,0x05,0x05,0x05,0x05,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
                const short SPC_data[] = {0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05};

                const TextureAsset J {const_cast<short *>(J_data), width, height};
 80084ce:	4b6f      	ldr	r3, [pc, #444]	; (800868c <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	4a6f      	ldr	r2, [pc, #444]	; (8008690 <_Z41__static_initialization_and_destruction_0ii+0x1e0>)
 80084d4:	6053      	str	r3, [r2, #4]
 80084d6:	4b6f      	ldr	r3, [pc, #444]	; (8008694 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	4a6d      	ldr	r2, [pc, #436]	; (8008690 <_Z41__static_initialization_and_destruction_0ii+0x1e0>)
 80084dc:	6093      	str	r3, [r2, #8]
                const TextureAsset U {const_cast<short *>(U_data), width, height};
 80084de:	4b6b      	ldr	r3, [pc, #428]	; (800868c <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	4a6d      	ldr	r2, [pc, #436]	; (8008698 <_Z41__static_initialization_and_destruction_0ii+0x1e8>)
 80084e4:	6053      	str	r3, [r2, #4]
 80084e6:	4b6b      	ldr	r3, [pc, #428]	; (8008694 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	4a6b      	ldr	r2, [pc, #428]	; (8008698 <_Z41__static_initialization_and_destruction_0ii+0x1e8>)
 80084ec:	6093      	str	r3, [r2, #8]
                const TextureAsset D {const_cast<short *>(D_data), width, height};
 80084ee:	4b67      	ldr	r3, [pc, #412]	; (800868c <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	4a6a      	ldr	r2, [pc, #424]	; (800869c <_Z41__static_initialization_and_destruction_0ii+0x1ec>)
 80084f4:	6053      	str	r3, [r2, #4]
 80084f6:	4b67      	ldr	r3, [pc, #412]	; (8008694 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	4a68      	ldr	r2, [pc, #416]	; (800869c <_Z41__static_initialization_and_destruction_0ii+0x1ec>)
 80084fc:	6093      	str	r3, [r2, #8]
                const TextureAsset S {const_cast<short *>(S_data), width, height};
 80084fe:	4b63      	ldr	r3, [pc, #396]	; (800868c <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	4a67      	ldr	r2, [pc, #412]	; (80086a0 <_Z41__static_initialization_and_destruction_0ii+0x1f0>)
 8008504:	6053      	str	r3, [r2, #4]
 8008506:	4b63      	ldr	r3, [pc, #396]	; (8008694 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	4a65      	ldr	r2, [pc, #404]	; (80086a0 <_Z41__static_initialization_and_destruction_0ii+0x1f0>)
 800850c:	6093      	str	r3, [r2, #8]
                const TextureAsset T {const_cast<short *>(T_data), width, height};
 800850e:	4b5f      	ldr	r3, [pc, #380]	; (800868c <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	4a64      	ldr	r2, [pc, #400]	; (80086a4 <_Z41__static_initialization_and_destruction_0ii+0x1f4>)
 8008514:	6053      	str	r3, [r2, #4]
 8008516:	4b5f      	ldr	r3, [pc, #380]	; (8008694 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	4a62      	ldr	r2, [pc, #392]	; (80086a4 <_Z41__static_initialization_and_destruction_0ii+0x1f4>)
 800851c:	6093      	str	r3, [r2, #8]
                const TextureAsset I {const_cast<short *>(I_data), width, height};
 800851e:	4b5b      	ldr	r3, [pc, #364]	; (800868c <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	4a61      	ldr	r2, [pc, #388]	; (80086a8 <_Z41__static_initialization_and_destruction_0ii+0x1f8>)
 8008524:	6053      	str	r3, [r2, #4]
 8008526:	4b5b      	ldr	r3, [pc, #364]	; (8008694 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	4a5f      	ldr	r2, [pc, #380]	; (80086a8 <_Z41__static_initialization_and_destruction_0ii+0x1f8>)
 800852c:	6093      	str	r3, [r2, #8]
                const TextureAsset A {const_cast<short *>(A_data), width, height};
 800852e:	4b57      	ldr	r3, [pc, #348]	; (800868c <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	4a5e      	ldr	r2, [pc, #376]	; (80086ac <_Z41__static_initialization_and_destruction_0ii+0x1fc>)
 8008534:	6053      	str	r3, [r2, #4]
 8008536:	4b57      	ldr	r3, [pc, #348]	; (8008694 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	4a5c      	ldr	r2, [pc, #368]	; (80086ac <_Z41__static_initialization_and_destruction_0ii+0x1fc>)
 800853c:	6093      	str	r3, [r2, #8]
                const TextureAsset B {const_cast<short *>(B_data), width, height};
 800853e:	4b53      	ldr	r3, [pc, #332]	; (800868c <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	4a5b      	ldr	r2, [pc, #364]	; (80086b0 <_Z41__static_initialization_and_destruction_0ii+0x200>)
 8008544:	6053      	str	r3, [r2, #4]
 8008546:	4b53      	ldr	r3, [pc, #332]	; (8008694 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	4a59      	ldr	r2, [pc, #356]	; (80086b0 <_Z41__static_initialization_and_destruction_0ii+0x200>)
 800854c:	6093      	str	r3, [r2, #8]
                const TextureAsset C {const_cast<short *>(C_data), width, height};
 800854e:	4b4f      	ldr	r3, [pc, #316]	; (800868c <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	4a58      	ldr	r2, [pc, #352]	; (80086b4 <_Z41__static_initialization_and_destruction_0ii+0x204>)
 8008554:	6053      	str	r3, [r2, #4]
 8008556:	4b4f      	ldr	r3, [pc, #316]	; (8008694 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	4a56      	ldr	r2, [pc, #344]	; (80086b4 <_Z41__static_initialization_and_destruction_0ii+0x204>)
 800855c:	6093      	str	r3, [r2, #8]
                const TextureAsset E {const_cast<short *>(E_data), width, height};
 800855e:	4b4b      	ldr	r3, [pc, #300]	; (800868c <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	4a55      	ldr	r2, [pc, #340]	; (80086b8 <_Z41__static_initialization_and_destruction_0ii+0x208>)
 8008564:	6053      	str	r3, [r2, #4]
 8008566:	4b4b      	ldr	r3, [pc, #300]	; (8008694 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	4a53      	ldr	r2, [pc, #332]	; (80086b8 <_Z41__static_initialization_and_destruction_0ii+0x208>)
 800856c:	6093      	str	r3, [r2, #8]
                const TextureAsset F {const_cast<short *>(F_data), width, height};
 800856e:	4b47      	ldr	r3, [pc, #284]	; (800868c <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	4a52      	ldr	r2, [pc, #328]	; (80086bc <_Z41__static_initialization_and_destruction_0ii+0x20c>)
 8008574:	6053      	str	r3, [r2, #4]
 8008576:	4b47      	ldr	r3, [pc, #284]	; (8008694 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	4a50      	ldr	r2, [pc, #320]	; (80086bc <_Z41__static_initialization_and_destruction_0ii+0x20c>)
 800857c:	6093      	str	r3, [r2, #8]
                const TextureAsset G {const_cast<short *>(G_data), width, height};
 800857e:	4b43      	ldr	r3, [pc, #268]	; (800868c <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	4a4f      	ldr	r2, [pc, #316]	; (80086c0 <_Z41__static_initialization_and_destruction_0ii+0x210>)
 8008584:	6053      	str	r3, [r2, #4]
 8008586:	4b43      	ldr	r3, [pc, #268]	; (8008694 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	4a4d      	ldr	r2, [pc, #308]	; (80086c0 <_Z41__static_initialization_and_destruction_0ii+0x210>)
 800858c:	6093      	str	r3, [r2, #8]
                const TextureAsset H {const_cast<short *>(H_data), width, height};
 800858e:	4b3f      	ldr	r3, [pc, #252]	; (800868c <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	4a4c      	ldr	r2, [pc, #304]	; (80086c4 <_Z41__static_initialization_and_destruction_0ii+0x214>)
 8008594:	6053      	str	r3, [r2, #4]
 8008596:	4b3f      	ldr	r3, [pc, #252]	; (8008694 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	4a4a      	ldr	r2, [pc, #296]	; (80086c4 <_Z41__static_initialization_and_destruction_0ii+0x214>)
 800859c:	6093      	str	r3, [r2, #8]
                const TextureAsset K {const_cast<short *>(K_data), width, height};
 800859e:	4b3b      	ldr	r3, [pc, #236]	; (800868c <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	4a49      	ldr	r2, [pc, #292]	; (80086c8 <_Z41__static_initialization_and_destruction_0ii+0x218>)
 80085a4:	6053      	str	r3, [r2, #4]
 80085a6:	4b3b      	ldr	r3, [pc, #236]	; (8008694 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	4a47      	ldr	r2, [pc, #284]	; (80086c8 <_Z41__static_initialization_and_destruction_0ii+0x218>)
 80085ac:	6093      	str	r3, [r2, #8]
                const TextureAsset L {const_cast<short *>(L_data), width, height};
 80085ae:	4b37      	ldr	r3, [pc, #220]	; (800868c <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	4a46      	ldr	r2, [pc, #280]	; (80086cc <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 80085b4:	6053      	str	r3, [r2, #4]
 80085b6:	4b37      	ldr	r3, [pc, #220]	; (8008694 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	4a44      	ldr	r2, [pc, #272]	; (80086cc <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 80085bc:	6093      	str	r3, [r2, #8]
                const TextureAsset M {const_cast<short *>(M_data), width, height};
 80085be:	4b33      	ldr	r3, [pc, #204]	; (800868c <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	4a43      	ldr	r2, [pc, #268]	; (80086d0 <_Z41__static_initialization_and_destruction_0ii+0x220>)
 80085c4:	6053      	str	r3, [r2, #4]
 80085c6:	4b33      	ldr	r3, [pc, #204]	; (8008694 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	4a41      	ldr	r2, [pc, #260]	; (80086d0 <_Z41__static_initialization_and_destruction_0ii+0x220>)
 80085cc:	6093      	str	r3, [r2, #8]
                const TextureAsset N {const_cast<short *>(N_data), width, height};
 80085ce:	4b2f      	ldr	r3, [pc, #188]	; (800868c <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	4a40      	ldr	r2, [pc, #256]	; (80086d4 <_Z41__static_initialization_and_destruction_0ii+0x224>)
 80085d4:	6053      	str	r3, [r2, #4]
 80085d6:	4b2f      	ldr	r3, [pc, #188]	; (8008694 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	4a3e      	ldr	r2, [pc, #248]	; (80086d4 <_Z41__static_initialization_and_destruction_0ii+0x224>)
 80085dc:	6093      	str	r3, [r2, #8]
                const TextureAsset O {const_cast<short *>(O_data), width, height};
 80085de:	4b2b      	ldr	r3, [pc, #172]	; (800868c <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	4a3d      	ldr	r2, [pc, #244]	; (80086d8 <_Z41__static_initialization_and_destruction_0ii+0x228>)
 80085e4:	6053      	str	r3, [r2, #4]
 80085e6:	4b2b      	ldr	r3, [pc, #172]	; (8008694 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	4a3b      	ldr	r2, [pc, #236]	; (80086d8 <_Z41__static_initialization_and_destruction_0ii+0x228>)
 80085ec:	6093      	str	r3, [r2, #8]
                const TextureAsset P {const_cast<short *>(P_data), width, height};
 80085ee:	4b27      	ldr	r3, [pc, #156]	; (800868c <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	4a3a      	ldr	r2, [pc, #232]	; (80086dc <_Z41__static_initialization_and_destruction_0ii+0x22c>)
 80085f4:	6053      	str	r3, [r2, #4]
 80085f6:	4b27      	ldr	r3, [pc, #156]	; (8008694 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	4a38      	ldr	r2, [pc, #224]	; (80086dc <_Z41__static_initialization_and_destruction_0ii+0x22c>)
 80085fc:	6093      	str	r3, [r2, #8]
                const TextureAsset Q {const_cast<short *>(Q_data), width, height};
 80085fe:	4b23      	ldr	r3, [pc, #140]	; (800868c <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	4a37      	ldr	r2, [pc, #220]	; (80086e0 <_Z41__static_initialization_and_destruction_0ii+0x230>)
 8008604:	6053      	str	r3, [r2, #4]
 8008606:	4b23      	ldr	r3, [pc, #140]	; (8008694 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	4a35      	ldr	r2, [pc, #212]	; (80086e0 <_Z41__static_initialization_and_destruction_0ii+0x230>)
 800860c:	6093      	str	r3, [r2, #8]
                const TextureAsset R {const_cast<short *>(R_data), width, height};
 800860e:	4b1f      	ldr	r3, [pc, #124]	; (800868c <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	4a34      	ldr	r2, [pc, #208]	; (80086e4 <_Z41__static_initialization_and_destruction_0ii+0x234>)
 8008614:	6053      	str	r3, [r2, #4]
 8008616:	4b1f      	ldr	r3, [pc, #124]	; (8008694 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	4a32      	ldr	r2, [pc, #200]	; (80086e4 <_Z41__static_initialization_and_destruction_0ii+0x234>)
 800861c:	6093      	str	r3, [r2, #8]
                const TextureAsset W {const_cast<short *>(W_data), width, height};
 800861e:	4b1b      	ldr	r3, [pc, #108]	; (800868c <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	4a31      	ldr	r2, [pc, #196]	; (80086e8 <_Z41__static_initialization_and_destruction_0ii+0x238>)
 8008624:	6053      	str	r3, [r2, #4]
 8008626:	4b1b      	ldr	r3, [pc, #108]	; (8008694 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	4a2f      	ldr	r2, [pc, #188]	; (80086e8 <_Z41__static_initialization_and_destruction_0ii+0x238>)
 800862c:	6093      	str	r3, [r2, #8]
                const TextureAsset V {const_cast<short *>(V_data), width, height};
 800862e:	4b17      	ldr	r3, [pc, #92]	; (800868c <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	4a2e      	ldr	r2, [pc, #184]	; (80086ec <_Z41__static_initialization_and_destruction_0ii+0x23c>)
 8008634:	6053      	str	r3, [r2, #4]
 8008636:	4b17      	ldr	r3, [pc, #92]	; (8008694 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	4a2c      	ldr	r2, [pc, #176]	; (80086ec <_Z41__static_initialization_and_destruction_0ii+0x23c>)
 800863c:	6093      	str	r3, [r2, #8]
                const TextureAsset X {const_cast<short *>(X_data), width, height};
 800863e:	4b13      	ldr	r3, [pc, #76]	; (800868c <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	4a2b      	ldr	r2, [pc, #172]	; (80086f0 <_Z41__static_initialization_and_destruction_0ii+0x240>)
 8008644:	6053      	str	r3, [r2, #4]
 8008646:	4b13      	ldr	r3, [pc, #76]	; (8008694 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	4a29      	ldr	r2, [pc, #164]	; (80086f0 <_Z41__static_initialization_and_destruction_0ii+0x240>)
 800864c:	6093      	str	r3, [r2, #8]
                const TextureAsset Y {const_cast<short *>(Y_data), width, height};
 800864e:	4b0f      	ldr	r3, [pc, #60]	; (800868c <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	4a28      	ldr	r2, [pc, #160]	; (80086f4 <_Z41__static_initialization_and_destruction_0ii+0x244>)
 8008654:	6053      	str	r3, [r2, #4]
 8008656:	4b0f      	ldr	r3, [pc, #60]	; (8008694 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	4a26      	ldr	r2, [pc, #152]	; (80086f4 <_Z41__static_initialization_and_destruction_0ii+0x244>)
 800865c:	6093      	str	r3, [r2, #8]
                const TextureAsset Z {const_cast<short *>(Z_data), width, height};
 800865e:	4b0b      	ldr	r3, [pc, #44]	; (800868c <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	4a25      	ldr	r2, [pc, #148]	; (80086f8 <_Z41__static_initialization_and_destruction_0ii+0x248>)
 8008664:	6053      	str	r3, [r2, #4]
 8008666:	4b0b      	ldr	r3, [pc, #44]	; (8008694 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	4a23      	ldr	r2, [pc, #140]	; (80086f8 <_Z41__static_initialization_and_destruction_0ii+0x248>)
 800866c:	6093      	str	r3, [r2, #8]
                const TextureAsset SPC {const_cast<short *>(SPC_data), width, height};
 800866e:	4b07      	ldr	r3, [pc, #28]	; (800868c <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	4a22      	ldr	r2, [pc, #136]	; (80086fc <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 8008674:	6053      	str	r3, [r2, #4]
 8008676:	4b07      	ldr	r3, [pc, #28]	; (8008694 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	4a20      	ldr	r2, [pc, #128]	; (80086fc <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 800867c:	6093      	str	r3, [r2, #8]
 800867e:	bf00      	nop
 8008680:	370c      	adds	r7, #12
 8008682:	46bd      	mov	sp, r7
 8008684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008688:	4770      	bx	lr
 800868a:	bf00      	nop
 800868c:	2000009c 	.word	0x2000009c
 8008690:	200000a4 	.word	0x200000a4
 8008694:	200000a0 	.word	0x200000a0
 8008698:	200000b0 	.word	0x200000b0
 800869c:	200000bc 	.word	0x200000bc
 80086a0:	200000c8 	.word	0x200000c8
 80086a4:	200000d4 	.word	0x200000d4
 80086a8:	200000e0 	.word	0x200000e0
 80086ac:	200000ec 	.word	0x200000ec
 80086b0:	200000f8 	.word	0x200000f8
 80086b4:	20000104 	.word	0x20000104
 80086b8:	20000110 	.word	0x20000110
 80086bc:	2000011c 	.word	0x2000011c
 80086c0:	20000128 	.word	0x20000128
 80086c4:	20000134 	.word	0x20000134
 80086c8:	20000140 	.word	0x20000140
 80086cc:	2000014c 	.word	0x2000014c
 80086d0:	20000158 	.word	0x20000158
 80086d4:	20000164 	.word	0x20000164
 80086d8:	20000170 	.word	0x20000170
 80086dc:	2000017c 	.word	0x2000017c
 80086e0:	20000188 	.word	0x20000188
 80086e4:	20000194 	.word	0x20000194
 80086e8:	200001a0 	.word	0x200001a0
 80086ec:	200001ac 	.word	0x200001ac
 80086f0:	200001b8 	.word	0x200001b8
 80086f4:	200001c4 	.word	0x200001c4
 80086f8:	200001d0 	.word	0x200001d0
 80086fc:	200001dc 	.word	0x200001dc

08008700 <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:
      ~_Sp_counted_deleter() noexcept { }
 8008700:	b580      	push	{r7, lr}
 8008702:	b082      	sub	sp, #8
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
 8008708:	4a08      	ldr	r2, [pc, #32]	; (800872c <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev+0x2c>)
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	601a      	str	r2, [r3, #0]
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	330c      	adds	r3, #12
 8008712:	4618      	mov	r0, r3
 8008714:	f7ff fcd3 	bl	80080be <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	4618      	mov	r0, r3
 800871c:	f7f9 fbde 	bl	8001edc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	4618      	mov	r0, r3
 8008724:	3708      	adds	r7, #8
 8008726:	46bd      	mov	sp, r7
 8008728:	bd80      	pop	{r7, pc}
 800872a:	bf00      	nop
 800872c:	0801afa4 	.word	0x0801afa4

08008730 <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
 8008730:	b580      	push	{r7, lr}
 8008732:	b082      	sub	sp, #8
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
 8008738:	6878      	ldr	r0, [r7, #4]
 800873a:	f7ff ffe1 	bl	8008700 <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
 800873e:	2114      	movs	r1, #20
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	f00e feb6 	bl	80174b2 <_ZdlPvj>
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	4618      	mov	r0, r3
 800874a:	3708      	adds	r7, #8
 800874c:	46bd      	mov	sp, r7
 800874e:	bd80      	pop	{r7, pc}

08008750 <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      _M_dispose() noexcept
 8008750:	b580      	push	{r7, lr}
 8008752:	b082      	sub	sp, #8
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
      { _M_impl._M_del()(_M_impl._M_ptr); }
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	330c      	adds	r3, #12
 800875c:	4618      	mov	r0, r3
 800875e:	f000 f840 	bl	80087e2 <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>
 8008762:	4602      	mov	r2, r0
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	691b      	ldr	r3, [r3, #16]
 8008768:	4619      	mov	r1, r3
 800876a:	4610      	mov	r0, r2
 800876c:	f7ff fcf7 	bl	800815e <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>
 8008770:	bf00      	nop
 8008772:	3708      	adds	r7, #8
 8008774:	46bd      	mov	sp, r7
 8008776:	bd80      	pop	{r7, pc}

08008778 <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8008778:	b580      	push	{r7, lr}
 800877a:	b086      	sub	sp, #24
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	330c      	adds	r3, #12
 8008784:	4618      	mov	r0, r3
 8008786:	f000 f839 	bl	80087fc <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>
 800878a:	4602      	mov	r2, r0
 800878c:	f107 0314 	add.w	r3, r7, #20
 8008790:	4611      	mov	r1, r2
 8008792:	4618      	mov	r0, r3
 8008794:	f7ff fc2b 	bl	8007fee <_ZNSaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 8008798:	f107 0114 	add.w	r1, r7, #20
 800879c:	f107 030c 	add.w	r3, r7, #12
 80087a0:	687a      	ldr	r2, [r7, #4]
 80087a2:	4618      	mov	r0, r3
 80087a4:	f7ff fd9d 	bl	80082e2 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
	this->~_Sp_counted_deleter();
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f7ff ffa9 	bl	8008700 <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 80087ae:	f107 030c 	add.w	r3, r7, #12
 80087b2:	4618      	mov	r0, r3
 80087b4:	f7ff fc47 	bl	8008046 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	__allocator_type __a(_M_impl._M_alloc());
 80087b8:	f107 0314 	add.w	r3, r7, #20
 80087bc:	4618      	mov	r0, r3
 80087be:	f7ff fc23 	bl	8008008 <_ZNSaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
      }
 80087c2:	bf00      	nop
 80087c4:	3718      	adds	r7, #24
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}

080087ca <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept
 80087ca:	b480      	push	{r7}
 80087cc:	b083      	sub	sp, #12
 80087ce:	af00      	add	r7, sp, #0
 80087d0:	6078      	str	r0, [r7, #4]
 80087d2:	6039      	str	r1, [r7, #0]
        return nullptr;
 80087d4:	2300      	movs	r3, #0
      }
 80087d6:	4618      	mov	r0, r3
 80087d8:	370c      	adds	r7, #12
 80087da:	46bd      	mov	sp, r7
 80087dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e0:	4770      	bx	lr

080087e2 <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>:
	_Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }
 80087e2:	b580      	push	{r7, lr}
 80087e4:	b082      	sub	sp, #8
 80087e6:	af00      	add	r7, sp, #0
 80087e8:	6078      	str	r0, [r7, #4]
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	4618      	mov	r0, r3
 80087ee:	f000 f813 	bl	8008818 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>
 80087f2:	4603      	mov	r3, r0
 80087f4:	4618      	mov	r0, r3
 80087f6:	3708      	adds	r7, #8
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bd80      	pop	{r7, pc}

080087fc <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b082      	sub	sp, #8
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	3301      	adds	r3, #1
 8008808:	4618      	mov	r0, r3
 800880a:	f000 f810 	bl	800882e <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama7TextureEELb1EE6_S_getERS3_>
 800880e:	4603      	mov	r3, r0
 8008810:	4618      	mov	r0, r3
 8008812:	3708      	adds	r7, #8
 8008814:	46bd      	mov	sp, r7
 8008816:	bd80      	pop	{r7, pc}

08008818 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>:
      _S_get(_Sp_ebo_helper& __eboh)
 8008818:	b480      	push	{r7}
 800881a:	b083      	sub	sp, #12
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
      { return __eboh._M_tp; }
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	4618      	mov	r0, r3
 8008824:	370c      	adds	r7, #12
 8008826:	46bd      	mov	sp, r7
 8008828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882c:	4770      	bx	lr

0800882e <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama7TextureEELb1EE6_S_getERS3_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 800882e:	b480      	push	{r7}
 8008830:	b083      	sub	sp, #12
 8008832:	af00      	add	r7, sp, #0
 8008834:	6078      	str	r0, [r7, #4]
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	4618      	mov	r0, r3
 800883a:	370c      	adds	r7, #12
 800883c:	46bd      	mov	sp, r7
 800883e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008842:	4770      	bx	lr

08008844 <_GLOBAL__sub_I__ZN4tama5asset4font8standard5widthE>:
 8008844:	b580      	push	{r7, lr}
 8008846:	af00      	add	r7, sp, #0
 8008848:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800884c:	2001      	movs	r0, #1
 800884e:	f7ff fe2f 	bl	80084b0 <_Z41__static_initialization_and_destruction_0ii>
 8008852:	bd80      	pop	{r7, pc}

08008854 <_ZN4tama14ChangeObserverC1Ev>:
#ifndef VPET_CHANGEOBSERVER_H
#define VPET_CHANGEOBSERVER_H

namespace tama
{
    class ChangeObserver
 8008854:	b480      	push	{r7}
 8008856:	b083      	sub	sp, #12
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
 800885c:	4a04      	ldr	r2, [pc, #16]	; (8008870 <_ZN4tama14ChangeObserverC1Ev+0x1c>)
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	601a      	str	r2, [r3, #0]
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	4618      	mov	r0, r3
 8008866:	370c      	adds	r7, #12
 8008868:	46bd      	mov	sp, r7
 800886a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886e:	4770      	bx	lr
 8008870:	0801b014 	.word	0x0801b014

08008874 <_ZN4tama5SceneC1Ev>:
// Created by grzegorz on 3/28/21.
//

#include "Scene.h"

tama::Scene::Scene()
 8008874:	b590      	push	{r4, r7, lr}
 8008876:	b085      	sub	sp, #20
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	4618      	mov	r0, r3
 8008880:	f7ff ffe8 	bl	8008854 <_ZN4tama14ChangeObserverC1Ev>
 8008884:	4a15      	ldr	r2, [pc, #84]	; (80088dc <_ZN4tama5SceneC1Ev+0x68>)
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	601a      	str	r2, [r3, #0]
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	3304      	adds	r3, #4
 800888e:	4618      	mov	r0, r3
 8008890:	f7fd ff3a 	bl	8006708 <_ZNSt10shared_ptrIN4tama14ChangeObserverEEC1Ev>
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	330c      	adds	r3, #12
 8008898:	4618      	mov	r0, r3
 800889a:	f000 f8dc 	bl	8008a56 <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EEC1Ev>
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2254      	movs	r2, #84	; 0x54
 80088a2:	619a      	str	r2, [r3, #24]
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2230      	movs	r2, #48	; 0x30
 80088a8:	61da      	str	r2, [r3, #28]
{
    observer = nullptr;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	1d1c      	adds	r4, r3, #4
 80088ae:	f107 0308 	add.w	r3, r7, #8
 80088b2:	2100      	movs	r1, #0
 80088b4:	4618      	mov	r0, r3
 80088b6:	f7fd ff34 	bl	8006722 <_ZNSt10shared_ptrIN4tama14ChangeObserverEEC1EDn>
 80088ba:	f107 0308 	add.w	r3, r7, #8
 80088be:	4619      	mov	r1, r3
 80088c0:	4620      	mov	r0, r4
 80088c2:	f7fb ff4d 	bl	8004760 <_ZNSt10shared_ptrIN4tama14ChangeObserverEEaSEOS2_>
 80088c6:	f107 0308 	add.w	r3, r7, #8
 80088ca:	4618      	mov	r0, r3
 80088cc:	f7fa f8c3 	bl	8002a56 <_ZNSt10shared_ptrIN4tama14ChangeObserverEED1Ev>
}
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	4618      	mov	r0, r3
 80088d4:	3714      	adds	r7, #20
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd90      	pop	{r4, r7, pc}
 80088da:	bf00      	nop
 80088dc:	0801b008 	.word	0x0801b008

080088e0 <_ZN4tama5Scene11addDrawableESt10shared_ptrINS_8DrawableEE>:
{
    this->observer = observer;
}

void tama::Scene::addDrawable(std::shared_ptr<Drawable> drawable)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b082      	sub	sp, #8
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
 80088e8:	6039      	str	r1, [r7, #0]
    this->drawables.push_back(drawable);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	330c      	adds	r3, #12
 80088ee:	6839      	ldr	r1, [r7, #0]
 80088f0:	4618      	mov	r0, r3
 80088f2:	f000 f8bd 	bl	8008a70 <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE9push_backERKS3_>
    //drawable->setChangeObserver(std::make_shared<Scene>(*this));
}
 80088f6:	bf00      	nop
 80088f8:	3708      	adds	r7, #8
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bd80      	pop	{r7, pc}

080088fe <_ZNSt12__shared_ptrIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80088fe:	b580      	push	{r7, lr}
 8008900:	b082      	sub	sp, #8
 8008902:	af00      	add	r7, sp, #0
 8008904:	6078      	str	r0, [r7, #4]
 8008906:	6039      	str	r1, [r7, #0]
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	681a      	ldr	r2, [r3, #0]
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	601a      	str	r2, [r3, #0]
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	1d1a      	adds	r2, r3, #4
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	3304      	adds	r3, #4
 8008918:	4619      	mov	r1, r3
 800891a:	4610      	mov	r0, r2
 800891c:	f7f8 f87a 	bl	8000a14 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	4618      	mov	r0, r3
 8008924:	3708      	adds	r7, #8
 8008926:	46bd      	mov	sp, r7
 8008928:	bd80      	pop	{r7, pc}

0800892a <_ZNSt10shared_ptrIN4tama8DrawableEEC1ERKS2_>:
      shared_ptr(const shared_ptr&) noexcept = default;
 800892a:	b580      	push	{r7, lr}
 800892c:	b082      	sub	sp, #8
 800892e:	af00      	add	r7, sp, #0
 8008930:	6078      	str	r0, [r7, #4]
 8008932:	6039      	str	r1, [r7, #0]
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	683a      	ldr	r2, [r7, #0]
 8008938:	4611      	mov	r1, r2
 800893a:	4618      	mov	r0, r3
 800893c:	f7ff ffdf 	bl	80088fe <_ZNSt12__shared_ptrIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	4618      	mov	r0, r3
 8008944:	3708      	adds	r7, #8
 8008946:	46bd      	mov	sp, r7
 8008948:	bd80      	pop	{r7, pc}

0800894a <_ZN4tama5Scene12getSceneDataEv>:
{

}

std::shared_ptr<tama::Texture> tama::Scene::getSceneData()
{
 800894a:	b590      	push	{r4, r7, lr}
 800894c:	b08d      	sub	sp, #52	; 0x34
 800894e:	af00      	add	r7, sp, #0
 8008950:	6078      	str	r0, [r7, #4]
 8008952:	6039      	str	r1, [r7, #0]
    std::shared_ptr<tama::Texture> texture = std::make_shared<tama::Texture>(width, height);
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	f103 0118 	add.w	r1, r3, #24
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	f103 021c 	add.w	r2, r3, #28
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	4618      	mov	r0, r3
 8008964:	f000 f8b5 	bl	8008ad2 <_ZSt11make_sharedIN4tama7TextureEJRjS2_EESt10shared_ptrIT_EDpOT0_>

    for (auto drawable : drawables)
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	330c      	adds	r3, #12
 800896c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800896e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008970:	f000 f8d1 	bl	8008b16 <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE5beginEv>
 8008974:	4603      	mov	r3, r0
 8008976:	613b      	str	r3, [r7, #16]
 8008978:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800897a:	f000 f8dc 	bl	8008b36 <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE3endEv>
 800897e:	4603      	mov	r3, r0
 8008980:	60fb      	str	r3, [r7, #12]
 8008982:	f107 020c 	add.w	r2, r7, #12
 8008986:	f107 0310 	add.w	r3, r7, #16
 800898a:	4611      	mov	r1, r2
 800898c:	4618      	mov	r0, r3
 800898e:	f000 f8e3 	bl	8008b58 <_ZN9__gnu_cxxneIPSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEEEbRKNS_17__normal_iteratorIT_T0_EESE_>
 8008992:	4603      	mov	r3, r0
 8008994:	2b00      	cmp	r3, #0
 8008996:	d04f      	beq.n	8008a38 <_ZN4tama5Scene12getSceneDataEv+0xee>
 8008998:	f107 0310 	add.w	r3, r7, #16
 800899c:	4618      	mov	r0, r3
 800899e:	f000 f904 	bl	8008baa <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEEdeEv>
 80089a2:	4602      	mov	r2, r0
 80089a4:	f107 0314 	add.w	r3, r7, #20
 80089a8:	4611      	mov	r1, r2
 80089aa:	4618      	mov	r0, r3
 80089ac:	f7ff ffbd 	bl	800892a <_ZNSt10shared_ptrIN4tama8DrawableEEC1ERKS2_>
    {
        if (drawable->isVisible())
 80089b0:	f107 0314 	add.w	r3, r7, #20
 80089b4:	4618      	mov	r0, r3
 80089b6:	f000 f904 	bl	8008bc2 <_ZNKSt19__shared_ptr_accessIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 80089ba:	4602      	mov	r2, r0
 80089bc:	6813      	ldr	r3, [r2, #0]
 80089be:	3320      	adds	r3, #32
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	4610      	mov	r0, r2
 80089c4:	4798      	blx	r3
 80089c6:	4603      	mov	r3, r0
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d02a      	beq.n	8008a22 <_ZN4tama5Scene12getSceneDataEv+0xd8>
        {
            texture->insertAt(drawable->getPosition(), drawable->getTexture());
 80089cc:	6878      	ldr	r0, [r7, #4]
 80089ce:	f7fe fc8b 	bl	80072e8 <_ZNKSt19__shared_ptr_accessIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 80089d2:	4604      	mov	r4, r0
 80089d4:	f107 0314 	add.w	r3, r7, #20
 80089d8:	4618      	mov	r0, r3
 80089da:	f000 f8f2 	bl	8008bc2 <_ZNKSt19__shared_ptr_accessIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 80089de:	4602      	mov	r2, r0
 80089e0:	6813      	ldr	r3, [r2, #0]
 80089e2:	330c      	adds	r3, #12
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f107 001c 	add.w	r0, r7, #28
 80089ea:	4611      	mov	r1, r2
 80089ec:	4798      	blx	r3
 80089ee:	f107 0314 	add.w	r3, r7, #20
 80089f2:	4618      	mov	r0, r3
 80089f4:	f000 f8e5 	bl	8008bc2 <_ZNKSt19__shared_ptr_accessIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 80089f8:	4602      	mov	r2, r0
 80089fa:	6813      	ldr	r3, [r2, #0]
 80089fc:	3308      	adds	r3, #8
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008a04:	4611      	mov	r1, r2
 8008a06:	4798      	blx	r3
 8008a08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008a0c:	f107 021c 	add.w	r2, r7, #28
 8008a10:	ca06      	ldmia	r2, {r1, r2}
 8008a12:	4620      	mov	r0, r4
 8008a14:	f7fd ff3a 	bl	800688c <_ZN4tama7Texture8insertAtENS_5Vec2dESt10shared_ptrIS0_E>
 8008a18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	f7fa ff27 	bl	8003870 <_ZNSt10shared_ptrIN4tama7TextureEED1Ev>
    for (auto drawable : drawables)
 8008a22:	f107 0314 	add.w	r3, r7, #20
 8008a26:	4618      	mov	r0, r3
 8008a28:	f7fa f932 	bl	8002c90 <_ZNSt10shared_ptrIN4tama8DrawableEED1Ev>
 8008a2c:	f107 0310 	add.w	r3, r7, #16
 8008a30:	4618      	mov	r0, r3
 8008a32:	f000 f8a9 	bl	8008b88 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEEppEv>
 8008a36:	e7a4      	b.n	8008982 <_ZN4tama5Scene12getSceneDataEv+0x38>
        }
    }
    return texture;
 8008a38:	bf00      	nop
}
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	3734      	adds	r7, #52	; 0x34
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd90      	pop	{r4, r7, pc}

08008a42 <_ZN4tama5Scene8onChangeEv>:

void tama::Scene::onChange()
{
 8008a42:	b480      	push	{r7}
 8008a44:	b083      	sub	sp, #12
 8008a46:	af00      	add	r7, sp, #0
 8008a48:	6078      	str	r0, [r7, #4]

}
 8008a4a:	bf00      	nop
 8008a4c:	370c      	adds	r7, #12
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a54:	4770      	bx	lr

08008a56 <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EEC1Ev>:
      vector()
 8008a56:	b580      	push	{r7, lr}
 8008a58:	b082      	sub	sp, #8
 8008a5a:	af00      	add	r7, sp, #0
 8008a5c:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	4618      	mov	r0, r3
 8008a62:	f000 f8ba 	bl	8008bda <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EEC1Ev>
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	4618      	mov	r0, r3
 8008a6a:	3708      	adds	r7, #8
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	bd80      	pop	{r7, pc}

08008a70 <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE9push_backERKS3_>:
      push_back(const value_type& __x)
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b082      	sub	sp, #8
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
 8008a78:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	685a      	ldr	r2, [r3, #4]
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	689b      	ldr	r3, [r3, #8]
 8008a82:	429a      	cmp	r2, r3
 8008a84:	d00d      	beq.n	8008aa2 <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE9push_backERKS3_+0x32>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	685b      	ldr	r3, [r3, #4]
 8008a8c:	683a      	ldr	r2, [r7, #0]
 8008a8e:	4619      	mov	r1, r3
 8008a90:	f000 f8bb 	bl	8008c0a <_ZNSt16allocator_traitsISaISt10shared_ptrIN4tama8DrawableEEEE9constructIS3_JRKS3_EEEvRS4_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	685b      	ldr	r3, [r3, #4]
 8008a98:	f103 0208 	add.w	r2, r3, #8
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	605a      	str	r2, [r3, #4]
      }
 8008aa0:	e008      	b.n	8008ab4 <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE9push_backERKS3_+0x44>
	  _M_realloc_insert(end(), __x);
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	f000 f847 	bl	8008b36 <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE3endEv>
 8008aa8:	4603      	mov	r3, r0
 8008aaa:	683a      	ldr	r2, [r7, #0]
 8008aac:	4619      	mov	r1, r3
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	f000 f8be 	bl	8008c30 <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_>
      }
 8008ab4:	bf00      	nop
 8008ab6:	3708      	adds	r7, #8
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd80      	pop	{r7, pc}

08008abc <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008abc:	b480      	push	{r7}
 8008abe:	b083      	sub	sp, #12
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	370c      	adds	r7, #12
 8008aca:	46bd      	mov	sp, r7
 8008acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad0:	4770      	bx	lr

08008ad2 <_ZSt11make_sharedIN4tama7TextureEJRjS2_EESt10shared_ptrIT_EDpOT0_>:
    make_shared(_Args&&... __args)
 8008ad2:	b590      	push	{r4, r7, lr}
 8008ad4:	b087      	sub	sp, #28
 8008ad6:	af00      	add	r7, sp, #0
 8008ad8:	60f8      	str	r0, [r7, #12]
 8008ada:	60b9      	str	r1, [r7, #8]
 8008adc:	607a      	str	r2, [r7, #4]
				       std::forward<_Args>(__args)...);
 8008ade:	f107 0314 	add.w	r3, r7, #20
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	f7fe fda7 	bl	8007636 <_ZNSaIN4tama7TextureEEC1Ev>
 8008ae8:	68b8      	ldr	r0, [r7, #8]
 8008aea:	f7ff ffe7 	bl	8008abc <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>
 8008aee:	4604      	mov	r4, r0
 8008af0:	6878      	ldr	r0, [r7, #4]
 8008af2:	f7ff ffe3 	bl	8008abc <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>
 8008af6:	4603      	mov	r3, r0
 8008af8:	68f8      	ldr	r0, [r7, #12]
 8008afa:	f107 0114 	add.w	r1, r7, #20
 8008afe:	4622      	mov	r2, r4
 8008b00:	f000 f922 	bl	8008d48 <_ZSt15allocate_sharedIN4tama7TextureESaIS1_EJRjS3_EESt10shared_ptrIT_ERKT0_DpOT1_>
 8008b04:	f107 0314 	add.w	r3, r7, #20
 8008b08:	4618      	mov	r0, r3
 8008b0a:	f7fe fda0 	bl	800764e <_ZNSaIN4tama7TextureEED1Ev>
    }
 8008b0e:	68f8      	ldr	r0, [r7, #12]
 8008b10:	371c      	adds	r7, #28
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bd90      	pop	{r4, r7, pc}

08008b16 <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8008b16:	b580      	push	{r7, lr}
 8008b18:	b084      	sub	sp, #16
 8008b1a:	af00      	add	r7, sp, #0
 8008b1c:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8008b1e:	687a      	ldr	r2, [r7, #4]
 8008b20:	f107 030c 	add.w	r3, r7, #12
 8008b24:	4611      	mov	r1, r2
 8008b26:	4618      	mov	r0, r3
 8008b28:	f000 f928 	bl	8008d7c <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEEC1ERKS5_>
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	4618      	mov	r0, r3
 8008b30:	3710      	adds	r7, #16
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}

08008b36 <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8008b36:	b580      	push	{r7, lr}
 8008b38:	b084      	sub	sp, #16
 8008b3a:	af00      	add	r7, sp, #0
 8008b3c:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	1d1a      	adds	r2, r3, #4
 8008b42:	f107 030c 	add.w	r3, r7, #12
 8008b46:	4611      	mov	r1, r2
 8008b48:	4618      	mov	r0, r3
 8008b4a:	f000 f917 	bl	8008d7c <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEEC1ERKS5_>
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	4618      	mov	r0, r3
 8008b52:	3710      	adds	r7, #16
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}

08008b58 <_ZN9__gnu_cxxneIPSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEEEbRKNS_17__normal_iteratorIT_T0_EESE_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8008b58:	b590      	push	{r4, r7, lr}
 8008b5a:	b083      	sub	sp, #12
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
 8008b60:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f000 f91a 	bl	8008d9c <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEE4baseEv>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	681c      	ldr	r4, [r3, #0]
 8008b6c:	6838      	ldr	r0, [r7, #0]
 8008b6e:	f000 f915 	bl	8008d9c <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEE4baseEv>
 8008b72:	4603      	mov	r3, r0
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	429c      	cmp	r4, r3
 8008b78:	bf14      	ite	ne
 8008b7a:	2301      	movne	r3, #1
 8008b7c:	2300      	moveq	r3, #0
 8008b7e:	b2db      	uxtb	r3, r3
 8008b80:	4618      	mov	r0, r3
 8008b82:	370c      	adds	r7, #12
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd90      	pop	{r4, r7, pc}

08008b88 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8008b88:	b480      	push	{r7}
 8008b8a:	b083      	sub	sp, #12
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
	++_M_current;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	f103 0208 	add.w	r2, r3, #8
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	601a      	str	r2, [r3, #0]
	return *this;
 8008b9c:	687b      	ldr	r3, [r7, #4]
      }
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	370c      	adds	r7, #12
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba8:	4770      	bx	lr

08008baa <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8008baa:	b480      	push	{r7}
 8008bac:	b083      	sub	sp, #12
 8008bae:	af00      	add	r7, sp, #0
 8008bb0:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	370c      	adds	r7, #12
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc0:	4770      	bx	lr

08008bc2 <_ZNKSt19__shared_ptr_accessIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 8008bc2:	b580      	push	{r7, lr}
 8008bc4:	b082      	sub	sp, #8
 8008bc6:	af00      	add	r7, sp, #0
 8008bc8:	6078      	str	r0, [r7, #4]
	return _M_get();
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	f000 f8f1 	bl	8008db2 <_ZNKSt19__shared_ptr_accessIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 8008bd0:	4603      	mov	r3, r0
      }
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	3708      	adds	r7, #8
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bd80      	pop	{r7, pc}

08008bda <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EEC1Ev>:
      _Vector_base()
 8008bda:	b580      	push	{r7, lr}
 8008bdc:	b082      	sub	sp, #8
 8008bde:	af00      	add	r7, sp, #0
 8008be0:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	4618      	mov	r0, r3
 8008be6:	f000 f8f0 	bl	8008dca <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE12_Vector_implC1Ev>
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	4618      	mov	r0, r3
 8008bee:	3708      	adds	r7, #8
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bd80      	pop	{r7, pc}

08008bf4 <_ZSt7forwardIRKSt10shared_ptrIN4tama8DrawableEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008bf4:	b480      	push	{r7}
 8008bf6:	b083      	sub	sp, #12
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	4618      	mov	r0, r3
 8008c00:	370c      	adds	r7, #12
 8008c02:	46bd      	mov	sp, r7
 8008c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c08:	4770      	bx	lr

08008c0a <_ZNSt16allocator_traitsISaISt10shared_ptrIN4tama8DrawableEEEE9constructIS3_JRKS3_EEEvRS4_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8008c0a:	b580      	push	{r7, lr}
 8008c0c:	b084      	sub	sp, #16
 8008c0e:	af00      	add	r7, sp, #0
 8008c10:	60f8      	str	r0, [r7, #12]
 8008c12:	60b9      	str	r1, [r7, #8]
 8008c14:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8008c16:	6878      	ldr	r0, [r7, #4]
 8008c18:	f7ff ffec 	bl	8008bf4 <_ZSt7forwardIRKSt10shared_ptrIN4tama8DrawableEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8008c1c:	4603      	mov	r3, r0
 8008c1e:	461a      	mov	r2, r3
 8008c20:	68b9      	ldr	r1, [r7, #8]
 8008c22:	68f8      	ldr	r0, [r7, #12]
 8008c24:	f000 f8e6 	bl	8008df4 <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama8DrawableEEE9constructIS4_JRKS4_EEEvPT_DpOT0_>
 8008c28:	bf00      	nop
 8008c2a:	3710      	adds	r7, #16
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	bd80      	pop	{r7, pc}

08008c30 <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8008c30:	b5b0      	push	{r4, r5, r7, lr}
 8008c32:	b08a      	sub	sp, #40	; 0x28
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	60f8      	str	r0, [r7, #12]
 8008c38:	60b9      	str	r1, [r7, #8]
 8008c3a:	607a      	str	r2, [r7, #4]
      const size_type __len =
 8008c3c:	4a41      	ldr	r2, [pc, #260]	; (8008d44 <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0x114>)
 8008c3e:	2101      	movs	r1, #1
 8008c40:	68f8      	ldr	r0, [r7, #12]
 8008c42:	f000 f8f1 	bl	8008e28 <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE12_M_check_lenEjPKc>
 8008c46:	6278      	str	r0, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 8008c48:	68f8      	ldr	r0, [r7, #12]
 8008c4a:	f7ff ff64 	bl	8008b16 <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE5beginEv>
 8008c4e:	4603      	mov	r3, r0
 8008c50:	617b      	str	r3, [r7, #20]
 8008c52:	f107 0214 	add.w	r2, r7, #20
 8008c56:	f107 0308 	add.w	r3, r7, #8
 8008c5a:	4611      	mov	r1, r2
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	f000 f92b 	bl	8008eb8 <_ZN9__gnu_cxxmiIPSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_>
 8008c62:	4603      	mov	r3, r0
 8008c64:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	f000 f93a 	bl	8008ee4 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE11_M_allocateEj>
 8008c70:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 8008c72:	69fb      	ldr	r3, [r7, #28]
 8008c74:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 8008c76:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8008c78:	6a3b      	ldr	r3, [r7, #32]
 8008c7a:	00db      	lsls	r3, r3, #3
	  _Alloc_traits::construct(this->_M_impl,
 8008c7c:	69fa      	ldr	r2, [r7, #28]
 8008c7e:	18d5      	adds	r5, r2, r3
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	f7ff ffb7 	bl	8008bf4 <_ZSt7forwardIRKSt10shared_ptrIN4tama8DrawableEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8008c86:	4603      	mov	r3, r0
 8008c88:	461a      	mov	r2, r3
 8008c8a:	4629      	mov	r1, r5
 8008c8c:	4620      	mov	r0, r4
 8008c8e:	f7ff ffbc 	bl	8008c0a <_ZNSt16allocator_traitsISaISt10shared_ptrIN4tama8DrawableEEEE9constructIS3_JRKS3_EEEvRS4_PT_DpOT0_>
	  __new_finish = pointer();
 8008c92:	2300      	movs	r3, #0
 8008c94:	61bb      	str	r3, [r7, #24]
	    (this->_M_impl._M_start, __position.base(),
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	681c      	ldr	r4, [r3, #0]
 8008c9a:	f107 0308 	add.w	r3, r7, #8
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	f000 f87c 	bl	8008d9c <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEE4baseEv>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	681d      	ldr	r5, [r3, #0]
	     __new_start, _M_get_Tp_allocator());
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	4618      	mov	r0, r3
 8008cac:	f7f9 ff53 	bl	8002b56 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE19_M_get_Tp_allocatorEv>
 8008cb0:	4603      	mov	r3, r0
	  __new_finish
 8008cb2:	69fa      	ldr	r2, [r7, #28]
 8008cb4:	4629      	mov	r1, r5
 8008cb6:	4620      	mov	r0, r4
 8008cb8:	f000 f928 	bl	8008f0c <_ZSt34__uninitialized_move_if_noexcept_aIPSt10shared_ptrIN4tama8DrawableEES4_SaIS3_EET0_T_S7_S6_RT1_>
 8008cbc:	61b8      	str	r0, [r7, #24]
	  ++__new_finish;
 8008cbe:	69bb      	ldr	r3, [r7, #24]
 8008cc0:	3308      	adds	r3, #8
 8008cc2:	61bb      	str	r3, [r7, #24]
	    (__position.base(), this->_M_impl._M_finish,
 8008cc4:	f107 0308 	add.w	r3, r7, #8
 8008cc8:	4618      	mov	r0, r3
 8008cca:	f000 f867 	bl	8008d9c <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEE4baseEv>
 8008cce:	4603      	mov	r3, r0
 8008cd0:	681c      	ldr	r4, [r3, #0]
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	685d      	ldr	r5, [r3, #4]
	     __new_finish, _M_get_Tp_allocator());
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	4618      	mov	r0, r3
 8008cda:	f7f9 ff3c 	bl	8002b56 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE19_M_get_Tp_allocatorEv>
 8008cde:	4603      	mov	r3, r0
	  __new_finish
 8008ce0:	69ba      	ldr	r2, [r7, #24]
 8008ce2:	4629      	mov	r1, r5
 8008ce4:	4620      	mov	r0, r4
 8008ce6:	f000 f911 	bl	8008f0c <_ZSt34__uninitialized_move_if_noexcept_aIPSt10shared_ptrIN4tama8DrawableEES4_SaIS3_EET0_T_S7_S6_RT1_>
 8008cea:	61b8      	str	r0, [r7, #24]
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	681c      	ldr	r4, [r3, #0]
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	685d      	ldr	r5, [r3, #4]
		    _M_get_Tp_allocator());
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	f7f9 ff2d 	bl	8002b56 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE19_M_get_Tp_allocatorEv>
 8008cfc:	4603      	mov	r3, r0
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8008cfe:	461a      	mov	r2, r3
 8008d00:	4629      	mov	r1, r5
 8008d02:	4620      	mov	r0, r4
 8008d04:	f7f9 ff32 	bl	8002b6c <_ZSt8_DestroyIPSt10shared_ptrIN4tama8DrawableEES3_EvT_S5_RSaIT0_E>
      _M_deallocate(this->_M_impl._M_start,
 8008d08:	68f8      	ldr	r0, [r7, #12]
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	6819      	ldr	r1, [r3, #0]
		    this->_M_impl._M_end_of_storage
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	689b      	ldr	r3, [r3, #8]
		    - this->_M_impl._M_start);
 8008d12:	461a      	mov	r2, r3
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	1ad3      	subs	r3, r2, r3
 8008d1a:	10db      	asrs	r3, r3, #3
      _M_deallocate(this->_M_impl._M_start,
 8008d1c:	461a      	mov	r2, r3
 8008d1e:	f7f9 ff3f 	bl	8002ba0 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE13_M_deallocateEPS3_j>
      this->_M_impl._M_start = __new_start;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	69fa      	ldr	r2, [r7, #28]
 8008d26:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	69ba      	ldr	r2, [r7, #24]
 8008d2c:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8008d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d30:	00db      	lsls	r3, r3, #3
 8008d32:	69fa      	ldr	r2, [r7, #28]
 8008d34:	441a      	add	r2, r3
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	609a      	str	r2, [r3, #8]
    }
 8008d3a:	bf00      	nop
 8008d3c:	3728      	adds	r7, #40	; 0x28
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	bdb0      	pop	{r4, r5, r7, pc}
 8008d42:	bf00      	nop
 8008d44:	08017d84 	.word	0x08017d84

08008d48 <_ZSt15allocate_sharedIN4tama7TextureESaIS1_EJRjS3_EESt10shared_ptrIT_ERKT0_DpOT1_>:
    allocate_shared(const _Alloc& __a, _Args&&... __args)
 8008d48:	b5b0      	push	{r4, r5, r7, lr}
 8008d4a:	b088      	sub	sp, #32
 8008d4c:	af02      	add	r7, sp, #8
 8008d4e:	60f8      	str	r0, [r7, #12]
 8008d50:	60b9      	str	r1, [r7, #8]
 8008d52:	607a      	str	r2, [r7, #4]
 8008d54:	603b      	str	r3, [r7, #0]
			     std::forward<_Args>(__args)...);
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	f7ff feb0 	bl	8008abc <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>
 8008d5c:	4604      	mov	r4, r0
 8008d5e:	6838      	ldr	r0, [r7, #0]
 8008d60:	f7ff feac 	bl	8008abc <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>
 8008d64:	4603      	mov	r3, r0
 8008d66:	9300      	str	r3, [sp, #0]
 8008d68:	4623      	mov	r3, r4
 8008d6a:	68ba      	ldr	r2, [r7, #8]
 8008d6c:	4629      	mov	r1, r5
 8008d6e:	68f8      	ldr	r0, [r7, #12]
 8008d70:	f000 f8e5 	bl	8008f3e <_ZNSt10shared_ptrIN4tama7TextureEEC1ISaIS1_EJRjS5_EEESt19_Sp_make_shared_tagRKT_DpOT0_>
    }
 8008d74:	68f8      	ldr	r0, [r7, #12]
 8008d76:	3718      	adds	r7, #24
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	bdb0      	pop	{r4, r5, r7, pc}

08008d7c <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEEC1ERKS5_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8008d7c:	b480      	push	{r7}
 8008d7e:	b083      	sub	sp, #12
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
 8008d84:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	681a      	ldr	r2, [r3, #0]
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	601a      	str	r2, [r3, #0]
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	4618      	mov	r0, r3
 8008d92:	370c      	adds	r7, #12
 8008d94:	46bd      	mov	sp, r7
 8008d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9a:	4770      	bx	lr

08008d9c <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8008d9c:	b480      	push	{r7}
 8008d9e:	b083      	sub	sp, #12
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	4618      	mov	r0, r3
 8008da8:	370c      	adds	r7, #12
 8008daa:	46bd      	mov	sp, r7
 8008dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db0:	4770      	bx	lr

08008db2 <_ZNKSt19__shared_ptr_accessIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 8008db2:	b580      	push	{r7, lr}
 8008db4:	b082      	sub	sp, #8
 8008db6:	af00      	add	r7, sp, #0
 8008db8:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f000 f8db 	bl	8008f76 <_ZNKSt12__shared_ptrIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0EE3getEv>
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	3708      	adds	r7, #8
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bd80      	pop	{r7, pc}

08008dca <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE12_Vector_implC1Ev>:
	_Vector_impl()
 8008dca:	b580      	push	{r7, lr}
 8008dcc:	b082      	sub	sp, #8
 8008dce:	af00      	add	r7, sp, #0
 8008dd0:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f000 f8db 	bl	8008f8e <_ZNSaISt10shared_ptrIN4tama8DrawableEEEC1Ev>
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2200      	movs	r2, #0
 8008ddc:	601a      	str	r2, [r3, #0]
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	2200      	movs	r2, #0
 8008de2:	605a      	str	r2, [r3, #4]
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2200      	movs	r2, #0
 8008de8:	609a      	str	r2, [r3, #8]
	{ }
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	4618      	mov	r0, r3
 8008dee:	3708      	adds	r7, #8
 8008df0:	46bd      	mov	sp, r7
 8008df2:	bd80      	pop	{r7, pc}

08008df4 <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama8DrawableEEE9constructIS4_JRKS4_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8008df4:	b590      	push	{r4, r7, lr}
 8008df6:	b085      	sub	sp, #20
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	60f8      	str	r0, [r7, #12]
 8008dfc:	60b9      	str	r1, [r7, #8]
 8008dfe:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8008e00:	6878      	ldr	r0, [r7, #4]
 8008e02:	f7ff fef7 	bl	8008bf4 <_ZSt7forwardIRKSt10shared_ptrIN4tama8DrawableEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8008e06:	4604      	mov	r4, r0
 8008e08:	68bb      	ldr	r3, [r7, #8]
 8008e0a:	4619      	mov	r1, r3
 8008e0c:	2008      	movs	r0, #8
 8008e0e:	f7f7 fb96 	bl	800053e <_ZnwjPv>
 8008e12:	4603      	mov	r3, r0
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d003      	beq.n	8008e20 <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama8DrawableEEE9constructIS4_JRKS4_EEEvPT_DpOT0_+0x2c>
 8008e18:	4621      	mov	r1, r4
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	f7ff fd85 	bl	800892a <_ZNSt10shared_ptrIN4tama8DrawableEEC1ERKS2_>
 8008e20:	bf00      	nop
 8008e22:	3714      	adds	r7, #20
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd90      	pop	{r4, r7, pc}

08008e28 <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8008e28:	b590      	push	{r4, r7, lr}
 8008e2a:	b087      	sub	sp, #28
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	60f8      	str	r0, [r7, #12]
 8008e30:	60b9      	str	r1, [r7, #8]
 8008e32:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8008e34:	68f8      	ldr	r0, [r7, #12]
 8008e36:	f000 f8b6 	bl	8008fa6 <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE8max_sizeEv>
 8008e3a:	4604      	mov	r4, r0
 8008e3c:	68f8      	ldr	r0, [r7, #12]
 8008e3e:	f000 f8c3 	bl	8008fc8 <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE4sizeEv>
 8008e42:	4603      	mov	r3, r0
 8008e44:	1ae2      	subs	r2, r4, r3
 8008e46:	68bb      	ldr	r3, [r7, #8]
 8008e48:	429a      	cmp	r2, r3
 8008e4a:	bf34      	ite	cc
 8008e4c:	2301      	movcc	r3, #1
 8008e4e:	2300      	movcs	r3, #0
 8008e50:	b2db      	uxtb	r3, r3
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d003      	beq.n	8008e5e <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE12_M_check_lenEjPKc+0x36>
	  __throw_length_error(__N(__s));
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	4618      	mov	r0, r3
 8008e5a:	f00e fb60 	bl	801751e <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + std::max(size(), __n);
 8008e5e:	68f8      	ldr	r0, [r7, #12]
 8008e60:	f000 f8b2 	bl	8008fc8 <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE4sizeEv>
 8008e64:	4604      	mov	r4, r0
 8008e66:	68f8      	ldr	r0, [r7, #12]
 8008e68:	f000 f8ae 	bl	8008fc8 <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE4sizeEv>
 8008e6c:	4603      	mov	r3, r0
 8008e6e:	613b      	str	r3, [r7, #16]
 8008e70:	f107 0208 	add.w	r2, r7, #8
 8008e74:	f107 0310 	add.w	r3, r7, #16
 8008e78:	4611      	mov	r1, r2
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	f7f7 fe15 	bl	8000aaa <_ZSt3maxIjERKT_S2_S2_>
 8008e80:	4603      	mov	r3, r0
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	4423      	add	r3, r4
 8008e86:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8008e88:	68f8      	ldr	r0, [r7, #12]
 8008e8a:	f000 f89d 	bl	8008fc8 <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE4sizeEv>
 8008e8e:	4602      	mov	r2, r0
 8008e90:	697b      	ldr	r3, [r7, #20]
 8008e92:	4293      	cmp	r3, r2
 8008e94:	d306      	bcc.n	8008ea4 <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE12_M_check_lenEjPKc+0x7c>
 8008e96:	68f8      	ldr	r0, [r7, #12]
 8008e98:	f000 f885 	bl	8008fa6 <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE8max_sizeEv>
 8008e9c:	4602      	mov	r2, r0
 8008e9e:	697b      	ldr	r3, [r7, #20]
 8008ea0:	4293      	cmp	r3, r2
 8008ea2:	d904      	bls.n	8008eae <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE12_M_check_lenEjPKc+0x86>
 8008ea4:	68f8      	ldr	r0, [r7, #12]
 8008ea6:	f000 f87e 	bl	8008fa6 <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE8max_sizeEv>
 8008eaa:	4603      	mov	r3, r0
 8008eac:	e000      	b.n	8008eb0 <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE12_M_check_lenEjPKc+0x88>
 8008eae:	697b      	ldr	r3, [r7, #20]
      }
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	371c      	adds	r7, #28
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	bd90      	pop	{r4, r7, pc}

08008eb8 <_ZN9__gnu_cxxmiIPSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8008eb8:	b590      	push	{r4, r7, lr}
 8008eba:	b083      	sub	sp, #12
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
 8008ec0:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f7ff ff6a 	bl	8008d9c <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEE4baseEv>
 8008ec8:	4603      	mov	r3, r0
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	461c      	mov	r4, r3
 8008ece:	6838      	ldr	r0, [r7, #0]
 8008ed0:	f7ff ff64 	bl	8008d9c <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEE4baseEv>
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	1ae3      	subs	r3, r4, r3
 8008eda:	10db      	asrs	r3, r3, #3
 8008edc:	4618      	mov	r0, r3
 8008ede:	370c      	adds	r7, #12
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bd90      	pop	{r4, r7, pc}

08008ee4 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b082      	sub	sp, #8
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
 8008eec:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d006      	beq.n	8008f02 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE11_M_allocateEj+0x1e>
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6839      	ldr	r1, [r7, #0]
 8008ef8:	4618      	mov	r0, r3
 8008efa:	f000 f876 	bl	8008fea <_ZNSt16allocator_traitsISaISt10shared_ptrIN4tama8DrawableEEEE8allocateERS4_j>
 8008efe:	4603      	mov	r3, r0
 8008f00:	e000      	b.n	8008f04 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE11_M_allocateEj+0x20>
 8008f02:	2300      	movs	r3, #0
      }
 8008f04:	4618      	mov	r0, r3
 8008f06:	3708      	adds	r7, #8
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	bd80      	pop	{r7, pc}

08008f0c <_ZSt34__uninitialized_move_if_noexcept_aIPSt10shared_ptrIN4tama8DrawableEES4_SaIS3_EET0_T_S7_S6_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8008f0c:	b590      	push	{r4, r7, lr}
 8008f0e:	b085      	sub	sp, #20
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	60f8      	str	r0, [r7, #12]
 8008f14:	60b9      	str	r1, [r7, #8]
 8008f16:	607a      	str	r2, [r7, #4]
 8008f18:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8008f1a:	68f8      	ldr	r0, [r7, #12]
 8008f1c:	f000 f874 	bl	8009008 <_ZSt32__make_move_if_noexcept_iteratorISt10shared_ptrIN4tama8DrawableEESt13move_iteratorIPS3_EET0_PT_>
 8008f20:	4604      	mov	r4, r0
 8008f22:	68b8      	ldr	r0, [r7, #8]
 8008f24:	f000 f870 	bl	8009008 <_ZSt32__make_move_if_noexcept_iteratorISt10shared_ptrIN4tama8DrawableEESt13move_iteratorIPS3_EET0_PT_>
 8008f28:	4601      	mov	r1, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	687a      	ldr	r2, [r7, #4]
 8008f2e:	4620      	mov	r0, r4
 8008f30:	f000 f879 	bl	8009026 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPSt10shared_ptrIN4tama8DrawableEEES5_S4_ET0_T_S8_S7_RSaIT1_E>
 8008f34:	4603      	mov	r3, r0
    }
 8008f36:	4618      	mov	r0, r3
 8008f38:	3714      	adds	r7, #20
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	bd90      	pop	{r4, r7, pc}

08008f3e <_ZNSt10shared_ptrIN4tama7TextureEEC1ISaIS1_EJRjS5_EEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 8008f3e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f40:	b087      	sub	sp, #28
 8008f42:	af02      	add	r7, sp, #8
 8008f44:	60f8      	str	r0, [r7, #12]
 8008f46:	7239      	strb	r1, [r7, #8]
 8008f48:	607a      	str	r2, [r7, #4]
 8008f4a:	603b      	str	r3, [r7, #0]
	: __shared_ptr<_Tp>(__tag, __a, std::forward<_Args>(__args)...)
 8008f4c:	68fc      	ldr	r4, [r7, #12]
 8008f4e:	6838      	ldr	r0, [r7, #0]
 8008f50:	f7ff fdb4 	bl	8008abc <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>
 8008f54:	4605      	mov	r5, r0
 8008f56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f58:	f7ff fdb0 	bl	8008abc <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	9300      	str	r3, [sp, #0]
 8008f60:	462b      	mov	r3, r5
 8008f62:	687a      	ldr	r2, [r7, #4]
 8008f64:	4631      	mov	r1, r6
 8008f66:	4620      	mov	r0, r4
 8008f68:	f000 f86e 	bl	8009048 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJRjS7_EEESt19_Sp_make_shared_tagRKT_DpOT0_>
	{ }
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	4618      	mov	r0, r3
 8008f70:	3714      	adds	r7, #20
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008f76 <_ZNKSt12__shared_ptrIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0EE3getEv>:
      get() const noexcept
 8008f76:	b480      	push	{r7}
 8008f78:	b083      	sub	sp, #12
 8008f7a:	af00      	add	r7, sp, #0
 8008f7c:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	4618      	mov	r0, r3
 8008f84:	370c      	adds	r7, #12
 8008f86:	46bd      	mov	sp, r7
 8008f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8c:	4770      	bx	lr

08008f8e <_ZNSaISt10shared_ptrIN4tama8DrawableEEEC1Ev>:
      allocator() throw() { }
 8008f8e:	b580      	push	{r7, lr}
 8008f90:	b082      	sub	sp, #8
 8008f92:	af00      	add	r7, sp, #0
 8008f94:	6078      	str	r0, [r7, #4]
 8008f96:	6878      	ldr	r0, [r7, #4]
 8008f98:	f000 f8d5 	bl	8009146 <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama8DrawableEEEC1Ev>
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	3708      	adds	r7, #8
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd80      	pop	{r7, pc}

08008fa6 <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8008fa6:	b580      	push	{r7, lr}
 8008fa8:	b082      	sub	sp, #8
 8008faa:	af00      	add	r7, sp, #0
 8008fac:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	f000 f8df 	bl	8009174 <_ZNKSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE19_M_get_Tp_allocatorEv>
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	4618      	mov	r0, r3
 8008fba:	f000 f8cf 	bl	800915c <_ZNSt16allocator_traitsISaISt10shared_ptrIN4tama8DrawableEEEE8max_sizeERKS4_>
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	3708      	adds	r7, #8
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	bd80      	pop	{r7, pc}

08008fc8 <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8008fc8:	b480      	push	{r7}
 8008fca:	b083      	sub	sp, #12
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	685b      	ldr	r3, [r3, #4]
 8008fd4:	461a      	mov	r2, r3
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	1ad3      	subs	r3, r2, r3
 8008fdc:	10db      	asrs	r3, r3, #3
 8008fde:	4618      	mov	r0, r3
 8008fe0:	370c      	adds	r7, #12
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe8:	4770      	bx	lr

08008fea <_ZNSt16allocator_traitsISaISt10shared_ptrIN4tama8DrawableEEEE8allocateERS4_j>:
      allocate(allocator_type& __a, size_type __n)
 8008fea:	b580      	push	{r7, lr}
 8008fec:	b082      	sub	sp, #8
 8008fee:	af00      	add	r7, sp, #0
 8008ff0:	6078      	str	r0, [r7, #4]
 8008ff2:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	6839      	ldr	r1, [r7, #0]
 8008ff8:	6878      	ldr	r0, [r7, #4]
 8008ffa:	f000 f8c6 	bl	800918a <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama8DrawableEEE8allocateEjPKv>
 8008ffe:	4603      	mov	r3, r0
 8009000:	4618      	mov	r0, r3
 8009002:	3708      	adds	r7, #8
 8009004:	46bd      	mov	sp, r7
 8009006:	bd80      	pop	{r7, pc}

08009008 <_ZSt32__make_move_if_noexcept_iteratorISt10shared_ptrIN4tama8DrawableEESt13move_iteratorIPS3_EET0_PT_>:
    __make_move_if_noexcept_iterator(_Tp* __i)
 8009008:	b580      	push	{r7, lr}
 800900a:	b084      	sub	sp, #16
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8009010:	f107 030c 	add.w	r3, r7, #12
 8009014:	6879      	ldr	r1, [r7, #4]
 8009016:	4618      	mov	r0, r3
 8009018:	f000 f8d5 	bl	80091c6 <_ZNSt13move_iteratorIPSt10shared_ptrIN4tama8DrawableEEEC1ES4_>
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	4618      	mov	r0, r3
 8009020:	3710      	adds	r7, #16
 8009022:	46bd      	mov	sp, r7
 8009024:	bd80      	pop	{r7, pc}

08009026 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPSt10shared_ptrIN4tama8DrawableEEES5_S4_ET0_T_S8_S7_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8009026:	b580      	push	{r7, lr}
 8009028:	b084      	sub	sp, #16
 800902a:	af00      	add	r7, sp, #0
 800902c:	60f8      	str	r0, [r7, #12]
 800902e:	60b9      	str	r1, [r7, #8]
 8009030:	607a      	str	r2, [r7, #4]
 8009032:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8009034:	687a      	ldr	r2, [r7, #4]
 8009036:	68b9      	ldr	r1, [r7, #8]
 8009038:	68f8      	ldr	r0, [r7, #12]
 800903a:	f000 f8d3 	bl	80091e4 <_ZSt18uninitialized_copyISt13move_iteratorIPSt10shared_ptrIN4tama8DrawableEEES5_ET0_T_S8_S7_>
 800903e:	4603      	mov	r3, r0
 8009040:	4618      	mov	r0, r3
 8009042:	3710      	adds	r7, #16
 8009044:	46bd      	mov	sp, r7
 8009046:	bd80      	pop	{r7, pc}

08009048 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJRjS7_EEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 8009048:	b590      	push	{r4, r7, lr}
 800904a:	b08d      	sub	sp, #52	; 0x34
 800904c:	af00      	add	r7, sp, #0
 800904e:	60f8      	str	r0, [r7, #12]
 8009050:	7239      	strb	r1, [r7, #8]
 8009052:	607a      	str	r2, [r7, #4]
 8009054:	603b      	str	r3, [r7, #0]
	: _M_ptr(), _M_refcount()
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	2200      	movs	r2, #0
 800905a:	601a      	str	r2, [r3, #0]
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	3304      	adds	r3, #4
 8009060:	4618      	mov	r0, r3
 8009062:	f7f7 ff0a 	bl	8000e7a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 8009066:	f107 0320 	add.w	r3, r7, #32
 800906a:	6879      	ldr	r1, [r7, #4]
 800906c:	4618      	mov	r0, r3
 800906e:	f7fe fe09 	bl	8007c84 <_ZNSaIN4tama7TextureEEC1ERKS1_>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 8009072:	f107 0318 	add.w	r3, r7, #24
 8009076:	f107 0220 	add.w	r2, r7, #32
 800907a:	4611      	mov	r1, r2
 800907c:	4618      	mov	r0, r3
 800907e:	f7fe fe0f 	bl	8007ca0 <_ZSt18__allocate_guardedISaIN4tama7TextureEEESt15__allocated_ptrIT_ERS4_>
	  auto __ptr = __guard.get();
 8009082:	f107 0318 	add.w	r3, r7, #24
 8009086:	4618      	mov	r0, r3
 8009088:	f7fe fe32 	bl	8007cf0 <_ZNSt15__allocated_ptrISaIN4tama7TextureEEE3getEv>
 800908c:	62f8      	str	r0, [r7, #44]	; 0x2c
	  __traits::construct(__del._M_alloc, __ptr,
 800908e:	6838      	ldr	r0, [r7, #0]
 8009090:	f7ff fd14 	bl	8008abc <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>
 8009094:	4604      	mov	r4, r0
 8009096:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8009098:	f7ff fd10 	bl	8008abc <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>
 800909c:	4603      	mov	r3, r0
 800909e:	f107 0020 	add.w	r0, r7, #32
 80090a2:	4622      	mov	r2, r4
 80090a4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80090a6:	f000 f8af 	bl	8009208 <_ZNSt16allocator_traitsISaIN4tama7TextureEEE9constructIS1_JRjS5_EEEvRS2_PT_DpOT0_>
	  __guard = nullptr;
 80090aa:	f107 0318 	add.w	r3, r7, #24
 80090ae:	2100      	movs	r1, #0
 80090b0:	4618      	mov	r0, r3
 80090b2:	f7fe fe43 	bl	8007d3c <_ZNSt15__allocated_ptrISaIN4tama7TextureEEEaSEDn>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 80090b6:	f107 0220 	add.w	r2, r7, #32
 80090ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80090be:	4611      	mov	r1, r2
 80090c0:	4618      	mov	r0, r3
 80090c2:	f7fe fc84 	bl	80079ce <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>
 80090c6:	f107 0220 	add.w	r2, r7, #32
 80090ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80090ce:	4611      	mov	r1, r2
 80090d0:	4618      	mov	r0, r3
 80090d2:	f7fe fdd7 	bl	8007c84 <_ZNSaIN4tama7TextureEEC1ERKS1_>
 80090d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80090da:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80090de:	f107 0014 	add.w	r0, r7, #20
 80090e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80090e4:	f7fe fe5f 	bl	8007da6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama7TextureENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
 80090e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80090ec:	4618      	mov	r0, r3
 80090ee:	f7fe faae 	bl	800764e <_ZNSaIN4tama7TextureEED1Ev>
 80090f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80090f6:	4618      	mov	r0, r3
 80090f8:	f7fe fc5c 	bl	80079b4 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	  _M_refcount._M_swap(__count);
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	3304      	adds	r3, #4
 8009100:	f107 0214 	add.w	r2, r7, #20
 8009104:	4611      	mov	r1, r2
 8009106:	4618      	mov	r0, r3
 8009108:	f7f7 fec5 	bl	8000e96 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  _M_ptr = __ptr;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009110:	601a      	str	r2, [r3, #0]
	  _M_enable_shared_from_this_with(_M_ptr);
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	4619      	mov	r1, r3
 8009118:	68f8      	ldr	r0, [r7, #12]
 800911a:	f7fe fe9b 	bl	8007e54 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 800911e:	f107 0314 	add.w	r3, r7, #20
 8009122:	4618      	mov	r0, r3
 8009124:	f7f7 fc8d 	bl	8000a42 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 8009128:	f107 0318 	add.w	r3, r7, #24
 800912c:	4618      	mov	r0, r3
 800912e:	f7fe fdca 	bl	8007cc6 <_ZNSt15__allocated_ptrISaIN4tama7TextureEEED1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 8009132:	f107 0320 	add.w	r3, r7, #32
 8009136:	4618      	mov	r0, r3
 8009138:	f7fe fc3c 	bl	80079b4 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	}
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	4618      	mov	r0, r3
 8009140:	3734      	adds	r7, #52	; 0x34
 8009142:	46bd      	mov	sp, r7
 8009144:	bd90      	pop	{r4, r7, pc}

08009146 <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama8DrawableEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8009146:	b480      	push	{r7}
 8009148:	b083      	sub	sp, #12
 800914a:	af00      	add	r7, sp, #0
 800914c:	6078      	str	r0, [r7, #4]
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	4618      	mov	r0, r3
 8009152:	370c      	adds	r7, #12
 8009154:	46bd      	mov	sp, r7
 8009156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915a:	4770      	bx	lr

0800915c <_ZNSt16allocator_traitsISaISt10shared_ptrIN4tama8DrawableEEEE8max_sizeERKS4_>:
      max_size(const allocator_type& __a) noexcept
 800915c:	b580      	push	{r7, lr}
 800915e:	b082      	sub	sp, #8
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f000 f867 	bl	8009238 <_ZNK9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama8DrawableEEE8max_sizeEv>
 800916a:	4603      	mov	r3, r0
 800916c:	4618      	mov	r0, r3
 800916e:	3708      	adds	r7, #8
 8009170:	46bd      	mov	sp, r7
 8009172:	bd80      	pop	{r7, pc}

08009174 <_ZNKSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8009174:	b480      	push	{r7}
 8009176:	b083      	sub	sp, #12
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	4618      	mov	r0, r3
 8009180:	370c      	adds	r7, #12
 8009182:	46bd      	mov	sp, r7
 8009184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009188:	4770      	bx	lr

0800918a <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama8DrawableEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800918a:	b580      	push	{r7, lr}
 800918c:	b084      	sub	sp, #16
 800918e:	af00      	add	r7, sp, #0
 8009190:	60f8      	str	r0, [r7, #12]
 8009192:	60b9      	str	r1, [r7, #8]
 8009194:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8009196:	68f8      	ldr	r0, [r7, #12]
 8009198:	f000 f84e 	bl	8009238 <_ZNK9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama8DrawableEEE8max_sizeEv>
 800919c:	4602      	mov	r2, r0
 800919e:	68bb      	ldr	r3, [r7, #8]
 80091a0:	4293      	cmp	r3, r2
 80091a2:	bf8c      	ite	hi
 80091a4:	2301      	movhi	r3, #1
 80091a6:	2300      	movls	r3, #0
 80091a8:	b2db      	uxtb	r3, r3
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d001      	beq.n	80091b2 <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama8DrawableEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80091ae:	f00e f9b0 	bl	8017512 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80091b2:	68bb      	ldr	r3, [r7, #8]
 80091b4:	00db      	lsls	r3, r3, #3
 80091b6:	4618      	mov	r0, r3
 80091b8:	f00e f97d 	bl	80174b6 <_Znwj>
 80091bc:	4603      	mov	r3, r0
      }
 80091be:	4618      	mov	r0, r3
 80091c0:	3710      	adds	r7, #16
 80091c2:	46bd      	mov	sp, r7
 80091c4:	bd80      	pop	{r7, pc}

080091c6 <_ZNSt13move_iteratorIPSt10shared_ptrIN4tama8DrawableEEEC1ES4_>:
      move_iterator(iterator_type __i)
 80091c6:	b480      	push	{r7}
 80091c8:	b083      	sub	sp, #12
 80091ca:	af00      	add	r7, sp, #0
 80091cc:	6078      	str	r0, [r7, #4]
 80091ce:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	683a      	ldr	r2, [r7, #0]
 80091d4:	601a      	str	r2, [r3, #0]
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	4618      	mov	r0, r3
 80091da:	370c      	adds	r7, #12
 80091dc:	46bd      	mov	sp, r7
 80091de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e2:	4770      	bx	lr

080091e4 <_ZSt18uninitialized_copyISt13move_iteratorIPSt10shared_ptrIN4tama8DrawableEEES5_ET0_T_S8_S7_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b086      	sub	sp, #24
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	60f8      	str	r0, [r7, #12]
 80091ec:	60b9      	str	r1, [r7, #8]
 80091ee:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 80091f0:	2301      	movs	r3, #1
 80091f2:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 80091f4:	687a      	ldr	r2, [r7, #4]
 80091f6:	68b9      	ldr	r1, [r7, #8]
 80091f8:	68f8      	ldr	r0, [r7, #12]
 80091fa:	f000 f829 	bl	8009250 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPSt10shared_ptrIN4tama8DrawableEEES7_EET0_T_SA_S9_>
 80091fe:	4603      	mov	r3, r0
    }
 8009200:	4618      	mov	r0, r3
 8009202:	3718      	adds	r7, #24
 8009204:	46bd      	mov	sp, r7
 8009206:	bd80      	pop	{r7, pc}

08009208 <_ZNSt16allocator_traitsISaIN4tama7TextureEEE9constructIS1_JRjS5_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8009208:	b590      	push	{r4, r7, lr}
 800920a:	b085      	sub	sp, #20
 800920c:	af00      	add	r7, sp, #0
 800920e:	60f8      	str	r0, [r7, #12]
 8009210:	60b9      	str	r1, [r7, #8]
 8009212:	607a      	str	r2, [r7, #4]
 8009214:	603b      	str	r3, [r7, #0]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8009216:	6878      	ldr	r0, [r7, #4]
 8009218:	f7ff fc50 	bl	8008abc <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>
 800921c:	4604      	mov	r4, r0
 800921e:	6838      	ldr	r0, [r7, #0]
 8009220:	f7ff fc4c 	bl	8008abc <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>
 8009224:	4603      	mov	r3, r0
 8009226:	4622      	mov	r2, r4
 8009228:	68b9      	ldr	r1, [r7, #8]
 800922a:	68f8      	ldr	r0, [r7, #12]
 800922c:	f000 f83f 	bl	80092ae <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEE9constructIS2_JRjS5_EEEvPT_DpOT0_>
 8009230:	bf00      	nop
 8009232:	3714      	adds	r7, #20
 8009234:	46bd      	mov	sp, r7
 8009236:	bd90      	pop	{r4, r7, pc}

08009238 <_ZNK9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama8DrawableEEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8009238:	b480      	push	{r7}
 800923a:	b083      	sub	sp, #12
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8009240:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8009244:	4618      	mov	r0, r3
 8009246:	370c      	adds	r7, #12
 8009248:	46bd      	mov	sp, r7
 800924a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924e:	4770      	bx	lr

08009250 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPSt10shared_ptrIN4tama8DrawableEEES7_EET0_T_SA_S9_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8009250:	b590      	push	{r4, r7, lr}
 8009252:	b087      	sub	sp, #28
 8009254:	af00      	add	r7, sp, #0
 8009256:	60f8      	str	r0, [r7, #12]
 8009258:	60b9      	str	r1, [r7, #8]
 800925a:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 8009260:	f107 0208 	add.w	r2, r7, #8
 8009264:	f107 030c 	add.w	r3, r7, #12
 8009268:	4611      	mov	r1, r2
 800926a:	4618      	mov	r0, r3
 800926c:	f000 f841 	bl	80092f2 <_ZStneIPSt10shared_ptrIN4tama8DrawableEEEbRKSt13move_iteratorIT_ES9_>
 8009270:	4603      	mov	r3, r0
 8009272:	2b00      	cmp	r3, #0
 8009274:	d016      	beq.n	80092a4 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPSt10shared_ptrIN4tama8DrawableEEES7_EET0_T_SA_S9_+0x54>
		std::_Construct(std::__addressof(*__cur), *__first);
 8009276:	6978      	ldr	r0, [r7, #20]
 8009278:	f7f9 fccc 	bl	8002c14 <_ZSt11__addressofISt10shared_ptrIN4tama8DrawableEEEPT_RS4_>
 800927c:	4604      	mov	r4, r0
 800927e:	f107 030c 	add.w	r3, r7, #12
 8009282:	4618      	mov	r0, r3
 8009284:	f000 f857 	bl	8009336 <_ZNKSt13move_iteratorIPSt10shared_ptrIN4tama8DrawableEEEdeEv>
 8009288:	4603      	mov	r3, r0
 800928a:	4619      	mov	r1, r3
 800928c:	4620      	mov	r0, r4
 800928e:	f000 f869 	bl	8009364 <_ZSt10_ConstructISt10shared_ptrIN4tama8DrawableEEJS3_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 8009292:	f107 030c 	add.w	r3, r7, #12
 8009296:	4618      	mov	r0, r3
 8009298:	f000 f83c 	bl	8009314 <_ZNSt13move_iteratorIPSt10shared_ptrIN4tama8DrawableEEEppEv>
 800929c:	697b      	ldr	r3, [r7, #20]
 800929e:	3308      	adds	r3, #8
 80092a0:	617b      	str	r3, [r7, #20]
 80092a2:	e7dd      	b.n	8009260 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPSt10shared_ptrIN4tama8DrawableEEES7_EET0_T_SA_S9_+0x10>
	      return __cur;
 80092a4:	697b      	ldr	r3, [r7, #20]
	}
 80092a6:	4618      	mov	r0, r3
 80092a8:	371c      	adds	r7, #28
 80092aa:	46bd      	mov	sp, r7
 80092ac:	bd90      	pop	{r4, r7, pc}

080092ae <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEE9constructIS2_JRjS5_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 80092ae:	b5b0      	push	{r4, r5, r7, lr}
 80092b0:	b084      	sub	sp, #16
 80092b2:	af00      	add	r7, sp, #0
 80092b4:	60f8      	str	r0, [r7, #12]
 80092b6:	60b9      	str	r1, [r7, #8]
 80092b8:	607a      	str	r2, [r7, #4]
 80092ba:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80092bc:	6878      	ldr	r0, [r7, #4]
 80092be:	f7ff fbfd 	bl	8008abc <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>
 80092c2:	4603      	mov	r3, r0
 80092c4:	681c      	ldr	r4, [r3, #0]
 80092c6:	6838      	ldr	r0, [r7, #0]
 80092c8:	f7ff fbf8 	bl	8008abc <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>
 80092cc:	4603      	mov	r3, r0
 80092ce:	681d      	ldr	r5, [r3, #0]
 80092d0:	68bb      	ldr	r3, [r7, #8]
 80092d2:	4619      	mov	r1, r3
 80092d4:	2010      	movs	r0, #16
 80092d6:	f7f7 f932 	bl	800053e <_ZnwjPv>
 80092da:	4603      	mov	r3, r0
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d004      	beq.n	80092ea <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEE9constructIS2_JRjS5_EEEvPT_DpOT0_+0x3c>
 80092e0:	462a      	mov	r2, r5
 80092e2:	4621      	mov	r1, r4
 80092e4:	4618      	mov	r0, r3
 80092e6:	f7fd fa81 	bl	80067ec <_ZN4tama7TextureC1Ejj>
 80092ea:	bf00      	nop
 80092ec:	3710      	adds	r7, #16
 80092ee:	46bd      	mov	sp, r7
 80092f0:	bdb0      	pop	{r4, r5, r7, pc}

080092f2 <_ZStneIPSt10shared_ptrIN4tama8DrawableEEEbRKSt13move_iteratorIT_ES9_>:
    operator!=(const move_iterator<_Iterator>& __x,
 80092f2:	b580      	push	{r7, lr}
 80092f4:	b082      	sub	sp, #8
 80092f6:	af00      	add	r7, sp, #0
 80092f8:	6078      	str	r0, [r7, #4]
 80092fa:	6039      	str	r1, [r7, #0]
    { return !(__x == __y); }
 80092fc:	6839      	ldr	r1, [r7, #0]
 80092fe:	6878      	ldr	r0, [r7, #4]
 8009300:	f000 f849 	bl	8009396 <_ZSteqIPSt10shared_ptrIN4tama8DrawableEEEbRKSt13move_iteratorIT_ES9_>
 8009304:	4603      	mov	r3, r0
 8009306:	f083 0301 	eor.w	r3, r3, #1
 800930a:	b2db      	uxtb	r3, r3
 800930c:	4618      	mov	r0, r3
 800930e:	3708      	adds	r7, #8
 8009310:	46bd      	mov	sp, r7
 8009312:	bd80      	pop	{r7, pc}

08009314 <_ZNSt13move_iteratorIPSt10shared_ptrIN4tama8DrawableEEEppEv>:
      operator++()
 8009314:	b480      	push	{r7}
 8009316:	b083      	sub	sp, #12
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
	++_M_current;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	f103 0208 	add.w	r2, r3, #8
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	601a      	str	r2, [r3, #0]
	return *this;
 8009328:	687b      	ldr	r3, [r7, #4]
      }
 800932a:	4618      	mov	r0, r3
 800932c:	370c      	adds	r7, #12
 800932e:	46bd      	mov	sp, r7
 8009330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009334:	4770      	bx	lr

08009336 <_ZNKSt13move_iteratorIPSt10shared_ptrIN4tama8DrawableEEEdeEv>:
      operator*() const
 8009336:	b480      	push	{r7}
 8009338:	b083      	sub	sp, #12
 800933a:	af00      	add	r7, sp, #0
 800933c:	6078      	str	r0, [r7, #4]
      { return static_cast<reference>(*_M_current); }
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	4618      	mov	r0, r3
 8009344:	370c      	adds	r7, #12
 8009346:	46bd      	mov	sp, r7
 8009348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934c:	4770      	bx	lr

0800934e <_ZSt7forwardISt10shared_ptrIN4tama8DrawableEEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800934e:	b480      	push	{r7}
 8009350:	b083      	sub	sp, #12
 8009352:	af00      	add	r7, sp, #0
 8009354:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	4618      	mov	r0, r3
 800935a:	370c      	adds	r7, #12
 800935c:	46bd      	mov	sp, r7
 800935e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009362:	4770      	bx	lr

08009364 <_ZSt10_ConstructISt10shared_ptrIN4tama8DrawableEEJS3_EEvPT_DpOT0_>:
    _Construct(_T1* __p, _Args&&... __args)
 8009364:	b590      	push	{r4, r7, lr}
 8009366:	b083      	sub	sp, #12
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
 800936c:	6039      	str	r1, [r7, #0]
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
 800936e:	6838      	ldr	r0, [r7, #0]
 8009370:	f7ff ffed 	bl	800934e <_ZSt7forwardISt10shared_ptrIN4tama8DrawableEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8009374:	4604      	mov	r4, r0
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	4619      	mov	r1, r3
 800937a:	2008      	movs	r0, #8
 800937c:	f7f7 f8df 	bl	800053e <_ZnwjPv>
 8009380:	4603      	mov	r3, r0
 8009382:	2b00      	cmp	r3, #0
 8009384:	d003      	beq.n	800938e <_ZSt10_ConstructISt10shared_ptrIN4tama8DrawableEEJS3_EEvPT_DpOT0_+0x2a>
 8009386:	4621      	mov	r1, r4
 8009388:	4618      	mov	r0, r3
 800938a:	f000 f825 	bl	80093d8 <_ZNSt10shared_ptrIN4tama8DrawableEEC1EOS2_>
 800938e:	bf00      	nop
 8009390:	370c      	adds	r7, #12
 8009392:	46bd      	mov	sp, r7
 8009394:	bd90      	pop	{r4, r7, pc}

08009396 <_ZSteqIPSt10shared_ptrIN4tama8DrawableEEEbRKSt13move_iteratorIT_ES9_>:
    operator==(const move_iterator<_Iterator>& __x,
 8009396:	b590      	push	{r4, r7, lr}
 8009398:	b083      	sub	sp, #12
 800939a:	af00      	add	r7, sp, #0
 800939c:	6078      	str	r0, [r7, #4]
 800939e:	6039      	str	r1, [r7, #0]
    { return __x.base() == __y.base(); }
 80093a0:	6878      	ldr	r0, [r7, #4]
 80093a2:	f000 f82c 	bl	80093fe <_ZNKSt13move_iteratorIPSt10shared_ptrIN4tama8DrawableEEE4baseEv>
 80093a6:	4604      	mov	r4, r0
 80093a8:	6838      	ldr	r0, [r7, #0]
 80093aa:	f000 f828 	bl	80093fe <_ZNKSt13move_iteratorIPSt10shared_ptrIN4tama8DrawableEEE4baseEv>
 80093ae:	4603      	mov	r3, r0
 80093b0:	429c      	cmp	r4, r3
 80093b2:	bf0c      	ite	eq
 80093b4:	2301      	moveq	r3, #1
 80093b6:	2300      	movne	r3, #0
 80093b8:	b2db      	uxtb	r3, r3
 80093ba:	4618      	mov	r0, r3
 80093bc:	370c      	adds	r7, #12
 80093be:	46bd      	mov	sp, r7
 80093c0:	bd90      	pop	{r4, r7, pc}

080093c2 <_ZSt4moveIRSt10shared_ptrIN4tama8DrawableEEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 80093c2:	b480      	push	{r7}
 80093c4:	b083      	sub	sp, #12
 80093c6:	af00      	add	r7, sp, #0
 80093c8:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	4618      	mov	r0, r3
 80093ce:	370c      	adds	r7, #12
 80093d0:	46bd      	mov	sp, r7
 80093d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d6:	4770      	bx	lr

080093d8 <_ZNSt10shared_ptrIN4tama8DrawableEEC1EOS2_>:
      shared_ptr(shared_ptr&& __r) noexcept
 80093d8:	b590      	push	{r4, r7, lr}
 80093da:	b083      	sub	sp, #12
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
 80093e0:	6039      	str	r1, [r7, #0]
      : __shared_ptr<_Tp>(std::move(__r)) { }
 80093e2:	687c      	ldr	r4, [r7, #4]
 80093e4:	6838      	ldr	r0, [r7, #0]
 80093e6:	f7ff ffec 	bl	80093c2 <_ZSt4moveIRSt10shared_ptrIN4tama8DrawableEEEONSt16remove_referenceIT_E4typeEOS6_>
 80093ea:	4603      	mov	r3, r0
 80093ec:	4619      	mov	r1, r3
 80093ee:	4620      	mov	r0, r4
 80093f0:	f000 f811 	bl	8009416 <_ZNSt12__shared_ptrIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0EEC1EOS4_>
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	4618      	mov	r0, r3
 80093f8:	370c      	adds	r7, #12
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bd90      	pop	{r4, r7, pc}

080093fe <_ZNKSt13move_iteratorIPSt10shared_ptrIN4tama8DrawableEEE4baseEv>:
      base() const
 80093fe:	b480      	push	{r7}
 8009400:	b083      	sub	sp, #12
 8009402:	af00      	add	r7, sp, #0
 8009404:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	4618      	mov	r0, r3
 800940c:	370c      	adds	r7, #12
 800940e:	46bd      	mov	sp, r7
 8009410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009414:	4770      	bx	lr

08009416 <_ZNSt12__shared_ptrIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0EEC1EOS4_>:
      __shared_ptr(__shared_ptr&& __r) noexcept
 8009416:	b580      	push	{r7, lr}
 8009418:	b082      	sub	sp, #8
 800941a:	af00      	add	r7, sp, #0
 800941c:	6078      	str	r0, [r7, #4]
 800941e:	6039      	str	r1, [r7, #0]
      : _M_ptr(__r._M_ptr), _M_refcount()
 8009420:	683b      	ldr	r3, [r7, #0]
 8009422:	681a      	ldr	r2, [r3, #0]
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	601a      	str	r2, [r3, #0]
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	3304      	adds	r3, #4
 800942c:	4618      	mov	r0, r3
 800942e:	f7f7 fd24 	bl	8000e7a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	_M_refcount._M_swap(__r._M_refcount);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	1d1a      	adds	r2, r3, #4
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	3304      	adds	r3, #4
 800943a:	4619      	mov	r1, r3
 800943c:	4610      	mov	r0, r2
 800943e:	f7f7 fd2a 	bl	8000e96 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	__r._M_ptr = 0;
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	2200      	movs	r2, #0
 8009446:	601a      	str	r2, [r3, #0]
      }
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	4618      	mov	r0, r3
 800944c:	3708      	adds	r7, #8
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}

08009452 <_ZN4tama11DisplayDataD1Ev>:
    public:
        void * data;
        unsigned size;
        unsigned elementSize;

        ~DisplayData() {
 8009452:	b580      	push	{r7, lr}
 8009454:	b082      	sub	sp, #8
 8009456:	af00      	add	r7, sp, #0
 8009458:	6078      	str	r0, [r7, #4]
            delete[] ((short *)data);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d004      	beq.n	800946c <_ZN4tama11DisplayDataD1Ev+0x1a>
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	4618      	mov	r0, r3
 8009468:	f00e f81c 	bl	80174a4 <_ZdaPv>
        }
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	4618      	mov	r0, r3
 8009470:	3708      	adds	r7, #8
 8009472:	46bd      	mov	sp, r7
 8009474:	bd80      	pop	{r7, pc}
	...

08009478 <_ZN4tama25Stm32SoundPlayingStrategy4playENS_4ToneE>:
namespace tama
{
    class Stm32SoundPlayingStrategy : public SoundPlayingStrategy
    {
    public:
        void play(Tone tone) override
 8009478:	b480      	push	{r7}
 800947a:	b085      	sub	sp, #20
 800947c:	af00      	add	r7, sp, #0
 800947e:	60f8      	str	r0, [r7, #12]
 8009480:	1d3b      	adds	r3, r7, #4
 8009482:	e883 0006 	stmia.w	r3, {r1, r2}
        {
            if (tone.value == 0)
 8009486:	68bb      	ldr	r3, [r7, #8]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d104      	bne.n	8009496 <_ZN4tama25Stm32SoundPlayingStrategy4playENS_4ToneE+0x1e>
            {
                __HAL_TIM_SET_PRESCALER(&htim3, 0);
 800948c:	4b0a      	ldr	r3, [pc, #40]	; (80094b8 <_ZN4tama25Stm32SoundPlayingStrategy4playENS_4ToneE+0x40>)
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	2200      	movs	r2, #0
 8009492:	629a      	str	r2, [r3, #40]	; 0x28
            else
            {
                __HAL_TIM_SET_PRESCALER(&htim3, 175 - 5 * (tone.value - 1));
            }

        }
 8009494:	e009      	b.n	80094aa <_ZN4tama25Stm32SoundPlayingStrategy4playENS_4ToneE+0x32>
                __HAL_TIM_SET_PRESCALER(&htim3, 175 - 5 * (tone.value - 1));
 8009496:	68ba      	ldr	r2, [r7, #8]
 8009498:	4613      	mov	r3, r2
 800949a:	079b      	lsls	r3, r3, #30
 800949c:	1a9b      	subs	r3, r3, r2
 800949e:	009b      	lsls	r3, r3, #2
 80094a0:	1a9a      	subs	r2, r3, r2
 80094a2:	4b05      	ldr	r3, [pc, #20]	; (80094b8 <_ZN4tama25Stm32SoundPlayingStrategy4playENS_4ToneE+0x40>)
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	32b4      	adds	r2, #180	; 0xb4
 80094a8:	629a      	str	r2, [r3, #40]	; 0x28
        }
 80094aa:	bf00      	nop
 80094ac:	3714      	adds	r7, #20
 80094ae:	46bd      	mov	sp, r7
 80094b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b4:	4770      	bx	lr
 80094b6:	bf00      	nop
 80094b8:	200003ec 	.word	0x200003ec

080094bc <_ZN4tama25Stm32SoundPlayingStrategy4stopEv>:

        void stop() override
 80094bc:	b480      	push	{r7}
 80094be:	b083      	sub	sp, #12
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
        {
            __HAL_TIM_SET_PRESCALER(&htim3, 0);
 80094c4:	4b04      	ldr	r3, [pc, #16]	; (80094d8 <_ZN4tama25Stm32SoundPlayingStrategy4stopEv+0x1c>)
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	2200      	movs	r2, #0
 80094ca:	629a      	str	r2, [r3, #40]	; 0x28
        }
 80094cc:	bf00      	nop
 80094ce:	370c      	adds	r7, #12
 80094d0:	46bd      	mov	sp, r7
 80094d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d6:	4770      	bx	lr
 80094d8:	200003ec 	.word	0x200003ec

080094dc <_ZNSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_ptr() = default;
 80094dc:	b580      	push	{r7, lr}
 80094de:	b082      	sub	sp, #8
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	3304      	adds	r3, #4
 80094e8:	4618      	mov	r0, r3
 80094ea:	f7f7 faaa 	bl	8000a42 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	4618      	mov	r0, r3
 80094f2:	3708      	adds	r7, #8
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bd80      	pop	{r7, pc}

080094f8 <_ZNSt10shared_ptrIN4tama18Stm32TextureLoaderEED1Ev>:
    class shared_ptr : public __shared_ptr<_Tp>
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b082      	sub	sp, #8
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	4618      	mov	r0, r3
 8009504:	f7ff ffea 	bl	80094dc <_ZNSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	4618      	mov	r0, r3
 800950c:	3708      	adds	r7, #8
 800950e:	46bd      	mov	sp, r7
 8009510:	bd80      	pop	{r7, pc}

08009512 <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
 8009512:	b580      	push	{r7, lr}
 8009514:	b082      	sub	sp, #8
 8009516:	af00      	add	r7, sp, #0
 8009518:	6078      	str	r0, [r7, #4]
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	3304      	adds	r3, #4
 800951e:	4618      	mov	r0, r3
 8009520:	f7f7 fa8f 	bl	8000a42 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	4618      	mov	r0, r3
 8009528:	3708      	adds	r7, #8
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}

0800952e <_ZNSt10shared_ptrIN4tama27Nokia5110DisplayDataManagerEED1Ev>:
 800952e:	b580      	push	{r7, lr}
 8009530:	b082      	sub	sp, #8
 8009532:	af00      	add	r7, sp, #0
 8009534:	6078      	str	r0, [r7, #4]
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	4618      	mov	r0, r3
 800953a:	f7ff ffea 	bl	8009512 <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	4618      	mov	r0, r3
 8009542:	3708      	adds	r7, #8
 8009544:	46bd      	mov	sp, r7
 8009546:	bd80      	pop	{r7, pc}

08009548 <_ZNSt12__shared_ptrIN4tama16Stm32TimeMonitorELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
 8009548:	b580      	push	{r7, lr}
 800954a:	b082      	sub	sp, #8
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	3304      	adds	r3, #4
 8009554:	4618      	mov	r0, r3
 8009556:	f7f7 fa74 	bl	8000a42 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	4618      	mov	r0, r3
 800955e:	3708      	adds	r7, #8
 8009560:	46bd      	mov	sp, r7
 8009562:	bd80      	pop	{r7, pc}

08009564 <_ZNSt10shared_ptrIN4tama16Stm32TimeMonitorEED1Ev>:
 8009564:	b580      	push	{r7, lr}
 8009566:	b082      	sub	sp, #8
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	4618      	mov	r0, r3
 8009570:	f7ff ffea 	bl	8009548 <_ZNSt12__shared_ptrIN4tama16Stm32TimeMonitorELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	4618      	mov	r0, r3
 8009578:	3708      	adds	r7, #8
 800957a:	46bd      	mov	sp, r7
 800957c:	bd80      	pop	{r7, pc}

0800957e <_ZNSt12__shared_ptrIN4tama11TimeMonitorELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
 800957e:	b580      	push	{r7, lr}
 8009580:	b082      	sub	sp, #8
 8009582:	af00      	add	r7, sp, #0
 8009584:	6078      	str	r0, [r7, #4]
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	3304      	adds	r3, #4
 800958a:	4618      	mov	r0, r3
 800958c:	f7f7 fa59 	bl	8000a42 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	4618      	mov	r0, r3
 8009594:	3708      	adds	r7, #8
 8009596:	46bd      	mov	sp, r7
 8009598:	bd80      	pop	{r7, pc}

0800959a <_ZNSt10shared_ptrIN4tama11TimeMonitorEED1Ev>:
 800959a:	b580      	push	{r7, lr}
 800959c:	b082      	sub	sp, #8
 800959e:	af00      	add	r7, sp, #0
 80095a0:	6078      	str	r0, [r7, #4]
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	4618      	mov	r0, r3
 80095a6:	f7ff ffea 	bl	800957e <_ZNSt12__shared_ptrIN4tama11TimeMonitorELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	4618      	mov	r0, r3
 80095ae:	3708      	adds	r7, #8
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bd80      	pop	{r7, pc}

080095b4 <_ZNSt12__shared_ptrIN4tama25Stm32SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b082      	sub	sp, #8
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	3304      	adds	r3, #4
 80095c0:	4618      	mov	r0, r3
 80095c2:	f7f7 fa3e 	bl	8000a42 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	4618      	mov	r0, r3
 80095ca:	3708      	adds	r7, #8
 80095cc:	46bd      	mov	sp, r7
 80095ce:	bd80      	pop	{r7, pc}

080095d0 <_ZNSt10shared_ptrIN4tama25Stm32SoundPlayingStrategyEED1Ev>:
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b082      	sub	sp, #8
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	4618      	mov	r0, r3
 80095dc:	f7ff ffea 	bl	80095b4 <_ZNSt12__shared_ptrIN4tama25Stm32SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	4618      	mov	r0, r3
 80095e4:	3708      	adds	r7, #8
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}

080095ea <_ZNSt12__shared_ptrIN4tama20SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
 80095ea:	b580      	push	{r7, lr}
 80095ec:	b082      	sub	sp, #8
 80095ee:	af00      	add	r7, sp, #0
 80095f0:	6078      	str	r0, [r7, #4]
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	3304      	adds	r3, #4
 80095f6:	4618      	mov	r0, r3
 80095f8:	f7f7 fa23 	bl	8000a42 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	4618      	mov	r0, r3
 8009600:	3708      	adds	r7, #8
 8009602:	46bd      	mov	sp, r7
 8009604:	bd80      	pop	{r7, pc}

08009606 <_ZNSt10shared_ptrIN4tama20SoundPlayingStrategyEED1Ev>:
 8009606:	b580      	push	{r7, lr}
 8009608:	b082      	sub	sp, #8
 800960a:	af00      	add	r7, sp, #0
 800960c:	6078      	str	r0, [r7, #4]
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	4618      	mov	r0, r3
 8009612:	f7ff ffea 	bl	80095ea <_ZNSt12__shared_ptrIN4tama20SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	4618      	mov	r0, r3
 800961a:	3708      	adds	r7, #8
 800961c:	46bd      	mov	sp, r7
 800961e:	bd80      	pop	{r7, pc}

08009620 <_ZNSt12__shared_ptrIN4tama11TimeMonitorELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 8009620:	b580      	push	{r7, lr}
 8009622:	b082      	sub	sp, #8
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
 8009628:	6039      	str	r1, [r7, #0]
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	681a      	ldr	r2, [r3, #0]
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	601a      	str	r2, [r3, #0]
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	1d1a      	adds	r2, r3, #4
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	3304      	adds	r3, #4
 800963a:	4619      	mov	r1, r3
 800963c:	4610      	mov	r0, r2
 800963e:	f7f7 f9e9 	bl	8000a14 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	4618      	mov	r0, r3
 8009646:	3708      	adds	r7, #8
 8009648:	46bd      	mov	sp, r7
 800964a:	bd80      	pop	{r7, pc}

0800964c <_ZNSt10shared_ptrIN4tama11TimeMonitorEEC1ERKS2_>:
      shared_ptr(const shared_ptr&) noexcept = default;
 800964c:	b580      	push	{r7, lr}
 800964e:	b082      	sub	sp, #8
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
 8009654:	6039      	str	r1, [r7, #0]
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	683a      	ldr	r2, [r7, #0]
 800965a:	4611      	mov	r1, r2
 800965c:	4618      	mov	r0, r3
 800965e:	f7ff ffdf 	bl	8009620 <_ZNSt12__shared_ptrIN4tama11TimeMonitorELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	4618      	mov	r0, r3
 8009666:	3708      	adds	r7, #8
 8009668:	46bd      	mov	sp, r7
 800966a:	bd80      	pop	{r7, pc}

0800966c <_ZN4tama11SoundPlayerD1Ev>:
#include "../tone/Tone.h"
#include "../SoundPlayingStrategy.h"

namespace tama
{
    class SoundPlayer
 800966c:	b580      	push	{r7, lr}
 800966e:	b082      	sub	sp, #8
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	3310      	adds	r3, #16
 8009678:	4618      	mov	r0, r3
 800967a:	f7f9 fdbd 	bl	80031f8 <_ZNSt6vectorIN4tama4ToneESaIS1_EED1Ev>
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	3308      	adds	r3, #8
 8009682:	4618      	mov	r0, r3
 8009684:	f7ff ffbf 	bl	8009606 <_ZNSt10shared_ptrIN4tama20SoundPlayingStrategyEED1Ev>
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	4618      	mov	r0, r3
 800968c:	f7ff ff85 	bl	800959a <_ZNSt10shared_ptrIN4tama11TimeMonitorEED1Ev>
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	4618      	mov	r0, r3
 8009694:	3708      	adds	r7, #8
 8009696:	46bd      	mov	sp, r7
 8009698:	bd80      	pop	{r7, pc}

0800969a <_ZNSt12__shared_ptrIN4tama10Stm32InputELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_ptr() = default;
 800969a:	b580      	push	{r7, lr}
 800969c:	b082      	sub	sp, #8
 800969e:	af00      	add	r7, sp, #0
 80096a0:	6078      	str	r0, [r7, #4]
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	3304      	adds	r3, #4
 80096a6:	4618      	mov	r0, r3
 80096a8:	f7f7 f9cb 	bl	8000a42 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	4618      	mov	r0, r3
 80096b0:	3708      	adds	r7, #8
 80096b2:	46bd      	mov	sp, r7
 80096b4:	bd80      	pop	{r7, pc}

080096b6 <_ZNSt10shared_ptrIN4tama10Stm32InputEED1Ev>:
    class shared_ptr : public __shared_ptr<_Tp>
 80096b6:	b580      	push	{r7, lr}
 80096b8:	b082      	sub	sp, #8
 80096ba:	af00      	add	r7, sp, #0
 80096bc:	6078      	str	r0, [r7, #4]
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	4618      	mov	r0, r3
 80096c2:	f7ff ffea 	bl	800969a <_ZNSt12__shared_ptrIN4tama10Stm32InputELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	4618      	mov	r0, r3
 80096ca:	3708      	adds	r7, #8
 80096cc:	46bd      	mov	sp, r7
 80096ce:	bd80      	pop	{r7, pc}

080096d0 <_ZNSt12__shared_ptrIN4tama20SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b082      	sub	sp, #8
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
 80096d8:	6039      	str	r1, [r7, #0]
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	681a      	ldr	r2, [r3, #0]
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	601a      	str	r2, [r3, #0]
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	1d1a      	adds	r2, r3, #4
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	3304      	adds	r3, #4
 80096ea:	4619      	mov	r1, r3
 80096ec:	4610      	mov	r0, r2
 80096ee:	f7f7 f991 	bl	8000a14 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	4618      	mov	r0, r3
 80096f6:	3708      	adds	r7, #8
 80096f8:	46bd      	mov	sp, r7
 80096fa:	bd80      	pop	{r7, pc}

080096fc <_ZNSt10shared_ptrIN4tama20SoundPlayingStrategyEEC1ERKS2_>:
      shared_ptr(const shared_ptr&) noexcept = default;
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b082      	sub	sp, #8
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
 8009704:	6039      	str	r1, [r7, #0]
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	683a      	ldr	r2, [r7, #0]
 800970a:	4611      	mov	r1, r2
 800970c:	4618      	mov	r0, r3
 800970e:	f7ff ffdf 	bl	80096d0 <_ZNSt12__shared_ptrIN4tama20SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	4618      	mov	r0, r3
 8009716:	3708      	adds	r7, #8
 8009718:	46bd      	mov	sp, r7
 800971a:	bd80      	pop	{r7, pc}

0800971c <_ZNSt12__shared_ptrIN4tama14InitialLoadingELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_ptr() = default;
 800971c:	b580      	push	{r7, lr}
 800971e:	b082      	sub	sp, #8
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	3304      	adds	r3, #4
 8009728:	4618      	mov	r0, r3
 800972a:	f7f7 f98a 	bl	8000a42 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	4618      	mov	r0, r3
 8009732:	3708      	adds	r7, #8
 8009734:	46bd      	mov	sp, r7
 8009736:	bd80      	pop	{r7, pc}

08009738 <_ZNSt10shared_ptrIN4tama14InitialLoadingEED1Ev>:
    class shared_ptr : public __shared_ptr<_Tp>
 8009738:	b580      	push	{r7, lr}
 800973a:	b082      	sub	sp, #8
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	4618      	mov	r0, r3
 8009744:	f7ff ffea 	bl	800971c <_ZNSt12__shared_ptrIN4tama14InitialLoadingELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	4618      	mov	r0, r3
 800974c:	3708      	adds	r7, #8
 800974e:	46bd      	mov	sp, r7
 8009750:	bd80      	pop	{r7, pc}
	...

08009754 <_ZN4tama4Main3runEv>:
#include "../Core/input/Input.h"
#include "../STM32F411Disco-drivers/input/Stm32Input.h"


[[noreturn]] void tama::Main::run()
{
 8009754:	b5b0      	push	{r4, r5, r7, lr}
 8009756:	b0f8      	sub	sp, #480	; 0x1e0
 8009758:	af00      	add	r7, sp, #0
 800975a:	1d3b      	adds	r3, r7, #4
 800975c:	6018      	str	r0, [r3, #0]
    unsigned fps = 4;
 800975e:	2304      	movs	r3, #4
 8009760:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
    unsigned frameMillis = 1000 / fps;
 8009764:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009768:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 800976c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009770:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8

    DisplayConfig displayConfig = getDefaultNokia5110DisplayConfig();
 8009774:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8009778:	1d3b      	adds	r3, r7, #4
 800977a:	6819      	ldr	r1, [r3, #0]
 800977c:	4610      	mov	r0, r2
 800977e:	f000 fb07 	bl	8009d90 <_ZN4tama4Main32getDefaultNokia5110DisplayConfigEv>
    std::unique_ptr<Display> display = std::make_unique<Nokia5510Display>(displayConfig);
 8009782:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8009786:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800978a:	4611      	mov	r1, r2
 800978c:	4618      	mov	r0, r3
 800978e:	f000 fb3a 	bl	8009e06 <_ZSt11make_uniqueIN4tama16Nokia5510DisplayEJRNS0_13DisplayConfigEEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
 8009792:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8009796:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800979a:	4611      	mov	r1, r2
 800979c:	4618      	mov	r0, r3
 800979e:	f000 fb6b 	bl	8009e78 <_ZNSt10unique_ptrIN4tama7DisplayESt14default_deleteIS1_EEC1INS0_16Nokia5510DisplayES2_IS6_EvEEOS_IT_T0_E>
 80097a2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80097a6:	4618      	mov	r0, r3
 80097a8:	f000 fb47 	bl	8009e3a <_ZNSt10unique_ptrIN4tama16Nokia5510DisplayESt14default_deleteIS1_EED1Ev>
    std::shared_ptr<TextureLoader> textureLoader = std::make_shared<Stm32TextureLoader>();
 80097ac:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80097b0:	4618      	mov	r0, r3
 80097b2:	f000 fb7d 	bl	8009eb0 <_ZSt11make_sharedIN4tama18Stm32TextureLoaderEJEESt10shared_ptrIT_EDpOT0_>
 80097b6:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80097ba:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80097be:	4611      	mov	r1, r2
 80097c0:	4618      	mov	r0, r3
 80097c2:	f000 fb99 	bl	8009ef8 <_ZNSt10shared_ptrIN4tama13TextureLoaderEEC1INS0_18Stm32TextureLoaderEvEEOS_IT_E>
 80097c6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80097ca:	4618      	mov	r0, r3
 80097cc:	f7ff fe94 	bl	80094f8 <_ZNSt10shared_ptrIN4tama18Stm32TextureLoaderEED1Ev>
    std::shared_ptr<DisplayDataManager> dataConverter = std::make_shared<Nokia5110DisplayDataManager>();
 80097d0:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80097d4:	4618      	mov	r0, r3
 80097d6:	f000 fba2 	bl	8009f1e <_ZSt11make_sharedIN4tama27Nokia5110DisplayDataManagerEJEESt10shared_ptrIT_EDpOT0_>
 80097da:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 80097de:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80097e2:	4611      	mov	r1, r2
 80097e4:	4618      	mov	r0, r3
 80097e6:	f000 fbbe 	bl	8009f66 <_ZNSt10shared_ptrIN4tama18DisplayDataManagerEEC1INS0_27Nokia5110DisplayDataManagerEvEEOS_IT_E>
 80097ea:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80097ee:	4618      	mov	r0, r3
 80097f0:	f7ff fe9d 	bl	800952e <_ZNSt10shared_ptrIN4tama27Nokia5110DisplayDataManagerEED1Ev>
    std::shared_ptr<TimeMonitor> soundTimeMonitor = std::make_shared<Stm32TimeMonitor>();
 80097f4:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80097f8:	4618      	mov	r0, r3
 80097fa:	f000 fbc7 	bl	8009f8c <_ZSt11make_sharedIN4tama16Stm32TimeMonitorEJEESt10shared_ptrIT_EDpOT0_>
 80097fe:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8009802:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8009806:	4611      	mov	r1, r2
 8009808:	4618      	mov	r0, r3
 800980a:	f000 fbe3 	bl	8009fd4 <_ZNSt10shared_ptrIN4tama11TimeMonitorEEC1INS0_16Stm32TimeMonitorEvEEOS_IT_E>
 800980e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8009812:	4618      	mov	r0, r3
 8009814:	f7ff fea6 	bl	8009564 <_ZNSt10shared_ptrIN4tama16Stm32TimeMonitorEED1Ev>
    std::shared_ptr<TimeMonitor> refreshTimeMonitor = std::make_shared<Stm32TimeMonitor>();
 8009818:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800981c:	4618      	mov	r0, r3
 800981e:	f000 fbb5 	bl	8009f8c <_ZSt11make_sharedIN4tama16Stm32TimeMonitorEJEESt10shared_ptrIT_EDpOT0_>
 8009822:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8009826:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800982a:	4611      	mov	r1, r2
 800982c:	4618      	mov	r0, r3
 800982e:	f000 fbd1 	bl	8009fd4 <_ZNSt10shared_ptrIN4tama11TimeMonitorEEC1INS0_16Stm32TimeMonitorEvEEOS_IT_E>
 8009832:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8009836:	4618      	mov	r0, r3
 8009838:	f7ff fe94 	bl	8009564 <_ZNSt10shared_ptrIN4tama16Stm32TimeMonitorEED1Ev>
    std::shared_ptr<SoundPlayingStrategy> playingStrategy = std::make_shared<Stm32SoundPlayingStrategy>();
 800983c:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8009840:	4618      	mov	r0, r3
 8009842:	f000 fbda 	bl	8009ffa <_ZSt11make_sharedIN4tama25Stm32SoundPlayingStrategyEJEESt10shared_ptrIT_EDpOT0_>
 8009846:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 800984a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800984e:	4611      	mov	r1, r2
 8009850:	4618      	mov	r0, r3
 8009852:	f000 fbf6 	bl	800a042 <_ZNSt10shared_ptrIN4tama20SoundPlayingStrategyEEC1INS0_25Stm32SoundPlayingStrategyEvEEOS_IT_E>
 8009856:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800985a:	4618      	mov	r0, r3
 800985c:	f7ff feb8 	bl	80095d0 <_ZNSt10shared_ptrIN4tama25Stm32SoundPlayingStrategyEED1Ev>
    SoundPlayer soundPlayer(soundTimeMonitor);
 8009860:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8009864:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8009868:	4611      	mov	r1, r2
 800986a:	4618      	mov	r0, r3
 800986c:	f7ff feee 	bl	800964c <_ZNSt10shared_ptrIN4tama11TimeMonitorEEC1ERKS2_>
 8009870:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 8009874:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009878:	4611      	mov	r1, r2
 800987a:	4618      	mov	r0, r3
 800987c:	f7f9 fbf9 	bl	8003072 <_ZN4tama11SoundPlayerC1ESt10shared_ptrINS_11TimeMonitorEE>
 8009880:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8009884:	4618      	mov	r0, r3
 8009886:	f7ff fe88 	bl	800959a <_ZNSt10shared_ptrIN4tama11TimeMonitorEED1Ev>
    std::shared_ptr<Input> input = std::make_shared<Stm32Input>();
 800988a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800988e:	4618      	mov	r0, r3
 8009890:	f000 fbea 	bl	800a068 <_ZSt11make_sharedIN4tama10Stm32InputEJEESt10shared_ptrIT_EDpOT0_>
 8009894:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8009898:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800989c:	4611      	mov	r1, r2
 800989e:	4618      	mov	r0, r3
 80098a0:	f000 fc06 	bl	800a0b0 <_ZNSt10shared_ptrIN4tama5InputEEC1INS0_10Stm32InputEvEEOS_IT_E>
 80098a4:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80098a8:	4618      	mov	r0, r3
 80098aa:	f7ff ff04 	bl	80096b6 <_ZNSt10shared_ptrIN4tama10Stm32InputEED1Ev>
    soundPlayer.setPlayingStrategy(playingStrategy);
 80098ae:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80098b2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80098b6:	4611      	mov	r1, r2
 80098b8:	4618      	mov	r0, r3
 80098ba:	f7ff ff1f 	bl	80096fc <_ZNSt10shared_ptrIN4tama20SoundPlayingStrategyEEC1ERKS2_>
 80098be:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 80098c2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80098c6:	4611      	mov	r1, r2
 80098c8:	4618      	mov	r0, r3
 80098ca:	f7f9 fbb8 	bl	800303e <_ZN4tama11SoundPlayer18setPlayingStrategyESt10shared_ptrINS_20SoundPlayingStrategyEE>
 80098ce:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80098d2:	4618      	mov	r0, r3
 80098d4:	f7ff fe97 	bl	8009606 <_ZNSt10shared_ptrIN4tama20SoundPlayingStrategyEED1Ev>
    std::vector<Tone> music;
 80098d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80098dc:	4618      	mov	r0, r3
 80098de:	f7f9 fc7e 	bl	80031de <_ZNSt6vectorIN4tama4ToneESaIS1_EEC1Ev>
    music.push_back({400, 10});
 80098e2:	4ad3      	ldr	r2, [pc, #844]	; (8009c30 <_ZN4tama4Main3runEv+0x4dc>)
 80098e4:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80098e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80098ec:	e883 0003 	stmia.w	r3, {r0, r1}
 80098f0:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80098f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80098f8:	4611      	mov	r1, r2
 80098fa:	4618      	mov	r0, r3
 80098fc:	f7fa fe07 	bl	800450e <_ZNSt6vectorIN4tama4ToneESaIS1_EE9push_backEOS1_>
    music.push_back({400, 5});
 8009900:	4acc      	ldr	r2, [pc, #816]	; (8009c34 <_ZN4tama4Main3runEv+0x4e0>)
 8009902:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8009906:	e892 0003 	ldmia.w	r2, {r0, r1}
 800990a:	e883 0003 	stmia.w	r3, {r0, r1}
 800990e:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8009912:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009916:	4611      	mov	r1, r2
 8009918:	4618      	mov	r0, r3
 800991a:	f7fa fdf8 	bl	800450e <_ZNSt6vectorIN4tama4ToneESaIS1_EE9push_backEOS1_>
    music.push_back({400, 10});
 800991e:	4ac4      	ldr	r2, [pc, #784]	; (8009c30 <_ZN4tama4Main3runEv+0x4dc>)
 8009920:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8009924:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009928:	e883 0003 	stmia.w	r3, {r0, r1}
 800992c:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8009930:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009934:	4611      	mov	r1, r2
 8009936:	4618      	mov	r0, r3
 8009938:	f7fa fde9 	bl	800450e <_ZNSt6vectorIN4tama4ToneESaIS1_EE9push_backEOS1_>
    music.push_back({400, 5});
 800993c:	4abd      	ldr	r2, [pc, #756]	; (8009c34 <_ZN4tama4Main3runEv+0x4e0>)
 800993e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009942:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009946:	e883 0003 	stmia.w	r3, {r0, r1}
 800994a:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800994e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009952:	4611      	mov	r1, r2
 8009954:	4618      	mov	r0, r3
 8009956:	f7fa fdda 	bl	800450e <_ZNSt6vectorIN4tama4ToneESaIS1_EE9push_backEOS1_>
    music.push_back({300, 10});
 800995a:	4ab7      	ldr	r2, [pc, #732]	; (8009c38 <_ZN4tama4Main3runEv+0x4e4>)
 800995c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009960:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009964:	e883 0003 	stmia.w	r3, {r0, r1}
 8009968:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800996c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009970:	4611      	mov	r1, r2
 8009972:	4618      	mov	r0, r3
 8009974:	f7fa fdcb 	bl	800450e <_ZNSt6vectorIN4tama4ToneESaIS1_EE9push_backEOS1_>
    music.push_back({200, 14});
 8009978:	4ab0      	ldr	r2, [pc, #704]	; (8009c3c <_ZN4tama4Main3runEv+0x4e8>)
 800997a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800997e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009982:	e883 0003 	stmia.w	r3, {r0, r1}
 8009986:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800998a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800998e:	4611      	mov	r1, r2
 8009990:	4618      	mov	r0, r3
 8009992:	f7fa fdbc 	bl	800450e <_ZNSt6vectorIN4tama4ToneESaIS1_EE9push_backEOS1_>
    music.push_back({200, 10});
 8009996:	4aaa      	ldr	r2, [pc, #680]	; (8009c40 <_ZN4tama4Main3runEv+0x4ec>)
 8009998:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800999c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80099a0:	e883 0003 	stmia.w	r3, {r0, r1}
 80099a4:	f507 7290 	add.w	r2, r7, #288	; 0x120
 80099a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80099ac:	4611      	mov	r1, r2
 80099ae:	4618      	mov	r0, r3
 80099b0:	f7fa fdad 	bl	800450e <_ZNSt6vectorIN4tama4ToneESaIS1_EE9push_backEOS1_>
    music.push_back({200, 7});
 80099b4:	4aa3      	ldr	r2, [pc, #652]	; (8009c44 <_ZN4tama4Main3runEv+0x4f0>)
 80099b6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80099ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80099be:	e883 0003 	stmia.w	r3, {r0, r1}
 80099c2:	f507 7294 	add.w	r2, r7, #296	; 0x128
 80099c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80099ca:	4611      	mov	r1, r2
 80099cc:	4618      	mov	r0, r3
 80099ce:	f7fa fd9e 	bl	800450e <_ZNSt6vectorIN4tama4ToneESaIS1_EE9push_backEOS1_>
    music.push_back({200, 5});
 80099d2:	4a9d      	ldr	r2, [pc, #628]	; (8009c48 <_ZN4tama4Main3runEv+0x4f4>)
 80099d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80099d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80099dc:	e883 0003 	stmia.w	r3, {r0, r1}
 80099e0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80099e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80099e8:	4611      	mov	r1, r2
 80099ea:	4618      	mov	r0, r3
 80099ec:	f7fa fd8f 	bl	800450e <_ZNSt6vectorIN4tama4ToneESaIS1_EE9push_backEOS1_>
    music.push_back({400, 7});
 80099f0:	4a96      	ldr	r2, [pc, #600]	; (8009c4c <_ZN4tama4Main3runEv+0x4f8>)
 80099f2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80099f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80099fa:	e883 0003 	stmia.w	r3, {r0, r1}
 80099fe:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8009a02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009a06:	4611      	mov	r1, r2
 8009a08:	4618      	mov	r0, r3
 8009a0a:	f7fa fd80 	bl	800450e <_ZNSt6vectorIN4tama4ToneESaIS1_EE9push_backEOS1_>
    music.push_back({200, 0});
 8009a0e:	23c8      	movs	r3, #200	; 0xc8
 8009a10:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8009a14:	2300      	movs	r3, #0
 8009a16:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8009a1a:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8009a1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009a22:	4611      	mov	r1, r2
 8009a24:	4618      	mov	r0, r3
 8009a26:	f7fa fd72 	bl	800450e <_ZNSt6vectorIN4tama4ToneESaIS1_EE9push_backEOS1_>
    music.push_back({400, 10});
 8009a2a:	4a81      	ldr	r2, [pc, #516]	; (8009c30 <_ZN4tama4Main3runEv+0x4dc>)
 8009a2c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009a30:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009a34:	e883 0003 	stmia.w	r3, {r0, r1}
 8009a38:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8009a3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009a40:	4611      	mov	r1, r2
 8009a42:	4618      	mov	r0, r3
 8009a44:	f7fa fd63 	bl	800450e <_ZNSt6vectorIN4tama4ToneESaIS1_EE9push_backEOS1_>
    music.push_back({400, 5});
 8009a48:	4a7a      	ldr	r2, [pc, #488]	; (8009c34 <_ZN4tama4Main3runEv+0x4e0>)
 8009a4a:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8009a4e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009a52:	e883 0003 	stmia.w	r3, {r0, r1}
 8009a56:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 8009a5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009a5e:	4611      	mov	r1, r2
 8009a60:	4618      	mov	r0, r3
 8009a62:	f7fa fd54 	bl	800450e <_ZNSt6vectorIN4tama4ToneESaIS1_EE9push_backEOS1_>
    music.push_back({400, 10});
 8009a66:	4a72      	ldr	r2, [pc, #456]	; (8009c30 <_ZN4tama4Main3runEv+0x4dc>)
 8009a68:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8009a6c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009a70:	e883 0003 	stmia.w	r3, {r0, r1}
 8009a74:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8009a78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009a7c:	4611      	mov	r1, r2
 8009a7e:	4618      	mov	r0, r3
 8009a80:	f7fa fd45 	bl	800450e <_ZNSt6vectorIN4tama4ToneESaIS1_EE9push_backEOS1_>
    music.push_back({400, 5});
 8009a84:	4a6b      	ldr	r2, [pc, #428]	; (8009c34 <_ZN4tama4Main3runEv+0x4e0>)
 8009a86:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8009a8a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009a8e:	e883 0003 	stmia.w	r3, {r0, r1}
 8009a92:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8009a96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009a9a:	4611      	mov	r1, r2
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	f7fa fd36 	bl	800450e <_ZNSt6vectorIN4tama4ToneESaIS1_EE9push_backEOS1_>
    music.push_back({300, 10});
 8009aa2:	4a65      	ldr	r2, [pc, #404]	; (8009c38 <_ZN4tama4Main3runEv+0x4e4>)
 8009aa4:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8009aa8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009aac:	e883 0003 	stmia.w	r3, {r0, r1}
 8009ab0:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8009ab4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009ab8:	4611      	mov	r1, r2
 8009aba:	4618      	mov	r0, r3
 8009abc:	f7fa fd27 	bl	800450e <_ZNSt6vectorIN4tama4ToneESaIS1_EE9push_backEOS1_>
    music.push_back({200, 14});
 8009ac0:	4a5e      	ldr	r2, [pc, #376]	; (8009c3c <_ZN4tama4Main3runEv+0x4e8>)
 8009ac2:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8009ac6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009aca:	e883 0003 	stmia.w	r3, {r0, r1}
 8009ace:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8009ad2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009ad6:	4611      	mov	r1, r2
 8009ad8:	4618      	mov	r0, r3
 8009ada:	f7fa fd18 	bl	800450e <_ZNSt6vectorIN4tama4ToneESaIS1_EE9push_backEOS1_>
    music.push_back({200, 10});
 8009ade:	4a58      	ldr	r2, [pc, #352]	; (8009c40 <_ZN4tama4Main3runEv+0x4ec>)
 8009ae0:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8009ae4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009ae8:	e883 0003 	stmia.w	r3, {r0, r1}
 8009aec:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 8009af0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009af4:	4611      	mov	r1, r2
 8009af6:	4618      	mov	r0, r3
 8009af8:	f7fa fd09 	bl	800450e <_ZNSt6vectorIN4tama4ToneESaIS1_EE9push_backEOS1_>
    music.push_back({200, 7});
 8009afc:	4a51      	ldr	r2, [pc, #324]	; (8009c44 <_ZN4tama4Main3runEv+0x4f0>)
 8009afe:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8009b02:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009b06:	e883 0003 	stmia.w	r3, {r0, r1}
 8009b0a:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 8009b0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009b12:	4611      	mov	r1, r2
 8009b14:	4618      	mov	r0, r3
 8009b16:	f7fa fcfa 	bl	800450e <_ZNSt6vectorIN4tama4ToneESaIS1_EE9push_backEOS1_>
    music.push_back({200, 5});
 8009b1a:	4a4b      	ldr	r2, [pc, #300]	; (8009c48 <_ZN4tama4Main3runEv+0x4f4>)
 8009b1c:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8009b20:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009b24:	e883 0003 	stmia.w	r3, {r0, r1}
 8009b28:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8009b2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009b30:	4611      	mov	r1, r2
 8009b32:	4618      	mov	r0, r3
 8009b34:	f7fa fceb 	bl	800450e <_ZNSt6vectorIN4tama4ToneESaIS1_EE9push_backEOS1_>
    music.push_back({400, 7});
 8009b38:	4a44      	ldr	r2, [pc, #272]	; (8009c4c <_ZN4tama4Main3runEv+0x4f8>)
 8009b3a:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8009b3e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009b42:	e883 0003 	stmia.w	r3, {r0, r1}
 8009b46:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 8009b4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009b4e:	4611      	mov	r1, r2
 8009b50:	4618      	mov	r0, r3
 8009b52:	f7fa fcdc 	bl	800450e <_ZNSt6vectorIN4tama4ToneESaIS1_EE9push_backEOS1_>

    std::shared_ptr<Context> context = std::make_shared<Context>(textureLoader, input, std::shared_ptr<SoundPlayer>(&soundPlayer));
 8009b56:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8009b5a:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8009b5e:	4611      	mov	r1, r2
 8009b60:	4618      	mov	r0, r3
 8009b62:	f000 fab8 	bl	800a0d6 <_ZNSt10shared_ptrIN4tama11SoundPlayerEEC1IS1_vEEPT_>
 8009b66:	f107 001c 	add.w	r0, r7, #28
 8009b6a:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8009b6e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8009b72:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 8009b76:	f000 fade 	bl	800a136 <_ZSt11make_sharedIN4tama7ContextEJRSt10shared_ptrINS0_13TextureLoaderEERS2_INS0_5InputEES2_INS0_11SoundPlayerEEEES2_IT_EDpOT0_>
 8009b7a:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8009b7e:	4618      	mov	r0, r3
 8009b80:	f7f9 fdb1 	bl	80036e6 <_ZNSt10shared_ptrIN4tama11SoundPlayerEED1Ev>
    std::shared_ptr<Stage> loadingStage = std::make_shared<InitialLoading>(context);
 8009b84:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8009b88:	f107 021c 	add.w	r2, r7, #28
 8009b8c:	4611      	mov	r1, r2
 8009b8e:	4618      	mov	r0, r3
 8009b90:	f000 fb05 	bl	800a19e <_ZSt11make_sharedIN4tama14InitialLoadingEJRSt10shared_ptrINS0_7ContextEEEES2_IT_EDpOT0_>
 8009b94:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8009b98:	f107 0314 	add.w	r3, r7, #20
 8009b9c:	4611      	mov	r1, r2
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	f000 fb25 	bl	800a1ee <_ZNSt10shared_ptrIN4tama5StageEEC1INS0_14InitialLoadingEvEEOS_IT_E>
 8009ba4:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8009ba8:	4618      	mov	r0, r3
 8009baa:	f7ff fdc5 	bl	8009738 <_ZNSt10shared_ptrIN4tama14InitialLoadingEED1Ev>
    context->openNewStage(loadingStage);
 8009bae:	f107 031c 	add.w	r3, r7, #28
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	f7f8 f916 	bl	8001de4 <_ZNKSt19__shared_ptr_accessIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8009bb8:	4604      	mov	r4, r0
 8009bba:	f107 0214 	add.w	r2, r7, #20
 8009bbe:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8009bc2:	4611      	mov	r1, r2
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	f7f7 f9c2 	bl	8000f4e <_ZNSt10shared_ptrIN4tama5StageEEC1ERKS2_>
 8009bca:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8009bce:	4619      	mov	r1, r3
 8009bd0:	4620      	mov	r0, r4
 8009bd2:	f7f7 f98a 	bl	8000eea <_ZN4tama7Context12openNewStageESt10shared_ptrINS_5StageEE>
 8009bd6:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8009bda:	4618      	mov	r0, r3
 8009bdc:	f7f7 f9c7 	bl	8000f6e <_ZNSt10shared_ptrIN4tama5StageEED1Ev>
    context->getActiveStage()->onInit();
 8009be0:	f107 031c 	add.w	r3, r7, #28
 8009be4:	4618      	mov	r0, r3
 8009be6:	f7f8 f8fd 	bl	8001de4 <_ZNKSt19__shared_ptr_accessIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8009bea:	4602      	mov	r2, r0
 8009bec:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8009bf0:	4611      	mov	r1, r2
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	f7f7 f9c8 	bl	8000f88 <_ZN4tama7Context14getActiveStageEv>
 8009bf8:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	f000 fb09 	bl	800a214 <_ZNKSt19__shared_ptr_accessIN4tama5StageELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8009c02:	4602      	mov	r2, r0
 8009c04:	6813      	ldr	r3, [r2, #0]
 8009c06:	3304      	adds	r3, #4
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	4610      	mov	r0, r2
 8009c0c:	4798      	blx	r3
 8009c0e:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8009c12:	4618      	mov	r0, r3
 8009c14:	f7f7 f9ab 	bl	8000f6e <_ZNSt10shared_ptrIN4tama5StageEED1Ev>
//    soundPlayer.play(music);
    refreshTimeMonitor->startTimer();
 8009c18:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	f7f9 fa61 	bl	80030e4 <_ZNKSt19__shared_ptr_accessIN4tama11TimeMonitorELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8009c22:	4602      	mov	r2, r0
 8009c24:	6813      	ldr	r3, [r2, #0]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	4610      	mov	r0, r2
 8009c2a:	4798      	blx	r3
 8009c2c:	e010      	b.n	8009c50 <_ZN4tama4Main3runEv+0x4fc>
 8009c2e:	bf00      	nop
 8009c30:	08017da0 	.word	0x08017da0
 8009c34:	08017da8 	.word	0x08017da8
 8009c38:	08017db0 	.word	0x08017db0
 8009c3c:	08017db8 	.word	0x08017db8
 8009c40:	08017dc0 	.word	0x08017dc0
 8009c44:	08017dc8 	.word	0x08017dc8
 8009c48:	08017dd0 	.word	0x08017dd0
 8009c4c:	08017dd8 	.word	0x08017dd8
    while (true)
    {
        input->update();
 8009c50:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009c54:	4618      	mov	r0, r3
 8009c56:	f7f8 f8d1 	bl	8001dfc <_ZNKSt19__shared_ptr_accessIN4tama5InputELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8009c5a:	4602      	mov	r2, r0
 8009c5c:	6813      	ldr	r3, [r2, #0]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	4610      	mov	r0, r2
 8009c62:	4798      	blx	r3
        soundPlayer.update();
 8009c64:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009c68:	4618      	mov	r0, r3
 8009c6a:	f7f9 f949 	bl	8002f00 <_ZN4tama11SoundPlayer6updateEv>
        if (refreshTimeMonitor->getElapsedTime() > frameMillis)
 8009c6e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8009c72:	4618      	mov	r0, r3
 8009c74:	f7f9 fa36 	bl	80030e4 <_ZNKSt19__shared_ptr_accessIN4tama11TimeMonitorELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8009c78:	4602      	mov	r2, r0
 8009c7a:	6813      	ldr	r3, [r2, #0]
 8009c7c:	3304      	adds	r3, #4
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	4610      	mov	r0, r2
 8009c82:	4798      	blx	r3
 8009c84:	4602      	mov	r2, r0
 8009c86:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8009c8a:	4293      	cmp	r3, r2
 8009c8c:	bf34      	ite	cc
 8009c8e:	2301      	movcc	r3, #1
 8009c90:	2300      	movcs	r3, #0
 8009c92:	b2db      	uxtb	r3, r3
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d0db      	beq.n	8009c50 <_ZN4tama4Main3runEv+0x4fc>
        {
            refreshTimeMonitor->startTimer();
 8009c98:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	f7f9 fa21 	bl	80030e4 <_ZNKSt19__shared_ptr_accessIN4tama11TimeMonitorELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8009ca2:	4602      	mov	r2, r0
 8009ca4:	6813      	ldr	r3, [r2, #0]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	4610      	mov	r0, r2
 8009caa:	4798      	blx	r3
            context->getActiveStage()->onFrame();
 8009cac:	f107 031c 	add.w	r3, r7, #28
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	f7f8 f897 	bl	8001de4 <_ZNKSt19__shared_ptr_accessIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8009cb6:	4602      	mov	r2, r0
 8009cb8:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8009cbc:	4611      	mov	r1, r2
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	f7f7 f962 	bl	8000f88 <_ZN4tama7Context14getActiveStageEv>
 8009cc4:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8009cc8:	4618      	mov	r0, r3
 8009cca:	f000 faa3 	bl	800a214 <_ZNKSt19__shared_ptr_accessIN4tama5StageELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8009cce:	4602      	mov	r2, r0
 8009cd0:	6813      	ldr	r3, [r2, #0]
 8009cd2:	3308      	adds	r3, #8
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	4610      	mov	r0, r2
 8009cd8:	4798      	blx	r3
 8009cda:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8009cde:	4618      	mov	r0, r3
 8009ce0:	f7f7 f945 	bl	8000f6e <_ZNSt10shared_ptrIN4tama5StageEED1Ev>
            auto sceneData = dataConverter->getActiveSceneDisplayData(context->getActiveStage()->getScene()->getSceneData());
 8009ce4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8009ce8:	4618      	mov	r0, r3
 8009cea:	f000 fa9f 	bl	800a22c <_ZNKSt19__shared_ptr_accessIN4tama18DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8009cee:	4605      	mov	r5, r0
 8009cf0:	682b      	ldr	r3, [r5, #0]
 8009cf2:	681c      	ldr	r4, [r3, #0]
 8009cf4:	f107 031c 	add.w	r3, r7, #28
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	f7f8 f873 	bl	8001de4 <_ZNKSt19__shared_ptr_accessIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8009cfe:	4602      	mov	r2, r0
 8009d00:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8009d04:	4611      	mov	r1, r2
 8009d06:	4618      	mov	r0, r3
 8009d08:	f7f7 f93e 	bl	8000f88 <_ZN4tama7Context14getActiveStageEv>
 8009d0c:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8009d10:	4618      	mov	r0, r3
 8009d12:	f000 fa7f 	bl	800a214 <_ZNKSt19__shared_ptr_accessIN4tama5StageELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8009d16:	4602      	mov	r2, r0
 8009d18:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8009d1c:	4611      	mov	r1, r2
 8009d1e:	4618      	mov	r0, r3
 8009d20:	f7f7 ff63 	bl	8001bea <_ZN4tama5Stage8getSceneEv>
 8009d24:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8009d28:	4618      	mov	r0, r3
 8009d2a:	f7fa fc84 	bl	8004636 <_ZNKSt19__shared_ptr_accessIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8009d2e:	4602      	mov	r2, r0
 8009d30:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8009d34:	4611      	mov	r1, r2
 8009d36:	4618      	mov	r0, r3
 8009d38:	f7fe fe07 	bl	800894a <_ZN4tama5Scene12getSceneDataEv>
 8009d3c:	f107 0308 	add.w	r3, r7, #8
 8009d40:	f507 72e0 	add.w	r2, r7, #448	; 0x1c0
 8009d44:	4629      	mov	r1, r5
 8009d46:	4618      	mov	r0, r3
 8009d48:	47a0      	blx	r4
 8009d4a:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8009d4e:	4618      	mov	r0, r3
 8009d50:	f7f9 fd8e 	bl	8003870 <_ZNSt10shared_ptrIN4tama7TextureEED1Ev>
 8009d54:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8009d58:	4618      	mov	r0, r3
 8009d5a:	f7f7 ff39 	bl	8001bd0 <_ZNSt10shared_ptrIN4tama5SceneEED1Ev>
 8009d5e:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8009d62:	4618      	mov	r0, r3
 8009d64:	f7f7 f903 	bl	8000f6e <_ZNSt10shared_ptrIN4tama5StageEED1Ev>
            display->setData(sceneData);
 8009d68:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	f000 fa69 	bl	800a244 <_ZNKSt10unique_ptrIN4tama7DisplayESt14default_deleteIS1_EEptEv>
 8009d72:	4602      	mov	r2, r0
 8009d74:	6813      	ldr	r3, [r2, #0]
 8009d76:	3304      	adds	r3, #4
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	f107 0108 	add.w	r1, r7, #8
 8009d7e:	4610      	mov	r0, r2
 8009d80:	4798      	blx	r3
            auto sceneData = dataConverter->getActiveSceneDisplayData(context->getActiveStage()->getScene()->getSceneData());
 8009d82:	f107 0308 	add.w	r3, r7, #8
 8009d86:	4618      	mov	r0, r3
 8009d88:	f7ff fb63 	bl	8009452 <_ZN4tama11DisplayDataD1Ev>
        }
    }
 8009d8c:	e760      	b.n	8009c50 <_ZN4tama4Main3runEv+0x4fc>
 8009d8e:	bf00      	nop

08009d90 <_ZN4tama4Main32getDefaultNokia5110DisplayConfigEv>:
}

tama::DisplayConfig tama::Main::getDefaultNokia5110DisplayConfig()
{
 8009d90:	b480      	push	{r7}
 8009d92:	b083      	sub	sp, #12
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
 8009d98:	6039      	str	r1, [r7, #0]
    DisplayConfig cfg;
    cfg.spi = &hspi1;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	4a10      	ldr	r2, [pc, #64]	; (8009de0 <_ZN4tama4Main32getDefaultNokia5110DisplayConfigEv+0x50>)
 8009d9e:	601a      	str	r2, [r3, #0]
    cfg.reset_port = RST_GPIO_Port;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	4a10      	ldr	r2, [pc, #64]	; (8009de4 <_ZN4tama4Main32getDefaultNokia5110DisplayConfigEv+0x54>)
 8009da4:	605a      	str	r2, [r3, #4]
    cfg.reset_pin = RST_Pin;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	2280      	movs	r2, #128	; 0x80
 8009daa:	811a      	strh	r2, [r3, #8]
    cfg.bl_port = BL_GPIO_Port;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	4a0d      	ldr	r2, [pc, #52]	; (8009de4 <_ZN4tama4Main32getDefaultNokia5110DisplayConfigEv+0x54>)
 8009db0:	60da      	str	r2, [r3, #12]
    cfg.bl_pin = BL_Pin;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009db8:	821a      	strh	r2, [r3, #16]
    cfg.dc_port = DC_GPIO_Port;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	4a0a      	ldr	r2, [pc, #40]	; (8009de8 <_ZN4tama4Main32getDefaultNokia5110DisplayConfigEv+0x58>)
 8009dbe:	615a      	str	r2, [r3, #20]
    cfg.dc_pin = DC_Pin;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	2220      	movs	r2, #32
 8009dc4:	841a      	strh	r2, [r3, #32]
    cfg.ce_port = CE_GPIO_Port;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	4a08      	ldr	r2, [pc, #32]	; (8009dec <_ZN4tama4Main32getDefaultNokia5110DisplayConfigEv+0x5c>)
 8009dca:	61da      	str	r2, [r3, #28]
    cfg.ce_pin = CE_Pin;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2202      	movs	r2, #2
 8009dd0:	831a      	strh	r2, [r3, #24]
    return cfg;
 8009dd2:	bf00      	nop
}
 8009dd4:	6878      	ldr	r0, [r7, #4]
 8009dd6:	370c      	adds	r7, #12
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dde:	4770      	bx	lr
 8009de0:	20000394 	.word	0x20000394
 8009de4:	40021000 	.word	0x40021000
 8009de8:	40020800 	.word	0x40020800
 8009dec:	40020400 	.word	0x40020400

08009df0 <_ZSt7forwardIRN4tama13DisplayConfigEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009df0:	b480      	push	{r7}
 8009df2:	b083      	sub	sp, #12
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	370c      	adds	r7, #12
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e04:	4770      	bx	lr

08009e06 <_ZSt11make_uniqueIN4tama16Nokia5510DisplayEJRNS0_13DisplayConfigEEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 8009e06:	b5b0      	push	{r4, r5, r7, lr}
 8009e08:	b082      	sub	sp, #8
 8009e0a:	af00      	add	r7, sp, #0
 8009e0c:	6078      	str	r0, [r7, #4]
 8009e0e:	6039      	str	r1, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 8009e10:	6838      	ldr	r0, [r7, #0]
 8009e12:	f7ff ffed 	bl	8009df0 <_ZSt7forwardIRN4tama13DisplayConfigEEOT_RNSt16remove_referenceIS3_E4typeE>
 8009e16:	4605      	mov	r5, r0
 8009e18:	2030      	movs	r0, #48	; 0x30
 8009e1a:	f00d fb4c 	bl	80174b6 <_Znwj>
 8009e1e:	4603      	mov	r3, r0
 8009e20:	461c      	mov	r4, r3
 8009e22:	4629      	mov	r1, r5
 8009e24:	4620      	mov	r0, r4
 8009e26:	f005 fbe7 	bl	800f5f8 <_ZN4tama16Nokia5510DisplayC1ERNS_13DisplayConfigE>
 8009e2a:	4621      	mov	r1, r4
 8009e2c:	6878      	ldr	r0, [r7, #4]
 8009e2e:	f000 fa15 	bl	800a25c <_ZNSt10unique_ptrIN4tama16Nokia5510DisplayESt14default_deleteIS1_EEC1IS3_vEEPS1_>
 8009e32:	6878      	ldr	r0, [r7, #4]
 8009e34:	3708      	adds	r7, #8
 8009e36:	46bd      	mov	sp, r7
 8009e38:	bdb0      	pop	{r4, r5, r7, pc}

08009e3a <_ZNSt10unique_ptrIN4tama16Nokia5510DisplayESt14default_deleteIS1_EED1Ev>:
      ~unique_ptr() noexcept
 8009e3a:	b580      	push	{r7, lr}
 8009e3c:	b084      	sub	sp, #16
 8009e3e:	af00      	add	r7, sp, #0
 8009e40:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	4618      	mov	r0, r3
 8009e46:	f000 fa18 	bl	800a27a <_ZNSt15__uniq_ptr_implIN4tama16Nokia5510DisplayESt14default_deleteIS1_EE6_M_ptrEv>
 8009e4a:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d009      	beq.n	8009e68 <_ZNSt10unique_ptrIN4tama16Nokia5510DisplayESt14default_deleteIS1_EED1Ev+0x2e>
	  get_deleter()(__ptr);
 8009e54:	6878      	ldr	r0, [r7, #4]
 8009e56:	f000 fa1d 	bl	800a294 <_ZNSt10unique_ptrIN4tama16Nokia5510DisplayESt14default_deleteIS1_EE11get_deleterEv>
 8009e5a:	4602      	mov	r2, r0
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	4619      	mov	r1, r3
 8009e62:	4610      	mov	r0, r2
 8009e64:	f000 fa23 	bl	800a2ae <_ZNKSt14default_deleteIN4tama16Nokia5510DisplayEEclEPS1_>
	__ptr = pointer();
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	601a      	str	r2, [r3, #0]
      }
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	4618      	mov	r0, r3
 8009e72:	3710      	adds	r7, #16
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bd80      	pop	{r7, pc}

08009e78 <_ZNSt10unique_ptrIN4tama7DisplayESt14default_deleteIS1_EEC1INS0_16Nokia5510DisplayES2_IS6_EvEEOS_IT_T0_E>:
	unique_ptr(unique_ptr<_Up, _Ep>&& __u) noexcept
 8009e78:	b5b0      	push	{r4, r5, r7, lr}
 8009e7a:	b082      	sub	sp, #8
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
 8009e80:	6039      	str	r1, [r7, #0]
	: _M_t(__u.release(), std::forward<_Ep>(__u.get_deleter()))
 8009e82:	687c      	ldr	r4, [r7, #4]
 8009e84:	6838      	ldr	r0, [r7, #0]
 8009e86:	f000 fa1f 	bl	800a2c8 <_ZNSt10unique_ptrIN4tama16Nokia5510DisplayESt14default_deleteIS1_EE7releaseEv>
 8009e8a:	4605      	mov	r5, r0
 8009e8c:	6838      	ldr	r0, [r7, #0]
 8009e8e:	f000 fa01 	bl	800a294 <_ZNSt10unique_ptrIN4tama16Nokia5510DisplayESt14default_deleteIS1_EE11get_deleterEv>
 8009e92:	4603      	mov	r3, r0
 8009e94:	4618      	mov	r0, r3
 8009e96:	f000 fa2b 	bl	800a2f0 <_ZSt7forwardISt14default_deleteIN4tama16Nokia5510DisplayEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8009e9a:	4603      	mov	r3, r0
 8009e9c:	461a      	mov	r2, r3
 8009e9e:	4629      	mov	r1, r5
 8009ea0:	4620      	mov	r0, r4
 8009ea2:	f000 fa30 	bl	800a306 <_ZNSt15__uniq_ptr_implIN4tama7DisplayESt14default_deleteIS1_EEC1IS2_INS0_16Nokia5510DisplayEEEEPS1_OT_>
	{ }
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	3708      	adds	r7, #8
 8009eac:	46bd      	mov	sp, r7
 8009eae:	bdb0      	pop	{r4, r5, r7, pc}

08009eb0 <_ZSt11make_sharedIN4tama18Stm32TextureLoaderEJEESt10shared_ptrIT_EDpOT0_>:
    make_shared(_Args&&... __args)
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b084      	sub	sp, #16
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
				       std::forward<_Args>(__args)...);
 8009eb8:	f107 030c 	add.w	r3, r7, #12
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	f000 fa38 	bl	800a332 <_ZNSaIN4tama18Stm32TextureLoaderEEC1Ev>
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	f107 020c 	add.w	r2, r7, #12
 8009ec8:	4611      	mov	r1, r2
 8009eca:	4618      	mov	r0, r3
 8009ecc:	f000 fa49 	bl	800a362 <_ZSt15allocate_sharedIN4tama18Stm32TextureLoaderESaIS1_EJEESt10shared_ptrIT_ERKT0_DpOT1_>
 8009ed0:	f107 030c 	add.w	r3, r7, #12
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	f000 fa38 	bl	800a34a <_ZNSaIN4tama18Stm32TextureLoaderEED1Ev>
    }
 8009eda:	6878      	ldr	r0, [r7, #4]
 8009edc:	3710      	adds	r7, #16
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	bd80      	pop	{r7, pc}

08009ee2 <_ZSt4moveIRSt10shared_ptrIN4tama18Stm32TextureLoaderEEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 8009ee2:	b480      	push	{r7}
 8009ee4:	b083      	sub	sp, #12
 8009ee6:	af00      	add	r7, sp, #0
 8009ee8:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	4618      	mov	r0, r3
 8009eee:	370c      	adds	r7, #12
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef6:	4770      	bx	lr

08009ef8 <_ZNSt10shared_ptrIN4tama13TextureLoaderEEC1INS0_18Stm32TextureLoaderEvEEOS_IT_E>:
	shared_ptr(shared_ptr<_Yp>&& __r) noexcept
 8009ef8:	b590      	push	{r4, r7, lr}
 8009efa:	b083      	sub	sp, #12
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
 8009f00:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(std::move(__r)) { }
 8009f02:	687c      	ldr	r4, [r7, #4]
 8009f04:	6838      	ldr	r0, [r7, #0]
 8009f06:	f7ff ffec 	bl	8009ee2 <_ZSt4moveIRSt10shared_ptrIN4tama18Stm32TextureLoaderEEEONSt16remove_referenceIT_E4typeEOS6_>
 8009f0a:	4603      	mov	r3, r0
 8009f0c:	4619      	mov	r1, r3
 8009f0e:	4620      	mov	r0, r4
 8009f10:	f000 fa35 	bl	800a37e <_ZNSt12__shared_ptrIN4tama13TextureLoaderELN9__gnu_cxx12_Lock_policyE0EEC1INS0_18Stm32TextureLoaderEvEEOS_IT_LS3_0EE>
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	4618      	mov	r0, r3
 8009f18:	370c      	adds	r7, #12
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	bd90      	pop	{r4, r7, pc}

08009f1e <_ZSt11make_sharedIN4tama27Nokia5110DisplayDataManagerEJEESt10shared_ptrIT_EDpOT0_>:
    make_shared(_Args&&... __args)
 8009f1e:	b580      	push	{r7, lr}
 8009f20:	b084      	sub	sp, #16
 8009f22:	af00      	add	r7, sp, #0
 8009f24:	6078      	str	r0, [r7, #4]
				       std::forward<_Args>(__args)...);
 8009f26:	f107 030c 	add.w	r3, r7, #12
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	f000 fa45 	bl	800a3ba <_ZNSaIN4tama27Nokia5110DisplayDataManagerEEC1Ev>
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	f107 020c 	add.w	r2, r7, #12
 8009f36:	4611      	mov	r1, r2
 8009f38:	4618      	mov	r0, r3
 8009f3a:	f000 fa56 	bl	800a3ea <_ZSt15allocate_sharedIN4tama27Nokia5110DisplayDataManagerESaIS1_EJEESt10shared_ptrIT_ERKT0_DpOT1_>
 8009f3e:	f107 030c 	add.w	r3, r7, #12
 8009f42:	4618      	mov	r0, r3
 8009f44:	f000 fa45 	bl	800a3d2 <_ZNSaIN4tama27Nokia5110DisplayDataManagerEED1Ev>
    }
 8009f48:	6878      	ldr	r0, [r7, #4]
 8009f4a:	3710      	adds	r7, #16
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	bd80      	pop	{r7, pc}

08009f50 <_ZSt4moveIRSt10shared_ptrIN4tama27Nokia5110DisplayDataManagerEEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 8009f50:	b480      	push	{r7}
 8009f52:	b083      	sub	sp, #12
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	370c      	adds	r7, #12
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f64:	4770      	bx	lr

08009f66 <_ZNSt10shared_ptrIN4tama18DisplayDataManagerEEC1INS0_27Nokia5110DisplayDataManagerEvEEOS_IT_E>:
	shared_ptr(shared_ptr<_Yp>&& __r) noexcept
 8009f66:	b590      	push	{r4, r7, lr}
 8009f68:	b083      	sub	sp, #12
 8009f6a:	af00      	add	r7, sp, #0
 8009f6c:	6078      	str	r0, [r7, #4]
 8009f6e:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(std::move(__r)) { }
 8009f70:	687c      	ldr	r4, [r7, #4]
 8009f72:	6838      	ldr	r0, [r7, #0]
 8009f74:	f7ff ffec 	bl	8009f50 <_ZSt4moveIRSt10shared_ptrIN4tama27Nokia5110DisplayDataManagerEEEONSt16remove_referenceIT_E4typeEOS6_>
 8009f78:	4603      	mov	r3, r0
 8009f7a:	4619      	mov	r1, r3
 8009f7c:	4620      	mov	r0, r4
 8009f7e:	f000 fa42 	bl	800a406 <_ZNSt12__shared_ptrIN4tama18DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EEC1INS0_27Nokia5110DisplayDataManagerEvEEOS_IT_LS3_0EE>
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	4618      	mov	r0, r3
 8009f86:	370c      	adds	r7, #12
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	bd90      	pop	{r4, r7, pc}

08009f8c <_ZSt11make_sharedIN4tama16Stm32TimeMonitorEJEESt10shared_ptrIT_EDpOT0_>:
    make_shared(_Args&&... __args)
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b084      	sub	sp, #16
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
				       std::forward<_Args>(__args)...);
 8009f94:	f107 030c 	add.w	r3, r7, #12
 8009f98:	4618      	mov	r0, r3
 8009f9a:	f000 fa52 	bl	800a442 <_ZNSaIN4tama16Stm32TimeMonitorEEC1Ev>
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	f107 020c 	add.w	r2, r7, #12
 8009fa4:	4611      	mov	r1, r2
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	f000 fa63 	bl	800a472 <_ZSt15allocate_sharedIN4tama16Stm32TimeMonitorESaIS1_EJEESt10shared_ptrIT_ERKT0_DpOT1_>
 8009fac:	f107 030c 	add.w	r3, r7, #12
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	f000 fa52 	bl	800a45a <_ZNSaIN4tama16Stm32TimeMonitorEED1Ev>
    }
 8009fb6:	6878      	ldr	r0, [r7, #4]
 8009fb8:	3710      	adds	r7, #16
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	bd80      	pop	{r7, pc}

08009fbe <_ZSt4moveIRSt10shared_ptrIN4tama16Stm32TimeMonitorEEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 8009fbe:	b480      	push	{r7}
 8009fc0:	b083      	sub	sp, #12
 8009fc2:	af00      	add	r7, sp, #0
 8009fc4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	4618      	mov	r0, r3
 8009fca:	370c      	adds	r7, #12
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd2:	4770      	bx	lr

08009fd4 <_ZNSt10shared_ptrIN4tama11TimeMonitorEEC1INS0_16Stm32TimeMonitorEvEEOS_IT_E>:
	shared_ptr(shared_ptr<_Yp>&& __r) noexcept
 8009fd4:	b590      	push	{r4, r7, lr}
 8009fd6:	b083      	sub	sp, #12
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
 8009fdc:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(std::move(__r)) { }
 8009fde:	687c      	ldr	r4, [r7, #4]
 8009fe0:	6838      	ldr	r0, [r7, #0]
 8009fe2:	f7ff ffec 	bl	8009fbe <_ZSt4moveIRSt10shared_ptrIN4tama16Stm32TimeMonitorEEEONSt16remove_referenceIT_E4typeEOS6_>
 8009fe6:	4603      	mov	r3, r0
 8009fe8:	4619      	mov	r1, r3
 8009fea:	4620      	mov	r0, r4
 8009fec:	f000 fa4f 	bl	800a48e <_ZNSt12__shared_ptrIN4tama11TimeMonitorELN9__gnu_cxx12_Lock_policyE0EEC1INS0_16Stm32TimeMonitorEvEEOS_IT_LS3_0EE>
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	370c      	adds	r7, #12
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	bd90      	pop	{r4, r7, pc}

08009ffa <_ZSt11make_sharedIN4tama25Stm32SoundPlayingStrategyEJEESt10shared_ptrIT_EDpOT0_>:
    make_shared(_Args&&... __args)
 8009ffa:	b580      	push	{r7, lr}
 8009ffc:	b084      	sub	sp, #16
 8009ffe:	af00      	add	r7, sp, #0
 800a000:	6078      	str	r0, [r7, #4]
				       std::forward<_Args>(__args)...);
 800a002:	f107 030c 	add.w	r3, r7, #12
 800a006:	4618      	mov	r0, r3
 800a008:	f000 fa5f 	bl	800a4ca <_ZNSaIN4tama25Stm32SoundPlayingStrategyEEC1Ev>
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	f107 020c 	add.w	r2, r7, #12
 800a012:	4611      	mov	r1, r2
 800a014:	4618      	mov	r0, r3
 800a016:	f000 fa70 	bl	800a4fa <_ZSt15allocate_sharedIN4tama25Stm32SoundPlayingStrategyESaIS1_EJEESt10shared_ptrIT_ERKT0_DpOT1_>
 800a01a:	f107 030c 	add.w	r3, r7, #12
 800a01e:	4618      	mov	r0, r3
 800a020:	f000 fa5f 	bl	800a4e2 <_ZNSaIN4tama25Stm32SoundPlayingStrategyEED1Ev>
    }
 800a024:	6878      	ldr	r0, [r7, #4]
 800a026:	3710      	adds	r7, #16
 800a028:	46bd      	mov	sp, r7
 800a02a:	bd80      	pop	{r7, pc}

0800a02c <_ZSt4moveIRSt10shared_ptrIN4tama25Stm32SoundPlayingStrategyEEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 800a02c:	b480      	push	{r7}
 800a02e:	b083      	sub	sp, #12
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	4618      	mov	r0, r3
 800a038:	370c      	adds	r7, #12
 800a03a:	46bd      	mov	sp, r7
 800a03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a040:	4770      	bx	lr

0800a042 <_ZNSt10shared_ptrIN4tama20SoundPlayingStrategyEEC1INS0_25Stm32SoundPlayingStrategyEvEEOS_IT_E>:
	shared_ptr(shared_ptr<_Yp>&& __r) noexcept
 800a042:	b590      	push	{r4, r7, lr}
 800a044:	b083      	sub	sp, #12
 800a046:	af00      	add	r7, sp, #0
 800a048:	6078      	str	r0, [r7, #4]
 800a04a:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(std::move(__r)) { }
 800a04c:	687c      	ldr	r4, [r7, #4]
 800a04e:	6838      	ldr	r0, [r7, #0]
 800a050:	f7ff ffec 	bl	800a02c <_ZSt4moveIRSt10shared_ptrIN4tama25Stm32SoundPlayingStrategyEEEONSt16remove_referenceIT_E4typeEOS6_>
 800a054:	4603      	mov	r3, r0
 800a056:	4619      	mov	r1, r3
 800a058:	4620      	mov	r0, r4
 800a05a:	f000 fa5c 	bl	800a516 <_ZNSt12__shared_ptrIN4tama20SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EEC1INS0_25Stm32SoundPlayingStrategyEvEEOS_IT_LS3_0EE>
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	4618      	mov	r0, r3
 800a062:	370c      	adds	r7, #12
 800a064:	46bd      	mov	sp, r7
 800a066:	bd90      	pop	{r4, r7, pc}

0800a068 <_ZSt11make_sharedIN4tama10Stm32InputEJEESt10shared_ptrIT_EDpOT0_>:
    make_shared(_Args&&... __args)
 800a068:	b580      	push	{r7, lr}
 800a06a:	b084      	sub	sp, #16
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
				       std::forward<_Args>(__args)...);
 800a070:	f107 030c 	add.w	r3, r7, #12
 800a074:	4618      	mov	r0, r3
 800a076:	f000 fa6c 	bl	800a552 <_ZNSaIN4tama10Stm32InputEEC1Ev>
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	f107 020c 	add.w	r2, r7, #12
 800a080:	4611      	mov	r1, r2
 800a082:	4618      	mov	r0, r3
 800a084:	f000 fa7d 	bl	800a582 <_ZSt15allocate_sharedIN4tama10Stm32InputESaIS1_EJEESt10shared_ptrIT_ERKT0_DpOT1_>
 800a088:	f107 030c 	add.w	r3, r7, #12
 800a08c:	4618      	mov	r0, r3
 800a08e:	f000 fa6c 	bl	800a56a <_ZNSaIN4tama10Stm32InputEED1Ev>
    }
 800a092:	6878      	ldr	r0, [r7, #4]
 800a094:	3710      	adds	r7, #16
 800a096:	46bd      	mov	sp, r7
 800a098:	bd80      	pop	{r7, pc}

0800a09a <_ZSt4moveIRSt10shared_ptrIN4tama10Stm32InputEEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 800a09a:	b480      	push	{r7}
 800a09c:	b083      	sub	sp, #12
 800a09e:	af00      	add	r7, sp, #0
 800a0a0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	370c      	adds	r7, #12
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ae:	4770      	bx	lr

0800a0b0 <_ZNSt10shared_ptrIN4tama5InputEEC1INS0_10Stm32InputEvEEOS_IT_E>:
	shared_ptr(shared_ptr<_Yp>&& __r) noexcept
 800a0b0:	b590      	push	{r4, r7, lr}
 800a0b2:	b083      	sub	sp, #12
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
 800a0b8:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(std::move(__r)) { }
 800a0ba:	687c      	ldr	r4, [r7, #4]
 800a0bc:	6838      	ldr	r0, [r7, #0]
 800a0be:	f7ff ffec 	bl	800a09a <_ZSt4moveIRSt10shared_ptrIN4tama10Stm32InputEEEONSt16remove_referenceIT_E4typeEOS6_>
 800a0c2:	4603      	mov	r3, r0
 800a0c4:	4619      	mov	r1, r3
 800a0c6:	4620      	mov	r0, r4
 800a0c8:	f000 fa69 	bl	800a59e <_ZNSt12__shared_ptrIN4tama5InputELN9__gnu_cxx12_Lock_policyE0EEC1INS0_10Stm32InputEvEEOS_IT_LS3_0EE>
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	370c      	adds	r7, #12
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	bd90      	pop	{r4, r7, pc}

0800a0d6 <_ZNSt10shared_ptrIN4tama11SoundPlayerEEC1IS1_vEEPT_>:
	shared_ptr(_Yp* __p) : __shared_ptr<_Tp>(__p) { }
 800a0d6:	b580      	push	{r7, lr}
 800a0d8:	b082      	sub	sp, #8
 800a0da:	af00      	add	r7, sp, #0
 800a0dc:	6078      	str	r0, [r7, #4]
 800a0de:	6039      	str	r1, [r7, #0]
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	6839      	ldr	r1, [r7, #0]
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	f000 fa78 	bl	800a5da <_ZNSt12__shared_ptrIN4tama11SoundPlayerELN9__gnu_cxx12_Lock_policyE0EEC1IS1_vEEPT_>
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	3708      	adds	r7, #8
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	bd80      	pop	{r7, pc}

0800a0f4 <_ZSt7forwardIRSt10shared_ptrIN4tama13TextureLoaderEEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800a0f4:	b480      	push	{r7}
 800a0f6:	b083      	sub	sp, #12
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	4618      	mov	r0, r3
 800a100:	370c      	adds	r7, #12
 800a102:	46bd      	mov	sp, r7
 800a104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a108:	4770      	bx	lr

0800a10a <_ZSt7forwardIRSt10shared_ptrIN4tama5InputEEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800a10a:	b480      	push	{r7}
 800a10c:	b083      	sub	sp, #12
 800a10e:	af00      	add	r7, sp, #0
 800a110:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	4618      	mov	r0, r3
 800a116:	370c      	adds	r7, #12
 800a118:	46bd      	mov	sp, r7
 800a11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11e:	4770      	bx	lr

0800a120 <_ZSt7forwardISt10shared_ptrIN4tama11SoundPlayerEEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800a120:	b480      	push	{r7}
 800a122:	b083      	sub	sp, #12
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	4618      	mov	r0, r3
 800a12c:	370c      	adds	r7, #12
 800a12e:	46bd      	mov	sp, r7
 800a130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a134:	4770      	bx	lr

0800a136 <_ZSt11make_sharedIN4tama7ContextEJRSt10shared_ptrINS0_13TextureLoaderEERS2_INS0_5InputEES2_INS0_11SoundPlayerEEEES2_IT_EDpOT0_>:
    make_shared(_Args&&... __args)
 800a136:	b5b0      	push	{r4, r5, r7, lr}
 800a138:	b088      	sub	sp, #32
 800a13a:	af02      	add	r7, sp, #8
 800a13c:	60f8      	str	r0, [r7, #12]
 800a13e:	60b9      	str	r1, [r7, #8]
 800a140:	607a      	str	r2, [r7, #4]
 800a142:	603b      	str	r3, [r7, #0]
				       std::forward<_Args>(__args)...);
 800a144:	f107 0314 	add.w	r3, r7, #20
 800a148:	4618      	mov	r0, r3
 800a14a:	f000 fa5e 	bl	800a60a <_ZNSaIN4tama7ContextEEC1Ev>
 800a14e:	68b8      	ldr	r0, [r7, #8]
 800a150:	f7ff ffd0 	bl	800a0f4 <_ZSt7forwardIRSt10shared_ptrIN4tama13TextureLoaderEEEOT_RNSt16remove_referenceIS5_E4typeE>
 800a154:	4604      	mov	r4, r0
 800a156:	6878      	ldr	r0, [r7, #4]
 800a158:	f7ff ffd7 	bl	800a10a <_ZSt7forwardIRSt10shared_ptrIN4tama5InputEEEOT_RNSt16remove_referenceIS5_E4typeE>
 800a15c:	4605      	mov	r5, r0
 800a15e:	6838      	ldr	r0, [r7, #0]
 800a160:	f7ff ffde 	bl	800a120 <_ZSt7forwardISt10shared_ptrIN4tama11SoundPlayerEEEOT_RNSt16remove_referenceIS4_E4typeE>
 800a164:	4603      	mov	r3, r0
 800a166:	68f8      	ldr	r0, [r7, #12]
 800a168:	f107 0114 	add.w	r1, r7, #20
 800a16c:	9300      	str	r3, [sp, #0]
 800a16e:	462b      	mov	r3, r5
 800a170:	4622      	mov	r2, r4
 800a172:	f000 fa62 	bl	800a63a <_ZSt15allocate_sharedIN4tama7ContextESaIS1_EJRSt10shared_ptrINS0_13TextureLoaderEERS3_INS0_5InputEES3_INS0_11SoundPlayerEEEES3_IT_ERKT0_DpOT1_>
 800a176:	f107 0314 	add.w	r3, r7, #20
 800a17a:	4618      	mov	r0, r3
 800a17c:	f000 fa51 	bl	800a622 <_ZNSaIN4tama7ContextEED1Ev>
    }
 800a180:	68f8      	ldr	r0, [r7, #12]
 800a182:	3718      	adds	r7, #24
 800a184:	46bd      	mov	sp, r7
 800a186:	bdb0      	pop	{r4, r5, r7, pc}

0800a188 <_ZSt7forwardIRSt10shared_ptrIN4tama7ContextEEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800a188:	b480      	push	{r7}
 800a18a:	b083      	sub	sp, #12
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	4618      	mov	r0, r3
 800a194:	370c      	adds	r7, #12
 800a196:	46bd      	mov	sp, r7
 800a198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19c:	4770      	bx	lr

0800a19e <_ZSt11make_sharedIN4tama14InitialLoadingEJRSt10shared_ptrINS0_7ContextEEEES2_IT_EDpOT0_>:
    make_shared(_Args&&... __args)
 800a19e:	b580      	push	{r7, lr}
 800a1a0:	b084      	sub	sp, #16
 800a1a2:	af00      	add	r7, sp, #0
 800a1a4:	6078      	str	r0, [r7, #4]
 800a1a6:	6039      	str	r1, [r7, #0]
				       std::forward<_Args>(__args)...);
 800a1a8:	f107 030c 	add.w	r3, r7, #12
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	f000 fa63 	bl	800a678 <_ZNSaIN4tama14InitialLoadingEEC1Ev>
 800a1b2:	6838      	ldr	r0, [r7, #0]
 800a1b4:	f7ff ffe8 	bl	800a188 <_ZSt7forwardIRSt10shared_ptrIN4tama7ContextEEEOT_RNSt16remove_referenceIS5_E4typeE>
 800a1b8:	4602      	mov	r2, r0
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	f107 010c 	add.w	r1, r7, #12
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	f000 fa71 	bl	800a6a8 <_ZSt15allocate_sharedIN4tama14InitialLoadingESaIS1_EJRSt10shared_ptrINS0_7ContextEEEES3_IT_ERKT0_DpOT1_>
 800a1c6:	f107 030c 	add.w	r3, r7, #12
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	f000 fa60 	bl	800a690 <_ZNSaIN4tama14InitialLoadingEED1Ev>
    }
 800a1d0:	6878      	ldr	r0, [r7, #4]
 800a1d2:	3710      	adds	r7, #16
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	bd80      	pop	{r7, pc}

0800a1d8 <_ZSt4moveIRSt10shared_ptrIN4tama14InitialLoadingEEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 800a1d8:	b480      	push	{r7}
 800a1da:	b083      	sub	sp, #12
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	370c      	adds	r7, #12
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ec:	4770      	bx	lr

0800a1ee <_ZNSt10shared_ptrIN4tama5StageEEC1INS0_14InitialLoadingEvEEOS_IT_E>:
	shared_ptr(shared_ptr<_Yp>&& __r) noexcept
 800a1ee:	b590      	push	{r4, r7, lr}
 800a1f0:	b083      	sub	sp, #12
 800a1f2:	af00      	add	r7, sp, #0
 800a1f4:	6078      	str	r0, [r7, #4]
 800a1f6:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(std::move(__r)) { }
 800a1f8:	687c      	ldr	r4, [r7, #4]
 800a1fa:	6838      	ldr	r0, [r7, #0]
 800a1fc:	f7ff ffec 	bl	800a1d8 <_ZSt4moveIRSt10shared_ptrIN4tama14InitialLoadingEEEONSt16remove_referenceIT_E4typeEOS6_>
 800a200:	4603      	mov	r3, r0
 800a202:	4619      	mov	r1, r3
 800a204:	4620      	mov	r0, r4
 800a206:	f000 fa62 	bl	800a6ce <_ZNSt12__shared_ptrIN4tama5StageELN9__gnu_cxx12_Lock_policyE0EEC1INS0_14InitialLoadingEvEEOS_IT_LS3_0EE>
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	4618      	mov	r0, r3
 800a20e:	370c      	adds	r7, #12
 800a210:	46bd      	mov	sp, r7
 800a212:	bd90      	pop	{r4, r7, pc}

0800a214 <_ZNKSt19__shared_ptr_accessIN4tama5StageELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 800a214:	b580      	push	{r7, lr}
 800a216:	b082      	sub	sp, #8
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
	return _M_get();
 800a21c:	6878      	ldr	r0, [r7, #4]
 800a21e:	f000 fa74 	bl	800a70a <_ZNKSt19__shared_ptr_accessIN4tama5StageELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 800a222:	4603      	mov	r3, r0
      }
 800a224:	4618      	mov	r0, r3
 800a226:	3708      	adds	r7, #8
 800a228:	46bd      	mov	sp, r7
 800a22a:	bd80      	pop	{r7, pc}

0800a22c <_ZNKSt19__shared_ptr_accessIN4tama18DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b082      	sub	sp, #8
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
	return _M_get();
 800a234:	6878      	ldr	r0, [r7, #4]
 800a236:	f000 fa74 	bl	800a722 <_ZNKSt19__shared_ptr_accessIN4tama18DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 800a23a:	4603      	mov	r3, r0
      }
 800a23c:	4618      	mov	r0, r3
 800a23e:	3708      	adds	r7, #8
 800a240:	46bd      	mov	sp, r7
 800a242:	bd80      	pop	{r7, pc}

0800a244 <_ZNKSt10unique_ptrIN4tama7DisplayESt14default_deleteIS1_EEptEv>:
      operator->() const noexcept
 800a244:	b580      	push	{r7, lr}
 800a246:	b082      	sub	sp, #8
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
	return get();
 800a24c:	6878      	ldr	r0, [r7, #4]
 800a24e:	f000 fa74 	bl	800a73a <_ZNKSt10unique_ptrIN4tama7DisplayESt14default_deleteIS1_EE3getEv>
 800a252:	4603      	mov	r3, r0
      }
 800a254:	4618      	mov	r0, r3
 800a256:	3708      	adds	r7, #8
 800a258:	46bd      	mov	sp, r7
 800a25a:	bd80      	pop	{r7, pc}

0800a25c <_ZNSt10unique_ptrIN4tama16Nokia5510DisplayESt14default_deleteIS1_EEC1IS3_vEEPS1_>:
	unique_ptr(pointer __p) noexcept
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b082      	sub	sp, #8
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
 800a264:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	6839      	ldr	r1, [r7, #0]
 800a26a:	4618      	mov	r0, r3
 800a26c:	f000 fa72 	bl	800a754 <_ZNSt15__uniq_ptr_implIN4tama16Nokia5510DisplayESt14default_deleteIS1_EEC1EPS1_>
        { }
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	4618      	mov	r0, r3
 800a274:	3708      	adds	r7, #8
 800a276:	46bd      	mov	sp, r7
 800a278:	bd80      	pop	{r7, pc}

0800a27a <_ZNSt15__uniq_ptr_implIN4tama16Nokia5510DisplayESt14default_deleteIS1_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 800a27a:	b580      	push	{r7, lr}
 800a27c:	b082      	sub	sp, #8
 800a27e:	af00      	add	r7, sp, #0
 800a280:	6078      	str	r0, [r7, #4]
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	4618      	mov	r0, r3
 800a286:	f000 fa79 	bl	800a77c <_ZSt3getILj0EJPN4tama16Nokia5510DisplayESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>
 800a28a:	4603      	mov	r3, r0
 800a28c:	4618      	mov	r0, r3
 800a28e:	3708      	adds	r7, #8
 800a290:	46bd      	mov	sp, r7
 800a292:	bd80      	pop	{r7, pc}

0800a294 <_ZNSt10unique_ptrIN4tama16Nokia5510DisplayESt14default_deleteIS1_EE11get_deleterEv>:
      get_deleter() noexcept
 800a294:	b580      	push	{r7, lr}
 800a296:	b082      	sub	sp, #8
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	4618      	mov	r0, r3
 800a2a0:	f000 fa79 	bl	800a796 <_ZNSt15__uniq_ptr_implIN4tama16Nokia5510DisplayESt14default_deleteIS1_EE10_M_deleterEv>
 800a2a4:	4603      	mov	r3, r0
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	3708      	adds	r7, #8
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	bd80      	pop	{r7, pc}

0800a2ae <_ZNKSt14default_deleteIN4tama16Nokia5510DisplayEEclEPS1_>:
      operator()(_Tp* __ptr) const
 800a2ae:	b580      	push	{r7, lr}
 800a2b0:	b082      	sub	sp, #8
 800a2b2:	af00      	add	r7, sp, #0
 800a2b4:	6078      	str	r0, [r7, #4]
 800a2b6:	6039      	str	r1, [r7, #0]
	delete __ptr;
 800a2b8:	2130      	movs	r1, #48	; 0x30
 800a2ba:	6838      	ldr	r0, [r7, #0]
 800a2bc:	f00d f8f9 	bl	80174b2 <_ZdlPvj>
      }
 800a2c0:	bf00      	nop
 800a2c2:	3708      	adds	r7, #8
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	bd80      	pop	{r7, pc}

0800a2c8 <_ZNSt10unique_ptrIN4tama16Nokia5510DisplayESt14default_deleteIS1_EE7releaseEv>:
      release() noexcept
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b084      	sub	sp, #16
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 800a2d0:	6878      	ldr	r0, [r7, #4]
 800a2d2:	f000 fa6d 	bl	800a7b0 <_ZNKSt10unique_ptrIN4tama16Nokia5510DisplayESt14default_deleteIS1_EE3getEv>
 800a2d6:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	4618      	mov	r0, r3
 800a2dc:	f7ff ffcd 	bl	800a27a <_ZNSt15__uniq_ptr_implIN4tama16Nokia5510DisplayESt14default_deleteIS1_EE6_M_ptrEv>
 800a2e0:	4602      	mov	r2, r0
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	6013      	str	r3, [r2, #0]
	return __p;
 800a2e6:	68fb      	ldr	r3, [r7, #12]
      }
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	3710      	adds	r7, #16
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	bd80      	pop	{r7, pc}

0800a2f0 <_ZSt7forwardISt14default_deleteIN4tama16Nokia5510DisplayEEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800a2f0:	b480      	push	{r7}
 800a2f2:	b083      	sub	sp, #12
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	370c      	adds	r7, #12
 800a2fe:	46bd      	mov	sp, r7
 800a300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a304:	4770      	bx	lr

0800a306 <_ZNSt15__uniq_ptr_implIN4tama7DisplayESt14default_deleteIS1_EEC1IS2_INS0_16Nokia5510DisplayEEEEPS1_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 800a306:	b590      	push	{r4, r7, lr}
 800a308:	b085      	sub	sp, #20
 800a30a:	af00      	add	r7, sp, #0
 800a30c:	60f8      	str	r0, [r7, #12]
 800a30e:	60b9      	str	r1, [r7, #8]
 800a310:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 800a312:	68fc      	ldr	r4, [r7, #12]
 800a314:	6878      	ldr	r0, [r7, #4]
 800a316:	f7ff ffeb 	bl	800a2f0 <_ZSt7forwardISt14default_deleteIN4tama16Nokia5510DisplayEEEOT_RNSt16remove_referenceIS4_E4typeE>
 800a31a:	4602      	mov	r2, r0
 800a31c:	f107 0308 	add.w	r3, r7, #8
 800a320:	4619      	mov	r1, r3
 800a322:	4620      	mov	r0, r4
 800a324:	f000 fa5c 	bl	800a7e0 <_ZNSt5tupleIJPN4tama7DisplayESt14default_deleteIS1_EEEC1IRS2_S3_INS0_16Nokia5510DisplayEELb1EEEOT_OT0_>
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	4618      	mov	r0, r3
 800a32c:	3714      	adds	r7, #20
 800a32e:	46bd      	mov	sp, r7
 800a330:	bd90      	pop	{r4, r7, pc}

0800a332 <_ZNSaIN4tama18Stm32TextureLoaderEEC1Ev>:
 800a332:	b580      	push	{r7, lr}
 800a334:	b082      	sub	sp, #8
 800a336:	af00      	add	r7, sp, #0
 800a338:	6078      	str	r0, [r7, #4]
 800a33a:	6878      	ldr	r0, [r7, #4]
 800a33c:	f000 fa69 	bl	800a812 <_ZN9__gnu_cxx13new_allocatorIN4tama18Stm32TextureLoaderEEC1Ev>
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	4618      	mov	r0, r3
 800a344:	3708      	adds	r7, #8
 800a346:	46bd      	mov	sp, r7
 800a348:	bd80      	pop	{r7, pc}

0800a34a <_ZNSaIN4tama18Stm32TextureLoaderEED1Ev>:
      ~allocator() throw() { }
 800a34a:	b580      	push	{r7, lr}
 800a34c:	b082      	sub	sp, #8
 800a34e:	af00      	add	r7, sp, #0
 800a350:	6078      	str	r0, [r7, #4]
 800a352:	6878      	ldr	r0, [r7, #4]
 800a354:	f000 fa68 	bl	800a828 <_ZN9__gnu_cxx13new_allocatorIN4tama18Stm32TextureLoaderEED1Ev>
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	4618      	mov	r0, r3
 800a35c:	3708      	adds	r7, #8
 800a35e:	46bd      	mov	sp, r7
 800a360:	bd80      	pop	{r7, pc}

0800a362 <_ZSt15allocate_sharedIN4tama18Stm32TextureLoaderESaIS1_EJEESt10shared_ptrIT_ERKT0_DpOT1_>:
    allocate_shared(const _Alloc& __a, _Args&&... __args)
 800a362:	b580      	push	{r7, lr}
 800a364:	b084      	sub	sp, #16
 800a366:	af00      	add	r7, sp, #0
 800a368:	6078      	str	r0, [r7, #4]
 800a36a:	6039      	str	r1, [r7, #0]
			     std::forward<_Args>(__args)...);
 800a36c:	683a      	ldr	r2, [r7, #0]
 800a36e:	4619      	mov	r1, r3
 800a370:	6878      	ldr	r0, [r7, #4]
 800a372:	f000 fa64 	bl	800a83e <_ZNSt10shared_ptrIN4tama18Stm32TextureLoaderEEC1ISaIS1_EJEEESt19_Sp_make_shared_tagRKT_DpOT0_>
    }
 800a376:	6878      	ldr	r0, [r7, #4]
 800a378:	3710      	adds	r7, #16
 800a37a:	46bd      	mov	sp, r7
 800a37c:	bd80      	pop	{r7, pc}

0800a37e <_ZNSt12__shared_ptrIN4tama13TextureLoaderELN9__gnu_cxx12_Lock_policyE0EEC1INS0_18Stm32TextureLoaderEvEEOS_IT_LS3_0EE>:
	__shared_ptr(__shared_ptr<_Yp, _Lp>&& __r) noexcept
 800a37e:	b580      	push	{r7, lr}
 800a380:	b082      	sub	sp, #8
 800a382:	af00      	add	r7, sp, #0
 800a384:	6078      	str	r0, [r7, #4]
 800a386:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r._M_ptr), _M_refcount()
 800a388:	683b      	ldr	r3, [r7, #0]
 800a38a:	681a      	ldr	r2, [r3, #0]
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	601a      	str	r2, [r3, #0]
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	3304      	adds	r3, #4
 800a394:	4618      	mov	r0, r3
 800a396:	f7f6 fd70 	bl	8000e7a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _M_refcount._M_swap(__r._M_refcount);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	1d1a      	adds	r2, r3, #4
 800a39e:	683b      	ldr	r3, [r7, #0]
 800a3a0:	3304      	adds	r3, #4
 800a3a2:	4619      	mov	r1, r3
 800a3a4:	4610      	mov	r0, r2
 800a3a6:	f7f6 fd76 	bl	8000e96 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  __r._M_ptr = 0;
 800a3aa:	683b      	ldr	r3, [r7, #0]
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	601a      	str	r2, [r3, #0]
	}
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	3708      	adds	r7, #8
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	bd80      	pop	{r7, pc}

0800a3ba <_ZNSaIN4tama27Nokia5110DisplayDataManagerEEC1Ev>:
      allocator() throw() { }
 800a3ba:	b580      	push	{r7, lr}
 800a3bc:	b082      	sub	sp, #8
 800a3be:	af00      	add	r7, sp, #0
 800a3c0:	6078      	str	r0, [r7, #4]
 800a3c2:	6878      	ldr	r0, [r7, #4]
 800a3c4:	f000 fa4c 	bl	800a860 <_ZN9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEEC1Ev>
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	3708      	adds	r7, #8
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	bd80      	pop	{r7, pc}

0800a3d2 <_ZNSaIN4tama27Nokia5110DisplayDataManagerEED1Ev>:
      ~allocator() throw() { }
 800a3d2:	b580      	push	{r7, lr}
 800a3d4:	b082      	sub	sp, #8
 800a3d6:	af00      	add	r7, sp, #0
 800a3d8:	6078      	str	r0, [r7, #4]
 800a3da:	6878      	ldr	r0, [r7, #4]
 800a3dc:	f000 fa4b 	bl	800a876 <_ZN9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEED1Ev>
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	3708      	adds	r7, #8
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	bd80      	pop	{r7, pc}

0800a3ea <_ZSt15allocate_sharedIN4tama27Nokia5110DisplayDataManagerESaIS1_EJEESt10shared_ptrIT_ERKT0_DpOT1_>:
    allocate_shared(const _Alloc& __a, _Args&&... __args)
 800a3ea:	b580      	push	{r7, lr}
 800a3ec:	b084      	sub	sp, #16
 800a3ee:	af00      	add	r7, sp, #0
 800a3f0:	6078      	str	r0, [r7, #4]
 800a3f2:	6039      	str	r1, [r7, #0]
			     std::forward<_Args>(__args)...);
 800a3f4:	683a      	ldr	r2, [r7, #0]
 800a3f6:	4619      	mov	r1, r3
 800a3f8:	6878      	ldr	r0, [r7, #4]
 800a3fa:	f000 fa47 	bl	800a88c <_ZNSt10shared_ptrIN4tama27Nokia5110DisplayDataManagerEEC1ISaIS1_EJEEESt19_Sp_make_shared_tagRKT_DpOT0_>
    }
 800a3fe:	6878      	ldr	r0, [r7, #4]
 800a400:	3710      	adds	r7, #16
 800a402:	46bd      	mov	sp, r7
 800a404:	bd80      	pop	{r7, pc}

0800a406 <_ZNSt12__shared_ptrIN4tama18DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EEC1INS0_27Nokia5110DisplayDataManagerEvEEOS_IT_LS3_0EE>:
	__shared_ptr(__shared_ptr<_Yp, _Lp>&& __r) noexcept
 800a406:	b580      	push	{r7, lr}
 800a408:	b082      	sub	sp, #8
 800a40a:	af00      	add	r7, sp, #0
 800a40c:	6078      	str	r0, [r7, #4]
 800a40e:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r._M_ptr), _M_refcount()
 800a410:	683b      	ldr	r3, [r7, #0]
 800a412:	681a      	ldr	r2, [r3, #0]
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	601a      	str	r2, [r3, #0]
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	3304      	adds	r3, #4
 800a41c:	4618      	mov	r0, r3
 800a41e:	f7f6 fd2c 	bl	8000e7a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _M_refcount._M_swap(__r._M_refcount);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	1d1a      	adds	r2, r3, #4
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	3304      	adds	r3, #4
 800a42a:	4619      	mov	r1, r3
 800a42c:	4610      	mov	r0, r2
 800a42e:	f7f6 fd32 	bl	8000e96 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  __r._M_ptr = 0;
 800a432:	683b      	ldr	r3, [r7, #0]
 800a434:	2200      	movs	r2, #0
 800a436:	601a      	str	r2, [r3, #0]
	}
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	4618      	mov	r0, r3
 800a43c:	3708      	adds	r7, #8
 800a43e:	46bd      	mov	sp, r7
 800a440:	bd80      	pop	{r7, pc}

0800a442 <_ZNSaIN4tama16Stm32TimeMonitorEEC1Ev>:
      allocator() throw() { }
 800a442:	b580      	push	{r7, lr}
 800a444:	b082      	sub	sp, #8
 800a446:	af00      	add	r7, sp, #0
 800a448:	6078      	str	r0, [r7, #4]
 800a44a:	6878      	ldr	r0, [r7, #4]
 800a44c:	f000 fa2f 	bl	800a8ae <_ZN9__gnu_cxx13new_allocatorIN4tama16Stm32TimeMonitorEEC1Ev>
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	4618      	mov	r0, r3
 800a454:	3708      	adds	r7, #8
 800a456:	46bd      	mov	sp, r7
 800a458:	bd80      	pop	{r7, pc}

0800a45a <_ZNSaIN4tama16Stm32TimeMonitorEED1Ev>:
      ~allocator() throw() { }
 800a45a:	b580      	push	{r7, lr}
 800a45c:	b082      	sub	sp, #8
 800a45e:	af00      	add	r7, sp, #0
 800a460:	6078      	str	r0, [r7, #4]
 800a462:	6878      	ldr	r0, [r7, #4]
 800a464:	f000 fa2e 	bl	800a8c4 <_ZN9__gnu_cxx13new_allocatorIN4tama16Stm32TimeMonitorEED1Ev>
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	4618      	mov	r0, r3
 800a46c:	3708      	adds	r7, #8
 800a46e:	46bd      	mov	sp, r7
 800a470:	bd80      	pop	{r7, pc}

0800a472 <_ZSt15allocate_sharedIN4tama16Stm32TimeMonitorESaIS1_EJEESt10shared_ptrIT_ERKT0_DpOT1_>:
    allocate_shared(const _Alloc& __a, _Args&&... __args)
 800a472:	b580      	push	{r7, lr}
 800a474:	b084      	sub	sp, #16
 800a476:	af00      	add	r7, sp, #0
 800a478:	6078      	str	r0, [r7, #4]
 800a47a:	6039      	str	r1, [r7, #0]
			     std::forward<_Args>(__args)...);
 800a47c:	683a      	ldr	r2, [r7, #0]
 800a47e:	4619      	mov	r1, r3
 800a480:	6878      	ldr	r0, [r7, #4]
 800a482:	f000 fa2a 	bl	800a8da <_ZNSt10shared_ptrIN4tama16Stm32TimeMonitorEEC1ISaIS1_EJEEESt19_Sp_make_shared_tagRKT_DpOT0_>
    }
 800a486:	6878      	ldr	r0, [r7, #4]
 800a488:	3710      	adds	r7, #16
 800a48a:	46bd      	mov	sp, r7
 800a48c:	bd80      	pop	{r7, pc}

0800a48e <_ZNSt12__shared_ptrIN4tama11TimeMonitorELN9__gnu_cxx12_Lock_policyE0EEC1INS0_16Stm32TimeMonitorEvEEOS_IT_LS3_0EE>:
	__shared_ptr(__shared_ptr<_Yp, _Lp>&& __r) noexcept
 800a48e:	b580      	push	{r7, lr}
 800a490:	b082      	sub	sp, #8
 800a492:	af00      	add	r7, sp, #0
 800a494:	6078      	str	r0, [r7, #4]
 800a496:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r._M_ptr), _M_refcount()
 800a498:	683b      	ldr	r3, [r7, #0]
 800a49a:	681a      	ldr	r2, [r3, #0]
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	601a      	str	r2, [r3, #0]
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	3304      	adds	r3, #4
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	f7f6 fce8 	bl	8000e7a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _M_refcount._M_swap(__r._M_refcount);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	1d1a      	adds	r2, r3, #4
 800a4ae:	683b      	ldr	r3, [r7, #0]
 800a4b0:	3304      	adds	r3, #4
 800a4b2:	4619      	mov	r1, r3
 800a4b4:	4610      	mov	r0, r2
 800a4b6:	f7f6 fcee 	bl	8000e96 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  __r._M_ptr = 0;
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	2200      	movs	r2, #0
 800a4be:	601a      	str	r2, [r3, #0]
	}
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	3708      	adds	r7, #8
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	bd80      	pop	{r7, pc}

0800a4ca <_ZNSaIN4tama25Stm32SoundPlayingStrategyEEC1Ev>:
      allocator() throw() { }
 800a4ca:	b580      	push	{r7, lr}
 800a4cc:	b082      	sub	sp, #8
 800a4ce:	af00      	add	r7, sp, #0
 800a4d0:	6078      	str	r0, [r7, #4]
 800a4d2:	6878      	ldr	r0, [r7, #4]
 800a4d4:	f000 fa12 	bl	800a8fc <_ZN9__gnu_cxx13new_allocatorIN4tama25Stm32SoundPlayingStrategyEEC1Ev>
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	4618      	mov	r0, r3
 800a4dc:	3708      	adds	r7, #8
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	bd80      	pop	{r7, pc}

0800a4e2 <_ZNSaIN4tama25Stm32SoundPlayingStrategyEED1Ev>:
      ~allocator() throw() { }
 800a4e2:	b580      	push	{r7, lr}
 800a4e4:	b082      	sub	sp, #8
 800a4e6:	af00      	add	r7, sp, #0
 800a4e8:	6078      	str	r0, [r7, #4]
 800a4ea:	6878      	ldr	r0, [r7, #4]
 800a4ec:	f000 fa11 	bl	800a912 <_ZN9__gnu_cxx13new_allocatorIN4tama25Stm32SoundPlayingStrategyEED1Ev>
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	3708      	adds	r7, #8
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	bd80      	pop	{r7, pc}

0800a4fa <_ZSt15allocate_sharedIN4tama25Stm32SoundPlayingStrategyESaIS1_EJEESt10shared_ptrIT_ERKT0_DpOT1_>:
    allocate_shared(const _Alloc& __a, _Args&&... __args)
 800a4fa:	b580      	push	{r7, lr}
 800a4fc:	b084      	sub	sp, #16
 800a4fe:	af00      	add	r7, sp, #0
 800a500:	6078      	str	r0, [r7, #4]
 800a502:	6039      	str	r1, [r7, #0]
			     std::forward<_Args>(__args)...);
 800a504:	683a      	ldr	r2, [r7, #0]
 800a506:	4619      	mov	r1, r3
 800a508:	6878      	ldr	r0, [r7, #4]
 800a50a:	f000 fa0d 	bl	800a928 <_ZNSt10shared_ptrIN4tama25Stm32SoundPlayingStrategyEEC1ISaIS1_EJEEESt19_Sp_make_shared_tagRKT_DpOT0_>
    }
 800a50e:	6878      	ldr	r0, [r7, #4]
 800a510:	3710      	adds	r7, #16
 800a512:	46bd      	mov	sp, r7
 800a514:	bd80      	pop	{r7, pc}

0800a516 <_ZNSt12__shared_ptrIN4tama20SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EEC1INS0_25Stm32SoundPlayingStrategyEvEEOS_IT_LS3_0EE>:
	__shared_ptr(__shared_ptr<_Yp, _Lp>&& __r) noexcept
 800a516:	b580      	push	{r7, lr}
 800a518:	b082      	sub	sp, #8
 800a51a:	af00      	add	r7, sp, #0
 800a51c:	6078      	str	r0, [r7, #4]
 800a51e:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r._M_ptr), _M_refcount()
 800a520:	683b      	ldr	r3, [r7, #0]
 800a522:	681a      	ldr	r2, [r3, #0]
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	601a      	str	r2, [r3, #0]
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	3304      	adds	r3, #4
 800a52c:	4618      	mov	r0, r3
 800a52e:	f7f6 fca4 	bl	8000e7a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _M_refcount._M_swap(__r._M_refcount);
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	1d1a      	adds	r2, r3, #4
 800a536:	683b      	ldr	r3, [r7, #0]
 800a538:	3304      	adds	r3, #4
 800a53a:	4619      	mov	r1, r3
 800a53c:	4610      	mov	r0, r2
 800a53e:	f7f6 fcaa 	bl	8000e96 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  __r._M_ptr = 0;
 800a542:	683b      	ldr	r3, [r7, #0]
 800a544:	2200      	movs	r2, #0
 800a546:	601a      	str	r2, [r3, #0]
	}
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	4618      	mov	r0, r3
 800a54c:	3708      	adds	r7, #8
 800a54e:	46bd      	mov	sp, r7
 800a550:	bd80      	pop	{r7, pc}

0800a552 <_ZNSaIN4tama10Stm32InputEEC1Ev>:
      allocator() throw() { }
 800a552:	b580      	push	{r7, lr}
 800a554:	b082      	sub	sp, #8
 800a556:	af00      	add	r7, sp, #0
 800a558:	6078      	str	r0, [r7, #4]
 800a55a:	6878      	ldr	r0, [r7, #4]
 800a55c:	f000 f9f5 	bl	800a94a <_ZN9__gnu_cxx13new_allocatorIN4tama10Stm32InputEEC1Ev>
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	4618      	mov	r0, r3
 800a564:	3708      	adds	r7, #8
 800a566:	46bd      	mov	sp, r7
 800a568:	bd80      	pop	{r7, pc}

0800a56a <_ZNSaIN4tama10Stm32InputEED1Ev>:
      ~allocator() throw() { }
 800a56a:	b580      	push	{r7, lr}
 800a56c:	b082      	sub	sp, #8
 800a56e:	af00      	add	r7, sp, #0
 800a570:	6078      	str	r0, [r7, #4]
 800a572:	6878      	ldr	r0, [r7, #4]
 800a574:	f000 f9f4 	bl	800a960 <_ZN9__gnu_cxx13new_allocatorIN4tama10Stm32InputEED1Ev>
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	4618      	mov	r0, r3
 800a57c:	3708      	adds	r7, #8
 800a57e:	46bd      	mov	sp, r7
 800a580:	bd80      	pop	{r7, pc}

0800a582 <_ZSt15allocate_sharedIN4tama10Stm32InputESaIS1_EJEESt10shared_ptrIT_ERKT0_DpOT1_>:
    allocate_shared(const _Alloc& __a, _Args&&... __args)
 800a582:	b580      	push	{r7, lr}
 800a584:	b084      	sub	sp, #16
 800a586:	af00      	add	r7, sp, #0
 800a588:	6078      	str	r0, [r7, #4]
 800a58a:	6039      	str	r1, [r7, #0]
			     std::forward<_Args>(__args)...);
 800a58c:	683a      	ldr	r2, [r7, #0]
 800a58e:	4619      	mov	r1, r3
 800a590:	6878      	ldr	r0, [r7, #4]
 800a592:	f000 f9f0 	bl	800a976 <_ZNSt10shared_ptrIN4tama10Stm32InputEEC1ISaIS1_EJEEESt19_Sp_make_shared_tagRKT_DpOT0_>
    }
 800a596:	6878      	ldr	r0, [r7, #4]
 800a598:	3710      	adds	r7, #16
 800a59a:	46bd      	mov	sp, r7
 800a59c:	bd80      	pop	{r7, pc}

0800a59e <_ZNSt12__shared_ptrIN4tama5InputELN9__gnu_cxx12_Lock_policyE0EEC1INS0_10Stm32InputEvEEOS_IT_LS3_0EE>:
	__shared_ptr(__shared_ptr<_Yp, _Lp>&& __r) noexcept
 800a59e:	b580      	push	{r7, lr}
 800a5a0:	b082      	sub	sp, #8
 800a5a2:	af00      	add	r7, sp, #0
 800a5a4:	6078      	str	r0, [r7, #4]
 800a5a6:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r._M_ptr), _M_refcount()
 800a5a8:	683b      	ldr	r3, [r7, #0]
 800a5aa:	681a      	ldr	r2, [r3, #0]
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	601a      	str	r2, [r3, #0]
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	3304      	adds	r3, #4
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	f7f6 fc60 	bl	8000e7a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _M_refcount._M_swap(__r._M_refcount);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	1d1a      	adds	r2, r3, #4
 800a5be:	683b      	ldr	r3, [r7, #0]
 800a5c0:	3304      	adds	r3, #4
 800a5c2:	4619      	mov	r1, r3
 800a5c4:	4610      	mov	r0, r2
 800a5c6:	f7f6 fc66 	bl	8000e96 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  __r._M_ptr = 0;
 800a5ca:	683b      	ldr	r3, [r7, #0]
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	601a      	str	r2, [r3, #0]
	}
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	3708      	adds	r7, #8
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	bd80      	pop	{r7, pc}

0800a5da <_ZNSt12__shared_ptrIN4tama11SoundPlayerELN9__gnu_cxx12_Lock_policyE0EEC1IS1_vEEPT_>:
	__shared_ptr(_Yp* __p)
 800a5da:	b590      	push	{r4, r7, lr}
 800a5dc:	b085      	sub	sp, #20
 800a5de:	af00      	add	r7, sp, #0
 800a5e0:	6078      	str	r0, [r7, #4]
 800a5e2:	6039      	str	r1, [r7, #0]
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	683a      	ldr	r2, [r7, #0]
 800a5e8:	601a      	str	r2, [r3, #0]
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	3304      	adds	r3, #4
 800a5ee:	4622      	mov	r2, r4
 800a5f0:	6839      	ldr	r1, [r7, #0]
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	f000 f9d0 	bl	800a998 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama11SoundPlayerEEET_St17integral_constantIbLb0EE>
	  _M_enable_shared_from_this_with(__p);
 800a5f8:	6839      	ldr	r1, [r7, #0]
 800a5fa:	6878      	ldr	r0, [r7, #4]
 800a5fc:	f000 f9db 	bl	800a9b6 <_ZNSt12__shared_ptrIN4tama11SoundPlayerELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	}
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	4618      	mov	r0, r3
 800a604:	3714      	adds	r7, #20
 800a606:	46bd      	mov	sp, r7
 800a608:	bd90      	pop	{r4, r7, pc}

0800a60a <_ZNSaIN4tama7ContextEEC1Ev>:
      allocator() throw() { }
 800a60a:	b580      	push	{r7, lr}
 800a60c:	b082      	sub	sp, #8
 800a60e:	af00      	add	r7, sp, #0
 800a610:	6078      	str	r0, [r7, #4]
 800a612:	6878      	ldr	r0, [r7, #4]
 800a614:	f000 f9da 	bl	800a9cc <_ZN9__gnu_cxx13new_allocatorIN4tama7ContextEEC1Ev>
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	4618      	mov	r0, r3
 800a61c:	3708      	adds	r7, #8
 800a61e:	46bd      	mov	sp, r7
 800a620:	bd80      	pop	{r7, pc}

0800a622 <_ZNSaIN4tama7ContextEED1Ev>:
      ~allocator() throw() { }
 800a622:	b580      	push	{r7, lr}
 800a624:	b082      	sub	sp, #8
 800a626:	af00      	add	r7, sp, #0
 800a628:	6078      	str	r0, [r7, #4]
 800a62a:	6878      	ldr	r0, [r7, #4]
 800a62c:	f000 f9d9 	bl	800a9e2 <_ZN9__gnu_cxx13new_allocatorIN4tama7ContextEED1Ev>
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	4618      	mov	r0, r3
 800a634:	3708      	adds	r7, #8
 800a636:	46bd      	mov	sp, r7
 800a638:	bd80      	pop	{r7, pc}

0800a63a <_ZSt15allocate_sharedIN4tama7ContextESaIS1_EJRSt10shared_ptrINS0_13TextureLoaderEERS3_INS0_5InputEES3_INS0_11SoundPlayerEEEES3_IT_ERKT0_DpOT1_>:
    allocate_shared(const _Alloc& __a, _Args&&... __args)
 800a63a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a63c:	b089      	sub	sp, #36	; 0x24
 800a63e:	af02      	add	r7, sp, #8
 800a640:	60f8      	str	r0, [r7, #12]
 800a642:	60b9      	str	r1, [r7, #8]
 800a644:	607a      	str	r2, [r7, #4]
 800a646:	603b      	str	r3, [r7, #0]
			     std::forward<_Args>(__args)...);
 800a648:	6878      	ldr	r0, [r7, #4]
 800a64a:	f7ff fd53 	bl	800a0f4 <_ZSt7forwardIRSt10shared_ptrIN4tama13TextureLoaderEEEOT_RNSt16remove_referenceIS5_E4typeE>
 800a64e:	4605      	mov	r5, r0
 800a650:	6838      	ldr	r0, [r7, #0]
 800a652:	f7ff fd5a 	bl	800a10a <_ZSt7forwardIRSt10shared_ptrIN4tama5InputEEEOT_RNSt16remove_referenceIS5_E4typeE>
 800a656:	4604      	mov	r4, r0
 800a658:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a65a:	f7ff fd61 	bl	800a120 <_ZSt7forwardISt10shared_ptrIN4tama11SoundPlayerEEEOT_RNSt16remove_referenceIS4_E4typeE>
 800a65e:	4603      	mov	r3, r0
 800a660:	9301      	str	r3, [sp, #4]
 800a662:	9400      	str	r4, [sp, #0]
 800a664:	462b      	mov	r3, r5
 800a666:	68ba      	ldr	r2, [r7, #8]
 800a668:	4631      	mov	r1, r6
 800a66a:	68f8      	ldr	r0, [r7, #12]
 800a66c:	f000 f9c4 	bl	800a9f8 <_ZNSt10shared_ptrIN4tama7ContextEEC1ISaIS1_EJRS_INS0_13TextureLoaderEERS_INS0_5InputEES_INS0_11SoundPlayerEEEEESt19_Sp_make_shared_tagRKT_DpOT0_>
    }
 800a670:	68f8      	ldr	r0, [r7, #12]
 800a672:	371c      	adds	r7, #28
 800a674:	46bd      	mov	sp, r7
 800a676:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a678 <_ZNSaIN4tama14InitialLoadingEEC1Ev>:
      allocator() throw() { }
 800a678:	b580      	push	{r7, lr}
 800a67a:	b082      	sub	sp, #8
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
 800a680:	6878      	ldr	r0, [r7, #4]
 800a682:	f000 f9dc 	bl	800aa3e <_ZN9__gnu_cxx13new_allocatorIN4tama14InitialLoadingEEC1Ev>
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	4618      	mov	r0, r3
 800a68a:	3708      	adds	r7, #8
 800a68c:	46bd      	mov	sp, r7
 800a68e:	bd80      	pop	{r7, pc}

0800a690 <_ZNSaIN4tama14InitialLoadingEED1Ev>:
      ~allocator() throw() { }
 800a690:	b580      	push	{r7, lr}
 800a692:	b082      	sub	sp, #8
 800a694:	af00      	add	r7, sp, #0
 800a696:	6078      	str	r0, [r7, #4]
 800a698:	6878      	ldr	r0, [r7, #4]
 800a69a:	f000 f9db 	bl	800aa54 <_ZN9__gnu_cxx13new_allocatorIN4tama14InitialLoadingEED1Ev>
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	3708      	adds	r7, #8
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	bd80      	pop	{r7, pc}

0800a6a8 <_ZSt15allocate_sharedIN4tama14InitialLoadingESaIS1_EJRSt10shared_ptrINS0_7ContextEEEES3_IT_ERKT0_DpOT1_>:
    allocate_shared(const _Alloc& __a, _Args&&... __args)
 800a6a8:	b590      	push	{r4, r7, lr}
 800a6aa:	b087      	sub	sp, #28
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	60f8      	str	r0, [r7, #12]
 800a6b0:	60b9      	str	r1, [r7, #8]
 800a6b2:	607a      	str	r2, [r7, #4]
			     std::forward<_Args>(__args)...);
 800a6b4:	6878      	ldr	r0, [r7, #4]
 800a6b6:	f7ff fd67 	bl	800a188 <_ZSt7forwardIRSt10shared_ptrIN4tama7ContextEEEOT_RNSt16remove_referenceIS5_E4typeE>
 800a6ba:	4603      	mov	r3, r0
 800a6bc:	68ba      	ldr	r2, [r7, #8]
 800a6be:	4621      	mov	r1, r4
 800a6c0:	68f8      	ldr	r0, [r7, #12]
 800a6c2:	f000 f9d2 	bl	800aa6a <_ZNSt10shared_ptrIN4tama14InitialLoadingEEC1ISaIS1_EJRS_INS0_7ContextEEEEESt19_Sp_make_shared_tagRKT_DpOT0_>
    }
 800a6c6:	68f8      	ldr	r0, [r7, #12]
 800a6c8:	371c      	adds	r7, #28
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	bd90      	pop	{r4, r7, pc}

0800a6ce <_ZNSt12__shared_ptrIN4tama5StageELN9__gnu_cxx12_Lock_policyE0EEC1INS0_14InitialLoadingEvEEOS_IT_LS3_0EE>:
	__shared_ptr(__shared_ptr<_Yp, _Lp>&& __r) noexcept
 800a6ce:	b580      	push	{r7, lr}
 800a6d0:	b082      	sub	sp, #8
 800a6d2:	af00      	add	r7, sp, #0
 800a6d4:	6078      	str	r0, [r7, #4]
 800a6d6:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r._M_ptr), _M_refcount()
 800a6d8:	683b      	ldr	r3, [r7, #0]
 800a6da:	681a      	ldr	r2, [r3, #0]
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	601a      	str	r2, [r3, #0]
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	3304      	adds	r3, #4
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	f7f6 fbc8 	bl	8000e7a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _M_refcount._M_swap(__r._M_refcount);
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	1d1a      	adds	r2, r3, #4
 800a6ee:	683b      	ldr	r3, [r7, #0]
 800a6f0:	3304      	adds	r3, #4
 800a6f2:	4619      	mov	r1, r3
 800a6f4:	4610      	mov	r0, r2
 800a6f6:	f7f6 fbce 	bl	8000e96 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  __r._M_ptr = 0;
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	601a      	str	r2, [r3, #0]
	}
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	4618      	mov	r0, r3
 800a704:	3708      	adds	r7, #8
 800a706:	46bd      	mov	sp, r7
 800a708:	bd80      	pop	{r7, pc}

0800a70a <_ZNKSt19__shared_ptr_accessIN4tama5StageELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 800a70a:	b580      	push	{r7, lr}
 800a70c:	b082      	sub	sp, #8
 800a70e:	af00      	add	r7, sp, #0
 800a710:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 800a712:	6878      	ldr	r0, [r7, #4]
 800a714:	f000 f9bf 	bl	800aa96 <_ZNKSt12__shared_ptrIN4tama5StageELN9__gnu_cxx12_Lock_policyE0EE3getEv>
 800a718:	4603      	mov	r3, r0
 800a71a:	4618      	mov	r0, r3
 800a71c:	3708      	adds	r7, #8
 800a71e:	46bd      	mov	sp, r7
 800a720:	bd80      	pop	{r7, pc}

0800a722 <_ZNKSt19__shared_ptr_accessIN4tama18DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 800a722:	b580      	push	{r7, lr}
 800a724:	b082      	sub	sp, #8
 800a726:	af00      	add	r7, sp, #0
 800a728:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 800a72a:	6878      	ldr	r0, [r7, #4]
 800a72c:	f000 f9bf 	bl	800aaae <_ZNKSt12__shared_ptrIN4tama18DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE3getEv>
 800a730:	4603      	mov	r3, r0
 800a732:	4618      	mov	r0, r3
 800a734:	3708      	adds	r7, #8
 800a736:	46bd      	mov	sp, r7
 800a738:	bd80      	pop	{r7, pc}

0800a73a <_ZNKSt10unique_ptrIN4tama7DisplayESt14default_deleteIS1_EE3getEv>:
      get() const noexcept
 800a73a:	b580      	push	{r7, lr}
 800a73c:	b082      	sub	sp, #8
 800a73e:	af00      	add	r7, sp, #0
 800a740:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	4618      	mov	r0, r3
 800a746:	f000 f9be 	bl	800aac6 <_ZNKSt15__uniq_ptr_implIN4tama7DisplayESt14default_deleteIS1_EE6_M_ptrEv>
 800a74a:	4603      	mov	r3, r0
 800a74c:	4618      	mov	r0, r3
 800a74e:	3708      	adds	r7, #8
 800a750:	46bd      	mov	sp, r7
 800a752:	bd80      	pop	{r7, pc}

0800a754 <_ZNSt15__uniq_ptr_implIN4tama16Nokia5510DisplayESt14default_deleteIS1_EEC1EPS1_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 800a754:	b580      	push	{r7, lr}
 800a756:	b082      	sub	sp, #8
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
 800a75c:	6039      	str	r1, [r7, #0]
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	4618      	mov	r0, r3
 800a762:	f000 f9be 	bl	800aae2 <_ZNSt5tupleIJPN4tama16Nokia5510DisplayESt14default_deleteIS1_EEEC1IS2_S4_Lb1EEEv>
 800a766:	6878      	ldr	r0, [r7, #4]
 800a768:	f7ff fd87 	bl	800a27a <_ZNSt15__uniq_ptr_implIN4tama16Nokia5510DisplayESt14default_deleteIS1_EE6_M_ptrEv>
 800a76c:	4602      	mov	r2, r0
 800a76e:	683b      	ldr	r3, [r7, #0]
 800a770:	6013      	str	r3, [r2, #0]
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	4618      	mov	r0, r3
 800a776:	3708      	adds	r7, #8
 800a778:	46bd      	mov	sp, r7
 800a77a:	bd80      	pop	{r7, pc}

0800a77c <_ZSt3getILj0EJPN4tama16Nokia5510DisplayESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>:
    get(tuple<_Elements...>& __t) noexcept
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b082      	sub	sp, #8
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	4618      	mov	r0, r3
 800a788:	f000 f9b8 	bl	800aafc <_ZSt12__get_helperILj0EPN4tama16Nokia5510DisplayEJSt14default_deleteIS1_EEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>
 800a78c:	4603      	mov	r3, r0
 800a78e:	4618      	mov	r0, r3
 800a790:	3708      	adds	r7, #8
 800a792:	46bd      	mov	sp, r7
 800a794:	bd80      	pop	{r7, pc}

0800a796 <_ZNSt15__uniq_ptr_implIN4tama16Nokia5510DisplayESt14default_deleteIS1_EE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 800a796:	b580      	push	{r7, lr}
 800a798:	b082      	sub	sp, #8
 800a79a:	af00      	add	r7, sp, #0
 800a79c:	6078      	str	r0, [r7, #4]
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	f000 f9b7 	bl	800ab14 <_ZSt3getILj1EJPN4tama16Nokia5510DisplayESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>
 800a7a6:	4603      	mov	r3, r0
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	3708      	adds	r7, #8
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	bd80      	pop	{r7, pc}

0800a7b0 <_ZNKSt10unique_ptrIN4tama16Nokia5510DisplayESt14default_deleteIS1_EE3getEv>:
      get() const noexcept
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b082      	sub	sp, #8
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	f000 f9b6 	bl	800ab2c <_ZNKSt15__uniq_ptr_implIN4tama16Nokia5510DisplayESt14default_deleteIS1_EE6_M_ptrEv>
 800a7c0:	4603      	mov	r3, r0
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	3708      	adds	r7, #8
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	bd80      	pop	{r7, pc}

0800a7ca <_ZSt7forwardIRPN4tama7DisplayEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800a7ca:	b480      	push	{r7}
 800a7cc:	b083      	sub	sp, #12
 800a7ce:	af00      	add	r7, sp, #0
 800a7d0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	370c      	adds	r7, #12
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7de:	4770      	bx	lr

0800a7e0 <_ZNSt5tupleIJPN4tama7DisplayESt14default_deleteIS1_EEEC1IRS2_S3_INS0_16Nokia5510DisplayEELb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 800a7e0:	b5b0      	push	{r4, r5, r7, lr}
 800a7e2:	b084      	sub	sp, #16
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	60f8      	str	r0, [r7, #12]
 800a7e8:	60b9      	str	r1, [r7, #8]
 800a7ea:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 800a7ec:	68fc      	ldr	r4, [r7, #12]
 800a7ee:	68b8      	ldr	r0, [r7, #8]
 800a7f0:	f7ff ffeb 	bl	800a7ca <_ZSt7forwardIRPN4tama7DisplayEEOT_RNSt16remove_referenceIS4_E4typeE>
 800a7f4:	4605      	mov	r5, r0
 800a7f6:	6878      	ldr	r0, [r7, #4]
 800a7f8:	f7ff fd7a 	bl	800a2f0 <_ZSt7forwardISt14default_deleteIN4tama16Nokia5510DisplayEEEOT_RNSt16remove_referenceIS4_E4typeE>
 800a7fc:	4603      	mov	r3, r0
 800a7fe:	461a      	mov	r2, r3
 800a800:	4629      	mov	r1, r5
 800a802:	4620      	mov	r0, r4
 800a804:	f000 f9a0 	bl	800ab48 <_ZNSt11_Tuple_implILj0EJPN4tama7DisplayESt14default_deleteIS1_EEEC1IRS2_JS3_INS0_16Nokia5510DisplayEEEvEEOT_DpOT0_>
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	4618      	mov	r0, r3
 800a80c:	3710      	adds	r7, #16
 800a80e:	46bd      	mov	sp, r7
 800a810:	bdb0      	pop	{r4, r5, r7, pc}

0800a812 <_ZN9__gnu_cxx13new_allocatorIN4tama18Stm32TextureLoaderEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800a812:	b480      	push	{r7}
 800a814:	b083      	sub	sp, #12
 800a816:	af00      	add	r7, sp, #0
 800a818:	6078      	str	r0, [r7, #4]
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	4618      	mov	r0, r3
 800a81e:	370c      	adds	r7, #12
 800a820:	46bd      	mov	sp, r7
 800a822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a826:	4770      	bx	lr

0800a828 <_ZN9__gnu_cxx13new_allocatorIN4tama18Stm32TextureLoaderEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800a828:	b480      	push	{r7}
 800a82a:	b083      	sub	sp, #12
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	4618      	mov	r0, r3
 800a834:	370c      	adds	r7, #12
 800a836:	46bd      	mov	sp, r7
 800a838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83c:	4770      	bx	lr

0800a83e <_ZNSt10shared_ptrIN4tama18Stm32TextureLoaderEEC1ISaIS1_EJEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 800a83e:	b590      	push	{r4, r7, lr}
 800a840:	b085      	sub	sp, #20
 800a842:	af00      	add	r7, sp, #0
 800a844:	60f8      	str	r0, [r7, #12]
 800a846:	7239      	strb	r1, [r7, #8]
 800a848:	607a      	str	r2, [r7, #4]
	: __shared_ptr<_Tp>(__tag, __a, std::forward<_Args>(__args)...)
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	687a      	ldr	r2, [r7, #4]
 800a84e:	4621      	mov	r1, r4
 800a850:	4618      	mov	r0, r3
 800a852:	f000 f9b2 	bl	800abba <_ZNSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJEEESt19_Sp_make_shared_tagRKT_DpOT0_>
	{ }
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	4618      	mov	r0, r3
 800a85a:	3714      	adds	r7, #20
 800a85c:	46bd      	mov	sp, r7
 800a85e:	bd90      	pop	{r4, r7, pc}

0800a860 <_ZN9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800a860:	b480      	push	{r7}
 800a862:	b083      	sub	sp, #12
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	4618      	mov	r0, r3
 800a86c:	370c      	adds	r7, #12
 800a86e:	46bd      	mov	sp, r7
 800a870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a874:	4770      	bx	lr

0800a876 <_ZN9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800a876:	b480      	push	{r7}
 800a878:	b083      	sub	sp, #12
 800a87a:	af00      	add	r7, sp, #0
 800a87c:	6078      	str	r0, [r7, #4]
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	4618      	mov	r0, r3
 800a882:	370c      	adds	r7, #12
 800a884:	46bd      	mov	sp, r7
 800a886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88a:	4770      	bx	lr

0800a88c <_ZNSt10shared_ptrIN4tama27Nokia5110DisplayDataManagerEEC1ISaIS1_EJEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 800a88c:	b590      	push	{r4, r7, lr}
 800a88e:	b085      	sub	sp, #20
 800a890:	af00      	add	r7, sp, #0
 800a892:	60f8      	str	r0, [r7, #12]
 800a894:	7239      	strb	r1, [r7, #8]
 800a896:	607a      	str	r2, [r7, #4]
	: __shared_ptr<_Tp>(__tag, __a, std::forward<_Args>(__args)...)
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	687a      	ldr	r2, [r7, #4]
 800a89c:	4621      	mov	r1, r4
 800a89e:	4618      	mov	r0, r3
 800a8a0:	f000 fa1e 	bl	800ace0 <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJEEESt19_Sp_make_shared_tagRKT_DpOT0_>
	{ }
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	3714      	adds	r7, #20
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	bd90      	pop	{r4, r7, pc}

0800a8ae <_ZN9__gnu_cxx13new_allocatorIN4tama16Stm32TimeMonitorEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800a8ae:	b480      	push	{r7}
 800a8b0:	b083      	sub	sp, #12
 800a8b2:	af00      	add	r7, sp, #0
 800a8b4:	6078      	str	r0, [r7, #4]
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	370c      	adds	r7, #12
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c2:	4770      	bx	lr

0800a8c4 <_ZN9__gnu_cxx13new_allocatorIN4tama16Stm32TimeMonitorEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800a8c4:	b480      	push	{r7}
 800a8c6:	b083      	sub	sp, #12
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	370c      	adds	r7, #12
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d8:	4770      	bx	lr

0800a8da <_ZNSt10shared_ptrIN4tama16Stm32TimeMonitorEEC1ISaIS1_EJEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 800a8da:	b590      	push	{r4, r7, lr}
 800a8dc:	b085      	sub	sp, #20
 800a8de:	af00      	add	r7, sp, #0
 800a8e0:	60f8      	str	r0, [r7, #12]
 800a8e2:	7239      	strb	r1, [r7, #8]
 800a8e4:	607a      	str	r2, [r7, #4]
	: __shared_ptr<_Tp>(__tag, __a, std::forward<_Args>(__args)...)
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	687a      	ldr	r2, [r7, #4]
 800a8ea:	4621      	mov	r1, r4
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	f000 fa8a 	bl	800ae06 <_ZNSt12__shared_ptrIN4tama16Stm32TimeMonitorELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJEEESt19_Sp_make_shared_tagRKT_DpOT0_>
	{ }
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	3714      	adds	r7, #20
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	bd90      	pop	{r4, r7, pc}

0800a8fc <_ZN9__gnu_cxx13new_allocatorIN4tama25Stm32SoundPlayingStrategyEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800a8fc:	b480      	push	{r7}
 800a8fe:	b083      	sub	sp, #12
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	4618      	mov	r0, r3
 800a908:	370c      	adds	r7, #12
 800a90a:	46bd      	mov	sp, r7
 800a90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a910:	4770      	bx	lr

0800a912 <_ZN9__gnu_cxx13new_allocatorIN4tama25Stm32SoundPlayingStrategyEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800a912:	b480      	push	{r7}
 800a914:	b083      	sub	sp, #12
 800a916:	af00      	add	r7, sp, #0
 800a918:	6078      	str	r0, [r7, #4]
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	4618      	mov	r0, r3
 800a91e:	370c      	adds	r7, #12
 800a920:	46bd      	mov	sp, r7
 800a922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a926:	4770      	bx	lr

0800a928 <_ZNSt10shared_ptrIN4tama25Stm32SoundPlayingStrategyEEC1ISaIS1_EJEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 800a928:	b590      	push	{r4, r7, lr}
 800a92a:	b085      	sub	sp, #20
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	60f8      	str	r0, [r7, #12]
 800a930:	7239      	strb	r1, [r7, #8]
 800a932:	607a      	str	r2, [r7, #4]
	: __shared_ptr<_Tp>(__tag, __a, std::forward<_Args>(__args)...)
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	687a      	ldr	r2, [r7, #4]
 800a938:	4621      	mov	r1, r4
 800a93a:	4618      	mov	r0, r3
 800a93c:	f000 faf6 	bl	800af2c <_ZNSt12__shared_ptrIN4tama25Stm32SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJEEESt19_Sp_make_shared_tagRKT_DpOT0_>
	{ }
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	4618      	mov	r0, r3
 800a944:	3714      	adds	r7, #20
 800a946:	46bd      	mov	sp, r7
 800a948:	bd90      	pop	{r4, r7, pc}

0800a94a <_ZN9__gnu_cxx13new_allocatorIN4tama10Stm32InputEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800a94a:	b480      	push	{r7}
 800a94c:	b083      	sub	sp, #12
 800a94e:	af00      	add	r7, sp, #0
 800a950:	6078      	str	r0, [r7, #4]
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	4618      	mov	r0, r3
 800a956:	370c      	adds	r7, #12
 800a958:	46bd      	mov	sp, r7
 800a95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95e:	4770      	bx	lr

0800a960 <_ZN9__gnu_cxx13new_allocatorIN4tama10Stm32InputEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800a960:	b480      	push	{r7}
 800a962:	b083      	sub	sp, #12
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	4618      	mov	r0, r3
 800a96c:	370c      	adds	r7, #12
 800a96e:	46bd      	mov	sp, r7
 800a970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a974:	4770      	bx	lr

0800a976 <_ZNSt10shared_ptrIN4tama10Stm32InputEEC1ISaIS1_EJEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 800a976:	b590      	push	{r4, r7, lr}
 800a978:	b085      	sub	sp, #20
 800a97a:	af00      	add	r7, sp, #0
 800a97c:	60f8      	str	r0, [r7, #12]
 800a97e:	7239      	strb	r1, [r7, #8]
 800a980:	607a      	str	r2, [r7, #4]
	: __shared_ptr<_Tp>(__tag, __a, std::forward<_Args>(__args)...)
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	687a      	ldr	r2, [r7, #4]
 800a986:	4621      	mov	r1, r4
 800a988:	4618      	mov	r0, r3
 800a98a:	f000 fb62 	bl	800b052 <_ZNSt12__shared_ptrIN4tama10Stm32InputELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJEEESt19_Sp_make_shared_tagRKT_DpOT0_>
	{ }
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	4618      	mov	r0, r3
 800a992:	3714      	adds	r7, #20
 800a994:	46bd      	mov	sp, r7
 800a996:	bd90      	pop	{r4, r7, pc}

0800a998 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama11SoundPlayerEEET_St17integral_constantIbLb0EE>:
	__shared_count(_Ptr __p, /* is_array = */ false_type)
 800a998:	b580      	push	{r7, lr}
 800a99a:	b084      	sub	sp, #16
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	60f8      	str	r0, [r7, #12]
 800a9a0:	60b9      	str	r1, [r7, #8]
 800a9a2:	713a      	strb	r2, [r7, #4]
	: __shared_count(__p)
 800a9a4:	68b9      	ldr	r1, [r7, #8]
 800a9a6:	68f8      	ldr	r0, [r7, #12]
 800a9a8:	f000 fbc9 	bl	800b13e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama11SoundPlayerEEET_>
	{ }
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	3710      	adds	r7, #16
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	bd80      	pop	{r7, pc}

0800a9b6 <_ZNSt12__shared_ptrIN4tama11SoundPlayerELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp*) noexcept
 800a9b6:	b480      	push	{r7}
 800a9b8:	b083      	sub	sp, #12
 800a9ba:	af00      	add	r7, sp, #0
 800a9bc:	6078      	str	r0, [r7, #4]
 800a9be:	6039      	str	r1, [r7, #0]
	{ }
 800a9c0:	bf00      	nop
 800a9c2:	370c      	adds	r7, #12
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ca:	4770      	bx	lr

0800a9cc <_ZN9__gnu_cxx13new_allocatorIN4tama7ContextEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800a9cc:	b480      	push	{r7}
 800a9ce:	b083      	sub	sp, #12
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	370c      	adds	r7, #12
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e0:	4770      	bx	lr

0800a9e2 <_ZN9__gnu_cxx13new_allocatorIN4tama7ContextEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800a9e2:	b480      	push	{r7}
 800a9e4:	b083      	sub	sp, #12
 800a9e6:	af00      	add	r7, sp, #0
 800a9e8:	6078      	str	r0, [r7, #4]
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	370c      	adds	r7, #12
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f6:	4770      	bx	lr

0800a9f8 <_ZNSt10shared_ptrIN4tama7ContextEEC1ISaIS1_EJRS_INS0_13TextureLoaderEERS_INS0_5InputEES_INS0_11SoundPlayerEEEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 800a9f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9fc:	b086      	sub	sp, #24
 800a9fe:	af02      	add	r7, sp, #8
 800aa00:	60f8      	str	r0, [r7, #12]
 800aa02:	7239      	strb	r1, [r7, #8]
 800aa04:	607a      	str	r2, [r7, #4]
 800aa06:	603b      	str	r3, [r7, #0]
	: __shared_ptr<_Tp>(__tag, __a, std::forward<_Args>(__args)...)
 800aa08:	68fc      	ldr	r4, [r7, #12]
 800aa0a:	6838      	ldr	r0, [r7, #0]
 800aa0c:	f7ff fb72 	bl	800a0f4 <_ZSt7forwardIRSt10shared_ptrIN4tama13TextureLoaderEEEOT_RNSt16remove_referenceIS5_E4typeE>
 800aa10:	4606      	mov	r6, r0
 800aa12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa14:	f7ff fb79 	bl	800a10a <_ZSt7forwardIRSt10shared_ptrIN4tama5InputEEEOT_RNSt16remove_referenceIS5_E4typeE>
 800aa18:	4605      	mov	r5, r0
 800aa1a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aa1c:	f7ff fb80 	bl	800a120 <_ZSt7forwardISt10shared_ptrIN4tama11SoundPlayerEEEOT_RNSt16remove_referenceIS4_E4typeE>
 800aa20:	4603      	mov	r3, r0
 800aa22:	9301      	str	r3, [sp, #4]
 800aa24:	9500      	str	r5, [sp, #0]
 800aa26:	4633      	mov	r3, r6
 800aa28:	687a      	ldr	r2, [r7, #4]
 800aa2a:	4641      	mov	r1, r8
 800aa2c:	4620      	mov	r0, r4
 800aa2e:	f000 fbbb 	bl	800b1a8 <_ZNSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJRSt10shared_ptrINS0_13TextureLoaderEERS7_INS0_5InputEES7_INS0_11SoundPlayerEEEEESt19_Sp_make_shared_tagRKT_DpOT0_>
	{ }
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	4618      	mov	r0, r3
 800aa36:	3710      	adds	r7, #16
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800aa3e <_ZN9__gnu_cxx13new_allocatorIN4tama14InitialLoadingEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800aa3e:	b480      	push	{r7}
 800aa40:	b083      	sub	sp, #12
 800aa42:	af00      	add	r7, sp, #0
 800aa44:	6078      	str	r0, [r7, #4]
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	4618      	mov	r0, r3
 800aa4a:	370c      	adds	r7, #12
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa52:	4770      	bx	lr

0800aa54 <_ZN9__gnu_cxx13new_allocatorIN4tama14InitialLoadingEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800aa54:	b480      	push	{r7}
 800aa56:	b083      	sub	sp, #12
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	4618      	mov	r0, r3
 800aa60:	370c      	adds	r7, #12
 800aa62:	46bd      	mov	sp, r7
 800aa64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa68:	4770      	bx	lr

0800aa6a <_ZNSt10shared_ptrIN4tama14InitialLoadingEEC1ISaIS1_EJRS_INS0_7ContextEEEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 800aa6a:	b5b0      	push	{r4, r5, r7, lr}
 800aa6c:	b084      	sub	sp, #16
 800aa6e:	af00      	add	r7, sp, #0
 800aa70:	60f8      	str	r0, [r7, #12]
 800aa72:	7239      	strb	r1, [r7, #8]
 800aa74:	607a      	str	r2, [r7, #4]
 800aa76:	603b      	str	r3, [r7, #0]
	: __shared_ptr<_Tp>(__tag, __a, std::forward<_Args>(__args)...)
 800aa78:	68fc      	ldr	r4, [r7, #12]
 800aa7a:	6838      	ldr	r0, [r7, #0]
 800aa7c:	f7ff fb84 	bl	800a188 <_ZSt7forwardIRSt10shared_ptrIN4tama7ContextEEEOT_RNSt16remove_referenceIS5_E4typeE>
 800aa80:	4603      	mov	r3, r0
 800aa82:	687a      	ldr	r2, [r7, #4]
 800aa84:	4629      	mov	r1, r5
 800aa86:	4620      	mov	r0, r4
 800aa88:	f000 fc30 	bl	800b2ec <_ZNSt12__shared_ptrIN4tama14InitialLoadingELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJRSt10shared_ptrINS0_7ContextEEEEESt19_Sp_make_shared_tagRKT_DpOT0_>
	{ }
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	4618      	mov	r0, r3
 800aa90:	3710      	adds	r7, #16
 800aa92:	46bd      	mov	sp, r7
 800aa94:	bdb0      	pop	{r4, r5, r7, pc}

0800aa96 <_ZNKSt12__shared_ptrIN4tama5StageELN9__gnu_cxx12_Lock_policyE0EE3getEv>:
      get() const noexcept
 800aa96:	b480      	push	{r7}
 800aa98:	b083      	sub	sp, #12
 800aa9a:	af00      	add	r7, sp, #0
 800aa9c:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	370c      	adds	r7, #12
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaac:	4770      	bx	lr

0800aaae <_ZNKSt12__shared_ptrIN4tama18DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE3getEv>:
      get() const noexcept
 800aaae:	b480      	push	{r7}
 800aab0:	b083      	sub	sp, #12
 800aab2:	af00      	add	r7, sp, #0
 800aab4:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	4618      	mov	r0, r3
 800aabc:	370c      	adds	r7, #12
 800aabe:	46bd      	mov	sp, r7
 800aac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac4:	4770      	bx	lr

0800aac6 <_ZNKSt15__uniq_ptr_implIN4tama7DisplayESt14default_deleteIS1_EE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 800aac6:	b580      	push	{r7, lr}
 800aac8:	b082      	sub	sp, #8
 800aaca:	af00      	add	r7, sp, #0
 800aacc:	6078      	str	r0, [r7, #4]
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	4618      	mov	r0, r3
 800aad2:	f000 fc86 	bl	800b3e2 <_ZSt3getILj0EJPN4tama7DisplayESt14default_deleteIS1_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_>
 800aad6:	4603      	mov	r3, r0
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	4618      	mov	r0, r3
 800aadc:	3708      	adds	r7, #8
 800aade:	46bd      	mov	sp, r7
 800aae0:	bd80      	pop	{r7, pc}

0800aae2 <_ZNSt5tupleIJPN4tama16Nokia5510DisplayESt14default_deleteIS1_EEEC1IS2_S4_Lb1EEEv>:
      constexpr tuple()
 800aae2:	b580      	push	{r7, lr}
 800aae4:	b082      	sub	sp, #8
 800aae6:	af00      	add	r7, sp, #0
 800aae8:	6078      	str	r0, [r7, #4]
      : _Inherited() { }
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	4618      	mov	r0, r3
 800aaee:	f000 fc85 	bl	800b3fc <_ZNSt11_Tuple_implILj0EJPN4tama16Nokia5510DisplayESt14default_deleteIS1_EEEC1Ev>
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	3708      	adds	r7, #8
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	bd80      	pop	{r7, pc}

0800aafc <_ZSt12__get_helperILj0EPN4tama16Nokia5510DisplayEJSt14default_deleteIS1_EEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b082      	sub	sp, #8
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800ab04:	6878      	ldr	r0, [r7, #4]
 800ab06:	f000 fc89 	bl	800b41c <_ZNSt11_Tuple_implILj0EJPN4tama16Nokia5510DisplayESt14default_deleteIS1_EEE7_M_headERS5_>
 800ab0a:	4603      	mov	r3, r0
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	3708      	adds	r7, #8
 800ab10:	46bd      	mov	sp, r7
 800ab12:	bd80      	pop	{r7, pc}

0800ab14 <_ZSt3getILj1EJPN4tama16Nokia5510DisplayESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>:
    get(tuple<_Elements...>& __t) noexcept
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b082      	sub	sp, #8
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800ab1c:	6878      	ldr	r0, [r7, #4]
 800ab1e:	f000 fc8a 	bl	800b436 <_ZSt12__get_helperILj1ESt14default_deleteIN4tama16Nokia5510DisplayEEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800ab22:	4603      	mov	r3, r0
 800ab24:	4618      	mov	r0, r3
 800ab26:	3708      	adds	r7, #8
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	bd80      	pop	{r7, pc}

0800ab2c <_ZNKSt15__uniq_ptr_implIN4tama16Nokia5510DisplayESt14default_deleteIS1_EE6_M_ptrEv>:
 800ab2c:	b580      	push	{r7, lr}
 800ab2e:	b082      	sub	sp, #8
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	6078      	str	r0, [r7, #4]
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	4618      	mov	r0, r3
 800ab38:	f000 fc89 	bl	800b44e <_ZSt3getILj0EJPN4tama16Nokia5510DisplayESt14default_deleteIS1_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_>
 800ab3c:	4603      	mov	r3, r0
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	4618      	mov	r0, r3
 800ab42:	3708      	adds	r7, #8
 800ab44:	46bd      	mov	sp, r7
 800ab46:	bd80      	pop	{r7, pc}

0800ab48 <_ZNSt11_Tuple_implILj0EJPN4tama7DisplayESt14default_deleteIS1_EEEC1IRS2_JS3_INS0_16Nokia5510DisplayEEEvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 800ab48:	b590      	push	{r4, r7, lr}
 800ab4a:	b085      	sub	sp, #20
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	60f8      	str	r0, [r7, #12]
 800ab50:	60b9      	str	r1, [r7, #8]
 800ab52:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 800ab54:	6878      	ldr	r0, [r7, #4]
 800ab56:	f7ff fbcb 	bl	800a2f0 <_ZSt7forwardISt14default_deleteIN4tama16Nokia5510DisplayEEEOT_RNSt16remove_referenceIS4_E4typeE>
 800ab5a:	4603      	mov	r3, r0
 800ab5c:	4619      	mov	r1, r3
 800ab5e:	68f8      	ldr	r0, [r7, #12]
 800ab60:	f000 fc82 	bl	800b468 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN4tama7DisplayEEEEC1IS0_INS1_16Nokia5510DisplayEEEEOT_>
 800ab64:	68fc      	ldr	r4, [r7, #12]
 800ab66:	68b8      	ldr	r0, [r7, #8]
 800ab68:	f7ff fe2f 	bl	800a7ca <_ZSt7forwardIRPN4tama7DisplayEEOT_RNSt16remove_referenceIS4_E4typeE>
 800ab6c:	4603      	mov	r3, r0
 800ab6e:	4619      	mov	r1, r3
 800ab70:	4620      	mov	r0, r4
 800ab72:	f000 fc8b 	bl	800b48c <_ZNSt10_Head_baseILj0EPN4tama7DisplayELb0EEC1IRS2_EEOT_>
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	4618      	mov	r0, r3
 800ab7a:	3714      	adds	r7, #20
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	bd90      	pop	{r4, r7, pc}

0800ab80 <_ZNSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>:
        struct _Deleter
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b082      	sub	sp, #8
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	f7ff fbdd 	bl	800a34a <_ZNSaIN4tama18Stm32TextureLoaderEED1Ev>
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	4618      	mov	r0, r3
 800ab94:	3708      	adds	r7, #8
 800ab96:	46bd      	mov	sp, r7
 800ab98:	bd80      	pop	{r7, pc}

0800ab9a <_ZNSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>:
 800ab9a:	b580      	push	{r7, lr}
 800ab9c:	b082      	sub	sp, #8
 800ab9e:	af00      	add	r7, sp, #0
 800aba0:	6078      	str	r0, [r7, #4]
 800aba2:	6039      	str	r1, [r7, #0]
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	683a      	ldr	r2, [r7, #0]
 800aba8:	4611      	mov	r1, r2
 800abaa:	4618      	mov	r0, r3
 800abac:	f000 fc7f 	bl	800b4ae <_ZNSaIN4tama18Stm32TextureLoaderEEC1ERKS1_>
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	4618      	mov	r0, r3
 800abb4:	3708      	adds	r7, #8
 800abb6:	46bd      	mov	sp, r7
 800abb8:	bd80      	pop	{r7, pc}

0800abba <_ZNSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 800abba:	b580      	push	{r7, lr}
 800abbc:	b08c      	sub	sp, #48	; 0x30
 800abbe:	af00      	add	r7, sp, #0
 800abc0:	60f8      	str	r0, [r7, #12]
 800abc2:	7239      	strb	r1, [r7, #8]
 800abc4:	607a      	str	r2, [r7, #4]
	: _M_ptr(), _M_refcount()
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	2200      	movs	r2, #0
 800abca:	601a      	str	r2, [r3, #0]
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	3304      	adds	r3, #4
 800abd0:	4618      	mov	r0, r3
 800abd2:	f7f6 f952 	bl	8000e7a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 800abd6:	f107 0320 	add.w	r3, r7, #32
 800abda:	6879      	ldr	r1, [r7, #4]
 800abdc:	4618      	mov	r0, r3
 800abde:	f000 fc66 	bl	800b4ae <_ZNSaIN4tama18Stm32TextureLoaderEEC1ERKS1_>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 800abe2:	f107 0318 	add.w	r3, r7, #24
 800abe6:	f107 0220 	add.w	r2, r7, #32
 800abea:	4611      	mov	r1, r2
 800abec:	4618      	mov	r0, r3
 800abee:	f000 fc6c 	bl	800b4ca <_ZSt18__allocate_guardedISaIN4tama18Stm32TextureLoaderEEESt15__allocated_ptrIT_ERS4_>
	  auto __ptr = __guard.get();
 800abf2:	f107 0318 	add.w	r3, r7, #24
 800abf6:	4618      	mov	r0, r3
 800abf8:	f000 fc8f 	bl	800b51a <_ZNSt15__allocated_ptrISaIN4tama18Stm32TextureLoaderEEE3getEv>
 800abfc:	62f8      	str	r0, [r7, #44]	; 0x2c
	  __traits::construct(__del._M_alloc, __ptr,
 800abfe:	f107 0320 	add.w	r3, r7, #32
 800ac02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ac04:	4618      	mov	r0, r3
 800ac06:	f000 fc96 	bl	800b536 <_ZNSt16allocator_traitsISaIN4tama18Stm32TextureLoaderEEE9constructIS1_JEEEvRS2_PT_DpOT0_>
	  __guard = nullptr;
 800ac0a:	f107 0318 	add.w	r3, r7, #24
 800ac0e:	2100      	movs	r1, #0
 800ac10:	4618      	mov	r0, r3
 800ac12:	f000 fc9d 	bl	800b550 <_ZNSt15__allocated_ptrISaIN4tama18Stm32TextureLoaderEEEaSEDn>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 800ac16:	f107 0220 	add.w	r2, r7, #32
 800ac1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ac1e:	4611      	mov	r1, r2
 800ac20:	4618      	mov	r0, r3
 800ac22:	f7ff ffba 	bl	800ab9a <_ZNSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>
 800ac26:	f107 0220 	add.w	r2, r7, #32
 800ac2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ac2e:	4611      	mov	r1, r2
 800ac30:	4618      	mov	r0, r3
 800ac32:	f000 fc3c 	bl	800b4ae <_ZNSaIN4tama18Stm32TextureLoaderEEC1ERKS1_>
 800ac36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ac3a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800ac3e:	f107 0014 	add.w	r0, r7, #20
 800ac42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ac44:	f000 fcb9 	bl	800b5ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
 800ac48:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	f7ff fb7c 	bl	800a34a <_ZNSaIN4tama18Stm32TextureLoaderEED1Ev>
 800ac52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ac56:	4618      	mov	r0, r3
 800ac58:	f7ff ff92 	bl	800ab80 <_ZNSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	  _M_refcount._M_swap(__count);
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	3304      	adds	r3, #4
 800ac60:	f107 0214 	add.w	r2, r7, #20
 800ac64:	4611      	mov	r1, r2
 800ac66:	4618      	mov	r0, r3
 800ac68:	f7f6 f915 	bl	8000e96 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  _M_ptr = __ptr;
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ac70:	601a      	str	r2, [r3, #0]
	  _M_enable_shared_from_this_with(_M_ptr);
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	4619      	mov	r1, r3
 800ac78:	68f8      	ldr	r0, [r7, #12]
 800ac7a:	f000 fcf5 	bl	800b668 <_ZNSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 800ac7e:	f107 0314 	add.w	r3, r7, #20
 800ac82:	4618      	mov	r0, r3
 800ac84:	f7f5 fedd 	bl	8000a42 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 800ac88:	f107 0318 	add.w	r3, r7, #24
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	f000 fc2f 	bl	800b4f0 <_ZNSt15__allocated_ptrISaIN4tama18Stm32TextureLoaderEEED1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 800ac92:	f107 0320 	add.w	r3, r7, #32
 800ac96:	4618      	mov	r0, r3
 800ac98:	f7ff ff72 	bl	800ab80 <_ZNSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	}
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	4618      	mov	r0, r3
 800aca0:	3730      	adds	r7, #48	; 0x30
 800aca2:	46bd      	mov	sp, r7
 800aca4:	bd80      	pop	{r7, pc}

0800aca6 <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>:
        struct _Deleter
 800aca6:	b580      	push	{r7, lr}
 800aca8:	b082      	sub	sp, #8
 800acaa:	af00      	add	r7, sp, #0
 800acac:	6078      	str	r0, [r7, #4]
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	4618      	mov	r0, r3
 800acb2:	f7ff fb8e 	bl	800a3d2 <_ZNSaIN4tama27Nokia5110DisplayDataManagerEED1Ev>
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	4618      	mov	r0, r3
 800acba:	3708      	adds	r7, #8
 800acbc:	46bd      	mov	sp, r7
 800acbe:	bd80      	pop	{r7, pc}

0800acc0 <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>:
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b082      	sub	sp, #8
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
 800acc8:	6039      	str	r1, [r7, #0]
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	683a      	ldr	r2, [r7, #0]
 800acce:	4611      	mov	r1, r2
 800acd0:	4618      	mov	r0, r3
 800acd2:	f000 fcd4 	bl	800b67e <_ZNSaIN4tama27Nokia5110DisplayDataManagerEEC1ERKS1_>
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	4618      	mov	r0, r3
 800acda:	3708      	adds	r7, #8
 800acdc:	46bd      	mov	sp, r7
 800acde:	bd80      	pop	{r7, pc}

0800ace0 <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b08c      	sub	sp, #48	; 0x30
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	60f8      	str	r0, [r7, #12]
 800ace8:	7239      	strb	r1, [r7, #8]
 800acea:	607a      	str	r2, [r7, #4]
	: _M_ptr(), _M_refcount()
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	2200      	movs	r2, #0
 800acf0:	601a      	str	r2, [r3, #0]
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	3304      	adds	r3, #4
 800acf6:	4618      	mov	r0, r3
 800acf8:	f7f6 f8bf 	bl	8000e7a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 800acfc:	f107 0320 	add.w	r3, r7, #32
 800ad00:	6879      	ldr	r1, [r7, #4]
 800ad02:	4618      	mov	r0, r3
 800ad04:	f000 fcbb 	bl	800b67e <_ZNSaIN4tama27Nokia5110DisplayDataManagerEEC1ERKS1_>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 800ad08:	f107 0318 	add.w	r3, r7, #24
 800ad0c:	f107 0220 	add.w	r2, r7, #32
 800ad10:	4611      	mov	r1, r2
 800ad12:	4618      	mov	r0, r3
 800ad14:	f000 fcc1 	bl	800b69a <_ZSt18__allocate_guardedISaIN4tama27Nokia5110DisplayDataManagerEEESt15__allocated_ptrIT_ERS4_>
	  auto __ptr = __guard.get();
 800ad18:	f107 0318 	add.w	r3, r7, #24
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	f000 fce4 	bl	800b6ea <_ZNSt15__allocated_ptrISaIN4tama27Nokia5110DisplayDataManagerEEE3getEv>
 800ad22:	62f8      	str	r0, [r7, #44]	; 0x2c
	  __traits::construct(__del._M_alloc, __ptr,
 800ad24:	f107 0320 	add.w	r3, r7, #32
 800ad28:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	f000 fceb 	bl	800b706 <_ZNSt16allocator_traitsISaIN4tama27Nokia5110DisplayDataManagerEEE9constructIS1_JEEEvRS2_PT_DpOT0_>
	  __guard = nullptr;
 800ad30:	f107 0318 	add.w	r3, r7, #24
 800ad34:	2100      	movs	r1, #0
 800ad36:	4618      	mov	r0, r3
 800ad38:	f000 fcf2 	bl	800b720 <_ZNSt15__allocated_ptrISaIN4tama27Nokia5110DisplayDataManagerEEEaSEDn>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 800ad3c:	f107 0220 	add.w	r2, r7, #32
 800ad40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ad44:	4611      	mov	r1, r2
 800ad46:	4618      	mov	r0, r3
 800ad48:	f7ff ffba 	bl	800acc0 <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>
 800ad4c:	f107 0220 	add.w	r2, r7, #32
 800ad50:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ad54:	4611      	mov	r1, r2
 800ad56:	4618      	mov	r0, r3
 800ad58:	f000 fc91 	bl	800b67e <_ZNSaIN4tama27Nokia5110DisplayDataManagerEEC1ERKS1_>
 800ad5c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ad60:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800ad64:	f107 0014 	add.w	r0, r7, #20
 800ad68:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ad6a:	f000 fd0e 	bl	800b78a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
 800ad6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ad72:	4618      	mov	r0, r3
 800ad74:	f7ff fb2d 	bl	800a3d2 <_ZNSaIN4tama27Nokia5110DisplayDataManagerEED1Ev>
 800ad78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	f7ff ff92 	bl	800aca6 <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	  _M_refcount._M_swap(__count);
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	3304      	adds	r3, #4
 800ad86:	f107 0214 	add.w	r2, r7, #20
 800ad8a:	4611      	mov	r1, r2
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	f7f6 f882 	bl	8000e96 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  _M_ptr = __ptr;
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ad96:	601a      	str	r2, [r3, #0]
	  _M_enable_shared_from_this_with(_M_ptr);
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	4619      	mov	r1, r3
 800ad9e:	68f8      	ldr	r0, [r7, #12]
 800ada0:	f000 fd4a 	bl	800b838 <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 800ada4:	f107 0314 	add.w	r3, r7, #20
 800ada8:	4618      	mov	r0, r3
 800adaa:	f7f5 fe4a 	bl	8000a42 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 800adae:	f107 0318 	add.w	r3, r7, #24
 800adb2:	4618      	mov	r0, r3
 800adb4:	f000 fc84 	bl	800b6c0 <_ZNSt15__allocated_ptrISaIN4tama27Nokia5110DisplayDataManagerEEED1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 800adb8:	f107 0320 	add.w	r3, r7, #32
 800adbc:	4618      	mov	r0, r3
 800adbe:	f7ff ff72 	bl	800aca6 <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	}
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	4618      	mov	r0, r3
 800adc6:	3730      	adds	r7, #48	; 0x30
 800adc8:	46bd      	mov	sp, r7
 800adca:	bd80      	pop	{r7, pc}

0800adcc <_ZNSt12__shared_ptrIN4tama16Stm32TimeMonitorELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>:
        struct _Deleter
 800adcc:	b580      	push	{r7, lr}
 800adce:	b082      	sub	sp, #8
 800add0:	af00      	add	r7, sp, #0
 800add2:	6078      	str	r0, [r7, #4]
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	4618      	mov	r0, r3
 800add8:	f7ff fb3f 	bl	800a45a <_ZNSaIN4tama16Stm32TimeMonitorEED1Ev>
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	4618      	mov	r0, r3
 800ade0:	3708      	adds	r7, #8
 800ade2:	46bd      	mov	sp, r7
 800ade4:	bd80      	pop	{r7, pc}

0800ade6 <_ZNSt12__shared_ptrIN4tama16Stm32TimeMonitorELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>:
 800ade6:	b580      	push	{r7, lr}
 800ade8:	b082      	sub	sp, #8
 800adea:	af00      	add	r7, sp, #0
 800adec:	6078      	str	r0, [r7, #4]
 800adee:	6039      	str	r1, [r7, #0]
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	683a      	ldr	r2, [r7, #0]
 800adf4:	4611      	mov	r1, r2
 800adf6:	4618      	mov	r0, r3
 800adf8:	f000 fd29 	bl	800b84e <_ZNSaIN4tama16Stm32TimeMonitorEEC1ERKS1_>
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	4618      	mov	r0, r3
 800ae00:	3708      	adds	r7, #8
 800ae02:	46bd      	mov	sp, r7
 800ae04:	bd80      	pop	{r7, pc}

0800ae06 <_ZNSt12__shared_ptrIN4tama16Stm32TimeMonitorELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 800ae06:	b580      	push	{r7, lr}
 800ae08:	b08c      	sub	sp, #48	; 0x30
 800ae0a:	af00      	add	r7, sp, #0
 800ae0c:	60f8      	str	r0, [r7, #12]
 800ae0e:	7239      	strb	r1, [r7, #8]
 800ae10:	607a      	str	r2, [r7, #4]
	: _M_ptr(), _M_refcount()
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	2200      	movs	r2, #0
 800ae16:	601a      	str	r2, [r3, #0]
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	3304      	adds	r3, #4
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	f7f6 f82c 	bl	8000e7a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 800ae22:	f107 0320 	add.w	r3, r7, #32
 800ae26:	6879      	ldr	r1, [r7, #4]
 800ae28:	4618      	mov	r0, r3
 800ae2a:	f000 fd10 	bl	800b84e <_ZNSaIN4tama16Stm32TimeMonitorEEC1ERKS1_>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 800ae2e:	f107 0318 	add.w	r3, r7, #24
 800ae32:	f107 0220 	add.w	r2, r7, #32
 800ae36:	4611      	mov	r1, r2
 800ae38:	4618      	mov	r0, r3
 800ae3a:	f000 fd16 	bl	800b86a <_ZSt18__allocate_guardedISaIN4tama16Stm32TimeMonitorEEESt15__allocated_ptrIT_ERS4_>
	  auto __ptr = __guard.get();
 800ae3e:	f107 0318 	add.w	r3, r7, #24
 800ae42:	4618      	mov	r0, r3
 800ae44:	f000 fd39 	bl	800b8ba <_ZNSt15__allocated_ptrISaIN4tama16Stm32TimeMonitorEEE3getEv>
 800ae48:	62f8      	str	r0, [r7, #44]	; 0x2c
	  __traits::construct(__del._M_alloc, __ptr,
 800ae4a:	f107 0320 	add.w	r3, r7, #32
 800ae4e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ae50:	4618      	mov	r0, r3
 800ae52:	f000 fd40 	bl	800b8d6 <_ZNSt16allocator_traitsISaIN4tama16Stm32TimeMonitorEEE9constructIS1_JEEEvRS2_PT_DpOT0_>
	  __guard = nullptr;
 800ae56:	f107 0318 	add.w	r3, r7, #24
 800ae5a:	2100      	movs	r1, #0
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	f000 fd47 	bl	800b8f0 <_ZNSt15__allocated_ptrISaIN4tama16Stm32TimeMonitorEEEaSEDn>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 800ae62:	f107 0220 	add.w	r2, r7, #32
 800ae66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ae6a:	4611      	mov	r1, r2
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	f7ff ffba 	bl	800ade6 <_ZNSt12__shared_ptrIN4tama16Stm32TimeMonitorELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>
 800ae72:	f107 0220 	add.w	r2, r7, #32
 800ae76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ae7a:	4611      	mov	r1, r2
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	f000 fce6 	bl	800b84e <_ZNSaIN4tama16Stm32TimeMonitorEEC1ERKS1_>
 800ae82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ae86:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800ae8a:	f107 0014 	add.w	r0, r7, #20
 800ae8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ae90:	f000 fd63 	bl	800b95a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
 800ae94:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ae98:	4618      	mov	r0, r3
 800ae9a:	f7ff fade 	bl	800a45a <_ZNSaIN4tama16Stm32TimeMonitorEED1Ev>
 800ae9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aea2:	4618      	mov	r0, r3
 800aea4:	f7ff ff92 	bl	800adcc <_ZNSt12__shared_ptrIN4tama16Stm32TimeMonitorELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	  _M_refcount._M_swap(__count);
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	3304      	adds	r3, #4
 800aeac:	f107 0214 	add.w	r2, r7, #20
 800aeb0:	4611      	mov	r1, r2
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	f7f5 ffef 	bl	8000e96 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  _M_ptr = __ptr;
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aebc:	601a      	str	r2, [r3, #0]
	  _M_enable_shared_from_this_with(_M_ptr);
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	4619      	mov	r1, r3
 800aec4:	68f8      	ldr	r0, [r7, #12]
 800aec6:	f000 fd9f 	bl	800ba08 <_ZNSt12__shared_ptrIN4tama16Stm32TimeMonitorELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 800aeca:	f107 0314 	add.w	r3, r7, #20
 800aece:	4618      	mov	r0, r3
 800aed0:	f7f5 fdb7 	bl	8000a42 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 800aed4:	f107 0318 	add.w	r3, r7, #24
 800aed8:	4618      	mov	r0, r3
 800aeda:	f000 fcd9 	bl	800b890 <_ZNSt15__allocated_ptrISaIN4tama16Stm32TimeMonitorEEED1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 800aede:	f107 0320 	add.w	r3, r7, #32
 800aee2:	4618      	mov	r0, r3
 800aee4:	f7ff ff72 	bl	800adcc <_ZNSt12__shared_ptrIN4tama16Stm32TimeMonitorELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	}
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	4618      	mov	r0, r3
 800aeec:	3730      	adds	r7, #48	; 0x30
 800aeee:	46bd      	mov	sp, r7
 800aef0:	bd80      	pop	{r7, pc}

0800aef2 <_ZNSt12__shared_ptrIN4tama25Stm32SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>:
        struct _Deleter
 800aef2:	b580      	push	{r7, lr}
 800aef4:	b082      	sub	sp, #8
 800aef6:	af00      	add	r7, sp, #0
 800aef8:	6078      	str	r0, [r7, #4]
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	4618      	mov	r0, r3
 800aefe:	f7ff faf0 	bl	800a4e2 <_ZNSaIN4tama25Stm32SoundPlayingStrategyEED1Ev>
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	4618      	mov	r0, r3
 800af06:	3708      	adds	r7, #8
 800af08:	46bd      	mov	sp, r7
 800af0a:	bd80      	pop	{r7, pc}

0800af0c <_ZNSt12__shared_ptrIN4tama25Stm32SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>:
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b082      	sub	sp, #8
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
 800af14:	6039      	str	r1, [r7, #0]
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	683a      	ldr	r2, [r7, #0]
 800af1a:	4611      	mov	r1, r2
 800af1c:	4618      	mov	r0, r3
 800af1e:	f000 fd7e 	bl	800ba1e <_ZNSaIN4tama25Stm32SoundPlayingStrategyEEC1ERKS1_>
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	4618      	mov	r0, r3
 800af26:	3708      	adds	r7, #8
 800af28:	46bd      	mov	sp, r7
 800af2a:	bd80      	pop	{r7, pc}

0800af2c <_ZNSt12__shared_ptrIN4tama25Stm32SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 800af2c:	b580      	push	{r7, lr}
 800af2e:	b08c      	sub	sp, #48	; 0x30
 800af30:	af00      	add	r7, sp, #0
 800af32:	60f8      	str	r0, [r7, #12]
 800af34:	7239      	strb	r1, [r7, #8]
 800af36:	607a      	str	r2, [r7, #4]
	: _M_ptr(), _M_refcount()
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	2200      	movs	r2, #0
 800af3c:	601a      	str	r2, [r3, #0]
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	3304      	adds	r3, #4
 800af42:	4618      	mov	r0, r3
 800af44:	f7f5 ff99 	bl	8000e7a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 800af48:	f107 0320 	add.w	r3, r7, #32
 800af4c:	6879      	ldr	r1, [r7, #4]
 800af4e:	4618      	mov	r0, r3
 800af50:	f000 fd65 	bl	800ba1e <_ZNSaIN4tama25Stm32SoundPlayingStrategyEEC1ERKS1_>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 800af54:	f107 0318 	add.w	r3, r7, #24
 800af58:	f107 0220 	add.w	r2, r7, #32
 800af5c:	4611      	mov	r1, r2
 800af5e:	4618      	mov	r0, r3
 800af60:	f000 fd6b 	bl	800ba3a <_ZSt18__allocate_guardedISaIN4tama25Stm32SoundPlayingStrategyEEESt15__allocated_ptrIT_ERS4_>
	  auto __ptr = __guard.get();
 800af64:	f107 0318 	add.w	r3, r7, #24
 800af68:	4618      	mov	r0, r3
 800af6a:	f000 fd8e 	bl	800ba8a <_ZNSt15__allocated_ptrISaIN4tama25Stm32SoundPlayingStrategyEEE3getEv>
 800af6e:	62f8      	str	r0, [r7, #44]	; 0x2c
	  __traits::construct(__del._M_alloc, __ptr,
 800af70:	f107 0320 	add.w	r3, r7, #32
 800af74:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800af76:	4618      	mov	r0, r3
 800af78:	f000 fd95 	bl	800baa6 <_ZNSt16allocator_traitsISaIN4tama25Stm32SoundPlayingStrategyEEE9constructIS1_JEEEvRS2_PT_DpOT0_>
	  __guard = nullptr;
 800af7c:	f107 0318 	add.w	r3, r7, #24
 800af80:	2100      	movs	r1, #0
 800af82:	4618      	mov	r0, r3
 800af84:	f000 fd9c 	bl	800bac0 <_ZNSt15__allocated_ptrISaIN4tama25Stm32SoundPlayingStrategyEEEaSEDn>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 800af88:	f107 0220 	add.w	r2, r7, #32
 800af8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800af90:	4611      	mov	r1, r2
 800af92:	4618      	mov	r0, r3
 800af94:	f7ff ffba 	bl	800af0c <_ZNSt12__shared_ptrIN4tama25Stm32SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>
 800af98:	f107 0220 	add.w	r2, r7, #32
 800af9c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800afa0:	4611      	mov	r1, r2
 800afa2:	4618      	mov	r0, r3
 800afa4:	f000 fd3b 	bl	800ba1e <_ZNSaIN4tama25Stm32SoundPlayingStrategyEEC1ERKS1_>
 800afa8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800afac:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800afb0:	f107 0014 	add.w	r0, r7, #20
 800afb4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800afb6:	f000 fdb8 	bl	800bb2a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
 800afba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800afbe:	4618      	mov	r0, r3
 800afc0:	f7ff fa8f 	bl	800a4e2 <_ZNSaIN4tama25Stm32SoundPlayingStrategyEED1Ev>
 800afc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800afc8:	4618      	mov	r0, r3
 800afca:	f7ff ff92 	bl	800aef2 <_ZNSt12__shared_ptrIN4tama25Stm32SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	  _M_refcount._M_swap(__count);
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	3304      	adds	r3, #4
 800afd2:	f107 0214 	add.w	r2, r7, #20
 800afd6:	4611      	mov	r1, r2
 800afd8:	4618      	mov	r0, r3
 800afda:	f7f5 ff5c 	bl	8000e96 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  _M_ptr = __ptr;
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800afe2:	601a      	str	r2, [r3, #0]
	  _M_enable_shared_from_this_with(_M_ptr);
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	4619      	mov	r1, r3
 800afea:	68f8      	ldr	r0, [r7, #12]
 800afec:	f000 fdf4 	bl	800bbd8 <_ZNSt12__shared_ptrIN4tama25Stm32SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 800aff0:	f107 0314 	add.w	r3, r7, #20
 800aff4:	4618      	mov	r0, r3
 800aff6:	f7f5 fd24 	bl	8000a42 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 800affa:	f107 0318 	add.w	r3, r7, #24
 800affe:	4618      	mov	r0, r3
 800b000:	f000 fd2e 	bl	800ba60 <_ZNSt15__allocated_ptrISaIN4tama25Stm32SoundPlayingStrategyEEED1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 800b004:	f107 0320 	add.w	r3, r7, #32
 800b008:	4618      	mov	r0, r3
 800b00a:	f7ff ff72 	bl	800aef2 <_ZNSt12__shared_ptrIN4tama25Stm32SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	}
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	4618      	mov	r0, r3
 800b012:	3730      	adds	r7, #48	; 0x30
 800b014:	46bd      	mov	sp, r7
 800b016:	bd80      	pop	{r7, pc}

0800b018 <_ZNSt12__shared_ptrIN4tama10Stm32InputELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>:
        struct _Deleter
 800b018:	b580      	push	{r7, lr}
 800b01a:	b082      	sub	sp, #8
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	4618      	mov	r0, r3
 800b024:	f7ff faa1 	bl	800a56a <_ZNSaIN4tama10Stm32InputEED1Ev>
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	4618      	mov	r0, r3
 800b02c:	3708      	adds	r7, #8
 800b02e:	46bd      	mov	sp, r7
 800b030:	bd80      	pop	{r7, pc}

0800b032 <_ZNSt12__shared_ptrIN4tama10Stm32InputELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>:
 800b032:	b580      	push	{r7, lr}
 800b034:	b082      	sub	sp, #8
 800b036:	af00      	add	r7, sp, #0
 800b038:	6078      	str	r0, [r7, #4]
 800b03a:	6039      	str	r1, [r7, #0]
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	683a      	ldr	r2, [r7, #0]
 800b040:	4611      	mov	r1, r2
 800b042:	4618      	mov	r0, r3
 800b044:	f000 fdd3 	bl	800bbee <_ZNSaIN4tama10Stm32InputEEC1ERKS1_>
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	4618      	mov	r0, r3
 800b04c:	3708      	adds	r7, #8
 800b04e:	46bd      	mov	sp, r7
 800b050:	bd80      	pop	{r7, pc}

0800b052 <_ZNSt12__shared_ptrIN4tama10Stm32InputELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 800b052:	b580      	push	{r7, lr}
 800b054:	b08c      	sub	sp, #48	; 0x30
 800b056:	af00      	add	r7, sp, #0
 800b058:	60f8      	str	r0, [r7, #12]
 800b05a:	7239      	strb	r1, [r7, #8]
 800b05c:	607a      	str	r2, [r7, #4]
	: _M_ptr(), _M_refcount()
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	2200      	movs	r2, #0
 800b062:	601a      	str	r2, [r3, #0]
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	3304      	adds	r3, #4
 800b068:	4618      	mov	r0, r3
 800b06a:	f7f5 ff06 	bl	8000e7a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 800b06e:	f107 0320 	add.w	r3, r7, #32
 800b072:	6879      	ldr	r1, [r7, #4]
 800b074:	4618      	mov	r0, r3
 800b076:	f000 fdba 	bl	800bbee <_ZNSaIN4tama10Stm32InputEEC1ERKS1_>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 800b07a:	f107 0318 	add.w	r3, r7, #24
 800b07e:	f107 0220 	add.w	r2, r7, #32
 800b082:	4611      	mov	r1, r2
 800b084:	4618      	mov	r0, r3
 800b086:	f000 fdc0 	bl	800bc0a <_ZSt18__allocate_guardedISaIN4tama10Stm32InputEEESt15__allocated_ptrIT_ERS4_>
	  auto __ptr = __guard.get();
 800b08a:	f107 0318 	add.w	r3, r7, #24
 800b08e:	4618      	mov	r0, r3
 800b090:	f000 fde3 	bl	800bc5a <_ZNSt15__allocated_ptrISaIN4tama10Stm32InputEEE3getEv>
 800b094:	62f8      	str	r0, [r7, #44]	; 0x2c
	  __traits::construct(__del._M_alloc, __ptr,
 800b096:	f107 0320 	add.w	r3, r7, #32
 800b09a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b09c:	4618      	mov	r0, r3
 800b09e:	f000 fdea 	bl	800bc76 <_ZNSt16allocator_traitsISaIN4tama10Stm32InputEEE9constructIS1_JEEEvRS2_PT_DpOT0_>
	  __guard = nullptr;
 800b0a2:	f107 0318 	add.w	r3, r7, #24
 800b0a6:	2100      	movs	r1, #0
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	f000 fdf1 	bl	800bc90 <_ZNSt15__allocated_ptrISaIN4tama10Stm32InputEEEaSEDn>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 800b0ae:	f107 0220 	add.w	r2, r7, #32
 800b0b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b0b6:	4611      	mov	r1, r2
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	f7ff ffba 	bl	800b032 <_ZNSt12__shared_ptrIN4tama10Stm32InputELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>
 800b0be:	f107 0220 	add.w	r2, r7, #32
 800b0c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b0c6:	4611      	mov	r1, r2
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	f000 fd90 	bl	800bbee <_ZNSaIN4tama10Stm32InputEEC1ERKS1_>
 800b0ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b0d2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800b0d6:	f107 0014 	add.w	r0, r7, #20
 800b0da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b0dc:	f000 fe0d 	bl	800bcfa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama10Stm32InputENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
 800b0e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	f7ff fa40 	bl	800a56a <_ZNSaIN4tama10Stm32InputEED1Ev>
 800b0ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	f7ff ff92 	bl	800b018 <_ZNSt12__shared_ptrIN4tama10Stm32InputELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	  _M_refcount._M_swap(__count);
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	3304      	adds	r3, #4
 800b0f8:	f107 0214 	add.w	r2, r7, #20
 800b0fc:	4611      	mov	r1, r2
 800b0fe:	4618      	mov	r0, r3
 800b100:	f7f5 fec9 	bl	8000e96 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  _M_ptr = __ptr;
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b108:	601a      	str	r2, [r3, #0]
	  _M_enable_shared_from_this_with(_M_ptr);
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	4619      	mov	r1, r3
 800b110:	68f8      	ldr	r0, [r7, #12]
 800b112:	f000 fe49 	bl	800bda8 <_ZNSt12__shared_ptrIN4tama10Stm32InputELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 800b116:	f107 0314 	add.w	r3, r7, #20
 800b11a:	4618      	mov	r0, r3
 800b11c:	f7f5 fc91 	bl	8000a42 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 800b120:	f107 0318 	add.w	r3, r7, #24
 800b124:	4618      	mov	r0, r3
 800b126:	f000 fd83 	bl	800bc30 <_ZNSt15__allocated_ptrISaIN4tama10Stm32InputEEED1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 800b12a:	f107 0320 	add.w	r3, r7, #32
 800b12e:	4618      	mov	r0, r3
 800b130:	f7ff ff72 	bl	800b018 <_ZNSt12__shared_ptrIN4tama10Stm32InputELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	}
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	4618      	mov	r0, r3
 800b138:	3730      	adds	r7, #48	; 0x30
 800b13a:	46bd      	mov	sp, r7
 800b13c:	bd80      	pop	{r7, pc}

0800b13e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama11SoundPlayerEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 800b13e:	b590      	push	{r4, r7, lr}
 800b140:	b083      	sub	sp, #12
 800b142:	af00      	add	r7, sp, #0
 800b144:	6078      	str	r0, [r7, #4]
 800b146:	6039      	str	r1, [r7, #0]
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2200      	movs	r2, #0
 800b14c:	601a      	str	r2, [r3, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 800b14e:	2010      	movs	r0, #16
 800b150:	f00c f9b1 	bl	80174b6 <_Znwj>
 800b154:	4603      	mov	r3, r0
 800b156:	461c      	mov	r4, r3
 800b158:	6839      	ldr	r1, [r7, #0]
 800b15a:	4620      	mov	r0, r4
 800b15c:	f000 fe30 	bl	800bdc0 <_ZNSt15_Sp_counted_ptrIPN4tama11SoundPlayerELN9__gnu_cxx12_Lock_policyE0EEC1ES2_>
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	601c      	str	r4, [r3, #0]
	}
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	4618      	mov	r0, r3
 800b168:	370c      	adds	r7, #12
 800b16a:	46bd      	mov	sp, r7
 800b16c:	bd90      	pop	{r4, r7, pc}

0800b16e <_ZNSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>:
        struct _Deleter
 800b16e:	b580      	push	{r7, lr}
 800b170:	b082      	sub	sp, #8
 800b172:	af00      	add	r7, sp, #0
 800b174:	6078      	str	r0, [r7, #4]
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	4618      	mov	r0, r3
 800b17a:	f7ff fa52 	bl	800a622 <_ZNSaIN4tama7ContextEED1Ev>
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	4618      	mov	r0, r3
 800b182:	3708      	adds	r7, #8
 800b184:	46bd      	mov	sp, r7
 800b186:	bd80      	pop	{r7, pc}

0800b188 <_ZNSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>:
 800b188:	b580      	push	{r7, lr}
 800b18a:	b082      	sub	sp, #8
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]
 800b190:	6039      	str	r1, [r7, #0]
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	683a      	ldr	r2, [r7, #0]
 800b196:	4611      	mov	r1, r2
 800b198:	4618      	mov	r0, r3
 800b19a:	f000 fe27 	bl	800bdec <_ZNSaIN4tama7ContextEEC1ERKS1_>
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	3708      	adds	r7, #8
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	bd80      	pop	{r7, pc}

0800b1a8 <_ZNSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJRSt10shared_ptrINS0_13TextureLoaderEERS7_INS0_5InputEES7_INS0_11SoundPlayerEEEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 800b1a8:	b5b0      	push	{r4, r5, r7, lr}
 800b1aa:	b08e      	sub	sp, #56	; 0x38
 800b1ac:	af02      	add	r7, sp, #8
 800b1ae:	60f8      	str	r0, [r7, #12]
 800b1b0:	7239      	strb	r1, [r7, #8]
 800b1b2:	607a      	str	r2, [r7, #4]
 800b1b4:	603b      	str	r3, [r7, #0]
	: _M_ptr(), _M_refcount()
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	2200      	movs	r2, #0
 800b1ba:	601a      	str	r2, [r3, #0]
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	3304      	adds	r3, #4
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	f7f5 fe5a 	bl	8000e7a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 800b1c6:	f107 0320 	add.w	r3, r7, #32
 800b1ca:	6879      	ldr	r1, [r7, #4]
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	f000 fe0d 	bl	800bdec <_ZNSaIN4tama7ContextEEC1ERKS1_>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 800b1d2:	f107 0318 	add.w	r3, r7, #24
 800b1d6:	f107 0220 	add.w	r2, r7, #32
 800b1da:	4611      	mov	r1, r2
 800b1dc:	4618      	mov	r0, r3
 800b1de:	f000 fe13 	bl	800be08 <_ZSt18__allocate_guardedISaIN4tama7ContextEEESt15__allocated_ptrIT_ERS4_>
	  auto __ptr = __guard.get();
 800b1e2:	f107 0318 	add.w	r3, r7, #24
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	f000 fe36 	bl	800be58 <_ZNSt15__allocated_ptrISaIN4tama7ContextEEE3getEv>
 800b1ec:	62f8      	str	r0, [r7, #44]	; 0x2c
	  __traits::construct(__del._M_alloc, __ptr,
 800b1ee:	6838      	ldr	r0, [r7, #0]
 800b1f0:	f7fe ff80 	bl	800a0f4 <_ZSt7forwardIRSt10shared_ptrIN4tama13TextureLoaderEEEOT_RNSt16remove_referenceIS5_E4typeE>
 800b1f4:	4604      	mov	r4, r0
 800b1f6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800b1f8:	f7fe ff87 	bl	800a10a <_ZSt7forwardIRSt10shared_ptrIN4tama5InputEEEOT_RNSt16remove_referenceIS5_E4typeE>
 800b1fc:	4605      	mov	r5, r0
 800b1fe:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800b200:	f7fe ff8e 	bl	800a120 <_ZSt7forwardISt10shared_ptrIN4tama11SoundPlayerEEEOT_RNSt16remove_referenceIS4_E4typeE>
 800b204:	4603      	mov	r3, r0
 800b206:	f107 0020 	add.w	r0, r7, #32
 800b20a:	9300      	str	r3, [sp, #0]
 800b20c:	462b      	mov	r3, r5
 800b20e:	4622      	mov	r2, r4
 800b210:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b212:	f000 fe2f 	bl	800be74 <_ZNSt16allocator_traitsISaIN4tama7ContextEEE9constructIS1_JRSt10shared_ptrINS0_13TextureLoaderEERS5_INS0_5InputEES5_INS0_11SoundPlayerEEEEEvRS2_PT_DpOT0_>
	  __guard = nullptr;
 800b216:	f107 0318 	add.w	r3, r7, #24
 800b21a:	2100      	movs	r1, #0
 800b21c:	4618      	mov	r0, r3
 800b21e:	f000 fe47 	bl	800beb0 <_ZNSt15__allocated_ptrISaIN4tama7ContextEEEaSEDn>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 800b222:	f107 0220 	add.w	r2, r7, #32
 800b226:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b22a:	4611      	mov	r1, r2
 800b22c:	4618      	mov	r0, r3
 800b22e:	f7ff ffab 	bl	800b188 <_ZNSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>
 800b232:	f107 0220 	add.w	r2, r7, #32
 800b236:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b23a:	4611      	mov	r1, r2
 800b23c:	4618      	mov	r0, r3
 800b23e:	f000 fdd5 	bl	800bdec <_ZNSaIN4tama7ContextEEC1ERKS1_>
 800b242:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b246:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800b24a:	f107 0014 	add.w	r0, r7, #20
 800b24e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b250:	f000 fe63 	bl	800bf1a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama7ContextENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
 800b254:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b258:	4618      	mov	r0, r3
 800b25a:	f7ff f9e2 	bl	800a622 <_ZNSaIN4tama7ContextEED1Ev>
 800b25e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b262:	4618      	mov	r0, r3
 800b264:	f7ff ff83 	bl	800b16e <_ZNSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	  _M_refcount._M_swap(__count);
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	3304      	adds	r3, #4
 800b26c:	f107 0214 	add.w	r2, r7, #20
 800b270:	4611      	mov	r1, r2
 800b272:	4618      	mov	r0, r3
 800b274:	f7f5 fe0f 	bl	8000e96 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  _M_ptr = __ptr;
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b27c:	601a      	str	r2, [r3, #0]
	  _M_enable_shared_from_this_with(_M_ptr);
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	4619      	mov	r1, r3
 800b284:	68f8      	ldr	r0, [r7, #12]
 800b286:	f000 fe9f 	bl	800bfc8 <_ZNSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 800b28a:	f107 0314 	add.w	r3, r7, #20
 800b28e:	4618      	mov	r0, r3
 800b290:	f7f5 fbd7 	bl	8000a42 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 800b294:	f107 0318 	add.w	r3, r7, #24
 800b298:	4618      	mov	r0, r3
 800b29a:	f000 fdc8 	bl	800be2e <_ZNSt15__allocated_ptrISaIN4tama7ContextEEED1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 800b29e:	f107 0320 	add.w	r3, r7, #32
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	f7ff ff63 	bl	800b16e <_ZNSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	}
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	3730      	adds	r7, #48	; 0x30
 800b2ae:	46bd      	mov	sp, r7
 800b2b0:	bdb0      	pop	{r4, r5, r7, pc}

0800b2b2 <_ZNSt12__shared_ptrIN4tama14InitialLoadingELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>:
        struct _Deleter
 800b2b2:	b580      	push	{r7, lr}
 800b2b4:	b082      	sub	sp, #8
 800b2b6:	af00      	add	r7, sp, #0
 800b2b8:	6078      	str	r0, [r7, #4]
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	4618      	mov	r0, r3
 800b2be:	f7ff f9e7 	bl	800a690 <_ZNSaIN4tama14InitialLoadingEED1Ev>
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	4618      	mov	r0, r3
 800b2c6:	3708      	adds	r7, #8
 800b2c8:	46bd      	mov	sp, r7
 800b2ca:	bd80      	pop	{r7, pc}

0800b2cc <_ZNSt12__shared_ptrIN4tama14InitialLoadingELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>:
 800b2cc:	b580      	push	{r7, lr}
 800b2ce:	b082      	sub	sp, #8
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	6078      	str	r0, [r7, #4]
 800b2d4:	6039      	str	r1, [r7, #0]
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	683a      	ldr	r2, [r7, #0]
 800b2da:	4611      	mov	r1, r2
 800b2dc:	4618      	mov	r0, r3
 800b2de:	f000 fe7e 	bl	800bfde <_ZNSaIN4tama14InitialLoadingEEC1ERKS1_>
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	3708      	adds	r7, #8
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	bd80      	pop	{r7, pc}

0800b2ec <_ZNSt12__shared_ptrIN4tama14InitialLoadingELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJRSt10shared_ptrINS0_7ContextEEEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	b08c      	sub	sp, #48	; 0x30
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	60f8      	str	r0, [r7, #12]
 800b2f4:	7239      	strb	r1, [r7, #8]
 800b2f6:	607a      	str	r2, [r7, #4]
 800b2f8:	603b      	str	r3, [r7, #0]
	: _M_ptr(), _M_refcount()
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	2200      	movs	r2, #0
 800b2fe:	601a      	str	r2, [r3, #0]
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	3304      	adds	r3, #4
 800b304:	4618      	mov	r0, r3
 800b306:	f7f5 fdb8 	bl	8000e7a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 800b30a:	f107 0320 	add.w	r3, r7, #32
 800b30e:	6879      	ldr	r1, [r7, #4]
 800b310:	4618      	mov	r0, r3
 800b312:	f000 fe64 	bl	800bfde <_ZNSaIN4tama14InitialLoadingEEC1ERKS1_>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 800b316:	f107 0318 	add.w	r3, r7, #24
 800b31a:	f107 0220 	add.w	r2, r7, #32
 800b31e:	4611      	mov	r1, r2
 800b320:	4618      	mov	r0, r3
 800b322:	f000 fe6a 	bl	800bffa <_ZSt18__allocate_guardedISaIN4tama14InitialLoadingEEESt15__allocated_ptrIT_ERS4_>
	  auto __ptr = __guard.get();
 800b326:	f107 0318 	add.w	r3, r7, #24
 800b32a:	4618      	mov	r0, r3
 800b32c:	f000 fe8d 	bl	800c04a <_ZNSt15__allocated_ptrISaIN4tama14InitialLoadingEEE3getEv>
 800b330:	62f8      	str	r0, [r7, #44]	; 0x2c
	  __traits::construct(__del._M_alloc, __ptr,
 800b332:	6838      	ldr	r0, [r7, #0]
 800b334:	f7fe ff28 	bl	800a188 <_ZSt7forwardIRSt10shared_ptrIN4tama7ContextEEEOT_RNSt16remove_referenceIS5_E4typeE>
 800b338:	4602      	mov	r2, r0
 800b33a:	f107 0320 	add.w	r3, r7, #32
 800b33e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b340:	4618      	mov	r0, r3
 800b342:	f000 fe90 	bl	800c066 <_ZNSt16allocator_traitsISaIN4tama14InitialLoadingEEE9constructIS1_JRSt10shared_ptrINS0_7ContextEEEEEvRS2_PT_DpOT0_>
	  __guard = nullptr;
 800b346:	f107 0318 	add.w	r3, r7, #24
 800b34a:	2100      	movs	r1, #0
 800b34c:	4618      	mov	r0, r3
 800b34e:	f000 fe9d 	bl	800c08c <_ZNSt15__allocated_ptrISaIN4tama14InitialLoadingEEEaSEDn>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 800b352:	f107 0220 	add.w	r2, r7, #32
 800b356:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b35a:	4611      	mov	r1, r2
 800b35c:	4618      	mov	r0, r3
 800b35e:	f7ff ffb5 	bl	800b2cc <_ZNSt12__shared_ptrIN4tama14InitialLoadingELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>
 800b362:	f107 0220 	add.w	r2, r7, #32
 800b366:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b36a:	4611      	mov	r1, r2
 800b36c:	4618      	mov	r0, r3
 800b36e:	f000 fe36 	bl	800bfde <_ZNSaIN4tama14InitialLoadingEEC1ERKS1_>
 800b372:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b376:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800b37a:	f107 0014 	add.w	r0, r7, #20
 800b37e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b380:	f000 feb9 	bl	800c0f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama14InitialLoadingENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
 800b384:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b388:	4618      	mov	r0, r3
 800b38a:	f7ff f981 	bl	800a690 <_ZNSaIN4tama14InitialLoadingEED1Ev>
 800b38e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b392:	4618      	mov	r0, r3
 800b394:	f7ff ff8d 	bl	800b2b2 <_ZNSt12__shared_ptrIN4tama14InitialLoadingELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	  _M_refcount._M_swap(__count);
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	3304      	adds	r3, #4
 800b39c:	f107 0214 	add.w	r2, r7, #20
 800b3a0:	4611      	mov	r1, r2
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	f7f5 fd77 	bl	8000e96 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  _M_ptr = __ptr;
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b3ac:	601a      	str	r2, [r3, #0]
	  _M_enable_shared_from_this_with(_M_ptr);
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	4619      	mov	r1, r3
 800b3b4:	68f8      	ldr	r0, [r7, #12]
 800b3b6:	f000 fef5 	bl	800c1a4 <_ZNSt12__shared_ptrIN4tama14InitialLoadingELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 800b3ba:	f107 0314 	add.w	r3, r7, #20
 800b3be:	4618      	mov	r0, r3
 800b3c0:	f7f5 fb3f 	bl	8000a42 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 800b3c4:	f107 0318 	add.w	r3, r7, #24
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	f000 fe29 	bl	800c020 <_ZNSt15__allocated_ptrISaIN4tama14InitialLoadingEEED1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 800b3ce:	f107 0320 	add.w	r3, r7, #32
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	f7ff ff6d 	bl	800b2b2 <_ZNSt12__shared_ptrIN4tama14InitialLoadingELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	}
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	4618      	mov	r0, r3
 800b3dc:	3730      	adds	r7, #48	; 0x30
 800b3de:	46bd      	mov	sp, r7
 800b3e0:	bd80      	pop	{r7, pc}

0800b3e2 <_ZSt3getILj0EJPN4tama7DisplayESt14default_deleteIS1_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_>:
    get(const tuple<_Elements...>& __t) noexcept
 800b3e2:	b580      	push	{r7, lr}
 800b3e4:	b082      	sub	sp, #8
 800b3e6:	af00      	add	r7, sp, #0
 800b3e8:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	f000 fee4 	bl	800c1ba <_ZSt12__get_helperILj0EPN4tama7DisplayEJSt14default_deleteIS1_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE>
 800b3f2:	4603      	mov	r3, r0
 800b3f4:	4618      	mov	r0, r3
 800b3f6:	3708      	adds	r7, #8
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	bd80      	pop	{r7, pc}

0800b3fc <_ZNSt11_Tuple_implILj0EJPN4tama16Nokia5510DisplayESt14default_deleteIS1_EEEC1Ev>:
      constexpr _Tuple_impl()
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	b082      	sub	sp, #8
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800b404:	6878      	ldr	r0, [r7, #4]
 800b406:	f000 fee4 	bl	800c1d2 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN4tama16Nokia5510DisplayEEEEC1Ev>
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	4618      	mov	r0, r3
 800b40e:	f000 feec 	bl	800c1ea <_ZNSt10_Head_baseILj0EPN4tama16Nokia5510DisplayELb0EEC1Ev>
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	4618      	mov	r0, r3
 800b416:	3708      	adds	r7, #8
 800b418:	46bd      	mov	sp, r7
 800b41a:	bd80      	pop	{r7, pc}

0800b41c <_ZNSt11_Tuple_implILj0EJPN4tama16Nokia5510DisplayESt14default_deleteIS1_EEE7_M_headERS5_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800b41c:	b580      	push	{r7, lr}
 800b41e:	b082      	sub	sp, #8
 800b420:	af00      	add	r7, sp, #0
 800b422:	6078      	str	r0, [r7, #4]
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	4618      	mov	r0, r3
 800b428:	f000 feed 	bl	800c206 <_ZNSt10_Head_baseILj0EPN4tama16Nokia5510DisplayELb0EE7_M_headERS3_>
 800b42c:	4603      	mov	r3, r0
 800b42e:	4618      	mov	r0, r3
 800b430:	3708      	adds	r7, #8
 800b432:	46bd      	mov	sp, r7
 800b434:	bd80      	pop	{r7, pc}

0800b436 <_ZSt12__get_helperILj1ESt14default_deleteIN4tama16Nokia5510DisplayEEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800b436:	b580      	push	{r7, lr}
 800b438:	b082      	sub	sp, #8
 800b43a:	af00      	add	r7, sp, #0
 800b43c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800b43e:	6878      	ldr	r0, [r7, #4]
 800b440:	f000 feec 	bl	800c21c <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN4tama16Nokia5510DisplayEEEE7_M_headERS4_>
 800b444:	4603      	mov	r3, r0
 800b446:	4618      	mov	r0, r3
 800b448:	3708      	adds	r7, #8
 800b44a:	46bd      	mov	sp, r7
 800b44c:	bd80      	pop	{r7, pc}

0800b44e <_ZSt3getILj0EJPN4tama16Nokia5510DisplayESt14default_deleteIS1_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_>:
    get(const tuple<_Elements...>& __t) noexcept
 800b44e:	b580      	push	{r7, lr}
 800b450:	b082      	sub	sp, #8
 800b452:	af00      	add	r7, sp, #0
 800b454:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	4618      	mov	r0, r3
 800b45a:	f000 feeb 	bl	800c234 <_ZSt12__get_helperILj0EPN4tama16Nokia5510DisplayEJSt14default_deleteIS1_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE>
 800b45e:	4603      	mov	r3, r0
 800b460:	4618      	mov	r0, r3
 800b462:	3708      	adds	r7, #8
 800b464:	46bd      	mov	sp, r7
 800b466:	bd80      	pop	{r7, pc}

0800b468 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN4tama7DisplayEEEEC1IS0_INS1_16Nokia5510DisplayEEEEOT_>:
        constexpr _Tuple_impl(_UHead&& __head)
 800b468:	b580      	push	{r7, lr}
 800b46a:	b082      	sub	sp, #8
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
 800b470:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head)) { }
 800b472:	6838      	ldr	r0, [r7, #0]
 800b474:	f7fe ff3c 	bl	800a2f0 <_ZSt7forwardISt14default_deleteIN4tama16Nokia5510DisplayEEEOT_RNSt16remove_referenceIS4_E4typeE>
 800b478:	4603      	mov	r3, r0
 800b47a:	4619      	mov	r1, r3
 800b47c:	6878      	ldr	r0, [r7, #4]
 800b47e:	f000 fee5 	bl	800c24c <_ZNSt10_Head_baseILj1ESt14default_deleteIN4tama7DisplayEELb1EEC1IS0_INS1_16Nokia5510DisplayEEEEOT_>
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	4618      	mov	r0, r3
 800b486:	3708      	adds	r7, #8
 800b488:	46bd      	mov	sp, r7
 800b48a:	bd80      	pop	{r7, pc}

0800b48c <_ZNSt10_Head_baseILj0EPN4tama7DisplayELb0EEC1IRS2_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 800b48c:	b580      	push	{r7, lr}
 800b48e:	b082      	sub	sp, #8
 800b490:	af00      	add	r7, sp, #0
 800b492:	6078      	str	r0, [r7, #4]
 800b494:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800b496:	6838      	ldr	r0, [r7, #0]
 800b498:	f7ff f997 	bl	800a7ca <_ZSt7forwardIRPN4tama7DisplayEEOT_RNSt16remove_referenceIS4_E4typeE>
 800b49c:	4603      	mov	r3, r0
 800b49e:	681a      	ldr	r2, [r3, #0]
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	601a      	str	r2, [r3, #0]
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	3708      	adds	r7, #8
 800b4aa:	46bd      	mov	sp, r7
 800b4ac:	bd80      	pop	{r7, pc}

0800b4ae <_ZNSaIN4tama18Stm32TextureLoaderEEC1ERKS1_>:
      allocator(const allocator& __a) throw()
 800b4ae:	b580      	push	{r7, lr}
 800b4b0:	b082      	sub	sp, #8
 800b4b2:	af00      	add	r7, sp, #0
 800b4b4:	6078      	str	r0, [r7, #4]
 800b4b6:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 800b4b8:	6839      	ldr	r1, [r7, #0]
 800b4ba:	6878      	ldr	r0, [r7, #4]
 800b4bc:	f000 fed8 	bl	800c270 <_ZN9__gnu_cxx13new_allocatorIN4tama18Stm32TextureLoaderEEC1ERKS3_>
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	3708      	adds	r7, #8
 800b4c6:	46bd      	mov	sp, r7
 800b4c8:	bd80      	pop	{r7, pc}

0800b4ca <_ZSt18__allocate_guardedISaIN4tama18Stm32TextureLoaderEEESt15__allocated_ptrIT_ERS4_>:
    __allocate_guarded(_Alloc& __a)
 800b4ca:	b580      	push	{r7, lr}
 800b4cc:	b082      	sub	sp, #8
 800b4ce:	af00      	add	r7, sp, #0
 800b4d0:	6078      	str	r0, [r7, #4]
 800b4d2:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 800b4d4:	2101      	movs	r1, #1
 800b4d6:	6838      	ldr	r0, [r7, #0]
 800b4d8:	f000 fed6 	bl	800c288 <_ZNSt16allocator_traitsISaIN4tama18Stm32TextureLoaderEEE8allocateERS2_j>
 800b4dc:	4603      	mov	r3, r0
 800b4de:	461a      	mov	r2, r3
 800b4e0:	6839      	ldr	r1, [r7, #0]
 800b4e2:	6878      	ldr	r0, [r7, #4]
 800b4e4:	f000 fedf 	bl	800c2a6 <_ZNSt15__allocated_ptrISaIN4tama18Stm32TextureLoaderEEEC1ERS2_PS1_>
    }
 800b4e8:	6878      	ldr	r0, [r7, #4]
 800b4ea:	3708      	adds	r7, #8
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	bd80      	pop	{r7, pc}

0800b4f0 <_ZNSt15__allocated_ptrISaIN4tama18Stm32TextureLoaderEEED1Ev>:
      ~__allocated_ptr()
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b082      	sub	sp, #8
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	685b      	ldr	r3, [r3, #4]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d007      	beq.n	800b510 <_ZNSt15__allocated_ptrISaIN4tama18Stm32TextureLoaderEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	6818      	ldr	r0, [r3, #0]
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	685b      	ldr	r3, [r3, #4]
 800b508:	2201      	movs	r2, #1
 800b50a:	4619      	mov	r1, r3
 800b50c:	f000 fedf 	bl	800c2ce <_ZNSt16allocator_traitsISaIN4tama18Stm32TextureLoaderEEE10deallocateERS2_PS1_j>
      }
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	4618      	mov	r0, r3
 800b514:	3708      	adds	r7, #8
 800b516:	46bd      	mov	sp, r7
 800b518:	bd80      	pop	{r7, pc}

0800b51a <_ZNSt15__allocated_ptrISaIN4tama18Stm32TextureLoaderEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 800b51a:	b580      	push	{r7, lr}
 800b51c:	b082      	sub	sp, #8
 800b51e:	af00      	add	r7, sp, #0
 800b520:	6078      	str	r0, [r7, #4]
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	685b      	ldr	r3, [r3, #4]
 800b526:	4618      	mov	r0, r3
 800b528:	f000 fee0 	bl	800c2ec <_ZNSt15__allocated_ptrISaIN4tama18Stm32TextureLoaderEEE10_S_raw_ptrEPS1_>
 800b52c:	4603      	mov	r3, r0
 800b52e:	4618      	mov	r0, r3
 800b530:	3708      	adds	r7, #8
 800b532:	46bd      	mov	sp, r7
 800b534:	bd80      	pop	{r7, pc}

0800b536 <_ZNSt16allocator_traitsISaIN4tama18Stm32TextureLoaderEEE9constructIS1_JEEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 800b536:	b580      	push	{r7, lr}
 800b538:	b082      	sub	sp, #8
 800b53a:	af00      	add	r7, sp, #0
 800b53c:	6078      	str	r0, [r7, #4]
 800b53e:	6039      	str	r1, [r7, #0]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 800b540:	6839      	ldr	r1, [r7, #0]
 800b542:	6878      	ldr	r0, [r7, #4]
 800b544:	f000 fedd 	bl	800c302 <_ZN9__gnu_cxx13new_allocatorIN4tama18Stm32TextureLoaderEE9constructIS2_JEEEvPT_DpOT0_>
 800b548:	bf00      	nop
 800b54a:	3708      	adds	r7, #8
 800b54c:	46bd      	mov	sp, r7
 800b54e:	bd80      	pop	{r7, pc}

0800b550 <_ZNSt15__allocated_ptrISaIN4tama18Stm32TextureLoaderEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 800b550:	b480      	push	{r7}
 800b552:	b083      	sub	sp, #12
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]
 800b558:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	2200      	movs	r2, #0
 800b55e:	605a      	str	r2, [r3, #4]
	return *this;
 800b560:	687b      	ldr	r3, [r7, #4]
      }
 800b562:	4618      	mov	r0, r3
 800b564:	370c      	adds	r7, #12
 800b566:	46bd      	mov	sp, r7
 800b568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56c:	4770      	bx	lr

0800b56e <_ZSt4moveIRNSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
 800b56e:	b480      	push	{r7}
 800b570:	b083      	sub	sp, #12
 800b572:	af00      	add	r7, sp, #0
 800b574:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	4618      	mov	r0, r3
 800b57a:	370c      	adds	r7, #12
 800b57c:	46bd      	mov	sp, r7
 800b57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b582:	4770      	bx	lr

0800b584 <_ZNSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>:
        struct _Deleter
 800b584:	b580      	push	{r7, lr}
 800b586:	b082      	sub	sp, #8
 800b588:	af00      	add	r7, sp, #0
 800b58a:	6078      	str	r0, [r7, #4]
 800b58c:	6039      	str	r1, [r7, #0]
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	683a      	ldr	r2, [r7, #0]
 800b592:	4611      	mov	r1, r2
 800b594:	4618      	mov	r0, r3
 800b596:	f7ff ff8a 	bl	800b4ae <_ZNSaIN4tama18Stm32TextureLoaderEEC1ERKS1_>
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	4618      	mov	r0, r3
 800b59e:	3708      	adds	r7, #8
 800b5a0:	46bd      	mov	sp, r7
 800b5a2:	bd80      	pop	{r7, pc}

0800b5a4 <_ZSt4moveIRSaIN4tama18Stm32TextureLoaderEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800b5a4:	b480      	push	{r7}
 800b5a6:	b083      	sub	sp, #12
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	370c      	adds	r7, #12
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b8:	4770      	bx	lr

0800b5ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
 800b5ba:	b5b0      	push	{r4, r5, r7, lr}
 800b5bc:	b08a      	sub	sp, #40	; 0x28
 800b5be:	af00      	add	r7, sp, #0
 800b5c0:	60f8      	str	r0, [r7, #12]
 800b5c2:	60b9      	str	r1, [r7, #8]
 800b5c4:	607a      	str	r2, [r7, #4]
 800b5c6:	603b      	str	r3, [r7, #0]
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	601a      	str	r2, [r3, #0]
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 800b5ce:	f107 031c 	add.w	r3, r7, #28
 800b5d2:	6839      	ldr	r1, [r7, #0]
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	f000 feaa 	bl	800c32e <_ZNSaISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	      auto __guard = std::__allocate_guarded(__a2);
 800b5da:	f107 0314 	add.w	r3, r7, #20
 800b5de:	f107 021c 	add.w	r2, r7, #28
 800b5e2:	4611      	mov	r1, r2
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	f000 febb 	bl	800c360 <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>
	      _Sp_cd_type* __mem = __guard.get();
 800b5ea:	f107 0314 	add.w	r3, r7, #20
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	f000 fede 	bl	800c3b0 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>
 800b5f4:	6278      	str	r0, [r7, #36]	; 0x24
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
 800b5f6:	6878      	ldr	r0, [r7, #4]
 800b5f8:	f7ff ffb9 	bl	800b56e <_ZSt4moveIRNSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 800b5fc:	4602      	mov	r2, r0
 800b5fe:	f107 0320 	add.w	r3, r7, #32
 800b602:	4611      	mov	r1, r2
 800b604:	4618      	mov	r0, r3
 800b606:	f7ff ffbd 	bl	800b584 <_ZNSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 800b60a:	f107 0420 	add.w	r4, r7, #32
 800b60e:	6838      	ldr	r0, [r7, #0]
 800b610:	f7ff ffc8 	bl	800b5a4 <_ZSt4moveIRSaIN4tama18Stm32TextureLoaderEEEONSt16remove_referenceIT_E4typeEOS5_>
 800b614:	4605      	mov	r5, r0
 800b616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b618:	4619      	mov	r1, r3
 800b61a:	2014      	movs	r0, #20
 800b61c:	f7f4 ff8f 	bl	800053e <_ZnwjPv>
 800b620:	2800      	cmp	r0, #0
 800b622:	d004      	beq.n	800b62e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x74>
 800b624:	462b      	mov	r3, r5
 800b626:	4622      	mov	r2, r4
 800b628:	68b9      	ldr	r1, [r7, #8]
 800b62a:	f000 fefb 	bl	800c424 <_ZNSt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>
 800b62e:	f107 0320 	add.w	r3, r7, #32
 800b632:	4618      	mov	r0, r3
 800b634:	f7ff faa4 	bl	800ab80 <_ZNSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	      _M_pi = __mem;
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b63c:	601a      	str	r2, [r3, #0]
	      __guard = nullptr;
 800b63e:	f107 0314 	add.w	r3, r7, #20
 800b642:	2100      	movs	r1, #0
 800b644:	4618      	mov	r0, r3
 800b646:	f000 ff1b 	bl	800c480 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>
	      auto __guard = std::__allocate_guarded(__a2);
 800b64a:	f107 0314 	add.w	r3, r7, #20
 800b64e:	4618      	mov	r0, r3
 800b650:	f000 fe99 	bl	800c386 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 800b654:	f107 031c 	add.w	r3, r7, #28
 800b658:	4618      	mov	r0, r3
 800b65a:	f000 fe75 	bl	800c348 <_ZNSaISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
	}
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	4618      	mov	r0, r3
 800b662:	3728      	adds	r7, #40	; 0x28
 800b664:	46bd      	mov	sp, r7
 800b666:	bdb0      	pop	{r4, r5, r7, pc}

0800b668 <_ZNSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp*) noexcept
 800b668:	b480      	push	{r7}
 800b66a:	b083      	sub	sp, #12
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	6078      	str	r0, [r7, #4]
 800b670:	6039      	str	r1, [r7, #0]
	{ }
 800b672:	bf00      	nop
 800b674:	370c      	adds	r7, #12
 800b676:	46bd      	mov	sp, r7
 800b678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b67c:	4770      	bx	lr

0800b67e <_ZNSaIN4tama27Nokia5110DisplayDataManagerEEC1ERKS1_>:
      allocator(const allocator& __a) throw()
 800b67e:	b580      	push	{r7, lr}
 800b680:	b082      	sub	sp, #8
 800b682:	af00      	add	r7, sp, #0
 800b684:	6078      	str	r0, [r7, #4]
 800b686:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 800b688:	6839      	ldr	r1, [r7, #0]
 800b68a:	6878      	ldr	r0, [r7, #4]
 800b68c:	f000 ff27 	bl	800c4de <_ZN9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEEC1ERKS3_>
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	4618      	mov	r0, r3
 800b694:	3708      	adds	r7, #8
 800b696:	46bd      	mov	sp, r7
 800b698:	bd80      	pop	{r7, pc}

0800b69a <_ZSt18__allocate_guardedISaIN4tama27Nokia5110DisplayDataManagerEEESt15__allocated_ptrIT_ERS4_>:
    __allocate_guarded(_Alloc& __a)
 800b69a:	b580      	push	{r7, lr}
 800b69c:	b082      	sub	sp, #8
 800b69e:	af00      	add	r7, sp, #0
 800b6a0:	6078      	str	r0, [r7, #4]
 800b6a2:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 800b6a4:	2101      	movs	r1, #1
 800b6a6:	6838      	ldr	r0, [r7, #0]
 800b6a8:	f000 ff25 	bl	800c4f6 <_ZNSt16allocator_traitsISaIN4tama27Nokia5110DisplayDataManagerEEE8allocateERS2_j>
 800b6ac:	4603      	mov	r3, r0
 800b6ae:	461a      	mov	r2, r3
 800b6b0:	6839      	ldr	r1, [r7, #0]
 800b6b2:	6878      	ldr	r0, [r7, #4]
 800b6b4:	f000 ff2e 	bl	800c514 <_ZNSt15__allocated_ptrISaIN4tama27Nokia5110DisplayDataManagerEEEC1ERS2_PS1_>
    }
 800b6b8:	6878      	ldr	r0, [r7, #4]
 800b6ba:	3708      	adds	r7, #8
 800b6bc:	46bd      	mov	sp, r7
 800b6be:	bd80      	pop	{r7, pc}

0800b6c0 <_ZNSt15__allocated_ptrISaIN4tama27Nokia5110DisplayDataManagerEEED1Ev>:
      ~__allocated_ptr()
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	b082      	sub	sp, #8
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	685b      	ldr	r3, [r3, #4]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d007      	beq.n	800b6e0 <_ZNSt15__allocated_ptrISaIN4tama27Nokia5110DisplayDataManagerEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	6818      	ldr	r0, [r3, #0]
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	685b      	ldr	r3, [r3, #4]
 800b6d8:	2201      	movs	r2, #1
 800b6da:	4619      	mov	r1, r3
 800b6dc:	f000 ff2e 	bl	800c53c <_ZNSt16allocator_traitsISaIN4tama27Nokia5110DisplayDataManagerEEE10deallocateERS2_PS1_j>
      }
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	3708      	adds	r7, #8
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	bd80      	pop	{r7, pc}

0800b6ea <_ZNSt15__allocated_ptrISaIN4tama27Nokia5110DisplayDataManagerEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 800b6ea:	b580      	push	{r7, lr}
 800b6ec:	b082      	sub	sp, #8
 800b6ee:	af00      	add	r7, sp, #0
 800b6f0:	6078      	str	r0, [r7, #4]
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	685b      	ldr	r3, [r3, #4]
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	f000 ff2f 	bl	800c55a <_ZNSt15__allocated_ptrISaIN4tama27Nokia5110DisplayDataManagerEEE10_S_raw_ptrEPS1_>
 800b6fc:	4603      	mov	r3, r0
 800b6fe:	4618      	mov	r0, r3
 800b700:	3708      	adds	r7, #8
 800b702:	46bd      	mov	sp, r7
 800b704:	bd80      	pop	{r7, pc}

0800b706 <_ZNSt16allocator_traitsISaIN4tama27Nokia5110DisplayDataManagerEEE9constructIS1_JEEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 800b706:	b580      	push	{r7, lr}
 800b708:	b082      	sub	sp, #8
 800b70a:	af00      	add	r7, sp, #0
 800b70c:	6078      	str	r0, [r7, #4]
 800b70e:	6039      	str	r1, [r7, #0]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 800b710:	6839      	ldr	r1, [r7, #0]
 800b712:	6878      	ldr	r0, [r7, #4]
 800b714:	f000 ff66 	bl	800c5e4 <_ZN9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEE9constructIS2_JEEEvPT_DpOT0_>
 800b718:	bf00      	nop
 800b71a:	3708      	adds	r7, #8
 800b71c:	46bd      	mov	sp, r7
 800b71e:	bd80      	pop	{r7, pc}

0800b720 <_ZNSt15__allocated_ptrISaIN4tama27Nokia5110DisplayDataManagerEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 800b720:	b480      	push	{r7}
 800b722:	b083      	sub	sp, #12
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
 800b728:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	2200      	movs	r2, #0
 800b72e:	605a      	str	r2, [r3, #4]
	return *this;
 800b730:	687b      	ldr	r3, [r7, #4]
      }
 800b732:	4618      	mov	r0, r3
 800b734:	370c      	adds	r7, #12
 800b736:	46bd      	mov	sp, r7
 800b738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73c:	4770      	bx	lr

0800b73e <_ZSt4moveIRNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
 800b73e:	b480      	push	{r7}
 800b740:	b083      	sub	sp, #12
 800b742:	af00      	add	r7, sp, #0
 800b744:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	4618      	mov	r0, r3
 800b74a:	370c      	adds	r7, #12
 800b74c:	46bd      	mov	sp, r7
 800b74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b752:	4770      	bx	lr

0800b754 <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>:
        struct _Deleter
 800b754:	b580      	push	{r7, lr}
 800b756:	b082      	sub	sp, #8
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]
 800b75c:	6039      	str	r1, [r7, #0]
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	683a      	ldr	r2, [r7, #0]
 800b762:	4611      	mov	r1, r2
 800b764:	4618      	mov	r0, r3
 800b766:	f7ff ff8a 	bl	800b67e <_ZNSaIN4tama27Nokia5110DisplayDataManagerEEC1ERKS1_>
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	4618      	mov	r0, r3
 800b76e:	3708      	adds	r7, #8
 800b770:	46bd      	mov	sp, r7
 800b772:	bd80      	pop	{r7, pc}

0800b774 <_ZSt4moveIRSaIN4tama27Nokia5110DisplayDataManagerEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800b774:	b480      	push	{r7}
 800b776:	b083      	sub	sp, #12
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	4618      	mov	r0, r3
 800b780:	370c      	adds	r7, #12
 800b782:	46bd      	mov	sp, r7
 800b784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b788:	4770      	bx	lr

0800b78a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
 800b78a:	b5b0      	push	{r4, r5, r7, lr}
 800b78c:	b08a      	sub	sp, #40	; 0x28
 800b78e:	af00      	add	r7, sp, #0
 800b790:	60f8      	str	r0, [r7, #12]
 800b792:	60b9      	str	r1, [r7, #8]
 800b794:	607a      	str	r2, [r7, #4]
 800b796:	603b      	str	r3, [r7, #0]
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	2200      	movs	r2, #0
 800b79c:	601a      	str	r2, [r3, #0]
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 800b79e:	f107 031c 	add.w	r3, r7, #28
 800b7a2:	6839      	ldr	r1, [r7, #0]
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	f000 ff39 	bl	800c61c <_ZNSaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	      auto __guard = std::__allocate_guarded(__a2);
 800b7aa:	f107 0314 	add.w	r3, r7, #20
 800b7ae:	f107 021c 	add.w	r2, r7, #28
 800b7b2:	4611      	mov	r1, r2
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	f000 ff4a 	bl	800c64e <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>
	      _Sp_cd_type* __mem = __guard.get();
 800b7ba:	f107 0314 	add.w	r3, r7, #20
 800b7be:	4618      	mov	r0, r3
 800b7c0:	f000 ff6d 	bl	800c69e <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>
 800b7c4:	6278      	str	r0, [r7, #36]	; 0x24
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
 800b7c6:	6878      	ldr	r0, [r7, #4]
 800b7c8:	f7ff ffb9 	bl	800b73e <_ZSt4moveIRNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 800b7cc:	4602      	mov	r2, r0
 800b7ce:	f107 0320 	add.w	r3, r7, #32
 800b7d2:	4611      	mov	r1, r2
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	f7ff ffbd 	bl	800b754 <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 800b7da:	f107 0420 	add.w	r4, r7, #32
 800b7de:	6838      	ldr	r0, [r7, #0]
 800b7e0:	f7ff ffc8 	bl	800b774 <_ZSt4moveIRSaIN4tama27Nokia5110DisplayDataManagerEEEONSt16remove_referenceIT_E4typeEOS5_>
 800b7e4:	4605      	mov	r5, r0
 800b7e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7e8:	4619      	mov	r1, r3
 800b7ea:	2014      	movs	r0, #20
 800b7ec:	f7f4 fea7 	bl	800053e <_ZnwjPv>
 800b7f0:	2800      	cmp	r0, #0
 800b7f2:	d004      	beq.n	800b7fe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x74>
 800b7f4:	462b      	mov	r3, r5
 800b7f6:	4622      	mov	r2, r4
 800b7f8:	68b9      	ldr	r1, [r7, #8]
 800b7fa:	f000 ff89 	bl	800c710 <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>
 800b7fe:	f107 0320 	add.w	r3, r7, #32
 800b802:	4618      	mov	r0, r3
 800b804:	f7ff fa4f 	bl	800aca6 <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	      _M_pi = __mem;
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b80c:	601a      	str	r2, [r3, #0]
	      __guard = nullptr;
 800b80e:	f107 0314 	add.w	r3, r7, #20
 800b812:	2100      	movs	r1, #0
 800b814:	4618      	mov	r0, r3
 800b816:	f000 ffa9 	bl	800c76c <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>
	      auto __guard = std::__allocate_guarded(__a2);
 800b81a:	f107 0314 	add.w	r3, r7, #20
 800b81e:	4618      	mov	r0, r3
 800b820:	f000 ff28 	bl	800c674 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 800b824:	f107 031c 	add.w	r3, r7, #28
 800b828:	4618      	mov	r0, r3
 800b82a:	f000 ff04 	bl	800c636 <_ZNSaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
	}
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	4618      	mov	r0, r3
 800b832:	3728      	adds	r7, #40	; 0x28
 800b834:	46bd      	mov	sp, r7
 800b836:	bdb0      	pop	{r4, r5, r7, pc}

0800b838 <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp*) noexcept
 800b838:	b480      	push	{r7}
 800b83a:	b083      	sub	sp, #12
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
 800b840:	6039      	str	r1, [r7, #0]
	{ }
 800b842:	bf00      	nop
 800b844:	370c      	adds	r7, #12
 800b846:	46bd      	mov	sp, r7
 800b848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b84c:	4770      	bx	lr

0800b84e <_ZNSaIN4tama16Stm32TimeMonitorEEC1ERKS1_>:
      allocator(const allocator& __a) throw()
 800b84e:	b580      	push	{r7, lr}
 800b850:	b082      	sub	sp, #8
 800b852:	af00      	add	r7, sp, #0
 800b854:	6078      	str	r0, [r7, #4]
 800b856:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 800b858:	6839      	ldr	r1, [r7, #0]
 800b85a:	6878      	ldr	r0, [r7, #4]
 800b85c:	f000 ffb5 	bl	800c7ca <_ZN9__gnu_cxx13new_allocatorIN4tama16Stm32TimeMonitorEEC1ERKS3_>
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	4618      	mov	r0, r3
 800b864:	3708      	adds	r7, #8
 800b866:	46bd      	mov	sp, r7
 800b868:	bd80      	pop	{r7, pc}

0800b86a <_ZSt18__allocate_guardedISaIN4tama16Stm32TimeMonitorEEESt15__allocated_ptrIT_ERS4_>:
    __allocate_guarded(_Alloc& __a)
 800b86a:	b580      	push	{r7, lr}
 800b86c:	b082      	sub	sp, #8
 800b86e:	af00      	add	r7, sp, #0
 800b870:	6078      	str	r0, [r7, #4]
 800b872:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 800b874:	2101      	movs	r1, #1
 800b876:	6838      	ldr	r0, [r7, #0]
 800b878:	f000 ffb3 	bl	800c7e2 <_ZNSt16allocator_traitsISaIN4tama16Stm32TimeMonitorEEE8allocateERS2_j>
 800b87c:	4603      	mov	r3, r0
 800b87e:	461a      	mov	r2, r3
 800b880:	6839      	ldr	r1, [r7, #0]
 800b882:	6878      	ldr	r0, [r7, #4]
 800b884:	f000 ffbc 	bl	800c800 <_ZNSt15__allocated_ptrISaIN4tama16Stm32TimeMonitorEEEC1ERS2_PS1_>
    }
 800b888:	6878      	ldr	r0, [r7, #4]
 800b88a:	3708      	adds	r7, #8
 800b88c:	46bd      	mov	sp, r7
 800b88e:	bd80      	pop	{r7, pc}

0800b890 <_ZNSt15__allocated_ptrISaIN4tama16Stm32TimeMonitorEEED1Ev>:
      ~__allocated_ptr()
 800b890:	b580      	push	{r7, lr}
 800b892:	b082      	sub	sp, #8
 800b894:	af00      	add	r7, sp, #0
 800b896:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	685b      	ldr	r3, [r3, #4]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d007      	beq.n	800b8b0 <_ZNSt15__allocated_ptrISaIN4tama16Stm32TimeMonitorEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	6818      	ldr	r0, [r3, #0]
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	685b      	ldr	r3, [r3, #4]
 800b8a8:	2201      	movs	r2, #1
 800b8aa:	4619      	mov	r1, r3
 800b8ac:	f000 ffbc 	bl	800c828 <_ZNSt16allocator_traitsISaIN4tama16Stm32TimeMonitorEEE10deallocateERS2_PS1_j>
      }
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	3708      	adds	r7, #8
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	bd80      	pop	{r7, pc}

0800b8ba <_ZNSt15__allocated_ptrISaIN4tama16Stm32TimeMonitorEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 800b8ba:	b580      	push	{r7, lr}
 800b8bc:	b082      	sub	sp, #8
 800b8be:	af00      	add	r7, sp, #0
 800b8c0:	6078      	str	r0, [r7, #4]
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	685b      	ldr	r3, [r3, #4]
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	f000 ffbd 	bl	800c846 <_ZNSt15__allocated_ptrISaIN4tama16Stm32TimeMonitorEEE10_S_raw_ptrEPS1_>
 800b8cc:	4603      	mov	r3, r0
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	3708      	adds	r7, #8
 800b8d2:	46bd      	mov	sp, r7
 800b8d4:	bd80      	pop	{r7, pc}

0800b8d6 <_ZNSt16allocator_traitsISaIN4tama16Stm32TimeMonitorEEE9constructIS1_JEEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 800b8d6:	b580      	push	{r7, lr}
 800b8d8:	b082      	sub	sp, #8
 800b8da:	af00      	add	r7, sp, #0
 800b8dc:	6078      	str	r0, [r7, #4]
 800b8de:	6039      	str	r1, [r7, #0]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 800b8e0:	6839      	ldr	r1, [r7, #0]
 800b8e2:	6878      	ldr	r0, [r7, #4]
 800b8e4:	f000 ffdc 	bl	800c8a0 <_ZN9__gnu_cxx13new_allocatorIN4tama16Stm32TimeMonitorEE9constructIS2_JEEEvPT_DpOT0_>
 800b8e8:	bf00      	nop
 800b8ea:	3708      	adds	r7, #8
 800b8ec:	46bd      	mov	sp, r7
 800b8ee:	bd80      	pop	{r7, pc}

0800b8f0 <_ZNSt15__allocated_ptrISaIN4tama16Stm32TimeMonitorEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 800b8f0:	b480      	push	{r7}
 800b8f2:	b083      	sub	sp, #12
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	6078      	str	r0, [r7, #4]
 800b8f8:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	2200      	movs	r2, #0
 800b8fe:	605a      	str	r2, [r3, #4]
	return *this;
 800b900:	687b      	ldr	r3, [r7, #4]
      }
 800b902:	4618      	mov	r0, r3
 800b904:	370c      	adds	r7, #12
 800b906:	46bd      	mov	sp, r7
 800b908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90c:	4770      	bx	lr

0800b90e <_ZSt4moveIRNSt12__shared_ptrIN4tama16Stm32TimeMonitorELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
 800b90e:	b480      	push	{r7}
 800b910:	b083      	sub	sp, #12
 800b912:	af00      	add	r7, sp, #0
 800b914:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	4618      	mov	r0, r3
 800b91a:	370c      	adds	r7, #12
 800b91c:	46bd      	mov	sp, r7
 800b91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b922:	4770      	bx	lr

0800b924 <_ZNSt12__shared_ptrIN4tama16Stm32TimeMonitorELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>:
        struct _Deleter
 800b924:	b580      	push	{r7, lr}
 800b926:	b082      	sub	sp, #8
 800b928:	af00      	add	r7, sp, #0
 800b92a:	6078      	str	r0, [r7, #4]
 800b92c:	6039      	str	r1, [r7, #0]
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	683a      	ldr	r2, [r7, #0]
 800b932:	4611      	mov	r1, r2
 800b934:	4618      	mov	r0, r3
 800b936:	f7ff ff8a 	bl	800b84e <_ZNSaIN4tama16Stm32TimeMonitorEEC1ERKS1_>
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	4618      	mov	r0, r3
 800b93e:	3708      	adds	r7, #8
 800b940:	46bd      	mov	sp, r7
 800b942:	bd80      	pop	{r7, pc}

0800b944 <_ZSt4moveIRSaIN4tama16Stm32TimeMonitorEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800b944:	b480      	push	{r7}
 800b946:	b083      	sub	sp, #12
 800b948:	af00      	add	r7, sp, #0
 800b94a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	4618      	mov	r0, r3
 800b950:	370c      	adds	r7, #12
 800b952:	46bd      	mov	sp, r7
 800b954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b958:	4770      	bx	lr

0800b95a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
 800b95a:	b5b0      	push	{r4, r5, r7, lr}
 800b95c:	b08a      	sub	sp, #40	; 0x28
 800b95e:	af00      	add	r7, sp, #0
 800b960:	60f8      	str	r0, [r7, #12]
 800b962:	60b9      	str	r1, [r7, #8]
 800b964:	607a      	str	r2, [r7, #4]
 800b966:	603b      	str	r3, [r7, #0]
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	2200      	movs	r2, #0
 800b96c:	601a      	str	r2, [r3, #0]
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 800b96e:	f107 031c 	add.w	r3, r7, #28
 800b972:	6839      	ldr	r1, [r7, #0]
 800b974:	4618      	mov	r0, r3
 800b976:	f000 ffab 	bl	800c8d0 <_ZNSaISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	      auto __guard = std::__allocate_guarded(__a2);
 800b97a:	f107 0314 	add.w	r3, r7, #20
 800b97e:	f107 021c 	add.w	r2, r7, #28
 800b982:	4611      	mov	r1, r2
 800b984:	4618      	mov	r0, r3
 800b986:	f000 ffbc 	bl	800c902 <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>
	      _Sp_cd_type* __mem = __guard.get();
 800b98a:	f107 0314 	add.w	r3, r7, #20
 800b98e:	4618      	mov	r0, r3
 800b990:	f000 ffdf 	bl	800c952 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>
 800b994:	6278      	str	r0, [r7, #36]	; 0x24
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
 800b996:	6878      	ldr	r0, [r7, #4]
 800b998:	f7ff ffb9 	bl	800b90e <_ZSt4moveIRNSt12__shared_ptrIN4tama16Stm32TimeMonitorELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 800b99c:	4602      	mov	r2, r0
 800b99e:	f107 0320 	add.w	r3, r7, #32
 800b9a2:	4611      	mov	r1, r2
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	f7ff ffbd 	bl	800b924 <_ZNSt12__shared_ptrIN4tama16Stm32TimeMonitorELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 800b9aa:	f107 0420 	add.w	r4, r7, #32
 800b9ae:	6838      	ldr	r0, [r7, #0]
 800b9b0:	f7ff ffc8 	bl	800b944 <_ZSt4moveIRSaIN4tama16Stm32TimeMonitorEEEONSt16remove_referenceIT_E4typeEOS5_>
 800b9b4:	4605      	mov	r5, r0
 800b9b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9b8:	4619      	mov	r1, r3
 800b9ba:	2014      	movs	r0, #20
 800b9bc:	f7f4 fdbf 	bl	800053e <_ZnwjPv>
 800b9c0:	2800      	cmp	r0, #0
 800b9c2:	d004      	beq.n	800b9ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x74>
 800b9c4:	462b      	mov	r3, r5
 800b9c6:	4622      	mov	r2, r4
 800b9c8:	68b9      	ldr	r1, [r7, #8]
 800b9ca:	f000 fffb 	bl	800c9c4 <_ZNSt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>
 800b9ce:	f107 0320 	add.w	r3, r7, #32
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	f7ff f9fa 	bl	800adcc <_ZNSt12__shared_ptrIN4tama16Stm32TimeMonitorELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	      _M_pi = __mem;
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9dc:	601a      	str	r2, [r3, #0]
	      __guard = nullptr;
 800b9de:	f107 0314 	add.w	r3, r7, #20
 800b9e2:	2100      	movs	r1, #0
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	f001 f81b 	bl	800ca20 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>
	      auto __guard = std::__allocate_guarded(__a2);
 800b9ea:	f107 0314 	add.w	r3, r7, #20
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	f000 ff9a 	bl	800c928 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 800b9f4:	f107 031c 	add.w	r3, r7, #28
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	f000 ff76 	bl	800c8ea <_ZNSaISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
	}
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	4618      	mov	r0, r3
 800ba02:	3728      	adds	r7, #40	; 0x28
 800ba04:	46bd      	mov	sp, r7
 800ba06:	bdb0      	pop	{r4, r5, r7, pc}

0800ba08 <_ZNSt12__shared_ptrIN4tama16Stm32TimeMonitorELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp*) noexcept
 800ba08:	b480      	push	{r7}
 800ba0a:	b083      	sub	sp, #12
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]
 800ba10:	6039      	str	r1, [r7, #0]
	{ }
 800ba12:	bf00      	nop
 800ba14:	370c      	adds	r7, #12
 800ba16:	46bd      	mov	sp, r7
 800ba18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1c:	4770      	bx	lr

0800ba1e <_ZNSaIN4tama25Stm32SoundPlayingStrategyEEC1ERKS1_>:
      allocator(const allocator& __a) throw()
 800ba1e:	b580      	push	{r7, lr}
 800ba20:	b082      	sub	sp, #8
 800ba22:	af00      	add	r7, sp, #0
 800ba24:	6078      	str	r0, [r7, #4]
 800ba26:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 800ba28:	6839      	ldr	r1, [r7, #0]
 800ba2a:	6878      	ldr	r0, [r7, #4]
 800ba2c:	f001 f827 	bl	800ca7e <_ZN9__gnu_cxx13new_allocatorIN4tama25Stm32SoundPlayingStrategyEEC1ERKS3_>
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	4618      	mov	r0, r3
 800ba34:	3708      	adds	r7, #8
 800ba36:	46bd      	mov	sp, r7
 800ba38:	bd80      	pop	{r7, pc}

0800ba3a <_ZSt18__allocate_guardedISaIN4tama25Stm32SoundPlayingStrategyEEESt15__allocated_ptrIT_ERS4_>:
    __allocate_guarded(_Alloc& __a)
 800ba3a:	b580      	push	{r7, lr}
 800ba3c:	b082      	sub	sp, #8
 800ba3e:	af00      	add	r7, sp, #0
 800ba40:	6078      	str	r0, [r7, #4]
 800ba42:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 800ba44:	2101      	movs	r1, #1
 800ba46:	6838      	ldr	r0, [r7, #0]
 800ba48:	f001 f825 	bl	800ca96 <_ZNSt16allocator_traitsISaIN4tama25Stm32SoundPlayingStrategyEEE8allocateERS2_j>
 800ba4c:	4603      	mov	r3, r0
 800ba4e:	461a      	mov	r2, r3
 800ba50:	6839      	ldr	r1, [r7, #0]
 800ba52:	6878      	ldr	r0, [r7, #4]
 800ba54:	f001 f82e 	bl	800cab4 <_ZNSt15__allocated_ptrISaIN4tama25Stm32SoundPlayingStrategyEEEC1ERS2_PS1_>
    }
 800ba58:	6878      	ldr	r0, [r7, #4]
 800ba5a:	3708      	adds	r7, #8
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	bd80      	pop	{r7, pc}

0800ba60 <_ZNSt15__allocated_ptrISaIN4tama25Stm32SoundPlayingStrategyEEED1Ev>:
      ~__allocated_ptr()
 800ba60:	b580      	push	{r7, lr}
 800ba62:	b082      	sub	sp, #8
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	685b      	ldr	r3, [r3, #4]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d007      	beq.n	800ba80 <_ZNSt15__allocated_ptrISaIN4tama25Stm32SoundPlayingStrategyEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	6818      	ldr	r0, [r3, #0]
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	685b      	ldr	r3, [r3, #4]
 800ba78:	2201      	movs	r2, #1
 800ba7a:	4619      	mov	r1, r3
 800ba7c:	f001 f82e 	bl	800cadc <_ZNSt16allocator_traitsISaIN4tama25Stm32SoundPlayingStrategyEEE10deallocateERS2_PS1_j>
      }
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	4618      	mov	r0, r3
 800ba84:	3708      	adds	r7, #8
 800ba86:	46bd      	mov	sp, r7
 800ba88:	bd80      	pop	{r7, pc}

0800ba8a <_ZNSt15__allocated_ptrISaIN4tama25Stm32SoundPlayingStrategyEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 800ba8a:	b580      	push	{r7, lr}
 800ba8c:	b082      	sub	sp, #8
 800ba8e:	af00      	add	r7, sp, #0
 800ba90:	6078      	str	r0, [r7, #4]
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	685b      	ldr	r3, [r3, #4]
 800ba96:	4618      	mov	r0, r3
 800ba98:	f001 f82f 	bl	800cafa <_ZNSt15__allocated_ptrISaIN4tama25Stm32SoundPlayingStrategyEEE10_S_raw_ptrEPS1_>
 800ba9c:	4603      	mov	r3, r0
 800ba9e:	4618      	mov	r0, r3
 800baa0:	3708      	adds	r7, #8
 800baa2:	46bd      	mov	sp, r7
 800baa4:	bd80      	pop	{r7, pc}

0800baa6 <_ZNSt16allocator_traitsISaIN4tama25Stm32SoundPlayingStrategyEEE9constructIS1_JEEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 800baa6:	b580      	push	{r7, lr}
 800baa8:	b082      	sub	sp, #8
 800baaa:	af00      	add	r7, sp, #0
 800baac:	6078      	str	r0, [r7, #4]
 800baae:	6039      	str	r1, [r7, #0]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 800bab0:	6839      	ldr	r1, [r7, #0]
 800bab2:	6878      	ldr	r0, [r7, #4]
 800bab4:	f001 f84e 	bl	800cb54 <_ZN9__gnu_cxx13new_allocatorIN4tama25Stm32SoundPlayingStrategyEE9constructIS2_JEEEvPT_DpOT0_>
 800bab8:	bf00      	nop
 800baba:	3708      	adds	r7, #8
 800babc:	46bd      	mov	sp, r7
 800babe:	bd80      	pop	{r7, pc}

0800bac0 <_ZNSt15__allocated_ptrISaIN4tama25Stm32SoundPlayingStrategyEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 800bac0:	b480      	push	{r7}
 800bac2:	b083      	sub	sp, #12
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	6078      	str	r0, [r7, #4]
 800bac8:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	2200      	movs	r2, #0
 800bace:	605a      	str	r2, [r3, #4]
	return *this;
 800bad0:	687b      	ldr	r3, [r7, #4]
      }
 800bad2:	4618      	mov	r0, r3
 800bad4:	370c      	adds	r7, #12
 800bad6:	46bd      	mov	sp, r7
 800bad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800badc:	4770      	bx	lr

0800bade <_ZSt4moveIRNSt12__shared_ptrIN4tama25Stm32SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
 800bade:	b480      	push	{r7}
 800bae0:	b083      	sub	sp, #12
 800bae2:	af00      	add	r7, sp, #0
 800bae4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	4618      	mov	r0, r3
 800baea:	370c      	adds	r7, #12
 800baec:	46bd      	mov	sp, r7
 800baee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf2:	4770      	bx	lr

0800baf4 <_ZNSt12__shared_ptrIN4tama25Stm32SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>:
        struct _Deleter
 800baf4:	b580      	push	{r7, lr}
 800baf6:	b082      	sub	sp, #8
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	6078      	str	r0, [r7, #4]
 800bafc:	6039      	str	r1, [r7, #0]
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	683a      	ldr	r2, [r7, #0]
 800bb02:	4611      	mov	r1, r2
 800bb04:	4618      	mov	r0, r3
 800bb06:	f7ff ff8a 	bl	800ba1e <_ZNSaIN4tama25Stm32SoundPlayingStrategyEEC1ERKS1_>
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	4618      	mov	r0, r3
 800bb0e:	3708      	adds	r7, #8
 800bb10:	46bd      	mov	sp, r7
 800bb12:	bd80      	pop	{r7, pc}

0800bb14 <_ZSt4moveIRSaIN4tama25Stm32SoundPlayingStrategyEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800bb14:	b480      	push	{r7}
 800bb16:	b083      	sub	sp, #12
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	4618      	mov	r0, r3
 800bb20:	370c      	adds	r7, #12
 800bb22:	46bd      	mov	sp, r7
 800bb24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb28:	4770      	bx	lr

0800bb2a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
 800bb2a:	b5b0      	push	{r4, r5, r7, lr}
 800bb2c:	b08a      	sub	sp, #40	; 0x28
 800bb2e:	af00      	add	r7, sp, #0
 800bb30:	60f8      	str	r0, [r7, #12]
 800bb32:	60b9      	str	r1, [r7, #8]
 800bb34:	607a      	str	r2, [r7, #4]
 800bb36:	603b      	str	r3, [r7, #0]
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	601a      	str	r2, [r3, #0]
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 800bb3e:	f107 031c 	add.w	r3, r7, #28
 800bb42:	6839      	ldr	r1, [r7, #0]
 800bb44:	4618      	mov	r0, r3
 800bb46:	f001 f81b 	bl	800cb80 <_ZNSaISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	      auto __guard = std::__allocate_guarded(__a2);
 800bb4a:	f107 0314 	add.w	r3, r7, #20
 800bb4e:	f107 021c 	add.w	r2, r7, #28
 800bb52:	4611      	mov	r1, r2
 800bb54:	4618      	mov	r0, r3
 800bb56:	f001 f82c 	bl	800cbb2 <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>
	      _Sp_cd_type* __mem = __guard.get();
 800bb5a:	f107 0314 	add.w	r3, r7, #20
 800bb5e:	4618      	mov	r0, r3
 800bb60:	f001 f84f 	bl	800cc02 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>
 800bb64:	6278      	str	r0, [r7, #36]	; 0x24
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
 800bb66:	6878      	ldr	r0, [r7, #4]
 800bb68:	f7ff ffb9 	bl	800bade <_ZSt4moveIRNSt12__shared_ptrIN4tama25Stm32SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 800bb6c:	4602      	mov	r2, r0
 800bb6e:	f107 0320 	add.w	r3, r7, #32
 800bb72:	4611      	mov	r1, r2
 800bb74:	4618      	mov	r0, r3
 800bb76:	f7ff ffbd 	bl	800baf4 <_ZNSt12__shared_ptrIN4tama25Stm32SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 800bb7a:	f107 0420 	add.w	r4, r7, #32
 800bb7e:	6838      	ldr	r0, [r7, #0]
 800bb80:	f7ff ffc8 	bl	800bb14 <_ZSt4moveIRSaIN4tama25Stm32SoundPlayingStrategyEEEONSt16remove_referenceIT_E4typeEOS5_>
 800bb84:	4605      	mov	r5, r0
 800bb86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb88:	4619      	mov	r1, r3
 800bb8a:	2014      	movs	r0, #20
 800bb8c:	f7f4 fcd7 	bl	800053e <_ZnwjPv>
 800bb90:	2800      	cmp	r0, #0
 800bb92:	d004      	beq.n	800bb9e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x74>
 800bb94:	462b      	mov	r3, r5
 800bb96:	4622      	mov	r2, r4
 800bb98:	68b9      	ldr	r1, [r7, #8]
 800bb9a:	f001 f86b 	bl	800cc74 <_ZNSt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>
 800bb9e:	f107 0320 	add.w	r3, r7, #32
 800bba2:	4618      	mov	r0, r3
 800bba4:	f7ff f9a5 	bl	800aef2 <_ZNSt12__shared_ptrIN4tama25Stm32SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	      _M_pi = __mem;
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bbac:	601a      	str	r2, [r3, #0]
	      __guard = nullptr;
 800bbae:	f107 0314 	add.w	r3, r7, #20
 800bbb2:	2100      	movs	r1, #0
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	f001 f88b 	bl	800ccd0 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>
	      auto __guard = std::__allocate_guarded(__a2);
 800bbba:	f107 0314 	add.w	r3, r7, #20
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	f001 f80a 	bl	800cbd8 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 800bbc4:	f107 031c 	add.w	r3, r7, #28
 800bbc8:	4618      	mov	r0, r3
 800bbca:	f000 ffe6 	bl	800cb9a <_ZNSaISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
	}
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	3728      	adds	r7, #40	; 0x28
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	bdb0      	pop	{r4, r5, r7, pc}

0800bbd8 <_ZNSt12__shared_ptrIN4tama25Stm32SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp*) noexcept
 800bbd8:	b480      	push	{r7}
 800bbda:	b083      	sub	sp, #12
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	6078      	str	r0, [r7, #4]
 800bbe0:	6039      	str	r1, [r7, #0]
	{ }
 800bbe2:	bf00      	nop
 800bbe4:	370c      	adds	r7, #12
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbec:	4770      	bx	lr

0800bbee <_ZNSaIN4tama10Stm32InputEEC1ERKS1_>:
      allocator(const allocator& __a) throw()
 800bbee:	b580      	push	{r7, lr}
 800bbf0:	b082      	sub	sp, #8
 800bbf2:	af00      	add	r7, sp, #0
 800bbf4:	6078      	str	r0, [r7, #4]
 800bbf6:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 800bbf8:	6839      	ldr	r1, [r7, #0]
 800bbfa:	6878      	ldr	r0, [r7, #4]
 800bbfc:	f001 f897 	bl	800cd2e <_ZN9__gnu_cxx13new_allocatorIN4tama10Stm32InputEEC1ERKS3_>
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	4618      	mov	r0, r3
 800bc04:	3708      	adds	r7, #8
 800bc06:	46bd      	mov	sp, r7
 800bc08:	bd80      	pop	{r7, pc}

0800bc0a <_ZSt18__allocate_guardedISaIN4tama10Stm32InputEEESt15__allocated_ptrIT_ERS4_>:
    __allocate_guarded(_Alloc& __a)
 800bc0a:	b580      	push	{r7, lr}
 800bc0c:	b082      	sub	sp, #8
 800bc0e:	af00      	add	r7, sp, #0
 800bc10:	6078      	str	r0, [r7, #4]
 800bc12:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 800bc14:	2101      	movs	r1, #1
 800bc16:	6838      	ldr	r0, [r7, #0]
 800bc18:	f001 f895 	bl	800cd46 <_ZNSt16allocator_traitsISaIN4tama10Stm32InputEEE8allocateERS2_j>
 800bc1c:	4603      	mov	r3, r0
 800bc1e:	461a      	mov	r2, r3
 800bc20:	6839      	ldr	r1, [r7, #0]
 800bc22:	6878      	ldr	r0, [r7, #4]
 800bc24:	f001 f89e 	bl	800cd64 <_ZNSt15__allocated_ptrISaIN4tama10Stm32InputEEEC1ERS2_PS1_>
    }
 800bc28:	6878      	ldr	r0, [r7, #4]
 800bc2a:	3708      	adds	r7, #8
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	bd80      	pop	{r7, pc}

0800bc30 <_ZNSt15__allocated_ptrISaIN4tama10Stm32InputEEED1Ev>:
      ~__allocated_ptr()
 800bc30:	b580      	push	{r7, lr}
 800bc32:	b082      	sub	sp, #8
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	685b      	ldr	r3, [r3, #4]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d007      	beq.n	800bc50 <_ZNSt15__allocated_ptrISaIN4tama10Stm32InputEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	6818      	ldr	r0, [r3, #0]
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	685b      	ldr	r3, [r3, #4]
 800bc48:	2201      	movs	r2, #1
 800bc4a:	4619      	mov	r1, r3
 800bc4c:	f001 f89e 	bl	800cd8c <_ZNSt16allocator_traitsISaIN4tama10Stm32InputEEE10deallocateERS2_PS1_j>
      }
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	4618      	mov	r0, r3
 800bc54:	3708      	adds	r7, #8
 800bc56:	46bd      	mov	sp, r7
 800bc58:	bd80      	pop	{r7, pc}

0800bc5a <_ZNSt15__allocated_ptrISaIN4tama10Stm32InputEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 800bc5a:	b580      	push	{r7, lr}
 800bc5c:	b082      	sub	sp, #8
 800bc5e:	af00      	add	r7, sp, #0
 800bc60:	6078      	str	r0, [r7, #4]
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	685b      	ldr	r3, [r3, #4]
 800bc66:	4618      	mov	r0, r3
 800bc68:	f001 f89f 	bl	800cdaa <_ZNSt15__allocated_ptrISaIN4tama10Stm32InputEEE10_S_raw_ptrEPS1_>
 800bc6c:	4603      	mov	r3, r0
 800bc6e:	4618      	mov	r0, r3
 800bc70:	3708      	adds	r7, #8
 800bc72:	46bd      	mov	sp, r7
 800bc74:	bd80      	pop	{r7, pc}

0800bc76 <_ZNSt16allocator_traitsISaIN4tama10Stm32InputEEE9constructIS1_JEEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 800bc76:	b580      	push	{r7, lr}
 800bc78:	b082      	sub	sp, #8
 800bc7a:	af00      	add	r7, sp, #0
 800bc7c:	6078      	str	r0, [r7, #4]
 800bc7e:	6039      	str	r1, [r7, #0]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 800bc80:	6839      	ldr	r1, [r7, #0]
 800bc82:	6878      	ldr	r0, [r7, #4]
 800bc84:	f001 f8d6 	bl	800ce34 <_ZN9__gnu_cxx13new_allocatorIN4tama10Stm32InputEE9constructIS2_JEEEvPT_DpOT0_>
 800bc88:	bf00      	nop
 800bc8a:	3708      	adds	r7, #8
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	bd80      	pop	{r7, pc}

0800bc90 <_ZNSt15__allocated_ptrISaIN4tama10Stm32InputEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 800bc90:	b480      	push	{r7}
 800bc92:	b083      	sub	sp, #12
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	6078      	str	r0, [r7, #4]
 800bc98:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	2200      	movs	r2, #0
 800bc9e:	605a      	str	r2, [r3, #4]
	return *this;
 800bca0:	687b      	ldr	r3, [r7, #4]
      }
 800bca2:	4618      	mov	r0, r3
 800bca4:	370c      	adds	r7, #12
 800bca6:	46bd      	mov	sp, r7
 800bca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcac:	4770      	bx	lr

0800bcae <_ZSt4moveIRNSt12__shared_ptrIN4tama10Stm32InputELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
 800bcae:	b480      	push	{r7}
 800bcb0:	b083      	sub	sp, #12
 800bcb2:	af00      	add	r7, sp, #0
 800bcb4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	4618      	mov	r0, r3
 800bcba:	370c      	adds	r7, #12
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc2:	4770      	bx	lr

0800bcc4 <_ZNSt12__shared_ptrIN4tama10Stm32InputELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>:
        struct _Deleter
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	b082      	sub	sp, #8
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	6078      	str	r0, [r7, #4]
 800bccc:	6039      	str	r1, [r7, #0]
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	683a      	ldr	r2, [r7, #0]
 800bcd2:	4611      	mov	r1, r2
 800bcd4:	4618      	mov	r0, r3
 800bcd6:	f7ff ff8a 	bl	800bbee <_ZNSaIN4tama10Stm32InputEEC1ERKS1_>
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	4618      	mov	r0, r3
 800bcde:	3708      	adds	r7, #8
 800bce0:	46bd      	mov	sp, r7
 800bce2:	bd80      	pop	{r7, pc}

0800bce4 <_ZSt4moveIRSaIN4tama10Stm32InputEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800bce4:	b480      	push	{r7}
 800bce6:	b083      	sub	sp, #12
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	4618      	mov	r0, r3
 800bcf0:	370c      	adds	r7, #12
 800bcf2:	46bd      	mov	sp, r7
 800bcf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf8:	4770      	bx	lr

0800bcfa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama10Stm32InputENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
 800bcfa:	b5b0      	push	{r4, r5, r7, lr}
 800bcfc:	b08a      	sub	sp, #40	; 0x28
 800bcfe:	af00      	add	r7, sp, #0
 800bd00:	60f8      	str	r0, [r7, #12]
 800bd02:	60b9      	str	r1, [r7, #8]
 800bd04:	607a      	str	r2, [r7, #4]
 800bd06:	603b      	str	r3, [r7, #0]
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	2200      	movs	r2, #0
 800bd0c:	601a      	str	r2, [r3, #0]
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 800bd0e:	f107 031c 	add.w	r3, r7, #28
 800bd12:	6839      	ldr	r1, [r7, #0]
 800bd14:	4618      	mov	r0, r3
 800bd16:	f001 f8a7 	bl	800ce68 <_ZNSaISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	      auto __guard = std::__allocate_guarded(__a2);
 800bd1a:	f107 0314 	add.w	r3, r7, #20
 800bd1e:	f107 021c 	add.w	r2, r7, #28
 800bd22:	4611      	mov	r1, r2
 800bd24:	4618      	mov	r0, r3
 800bd26:	f001 f8b8 	bl	800ce9a <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>
	      _Sp_cd_type* __mem = __guard.get();
 800bd2a:	f107 0314 	add.w	r3, r7, #20
 800bd2e:	4618      	mov	r0, r3
 800bd30:	f001 f8db 	bl	800ceea <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>
 800bd34:	6278      	str	r0, [r7, #36]	; 0x24
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
 800bd36:	6878      	ldr	r0, [r7, #4]
 800bd38:	f7ff ffb9 	bl	800bcae <_ZSt4moveIRNSt12__shared_ptrIN4tama10Stm32InputELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 800bd3c:	4602      	mov	r2, r0
 800bd3e:	f107 0320 	add.w	r3, r7, #32
 800bd42:	4611      	mov	r1, r2
 800bd44:	4618      	mov	r0, r3
 800bd46:	f7ff ffbd 	bl	800bcc4 <_ZNSt12__shared_ptrIN4tama10Stm32InputELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 800bd4a:	f107 0420 	add.w	r4, r7, #32
 800bd4e:	6838      	ldr	r0, [r7, #0]
 800bd50:	f7ff ffc8 	bl	800bce4 <_ZSt4moveIRSaIN4tama10Stm32InputEEEONSt16remove_referenceIT_E4typeEOS5_>
 800bd54:	4605      	mov	r5, r0
 800bd56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd58:	4619      	mov	r1, r3
 800bd5a:	2014      	movs	r0, #20
 800bd5c:	f7f4 fbef 	bl	800053e <_ZnwjPv>
 800bd60:	2800      	cmp	r0, #0
 800bd62:	d004      	beq.n	800bd6e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama10Stm32InputENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x74>
 800bd64:	462b      	mov	r3, r5
 800bd66:	4622      	mov	r2, r4
 800bd68:	68b9      	ldr	r1, [r7, #8]
 800bd6a:	f001 f8f7 	bl	800cf5c <_ZNSt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>
 800bd6e:	f107 0320 	add.w	r3, r7, #32
 800bd72:	4618      	mov	r0, r3
 800bd74:	f7ff f950 	bl	800b018 <_ZNSt12__shared_ptrIN4tama10Stm32InputELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	      _M_pi = __mem;
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd7c:	601a      	str	r2, [r3, #0]
	      __guard = nullptr;
 800bd7e:	f107 0314 	add.w	r3, r7, #20
 800bd82:	2100      	movs	r1, #0
 800bd84:	4618      	mov	r0, r3
 800bd86:	f001 f917 	bl	800cfb8 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>
	      auto __guard = std::__allocate_guarded(__a2);
 800bd8a:	f107 0314 	add.w	r3, r7, #20
 800bd8e:	4618      	mov	r0, r3
 800bd90:	f001 f896 	bl	800cec0 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 800bd94:	f107 031c 	add.w	r3, r7, #28
 800bd98:	4618      	mov	r0, r3
 800bd9a:	f001 f872 	bl	800ce82 <_ZNSaISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
	}
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	4618      	mov	r0, r3
 800bda2:	3728      	adds	r7, #40	; 0x28
 800bda4:	46bd      	mov	sp, r7
 800bda6:	bdb0      	pop	{r4, r5, r7, pc}

0800bda8 <_ZNSt12__shared_ptrIN4tama10Stm32InputELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp*) noexcept
 800bda8:	b480      	push	{r7}
 800bdaa:	b083      	sub	sp, #12
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	6078      	str	r0, [r7, #4]
 800bdb0:	6039      	str	r1, [r7, #0]
	{ }
 800bdb2:	bf00      	nop
 800bdb4:	370c      	adds	r7, #12
 800bdb6:	46bd      	mov	sp, r7
 800bdb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdbc:	4770      	bx	lr
	...

0800bdc0 <_ZNSt15_Sp_counted_ptrIPN4tama11SoundPlayerELN9__gnu_cxx12_Lock_policyE0EEC1ES2_>:
      _Sp_counted_ptr(_Ptr __p) noexcept
 800bdc0:	b580      	push	{r7, lr}
 800bdc2:	b082      	sub	sp, #8
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	6078      	str	r0, [r7, #4]
 800bdc8:	6039      	str	r1, [r7, #0]
      : _M_ptr(__p) { }
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	4618      	mov	r0, r3
 800bdce:	f7f6 fbcf 	bl	8002570 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 800bdd2:	4a05      	ldr	r2, [pc, #20]	; (800bde8 <_ZNSt15_Sp_counted_ptrIPN4tama11SoundPlayerELN9__gnu_cxx12_Lock_policyE0EEC1ES2_+0x28>)
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	601a      	str	r2, [r3, #0]
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	683a      	ldr	r2, [r7, #0]
 800bddc:	60da      	str	r2, [r3, #12]
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	4618      	mov	r0, r3
 800bde2:	3708      	adds	r7, #8
 800bde4:	46bd      	mov	sp, r7
 800bde6:	bd80      	pop	{r7, pc}
 800bde8:	0801b0e4 	.word	0x0801b0e4

0800bdec <_ZNSaIN4tama7ContextEEC1ERKS1_>:
      allocator(const allocator& __a) throw()
 800bdec:	b580      	push	{r7, lr}
 800bdee:	b082      	sub	sp, #8
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
 800bdf4:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 800bdf6:	6839      	ldr	r1, [r7, #0]
 800bdf8:	6878      	ldr	r0, [r7, #4]
 800bdfa:	f001 f90c 	bl	800d016 <_ZN9__gnu_cxx13new_allocatorIN4tama7ContextEEC1ERKS3_>
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	4618      	mov	r0, r3
 800be02:	3708      	adds	r7, #8
 800be04:	46bd      	mov	sp, r7
 800be06:	bd80      	pop	{r7, pc}

0800be08 <_ZSt18__allocate_guardedISaIN4tama7ContextEEESt15__allocated_ptrIT_ERS4_>:
    __allocate_guarded(_Alloc& __a)
 800be08:	b580      	push	{r7, lr}
 800be0a:	b082      	sub	sp, #8
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	6078      	str	r0, [r7, #4]
 800be10:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 800be12:	2101      	movs	r1, #1
 800be14:	6838      	ldr	r0, [r7, #0]
 800be16:	f001 f90a 	bl	800d02e <_ZNSt16allocator_traitsISaIN4tama7ContextEEE8allocateERS2_j>
 800be1a:	4603      	mov	r3, r0
 800be1c:	461a      	mov	r2, r3
 800be1e:	6839      	ldr	r1, [r7, #0]
 800be20:	6878      	ldr	r0, [r7, #4]
 800be22:	f001 f913 	bl	800d04c <_ZNSt15__allocated_ptrISaIN4tama7ContextEEEC1ERS2_PS1_>
    }
 800be26:	6878      	ldr	r0, [r7, #4]
 800be28:	3708      	adds	r7, #8
 800be2a:	46bd      	mov	sp, r7
 800be2c:	bd80      	pop	{r7, pc}

0800be2e <_ZNSt15__allocated_ptrISaIN4tama7ContextEEED1Ev>:
      ~__allocated_ptr()
 800be2e:	b580      	push	{r7, lr}
 800be30:	b082      	sub	sp, #8
 800be32:	af00      	add	r7, sp, #0
 800be34:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	685b      	ldr	r3, [r3, #4]
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d007      	beq.n	800be4e <_ZNSt15__allocated_ptrISaIN4tama7ContextEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	6818      	ldr	r0, [r3, #0]
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	685b      	ldr	r3, [r3, #4]
 800be46:	2201      	movs	r2, #1
 800be48:	4619      	mov	r1, r3
 800be4a:	f001 f913 	bl	800d074 <_ZNSt16allocator_traitsISaIN4tama7ContextEEE10deallocateERS2_PS1_j>
      }
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	4618      	mov	r0, r3
 800be52:	3708      	adds	r7, #8
 800be54:	46bd      	mov	sp, r7
 800be56:	bd80      	pop	{r7, pc}

0800be58 <_ZNSt15__allocated_ptrISaIN4tama7ContextEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 800be58:	b580      	push	{r7, lr}
 800be5a:	b082      	sub	sp, #8
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	6078      	str	r0, [r7, #4]
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	685b      	ldr	r3, [r3, #4]
 800be64:	4618      	mov	r0, r3
 800be66:	f001 f914 	bl	800d092 <_ZNSt15__allocated_ptrISaIN4tama7ContextEEE10_S_raw_ptrEPS1_>
 800be6a:	4603      	mov	r3, r0
 800be6c:	4618      	mov	r0, r3
 800be6e:	3708      	adds	r7, #8
 800be70:	46bd      	mov	sp, r7
 800be72:	bd80      	pop	{r7, pc}

0800be74 <_ZNSt16allocator_traitsISaIN4tama7ContextEEE9constructIS1_JRSt10shared_ptrINS0_13TextureLoaderEERS5_INS0_5InputEES5_INS0_11SoundPlayerEEEEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 800be74:	b5b0      	push	{r4, r5, r7, lr}
 800be76:	b086      	sub	sp, #24
 800be78:	af02      	add	r7, sp, #8
 800be7a:	60f8      	str	r0, [r7, #12]
 800be7c:	60b9      	str	r1, [r7, #8]
 800be7e:	607a      	str	r2, [r7, #4]
 800be80:	603b      	str	r3, [r7, #0]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 800be82:	6878      	ldr	r0, [r7, #4]
 800be84:	f7fe f936 	bl	800a0f4 <_ZSt7forwardIRSt10shared_ptrIN4tama13TextureLoaderEEEOT_RNSt16remove_referenceIS5_E4typeE>
 800be88:	4604      	mov	r4, r0
 800be8a:	6838      	ldr	r0, [r7, #0]
 800be8c:	f7fe f93d 	bl	800a10a <_ZSt7forwardIRSt10shared_ptrIN4tama5InputEEEOT_RNSt16remove_referenceIS5_E4typeE>
 800be90:	4605      	mov	r5, r0
 800be92:	6a38      	ldr	r0, [r7, #32]
 800be94:	f7fe f944 	bl	800a120 <_ZSt7forwardISt10shared_ptrIN4tama11SoundPlayerEEEOT_RNSt16remove_referenceIS4_E4typeE>
 800be98:	4603      	mov	r3, r0
 800be9a:	9300      	str	r3, [sp, #0]
 800be9c:	462b      	mov	r3, r5
 800be9e:	4622      	mov	r2, r4
 800bea0:	68b9      	ldr	r1, [r7, #8]
 800bea2:	68f8      	ldr	r0, [r7, #12]
 800bea4:	f001 f900 	bl	800d0a8 <_ZN9__gnu_cxx13new_allocatorIN4tama7ContextEE9constructIS2_JRSt10shared_ptrINS1_13TextureLoaderEERS5_INS1_5InputEES5_INS1_11SoundPlayerEEEEEvPT_DpOT0_>
 800bea8:	bf00      	nop
 800beaa:	3710      	adds	r7, #16
 800beac:	46bd      	mov	sp, r7
 800beae:	bdb0      	pop	{r4, r5, r7, pc}

0800beb0 <_ZNSt15__allocated_ptrISaIN4tama7ContextEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 800beb0:	b480      	push	{r7}
 800beb2:	b083      	sub	sp, #12
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	6078      	str	r0, [r7, #4]
 800beb8:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	2200      	movs	r2, #0
 800bebe:	605a      	str	r2, [r3, #4]
	return *this;
 800bec0:	687b      	ldr	r3, [r7, #4]
      }
 800bec2:	4618      	mov	r0, r3
 800bec4:	370c      	adds	r7, #12
 800bec6:	46bd      	mov	sp, r7
 800bec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800becc:	4770      	bx	lr

0800bece <_ZSt4moveIRNSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
 800bece:	b480      	push	{r7}
 800bed0:	b083      	sub	sp, #12
 800bed2:	af00      	add	r7, sp, #0
 800bed4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	4618      	mov	r0, r3
 800beda:	370c      	adds	r7, #12
 800bedc:	46bd      	mov	sp, r7
 800bede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee2:	4770      	bx	lr

0800bee4 <_ZNSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>:
        struct _Deleter
 800bee4:	b580      	push	{r7, lr}
 800bee6:	b082      	sub	sp, #8
 800bee8:	af00      	add	r7, sp, #0
 800beea:	6078      	str	r0, [r7, #4]
 800beec:	6039      	str	r1, [r7, #0]
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	683a      	ldr	r2, [r7, #0]
 800bef2:	4611      	mov	r1, r2
 800bef4:	4618      	mov	r0, r3
 800bef6:	f7ff ff79 	bl	800bdec <_ZNSaIN4tama7ContextEEC1ERKS1_>
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	4618      	mov	r0, r3
 800befe:	3708      	adds	r7, #8
 800bf00:	46bd      	mov	sp, r7
 800bf02:	bd80      	pop	{r7, pc}

0800bf04 <_ZSt4moveIRSaIN4tama7ContextEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800bf04:	b480      	push	{r7}
 800bf06:	b083      	sub	sp, #12
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	4618      	mov	r0, r3
 800bf10:	370c      	adds	r7, #12
 800bf12:	46bd      	mov	sp, r7
 800bf14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf18:	4770      	bx	lr

0800bf1a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama7ContextENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
 800bf1a:	b5b0      	push	{r4, r5, r7, lr}
 800bf1c:	b08a      	sub	sp, #40	; 0x28
 800bf1e:	af00      	add	r7, sp, #0
 800bf20:	60f8      	str	r0, [r7, #12]
 800bf22:	60b9      	str	r1, [r7, #8]
 800bf24:	607a      	str	r2, [r7, #4]
 800bf26:	603b      	str	r3, [r7, #0]
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	2200      	movs	r2, #0
 800bf2c:	601a      	str	r2, [r3, #0]
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 800bf2e:	f107 031c 	add.w	r3, r7, #28
 800bf32:	6839      	ldr	r1, [r7, #0]
 800bf34:	4618      	mov	r0, r3
 800bf36:	f001 f901 	bl	800d13c <_ZNSaISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	      auto __guard = std::__allocate_guarded(__a2);
 800bf3a:	f107 0314 	add.w	r3, r7, #20
 800bf3e:	f107 021c 	add.w	r2, r7, #28
 800bf42:	4611      	mov	r1, r2
 800bf44:	4618      	mov	r0, r3
 800bf46:	f001 f912 	bl	800d16e <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>
	      _Sp_cd_type* __mem = __guard.get();
 800bf4a:	f107 0314 	add.w	r3, r7, #20
 800bf4e:	4618      	mov	r0, r3
 800bf50:	f001 f935 	bl	800d1be <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>
 800bf54:	6278      	str	r0, [r7, #36]	; 0x24
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
 800bf56:	6878      	ldr	r0, [r7, #4]
 800bf58:	f7ff ffb9 	bl	800bece <_ZSt4moveIRNSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 800bf5c:	4602      	mov	r2, r0
 800bf5e:	f107 0320 	add.w	r3, r7, #32
 800bf62:	4611      	mov	r1, r2
 800bf64:	4618      	mov	r0, r3
 800bf66:	f7ff ffbd 	bl	800bee4 <_ZNSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 800bf6a:	f107 0420 	add.w	r4, r7, #32
 800bf6e:	6838      	ldr	r0, [r7, #0]
 800bf70:	f7ff ffc8 	bl	800bf04 <_ZSt4moveIRSaIN4tama7ContextEEEONSt16remove_referenceIT_E4typeEOS5_>
 800bf74:	4605      	mov	r5, r0
 800bf76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf78:	4619      	mov	r1, r3
 800bf7a:	2014      	movs	r0, #20
 800bf7c:	f7f4 fadf 	bl	800053e <_ZnwjPv>
 800bf80:	2800      	cmp	r0, #0
 800bf82:	d004      	beq.n	800bf8e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama7ContextENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x74>
 800bf84:	462b      	mov	r3, r5
 800bf86:	4622      	mov	r2, r4
 800bf88:	68b9      	ldr	r1, [r7, #8]
 800bf8a:	f001 f951 	bl	800d230 <_ZNSt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>
 800bf8e:	f107 0320 	add.w	r3, r7, #32
 800bf92:	4618      	mov	r0, r3
 800bf94:	f7ff f8eb 	bl	800b16e <_ZNSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	      _M_pi = __mem;
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf9c:	601a      	str	r2, [r3, #0]
	      __guard = nullptr;
 800bf9e:	f107 0314 	add.w	r3, r7, #20
 800bfa2:	2100      	movs	r1, #0
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	f001 f971 	bl	800d28c <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>
	      auto __guard = std::__allocate_guarded(__a2);
 800bfaa:	f107 0314 	add.w	r3, r7, #20
 800bfae:	4618      	mov	r0, r3
 800bfb0:	f001 f8f0 	bl	800d194 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 800bfb4:	f107 031c 	add.w	r3, r7, #28
 800bfb8:	4618      	mov	r0, r3
 800bfba:	f001 f8cc 	bl	800d156 <_ZNSaISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
	}
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	3728      	adds	r7, #40	; 0x28
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	bdb0      	pop	{r4, r5, r7, pc}

0800bfc8 <_ZNSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp*) noexcept
 800bfc8:	b480      	push	{r7}
 800bfca:	b083      	sub	sp, #12
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	6078      	str	r0, [r7, #4]
 800bfd0:	6039      	str	r1, [r7, #0]
	{ }
 800bfd2:	bf00      	nop
 800bfd4:	370c      	adds	r7, #12
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfdc:	4770      	bx	lr

0800bfde <_ZNSaIN4tama14InitialLoadingEEC1ERKS1_>:
      allocator(const allocator& __a) throw()
 800bfde:	b580      	push	{r7, lr}
 800bfe0:	b082      	sub	sp, #8
 800bfe2:	af00      	add	r7, sp, #0
 800bfe4:	6078      	str	r0, [r7, #4]
 800bfe6:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 800bfe8:	6839      	ldr	r1, [r7, #0]
 800bfea:	6878      	ldr	r0, [r7, #4]
 800bfec:	f001 f97d 	bl	800d2ea <_ZN9__gnu_cxx13new_allocatorIN4tama14InitialLoadingEEC1ERKS3_>
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	4618      	mov	r0, r3
 800bff4:	3708      	adds	r7, #8
 800bff6:	46bd      	mov	sp, r7
 800bff8:	bd80      	pop	{r7, pc}

0800bffa <_ZSt18__allocate_guardedISaIN4tama14InitialLoadingEEESt15__allocated_ptrIT_ERS4_>:
    __allocate_guarded(_Alloc& __a)
 800bffa:	b580      	push	{r7, lr}
 800bffc:	b082      	sub	sp, #8
 800bffe:	af00      	add	r7, sp, #0
 800c000:	6078      	str	r0, [r7, #4]
 800c002:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 800c004:	2101      	movs	r1, #1
 800c006:	6838      	ldr	r0, [r7, #0]
 800c008:	f001 f97b 	bl	800d302 <_ZNSt16allocator_traitsISaIN4tama14InitialLoadingEEE8allocateERS2_j>
 800c00c:	4603      	mov	r3, r0
 800c00e:	461a      	mov	r2, r3
 800c010:	6839      	ldr	r1, [r7, #0]
 800c012:	6878      	ldr	r0, [r7, #4]
 800c014:	f001 f984 	bl	800d320 <_ZNSt15__allocated_ptrISaIN4tama14InitialLoadingEEEC1ERS2_PS1_>
    }
 800c018:	6878      	ldr	r0, [r7, #4]
 800c01a:	3708      	adds	r7, #8
 800c01c:	46bd      	mov	sp, r7
 800c01e:	bd80      	pop	{r7, pc}

0800c020 <_ZNSt15__allocated_ptrISaIN4tama14InitialLoadingEEED1Ev>:
      ~__allocated_ptr()
 800c020:	b580      	push	{r7, lr}
 800c022:	b082      	sub	sp, #8
 800c024:	af00      	add	r7, sp, #0
 800c026:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	685b      	ldr	r3, [r3, #4]
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d007      	beq.n	800c040 <_ZNSt15__allocated_ptrISaIN4tama14InitialLoadingEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	6818      	ldr	r0, [r3, #0]
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	685b      	ldr	r3, [r3, #4]
 800c038:	2201      	movs	r2, #1
 800c03a:	4619      	mov	r1, r3
 800c03c:	f001 f984 	bl	800d348 <_ZNSt16allocator_traitsISaIN4tama14InitialLoadingEEE10deallocateERS2_PS1_j>
      }
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	4618      	mov	r0, r3
 800c044:	3708      	adds	r7, #8
 800c046:	46bd      	mov	sp, r7
 800c048:	bd80      	pop	{r7, pc}

0800c04a <_ZNSt15__allocated_ptrISaIN4tama14InitialLoadingEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 800c04a:	b580      	push	{r7, lr}
 800c04c:	b082      	sub	sp, #8
 800c04e:	af00      	add	r7, sp, #0
 800c050:	6078      	str	r0, [r7, #4]
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	685b      	ldr	r3, [r3, #4]
 800c056:	4618      	mov	r0, r3
 800c058:	f001 f985 	bl	800d366 <_ZNSt15__allocated_ptrISaIN4tama14InitialLoadingEEE10_S_raw_ptrEPS1_>
 800c05c:	4603      	mov	r3, r0
 800c05e:	4618      	mov	r0, r3
 800c060:	3708      	adds	r7, #8
 800c062:	46bd      	mov	sp, r7
 800c064:	bd80      	pop	{r7, pc}

0800c066 <_ZNSt16allocator_traitsISaIN4tama14InitialLoadingEEE9constructIS1_JRSt10shared_ptrINS0_7ContextEEEEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 800c066:	b580      	push	{r7, lr}
 800c068:	b084      	sub	sp, #16
 800c06a:	af00      	add	r7, sp, #0
 800c06c:	60f8      	str	r0, [r7, #12]
 800c06e:	60b9      	str	r1, [r7, #8]
 800c070:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 800c072:	6878      	ldr	r0, [r7, #4]
 800c074:	f7fe f888 	bl	800a188 <_ZSt7forwardIRSt10shared_ptrIN4tama7ContextEEEOT_RNSt16remove_referenceIS5_E4typeE>
 800c078:	4603      	mov	r3, r0
 800c07a:	461a      	mov	r2, r3
 800c07c:	68b9      	ldr	r1, [r7, #8]
 800c07e:	68f8      	ldr	r0, [r7, #12]
 800c080:	f001 f97c 	bl	800d37c <_ZN9__gnu_cxx13new_allocatorIN4tama14InitialLoadingEE9constructIS2_JRSt10shared_ptrINS1_7ContextEEEEEvPT_DpOT0_>
 800c084:	bf00      	nop
 800c086:	3710      	adds	r7, #16
 800c088:	46bd      	mov	sp, r7
 800c08a:	bd80      	pop	{r7, pc}

0800c08c <_ZNSt15__allocated_ptrISaIN4tama14InitialLoadingEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 800c08c:	b480      	push	{r7}
 800c08e:	b083      	sub	sp, #12
 800c090:	af00      	add	r7, sp, #0
 800c092:	6078      	str	r0, [r7, #4]
 800c094:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	2200      	movs	r2, #0
 800c09a:	605a      	str	r2, [r3, #4]
	return *this;
 800c09c:	687b      	ldr	r3, [r7, #4]
      }
 800c09e:	4618      	mov	r0, r3
 800c0a0:	370c      	adds	r7, #12
 800c0a2:	46bd      	mov	sp, r7
 800c0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a8:	4770      	bx	lr

0800c0aa <_ZSt4moveIRNSt12__shared_ptrIN4tama14InitialLoadingELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
 800c0aa:	b480      	push	{r7}
 800c0ac:	b083      	sub	sp, #12
 800c0ae:	af00      	add	r7, sp, #0
 800c0b0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	370c      	adds	r7, #12
 800c0b8:	46bd      	mov	sp, r7
 800c0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0be:	4770      	bx	lr

0800c0c0 <_ZNSt12__shared_ptrIN4tama14InitialLoadingELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>:
        struct _Deleter
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	b082      	sub	sp, #8
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
 800c0c8:	6039      	str	r1, [r7, #0]
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	683a      	ldr	r2, [r7, #0]
 800c0ce:	4611      	mov	r1, r2
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	f7ff ff84 	bl	800bfde <_ZNSaIN4tama14InitialLoadingEEC1ERKS1_>
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	4618      	mov	r0, r3
 800c0da:	3708      	adds	r7, #8
 800c0dc:	46bd      	mov	sp, r7
 800c0de:	bd80      	pop	{r7, pc}

0800c0e0 <_ZSt4moveIRSaIN4tama14InitialLoadingEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800c0e0:	b480      	push	{r7}
 800c0e2:	b083      	sub	sp, #12
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	370c      	adds	r7, #12
 800c0ee:	46bd      	mov	sp, r7
 800c0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f4:	4770      	bx	lr

0800c0f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama14InitialLoadingENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
 800c0f6:	b5b0      	push	{r4, r5, r7, lr}
 800c0f8:	b08a      	sub	sp, #40	; 0x28
 800c0fa:	af00      	add	r7, sp, #0
 800c0fc:	60f8      	str	r0, [r7, #12]
 800c0fe:	60b9      	str	r1, [r7, #8]
 800c100:	607a      	str	r2, [r7, #4]
 800c102:	603b      	str	r3, [r7, #0]
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	2200      	movs	r2, #0
 800c108:	601a      	str	r2, [r3, #0]
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 800c10a:	f107 031c 	add.w	r3, r7, #28
 800c10e:	6839      	ldr	r1, [r7, #0]
 800c110:	4618      	mov	r0, r3
 800c112:	f001 f94e 	bl	800d3b2 <_ZNSaISt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	      auto __guard = std::__allocate_guarded(__a2);
 800c116:	f107 0314 	add.w	r3, r7, #20
 800c11a:	f107 021c 	add.w	r2, r7, #28
 800c11e:	4611      	mov	r1, r2
 800c120:	4618      	mov	r0, r3
 800c122:	f001 f95f 	bl	800d3e4 <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>
	      _Sp_cd_type* __mem = __guard.get();
 800c126:	f107 0314 	add.w	r3, r7, #20
 800c12a:	4618      	mov	r0, r3
 800c12c:	f001 f982 	bl	800d434 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>
 800c130:	6278      	str	r0, [r7, #36]	; 0x24
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
 800c132:	6878      	ldr	r0, [r7, #4]
 800c134:	f7ff ffb9 	bl	800c0aa <_ZSt4moveIRNSt12__shared_ptrIN4tama14InitialLoadingELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 800c138:	4602      	mov	r2, r0
 800c13a:	f107 0320 	add.w	r3, r7, #32
 800c13e:	4611      	mov	r1, r2
 800c140:	4618      	mov	r0, r3
 800c142:	f7ff ffbd 	bl	800c0c0 <_ZNSt12__shared_ptrIN4tama14InitialLoadingELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 800c146:	f107 0420 	add.w	r4, r7, #32
 800c14a:	6838      	ldr	r0, [r7, #0]
 800c14c:	f7ff ffc8 	bl	800c0e0 <_ZSt4moveIRSaIN4tama14InitialLoadingEEEONSt16remove_referenceIT_E4typeEOS5_>
 800c150:	4605      	mov	r5, r0
 800c152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c154:	4619      	mov	r1, r3
 800c156:	2014      	movs	r0, #20
 800c158:	f7f4 f9f1 	bl	800053e <_ZnwjPv>
 800c15c:	2800      	cmp	r0, #0
 800c15e:	d004      	beq.n	800c16a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama14InitialLoadingENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x74>
 800c160:	462b      	mov	r3, r5
 800c162:	4622      	mov	r2, r4
 800c164:	68b9      	ldr	r1, [r7, #8]
 800c166:	f001 f99f 	bl	800d4a8 <_ZNSt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>
 800c16a:	f107 0320 	add.w	r3, r7, #32
 800c16e:	4618      	mov	r0, r3
 800c170:	f7ff f89f 	bl	800b2b2 <_ZNSt12__shared_ptrIN4tama14InitialLoadingELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	      _M_pi = __mem;
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c178:	601a      	str	r2, [r3, #0]
	      __guard = nullptr;
 800c17a:	f107 0314 	add.w	r3, r7, #20
 800c17e:	2100      	movs	r1, #0
 800c180:	4618      	mov	r0, r3
 800c182:	f001 f9bf 	bl	800d504 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>
	      auto __guard = std::__allocate_guarded(__a2);
 800c186:	f107 0314 	add.w	r3, r7, #20
 800c18a:	4618      	mov	r0, r3
 800c18c:	f001 f93d 	bl	800d40a <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 800c190:	f107 031c 	add.w	r3, r7, #28
 800c194:	4618      	mov	r0, r3
 800c196:	f001 f919 	bl	800d3cc <_ZNSaISt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
	}
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	4618      	mov	r0, r3
 800c19e:	3728      	adds	r7, #40	; 0x28
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	bdb0      	pop	{r4, r5, r7, pc}

0800c1a4 <_ZNSt12__shared_ptrIN4tama14InitialLoadingELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp*) noexcept
 800c1a4:	b480      	push	{r7}
 800c1a6:	b083      	sub	sp, #12
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
 800c1ac:	6039      	str	r1, [r7, #0]
	{ }
 800c1ae:	bf00      	nop
 800c1b0:	370c      	adds	r7, #12
 800c1b2:	46bd      	mov	sp, r7
 800c1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b8:	4770      	bx	lr

0800c1ba <_ZSt12__get_helperILj0EPN4tama7DisplayEJSt14default_deleteIS1_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800c1ba:	b580      	push	{r7, lr}
 800c1bc:	b082      	sub	sp, #8
 800c1be:	af00      	add	r7, sp, #0
 800c1c0:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800c1c2:	6878      	ldr	r0, [r7, #4]
 800c1c4:	f001 f9cd 	bl	800d562 <_ZNSt11_Tuple_implILj0EJPN4tama7DisplayESt14default_deleteIS1_EEE7_M_headERKS5_>
 800c1c8:	4603      	mov	r3, r0
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	3708      	adds	r7, #8
 800c1ce:	46bd      	mov	sp, r7
 800c1d0:	bd80      	pop	{r7, pc}

0800c1d2 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN4tama16Nokia5510DisplayEEEEC1Ev>:
      constexpr _Tuple_impl()
 800c1d2:	b580      	push	{r7, lr}
 800c1d4:	b082      	sub	sp, #8
 800c1d6:	af00      	add	r7, sp, #0
 800c1d8:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800c1da:	6878      	ldr	r0, [r7, #4]
 800c1dc:	f001 f9ce 	bl	800d57c <_ZNSt10_Head_baseILj1ESt14default_deleteIN4tama16Nokia5510DisplayEELb1EEC1Ev>
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	3708      	adds	r7, #8
 800c1e6:	46bd      	mov	sp, r7
 800c1e8:	bd80      	pop	{r7, pc}

0800c1ea <_ZNSt10_Head_baseILj0EPN4tama16Nokia5510DisplayELb0EEC1Ev>:
      constexpr _Head_base()
 800c1ea:	b480      	push	{r7}
 800c1ec:	b083      	sub	sp, #12
 800c1ee:	af00      	add	r7, sp, #0
 800c1f0:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	2200      	movs	r2, #0
 800c1f6:	601a      	str	r2, [r3, #0]
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	370c      	adds	r7, #12
 800c1fe:	46bd      	mov	sp, r7
 800c200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c204:	4770      	bx	lr

0800c206 <_ZNSt10_Head_baseILj0EPN4tama16Nokia5510DisplayELb0EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800c206:	b480      	push	{r7}
 800c208:	b083      	sub	sp, #12
 800c20a:	af00      	add	r7, sp, #0
 800c20c:	6078      	str	r0, [r7, #4]
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	4618      	mov	r0, r3
 800c212:	370c      	adds	r7, #12
 800c214:	46bd      	mov	sp, r7
 800c216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21a:	4770      	bx	lr

0800c21c <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN4tama16Nokia5510DisplayEEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800c21c:	b580      	push	{r7, lr}
 800c21e:	b082      	sub	sp, #8
 800c220:	af00      	add	r7, sp, #0
 800c222:	6078      	str	r0, [r7, #4]
 800c224:	6878      	ldr	r0, [r7, #4]
 800c226:	f001 f9b4 	bl	800d592 <_ZNSt10_Head_baseILj1ESt14default_deleteIN4tama16Nokia5510DisplayEELb1EE7_M_headERS4_>
 800c22a:	4603      	mov	r3, r0
 800c22c:	4618      	mov	r0, r3
 800c22e:	3708      	adds	r7, #8
 800c230:	46bd      	mov	sp, r7
 800c232:	bd80      	pop	{r7, pc}

0800c234 <_ZSt12__get_helperILj0EPN4tama16Nokia5510DisplayEJSt14default_deleteIS1_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800c234:	b580      	push	{r7, lr}
 800c236:	b082      	sub	sp, #8
 800c238:	af00      	add	r7, sp, #0
 800c23a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800c23c:	6878      	ldr	r0, [r7, #4]
 800c23e:	f001 f9b3 	bl	800d5a8 <_ZNSt11_Tuple_implILj0EJPN4tama16Nokia5510DisplayESt14default_deleteIS1_EEE7_M_headERKS5_>
 800c242:	4603      	mov	r3, r0
 800c244:	4618      	mov	r0, r3
 800c246:	3708      	adds	r7, #8
 800c248:	46bd      	mov	sp, r7
 800c24a:	bd80      	pop	{r7, pc}

0800c24c <_ZNSt10_Head_baseILj1ESt14default_deleteIN4tama7DisplayEELb1EEC1IS0_INS1_16Nokia5510DisplayEEEEOT_>:
        constexpr _Head_base(_UHead&& __h)
 800c24c:	b580      	push	{r7, lr}
 800c24e:	b082      	sub	sp, #8
 800c250:	af00      	add	r7, sp, #0
 800c252:	6078      	str	r0, [r7, #4]
 800c254:	6039      	str	r1, [r7, #0]
	: _Head(std::forward<_UHead>(__h)) { }
 800c256:	6838      	ldr	r0, [r7, #0]
 800c258:	f7fe f84a 	bl	800a2f0 <_ZSt7forwardISt14default_deleteIN4tama16Nokia5510DisplayEEEOT_RNSt16remove_referenceIS4_E4typeE>
 800c25c:	4603      	mov	r3, r0
 800c25e:	4619      	mov	r1, r3
 800c260:	6878      	ldr	r0, [r7, #4]
 800c262:	f001 f9ae 	bl	800d5c2 <_ZNSt14default_deleteIN4tama7DisplayEEC1INS0_16Nokia5510DisplayEvEERKS_IT_E>
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	4618      	mov	r0, r3
 800c26a:	3708      	adds	r7, #8
 800c26c:	46bd      	mov	sp, r7
 800c26e:	bd80      	pop	{r7, pc}

0800c270 <_ZN9__gnu_cxx13new_allocatorIN4tama18Stm32TextureLoaderEEC1ERKS3_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 800c270:	b480      	push	{r7}
 800c272:	b083      	sub	sp, #12
 800c274:	af00      	add	r7, sp, #0
 800c276:	6078      	str	r0, [r7, #4]
 800c278:	6039      	str	r1, [r7, #0]
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	4618      	mov	r0, r3
 800c27e:	370c      	adds	r7, #12
 800c280:	46bd      	mov	sp, r7
 800c282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c286:	4770      	bx	lr

0800c288 <_ZNSt16allocator_traitsISaIN4tama18Stm32TextureLoaderEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 800c288:	b580      	push	{r7, lr}
 800c28a:	b082      	sub	sp, #8
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	6078      	str	r0, [r7, #4]
 800c290:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800c292:	2200      	movs	r2, #0
 800c294:	6839      	ldr	r1, [r7, #0]
 800c296:	6878      	ldr	r0, [r7, #4]
 800c298:	f001 f99f 	bl	800d5da <_ZN9__gnu_cxx13new_allocatorIN4tama18Stm32TextureLoaderEE8allocateEjPKv>
 800c29c:	4603      	mov	r3, r0
 800c29e:	4618      	mov	r0, r3
 800c2a0:	3708      	adds	r7, #8
 800c2a2:	46bd      	mov	sp, r7
 800c2a4:	bd80      	pop	{r7, pc}

0800c2a6 <_ZNSt15__allocated_ptrISaIN4tama18Stm32TextureLoaderEEEC1ERS2_PS1_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 800c2a6:	b580      	push	{r7, lr}
 800c2a8:	b084      	sub	sp, #16
 800c2aa:	af00      	add	r7, sp, #0
 800c2ac:	60f8      	str	r0, [r7, #12]
 800c2ae:	60b9      	str	r1, [r7, #8]
 800c2b0:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 800c2b2:	68b8      	ldr	r0, [r7, #8]
 800c2b4:	f001 f9af 	bl	800d616 <_ZSt11__addressofISaIN4tama18Stm32TextureLoaderEEEPT_RS3_>
 800c2b8:	4602      	mov	r2, r0
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	601a      	str	r2, [r3, #0]
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	687a      	ldr	r2, [r7, #4]
 800c2c2:	605a      	str	r2, [r3, #4]
      { }
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	4618      	mov	r0, r3
 800c2c8:	3710      	adds	r7, #16
 800c2ca:	46bd      	mov	sp, r7
 800c2cc:	bd80      	pop	{r7, pc}

0800c2ce <_ZNSt16allocator_traitsISaIN4tama18Stm32TextureLoaderEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800c2ce:	b580      	push	{r7, lr}
 800c2d0:	b084      	sub	sp, #16
 800c2d2:	af00      	add	r7, sp, #0
 800c2d4:	60f8      	str	r0, [r7, #12]
 800c2d6:	60b9      	str	r1, [r7, #8]
 800c2d8:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800c2da:	687a      	ldr	r2, [r7, #4]
 800c2dc:	68b9      	ldr	r1, [r7, #8]
 800c2de:	68f8      	ldr	r0, [r7, #12]
 800c2e0:	f001 f9a4 	bl	800d62c <_ZN9__gnu_cxx13new_allocatorIN4tama18Stm32TextureLoaderEE10deallocateEPS2_j>
 800c2e4:	bf00      	nop
 800c2e6:	3710      	adds	r7, #16
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	bd80      	pop	{r7, pc}

0800c2ec <_ZNSt15__allocated_ptrISaIN4tama18Stm32TextureLoaderEEE10_S_raw_ptrEPS1_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 800c2ec:	b480      	push	{r7}
 800c2ee:	b083      	sub	sp, #12
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	6078      	str	r0, [r7, #4]
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	370c      	adds	r7, #12
 800c2fa:	46bd      	mov	sp, r7
 800c2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c300:	4770      	bx	lr

0800c302 <_ZN9__gnu_cxx13new_allocatorIN4tama18Stm32TextureLoaderEE9constructIS2_JEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800c302:	b580      	push	{r7, lr}
 800c304:	b082      	sub	sp, #8
 800c306:	af00      	add	r7, sp, #0
 800c308:	6078      	str	r0, [r7, #4]
 800c30a:	6039      	str	r1, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800c30c:	683b      	ldr	r3, [r7, #0]
 800c30e:	4619      	mov	r1, r3
 800c310:	2004      	movs	r0, #4
 800c312:	f7f4 f914 	bl	800053e <_ZnwjPv>
 800c316:	4603      	mov	r3, r0
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d004      	beq.n	800c326 <_ZN9__gnu_cxx13new_allocatorIN4tama18Stm32TextureLoaderEE9constructIS2_JEEEvPT_DpOT0_+0x24>
 800c31c:	2200      	movs	r2, #0
 800c31e:	601a      	str	r2, [r3, #0]
 800c320:	4618      	mov	r0, r3
 800c322:	f7fb f827 	bl	8007374 <_ZN4tama18Stm32TextureLoaderC1Ev>
 800c326:	bf00      	nop
 800c328:	3708      	adds	r7, #8
 800c32a:	46bd      	mov	sp, r7
 800c32c:	bd80      	pop	{r7, pc}

0800c32e <_ZNSaISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) throw() { }
 800c32e:	b580      	push	{r7, lr}
 800c330:	b082      	sub	sp, #8
 800c332:	af00      	add	r7, sp, #0
 800c334:	6078      	str	r0, [r7, #4]
 800c336:	6039      	str	r1, [r7, #0]
 800c338:	6878      	ldr	r0, [r7, #4]
 800c33a:	f001 f984 	bl	800d646 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	4618      	mov	r0, r3
 800c342:	3708      	adds	r7, #8
 800c344:	46bd      	mov	sp, r7
 800c346:	bd80      	pop	{r7, pc}

0800c348 <_ZNSaISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>:
      ~allocator() throw() { }
 800c348:	b580      	push	{r7, lr}
 800c34a:	b082      	sub	sp, #8
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	6078      	str	r0, [r7, #4]
 800c350:	6878      	ldr	r0, [r7, #4]
 800c352:	f001 f983 	bl	800d65c <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	4618      	mov	r0, r3
 800c35a:	3708      	adds	r7, #8
 800c35c:	46bd      	mov	sp, r7
 800c35e:	bd80      	pop	{r7, pc}

0800c360 <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>:
    __allocate_guarded(_Alloc& __a)
 800c360:	b580      	push	{r7, lr}
 800c362:	b082      	sub	sp, #8
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
 800c368:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 800c36a:	2101      	movs	r1, #1
 800c36c:	6838      	ldr	r0, [r7, #0]
 800c36e:	f001 f980 	bl	800d672 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>
 800c372:	4603      	mov	r3, r0
 800c374:	461a      	mov	r2, r3
 800c376:	6839      	ldr	r1, [r7, #0]
 800c378:	6878      	ldr	r0, [r7, #4]
 800c37a:	f001 f989 	bl	800d690 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
    }
 800c37e:	6878      	ldr	r0, [r7, #4]
 800c380:	3708      	adds	r7, #8
 800c382:	46bd      	mov	sp, r7
 800c384:	bd80      	pop	{r7, pc}

0800c386 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>:
      ~__allocated_ptr()
 800c386:	b580      	push	{r7, lr}
 800c388:	b082      	sub	sp, #8
 800c38a:	af00      	add	r7, sp, #0
 800c38c:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	685b      	ldr	r3, [r3, #4]
 800c392:	2b00      	cmp	r3, #0
 800c394:	d007      	beq.n	800c3a6 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	6818      	ldr	r0, [r3, #0]
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	685b      	ldr	r3, [r3, #4]
 800c39e:	2201      	movs	r2, #1
 800c3a0:	4619      	mov	r1, r3
 800c3a2:	f001 f989 	bl	800d6b8 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>
      }
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	3708      	adds	r7, #8
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	bd80      	pop	{r7, pc}

0800c3b0 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b082      	sub	sp, #8
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	6078      	str	r0, [r7, #4]
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	685b      	ldr	r3, [r3, #4]
 800c3bc:	4618      	mov	r0, r3
 800c3be:	f001 f98a 	bl	800d6d6 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>
 800c3c2:	4603      	mov	r3, r0
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	3708      	adds	r7, #8
 800c3c8:	46bd      	mov	sp, r7
 800c3ca:	bd80      	pop	{r7, pc}

0800c3cc <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, false>
 800c3cc:	b580      	push	{r7, lr}
 800c3ce:	b082      	sub	sp, #8
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	6078      	str	r0, [r7, #4]
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	f7fe fbd2 	bl	800ab80 <_ZNSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	4618      	mov	r0, r3
 800c3e0:	3708      	adds	r7, #8
 800c3e2:	46bd      	mov	sp, r7
 800c3e4:	bd80      	pop	{r7, pc}

0800c3e6 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama18Stm32TextureLoaderEELb1EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, true> : private _Tp
 800c3e6:	b580      	push	{r7, lr}
 800c3e8:	b082      	sub	sp, #8
 800c3ea:	af00      	add	r7, sp, #0
 800c3ec:	6078      	str	r0, [r7, #4]
 800c3ee:	6878      	ldr	r0, [r7, #4]
 800c3f0:	f7fd ffab 	bl	800a34a <_ZNSaIN4tama18Stm32TextureLoaderEED1Ev>
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	3708      	adds	r7, #8
 800c3fa:	46bd      	mov	sp, r7
 800c3fc:	bd80      	pop	{r7, pc}

0800c3fe <_ZNSt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>:
      class _Impl : _Sp_ebo_helper<0, _Deleter>, _Sp_ebo_helper<1, _Alloc>
 800c3fe:	b580      	push	{r7, lr}
 800c400:	b082      	sub	sp, #8
 800c402:	af00      	add	r7, sp, #0
 800c404:	6078      	str	r0, [r7, #4]
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	3301      	adds	r3, #1
 800c40a:	4618      	mov	r0, r3
 800c40c:	f7ff ffeb 	bl	800c3e6 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama18Stm32TextureLoaderEELb1EED1Ev>
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	4618      	mov	r0, r3
 800c414:	f7ff ffda 	bl	800c3cc <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	4618      	mov	r0, r3
 800c41c:	3708      	adds	r7, #8
 800c41e:	46bd      	mov	sp, r7
 800c420:	bd80      	pop	{r7, pc}
	...

0800c424 <_ZNSt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>:
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 800c424:	b590      	push	{r4, r7, lr}
 800c426:	b087      	sub	sp, #28
 800c428:	af00      	add	r7, sp, #0
 800c42a:	60f8      	str	r0, [r7, #12]
 800c42c:	60b9      	str	r1, [r7, #8]
 800c42e:	607a      	str	r2, [r7, #4]
 800c430:	603b      	str	r3, [r7, #0]
      : _M_impl(__p, std::move(__d), __a) { }
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	4618      	mov	r0, r3
 800c436:	f7f6 f89b 	bl	8002570 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 800c43a:	4a10      	ldr	r2, [pc, #64]	; (800c47c <_ZNSt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_+0x58>)
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	601a      	str	r2, [r3, #0]
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	f103 040c 	add.w	r4, r3, #12
 800c446:	6878      	ldr	r0, [r7, #4]
 800c448:	f7ff f891 	bl	800b56e <_ZSt4moveIRNSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 800c44c:	4602      	mov	r2, r0
 800c44e:	f107 0314 	add.w	r3, r7, #20
 800c452:	4611      	mov	r1, r2
 800c454:	4618      	mov	r0, r3
 800c456:	f7ff f895 	bl	800b584 <_ZNSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 800c45a:	f107 0214 	add.w	r2, r7, #20
 800c45e:	683b      	ldr	r3, [r7, #0]
 800c460:	68b9      	ldr	r1, [r7, #8]
 800c462:	4620      	mov	r0, r4
 800c464:	f001 f942 	bl	800d6ec <_ZNSt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>
 800c468:	f107 0314 	add.w	r3, r7, #20
 800c46c:	4618      	mov	r0, r3
 800c46e:	f7fe fb87 	bl	800ab80 <_ZNSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	4618      	mov	r0, r3
 800c476:	371c      	adds	r7, #28
 800c478:	46bd      	mov	sp, r7
 800c47a:	bd90      	pop	{r4, r7, pc}
 800c47c:	0801b0c8 	.word	0x0801b0c8

0800c480 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 800c480:	b480      	push	{r7}
 800c482:	b083      	sub	sp, #12
 800c484:	af00      	add	r7, sp, #0
 800c486:	6078      	str	r0, [r7, #4]
 800c488:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	2200      	movs	r2, #0
 800c48e:	605a      	str	r2, [r3, #4]
	return *this;
 800c490:	687b      	ldr	r3, [r7, #4]
      }
 800c492:	4618      	mov	r0, r3
 800c494:	370c      	adds	r7, #12
 800c496:	46bd      	mov	sp, r7
 800c498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c49c:	4770      	bx	lr

0800c49e <_ZNSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>:
          void operator()(typename _Alloc::value_type* __ptr)
 800c49e:	b590      	push	{r4, r7, lr}
 800c4a0:	b085      	sub	sp, #20
 800c4a2:	af00      	add	r7, sp, #0
 800c4a4:	6078      	str	r0, [r7, #4]
 800c4a6:	6039      	str	r1, [r7, #0]
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 800c4a8:	6879      	ldr	r1, [r7, #4]
 800c4aa:	f107 0308 	add.w	r3, r7, #8
 800c4ae:	683a      	ldr	r2, [r7, #0]
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	f7ff fef8 	bl	800c2a6 <_ZNSt15__allocated_ptrISaIN4tama18Stm32TextureLoaderEEEC1ERS2_PS1_>
	    allocator_traits<_Alloc>::destroy(_M_alloc, __guard.get());
 800c4b6:	687c      	ldr	r4, [r7, #4]
 800c4b8:	f107 0308 	add.w	r3, r7, #8
 800c4bc:	4618      	mov	r0, r3
 800c4be:	f7ff f82c 	bl	800b51a <_ZNSt15__allocated_ptrISaIN4tama18Stm32TextureLoaderEEE3getEv>
 800c4c2:	4603      	mov	r3, r0
 800c4c4:	4619      	mov	r1, r3
 800c4c6:	4620      	mov	r0, r4
 800c4c8:	f001 f92e 	bl	800d728 <_ZNSt16allocator_traitsISaIN4tama18Stm32TextureLoaderEEE7destroyIS1_EEvRS2_PT_>
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 800c4cc:	f107 0308 	add.w	r3, r7, #8
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	f7ff f80d 	bl	800b4f0 <_ZNSt15__allocated_ptrISaIN4tama18Stm32TextureLoaderEEED1Ev>
          }
 800c4d6:	bf00      	nop
 800c4d8:	3714      	adds	r7, #20
 800c4da:	46bd      	mov	sp, r7
 800c4dc:	bd90      	pop	{r4, r7, pc}

0800c4de <_ZN9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEEC1ERKS3_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 800c4de:	b480      	push	{r7}
 800c4e0:	b083      	sub	sp, #12
 800c4e2:	af00      	add	r7, sp, #0
 800c4e4:	6078      	str	r0, [r7, #4]
 800c4e6:	6039      	str	r1, [r7, #0]
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	370c      	adds	r7, #12
 800c4ee:	46bd      	mov	sp, r7
 800c4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f4:	4770      	bx	lr

0800c4f6 <_ZNSt16allocator_traitsISaIN4tama27Nokia5110DisplayDataManagerEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 800c4f6:	b580      	push	{r7, lr}
 800c4f8:	b082      	sub	sp, #8
 800c4fa:	af00      	add	r7, sp, #0
 800c4fc:	6078      	str	r0, [r7, #4]
 800c4fe:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800c500:	2200      	movs	r2, #0
 800c502:	6839      	ldr	r1, [r7, #0]
 800c504:	6878      	ldr	r0, [r7, #4]
 800c506:	f001 f91c 	bl	800d742 <_ZN9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEE8allocateEjPKv>
 800c50a:	4603      	mov	r3, r0
 800c50c:	4618      	mov	r0, r3
 800c50e:	3708      	adds	r7, #8
 800c510:	46bd      	mov	sp, r7
 800c512:	bd80      	pop	{r7, pc}

0800c514 <_ZNSt15__allocated_ptrISaIN4tama27Nokia5110DisplayDataManagerEEEC1ERS2_PS1_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 800c514:	b580      	push	{r7, lr}
 800c516:	b084      	sub	sp, #16
 800c518:	af00      	add	r7, sp, #0
 800c51a:	60f8      	str	r0, [r7, #12]
 800c51c:	60b9      	str	r1, [r7, #8]
 800c51e:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 800c520:	68b8      	ldr	r0, [r7, #8]
 800c522:	f001 f92f 	bl	800d784 <_ZSt11__addressofISaIN4tama27Nokia5110DisplayDataManagerEEEPT_RS3_>
 800c526:	4602      	mov	r2, r0
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	601a      	str	r2, [r3, #0]
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	687a      	ldr	r2, [r7, #4]
 800c530:	605a      	str	r2, [r3, #4]
      { }
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	4618      	mov	r0, r3
 800c536:	3710      	adds	r7, #16
 800c538:	46bd      	mov	sp, r7
 800c53a:	bd80      	pop	{r7, pc}

0800c53c <_ZNSt16allocator_traitsISaIN4tama27Nokia5110DisplayDataManagerEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800c53c:	b580      	push	{r7, lr}
 800c53e:	b084      	sub	sp, #16
 800c540:	af00      	add	r7, sp, #0
 800c542:	60f8      	str	r0, [r7, #12]
 800c544:	60b9      	str	r1, [r7, #8]
 800c546:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800c548:	687a      	ldr	r2, [r7, #4]
 800c54a:	68b9      	ldr	r1, [r7, #8]
 800c54c:	68f8      	ldr	r0, [r7, #12]
 800c54e:	f001 f924 	bl	800d79a <_ZN9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEE10deallocateEPS2_j>
 800c552:	bf00      	nop
 800c554:	3710      	adds	r7, #16
 800c556:	46bd      	mov	sp, r7
 800c558:	bd80      	pop	{r7, pc}

0800c55a <_ZNSt15__allocated_ptrISaIN4tama27Nokia5110DisplayDataManagerEEE10_S_raw_ptrEPS1_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 800c55a:	b480      	push	{r7}
 800c55c:	b083      	sub	sp, #12
 800c55e:	af00      	add	r7, sp, #0
 800c560:	6078      	str	r0, [r7, #4]
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	4618      	mov	r0, r3
 800c566:	370c      	adds	r7, #12
 800c568:	46bd      	mov	sp, r7
 800c56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56e:	4770      	bx	lr

0800c570 <_ZN4tama18DisplayDataManagerC1Ev>:

#include "../display-data/DisplayData.h"

namespace tama
{
    class DisplayDataManager
 800c570:	b480      	push	{r7}
 800c572:	b083      	sub	sp, #12
 800c574:	af00      	add	r7, sp, #0
 800c576:	6078      	str	r0, [r7, #4]
 800c578:	4a04      	ldr	r2, [pc, #16]	; (800c58c <_ZN4tama18DisplayDataManagerC1Ev+0x1c>)
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	601a      	str	r2, [r3, #0]
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	4618      	mov	r0, r3
 800c582:	370c      	adds	r7, #12
 800c584:	46bd      	mov	sp, r7
 800c586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c58a:	4770      	bx	lr
 800c58c:	0801b13c 	.word	0x0801b13c

0800c590 <_ZN4tama27Nokia5110DisplayDataManagerC1Ev>:
#include "../../Core/ui/display/display-data/DisplayData.h"
#include "../../Configuration/display.config.h"

namespace tama
{
    class Nokia5110DisplayDataManager : public DisplayDataManager
 800c590:	b580      	push	{r7, lr}
 800c592:	b082      	sub	sp, #8
 800c594:	af00      	add	r7, sp, #0
 800c596:	6078      	str	r0, [r7, #4]
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	4618      	mov	r0, r3
 800c59c:	f7ff ffe8 	bl	800c570 <_ZN4tama18DisplayDataManagerC1Ev>
 800c5a0:	4a0f      	ldr	r2, [pc, #60]	; (800c5e0 <_ZN4tama27Nokia5110DisplayDataManagerC1Ev+0x50>)
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	601a      	str	r2, [r3, #0]
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	2208      	movs	r2, #8
 800c5aa:	605a      	str	r2, [r3, #4]
    public:
        DisplayData getActiveSceneDisplayData(std::shared_ptr<Texture>) override;

    private:
        unsigned segmentSize = 8;
        unsigned segmentsInHeight = Config_Display_Height / segmentSize; // 6
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	685b      	ldr	r3, [r3, #4]
 800c5b0:	2230      	movs	r2, #48	; 0x30
 800c5b2:	fbb2 f2f3 	udiv	r2, r2, r3
    class Nokia5110DisplayDataManager : public DisplayDataManager
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	609a      	str	r2, [r3, #8]
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	2254      	movs	r2, #84	; 0x54
 800c5be:	60da      	str	r2, [r3, #12]
        unsigned segmentsInWidth = Config_Display_Width;
        unsigned dataSize = segmentsInHeight * segmentsInWidth;
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	689b      	ldr	r3, [r3, #8]
 800c5c4:	687a      	ldr	r2, [r7, #4]
 800c5c6:	68d2      	ldr	r2, [r2, #12]
 800c5c8:	fb02 f203 	mul.w	r2, r2, r3
    class Nokia5110DisplayDataManager : public DisplayDataManager
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	611a      	str	r2, [r3, #16]
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	2201      	movs	r2, #1
 800c5d4:	615a      	str	r2, [r3, #20]
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	4618      	mov	r0, r3
 800c5da:	3708      	adds	r7, #8
 800c5dc:	46bd      	mov	sp, r7
 800c5de:	bd80      	pop	{r7, pc}
 800c5e0:	0801b174 	.word	0x0801b174

0800c5e4 <_ZN9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEE9constructIS2_JEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800c5e4:	b580      	push	{r7, lr}
 800c5e6:	b082      	sub	sp, #8
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	6078      	str	r0, [r7, #4]
 800c5ec:	6039      	str	r1, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800c5ee:	683b      	ldr	r3, [r7, #0]
 800c5f0:	4619      	mov	r1, r3
 800c5f2:	2018      	movs	r0, #24
 800c5f4:	f7f3 ffa3 	bl	800053e <_ZnwjPv>
 800c5f8:	4601      	mov	r1, r0
 800c5fa:	2900      	cmp	r1, #0
 800c5fc:	d00a      	beq.n	800c614 <_ZN9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEE9constructIS2_JEEEvPT_DpOT0_+0x30>
 800c5fe:	460a      	mov	r2, r1
 800c600:	2300      	movs	r3, #0
 800c602:	6013      	str	r3, [r2, #0]
 800c604:	6053      	str	r3, [r2, #4]
 800c606:	6093      	str	r3, [r2, #8]
 800c608:	60d3      	str	r3, [r2, #12]
 800c60a:	6113      	str	r3, [r2, #16]
 800c60c:	6153      	str	r3, [r2, #20]
 800c60e:	4608      	mov	r0, r1
 800c610:	f7ff ffbe 	bl	800c590 <_ZN4tama27Nokia5110DisplayDataManagerC1Ev>
 800c614:	bf00      	nop
 800c616:	3708      	adds	r7, #8
 800c618:	46bd      	mov	sp, r7
 800c61a:	bd80      	pop	{r7, pc}

0800c61c <_ZNSaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) throw() { }
 800c61c:	b580      	push	{r7, lr}
 800c61e:	b082      	sub	sp, #8
 800c620:	af00      	add	r7, sp, #0
 800c622:	6078      	str	r0, [r7, #4]
 800c624:	6039      	str	r1, [r7, #0]
 800c626:	6878      	ldr	r0, [r7, #4]
 800c628:	f001 f8c4 	bl	800d7b4 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	4618      	mov	r0, r3
 800c630:	3708      	adds	r7, #8
 800c632:	46bd      	mov	sp, r7
 800c634:	bd80      	pop	{r7, pc}

0800c636 <_ZNSaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>:
      ~allocator() throw() { }
 800c636:	b580      	push	{r7, lr}
 800c638:	b082      	sub	sp, #8
 800c63a:	af00      	add	r7, sp, #0
 800c63c:	6078      	str	r0, [r7, #4]
 800c63e:	6878      	ldr	r0, [r7, #4]
 800c640:	f001 f8c3 	bl	800d7ca <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	4618      	mov	r0, r3
 800c648:	3708      	adds	r7, #8
 800c64a:	46bd      	mov	sp, r7
 800c64c:	bd80      	pop	{r7, pc}

0800c64e <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>:
    __allocate_guarded(_Alloc& __a)
 800c64e:	b580      	push	{r7, lr}
 800c650:	b082      	sub	sp, #8
 800c652:	af00      	add	r7, sp, #0
 800c654:	6078      	str	r0, [r7, #4]
 800c656:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 800c658:	2101      	movs	r1, #1
 800c65a:	6838      	ldr	r0, [r7, #0]
 800c65c:	f001 f8c0 	bl	800d7e0 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>
 800c660:	4603      	mov	r3, r0
 800c662:	461a      	mov	r2, r3
 800c664:	6839      	ldr	r1, [r7, #0]
 800c666:	6878      	ldr	r0, [r7, #4]
 800c668:	f001 f8c9 	bl	800d7fe <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
    }
 800c66c:	6878      	ldr	r0, [r7, #4]
 800c66e:	3708      	adds	r7, #8
 800c670:	46bd      	mov	sp, r7
 800c672:	bd80      	pop	{r7, pc}

0800c674 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>:
      ~__allocated_ptr()
 800c674:	b580      	push	{r7, lr}
 800c676:	b082      	sub	sp, #8
 800c678:	af00      	add	r7, sp, #0
 800c67a:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	685b      	ldr	r3, [r3, #4]
 800c680:	2b00      	cmp	r3, #0
 800c682:	d007      	beq.n	800c694 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	6818      	ldr	r0, [r3, #0]
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	685b      	ldr	r3, [r3, #4]
 800c68c:	2201      	movs	r2, #1
 800c68e:	4619      	mov	r1, r3
 800c690:	f001 f8c9 	bl	800d826 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>
      }
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	4618      	mov	r0, r3
 800c698:	3708      	adds	r7, #8
 800c69a:	46bd      	mov	sp, r7
 800c69c:	bd80      	pop	{r7, pc}

0800c69e <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 800c69e:	b580      	push	{r7, lr}
 800c6a0:	b082      	sub	sp, #8
 800c6a2:	af00      	add	r7, sp, #0
 800c6a4:	6078      	str	r0, [r7, #4]
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	685b      	ldr	r3, [r3, #4]
 800c6aa:	4618      	mov	r0, r3
 800c6ac:	f001 f8ca 	bl	800d844 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>
 800c6b0:	4603      	mov	r3, r0
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	3708      	adds	r7, #8
 800c6b6:	46bd      	mov	sp, r7
 800c6b8:	bd80      	pop	{r7, pc}

0800c6ba <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, false>
 800c6ba:	b580      	push	{r7, lr}
 800c6bc:	b082      	sub	sp, #8
 800c6be:	af00      	add	r7, sp, #0
 800c6c0:	6078      	str	r0, [r7, #4]
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	4618      	mov	r0, r3
 800c6c6:	f7fe faee 	bl	800aca6 <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	3708      	adds	r7, #8
 800c6d0:	46bd      	mov	sp, r7
 800c6d2:	bd80      	pop	{r7, pc}

0800c6d4 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama27Nokia5110DisplayDataManagerEELb1EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, true> : private _Tp
 800c6d4:	b580      	push	{r7, lr}
 800c6d6:	b082      	sub	sp, #8
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	6078      	str	r0, [r7, #4]
 800c6dc:	6878      	ldr	r0, [r7, #4]
 800c6de:	f7fd fe78 	bl	800a3d2 <_ZNSaIN4tama27Nokia5110DisplayDataManagerEED1Ev>
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	4618      	mov	r0, r3
 800c6e6:	3708      	adds	r7, #8
 800c6e8:	46bd      	mov	sp, r7
 800c6ea:	bd80      	pop	{r7, pc}

0800c6ec <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>:
      class _Impl : _Sp_ebo_helper<0, _Deleter>, _Sp_ebo_helper<1, _Alloc>
 800c6ec:	b580      	push	{r7, lr}
 800c6ee:	b082      	sub	sp, #8
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	6078      	str	r0, [r7, #4]
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	3301      	adds	r3, #1
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	f7ff ffeb 	bl	800c6d4 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama27Nokia5110DisplayDataManagerEELb1EED1Ev>
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	4618      	mov	r0, r3
 800c702:	f7ff ffda 	bl	800c6ba <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	4618      	mov	r0, r3
 800c70a:	3708      	adds	r7, #8
 800c70c:	46bd      	mov	sp, r7
 800c70e:	bd80      	pop	{r7, pc}

0800c710 <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>:
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 800c710:	b590      	push	{r4, r7, lr}
 800c712:	b087      	sub	sp, #28
 800c714:	af00      	add	r7, sp, #0
 800c716:	60f8      	str	r0, [r7, #12]
 800c718:	60b9      	str	r1, [r7, #8]
 800c71a:	607a      	str	r2, [r7, #4]
 800c71c:	603b      	str	r3, [r7, #0]
      : _M_impl(__p, std::move(__d), __a) { }
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	4618      	mov	r0, r3
 800c722:	f7f5 ff25 	bl	8002570 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 800c726:	4a10      	ldr	r2, [pc, #64]	; (800c768 <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_+0x58>)
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	601a      	str	r2, [r3, #0]
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	f103 040c 	add.w	r4, r3, #12
 800c732:	6878      	ldr	r0, [r7, #4]
 800c734:	f7ff f803 	bl	800b73e <_ZSt4moveIRNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 800c738:	4602      	mov	r2, r0
 800c73a:	f107 0314 	add.w	r3, r7, #20
 800c73e:	4611      	mov	r1, r2
 800c740:	4618      	mov	r0, r3
 800c742:	f7ff f807 	bl	800b754 <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 800c746:	f107 0214 	add.w	r2, r7, #20
 800c74a:	683b      	ldr	r3, [r7, #0]
 800c74c:	68b9      	ldr	r1, [r7, #8]
 800c74e:	4620      	mov	r0, r4
 800c750:	f001 f883 	bl	800d85a <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>
 800c754:	f107 0314 	add.w	r3, r7, #20
 800c758:	4618      	mov	r0, r3
 800c75a:	f7fe faa4 	bl	800aca6 <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	4618      	mov	r0, r3
 800c762:	371c      	adds	r7, #28
 800c764:	46bd      	mov	sp, r7
 800c766:	bd90      	pop	{r4, r7, pc}
 800c768:	0801b0ac 	.word	0x0801b0ac

0800c76c <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 800c76c:	b480      	push	{r7}
 800c76e:	b083      	sub	sp, #12
 800c770:	af00      	add	r7, sp, #0
 800c772:	6078      	str	r0, [r7, #4]
 800c774:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	2200      	movs	r2, #0
 800c77a:	605a      	str	r2, [r3, #4]
	return *this;
 800c77c:	687b      	ldr	r3, [r7, #4]
      }
 800c77e:	4618      	mov	r0, r3
 800c780:	370c      	adds	r7, #12
 800c782:	46bd      	mov	sp, r7
 800c784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c788:	4770      	bx	lr

0800c78a <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>:
          void operator()(typename _Alloc::value_type* __ptr)
 800c78a:	b590      	push	{r4, r7, lr}
 800c78c:	b085      	sub	sp, #20
 800c78e:	af00      	add	r7, sp, #0
 800c790:	6078      	str	r0, [r7, #4]
 800c792:	6039      	str	r1, [r7, #0]
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 800c794:	6879      	ldr	r1, [r7, #4]
 800c796:	f107 0308 	add.w	r3, r7, #8
 800c79a:	683a      	ldr	r2, [r7, #0]
 800c79c:	4618      	mov	r0, r3
 800c79e:	f7ff feb9 	bl	800c514 <_ZNSt15__allocated_ptrISaIN4tama27Nokia5110DisplayDataManagerEEEC1ERS2_PS1_>
	    allocator_traits<_Alloc>::destroy(_M_alloc, __guard.get());
 800c7a2:	687c      	ldr	r4, [r7, #4]
 800c7a4:	f107 0308 	add.w	r3, r7, #8
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	f7fe ff9e 	bl	800b6ea <_ZNSt15__allocated_ptrISaIN4tama27Nokia5110DisplayDataManagerEEE3getEv>
 800c7ae:	4603      	mov	r3, r0
 800c7b0:	4619      	mov	r1, r3
 800c7b2:	4620      	mov	r0, r4
 800c7b4:	f001 f86f 	bl	800d896 <_ZNSt16allocator_traitsISaIN4tama27Nokia5110DisplayDataManagerEEE7destroyIS1_EEvRS2_PT_>
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 800c7b8:	f107 0308 	add.w	r3, r7, #8
 800c7bc:	4618      	mov	r0, r3
 800c7be:	f7fe ff7f 	bl	800b6c0 <_ZNSt15__allocated_ptrISaIN4tama27Nokia5110DisplayDataManagerEEED1Ev>
          }
 800c7c2:	bf00      	nop
 800c7c4:	3714      	adds	r7, #20
 800c7c6:	46bd      	mov	sp, r7
 800c7c8:	bd90      	pop	{r4, r7, pc}

0800c7ca <_ZN9__gnu_cxx13new_allocatorIN4tama16Stm32TimeMonitorEEC1ERKS3_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 800c7ca:	b480      	push	{r7}
 800c7cc:	b083      	sub	sp, #12
 800c7ce:	af00      	add	r7, sp, #0
 800c7d0:	6078      	str	r0, [r7, #4]
 800c7d2:	6039      	str	r1, [r7, #0]
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	4618      	mov	r0, r3
 800c7d8:	370c      	adds	r7, #12
 800c7da:	46bd      	mov	sp, r7
 800c7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e0:	4770      	bx	lr

0800c7e2 <_ZNSt16allocator_traitsISaIN4tama16Stm32TimeMonitorEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 800c7e2:	b580      	push	{r7, lr}
 800c7e4:	b082      	sub	sp, #8
 800c7e6:	af00      	add	r7, sp, #0
 800c7e8:	6078      	str	r0, [r7, #4]
 800c7ea:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800c7ec:	2200      	movs	r2, #0
 800c7ee:	6839      	ldr	r1, [r7, #0]
 800c7f0:	6878      	ldr	r0, [r7, #4]
 800c7f2:	f001 f85d 	bl	800d8b0 <_ZN9__gnu_cxx13new_allocatorIN4tama16Stm32TimeMonitorEE8allocateEjPKv>
 800c7f6:	4603      	mov	r3, r0
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	3708      	adds	r7, #8
 800c7fc:	46bd      	mov	sp, r7
 800c7fe:	bd80      	pop	{r7, pc}

0800c800 <_ZNSt15__allocated_ptrISaIN4tama16Stm32TimeMonitorEEEC1ERS2_PS1_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 800c800:	b580      	push	{r7, lr}
 800c802:	b084      	sub	sp, #16
 800c804:	af00      	add	r7, sp, #0
 800c806:	60f8      	str	r0, [r7, #12]
 800c808:	60b9      	str	r1, [r7, #8]
 800c80a:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 800c80c:	68b8      	ldr	r0, [r7, #8]
 800c80e:	f001 f86d 	bl	800d8ec <_ZSt11__addressofISaIN4tama16Stm32TimeMonitorEEEPT_RS3_>
 800c812:	4602      	mov	r2, r0
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	601a      	str	r2, [r3, #0]
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	687a      	ldr	r2, [r7, #4]
 800c81c:	605a      	str	r2, [r3, #4]
      { }
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	4618      	mov	r0, r3
 800c822:	3710      	adds	r7, #16
 800c824:	46bd      	mov	sp, r7
 800c826:	bd80      	pop	{r7, pc}

0800c828 <_ZNSt16allocator_traitsISaIN4tama16Stm32TimeMonitorEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800c828:	b580      	push	{r7, lr}
 800c82a:	b084      	sub	sp, #16
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	60f8      	str	r0, [r7, #12]
 800c830:	60b9      	str	r1, [r7, #8]
 800c832:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800c834:	687a      	ldr	r2, [r7, #4]
 800c836:	68b9      	ldr	r1, [r7, #8]
 800c838:	68f8      	ldr	r0, [r7, #12]
 800c83a:	f001 f862 	bl	800d902 <_ZN9__gnu_cxx13new_allocatorIN4tama16Stm32TimeMonitorEE10deallocateEPS2_j>
 800c83e:	bf00      	nop
 800c840:	3710      	adds	r7, #16
 800c842:	46bd      	mov	sp, r7
 800c844:	bd80      	pop	{r7, pc}

0800c846 <_ZNSt15__allocated_ptrISaIN4tama16Stm32TimeMonitorEEE10_S_raw_ptrEPS1_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 800c846:	b480      	push	{r7}
 800c848:	b083      	sub	sp, #12
 800c84a:	af00      	add	r7, sp, #0
 800c84c:	6078      	str	r0, [r7, #4]
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	4618      	mov	r0, r3
 800c852:	370c      	adds	r7, #12
 800c854:	46bd      	mov	sp, r7
 800c856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c85a:	4770      	bx	lr

0800c85c <_ZN4tama11TimeMonitorC1Ev>:
#ifndef VPET_TIMEMONITOR_H
#define VPET_TIMEMONITOR_H

namespace tama
{
    class TimeMonitor
 800c85c:	b480      	push	{r7}
 800c85e:	b083      	sub	sp, #12
 800c860:	af00      	add	r7, sp, #0
 800c862:	6078      	str	r0, [r7, #4]
 800c864:	4a04      	ldr	r2, [pc, #16]	; (800c878 <_ZN4tama11TimeMonitorC1Ev+0x1c>)
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	601a      	str	r2, [r3, #0]
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	4618      	mov	r0, r3
 800c86e:	370c      	adds	r7, #12
 800c870:	46bd      	mov	sp, r7
 800c872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c876:	4770      	bx	lr
 800c878:	0801b12c 	.word	0x0801b12c

0800c87c <_ZN4tama16Stm32TimeMonitorC1Ev>:
#include "../../Core/time/time-monitor/TimeMonitor.h"
#include <stm32f4xx_hal.h>

namespace tama
{
    class Stm32TimeMonitor : public TimeMonitor
 800c87c:	b580      	push	{r7, lr}
 800c87e:	b082      	sub	sp, #8
 800c880:	af00      	add	r7, sp, #0
 800c882:	6078      	str	r0, [r7, #4]
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	4618      	mov	r0, r3
 800c888:	f7ff ffe8 	bl	800c85c <_ZN4tama11TimeMonitorC1Ev>
 800c88c:	4a03      	ldr	r2, [pc, #12]	; (800c89c <_ZN4tama16Stm32TimeMonitorC1Ev+0x20>)
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	601a      	str	r2, [r3, #0]
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	4618      	mov	r0, r3
 800c896:	3708      	adds	r7, #8
 800c898:	46bd      	mov	sp, r7
 800c89a:	bd80      	pop	{r7, pc}
 800c89c:	0801b18c 	.word	0x0801b18c

0800c8a0 <_ZN9__gnu_cxx13new_allocatorIN4tama16Stm32TimeMonitorEE9constructIS2_JEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800c8a0:	b580      	push	{r7, lr}
 800c8a2:	b082      	sub	sp, #8
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	6078      	str	r0, [r7, #4]
 800c8a8:	6039      	str	r1, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800c8aa:	683b      	ldr	r3, [r7, #0]
 800c8ac:	4619      	mov	r1, r3
 800c8ae:	2008      	movs	r0, #8
 800c8b0:	f7f3 fe45 	bl	800053e <_ZnwjPv>
 800c8b4:	4603      	mov	r3, r0
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d006      	beq.n	800c8c8 <_ZN9__gnu_cxx13new_allocatorIN4tama16Stm32TimeMonitorEE9constructIS2_JEEEvPT_DpOT0_+0x28>
 800c8ba:	2200      	movs	r2, #0
 800c8bc:	601a      	str	r2, [r3, #0]
 800c8be:	2200      	movs	r2, #0
 800c8c0:	605a      	str	r2, [r3, #4]
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	f7ff ffda 	bl	800c87c <_ZN4tama16Stm32TimeMonitorC1Ev>
 800c8c8:	bf00      	nop
 800c8ca:	3708      	adds	r7, #8
 800c8cc:	46bd      	mov	sp, r7
 800c8ce:	bd80      	pop	{r7, pc}

0800c8d0 <_ZNSaISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) throw() { }
 800c8d0:	b580      	push	{r7, lr}
 800c8d2:	b082      	sub	sp, #8
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	6078      	str	r0, [r7, #4]
 800c8d8:	6039      	str	r1, [r7, #0]
 800c8da:	6878      	ldr	r0, [r7, #4]
 800c8dc:	f001 f81e 	bl	800d91c <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	4618      	mov	r0, r3
 800c8e4:	3708      	adds	r7, #8
 800c8e6:	46bd      	mov	sp, r7
 800c8e8:	bd80      	pop	{r7, pc}

0800c8ea <_ZNSaISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>:
      ~allocator() throw() { }
 800c8ea:	b580      	push	{r7, lr}
 800c8ec:	b082      	sub	sp, #8
 800c8ee:	af00      	add	r7, sp, #0
 800c8f0:	6078      	str	r0, [r7, #4]
 800c8f2:	6878      	ldr	r0, [r7, #4]
 800c8f4:	f001 f81d 	bl	800d932 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	4618      	mov	r0, r3
 800c8fc:	3708      	adds	r7, #8
 800c8fe:	46bd      	mov	sp, r7
 800c900:	bd80      	pop	{r7, pc}

0800c902 <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>:
    __allocate_guarded(_Alloc& __a)
 800c902:	b580      	push	{r7, lr}
 800c904:	b082      	sub	sp, #8
 800c906:	af00      	add	r7, sp, #0
 800c908:	6078      	str	r0, [r7, #4]
 800c90a:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 800c90c:	2101      	movs	r1, #1
 800c90e:	6838      	ldr	r0, [r7, #0]
 800c910:	f001 f81a 	bl	800d948 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>
 800c914:	4603      	mov	r3, r0
 800c916:	461a      	mov	r2, r3
 800c918:	6839      	ldr	r1, [r7, #0]
 800c91a:	6878      	ldr	r0, [r7, #4]
 800c91c:	f001 f823 	bl	800d966 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
    }
 800c920:	6878      	ldr	r0, [r7, #4]
 800c922:	3708      	adds	r7, #8
 800c924:	46bd      	mov	sp, r7
 800c926:	bd80      	pop	{r7, pc}

0800c928 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>:
      ~__allocated_ptr()
 800c928:	b580      	push	{r7, lr}
 800c92a:	b082      	sub	sp, #8
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	685b      	ldr	r3, [r3, #4]
 800c934:	2b00      	cmp	r3, #0
 800c936:	d007      	beq.n	800c948 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	6818      	ldr	r0, [r3, #0]
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	685b      	ldr	r3, [r3, #4]
 800c940:	2201      	movs	r2, #1
 800c942:	4619      	mov	r1, r3
 800c944:	f001 f823 	bl	800d98e <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>
      }
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	4618      	mov	r0, r3
 800c94c:	3708      	adds	r7, #8
 800c94e:	46bd      	mov	sp, r7
 800c950:	bd80      	pop	{r7, pc}

0800c952 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 800c952:	b580      	push	{r7, lr}
 800c954:	b082      	sub	sp, #8
 800c956:	af00      	add	r7, sp, #0
 800c958:	6078      	str	r0, [r7, #4]
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	685b      	ldr	r3, [r3, #4]
 800c95e:	4618      	mov	r0, r3
 800c960:	f001 f824 	bl	800d9ac <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>
 800c964:	4603      	mov	r3, r0
 800c966:	4618      	mov	r0, r3
 800c968:	3708      	adds	r7, #8
 800c96a:	46bd      	mov	sp, r7
 800c96c:	bd80      	pop	{r7, pc}

0800c96e <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama16Stm32TimeMonitorELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, false>
 800c96e:	b580      	push	{r7, lr}
 800c970:	b082      	sub	sp, #8
 800c972:	af00      	add	r7, sp, #0
 800c974:	6078      	str	r0, [r7, #4]
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	4618      	mov	r0, r3
 800c97a:	f7fe fa27 	bl	800adcc <_ZNSt12__shared_ptrIN4tama16Stm32TimeMonitorELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	4618      	mov	r0, r3
 800c982:	3708      	adds	r7, #8
 800c984:	46bd      	mov	sp, r7
 800c986:	bd80      	pop	{r7, pc}

0800c988 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama16Stm32TimeMonitorEELb1EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, true> : private _Tp
 800c988:	b580      	push	{r7, lr}
 800c98a:	b082      	sub	sp, #8
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	6078      	str	r0, [r7, #4]
 800c990:	6878      	ldr	r0, [r7, #4]
 800c992:	f7fd fd62 	bl	800a45a <_ZNSaIN4tama16Stm32TimeMonitorEED1Ev>
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	4618      	mov	r0, r3
 800c99a:	3708      	adds	r7, #8
 800c99c:	46bd      	mov	sp, r7
 800c99e:	bd80      	pop	{r7, pc}

0800c9a0 <_ZNSt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>:
      class _Impl : _Sp_ebo_helper<0, _Deleter>, _Sp_ebo_helper<1, _Alloc>
 800c9a0:	b580      	push	{r7, lr}
 800c9a2:	b082      	sub	sp, #8
 800c9a4:	af00      	add	r7, sp, #0
 800c9a6:	6078      	str	r0, [r7, #4]
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	3301      	adds	r3, #1
 800c9ac:	4618      	mov	r0, r3
 800c9ae:	f7ff ffeb 	bl	800c988 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama16Stm32TimeMonitorEELb1EED1Ev>
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	4618      	mov	r0, r3
 800c9b6:	f7ff ffda 	bl	800c96e <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama16Stm32TimeMonitorELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	4618      	mov	r0, r3
 800c9be:	3708      	adds	r7, #8
 800c9c0:	46bd      	mov	sp, r7
 800c9c2:	bd80      	pop	{r7, pc}

0800c9c4 <_ZNSt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>:
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 800c9c4:	b590      	push	{r4, r7, lr}
 800c9c6:	b087      	sub	sp, #28
 800c9c8:	af00      	add	r7, sp, #0
 800c9ca:	60f8      	str	r0, [r7, #12]
 800c9cc:	60b9      	str	r1, [r7, #8]
 800c9ce:	607a      	str	r2, [r7, #4]
 800c9d0:	603b      	str	r3, [r7, #0]
      : _M_impl(__p, std::move(__d), __a) { }
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	f7f5 fdcb 	bl	8002570 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 800c9da:	4a10      	ldr	r2, [pc, #64]	; (800ca1c <_ZNSt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_+0x58>)
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	601a      	str	r2, [r3, #0]
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	f103 040c 	add.w	r4, r3, #12
 800c9e6:	6878      	ldr	r0, [r7, #4]
 800c9e8:	f7fe ff91 	bl	800b90e <_ZSt4moveIRNSt12__shared_ptrIN4tama16Stm32TimeMonitorELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 800c9ec:	4602      	mov	r2, r0
 800c9ee:	f107 0314 	add.w	r3, r7, #20
 800c9f2:	4611      	mov	r1, r2
 800c9f4:	4618      	mov	r0, r3
 800c9f6:	f7fe ff95 	bl	800b924 <_ZNSt12__shared_ptrIN4tama16Stm32TimeMonitorELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 800c9fa:	f107 0214 	add.w	r2, r7, #20
 800c9fe:	683b      	ldr	r3, [r7, #0]
 800ca00:	68b9      	ldr	r1, [r7, #8]
 800ca02:	4620      	mov	r0, r4
 800ca04:	f000 ffdd 	bl	800d9c2 <_ZNSt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>
 800ca08:	f107 0314 	add.w	r3, r7, #20
 800ca0c:	4618      	mov	r0, r3
 800ca0e:	f7fe f9dd 	bl	800adcc <_ZNSt12__shared_ptrIN4tama16Stm32TimeMonitorELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	4618      	mov	r0, r3
 800ca16:	371c      	adds	r7, #28
 800ca18:	46bd      	mov	sp, r7
 800ca1a:	bd90      	pop	{r4, r7, pc}
 800ca1c:	0801b090 	.word	0x0801b090

0800ca20 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 800ca20:	b480      	push	{r7}
 800ca22:	b083      	sub	sp, #12
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	6078      	str	r0, [r7, #4]
 800ca28:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	2200      	movs	r2, #0
 800ca2e:	605a      	str	r2, [r3, #4]
	return *this;
 800ca30:	687b      	ldr	r3, [r7, #4]
      }
 800ca32:	4618      	mov	r0, r3
 800ca34:	370c      	adds	r7, #12
 800ca36:	46bd      	mov	sp, r7
 800ca38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca3c:	4770      	bx	lr

0800ca3e <_ZNSt12__shared_ptrIN4tama16Stm32TimeMonitorELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>:
          void operator()(typename _Alloc::value_type* __ptr)
 800ca3e:	b590      	push	{r4, r7, lr}
 800ca40:	b085      	sub	sp, #20
 800ca42:	af00      	add	r7, sp, #0
 800ca44:	6078      	str	r0, [r7, #4]
 800ca46:	6039      	str	r1, [r7, #0]
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 800ca48:	6879      	ldr	r1, [r7, #4]
 800ca4a:	f107 0308 	add.w	r3, r7, #8
 800ca4e:	683a      	ldr	r2, [r7, #0]
 800ca50:	4618      	mov	r0, r3
 800ca52:	f7ff fed5 	bl	800c800 <_ZNSt15__allocated_ptrISaIN4tama16Stm32TimeMonitorEEEC1ERS2_PS1_>
	    allocator_traits<_Alloc>::destroy(_M_alloc, __guard.get());
 800ca56:	687c      	ldr	r4, [r7, #4]
 800ca58:	f107 0308 	add.w	r3, r7, #8
 800ca5c:	4618      	mov	r0, r3
 800ca5e:	f7fe ff2c 	bl	800b8ba <_ZNSt15__allocated_ptrISaIN4tama16Stm32TimeMonitorEEE3getEv>
 800ca62:	4603      	mov	r3, r0
 800ca64:	4619      	mov	r1, r3
 800ca66:	4620      	mov	r0, r4
 800ca68:	f000 ffc9 	bl	800d9fe <_ZNSt16allocator_traitsISaIN4tama16Stm32TimeMonitorEEE7destroyIS1_EEvRS2_PT_>
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 800ca6c:	f107 0308 	add.w	r3, r7, #8
 800ca70:	4618      	mov	r0, r3
 800ca72:	f7fe ff0d 	bl	800b890 <_ZNSt15__allocated_ptrISaIN4tama16Stm32TimeMonitorEEED1Ev>
          }
 800ca76:	bf00      	nop
 800ca78:	3714      	adds	r7, #20
 800ca7a:	46bd      	mov	sp, r7
 800ca7c:	bd90      	pop	{r4, r7, pc}

0800ca7e <_ZN9__gnu_cxx13new_allocatorIN4tama25Stm32SoundPlayingStrategyEEC1ERKS3_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 800ca7e:	b480      	push	{r7}
 800ca80:	b083      	sub	sp, #12
 800ca82:	af00      	add	r7, sp, #0
 800ca84:	6078      	str	r0, [r7, #4]
 800ca86:	6039      	str	r1, [r7, #0]
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	370c      	adds	r7, #12
 800ca8e:	46bd      	mov	sp, r7
 800ca90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca94:	4770      	bx	lr

0800ca96 <_ZNSt16allocator_traitsISaIN4tama25Stm32SoundPlayingStrategyEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 800ca96:	b580      	push	{r7, lr}
 800ca98:	b082      	sub	sp, #8
 800ca9a:	af00      	add	r7, sp, #0
 800ca9c:	6078      	str	r0, [r7, #4]
 800ca9e:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800caa0:	2200      	movs	r2, #0
 800caa2:	6839      	ldr	r1, [r7, #0]
 800caa4:	6878      	ldr	r0, [r7, #4]
 800caa6:	f000 ffb7 	bl	800da18 <_ZN9__gnu_cxx13new_allocatorIN4tama25Stm32SoundPlayingStrategyEE8allocateEjPKv>
 800caaa:	4603      	mov	r3, r0
 800caac:	4618      	mov	r0, r3
 800caae:	3708      	adds	r7, #8
 800cab0:	46bd      	mov	sp, r7
 800cab2:	bd80      	pop	{r7, pc}

0800cab4 <_ZNSt15__allocated_ptrISaIN4tama25Stm32SoundPlayingStrategyEEEC1ERS2_PS1_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 800cab4:	b580      	push	{r7, lr}
 800cab6:	b084      	sub	sp, #16
 800cab8:	af00      	add	r7, sp, #0
 800caba:	60f8      	str	r0, [r7, #12]
 800cabc:	60b9      	str	r1, [r7, #8]
 800cabe:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 800cac0:	68b8      	ldr	r0, [r7, #8]
 800cac2:	f000 ffc7 	bl	800da54 <_ZSt11__addressofISaIN4tama25Stm32SoundPlayingStrategyEEEPT_RS3_>
 800cac6:	4602      	mov	r2, r0
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	601a      	str	r2, [r3, #0]
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	687a      	ldr	r2, [r7, #4]
 800cad0:	605a      	str	r2, [r3, #4]
      { }
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	4618      	mov	r0, r3
 800cad6:	3710      	adds	r7, #16
 800cad8:	46bd      	mov	sp, r7
 800cada:	bd80      	pop	{r7, pc}

0800cadc <_ZNSt16allocator_traitsISaIN4tama25Stm32SoundPlayingStrategyEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800cadc:	b580      	push	{r7, lr}
 800cade:	b084      	sub	sp, #16
 800cae0:	af00      	add	r7, sp, #0
 800cae2:	60f8      	str	r0, [r7, #12]
 800cae4:	60b9      	str	r1, [r7, #8]
 800cae6:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800cae8:	687a      	ldr	r2, [r7, #4]
 800caea:	68b9      	ldr	r1, [r7, #8]
 800caec:	68f8      	ldr	r0, [r7, #12]
 800caee:	f000 ffbc 	bl	800da6a <_ZN9__gnu_cxx13new_allocatorIN4tama25Stm32SoundPlayingStrategyEE10deallocateEPS2_j>
 800caf2:	bf00      	nop
 800caf4:	3710      	adds	r7, #16
 800caf6:	46bd      	mov	sp, r7
 800caf8:	bd80      	pop	{r7, pc}

0800cafa <_ZNSt15__allocated_ptrISaIN4tama25Stm32SoundPlayingStrategyEEE10_S_raw_ptrEPS1_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 800cafa:	b480      	push	{r7}
 800cafc:	b083      	sub	sp, #12
 800cafe:	af00      	add	r7, sp, #0
 800cb00:	6078      	str	r0, [r7, #4]
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	4618      	mov	r0, r3
 800cb06:	370c      	adds	r7, #12
 800cb08:	46bd      	mov	sp, r7
 800cb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb0e:	4770      	bx	lr

0800cb10 <_ZN4tama20SoundPlayingStrategyC1Ev>:

#include "tone/Tone.h"

namespace tama
{
    class SoundPlayingStrategy
 800cb10:	b480      	push	{r7}
 800cb12:	b083      	sub	sp, #12
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	6078      	str	r0, [r7, #4]
 800cb18:	4a04      	ldr	r2, [pc, #16]	; (800cb2c <_ZN4tama20SoundPlayingStrategyC1Ev+0x1c>)
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	601a      	str	r2, [r3, #0]
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	4618      	mov	r0, r3
 800cb22:	370c      	adds	r7, #12
 800cb24:	46bd      	mov	sp, r7
 800cb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb2a:	4770      	bx	lr
 800cb2c:	0801b11c 	.word	0x0801b11c

0800cb30 <_ZN4tama25Stm32SoundPlayingStrategyC1Ev>:
    class Stm32SoundPlayingStrategy : public SoundPlayingStrategy
 800cb30:	b580      	push	{r7, lr}
 800cb32:	b082      	sub	sp, #8
 800cb34:	af00      	add	r7, sp, #0
 800cb36:	6078      	str	r0, [r7, #4]
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	f7ff ffe8 	bl	800cb10 <_ZN4tama20SoundPlayingStrategyC1Ev>
 800cb40:	4a03      	ldr	r2, [pc, #12]	; (800cb50 <_ZN4tama25Stm32SoundPlayingStrategyC1Ev+0x20>)
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	601a      	str	r2, [r3, #0]
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	4618      	mov	r0, r3
 800cb4a:	3708      	adds	r7, #8
 800cb4c:	46bd      	mov	sp, r7
 800cb4e:	bd80      	pop	{r7, pc}
 800cb50:	0801b100 	.word	0x0801b100

0800cb54 <_ZN9__gnu_cxx13new_allocatorIN4tama25Stm32SoundPlayingStrategyEE9constructIS2_JEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800cb54:	b580      	push	{r7, lr}
 800cb56:	b082      	sub	sp, #8
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	6078      	str	r0, [r7, #4]
 800cb5c:	6039      	str	r1, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800cb5e:	683b      	ldr	r3, [r7, #0]
 800cb60:	4619      	mov	r1, r3
 800cb62:	2004      	movs	r0, #4
 800cb64:	f7f3 fceb 	bl	800053e <_ZnwjPv>
 800cb68:	4603      	mov	r3, r0
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d004      	beq.n	800cb78 <_ZN9__gnu_cxx13new_allocatorIN4tama25Stm32SoundPlayingStrategyEE9constructIS2_JEEEvPT_DpOT0_+0x24>
 800cb6e:	2200      	movs	r2, #0
 800cb70:	601a      	str	r2, [r3, #0]
 800cb72:	4618      	mov	r0, r3
 800cb74:	f7ff ffdc 	bl	800cb30 <_ZN4tama25Stm32SoundPlayingStrategyC1Ev>
 800cb78:	bf00      	nop
 800cb7a:	3708      	adds	r7, #8
 800cb7c:	46bd      	mov	sp, r7
 800cb7e:	bd80      	pop	{r7, pc}

0800cb80 <_ZNSaISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) throw() { }
 800cb80:	b580      	push	{r7, lr}
 800cb82:	b082      	sub	sp, #8
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	6078      	str	r0, [r7, #4]
 800cb88:	6039      	str	r1, [r7, #0]
 800cb8a:	6878      	ldr	r0, [r7, #4]
 800cb8c:	f000 ff7a 	bl	800da84 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	4618      	mov	r0, r3
 800cb94:	3708      	adds	r7, #8
 800cb96:	46bd      	mov	sp, r7
 800cb98:	bd80      	pop	{r7, pc}

0800cb9a <_ZNSaISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>:
      ~allocator() throw() { }
 800cb9a:	b580      	push	{r7, lr}
 800cb9c:	b082      	sub	sp, #8
 800cb9e:	af00      	add	r7, sp, #0
 800cba0:	6078      	str	r0, [r7, #4]
 800cba2:	6878      	ldr	r0, [r7, #4]
 800cba4:	f000 ff79 	bl	800da9a <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	4618      	mov	r0, r3
 800cbac:	3708      	adds	r7, #8
 800cbae:	46bd      	mov	sp, r7
 800cbb0:	bd80      	pop	{r7, pc}

0800cbb2 <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>:
    __allocate_guarded(_Alloc& __a)
 800cbb2:	b580      	push	{r7, lr}
 800cbb4:	b082      	sub	sp, #8
 800cbb6:	af00      	add	r7, sp, #0
 800cbb8:	6078      	str	r0, [r7, #4]
 800cbba:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 800cbbc:	2101      	movs	r1, #1
 800cbbe:	6838      	ldr	r0, [r7, #0]
 800cbc0:	f000 ff76 	bl	800dab0 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>
 800cbc4:	4603      	mov	r3, r0
 800cbc6:	461a      	mov	r2, r3
 800cbc8:	6839      	ldr	r1, [r7, #0]
 800cbca:	6878      	ldr	r0, [r7, #4]
 800cbcc:	f000 ff7f 	bl	800dace <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
    }
 800cbd0:	6878      	ldr	r0, [r7, #4]
 800cbd2:	3708      	adds	r7, #8
 800cbd4:	46bd      	mov	sp, r7
 800cbd6:	bd80      	pop	{r7, pc}

0800cbd8 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>:
      ~__allocated_ptr()
 800cbd8:	b580      	push	{r7, lr}
 800cbda:	b082      	sub	sp, #8
 800cbdc:	af00      	add	r7, sp, #0
 800cbde:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	685b      	ldr	r3, [r3, #4]
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d007      	beq.n	800cbf8 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	6818      	ldr	r0, [r3, #0]
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	685b      	ldr	r3, [r3, #4]
 800cbf0:	2201      	movs	r2, #1
 800cbf2:	4619      	mov	r1, r3
 800cbf4:	f000 ff7f 	bl	800daf6 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>
      }
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	3708      	adds	r7, #8
 800cbfe:	46bd      	mov	sp, r7
 800cc00:	bd80      	pop	{r7, pc}

0800cc02 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 800cc02:	b580      	push	{r7, lr}
 800cc04:	b082      	sub	sp, #8
 800cc06:	af00      	add	r7, sp, #0
 800cc08:	6078      	str	r0, [r7, #4]
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	685b      	ldr	r3, [r3, #4]
 800cc0e:	4618      	mov	r0, r3
 800cc10:	f000 ff80 	bl	800db14 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>
 800cc14:	4603      	mov	r3, r0
 800cc16:	4618      	mov	r0, r3
 800cc18:	3708      	adds	r7, #8
 800cc1a:	46bd      	mov	sp, r7
 800cc1c:	bd80      	pop	{r7, pc}

0800cc1e <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama25Stm32SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, false>
 800cc1e:	b580      	push	{r7, lr}
 800cc20:	b082      	sub	sp, #8
 800cc22:	af00      	add	r7, sp, #0
 800cc24:	6078      	str	r0, [r7, #4]
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	4618      	mov	r0, r3
 800cc2a:	f7fe f962 	bl	800aef2 <_ZNSt12__shared_ptrIN4tama25Stm32SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	4618      	mov	r0, r3
 800cc32:	3708      	adds	r7, #8
 800cc34:	46bd      	mov	sp, r7
 800cc36:	bd80      	pop	{r7, pc}

0800cc38 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama25Stm32SoundPlayingStrategyEELb1EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, true> : private _Tp
 800cc38:	b580      	push	{r7, lr}
 800cc3a:	b082      	sub	sp, #8
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	6078      	str	r0, [r7, #4]
 800cc40:	6878      	ldr	r0, [r7, #4]
 800cc42:	f7fd fc4e 	bl	800a4e2 <_ZNSaIN4tama25Stm32SoundPlayingStrategyEED1Ev>
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	4618      	mov	r0, r3
 800cc4a:	3708      	adds	r7, #8
 800cc4c:	46bd      	mov	sp, r7
 800cc4e:	bd80      	pop	{r7, pc}

0800cc50 <_ZNSt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>:
      class _Impl : _Sp_ebo_helper<0, _Deleter>, _Sp_ebo_helper<1, _Alloc>
 800cc50:	b580      	push	{r7, lr}
 800cc52:	b082      	sub	sp, #8
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	6078      	str	r0, [r7, #4]
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	3301      	adds	r3, #1
 800cc5c:	4618      	mov	r0, r3
 800cc5e:	f7ff ffeb 	bl	800cc38 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama25Stm32SoundPlayingStrategyEELb1EED1Ev>
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	4618      	mov	r0, r3
 800cc66:	f7ff ffda 	bl	800cc1e <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama25Stm32SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	4618      	mov	r0, r3
 800cc6e:	3708      	adds	r7, #8
 800cc70:	46bd      	mov	sp, r7
 800cc72:	bd80      	pop	{r7, pc}

0800cc74 <_ZNSt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>:
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 800cc74:	b590      	push	{r4, r7, lr}
 800cc76:	b087      	sub	sp, #28
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	60f8      	str	r0, [r7, #12]
 800cc7c:	60b9      	str	r1, [r7, #8]
 800cc7e:	607a      	str	r2, [r7, #4]
 800cc80:	603b      	str	r3, [r7, #0]
      : _M_impl(__p, std::move(__d), __a) { }
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	4618      	mov	r0, r3
 800cc86:	f7f5 fc73 	bl	8002570 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 800cc8a:	4a10      	ldr	r2, [pc, #64]	; (800cccc <_ZNSt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_+0x58>)
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	601a      	str	r2, [r3, #0]
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	f103 040c 	add.w	r4, r3, #12
 800cc96:	6878      	ldr	r0, [r7, #4]
 800cc98:	f7fe ff21 	bl	800bade <_ZSt4moveIRNSt12__shared_ptrIN4tama25Stm32SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 800cc9c:	4602      	mov	r2, r0
 800cc9e:	f107 0314 	add.w	r3, r7, #20
 800cca2:	4611      	mov	r1, r2
 800cca4:	4618      	mov	r0, r3
 800cca6:	f7fe ff25 	bl	800baf4 <_ZNSt12__shared_ptrIN4tama25Stm32SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 800ccaa:	f107 0214 	add.w	r2, r7, #20
 800ccae:	683b      	ldr	r3, [r7, #0]
 800ccb0:	68b9      	ldr	r1, [r7, #8]
 800ccb2:	4620      	mov	r0, r4
 800ccb4:	f000 ff39 	bl	800db2a <_ZNSt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>
 800ccb8:	f107 0314 	add.w	r3, r7, #20
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	f7fe f918 	bl	800aef2 <_ZNSt12__shared_ptrIN4tama25Stm32SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	4618      	mov	r0, r3
 800ccc6:	371c      	adds	r7, #28
 800ccc8:	46bd      	mov	sp, r7
 800ccca:	bd90      	pop	{r4, r7, pc}
 800cccc:	0801b074 	.word	0x0801b074

0800ccd0 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 800ccd0:	b480      	push	{r7}
 800ccd2:	b083      	sub	sp, #12
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	6078      	str	r0, [r7, #4]
 800ccd8:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	2200      	movs	r2, #0
 800ccde:	605a      	str	r2, [r3, #4]
	return *this;
 800cce0:	687b      	ldr	r3, [r7, #4]
      }
 800cce2:	4618      	mov	r0, r3
 800cce4:	370c      	adds	r7, #12
 800cce6:	46bd      	mov	sp, r7
 800cce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccec:	4770      	bx	lr

0800ccee <_ZNSt12__shared_ptrIN4tama25Stm32SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>:
          void operator()(typename _Alloc::value_type* __ptr)
 800ccee:	b590      	push	{r4, r7, lr}
 800ccf0:	b085      	sub	sp, #20
 800ccf2:	af00      	add	r7, sp, #0
 800ccf4:	6078      	str	r0, [r7, #4]
 800ccf6:	6039      	str	r1, [r7, #0]
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 800ccf8:	6879      	ldr	r1, [r7, #4]
 800ccfa:	f107 0308 	add.w	r3, r7, #8
 800ccfe:	683a      	ldr	r2, [r7, #0]
 800cd00:	4618      	mov	r0, r3
 800cd02:	f7ff fed7 	bl	800cab4 <_ZNSt15__allocated_ptrISaIN4tama25Stm32SoundPlayingStrategyEEEC1ERS2_PS1_>
	    allocator_traits<_Alloc>::destroy(_M_alloc, __guard.get());
 800cd06:	687c      	ldr	r4, [r7, #4]
 800cd08:	f107 0308 	add.w	r3, r7, #8
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	f7fe febc 	bl	800ba8a <_ZNSt15__allocated_ptrISaIN4tama25Stm32SoundPlayingStrategyEEE3getEv>
 800cd12:	4603      	mov	r3, r0
 800cd14:	4619      	mov	r1, r3
 800cd16:	4620      	mov	r0, r4
 800cd18:	f000 ff25 	bl	800db66 <_ZNSt16allocator_traitsISaIN4tama25Stm32SoundPlayingStrategyEEE7destroyIS1_EEvRS2_PT_>
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 800cd1c:	f107 0308 	add.w	r3, r7, #8
 800cd20:	4618      	mov	r0, r3
 800cd22:	f7fe fe9d 	bl	800ba60 <_ZNSt15__allocated_ptrISaIN4tama25Stm32SoundPlayingStrategyEEED1Ev>
          }
 800cd26:	bf00      	nop
 800cd28:	3714      	adds	r7, #20
 800cd2a:	46bd      	mov	sp, r7
 800cd2c:	bd90      	pop	{r4, r7, pc}

0800cd2e <_ZN9__gnu_cxx13new_allocatorIN4tama10Stm32InputEEC1ERKS3_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 800cd2e:	b480      	push	{r7}
 800cd30:	b083      	sub	sp, #12
 800cd32:	af00      	add	r7, sp, #0
 800cd34:	6078      	str	r0, [r7, #4]
 800cd36:	6039      	str	r1, [r7, #0]
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	4618      	mov	r0, r3
 800cd3c:	370c      	adds	r7, #12
 800cd3e:	46bd      	mov	sp, r7
 800cd40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd44:	4770      	bx	lr

0800cd46 <_ZNSt16allocator_traitsISaIN4tama10Stm32InputEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 800cd46:	b580      	push	{r7, lr}
 800cd48:	b082      	sub	sp, #8
 800cd4a:	af00      	add	r7, sp, #0
 800cd4c:	6078      	str	r0, [r7, #4]
 800cd4e:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800cd50:	2200      	movs	r2, #0
 800cd52:	6839      	ldr	r1, [r7, #0]
 800cd54:	6878      	ldr	r0, [r7, #4]
 800cd56:	f000 ff13 	bl	800db80 <_ZN9__gnu_cxx13new_allocatorIN4tama10Stm32InputEE8allocateEjPKv>
 800cd5a:	4603      	mov	r3, r0
 800cd5c:	4618      	mov	r0, r3
 800cd5e:	3708      	adds	r7, #8
 800cd60:	46bd      	mov	sp, r7
 800cd62:	bd80      	pop	{r7, pc}

0800cd64 <_ZNSt15__allocated_ptrISaIN4tama10Stm32InputEEEC1ERS2_PS1_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 800cd64:	b580      	push	{r7, lr}
 800cd66:	b084      	sub	sp, #16
 800cd68:	af00      	add	r7, sp, #0
 800cd6a:	60f8      	str	r0, [r7, #12]
 800cd6c:	60b9      	str	r1, [r7, #8]
 800cd6e:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 800cd70:	68b8      	ldr	r0, [r7, #8]
 800cd72:	f000 ff23 	bl	800dbbc <_ZSt11__addressofISaIN4tama10Stm32InputEEEPT_RS3_>
 800cd76:	4602      	mov	r2, r0
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	601a      	str	r2, [r3, #0]
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	687a      	ldr	r2, [r7, #4]
 800cd80:	605a      	str	r2, [r3, #4]
      { }
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	4618      	mov	r0, r3
 800cd86:	3710      	adds	r7, #16
 800cd88:	46bd      	mov	sp, r7
 800cd8a:	bd80      	pop	{r7, pc}

0800cd8c <_ZNSt16allocator_traitsISaIN4tama10Stm32InputEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800cd8c:	b580      	push	{r7, lr}
 800cd8e:	b084      	sub	sp, #16
 800cd90:	af00      	add	r7, sp, #0
 800cd92:	60f8      	str	r0, [r7, #12]
 800cd94:	60b9      	str	r1, [r7, #8]
 800cd96:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800cd98:	687a      	ldr	r2, [r7, #4]
 800cd9a:	68b9      	ldr	r1, [r7, #8]
 800cd9c:	68f8      	ldr	r0, [r7, #12]
 800cd9e:	f000 ff18 	bl	800dbd2 <_ZN9__gnu_cxx13new_allocatorIN4tama10Stm32InputEE10deallocateEPS2_j>
 800cda2:	bf00      	nop
 800cda4:	3710      	adds	r7, #16
 800cda6:	46bd      	mov	sp, r7
 800cda8:	bd80      	pop	{r7, pc}

0800cdaa <_ZNSt15__allocated_ptrISaIN4tama10Stm32InputEEE10_S_raw_ptrEPS1_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 800cdaa:	b480      	push	{r7}
 800cdac:	b083      	sub	sp, #12
 800cdae:	af00      	add	r7, sp, #0
 800cdb0:	6078      	str	r0, [r7, #4]
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	370c      	adds	r7, #12
 800cdb8:	46bd      	mov	sp, r7
 800cdba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdbe:	4770      	bx	lr

0800cdc0 <_ZN4tama5InputC1Ev>:
#include <vector>
#include "../common/observers/OnInput.h"

namespace tama
{
    class Input
 800cdc0:	b580      	push	{r7, lr}
 800cdc2:	b082      	sub	sp, #8
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	6078      	str	r0, [r7, #4]
 800cdc8:	4a06      	ldr	r2, [pc, #24]	; (800cde4 <_ZN4tama5InputC1Ev+0x24>)
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	601a      	str	r2, [r3, #0]
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	3304      	adds	r3, #4
 800cdd2:	4618      	mov	r0, r3
 800cdd4:	f000 ff0a 	bl	800dbec <_ZNSt6vectorISt10shared_ptrIN4tama7OnInputEESaIS3_EEC1Ev>
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	4618      	mov	r0, r3
 800cddc:	3708      	adds	r7, #8
 800cdde:	46bd      	mov	sp, r7
 800cde0:	bd80      	pop	{r7, pc}
 800cde2:	bf00      	nop
 800cde4:	0801b110 	.word	0x0801b110

0800cde8 <_ZN4tama5InputD1Ev>:
 800cde8:	b580      	push	{r7, lr}
 800cdea:	b082      	sub	sp, #8
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	6078      	str	r0, [r7, #4]
 800cdf0:	4a06      	ldr	r2, [pc, #24]	; (800ce0c <_ZN4tama5InputD1Ev+0x24>)
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	601a      	str	r2, [r3, #0]
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	3304      	adds	r3, #4
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	f000 ff03 	bl	800dc06 <_ZNSt6vectorISt10shared_ptrIN4tama7OnInputEESaIS3_EED1Ev>
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	4618      	mov	r0, r3
 800ce04:	3708      	adds	r7, #8
 800ce06:	46bd      	mov	sp, r7
 800ce08:	bd80      	pop	{r7, pc}
 800ce0a:	bf00      	nop
 800ce0c:	0801b110 	.word	0x0801b110

0800ce10 <_ZN4tama10Stm32InputC1Ev>:

#include "../../Core/input/Input.h"

namespace tama
{
    class Stm32Input : public Input
 800ce10:	b580      	push	{r7, lr}
 800ce12:	b082      	sub	sp, #8
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	6078      	str	r0, [r7, #4]
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	4618      	mov	r0, r3
 800ce1c:	f7ff ffd0 	bl	800cdc0 <_ZN4tama5InputC1Ev>
 800ce20:	4a03      	ldr	r2, [pc, #12]	; (800ce30 <_ZN4tama10Stm32InputC1Ev+0x20>)
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	601a      	str	r2, [r3, #0]
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	4618      	mov	r0, r3
 800ce2a:	3708      	adds	r7, #8
 800ce2c:	46bd      	mov	sp, r7
 800ce2e:	bd80      	pop	{r7, pc}
 800ce30:	0801b168 	.word	0x0801b168

0800ce34 <_ZN9__gnu_cxx13new_allocatorIN4tama10Stm32InputEE9constructIS2_JEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800ce34:	b580      	push	{r7, lr}
 800ce36:	b082      	sub	sp, #8
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	6078      	str	r0, [r7, #4]
 800ce3c:	6039      	str	r1, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800ce3e:	683b      	ldr	r3, [r7, #0]
 800ce40:	4619      	mov	r1, r3
 800ce42:	2010      	movs	r0, #16
 800ce44:	f7f3 fb7b 	bl	800053e <_ZnwjPv>
 800ce48:	4601      	mov	r1, r0
 800ce4a:	2900      	cmp	r1, #0
 800ce4c:	d008      	beq.n	800ce60 <_ZN9__gnu_cxx13new_allocatorIN4tama10Stm32InputEE9constructIS2_JEEEvPT_DpOT0_+0x2c>
 800ce4e:	460a      	mov	r2, r1
 800ce50:	2300      	movs	r3, #0
 800ce52:	6013      	str	r3, [r2, #0]
 800ce54:	6053      	str	r3, [r2, #4]
 800ce56:	6093      	str	r3, [r2, #8]
 800ce58:	60d3      	str	r3, [r2, #12]
 800ce5a:	4608      	mov	r0, r1
 800ce5c:	f7ff ffd8 	bl	800ce10 <_ZN4tama10Stm32InputC1Ev>
 800ce60:	bf00      	nop
 800ce62:	3708      	adds	r7, #8
 800ce64:	46bd      	mov	sp, r7
 800ce66:	bd80      	pop	{r7, pc}

0800ce68 <_ZNSaISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) throw() { }
 800ce68:	b580      	push	{r7, lr}
 800ce6a:	b082      	sub	sp, #8
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	6078      	str	r0, [r7, #4]
 800ce70:	6039      	str	r1, [r7, #0]
 800ce72:	6878      	ldr	r0, [r7, #4]
 800ce74:	f000 fee2 	bl	800dc3c <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	4618      	mov	r0, r3
 800ce7c:	3708      	adds	r7, #8
 800ce7e:	46bd      	mov	sp, r7
 800ce80:	bd80      	pop	{r7, pc}

0800ce82 <_ZNSaISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>:
      ~allocator() throw() { }
 800ce82:	b580      	push	{r7, lr}
 800ce84:	b082      	sub	sp, #8
 800ce86:	af00      	add	r7, sp, #0
 800ce88:	6078      	str	r0, [r7, #4]
 800ce8a:	6878      	ldr	r0, [r7, #4]
 800ce8c:	f000 fee1 	bl	800dc52 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	4618      	mov	r0, r3
 800ce94:	3708      	adds	r7, #8
 800ce96:	46bd      	mov	sp, r7
 800ce98:	bd80      	pop	{r7, pc}

0800ce9a <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>:
    __allocate_guarded(_Alloc& __a)
 800ce9a:	b580      	push	{r7, lr}
 800ce9c:	b082      	sub	sp, #8
 800ce9e:	af00      	add	r7, sp, #0
 800cea0:	6078      	str	r0, [r7, #4]
 800cea2:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 800cea4:	2101      	movs	r1, #1
 800cea6:	6838      	ldr	r0, [r7, #0]
 800cea8:	f000 fede 	bl	800dc68 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>
 800ceac:	4603      	mov	r3, r0
 800ceae:	461a      	mov	r2, r3
 800ceb0:	6839      	ldr	r1, [r7, #0]
 800ceb2:	6878      	ldr	r0, [r7, #4]
 800ceb4:	f000 fee7 	bl	800dc86 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
    }
 800ceb8:	6878      	ldr	r0, [r7, #4]
 800ceba:	3708      	adds	r7, #8
 800cebc:	46bd      	mov	sp, r7
 800cebe:	bd80      	pop	{r7, pc}

0800cec0 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>:
      ~__allocated_ptr()
 800cec0:	b580      	push	{r7, lr}
 800cec2:	b082      	sub	sp, #8
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	685b      	ldr	r3, [r3, #4]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d007      	beq.n	800cee0 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	6818      	ldr	r0, [r3, #0]
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	685b      	ldr	r3, [r3, #4]
 800ced8:	2201      	movs	r2, #1
 800ceda:	4619      	mov	r1, r3
 800cedc:	f000 fee7 	bl	800dcae <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>
      }
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	4618      	mov	r0, r3
 800cee4:	3708      	adds	r7, #8
 800cee6:	46bd      	mov	sp, r7
 800cee8:	bd80      	pop	{r7, pc}

0800ceea <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 800ceea:	b580      	push	{r7, lr}
 800ceec:	b082      	sub	sp, #8
 800ceee:	af00      	add	r7, sp, #0
 800cef0:	6078      	str	r0, [r7, #4]
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	685b      	ldr	r3, [r3, #4]
 800cef6:	4618      	mov	r0, r3
 800cef8:	f000 fee8 	bl	800dccc <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>
 800cefc:	4603      	mov	r3, r0
 800cefe:	4618      	mov	r0, r3
 800cf00:	3708      	adds	r7, #8
 800cf02:	46bd      	mov	sp, r7
 800cf04:	bd80      	pop	{r7, pc}

0800cf06 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama10Stm32InputELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, false>
 800cf06:	b580      	push	{r7, lr}
 800cf08:	b082      	sub	sp, #8
 800cf0a:	af00      	add	r7, sp, #0
 800cf0c:	6078      	str	r0, [r7, #4]
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	4618      	mov	r0, r3
 800cf12:	f7fe f881 	bl	800b018 <_ZNSt12__shared_ptrIN4tama10Stm32InputELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	4618      	mov	r0, r3
 800cf1a:	3708      	adds	r7, #8
 800cf1c:	46bd      	mov	sp, r7
 800cf1e:	bd80      	pop	{r7, pc}

0800cf20 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama10Stm32InputEELb1EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, true> : private _Tp
 800cf20:	b580      	push	{r7, lr}
 800cf22:	b082      	sub	sp, #8
 800cf24:	af00      	add	r7, sp, #0
 800cf26:	6078      	str	r0, [r7, #4]
 800cf28:	6878      	ldr	r0, [r7, #4]
 800cf2a:	f7fd fb1e 	bl	800a56a <_ZNSaIN4tama10Stm32InputEED1Ev>
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	4618      	mov	r0, r3
 800cf32:	3708      	adds	r7, #8
 800cf34:	46bd      	mov	sp, r7
 800cf36:	bd80      	pop	{r7, pc}

0800cf38 <_ZNSt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>:
      class _Impl : _Sp_ebo_helper<0, _Deleter>, _Sp_ebo_helper<1, _Alloc>
 800cf38:	b580      	push	{r7, lr}
 800cf3a:	b082      	sub	sp, #8
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	6078      	str	r0, [r7, #4]
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	3301      	adds	r3, #1
 800cf44:	4618      	mov	r0, r3
 800cf46:	f7ff ffeb 	bl	800cf20 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama10Stm32InputEELb1EED1Ev>
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	4618      	mov	r0, r3
 800cf4e:	f7ff ffda 	bl	800cf06 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama10Stm32InputELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	4618      	mov	r0, r3
 800cf56:	3708      	adds	r7, #8
 800cf58:	46bd      	mov	sp, r7
 800cf5a:	bd80      	pop	{r7, pc}

0800cf5c <_ZNSt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>:
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 800cf5c:	b590      	push	{r4, r7, lr}
 800cf5e:	b087      	sub	sp, #28
 800cf60:	af00      	add	r7, sp, #0
 800cf62:	60f8      	str	r0, [r7, #12]
 800cf64:	60b9      	str	r1, [r7, #8]
 800cf66:	607a      	str	r2, [r7, #4]
 800cf68:	603b      	str	r3, [r7, #0]
      : _M_impl(__p, std::move(__d), __a) { }
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	4618      	mov	r0, r3
 800cf6e:	f7f5 faff 	bl	8002570 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 800cf72:	4a10      	ldr	r2, [pc, #64]	; (800cfb4 <_ZNSt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_+0x58>)
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	601a      	str	r2, [r3, #0]
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	f103 040c 	add.w	r4, r3, #12
 800cf7e:	6878      	ldr	r0, [r7, #4]
 800cf80:	f7fe fe95 	bl	800bcae <_ZSt4moveIRNSt12__shared_ptrIN4tama10Stm32InputELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 800cf84:	4602      	mov	r2, r0
 800cf86:	f107 0314 	add.w	r3, r7, #20
 800cf8a:	4611      	mov	r1, r2
 800cf8c:	4618      	mov	r0, r3
 800cf8e:	f7fe fe99 	bl	800bcc4 <_ZNSt12__shared_ptrIN4tama10Stm32InputELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 800cf92:	f107 0214 	add.w	r2, r7, #20
 800cf96:	683b      	ldr	r3, [r7, #0]
 800cf98:	68b9      	ldr	r1, [r7, #8]
 800cf9a:	4620      	mov	r0, r4
 800cf9c:	f000 fea1 	bl	800dce2 <_ZNSt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>
 800cfa0:	f107 0314 	add.w	r3, r7, #20
 800cfa4:	4618      	mov	r0, r3
 800cfa6:	f7fe f837 	bl	800b018 <_ZNSt12__shared_ptrIN4tama10Stm32InputELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	4618      	mov	r0, r3
 800cfae:	371c      	adds	r7, #28
 800cfb0:	46bd      	mov	sp, r7
 800cfb2:	bd90      	pop	{r4, r7, pc}
 800cfb4:	0801b058 	.word	0x0801b058

0800cfb8 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 800cfb8:	b480      	push	{r7}
 800cfba:	b083      	sub	sp, #12
 800cfbc:	af00      	add	r7, sp, #0
 800cfbe:	6078      	str	r0, [r7, #4]
 800cfc0:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	2200      	movs	r2, #0
 800cfc6:	605a      	str	r2, [r3, #4]
	return *this;
 800cfc8:	687b      	ldr	r3, [r7, #4]
      }
 800cfca:	4618      	mov	r0, r3
 800cfcc:	370c      	adds	r7, #12
 800cfce:	46bd      	mov	sp, r7
 800cfd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd4:	4770      	bx	lr

0800cfd6 <_ZNSt12__shared_ptrIN4tama10Stm32InputELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>:
          void operator()(typename _Alloc::value_type* __ptr)
 800cfd6:	b590      	push	{r4, r7, lr}
 800cfd8:	b085      	sub	sp, #20
 800cfda:	af00      	add	r7, sp, #0
 800cfdc:	6078      	str	r0, [r7, #4]
 800cfde:	6039      	str	r1, [r7, #0]
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 800cfe0:	6879      	ldr	r1, [r7, #4]
 800cfe2:	f107 0308 	add.w	r3, r7, #8
 800cfe6:	683a      	ldr	r2, [r7, #0]
 800cfe8:	4618      	mov	r0, r3
 800cfea:	f7ff febb 	bl	800cd64 <_ZNSt15__allocated_ptrISaIN4tama10Stm32InputEEEC1ERS2_PS1_>
	    allocator_traits<_Alloc>::destroy(_M_alloc, __guard.get());
 800cfee:	687c      	ldr	r4, [r7, #4]
 800cff0:	f107 0308 	add.w	r3, r7, #8
 800cff4:	4618      	mov	r0, r3
 800cff6:	f7fe fe30 	bl	800bc5a <_ZNSt15__allocated_ptrISaIN4tama10Stm32InputEEE3getEv>
 800cffa:	4603      	mov	r3, r0
 800cffc:	4619      	mov	r1, r3
 800cffe:	4620      	mov	r0, r4
 800d000:	f000 fe8d 	bl	800dd1e <_ZNSt16allocator_traitsISaIN4tama10Stm32InputEEE7destroyIS1_EEvRS2_PT_>
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 800d004:	f107 0308 	add.w	r3, r7, #8
 800d008:	4618      	mov	r0, r3
 800d00a:	f7fe fe11 	bl	800bc30 <_ZNSt15__allocated_ptrISaIN4tama10Stm32InputEEED1Ev>
          }
 800d00e:	bf00      	nop
 800d010:	3714      	adds	r7, #20
 800d012:	46bd      	mov	sp, r7
 800d014:	bd90      	pop	{r4, r7, pc}

0800d016 <_ZN9__gnu_cxx13new_allocatorIN4tama7ContextEEC1ERKS3_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 800d016:	b480      	push	{r7}
 800d018:	b083      	sub	sp, #12
 800d01a:	af00      	add	r7, sp, #0
 800d01c:	6078      	str	r0, [r7, #4]
 800d01e:	6039      	str	r1, [r7, #0]
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	4618      	mov	r0, r3
 800d024:	370c      	adds	r7, #12
 800d026:	46bd      	mov	sp, r7
 800d028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d02c:	4770      	bx	lr

0800d02e <_ZNSt16allocator_traitsISaIN4tama7ContextEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 800d02e:	b580      	push	{r7, lr}
 800d030:	b082      	sub	sp, #8
 800d032:	af00      	add	r7, sp, #0
 800d034:	6078      	str	r0, [r7, #4]
 800d036:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800d038:	2200      	movs	r2, #0
 800d03a:	6839      	ldr	r1, [r7, #0]
 800d03c:	6878      	ldr	r0, [r7, #4]
 800d03e:	f000 fe7b 	bl	800dd38 <_ZN9__gnu_cxx13new_allocatorIN4tama7ContextEE8allocateEjPKv>
 800d042:	4603      	mov	r3, r0
 800d044:	4618      	mov	r0, r3
 800d046:	3708      	adds	r7, #8
 800d048:	46bd      	mov	sp, r7
 800d04a:	bd80      	pop	{r7, pc}

0800d04c <_ZNSt15__allocated_ptrISaIN4tama7ContextEEEC1ERS2_PS1_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 800d04c:	b580      	push	{r7, lr}
 800d04e:	b084      	sub	sp, #16
 800d050:	af00      	add	r7, sp, #0
 800d052:	60f8      	str	r0, [r7, #12]
 800d054:	60b9      	str	r1, [r7, #8]
 800d056:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 800d058:	68b8      	ldr	r0, [r7, #8]
 800d05a:	f000 fe8b 	bl	800dd74 <_ZSt11__addressofISaIN4tama7ContextEEEPT_RS3_>
 800d05e:	4602      	mov	r2, r0
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	601a      	str	r2, [r3, #0]
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	687a      	ldr	r2, [r7, #4]
 800d068:	605a      	str	r2, [r3, #4]
      { }
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	4618      	mov	r0, r3
 800d06e:	3710      	adds	r7, #16
 800d070:	46bd      	mov	sp, r7
 800d072:	bd80      	pop	{r7, pc}

0800d074 <_ZNSt16allocator_traitsISaIN4tama7ContextEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800d074:	b580      	push	{r7, lr}
 800d076:	b084      	sub	sp, #16
 800d078:	af00      	add	r7, sp, #0
 800d07a:	60f8      	str	r0, [r7, #12]
 800d07c:	60b9      	str	r1, [r7, #8]
 800d07e:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800d080:	687a      	ldr	r2, [r7, #4]
 800d082:	68b9      	ldr	r1, [r7, #8]
 800d084:	68f8      	ldr	r0, [r7, #12]
 800d086:	f000 fe80 	bl	800dd8a <_ZN9__gnu_cxx13new_allocatorIN4tama7ContextEE10deallocateEPS2_j>
 800d08a:	bf00      	nop
 800d08c:	3710      	adds	r7, #16
 800d08e:	46bd      	mov	sp, r7
 800d090:	bd80      	pop	{r7, pc}

0800d092 <_ZNSt15__allocated_ptrISaIN4tama7ContextEEE10_S_raw_ptrEPS1_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 800d092:	b480      	push	{r7}
 800d094:	b083      	sub	sp, #12
 800d096:	af00      	add	r7, sp, #0
 800d098:	6078      	str	r0, [r7, #4]
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	4618      	mov	r0, r3
 800d09e:	370c      	adds	r7, #12
 800d0a0:	46bd      	mov	sp, r7
 800d0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a6:	4770      	bx	lr

0800d0a8 <_ZN9__gnu_cxx13new_allocatorIN4tama7ContextEE9constructIS2_JRSt10shared_ptrINS1_13TextureLoaderEERS5_INS1_5InputEES5_INS1_11SoundPlayerEEEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800d0a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d0aa:	b08b      	sub	sp, #44	; 0x2c
 800d0ac:	af00      	add	r7, sp, #0
 800d0ae:	60f8      	str	r0, [r7, #12]
 800d0b0:	60b9      	str	r1, [r7, #8]
 800d0b2:	607a      	str	r2, [r7, #4]
 800d0b4:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800d0b6:	6878      	ldr	r0, [r7, #4]
 800d0b8:	f7fd f81c 	bl	800a0f4 <_ZSt7forwardIRSt10shared_ptrIN4tama13TextureLoaderEEEOT_RNSt16remove_referenceIS5_E4typeE>
 800d0bc:	4602      	mov	r2, r0
 800d0be:	f107 0310 	add.w	r3, r7, #16
 800d0c2:	4611      	mov	r1, r2
 800d0c4:	4618      	mov	r0, r3
 800d0c6:	f7f3 ff87 	bl	8000fd8 <_ZNSt10shared_ptrIN4tama13TextureLoaderEEC1ERKS2_>
 800d0ca:	f107 0410 	add.w	r4, r7, #16
 800d0ce:	6838      	ldr	r0, [r7, #0]
 800d0d0:	f7fd f81b 	bl	800a10a <_ZSt7forwardIRSt10shared_ptrIN4tama5InputEEEOT_RNSt16remove_referenceIS5_E4typeE>
 800d0d4:	4602      	mov	r2, r0
 800d0d6:	f107 0318 	add.w	r3, r7, #24
 800d0da:	4611      	mov	r1, r2
 800d0dc:	4618      	mov	r0, r3
 800d0de:	f7f3 ffa1 	bl	8001024 <_ZNSt10shared_ptrIN4tama5InputEEC1ERKS2_>
 800d0e2:	f107 0518 	add.w	r5, r7, #24
 800d0e6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800d0e8:	f7fd f81a 	bl	800a120 <_ZSt7forwardISt10shared_ptrIN4tama11SoundPlayerEEEOT_RNSt16remove_referenceIS4_E4typeE>
 800d0ec:	4602      	mov	r2, r0
 800d0ee:	f107 0320 	add.w	r3, r7, #32
 800d0f2:	4611      	mov	r1, r2
 800d0f4:	4618      	mov	r0, r3
 800d0f6:	f000 fe60 	bl	800ddba <_ZNSt10shared_ptrIN4tama11SoundPlayerEEC1EOS2_>
 800d0fa:	f107 0620 	add.w	r6, r7, #32
 800d0fe:	68bb      	ldr	r3, [r7, #8]
 800d100:	4619      	mov	r1, r3
 800d102:	2040      	movs	r0, #64	; 0x40
 800d104:	f7f3 fa1b 	bl	800053e <_ZnwjPv>
 800d108:	2800      	cmp	r0, #0
 800d10a:	d004      	beq.n	800d116 <_ZN9__gnu_cxx13new_allocatorIN4tama7ContextEE9constructIS2_JRSt10shared_ptrINS1_13TextureLoaderEERS5_INS1_5InputEES5_INS1_11SoundPlayerEEEEEvPT_DpOT0_+0x6e>
 800d10c:	4633      	mov	r3, r6
 800d10e:	462a      	mov	r2, r5
 800d110:	4621      	mov	r1, r4
 800d112:	f7f3 ffbd 	bl	8001090 <_ZN4tama7ContextC1ESt10shared_ptrINS_13TextureLoaderEES1_INS_5InputEES1_INS_11SoundPlayerEE>
 800d116:	f107 0320 	add.w	r3, r7, #32
 800d11a:	4618      	mov	r0, r3
 800d11c:	f7f6 fae3 	bl	80036e6 <_ZNSt10shared_ptrIN4tama11SoundPlayerEED1Ev>
 800d120:	f107 0318 	add.w	r3, r7, #24
 800d124:	4618      	mov	r0, r3
 800d126:	f7f4 fdce 	bl	8001cc6 <_ZNSt10shared_ptrIN4tama5InputEED1Ev>
 800d12a:	f107 0310 	add.w	r3, r7, #16
 800d12e:	4618      	mov	r0, r3
 800d130:	f7f6 fc08 	bl	8003944 <_ZNSt10shared_ptrIN4tama13TextureLoaderEED1Ev>
 800d134:	bf00      	nop
 800d136:	372c      	adds	r7, #44	; 0x2c
 800d138:	46bd      	mov	sp, r7
 800d13a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d13c <_ZNSaISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) throw() { }
 800d13c:	b580      	push	{r7, lr}
 800d13e:	b082      	sub	sp, #8
 800d140:	af00      	add	r7, sp, #0
 800d142:	6078      	str	r0, [r7, #4]
 800d144:	6039      	str	r1, [r7, #0]
 800d146:	6878      	ldr	r0, [r7, #4]
 800d148:	f000 fe4a 	bl	800dde0 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	4618      	mov	r0, r3
 800d150:	3708      	adds	r7, #8
 800d152:	46bd      	mov	sp, r7
 800d154:	bd80      	pop	{r7, pc}

0800d156 <_ZNSaISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>:
      ~allocator() throw() { }
 800d156:	b580      	push	{r7, lr}
 800d158:	b082      	sub	sp, #8
 800d15a:	af00      	add	r7, sp, #0
 800d15c:	6078      	str	r0, [r7, #4]
 800d15e:	6878      	ldr	r0, [r7, #4]
 800d160:	f000 fe49 	bl	800ddf6 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	4618      	mov	r0, r3
 800d168:	3708      	adds	r7, #8
 800d16a:	46bd      	mov	sp, r7
 800d16c:	bd80      	pop	{r7, pc}

0800d16e <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>:
    __allocate_guarded(_Alloc& __a)
 800d16e:	b580      	push	{r7, lr}
 800d170:	b082      	sub	sp, #8
 800d172:	af00      	add	r7, sp, #0
 800d174:	6078      	str	r0, [r7, #4]
 800d176:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 800d178:	2101      	movs	r1, #1
 800d17a:	6838      	ldr	r0, [r7, #0]
 800d17c:	f000 fe46 	bl	800de0c <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>
 800d180:	4603      	mov	r3, r0
 800d182:	461a      	mov	r2, r3
 800d184:	6839      	ldr	r1, [r7, #0]
 800d186:	6878      	ldr	r0, [r7, #4]
 800d188:	f000 fe4f 	bl	800de2a <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
    }
 800d18c:	6878      	ldr	r0, [r7, #4]
 800d18e:	3708      	adds	r7, #8
 800d190:	46bd      	mov	sp, r7
 800d192:	bd80      	pop	{r7, pc}

0800d194 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>:
      ~__allocated_ptr()
 800d194:	b580      	push	{r7, lr}
 800d196:	b082      	sub	sp, #8
 800d198:	af00      	add	r7, sp, #0
 800d19a:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	685b      	ldr	r3, [r3, #4]
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d007      	beq.n	800d1b4 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	6818      	ldr	r0, [r3, #0]
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	685b      	ldr	r3, [r3, #4]
 800d1ac:	2201      	movs	r2, #1
 800d1ae:	4619      	mov	r1, r3
 800d1b0:	f000 fe4f 	bl	800de52 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>
      }
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	4618      	mov	r0, r3
 800d1b8:	3708      	adds	r7, #8
 800d1ba:	46bd      	mov	sp, r7
 800d1bc:	bd80      	pop	{r7, pc}

0800d1be <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 800d1be:	b580      	push	{r7, lr}
 800d1c0:	b082      	sub	sp, #8
 800d1c2:	af00      	add	r7, sp, #0
 800d1c4:	6078      	str	r0, [r7, #4]
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	685b      	ldr	r3, [r3, #4]
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	f000 fe50 	bl	800de70 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>
 800d1d0:	4603      	mov	r3, r0
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	3708      	adds	r7, #8
 800d1d6:	46bd      	mov	sp, r7
 800d1d8:	bd80      	pop	{r7, pc}

0800d1da <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, false>
 800d1da:	b580      	push	{r7, lr}
 800d1dc:	b082      	sub	sp, #8
 800d1de:	af00      	add	r7, sp, #0
 800d1e0:	6078      	str	r0, [r7, #4]
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	4618      	mov	r0, r3
 800d1e6:	f7fd ffc2 	bl	800b16e <_ZNSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	4618      	mov	r0, r3
 800d1ee:	3708      	adds	r7, #8
 800d1f0:	46bd      	mov	sp, r7
 800d1f2:	bd80      	pop	{r7, pc}

0800d1f4 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama7ContextEELb1EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, true> : private _Tp
 800d1f4:	b580      	push	{r7, lr}
 800d1f6:	b082      	sub	sp, #8
 800d1f8:	af00      	add	r7, sp, #0
 800d1fa:	6078      	str	r0, [r7, #4]
 800d1fc:	6878      	ldr	r0, [r7, #4]
 800d1fe:	f7fd fa10 	bl	800a622 <_ZNSaIN4tama7ContextEED1Ev>
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	4618      	mov	r0, r3
 800d206:	3708      	adds	r7, #8
 800d208:	46bd      	mov	sp, r7
 800d20a:	bd80      	pop	{r7, pc}

0800d20c <_ZNSt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>:
      class _Impl : _Sp_ebo_helper<0, _Deleter>, _Sp_ebo_helper<1, _Alloc>
 800d20c:	b580      	push	{r7, lr}
 800d20e:	b082      	sub	sp, #8
 800d210:	af00      	add	r7, sp, #0
 800d212:	6078      	str	r0, [r7, #4]
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	3301      	adds	r3, #1
 800d218:	4618      	mov	r0, r3
 800d21a:	f7ff ffeb 	bl	800d1f4 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama7ContextEELb1EED1Ev>
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	4618      	mov	r0, r3
 800d222:	f7ff ffda 	bl	800d1da <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	4618      	mov	r0, r3
 800d22a:	3708      	adds	r7, #8
 800d22c:	46bd      	mov	sp, r7
 800d22e:	bd80      	pop	{r7, pc}

0800d230 <_ZNSt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>:
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 800d230:	b590      	push	{r4, r7, lr}
 800d232:	b087      	sub	sp, #28
 800d234:	af00      	add	r7, sp, #0
 800d236:	60f8      	str	r0, [r7, #12]
 800d238:	60b9      	str	r1, [r7, #8]
 800d23a:	607a      	str	r2, [r7, #4]
 800d23c:	603b      	str	r3, [r7, #0]
      : _M_impl(__p, std::move(__d), __a) { }
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	4618      	mov	r0, r3
 800d242:	f7f5 f995 	bl	8002570 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 800d246:	4a10      	ldr	r2, [pc, #64]	; (800d288 <_ZNSt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_+0x58>)
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	601a      	str	r2, [r3, #0]
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	f103 040c 	add.w	r4, r3, #12
 800d252:	6878      	ldr	r0, [r7, #4]
 800d254:	f7fe fe3b 	bl	800bece <_ZSt4moveIRNSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 800d258:	4602      	mov	r2, r0
 800d25a:	f107 0314 	add.w	r3, r7, #20
 800d25e:	4611      	mov	r1, r2
 800d260:	4618      	mov	r0, r3
 800d262:	f7fe fe3f 	bl	800bee4 <_ZNSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 800d266:	f107 0214 	add.w	r2, r7, #20
 800d26a:	683b      	ldr	r3, [r7, #0]
 800d26c:	68b9      	ldr	r1, [r7, #8]
 800d26e:	4620      	mov	r0, r4
 800d270:	f000 fe09 	bl	800de86 <_ZNSt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>
 800d274:	f107 0314 	add.w	r3, r7, #20
 800d278:	4618      	mov	r0, r3
 800d27a:	f7fd ff78 	bl	800b16e <_ZNSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	4618      	mov	r0, r3
 800d282:	371c      	adds	r7, #28
 800d284:	46bd      	mov	sp, r7
 800d286:	bd90      	pop	{r4, r7, pc}
 800d288:	0801b03c 	.word	0x0801b03c

0800d28c <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 800d28c:	b480      	push	{r7}
 800d28e:	b083      	sub	sp, #12
 800d290:	af00      	add	r7, sp, #0
 800d292:	6078      	str	r0, [r7, #4]
 800d294:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	2200      	movs	r2, #0
 800d29a:	605a      	str	r2, [r3, #4]
	return *this;
 800d29c:	687b      	ldr	r3, [r7, #4]
      }
 800d29e:	4618      	mov	r0, r3
 800d2a0:	370c      	adds	r7, #12
 800d2a2:	46bd      	mov	sp, r7
 800d2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a8:	4770      	bx	lr

0800d2aa <_ZNSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>:
          void operator()(typename _Alloc::value_type* __ptr)
 800d2aa:	b590      	push	{r4, r7, lr}
 800d2ac:	b085      	sub	sp, #20
 800d2ae:	af00      	add	r7, sp, #0
 800d2b0:	6078      	str	r0, [r7, #4]
 800d2b2:	6039      	str	r1, [r7, #0]
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 800d2b4:	6879      	ldr	r1, [r7, #4]
 800d2b6:	f107 0308 	add.w	r3, r7, #8
 800d2ba:	683a      	ldr	r2, [r7, #0]
 800d2bc:	4618      	mov	r0, r3
 800d2be:	f7ff fec5 	bl	800d04c <_ZNSt15__allocated_ptrISaIN4tama7ContextEEEC1ERS2_PS1_>
	    allocator_traits<_Alloc>::destroy(_M_alloc, __guard.get());
 800d2c2:	687c      	ldr	r4, [r7, #4]
 800d2c4:	f107 0308 	add.w	r3, r7, #8
 800d2c8:	4618      	mov	r0, r3
 800d2ca:	f7fe fdc5 	bl	800be58 <_ZNSt15__allocated_ptrISaIN4tama7ContextEEE3getEv>
 800d2ce:	4603      	mov	r3, r0
 800d2d0:	4619      	mov	r1, r3
 800d2d2:	4620      	mov	r0, r4
 800d2d4:	f000 fdf5 	bl	800dec2 <_ZNSt16allocator_traitsISaIN4tama7ContextEEE7destroyIS1_EEvRS2_PT_>
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 800d2d8:	f107 0308 	add.w	r3, r7, #8
 800d2dc:	4618      	mov	r0, r3
 800d2de:	f7fe fda6 	bl	800be2e <_ZNSt15__allocated_ptrISaIN4tama7ContextEEED1Ev>
          }
 800d2e2:	bf00      	nop
 800d2e4:	3714      	adds	r7, #20
 800d2e6:	46bd      	mov	sp, r7
 800d2e8:	bd90      	pop	{r4, r7, pc}

0800d2ea <_ZN9__gnu_cxx13new_allocatorIN4tama14InitialLoadingEEC1ERKS3_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 800d2ea:	b480      	push	{r7}
 800d2ec:	b083      	sub	sp, #12
 800d2ee:	af00      	add	r7, sp, #0
 800d2f0:	6078      	str	r0, [r7, #4]
 800d2f2:	6039      	str	r1, [r7, #0]
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	4618      	mov	r0, r3
 800d2f8:	370c      	adds	r7, #12
 800d2fa:	46bd      	mov	sp, r7
 800d2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d300:	4770      	bx	lr

0800d302 <_ZNSt16allocator_traitsISaIN4tama14InitialLoadingEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 800d302:	b580      	push	{r7, lr}
 800d304:	b082      	sub	sp, #8
 800d306:	af00      	add	r7, sp, #0
 800d308:	6078      	str	r0, [r7, #4]
 800d30a:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800d30c:	2200      	movs	r2, #0
 800d30e:	6839      	ldr	r1, [r7, #0]
 800d310:	6878      	ldr	r0, [r7, #4]
 800d312:	f000 fde3 	bl	800dedc <_ZN9__gnu_cxx13new_allocatorIN4tama14InitialLoadingEE8allocateEjPKv>
 800d316:	4603      	mov	r3, r0
 800d318:	4618      	mov	r0, r3
 800d31a:	3708      	adds	r7, #8
 800d31c:	46bd      	mov	sp, r7
 800d31e:	bd80      	pop	{r7, pc}

0800d320 <_ZNSt15__allocated_ptrISaIN4tama14InitialLoadingEEEC1ERS2_PS1_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 800d320:	b580      	push	{r7, lr}
 800d322:	b084      	sub	sp, #16
 800d324:	af00      	add	r7, sp, #0
 800d326:	60f8      	str	r0, [r7, #12]
 800d328:	60b9      	str	r1, [r7, #8]
 800d32a:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 800d32c:	68b8      	ldr	r0, [r7, #8]
 800d32e:	f000 fdf6 	bl	800df1e <_ZSt11__addressofISaIN4tama14InitialLoadingEEEPT_RS3_>
 800d332:	4602      	mov	r2, r0
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	601a      	str	r2, [r3, #0]
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	687a      	ldr	r2, [r7, #4]
 800d33c:	605a      	str	r2, [r3, #4]
      { }
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	4618      	mov	r0, r3
 800d342:	3710      	adds	r7, #16
 800d344:	46bd      	mov	sp, r7
 800d346:	bd80      	pop	{r7, pc}

0800d348 <_ZNSt16allocator_traitsISaIN4tama14InitialLoadingEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800d348:	b580      	push	{r7, lr}
 800d34a:	b084      	sub	sp, #16
 800d34c:	af00      	add	r7, sp, #0
 800d34e:	60f8      	str	r0, [r7, #12]
 800d350:	60b9      	str	r1, [r7, #8]
 800d352:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800d354:	687a      	ldr	r2, [r7, #4]
 800d356:	68b9      	ldr	r1, [r7, #8]
 800d358:	68f8      	ldr	r0, [r7, #12]
 800d35a:	f000 fdeb 	bl	800df34 <_ZN9__gnu_cxx13new_allocatorIN4tama14InitialLoadingEE10deallocateEPS2_j>
 800d35e:	bf00      	nop
 800d360:	3710      	adds	r7, #16
 800d362:	46bd      	mov	sp, r7
 800d364:	bd80      	pop	{r7, pc}

0800d366 <_ZNSt15__allocated_ptrISaIN4tama14InitialLoadingEEE10_S_raw_ptrEPS1_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 800d366:	b480      	push	{r7}
 800d368:	b083      	sub	sp, #12
 800d36a:	af00      	add	r7, sp, #0
 800d36c:	6078      	str	r0, [r7, #4]
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	4618      	mov	r0, r3
 800d372:	370c      	adds	r7, #12
 800d374:	46bd      	mov	sp, r7
 800d376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d37a:	4770      	bx	lr

0800d37c <_ZN9__gnu_cxx13new_allocatorIN4tama14InitialLoadingEE9constructIS2_JRSt10shared_ptrINS1_7ContextEEEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800d37c:	b590      	push	{r4, r7, lr}
 800d37e:	b085      	sub	sp, #20
 800d380:	af00      	add	r7, sp, #0
 800d382:	60f8      	str	r0, [r7, #12]
 800d384:	60b9      	str	r1, [r7, #8]
 800d386:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800d388:	6878      	ldr	r0, [r7, #4]
 800d38a:	f7fc fefd 	bl	800a188 <_ZSt7forwardIRSt10shared_ptrIN4tama7ContextEEEOT_RNSt16remove_referenceIS5_E4typeE>
 800d38e:	4604      	mov	r4, r0
 800d390:	68bb      	ldr	r3, [r7, #8]
 800d392:	4619      	mov	r1, r3
 800d394:	f44f 70d0 	mov.w	r0, #416	; 0x1a0
 800d398:	f7f3 f8d1 	bl	800053e <_ZnwjPv>
 800d39c:	4603      	mov	r3, r0
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d003      	beq.n	800d3aa <_ZN9__gnu_cxx13new_allocatorIN4tama14InitialLoadingEE9constructIS2_JRSt10shared_ptrINS1_7ContextEEEEEvPT_DpOT0_+0x2e>
 800d3a2:	4621      	mov	r1, r4
 800d3a4:	4618      	mov	r0, r3
 800d3a6:	f7f6 fb69 	bl	8003a7c <_ZN4tama14InitialLoadingC1ERKSt10shared_ptrINS_7ContextEE>
 800d3aa:	bf00      	nop
 800d3ac:	3714      	adds	r7, #20
 800d3ae:	46bd      	mov	sp, r7
 800d3b0:	bd90      	pop	{r4, r7, pc}

0800d3b2 <_ZNSaISt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) throw() { }
 800d3b2:	b580      	push	{r7, lr}
 800d3b4:	b082      	sub	sp, #8
 800d3b6:	af00      	add	r7, sp, #0
 800d3b8:	6078      	str	r0, [r7, #4]
 800d3ba:	6039      	str	r1, [r7, #0]
 800d3bc:	6878      	ldr	r0, [r7, #4]
 800d3be:	f000 fdc6 	bl	800df4e <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	4618      	mov	r0, r3
 800d3c6:	3708      	adds	r7, #8
 800d3c8:	46bd      	mov	sp, r7
 800d3ca:	bd80      	pop	{r7, pc}

0800d3cc <_ZNSaISt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>:
      ~allocator() throw() { }
 800d3cc:	b580      	push	{r7, lr}
 800d3ce:	b082      	sub	sp, #8
 800d3d0:	af00      	add	r7, sp, #0
 800d3d2:	6078      	str	r0, [r7, #4]
 800d3d4:	6878      	ldr	r0, [r7, #4]
 800d3d6:	f000 fdc5 	bl	800df64 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	4618      	mov	r0, r3
 800d3de:	3708      	adds	r7, #8
 800d3e0:	46bd      	mov	sp, r7
 800d3e2:	bd80      	pop	{r7, pc}

0800d3e4 <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>:
    __allocate_guarded(_Alloc& __a)
 800d3e4:	b580      	push	{r7, lr}
 800d3e6:	b082      	sub	sp, #8
 800d3e8:	af00      	add	r7, sp, #0
 800d3ea:	6078      	str	r0, [r7, #4]
 800d3ec:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 800d3ee:	2101      	movs	r1, #1
 800d3f0:	6838      	ldr	r0, [r7, #0]
 800d3f2:	f000 fdc2 	bl	800df7a <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>
 800d3f6:	4603      	mov	r3, r0
 800d3f8:	461a      	mov	r2, r3
 800d3fa:	6839      	ldr	r1, [r7, #0]
 800d3fc:	6878      	ldr	r0, [r7, #4]
 800d3fe:	f000 fdcb 	bl	800df98 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
    }
 800d402:	6878      	ldr	r0, [r7, #4]
 800d404:	3708      	adds	r7, #8
 800d406:	46bd      	mov	sp, r7
 800d408:	bd80      	pop	{r7, pc}

0800d40a <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>:
      ~__allocated_ptr()
 800d40a:	b580      	push	{r7, lr}
 800d40c:	b082      	sub	sp, #8
 800d40e:	af00      	add	r7, sp, #0
 800d410:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	685b      	ldr	r3, [r3, #4]
 800d416:	2b00      	cmp	r3, #0
 800d418:	d007      	beq.n	800d42a <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	6818      	ldr	r0, [r3, #0]
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	685b      	ldr	r3, [r3, #4]
 800d422:	2201      	movs	r2, #1
 800d424:	4619      	mov	r1, r3
 800d426:	f000 fdcb 	bl	800dfc0 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>
      }
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	4618      	mov	r0, r3
 800d42e:	3708      	adds	r7, #8
 800d430:	46bd      	mov	sp, r7
 800d432:	bd80      	pop	{r7, pc}

0800d434 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 800d434:	b580      	push	{r7, lr}
 800d436:	b082      	sub	sp, #8
 800d438:	af00      	add	r7, sp, #0
 800d43a:	6078      	str	r0, [r7, #4]
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	685b      	ldr	r3, [r3, #4]
 800d440:	4618      	mov	r0, r3
 800d442:	f000 fdcc 	bl	800dfde <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>
 800d446:	4603      	mov	r3, r0
 800d448:	4618      	mov	r0, r3
 800d44a:	3708      	adds	r7, #8
 800d44c:	46bd      	mov	sp, r7
 800d44e:	bd80      	pop	{r7, pc}

0800d450 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama14InitialLoadingELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, false>
 800d450:	b580      	push	{r7, lr}
 800d452:	b082      	sub	sp, #8
 800d454:	af00      	add	r7, sp, #0
 800d456:	6078      	str	r0, [r7, #4]
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	4618      	mov	r0, r3
 800d45c:	f7fd ff29 	bl	800b2b2 <_ZNSt12__shared_ptrIN4tama14InitialLoadingELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	4618      	mov	r0, r3
 800d464:	3708      	adds	r7, #8
 800d466:	46bd      	mov	sp, r7
 800d468:	bd80      	pop	{r7, pc}

0800d46a <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama14InitialLoadingEELb1EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, true> : private _Tp
 800d46a:	b580      	push	{r7, lr}
 800d46c:	b082      	sub	sp, #8
 800d46e:	af00      	add	r7, sp, #0
 800d470:	6078      	str	r0, [r7, #4]
 800d472:	6878      	ldr	r0, [r7, #4]
 800d474:	f7fd f90c 	bl	800a690 <_ZNSaIN4tama14InitialLoadingEED1Ev>
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	4618      	mov	r0, r3
 800d47c:	3708      	adds	r7, #8
 800d47e:	46bd      	mov	sp, r7
 800d480:	bd80      	pop	{r7, pc}

0800d482 <_ZNSt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>:
      class _Impl : _Sp_ebo_helper<0, _Deleter>, _Sp_ebo_helper<1, _Alloc>
 800d482:	b580      	push	{r7, lr}
 800d484:	b082      	sub	sp, #8
 800d486:	af00      	add	r7, sp, #0
 800d488:	6078      	str	r0, [r7, #4]
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	3301      	adds	r3, #1
 800d48e:	4618      	mov	r0, r3
 800d490:	f7ff ffeb 	bl	800d46a <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama14InitialLoadingEELb1EED1Ev>
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	4618      	mov	r0, r3
 800d498:	f7ff ffda 	bl	800d450 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama14InitialLoadingELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	4618      	mov	r0, r3
 800d4a0:	3708      	adds	r7, #8
 800d4a2:	46bd      	mov	sp, r7
 800d4a4:	bd80      	pop	{r7, pc}
	...

0800d4a8 <_ZNSt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>:
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 800d4a8:	b590      	push	{r4, r7, lr}
 800d4aa:	b087      	sub	sp, #28
 800d4ac:	af00      	add	r7, sp, #0
 800d4ae:	60f8      	str	r0, [r7, #12]
 800d4b0:	60b9      	str	r1, [r7, #8]
 800d4b2:	607a      	str	r2, [r7, #4]
 800d4b4:	603b      	str	r3, [r7, #0]
      : _M_impl(__p, std::move(__d), __a) { }
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	f7f5 f859 	bl	8002570 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 800d4be:	4a10      	ldr	r2, [pc, #64]	; (800d500 <_ZNSt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_+0x58>)
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	601a      	str	r2, [r3, #0]
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	f103 040c 	add.w	r4, r3, #12
 800d4ca:	6878      	ldr	r0, [r7, #4]
 800d4cc:	f7fe fded 	bl	800c0aa <_ZSt4moveIRNSt12__shared_ptrIN4tama14InitialLoadingELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 800d4d0:	4602      	mov	r2, r0
 800d4d2:	f107 0314 	add.w	r3, r7, #20
 800d4d6:	4611      	mov	r1, r2
 800d4d8:	4618      	mov	r0, r3
 800d4da:	f7fe fdf1 	bl	800c0c0 <_ZNSt12__shared_ptrIN4tama14InitialLoadingELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 800d4de:	f107 0214 	add.w	r2, r7, #20
 800d4e2:	683b      	ldr	r3, [r7, #0]
 800d4e4:	68b9      	ldr	r1, [r7, #8]
 800d4e6:	4620      	mov	r0, r4
 800d4e8:	f000 fd84 	bl	800dff4 <_ZNSt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>
 800d4ec:	f107 0314 	add.w	r3, r7, #20
 800d4f0:	4618      	mov	r0, r3
 800d4f2:	f7fd fede 	bl	800b2b2 <_ZNSt12__shared_ptrIN4tama14InitialLoadingELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	4618      	mov	r0, r3
 800d4fa:	371c      	adds	r7, #28
 800d4fc:	46bd      	mov	sp, r7
 800d4fe:	bd90      	pop	{r4, r7, pc}
 800d500:	0801b020 	.word	0x0801b020

0800d504 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 800d504:	b480      	push	{r7}
 800d506:	b083      	sub	sp, #12
 800d508:	af00      	add	r7, sp, #0
 800d50a:	6078      	str	r0, [r7, #4]
 800d50c:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	2200      	movs	r2, #0
 800d512:	605a      	str	r2, [r3, #4]
	return *this;
 800d514:	687b      	ldr	r3, [r7, #4]
      }
 800d516:	4618      	mov	r0, r3
 800d518:	370c      	adds	r7, #12
 800d51a:	46bd      	mov	sp, r7
 800d51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d520:	4770      	bx	lr

0800d522 <_ZNSt12__shared_ptrIN4tama14InitialLoadingELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>:
          void operator()(typename _Alloc::value_type* __ptr)
 800d522:	b590      	push	{r4, r7, lr}
 800d524:	b085      	sub	sp, #20
 800d526:	af00      	add	r7, sp, #0
 800d528:	6078      	str	r0, [r7, #4]
 800d52a:	6039      	str	r1, [r7, #0]
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 800d52c:	6879      	ldr	r1, [r7, #4]
 800d52e:	f107 0308 	add.w	r3, r7, #8
 800d532:	683a      	ldr	r2, [r7, #0]
 800d534:	4618      	mov	r0, r3
 800d536:	f7ff fef3 	bl	800d320 <_ZNSt15__allocated_ptrISaIN4tama14InitialLoadingEEEC1ERS2_PS1_>
	    allocator_traits<_Alloc>::destroy(_M_alloc, __guard.get());
 800d53a:	687c      	ldr	r4, [r7, #4]
 800d53c:	f107 0308 	add.w	r3, r7, #8
 800d540:	4618      	mov	r0, r3
 800d542:	f7fe fd82 	bl	800c04a <_ZNSt15__allocated_ptrISaIN4tama14InitialLoadingEEE3getEv>
 800d546:	4603      	mov	r3, r0
 800d548:	4619      	mov	r1, r3
 800d54a:	4620      	mov	r0, r4
 800d54c:	f000 fd70 	bl	800e030 <_ZNSt16allocator_traitsISaIN4tama14InitialLoadingEEE7destroyIS1_EEvRS2_PT_>
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 800d550:	f107 0308 	add.w	r3, r7, #8
 800d554:	4618      	mov	r0, r3
 800d556:	f7fe fd63 	bl	800c020 <_ZNSt15__allocated_ptrISaIN4tama14InitialLoadingEEED1Ev>
          }
 800d55a:	bf00      	nop
 800d55c:	3714      	adds	r7, #20
 800d55e:	46bd      	mov	sp, r7
 800d560:	bd90      	pop	{r4, r7, pc}

0800d562 <_ZNSt11_Tuple_implILj0EJPN4tama7DisplayESt14default_deleteIS1_EEE7_M_headERKS5_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800d562:	b580      	push	{r7, lr}
 800d564:	b082      	sub	sp, #8
 800d566:	af00      	add	r7, sp, #0
 800d568:	6078      	str	r0, [r7, #4]
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	4618      	mov	r0, r3
 800d56e:	f000 fd6c 	bl	800e04a <_ZNSt10_Head_baseILj0EPN4tama7DisplayELb0EE7_M_headERKS3_>
 800d572:	4603      	mov	r3, r0
 800d574:	4618      	mov	r0, r3
 800d576:	3708      	adds	r7, #8
 800d578:	46bd      	mov	sp, r7
 800d57a:	bd80      	pop	{r7, pc}

0800d57c <_ZNSt10_Head_baseILj1ESt14default_deleteIN4tama16Nokia5510DisplayEELb1EEC1Ev>:
      constexpr _Head_base()
 800d57c:	b480      	push	{r7}
 800d57e:	b083      	sub	sp, #12
 800d580:	af00      	add	r7, sp, #0
 800d582:	6078      	str	r0, [r7, #4]
      : _Head() { }
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	4618      	mov	r0, r3
 800d588:	370c      	adds	r7, #12
 800d58a:	46bd      	mov	sp, r7
 800d58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d590:	4770      	bx	lr

0800d592 <_ZNSt10_Head_baseILj1ESt14default_deleteIN4tama16Nokia5510DisplayEELb1EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b; }
 800d592:	b480      	push	{r7}
 800d594:	b083      	sub	sp, #12
 800d596:	af00      	add	r7, sp, #0
 800d598:	6078      	str	r0, [r7, #4]
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	4618      	mov	r0, r3
 800d59e:	370c      	adds	r7, #12
 800d5a0:	46bd      	mov	sp, r7
 800d5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a6:	4770      	bx	lr

0800d5a8 <_ZNSt11_Tuple_implILj0EJPN4tama16Nokia5510DisplayESt14default_deleteIS1_EEE7_M_headERKS5_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800d5a8:	b580      	push	{r7, lr}
 800d5aa:	b082      	sub	sp, #8
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	6078      	str	r0, [r7, #4]
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	4618      	mov	r0, r3
 800d5b4:	f000 fd54 	bl	800e060 <_ZNSt10_Head_baseILj0EPN4tama16Nokia5510DisplayELb0EE7_M_headERKS3_>
 800d5b8:	4603      	mov	r3, r0
 800d5ba:	4618      	mov	r0, r3
 800d5bc:	3708      	adds	r7, #8
 800d5be:	46bd      	mov	sp, r7
 800d5c0:	bd80      	pop	{r7, pc}

0800d5c2 <_ZNSt14default_deleteIN4tama7DisplayEEC1INS0_16Nokia5510DisplayEvEERKS_IT_E>:
        default_delete(const default_delete<_Up>&) noexcept { }
 800d5c2:	b480      	push	{r7}
 800d5c4:	b083      	sub	sp, #12
 800d5c6:	af00      	add	r7, sp, #0
 800d5c8:	6078      	str	r0, [r7, #4]
 800d5ca:	6039      	str	r1, [r7, #0]
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	4618      	mov	r0, r3
 800d5d0:	370c      	adds	r7, #12
 800d5d2:	46bd      	mov	sp, r7
 800d5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d8:	4770      	bx	lr

0800d5da <_ZN9__gnu_cxx13new_allocatorIN4tama18Stm32TextureLoaderEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800d5da:	b580      	push	{r7, lr}
 800d5dc:	b084      	sub	sp, #16
 800d5de:	af00      	add	r7, sp, #0
 800d5e0:	60f8      	str	r0, [r7, #12]
 800d5e2:	60b9      	str	r1, [r7, #8]
 800d5e4:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800d5e6:	68f8      	ldr	r0, [r7, #12]
 800d5e8:	f000 fd45 	bl	800e076 <_ZNK9__gnu_cxx13new_allocatorIN4tama18Stm32TextureLoaderEE8max_sizeEv>
 800d5ec:	4602      	mov	r2, r0
 800d5ee:	68bb      	ldr	r3, [r7, #8]
 800d5f0:	4293      	cmp	r3, r2
 800d5f2:	bf8c      	ite	hi
 800d5f4:	2301      	movhi	r3, #1
 800d5f6:	2300      	movls	r3, #0
 800d5f8:	b2db      	uxtb	r3, r3
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d001      	beq.n	800d602 <_ZN9__gnu_cxx13new_allocatorIN4tama18Stm32TextureLoaderEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800d5fe:	f009 ff88 	bl	8017512 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800d602:	68bb      	ldr	r3, [r7, #8]
 800d604:	009b      	lsls	r3, r3, #2
 800d606:	4618      	mov	r0, r3
 800d608:	f009 ff55 	bl	80174b6 <_Znwj>
 800d60c:	4603      	mov	r3, r0
      }
 800d60e:	4618      	mov	r0, r3
 800d610:	3710      	adds	r7, #16
 800d612:	46bd      	mov	sp, r7
 800d614:	bd80      	pop	{r7, pc}

0800d616 <_ZSt11__addressofISaIN4tama18Stm32TextureLoaderEEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800d616:	b480      	push	{r7}
 800d618:	b083      	sub	sp, #12
 800d61a:	af00      	add	r7, sp, #0
 800d61c:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	4618      	mov	r0, r3
 800d622:	370c      	adds	r7, #12
 800d624:	46bd      	mov	sp, r7
 800d626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d62a:	4770      	bx	lr

0800d62c <_ZN9__gnu_cxx13new_allocatorIN4tama18Stm32TextureLoaderEE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 800d62c:	b580      	push	{r7, lr}
 800d62e:	b084      	sub	sp, #16
 800d630:	af00      	add	r7, sp, #0
 800d632:	60f8      	str	r0, [r7, #12]
 800d634:	60b9      	str	r1, [r7, #8]
 800d636:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800d638:	68b8      	ldr	r0, [r7, #8]
 800d63a:	f009 ff55 	bl	80174e8 <_ZdlPv>
      }
 800d63e:	bf00      	nop
 800d640:	3710      	adds	r7, #16
 800d642:	46bd      	mov	sp, r7
 800d644:	bd80      	pop	{r7, pc}

0800d646 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800d646:	b480      	push	{r7}
 800d648:	b083      	sub	sp, #12
 800d64a:	af00      	add	r7, sp, #0
 800d64c:	6078      	str	r0, [r7, #4]
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	4618      	mov	r0, r3
 800d652:	370c      	adds	r7, #12
 800d654:	46bd      	mov	sp, r7
 800d656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d65a:	4770      	bx	lr

0800d65c <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800d65c:	b480      	push	{r7}
 800d65e:	b083      	sub	sp, #12
 800d660:	af00      	add	r7, sp, #0
 800d662:	6078      	str	r0, [r7, #4]
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	4618      	mov	r0, r3
 800d668:	370c      	adds	r7, #12
 800d66a:	46bd      	mov	sp, r7
 800d66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d670:	4770      	bx	lr

0800d672 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>:
      allocate(allocator_type& __a, size_type __n)
 800d672:	b580      	push	{r7, lr}
 800d674:	b082      	sub	sp, #8
 800d676:	af00      	add	r7, sp, #0
 800d678:	6078      	str	r0, [r7, #4]
 800d67a:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800d67c:	2200      	movs	r2, #0
 800d67e:	6839      	ldr	r1, [r7, #0]
 800d680:	6878      	ldr	r0, [r7, #4]
 800d682:	f000 fd04 	bl	800e08e <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>
 800d686:	4603      	mov	r3, r0
 800d688:	4618      	mov	r0, r3
 800d68a:	3708      	adds	r7, #8
 800d68c:	46bd      	mov	sp, r7
 800d68e:	bd80      	pop	{r7, pc}

0800d690 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 800d690:	b580      	push	{r7, lr}
 800d692:	b084      	sub	sp, #16
 800d694:	af00      	add	r7, sp, #0
 800d696:	60f8      	str	r0, [r7, #12]
 800d698:	60b9      	str	r1, [r7, #8]
 800d69a:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 800d69c:	68b8      	ldr	r0, [r7, #8]
 800d69e:	f000 fd17 	bl	800e0d0 <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>
 800d6a2:	4602      	mov	r2, r0
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	601a      	str	r2, [r3, #0]
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	687a      	ldr	r2, [r7, #4]
 800d6ac:	605a      	str	r2, [r3, #4]
      { }
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	4618      	mov	r0, r3
 800d6b2:	3710      	adds	r7, #16
 800d6b4:	46bd      	mov	sp, r7
 800d6b6:	bd80      	pop	{r7, pc}

0800d6b8 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800d6b8:	b580      	push	{r7, lr}
 800d6ba:	b084      	sub	sp, #16
 800d6bc:	af00      	add	r7, sp, #0
 800d6be:	60f8      	str	r0, [r7, #12]
 800d6c0:	60b9      	str	r1, [r7, #8]
 800d6c2:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800d6c4:	687a      	ldr	r2, [r7, #4]
 800d6c6:	68b9      	ldr	r1, [r7, #8]
 800d6c8:	68f8      	ldr	r0, [r7, #12]
 800d6ca:	f000 fd0c 	bl	800e0e6 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>
 800d6ce:	bf00      	nop
 800d6d0:	3710      	adds	r7, #16
 800d6d2:	46bd      	mov	sp, r7
 800d6d4:	bd80      	pop	{r7, pc}

0800d6d6 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 800d6d6:	b480      	push	{r7}
 800d6d8:	b083      	sub	sp, #12
 800d6da:	af00      	add	r7, sp, #0
 800d6dc:	6078      	str	r0, [r7, #4]
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	4618      	mov	r0, r3
 800d6e2:	370c      	adds	r7, #12
 800d6e4:	46bd      	mov	sp, r7
 800d6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ea:	4770      	bx	lr

0800d6ec <_ZNSt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 800d6ec:	b590      	push	{r4, r7, lr}
 800d6ee:	b085      	sub	sp, #20
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	60f8      	str	r0, [r7, #12]
 800d6f4:	60b9      	str	r1, [r7, #8]
 800d6f6:	607a      	str	r2, [r7, #4]
 800d6f8:	603b      	str	r3, [r7, #0]
	: _M_ptr(__p), _Del_base(std::move(__d)), _Alloc_base(__a)
 800d6fa:	68fc      	ldr	r4, [r7, #12]
 800d6fc:	6878      	ldr	r0, [r7, #4]
 800d6fe:	f7fd ff36 	bl	800b56e <_ZSt4moveIRNSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 800d702:	4603      	mov	r3, r0
 800d704:	4619      	mov	r1, r3
 800d706:	4620      	mov	r0, r4
 800d708:	f000 fcfa 	bl	800e100 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	3301      	adds	r3, #1
 800d710:	6839      	ldr	r1, [r7, #0]
 800d712:	4618      	mov	r0, r3
 800d714:	f000 fd07 	bl	800e126 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama18Stm32TextureLoaderEELb1EEC1ERKS2_>
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	68ba      	ldr	r2, [r7, #8]
 800d71c:	605a      	str	r2, [r3, #4]
	{ }
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	4618      	mov	r0, r3
 800d722:	3714      	adds	r7, #20
 800d724:	46bd      	mov	sp, r7
 800d726:	bd90      	pop	{r4, r7, pc}

0800d728 <_ZNSt16allocator_traitsISaIN4tama18Stm32TextureLoaderEEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 800d728:	b580      	push	{r7, lr}
 800d72a:	b082      	sub	sp, #8
 800d72c:	af00      	add	r7, sp, #0
 800d72e:	6078      	str	r0, [r7, #4]
 800d730:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 800d732:	6839      	ldr	r1, [r7, #0]
 800d734:	6878      	ldr	r0, [r7, #4]
 800d736:	f000 fd04 	bl	800e142 <_ZN9__gnu_cxx13new_allocatorIN4tama18Stm32TextureLoaderEE7destroyIS2_EEvPT_>
 800d73a:	bf00      	nop
 800d73c:	3708      	adds	r7, #8
 800d73e:	46bd      	mov	sp, r7
 800d740:	bd80      	pop	{r7, pc}

0800d742 <_ZN9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800d742:	b580      	push	{r7, lr}
 800d744:	b084      	sub	sp, #16
 800d746:	af00      	add	r7, sp, #0
 800d748:	60f8      	str	r0, [r7, #12]
 800d74a:	60b9      	str	r1, [r7, #8]
 800d74c:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800d74e:	68f8      	ldr	r0, [r7, #12]
 800d750:	f000 fd02 	bl	800e158 <_ZNK9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEE8max_sizeEv>
 800d754:	4602      	mov	r2, r0
 800d756:	68bb      	ldr	r3, [r7, #8]
 800d758:	4293      	cmp	r3, r2
 800d75a:	bf8c      	ite	hi
 800d75c:	2301      	movhi	r3, #1
 800d75e:	2300      	movls	r3, #0
 800d760:	b2db      	uxtb	r3, r3
 800d762:	2b00      	cmp	r3, #0
 800d764:	d001      	beq.n	800d76a <_ZN9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800d766:	f009 fed4 	bl	8017512 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800d76a:	68ba      	ldr	r2, [r7, #8]
 800d76c:	4613      	mov	r3, r2
 800d76e:	005b      	lsls	r3, r3, #1
 800d770:	4413      	add	r3, r2
 800d772:	00db      	lsls	r3, r3, #3
 800d774:	4618      	mov	r0, r3
 800d776:	f009 fe9e 	bl	80174b6 <_Znwj>
 800d77a:	4603      	mov	r3, r0
      }
 800d77c:	4618      	mov	r0, r3
 800d77e:	3710      	adds	r7, #16
 800d780:	46bd      	mov	sp, r7
 800d782:	bd80      	pop	{r7, pc}

0800d784 <_ZSt11__addressofISaIN4tama27Nokia5110DisplayDataManagerEEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800d784:	b480      	push	{r7}
 800d786:	b083      	sub	sp, #12
 800d788:	af00      	add	r7, sp, #0
 800d78a:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	4618      	mov	r0, r3
 800d790:	370c      	adds	r7, #12
 800d792:	46bd      	mov	sp, r7
 800d794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d798:	4770      	bx	lr

0800d79a <_ZN9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 800d79a:	b580      	push	{r7, lr}
 800d79c:	b084      	sub	sp, #16
 800d79e:	af00      	add	r7, sp, #0
 800d7a0:	60f8      	str	r0, [r7, #12]
 800d7a2:	60b9      	str	r1, [r7, #8]
 800d7a4:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800d7a6:	68b8      	ldr	r0, [r7, #8]
 800d7a8:	f009 fe9e 	bl	80174e8 <_ZdlPv>
      }
 800d7ac:	bf00      	nop
 800d7ae:	3710      	adds	r7, #16
 800d7b0:	46bd      	mov	sp, r7
 800d7b2:	bd80      	pop	{r7, pc}

0800d7b4 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800d7b4:	b480      	push	{r7}
 800d7b6:	b083      	sub	sp, #12
 800d7b8:	af00      	add	r7, sp, #0
 800d7ba:	6078      	str	r0, [r7, #4]
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	4618      	mov	r0, r3
 800d7c0:	370c      	adds	r7, #12
 800d7c2:	46bd      	mov	sp, r7
 800d7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c8:	4770      	bx	lr

0800d7ca <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800d7ca:	b480      	push	{r7}
 800d7cc:	b083      	sub	sp, #12
 800d7ce:	af00      	add	r7, sp, #0
 800d7d0:	6078      	str	r0, [r7, #4]
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	4618      	mov	r0, r3
 800d7d6:	370c      	adds	r7, #12
 800d7d8:	46bd      	mov	sp, r7
 800d7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7de:	4770      	bx	lr

0800d7e0 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>:
      allocate(allocator_type& __a, size_type __n)
 800d7e0:	b580      	push	{r7, lr}
 800d7e2:	b082      	sub	sp, #8
 800d7e4:	af00      	add	r7, sp, #0
 800d7e6:	6078      	str	r0, [r7, #4]
 800d7e8:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800d7ea:	2200      	movs	r2, #0
 800d7ec:	6839      	ldr	r1, [r7, #0]
 800d7ee:	6878      	ldr	r0, [r7, #4]
 800d7f0:	f000 fcc0 	bl	800e174 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>
 800d7f4:	4603      	mov	r3, r0
 800d7f6:	4618      	mov	r0, r3
 800d7f8:	3708      	adds	r7, #8
 800d7fa:	46bd      	mov	sp, r7
 800d7fc:	bd80      	pop	{r7, pc}

0800d7fe <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 800d7fe:	b580      	push	{r7, lr}
 800d800:	b084      	sub	sp, #16
 800d802:	af00      	add	r7, sp, #0
 800d804:	60f8      	str	r0, [r7, #12]
 800d806:	60b9      	str	r1, [r7, #8]
 800d808:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 800d80a:	68b8      	ldr	r0, [r7, #8]
 800d80c:	f000 fcd3 	bl	800e1b6 <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>
 800d810:	4602      	mov	r2, r0
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	601a      	str	r2, [r3, #0]
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	687a      	ldr	r2, [r7, #4]
 800d81a:	605a      	str	r2, [r3, #4]
      { }
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	4618      	mov	r0, r3
 800d820:	3710      	adds	r7, #16
 800d822:	46bd      	mov	sp, r7
 800d824:	bd80      	pop	{r7, pc}

0800d826 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800d826:	b580      	push	{r7, lr}
 800d828:	b084      	sub	sp, #16
 800d82a:	af00      	add	r7, sp, #0
 800d82c:	60f8      	str	r0, [r7, #12]
 800d82e:	60b9      	str	r1, [r7, #8]
 800d830:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800d832:	687a      	ldr	r2, [r7, #4]
 800d834:	68b9      	ldr	r1, [r7, #8]
 800d836:	68f8      	ldr	r0, [r7, #12]
 800d838:	f000 fcc8 	bl	800e1cc <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>
 800d83c:	bf00      	nop
 800d83e:	3710      	adds	r7, #16
 800d840:	46bd      	mov	sp, r7
 800d842:	bd80      	pop	{r7, pc}

0800d844 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 800d844:	b480      	push	{r7}
 800d846:	b083      	sub	sp, #12
 800d848:	af00      	add	r7, sp, #0
 800d84a:	6078      	str	r0, [r7, #4]
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	4618      	mov	r0, r3
 800d850:	370c      	adds	r7, #12
 800d852:	46bd      	mov	sp, r7
 800d854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d858:	4770      	bx	lr

0800d85a <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 800d85a:	b590      	push	{r4, r7, lr}
 800d85c:	b085      	sub	sp, #20
 800d85e:	af00      	add	r7, sp, #0
 800d860:	60f8      	str	r0, [r7, #12]
 800d862:	60b9      	str	r1, [r7, #8]
 800d864:	607a      	str	r2, [r7, #4]
 800d866:	603b      	str	r3, [r7, #0]
	: _M_ptr(__p), _Del_base(std::move(__d)), _Alloc_base(__a)
 800d868:	68fc      	ldr	r4, [r7, #12]
 800d86a:	6878      	ldr	r0, [r7, #4]
 800d86c:	f7fd ff67 	bl	800b73e <_ZSt4moveIRNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 800d870:	4603      	mov	r3, r0
 800d872:	4619      	mov	r1, r3
 800d874:	4620      	mov	r0, r4
 800d876:	f000 fcb6 	bl	800e1e6 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	3301      	adds	r3, #1
 800d87e:	6839      	ldr	r1, [r7, #0]
 800d880:	4618      	mov	r0, r3
 800d882:	f000 fcc3 	bl	800e20c <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama27Nokia5110DisplayDataManagerEELb1EEC1ERKS2_>
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	68ba      	ldr	r2, [r7, #8]
 800d88a:	605a      	str	r2, [r3, #4]
	{ }
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	4618      	mov	r0, r3
 800d890:	3714      	adds	r7, #20
 800d892:	46bd      	mov	sp, r7
 800d894:	bd90      	pop	{r4, r7, pc}

0800d896 <_ZNSt16allocator_traitsISaIN4tama27Nokia5110DisplayDataManagerEEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 800d896:	b580      	push	{r7, lr}
 800d898:	b082      	sub	sp, #8
 800d89a:	af00      	add	r7, sp, #0
 800d89c:	6078      	str	r0, [r7, #4]
 800d89e:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 800d8a0:	6839      	ldr	r1, [r7, #0]
 800d8a2:	6878      	ldr	r0, [r7, #4]
 800d8a4:	f000 fcc0 	bl	800e228 <_ZN9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEE7destroyIS2_EEvPT_>
 800d8a8:	bf00      	nop
 800d8aa:	3708      	adds	r7, #8
 800d8ac:	46bd      	mov	sp, r7
 800d8ae:	bd80      	pop	{r7, pc}

0800d8b0 <_ZN9__gnu_cxx13new_allocatorIN4tama16Stm32TimeMonitorEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800d8b0:	b580      	push	{r7, lr}
 800d8b2:	b084      	sub	sp, #16
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	60f8      	str	r0, [r7, #12]
 800d8b8:	60b9      	str	r1, [r7, #8]
 800d8ba:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800d8bc:	68f8      	ldr	r0, [r7, #12]
 800d8be:	f000 fcbe 	bl	800e23e <_ZNK9__gnu_cxx13new_allocatorIN4tama16Stm32TimeMonitorEE8max_sizeEv>
 800d8c2:	4602      	mov	r2, r0
 800d8c4:	68bb      	ldr	r3, [r7, #8]
 800d8c6:	4293      	cmp	r3, r2
 800d8c8:	bf8c      	ite	hi
 800d8ca:	2301      	movhi	r3, #1
 800d8cc:	2300      	movls	r3, #0
 800d8ce:	b2db      	uxtb	r3, r3
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d001      	beq.n	800d8d8 <_ZN9__gnu_cxx13new_allocatorIN4tama16Stm32TimeMonitorEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800d8d4:	f009 fe1d 	bl	8017512 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800d8d8:	68bb      	ldr	r3, [r7, #8]
 800d8da:	00db      	lsls	r3, r3, #3
 800d8dc:	4618      	mov	r0, r3
 800d8de:	f009 fdea 	bl	80174b6 <_Znwj>
 800d8e2:	4603      	mov	r3, r0
      }
 800d8e4:	4618      	mov	r0, r3
 800d8e6:	3710      	adds	r7, #16
 800d8e8:	46bd      	mov	sp, r7
 800d8ea:	bd80      	pop	{r7, pc}

0800d8ec <_ZSt11__addressofISaIN4tama16Stm32TimeMonitorEEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800d8ec:	b480      	push	{r7}
 800d8ee:	b083      	sub	sp, #12
 800d8f0:	af00      	add	r7, sp, #0
 800d8f2:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	4618      	mov	r0, r3
 800d8f8:	370c      	adds	r7, #12
 800d8fa:	46bd      	mov	sp, r7
 800d8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d900:	4770      	bx	lr

0800d902 <_ZN9__gnu_cxx13new_allocatorIN4tama16Stm32TimeMonitorEE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 800d902:	b580      	push	{r7, lr}
 800d904:	b084      	sub	sp, #16
 800d906:	af00      	add	r7, sp, #0
 800d908:	60f8      	str	r0, [r7, #12]
 800d90a:	60b9      	str	r1, [r7, #8]
 800d90c:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800d90e:	68b8      	ldr	r0, [r7, #8]
 800d910:	f009 fdea 	bl	80174e8 <_ZdlPv>
      }
 800d914:	bf00      	nop
 800d916:	3710      	adds	r7, #16
 800d918:	46bd      	mov	sp, r7
 800d91a:	bd80      	pop	{r7, pc}

0800d91c <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800d91c:	b480      	push	{r7}
 800d91e:	b083      	sub	sp, #12
 800d920:	af00      	add	r7, sp, #0
 800d922:	6078      	str	r0, [r7, #4]
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	4618      	mov	r0, r3
 800d928:	370c      	adds	r7, #12
 800d92a:	46bd      	mov	sp, r7
 800d92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d930:	4770      	bx	lr

0800d932 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800d932:	b480      	push	{r7}
 800d934:	b083      	sub	sp, #12
 800d936:	af00      	add	r7, sp, #0
 800d938:	6078      	str	r0, [r7, #4]
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	4618      	mov	r0, r3
 800d93e:	370c      	adds	r7, #12
 800d940:	46bd      	mov	sp, r7
 800d942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d946:	4770      	bx	lr

0800d948 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>:
      allocate(allocator_type& __a, size_type __n)
 800d948:	b580      	push	{r7, lr}
 800d94a:	b082      	sub	sp, #8
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	6078      	str	r0, [r7, #4]
 800d950:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800d952:	2200      	movs	r2, #0
 800d954:	6839      	ldr	r1, [r7, #0]
 800d956:	6878      	ldr	r0, [r7, #4]
 800d958:	f000 fc7d 	bl	800e256 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>
 800d95c:	4603      	mov	r3, r0
 800d95e:	4618      	mov	r0, r3
 800d960:	3708      	adds	r7, #8
 800d962:	46bd      	mov	sp, r7
 800d964:	bd80      	pop	{r7, pc}

0800d966 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 800d966:	b580      	push	{r7, lr}
 800d968:	b084      	sub	sp, #16
 800d96a:	af00      	add	r7, sp, #0
 800d96c:	60f8      	str	r0, [r7, #12]
 800d96e:	60b9      	str	r1, [r7, #8]
 800d970:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 800d972:	68b8      	ldr	r0, [r7, #8]
 800d974:	f000 fc90 	bl	800e298 <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>
 800d978:	4602      	mov	r2, r0
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	601a      	str	r2, [r3, #0]
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	687a      	ldr	r2, [r7, #4]
 800d982:	605a      	str	r2, [r3, #4]
      { }
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	4618      	mov	r0, r3
 800d988:	3710      	adds	r7, #16
 800d98a:	46bd      	mov	sp, r7
 800d98c:	bd80      	pop	{r7, pc}

0800d98e <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800d98e:	b580      	push	{r7, lr}
 800d990:	b084      	sub	sp, #16
 800d992:	af00      	add	r7, sp, #0
 800d994:	60f8      	str	r0, [r7, #12]
 800d996:	60b9      	str	r1, [r7, #8]
 800d998:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800d99a:	687a      	ldr	r2, [r7, #4]
 800d99c:	68b9      	ldr	r1, [r7, #8]
 800d99e:	68f8      	ldr	r0, [r7, #12]
 800d9a0:	f000 fc85 	bl	800e2ae <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>
 800d9a4:	bf00      	nop
 800d9a6:	3710      	adds	r7, #16
 800d9a8:	46bd      	mov	sp, r7
 800d9aa:	bd80      	pop	{r7, pc}

0800d9ac <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 800d9ac:	b480      	push	{r7}
 800d9ae:	b083      	sub	sp, #12
 800d9b0:	af00      	add	r7, sp, #0
 800d9b2:	6078      	str	r0, [r7, #4]
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	4618      	mov	r0, r3
 800d9b8:	370c      	adds	r7, #12
 800d9ba:	46bd      	mov	sp, r7
 800d9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c0:	4770      	bx	lr

0800d9c2 <_ZNSt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 800d9c2:	b590      	push	{r4, r7, lr}
 800d9c4:	b085      	sub	sp, #20
 800d9c6:	af00      	add	r7, sp, #0
 800d9c8:	60f8      	str	r0, [r7, #12]
 800d9ca:	60b9      	str	r1, [r7, #8]
 800d9cc:	607a      	str	r2, [r7, #4]
 800d9ce:	603b      	str	r3, [r7, #0]
	: _M_ptr(__p), _Del_base(std::move(__d)), _Alloc_base(__a)
 800d9d0:	68fc      	ldr	r4, [r7, #12]
 800d9d2:	6878      	ldr	r0, [r7, #4]
 800d9d4:	f7fd ff9b 	bl	800b90e <_ZSt4moveIRNSt12__shared_ptrIN4tama16Stm32TimeMonitorELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 800d9d8:	4603      	mov	r3, r0
 800d9da:	4619      	mov	r1, r3
 800d9dc:	4620      	mov	r0, r4
 800d9de:	f000 fc73 	bl	800e2c8 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama16Stm32TimeMonitorELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	3301      	adds	r3, #1
 800d9e6:	6839      	ldr	r1, [r7, #0]
 800d9e8:	4618      	mov	r0, r3
 800d9ea:	f000 fc80 	bl	800e2ee <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama16Stm32TimeMonitorEELb1EEC1ERKS2_>
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	68ba      	ldr	r2, [r7, #8]
 800d9f2:	605a      	str	r2, [r3, #4]
	{ }
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	4618      	mov	r0, r3
 800d9f8:	3714      	adds	r7, #20
 800d9fa:	46bd      	mov	sp, r7
 800d9fc:	bd90      	pop	{r4, r7, pc}

0800d9fe <_ZNSt16allocator_traitsISaIN4tama16Stm32TimeMonitorEEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 800d9fe:	b580      	push	{r7, lr}
 800da00:	b082      	sub	sp, #8
 800da02:	af00      	add	r7, sp, #0
 800da04:	6078      	str	r0, [r7, #4]
 800da06:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 800da08:	6839      	ldr	r1, [r7, #0]
 800da0a:	6878      	ldr	r0, [r7, #4]
 800da0c:	f000 fc7d 	bl	800e30a <_ZN9__gnu_cxx13new_allocatorIN4tama16Stm32TimeMonitorEE7destroyIS2_EEvPT_>
 800da10:	bf00      	nop
 800da12:	3708      	adds	r7, #8
 800da14:	46bd      	mov	sp, r7
 800da16:	bd80      	pop	{r7, pc}

0800da18 <_ZN9__gnu_cxx13new_allocatorIN4tama25Stm32SoundPlayingStrategyEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800da18:	b580      	push	{r7, lr}
 800da1a:	b084      	sub	sp, #16
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	60f8      	str	r0, [r7, #12]
 800da20:	60b9      	str	r1, [r7, #8]
 800da22:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800da24:	68f8      	ldr	r0, [r7, #12]
 800da26:	f000 fc7b 	bl	800e320 <_ZNK9__gnu_cxx13new_allocatorIN4tama25Stm32SoundPlayingStrategyEE8max_sizeEv>
 800da2a:	4602      	mov	r2, r0
 800da2c:	68bb      	ldr	r3, [r7, #8]
 800da2e:	4293      	cmp	r3, r2
 800da30:	bf8c      	ite	hi
 800da32:	2301      	movhi	r3, #1
 800da34:	2300      	movls	r3, #0
 800da36:	b2db      	uxtb	r3, r3
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d001      	beq.n	800da40 <_ZN9__gnu_cxx13new_allocatorIN4tama25Stm32SoundPlayingStrategyEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800da3c:	f009 fd69 	bl	8017512 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800da40:	68bb      	ldr	r3, [r7, #8]
 800da42:	009b      	lsls	r3, r3, #2
 800da44:	4618      	mov	r0, r3
 800da46:	f009 fd36 	bl	80174b6 <_Znwj>
 800da4a:	4603      	mov	r3, r0
      }
 800da4c:	4618      	mov	r0, r3
 800da4e:	3710      	adds	r7, #16
 800da50:	46bd      	mov	sp, r7
 800da52:	bd80      	pop	{r7, pc}

0800da54 <_ZSt11__addressofISaIN4tama25Stm32SoundPlayingStrategyEEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800da54:	b480      	push	{r7}
 800da56:	b083      	sub	sp, #12
 800da58:	af00      	add	r7, sp, #0
 800da5a:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	4618      	mov	r0, r3
 800da60:	370c      	adds	r7, #12
 800da62:	46bd      	mov	sp, r7
 800da64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da68:	4770      	bx	lr

0800da6a <_ZN9__gnu_cxx13new_allocatorIN4tama25Stm32SoundPlayingStrategyEE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 800da6a:	b580      	push	{r7, lr}
 800da6c:	b084      	sub	sp, #16
 800da6e:	af00      	add	r7, sp, #0
 800da70:	60f8      	str	r0, [r7, #12]
 800da72:	60b9      	str	r1, [r7, #8]
 800da74:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800da76:	68b8      	ldr	r0, [r7, #8]
 800da78:	f009 fd36 	bl	80174e8 <_ZdlPv>
      }
 800da7c:	bf00      	nop
 800da7e:	3710      	adds	r7, #16
 800da80:	46bd      	mov	sp, r7
 800da82:	bd80      	pop	{r7, pc}

0800da84 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800da84:	b480      	push	{r7}
 800da86:	b083      	sub	sp, #12
 800da88:	af00      	add	r7, sp, #0
 800da8a:	6078      	str	r0, [r7, #4]
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	4618      	mov	r0, r3
 800da90:	370c      	adds	r7, #12
 800da92:	46bd      	mov	sp, r7
 800da94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da98:	4770      	bx	lr

0800da9a <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800da9a:	b480      	push	{r7}
 800da9c:	b083      	sub	sp, #12
 800da9e:	af00      	add	r7, sp, #0
 800daa0:	6078      	str	r0, [r7, #4]
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	4618      	mov	r0, r3
 800daa6:	370c      	adds	r7, #12
 800daa8:	46bd      	mov	sp, r7
 800daaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daae:	4770      	bx	lr

0800dab0 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>:
      allocate(allocator_type& __a, size_type __n)
 800dab0:	b580      	push	{r7, lr}
 800dab2:	b082      	sub	sp, #8
 800dab4:	af00      	add	r7, sp, #0
 800dab6:	6078      	str	r0, [r7, #4]
 800dab8:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800daba:	2200      	movs	r2, #0
 800dabc:	6839      	ldr	r1, [r7, #0]
 800dabe:	6878      	ldr	r0, [r7, #4]
 800dac0:	f000 fc3a 	bl	800e338 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>
 800dac4:	4603      	mov	r3, r0
 800dac6:	4618      	mov	r0, r3
 800dac8:	3708      	adds	r7, #8
 800daca:	46bd      	mov	sp, r7
 800dacc:	bd80      	pop	{r7, pc}

0800dace <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 800dace:	b580      	push	{r7, lr}
 800dad0:	b084      	sub	sp, #16
 800dad2:	af00      	add	r7, sp, #0
 800dad4:	60f8      	str	r0, [r7, #12]
 800dad6:	60b9      	str	r1, [r7, #8]
 800dad8:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 800dada:	68b8      	ldr	r0, [r7, #8]
 800dadc:	f000 fc4d 	bl	800e37a <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>
 800dae0:	4602      	mov	r2, r0
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	601a      	str	r2, [r3, #0]
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	687a      	ldr	r2, [r7, #4]
 800daea:	605a      	str	r2, [r3, #4]
      { }
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	4618      	mov	r0, r3
 800daf0:	3710      	adds	r7, #16
 800daf2:	46bd      	mov	sp, r7
 800daf4:	bd80      	pop	{r7, pc}

0800daf6 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800daf6:	b580      	push	{r7, lr}
 800daf8:	b084      	sub	sp, #16
 800dafa:	af00      	add	r7, sp, #0
 800dafc:	60f8      	str	r0, [r7, #12]
 800dafe:	60b9      	str	r1, [r7, #8]
 800db00:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800db02:	687a      	ldr	r2, [r7, #4]
 800db04:	68b9      	ldr	r1, [r7, #8]
 800db06:	68f8      	ldr	r0, [r7, #12]
 800db08:	f000 fc42 	bl	800e390 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>
 800db0c:	bf00      	nop
 800db0e:	3710      	adds	r7, #16
 800db10:	46bd      	mov	sp, r7
 800db12:	bd80      	pop	{r7, pc}

0800db14 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 800db14:	b480      	push	{r7}
 800db16:	b083      	sub	sp, #12
 800db18:	af00      	add	r7, sp, #0
 800db1a:	6078      	str	r0, [r7, #4]
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	4618      	mov	r0, r3
 800db20:	370c      	adds	r7, #12
 800db22:	46bd      	mov	sp, r7
 800db24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db28:	4770      	bx	lr

0800db2a <_ZNSt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 800db2a:	b590      	push	{r4, r7, lr}
 800db2c:	b085      	sub	sp, #20
 800db2e:	af00      	add	r7, sp, #0
 800db30:	60f8      	str	r0, [r7, #12]
 800db32:	60b9      	str	r1, [r7, #8]
 800db34:	607a      	str	r2, [r7, #4]
 800db36:	603b      	str	r3, [r7, #0]
	: _M_ptr(__p), _Del_base(std::move(__d)), _Alloc_base(__a)
 800db38:	68fc      	ldr	r4, [r7, #12]
 800db3a:	6878      	ldr	r0, [r7, #4]
 800db3c:	f7fd ffcf 	bl	800bade <_ZSt4moveIRNSt12__shared_ptrIN4tama25Stm32SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 800db40:	4603      	mov	r3, r0
 800db42:	4619      	mov	r1, r3
 800db44:	4620      	mov	r0, r4
 800db46:	f000 fc30 	bl	800e3aa <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama25Stm32SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	3301      	adds	r3, #1
 800db4e:	6839      	ldr	r1, [r7, #0]
 800db50:	4618      	mov	r0, r3
 800db52:	f000 fc3d 	bl	800e3d0 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama25Stm32SoundPlayingStrategyEELb1EEC1ERKS2_>
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	68ba      	ldr	r2, [r7, #8]
 800db5a:	605a      	str	r2, [r3, #4]
	{ }
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	4618      	mov	r0, r3
 800db60:	3714      	adds	r7, #20
 800db62:	46bd      	mov	sp, r7
 800db64:	bd90      	pop	{r4, r7, pc}

0800db66 <_ZNSt16allocator_traitsISaIN4tama25Stm32SoundPlayingStrategyEEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 800db66:	b580      	push	{r7, lr}
 800db68:	b082      	sub	sp, #8
 800db6a:	af00      	add	r7, sp, #0
 800db6c:	6078      	str	r0, [r7, #4]
 800db6e:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 800db70:	6839      	ldr	r1, [r7, #0]
 800db72:	6878      	ldr	r0, [r7, #4]
 800db74:	f000 fc3a 	bl	800e3ec <_ZN9__gnu_cxx13new_allocatorIN4tama25Stm32SoundPlayingStrategyEE7destroyIS2_EEvPT_>
 800db78:	bf00      	nop
 800db7a:	3708      	adds	r7, #8
 800db7c:	46bd      	mov	sp, r7
 800db7e:	bd80      	pop	{r7, pc}

0800db80 <_ZN9__gnu_cxx13new_allocatorIN4tama10Stm32InputEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800db80:	b580      	push	{r7, lr}
 800db82:	b084      	sub	sp, #16
 800db84:	af00      	add	r7, sp, #0
 800db86:	60f8      	str	r0, [r7, #12]
 800db88:	60b9      	str	r1, [r7, #8]
 800db8a:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800db8c:	68f8      	ldr	r0, [r7, #12]
 800db8e:	f000 fc38 	bl	800e402 <_ZNK9__gnu_cxx13new_allocatorIN4tama10Stm32InputEE8max_sizeEv>
 800db92:	4602      	mov	r2, r0
 800db94:	68bb      	ldr	r3, [r7, #8]
 800db96:	4293      	cmp	r3, r2
 800db98:	bf8c      	ite	hi
 800db9a:	2301      	movhi	r3, #1
 800db9c:	2300      	movls	r3, #0
 800db9e:	b2db      	uxtb	r3, r3
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d001      	beq.n	800dba8 <_ZN9__gnu_cxx13new_allocatorIN4tama10Stm32InputEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800dba4:	f009 fcb5 	bl	8017512 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800dba8:	68bb      	ldr	r3, [r7, #8]
 800dbaa:	011b      	lsls	r3, r3, #4
 800dbac:	4618      	mov	r0, r3
 800dbae:	f009 fc82 	bl	80174b6 <_Znwj>
 800dbb2:	4603      	mov	r3, r0
      }
 800dbb4:	4618      	mov	r0, r3
 800dbb6:	3710      	adds	r7, #16
 800dbb8:	46bd      	mov	sp, r7
 800dbba:	bd80      	pop	{r7, pc}

0800dbbc <_ZSt11__addressofISaIN4tama10Stm32InputEEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800dbbc:	b480      	push	{r7}
 800dbbe:	b083      	sub	sp, #12
 800dbc0:	af00      	add	r7, sp, #0
 800dbc2:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	4618      	mov	r0, r3
 800dbc8:	370c      	adds	r7, #12
 800dbca:	46bd      	mov	sp, r7
 800dbcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbd0:	4770      	bx	lr

0800dbd2 <_ZN9__gnu_cxx13new_allocatorIN4tama10Stm32InputEE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 800dbd2:	b580      	push	{r7, lr}
 800dbd4:	b084      	sub	sp, #16
 800dbd6:	af00      	add	r7, sp, #0
 800dbd8:	60f8      	str	r0, [r7, #12]
 800dbda:	60b9      	str	r1, [r7, #8]
 800dbdc:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800dbde:	68b8      	ldr	r0, [r7, #8]
 800dbe0:	f009 fc82 	bl	80174e8 <_ZdlPv>
      }
 800dbe4:	bf00      	nop
 800dbe6:	3710      	adds	r7, #16
 800dbe8:	46bd      	mov	sp, r7
 800dbea:	bd80      	pop	{r7, pc}

0800dbec <_ZNSt6vectorISt10shared_ptrIN4tama7OnInputEESaIS3_EEC1Ev>:
      vector()
 800dbec:	b580      	push	{r7, lr}
 800dbee:	b082      	sub	sp, #8
 800dbf0:	af00      	add	r7, sp, #0
 800dbf2:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	4618      	mov	r0, r3
 800dbf8:	f000 fc1b 	bl	800e432 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama7OnInputEESaIS3_EEC1Ev>
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	4618      	mov	r0, r3
 800dc00:	3708      	adds	r7, #8
 800dc02:	46bd      	mov	sp, r7
 800dc04:	bd80      	pop	{r7, pc}

0800dc06 <_ZNSt6vectorISt10shared_ptrIN4tama7OnInputEESaIS3_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 800dc06:	b5b0      	push	{r4, r5, r7, lr}
 800dc08:	b082      	sub	sp, #8
 800dc0a:	af00      	add	r7, sp, #0
 800dc0c:	6078      	str	r0, [r7, #4]
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	681c      	ldr	r4, [r3, #0]
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator()); }
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	4618      	mov	r0, r3
 800dc1a:	f7f2 feb6 	bl	800098a <_ZNSt12_Vector_baseISt10shared_ptrIN4tama7OnInputEESaIS3_EE19_M_get_Tp_allocatorEv>
 800dc1e:	4603      	mov	r3, r0
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800dc20:	461a      	mov	r2, r3
 800dc22:	4629      	mov	r1, r5
 800dc24:	4620      	mov	r0, r4
 800dc26:	f7f2 fed4 	bl	80009d2 <_ZSt8_DestroyIPSt10shared_ptrIN4tama7OnInputEES3_EvT_S5_RSaIT0_E>
		      _M_get_Tp_allocator()); }
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	4618      	mov	r0, r3
 800dc2e:	f000 fc0d 	bl	800e44c <_ZNSt12_Vector_baseISt10shared_ptrIN4tama7OnInputEESaIS3_EED1Ev>
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	4618      	mov	r0, r3
 800dc36:	3708      	adds	r7, #8
 800dc38:	46bd      	mov	sp, r7
 800dc3a:	bdb0      	pop	{r4, r5, r7, pc}

0800dc3c <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800dc3c:	b480      	push	{r7}
 800dc3e:	b083      	sub	sp, #12
 800dc40:	af00      	add	r7, sp, #0
 800dc42:	6078      	str	r0, [r7, #4]
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	4618      	mov	r0, r3
 800dc48:	370c      	adds	r7, #12
 800dc4a:	46bd      	mov	sp, r7
 800dc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc50:	4770      	bx	lr

0800dc52 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800dc52:	b480      	push	{r7}
 800dc54:	b083      	sub	sp, #12
 800dc56:	af00      	add	r7, sp, #0
 800dc58:	6078      	str	r0, [r7, #4]
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	4618      	mov	r0, r3
 800dc5e:	370c      	adds	r7, #12
 800dc60:	46bd      	mov	sp, r7
 800dc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc66:	4770      	bx	lr

0800dc68 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>:
      allocate(allocator_type& __a, size_type __n)
 800dc68:	b580      	push	{r7, lr}
 800dc6a:	b082      	sub	sp, #8
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	6078      	str	r0, [r7, #4]
 800dc70:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800dc72:	2200      	movs	r2, #0
 800dc74:	6839      	ldr	r1, [r7, #0]
 800dc76:	6878      	ldr	r0, [r7, #4]
 800dc78:	f000 fc02 	bl	800e480 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>
 800dc7c:	4603      	mov	r3, r0
 800dc7e:	4618      	mov	r0, r3
 800dc80:	3708      	adds	r7, #8
 800dc82:	46bd      	mov	sp, r7
 800dc84:	bd80      	pop	{r7, pc}

0800dc86 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 800dc86:	b580      	push	{r7, lr}
 800dc88:	b084      	sub	sp, #16
 800dc8a:	af00      	add	r7, sp, #0
 800dc8c:	60f8      	str	r0, [r7, #12]
 800dc8e:	60b9      	str	r1, [r7, #8]
 800dc90:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 800dc92:	68b8      	ldr	r0, [r7, #8]
 800dc94:	f000 fc15 	bl	800e4c2 <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>
 800dc98:	4602      	mov	r2, r0
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	601a      	str	r2, [r3, #0]
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	687a      	ldr	r2, [r7, #4]
 800dca2:	605a      	str	r2, [r3, #4]
      { }
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	4618      	mov	r0, r3
 800dca8:	3710      	adds	r7, #16
 800dcaa:	46bd      	mov	sp, r7
 800dcac:	bd80      	pop	{r7, pc}

0800dcae <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800dcae:	b580      	push	{r7, lr}
 800dcb0:	b084      	sub	sp, #16
 800dcb2:	af00      	add	r7, sp, #0
 800dcb4:	60f8      	str	r0, [r7, #12]
 800dcb6:	60b9      	str	r1, [r7, #8]
 800dcb8:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800dcba:	687a      	ldr	r2, [r7, #4]
 800dcbc:	68b9      	ldr	r1, [r7, #8]
 800dcbe:	68f8      	ldr	r0, [r7, #12]
 800dcc0:	f000 fc0a 	bl	800e4d8 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>
 800dcc4:	bf00      	nop
 800dcc6:	3710      	adds	r7, #16
 800dcc8:	46bd      	mov	sp, r7
 800dcca:	bd80      	pop	{r7, pc}

0800dccc <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 800dccc:	b480      	push	{r7}
 800dcce:	b083      	sub	sp, #12
 800dcd0:	af00      	add	r7, sp, #0
 800dcd2:	6078      	str	r0, [r7, #4]
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	4618      	mov	r0, r3
 800dcd8:	370c      	adds	r7, #12
 800dcda:	46bd      	mov	sp, r7
 800dcdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dce0:	4770      	bx	lr

0800dce2 <_ZNSt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 800dce2:	b590      	push	{r4, r7, lr}
 800dce4:	b085      	sub	sp, #20
 800dce6:	af00      	add	r7, sp, #0
 800dce8:	60f8      	str	r0, [r7, #12]
 800dcea:	60b9      	str	r1, [r7, #8]
 800dcec:	607a      	str	r2, [r7, #4]
 800dcee:	603b      	str	r3, [r7, #0]
	: _M_ptr(__p), _Del_base(std::move(__d)), _Alloc_base(__a)
 800dcf0:	68fc      	ldr	r4, [r7, #12]
 800dcf2:	6878      	ldr	r0, [r7, #4]
 800dcf4:	f7fd ffdb 	bl	800bcae <_ZSt4moveIRNSt12__shared_ptrIN4tama10Stm32InputELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 800dcf8:	4603      	mov	r3, r0
 800dcfa:	4619      	mov	r1, r3
 800dcfc:	4620      	mov	r0, r4
 800dcfe:	f000 fbf8 	bl	800e4f2 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama10Stm32InputELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	3301      	adds	r3, #1
 800dd06:	6839      	ldr	r1, [r7, #0]
 800dd08:	4618      	mov	r0, r3
 800dd0a:	f000 fc05 	bl	800e518 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama10Stm32InputEELb1EEC1ERKS2_>
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	68ba      	ldr	r2, [r7, #8]
 800dd12:	605a      	str	r2, [r3, #4]
	{ }
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	4618      	mov	r0, r3
 800dd18:	3714      	adds	r7, #20
 800dd1a:	46bd      	mov	sp, r7
 800dd1c:	bd90      	pop	{r4, r7, pc}

0800dd1e <_ZNSt16allocator_traitsISaIN4tama10Stm32InputEEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 800dd1e:	b580      	push	{r7, lr}
 800dd20:	b082      	sub	sp, #8
 800dd22:	af00      	add	r7, sp, #0
 800dd24:	6078      	str	r0, [r7, #4]
 800dd26:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 800dd28:	6839      	ldr	r1, [r7, #0]
 800dd2a:	6878      	ldr	r0, [r7, #4]
 800dd2c:	f000 fc14 	bl	800e558 <_ZN9__gnu_cxx13new_allocatorIN4tama10Stm32InputEE7destroyIS2_EEvPT_>
 800dd30:	bf00      	nop
 800dd32:	3708      	adds	r7, #8
 800dd34:	46bd      	mov	sp, r7
 800dd36:	bd80      	pop	{r7, pc}

0800dd38 <_ZN9__gnu_cxx13new_allocatorIN4tama7ContextEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800dd38:	b580      	push	{r7, lr}
 800dd3a:	b084      	sub	sp, #16
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	60f8      	str	r0, [r7, #12]
 800dd40:	60b9      	str	r1, [r7, #8]
 800dd42:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800dd44:	68f8      	ldr	r0, [r7, #12]
 800dd46:	f000 fc13 	bl	800e570 <_ZNK9__gnu_cxx13new_allocatorIN4tama7ContextEE8max_sizeEv>
 800dd4a:	4602      	mov	r2, r0
 800dd4c:	68bb      	ldr	r3, [r7, #8]
 800dd4e:	4293      	cmp	r3, r2
 800dd50:	bf8c      	ite	hi
 800dd52:	2301      	movhi	r3, #1
 800dd54:	2300      	movls	r3, #0
 800dd56:	b2db      	uxtb	r3, r3
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d001      	beq.n	800dd60 <_ZN9__gnu_cxx13new_allocatorIN4tama7ContextEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800dd5c:	f009 fbd9 	bl	8017512 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800dd60:	68bb      	ldr	r3, [r7, #8]
 800dd62:	019b      	lsls	r3, r3, #6
 800dd64:	4618      	mov	r0, r3
 800dd66:	f009 fba6 	bl	80174b6 <_Znwj>
 800dd6a:	4603      	mov	r3, r0
      }
 800dd6c:	4618      	mov	r0, r3
 800dd6e:	3710      	adds	r7, #16
 800dd70:	46bd      	mov	sp, r7
 800dd72:	bd80      	pop	{r7, pc}

0800dd74 <_ZSt11__addressofISaIN4tama7ContextEEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800dd74:	b480      	push	{r7}
 800dd76:	b083      	sub	sp, #12
 800dd78:	af00      	add	r7, sp, #0
 800dd7a:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	4618      	mov	r0, r3
 800dd80:	370c      	adds	r7, #12
 800dd82:	46bd      	mov	sp, r7
 800dd84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd88:	4770      	bx	lr

0800dd8a <_ZN9__gnu_cxx13new_allocatorIN4tama7ContextEE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 800dd8a:	b580      	push	{r7, lr}
 800dd8c:	b084      	sub	sp, #16
 800dd8e:	af00      	add	r7, sp, #0
 800dd90:	60f8      	str	r0, [r7, #12]
 800dd92:	60b9      	str	r1, [r7, #8]
 800dd94:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800dd96:	68b8      	ldr	r0, [r7, #8]
 800dd98:	f009 fba6 	bl	80174e8 <_ZdlPv>
      }
 800dd9c:	bf00      	nop
 800dd9e:	3710      	adds	r7, #16
 800dda0:	46bd      	mov	sp, r7
 800dda2:	bd80      	pop	{r7, pc}

0800dda4 <_ZSt4moveIRSt10shared_ptrIN4tama11SoundPlayerEEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 800dda4:	b480      	push	{r7}
 800dda6:	b083      	sub	sp, #12
 800dda8:	af00      	add	r7, sp, #0
 800ddaa:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	4618      	mov	r0, r3
 800ddb0:	370c      	adds	r7, #12
 800ddb2:	46bd      	mov	sp, r7
 800ddb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddb8:	4770      	bx	lr

0800ddba <_ZNSt10shared_ptrIN4tama11SoundPlayerEEC1EOS2_>:
      shared_ptr(shared_ptr&& __r) noexcept
 800ddba:	b590      	push	{r4, r7, lr}
 800ddbc:	b083      	sub	sp, #12
 800ddbe:	af00      	add	r7, sp, #0
 800ddc0:	6078      	str	r0, [r7, #4]
 800ddc2:	6039      	str	r1, [r7, #0]
      : __shared_ptr<_Tp>(std::move(__r)) { }
 800ddc4:	687c      	ldr	r4, [r7, #4]
 800ddc6:	6838      	ldr	r0, [r7, #0]
 800ddc8:	f7ff ffec 	bl	800dda4 <_ZSt4moveIRSt10shared_ptrIN4tama11SoundPlayerEEEONSt16remove_referenceIT_E4typeEOS6_>
 800ddcc:	4603      	mov	r3, r0
 800ddce:	4619      	mov	r1, r3
 800ddd0:	4620      	mov	r0, r4
 800ddd2:	f000 fbd9 	bl	800e588 <_ZNSt12__shared_ptrIN4tama11SoundPlayerELN9__gnu_cxx12_Lock_policyE0EEC1EOS4_>
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	4618      	mov	r0, r3
 800ddda:	370c      	adds	r7, #12
 800dddc:	46bd      	mov	sp, r7
 800ddde:	bd90      	pop	{r4, r7, pc}

0800dde0 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800dde0:	b480      	push	{r7}
 800dde2:	b083      	sub	sp, #12
 800dde4:	af00      	add	r7, sp, #0
 800dde6:	6078      	str	r0, [r7, #4]
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	4618      	mov	r0, r3
 800ddec:	370c      	adds	r7, #12
 800ddee:	46bd      	mov	sp, r7
 800ddf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf4:	4770      	bx	lr

0800ddf6 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800ddf6:	b480      	push	{r7}
 800ddf8:	b083      	sub	sp, #12
 800ddfa:	af00      	add	r7, sp, #0
 800ddfc:	6078      	str	r0, [r7, #4]
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	4618      	mov	r0, r3
 800de02:	370c      	adds	r7, #12
 800de04:	46bd      	mov	sp, r7
 800de06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de0a:	4770      	bx	lr

0800de0c <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>:
      allocate(allocator_type& __a, size_type __n)
 800de0c:	b580      	push	{r7, lr}
 800de0e:	b082      	sub	sp, #8
 800de10:	af00      	add	r7, sp, #0
 800de12:	6078      	str	r0, [r7, #4]
 800de14:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800de16:	2200      	movs	r2, #0
 800de18:	6839      	ldr	r1, [r7, #0]
 800de1a:	6878      	ldr	r0, [r7, #4]
 800de1c:	f000 fbd2 	bl	800e5c4 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>
 800de20:	4603      	mov	r3, r0
 800de22:	4618      	mov	r0, r3
 800de24:	3708      	adds	r7, #8
 800de26:	46bd      	mov	sp, r7
 800de28:	bd80      	pop	{r7, pc}

0800de2a <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 800de2a:	b580      	push	{r7, lr}
 800de2c:	b084      	sub	sp, #16
 800de2e:	af00      	add	r7, sp, #0
 800de30:	60f8      	str	r0, [r7, #12]
 800de32:	60b9      	str	r1, [r7, #8]
 800de34:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 800de36:	68b8      	ldr	r0, [r7, #8]
 800de38:	f000 fbe5 	bl	800e606 <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>
 800de3c:	4602      	mov	r2, r0
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	601a      	str	r2, [r3, #0]
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	687a      	ldr	r2, [r7, #4]
 800de46:	605a      	str	r2, [r3, #4]
      { }
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	4618      	mov	r0, r3
 800de4c:	3710      	adds	r7, #16
 800de4e:	46bd      	mov	sp, r7
 800de50:	bd80      	pop	{r7, pc}

0800de52 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800de52:	b580      	push	{r7, lr}
 800de54:	b084      	sub	sp, #16
 800de56:	af00      	add	r7, sp, #0
 800de58:	60f8      	str	r0, [r7, #12]
 800de5a:	60b9      	str	r1, [r7, #8]
 800de5c:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800de5e:	687a      	ldr	r2, [r7, #4]
 800de60:	68b9      	ldr	r1, [r7, #8]
 800de62:	68f8      	ldr	r0, [r7, #12]
 800de64:	f000 fbda 	bl	800e61c <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>
 800de68:	bf00      	nop
 800de6a:	3710      	adds	r7, #16
 800de6c:	46bd      	mov	sp, r7
 800de6e:	bd80      	pop	{r7, pc}

0800de70 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 800de70:	b480      	push	{r7}
 800de72:	b083      	sub	sp, #12
 800de74:	af00      	add	r7, sp, #0
 800de76:	6078      	str	r0, [r7, #4]
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	4618      	mov	r0, r3
 800de7c:	370c      	adds	r7, #12
 800de7e:	46bd      	mov	sp, r7
 800de80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de84:	4770      	bx	lr

0800de86 <_ZNSt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 800de86:	b590      	push	{r4, r7, lr}
 800de88:	b085      	sub	sp, #20
 800de8a:	af00      	add	r7, sp, #0
 800de8c:	60f8      	str	r0, [r7, #12]
 800de8e:	60b9      	str	r1, [r7, #8]
 800de90:	607a      	str	r2, [r7, #4]
 800de92:	603b      	str	r3, [r7, #0]
	: _M_ptr(__p), _Del_base(std::move(__d)), _Alloc_base(__a)
 800de94:	68fc      	ldr	r4, [r7, #12]
 800de96:	6878      	ldr	r0, [r7, #4]
 800de98:	f7fe f819 	bl	800bece <_ZSt4moveIRNSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 800de9c:	4603      	mov	r3, r0
 800de9e:	4619      	mov	r1, r3
 800dea0:	4620      	mov	r0, r4
 800dea2:	f000 fbc8 	bl	800e636 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	3301      	adds	r3, #1
 800deaa:	6839      	ldr	r1, [r7, #0]
 800deac:	4618      	mov	r0, r3
 800deae:	f000 fbd5 	bl	800e65c <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama7ContextEELb1EEC1ERKS2_>
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	68ba      	ldr	r2, [r7, #8]
 800deb6:	605a      	str	r2, [r3, #4]
	{ }
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	4618      	mov	r0, r3
 800debc:	3714      	adds	r7, #20
 800debe:	46bd      	mov	sp, r7
 800dec0:	bd90      	pop	{r4, r7, pc}

0800dec2 <_ZNSt16allocator_traitsISaIN4tama7ContextEEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 800dec2:	b580      	push	{r7, lr}
 800dec4:	b082      	sub	sp, #8
 800dec6:	af00      	add	r7, sp, #0
 800dec8:	6078      	str	r0, [r7, #4]
 800deca:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 800decc:	6839      	ldr	r1, [r7, #0]
 800dece:	6878      	ldr	r0, [r7, #4]
 800ded0:	f000 fbfb 	bl	800e6ca <_ZN9__gnu_cxx13new_allocatorIN4tama7ContextEE7destroyIS2_EEvPT_>
 800ded4:	bf00      	nop
 800ded6:	3708      	adds	r7, #8
 800ded8:	46bd      	mov	sp, r7
 800deda:	bd80      	pop	{r7, pc}

0800dedc <_ZN9__gnu_cxx13new_allocatorIN4tama14InitialLoadingEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800dedc:	b580      	push	{r7, lr}
 800dede:	b084      	sub	sp, #16
 800dee0:	af00      	add	r7, sp, #0
 800dee2:	60f8      	str	r0, [r7, #12]
 800dee4:	60b9      	str	r1, [r7, #8]
 800dee6:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800dee8:	68f8      	ldr	r0, [r7, #12]
 800deea:	f000 fbfb 	bl	800e6e4 <_ZNK9__gnu_cxx13new_allocatorIN4tama14InitialLoadingEE8max_sizeEv>
 800deee:	4602      	mov	r2, r0
 800def0:	68bb      	ldr	r3, [r7, #8]
 800def2:	4293      	cmp	r3, r2
 800def4:	bf8c      	ite	hi
 800def6:	2301      	movhi	r3, #1
 800def8:	2300      	movls	r3, #0
 800defa:	b2db      	uxtb	r3, r3
 800defc:	2b00      	cmp	r3, #0
 800defe:	d001      	beq.n	800df04 <_ZN9__gnu_cxx13new_allocatorIN4tama14InitialLoadingEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800df00:	f009 fb07 	bl	8017512 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800df04:	68bb      	ldr	r3, [r7, #8]
 800df06:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 800df0a:	fb02 f303 	mul.w	r3, r2, r3
 800df0e:	4618      	mov	r0, r3
 800df10:	f009 fad1 	bl	80174b6 <_Znwj>
 800df14:	4603      	mov	r3, r0
      }
 800df16:	4618      	mov	r0, r3
 800df18:	3710      	adds	r7, #16
 800df1a:	46bd      	mov	sp, r7
 800df1c:	bd80      	pop	{r7, pc}

0800df1e <_ZSt11__addressofISaIN4tama14InitialLoadingEEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800df1e:	b480      	push	{r7}
 800df20:	b083      	sub	sp, #12
 800df22:	af00      	add	r7, sp, #0
 800df24:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	4618      	mov	r0, r3
 800df2a:	370c      	adds	r7, #12
 800df2c:	46bd      	mov	sp, r7
 800df2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df32:	4770      	bx	lr

0800df34 <_ZN9__gnu_cxx13new_allocatorIN4tama14InitialLoadingEE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 800df34:	b580      	push	{r7, lr}
 800df36:	b084      	sub	sp, #16
 800df38:	af00      	add	r7, sp, #0
 800df3a:	60f8      	str	r0, [r7, #12]
 800df3c:	60b9      	str	r1, [r7, #8]
 800df3e:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800df40:	68b8      	ldr	r0, [r7, #8]
 800df42:	f009 fad1 	bl	80174e8 <_ZdlPv>
      }
 800df46:	bf00      	nop
 800df48:	3710      	adds	r7, #16
 800df4a:	46bd      	mov	sp, r7
 800df4c:	bd80      	pop	{r7, pc}

0800df4e <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800df4e:	b480      	push	{r7}
 800df50:	b083      	sub	sp, #12
 800df52:	af00      	add	r7, sp, #0
 800df54:	6078      	str	r0, [r7, #4]
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	4618      	mov	r0, r3
 800df5a:	370c      	adds	r7, #12
 800df5c:	46bd      	mov	sp, r7
 800df5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df62:	4770      	bx	lr

0800df64 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800df64:	b480      	push	{r7}
 800df66:	b083      	sub	sp, #12
 800df68:	af00      	add	r7, sp, #0
 800df6a:	6078      	str	r0, [r7, #4]
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	4618      	mov	r0, r3
 800df70:	370c      	adds	r7, #12
 800df72:	46bd      	mov	sp, r7
 800df74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df78:	4770      	bx	lr

0800df7a <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>:
      allocate(allocator_type& __a, size_type __n)
 800df7a:	b580      	push	{r7, lr}
 800df7c:	b082      	sub	sp, #8
 800df7e:	af00      	add	r7, sp, #0
 800df80:	6078      	str	r0, [r7, #4]
 800df82:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800df84:	2200      	movs	r2, #0
 800df86:	6839      	ldr	r1, [r7, #0]
 800df88:	6878      	ldr	r0, [r7, #4]
 800df8a:	f000 fbb9 	bl	800e700 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>
 800df8e:	4603      	mov	r3, r0
 800df90:	4618      	mov	r0, r3
 800df92:	3708      	adds	r7, #8
 800df94:	46bd      	mov	sp, r7
 800df96:	bd80      	pop	{r7, pc}

0800df98 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 800df98:	b580      	push	{r7, lr}
 800df9a:	b084      	sub	sp, #16
 800df9c:	af00      	add	r7, sp, #0
 800df9e:	60f8      	str	r0, [r7, #12]
 800dfa0:	60b9      	str	r1, [r7, #8]
 800dfa2:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 800dfa4:	68b8      	ldr	r0, [r7, #8]
 800dfa6:	f000 fbcc 	bl	800e742 <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>
 800dfaa:	4602      	mov	r2, r0
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	601a      	str	r2, [r3, #0]
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	687a      	ldr	r2, [r7, #4]
 800dfb4:	605a      	str	r2, [r3, #4]
      { }
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	4618      	mov	r0, r3
 800dfba:	3710      	adds	r7, #16
 800dfbc:	46bd      	mov	sp, r7
 800dfbe:	bd80      	pop	{r7, pc}

0800dfc0 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800dfc0:	b580      	push	{r7, lr}
 800dfc2:	b084      	sub	sp, #16
 800dfc4:	af00      	add	r7, sp, #0
 800dfc6:	60f8      	str	r0, [r7, #12]
 800dfc8:	60b9      	str	r1, [r7, #8]
 800dfca:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800dfcc:	687a      	ldr	r2, [r7, #4]
 800dfce:	68b9      	ldr	r1, [r7, #8]
 800dfd0:	68f8      	ldr	r0, [r7, #12]
 800dfd2:	f000 fbc1 	bl	800e758 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>
 800dfd6:	bf00      	nop
 800dfd8:	3710      	adds	r7, #16
 800dfda:	46bd      	mov	sp, r7
 800dfdc:	bd80      	pop	{r7, pc}

0800dfde <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 800dfde:	b480      	push	{r7}
 800dfe0:	b083      	sub	sp, #12
 800dfe2:	af00      	add	r7, sp, #0
 800dfe4:	6078      	str	r0, [r7, #4]
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	4618      	mov	r0, r3
 800dfea:	370c      	adds	r7, #12
 800dfec:	46bd      	mov	sp, r7
 800dfee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff2:	4770      	bx	lr

0800dff4 <_ZNSt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 800dff4:	b590      	push	{r4, r7, lr}
 800dff6:	b085      	sub	sp, #20
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	60f8      	str	r0, [r7, #12]
 800dffc:	60b9      	str	r1, [r7, #8]
 800dffe:	607a      	str	r2, [r7, #4]
 800e000:	603b      	str	r3, [r7, #0]
	: _M_ptr(__p), _Del_base(std::move(__d)), _Alloc_base(__a)
 800e002:	68fc      	ldr	r4, [r7, #12]
 800e004:	6878      	ldr	r0, [r7, #4]
 800e006:	f7fe f850 	bl	800c0aa <_ZSt4moveIRNSt12__shared_ptrIN4tama14InitialLoadingELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 800e00a:	4603      	mov	r3, r0
 800e00c:	4619      	mov	r1, r3
 800e00e:	4620      	mov	r0, r4
 800e010:	f000 fbaf 	bl	800e772 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama14InitialLoadingELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	3301      	adds	r3, #1
 800e018:	6839      	ldr	r1, [r7, #0]
 800e01a:	4618      	mov	r0, r3
 800e01c:	f000 fbbc 	bl	800e798 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama14InitialLoadingEELb1EEC1ERKS2_>
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	68ba      	ldr	r2, [r7, #8]
 800e024:	605a      	str	r2, [r3, #4]
	{ }
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	4618      	mov	r0, r3
 800e02a:	3714      	adds	r7, #20
 800e02c:	46bd      	mov	sp, r7
 800e02e:	bd90      	pop	{r4, r7, pc}

0800e030 <_ZNSt16allocator_traitsISaIN4tama14InitialLoadingEEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 800e030:	b580      	push	{r7, lr}
 800e032:	b082      	sub	sp, #8
 800e034:	af00      	add	r7, sp, #0
 800e036:	6078      	str	r0, [r7, #4]
 800e038:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 800e03a:	6839      	ldr	r1, [r7, #0]
 800e03c:	6878      	ldr	r0, [r7, #4]
 800e03e:	f000 fbf5 	bl	800e82c <_ZN9__gnu_cxx13new_allocatorIN4tama14InitialLoadingEE7destroyIS2_EEvPT_>
 800e042:	bf00      	nop
 800e044:	3708      	adds	r7, #8
 800e046:	46bd      	mov	sp, r7
 800e048:	bd80      	pop	{r7, pc}

0800e04a <_ZNSt10_Head_baseILj0EPN4tama7DisplayELb0EE7_M_headERKS3_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 800e04a:	b480      	push	{r7}
 800e04c:	b083      	sub	sp, #12
 800e04e:	af00      	add	r7, sp, #0
 800e050:	6078      	str	r0, [r7, #4]
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	4618      	mov	r0, r3
 800e056:	370c      	adds	r7, #12
 800e058:	46bd      	mov	sp, r7
 800e05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e05e:	4770      	bx	lr

0800e060 <_ZNSt10_Head_baseILj0EPN4tama16Nokia5510DisplayELb0EE7_M_headERKS3_>:
 800e060:	b480      	push	{r7}
 800e062:	b083      	sub	sp, #12
 800e064:	af00      	add	r7, sp, #0
 800e066:	6078      	str	r0, [r7, #4]
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	4618      	mov	r0, r3
 800e06c:	370c      	adds	r7, #12
 800e06e:	46bd      	mov	sp, r7
 800e070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e074:	4770      	bx	lr

0800e076 <_ZNK9__gnu_cxx13new_allocatorIN4tama18Stm32TextureLoaderEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800e076:	b480      	push	{r7}
 800e078:	b083      	sub	sp, #12
 800e07a:	af00      	add	r7, sp, #0
 800e07c:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 800e07e:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800e082:	4618      	mov	r0, r3
 800e084:	370c      	adds	r7, #12
 800e086:	46bd      	mov	sp, r7
 800e088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e08c:	4770      	bx	lr

0800e08e <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800e08e:	b580      	push	{r7, lr}
 800e090:	b084      	sub	sp, #16
 800e092:	af00      	add	r7, sp, #0
 800e094:	60f8      	str	r0, [r7, #12]
 800e096:	60b9      	str	r1, [r7, #8]
 800e098:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800e09a:	68f8      	ldr	r0, [r7, #12]
 800e09c:	f000 fbd2 	bl	800e844 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>
 800e0a0:	4602      	mov	r2, r0
 800e0a2:	68bb      	ldr	r3, [r7, #8]
 800e0a4:	4293      	cmp	r3, r2
 800e0a6:	bf8c      	ite	hi
 800e0a8:	2301      	movhi	r3, #1
 800e0aa:	2300      	movls	r3, #0
 800e0ac:	b2db      	uxtb	r3, r3
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d001      	beq.n	800e0b6 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800e0b2:	f009 fa2e 	bl	8017512 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800e0b6:	68ba      	ldr	r2, [r7, #8]
 800e0b8:	4613      	mov	r3, r2
 800e0ba:	009b      	lsls	r3, r3, #2
 800e0bc:	4413      	add	r3, r2
 800e0be:	009b      	lsls	r3, r3, #2
 800e0c0:	4618      	mov	r0, r3
 800e0c2:	f009 f9f8 	bl	80174b6 <_Znwj>
 800e0c6:	4603      	mov	r3, r0
      }
 800e0c8:	4618      	mov	r0, r3
 800e0ca:	3710      	adds	r7, #16
 800e0cc:	46bd      	mov	sp, r7
 800e0ce:	bd80      	pop	{r7, pc}

0800e0d0 <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800e0d0:	b480      	push	{r7}
 800e0d2:	b083      	sub	sp, #12
 800e0d4:	af00      	add	r7, sp, #0
 800e0d6:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	4618      	mov	r0, r3
 800e0dc:	370c      	adds	r7, #12
 800e0de:	46bd      	mov	sp, r7
 800e0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0e4:	4770      	bx	lr

0800e0e6 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>:
      deallocate(pointer __p, size_type)
 800e0e6:	b580      	push	{r7, lr}
 800e0e8:	b084      	sub	sp, #16
 800e0ea:	af00      	add	r7, sp, #0
 800e0ec:	60f8      	str	r0, [r7, #12]
 800e0ee:	60b9      	str	r1, [r7, #8]
 800e0f0:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800e0f2:	68b8      	ldr	r0, [r7, #8]
 800e0f4:	f009 f9f8 	bl	80174e8 <_ZdlPv>
      }
 800e0f8:	bf00      	nop
 800e0fa:	3710      	adds	r7, #16
 800e0fc:	46bd      	mov	sp, r7
 800e0fe:	bd80      	pop	{r7, pc}

0800e100 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>:
      explicit _Sp_ebo_helper(_Tp&& __tp) : _M_tp(std::move(__tp)) { }
 800e100:	b590      	push	{r4, r7, lr}
 800e102:	b083      	sub	sp, #12
 800e104:	af00      	add	r7, sp, #0
 800e106:	6078      	str	r0, [r7, #4]
 800e108:	6039      	str	r1, [r7, #0]
 800e10a:	687c      	ldr	r4, [r7, #4]
 800e10c:	6838      	ldr	r0, [r7, #0]
 800e10e:	f7fd fa2e 	bl	800b56e <_ZSt4moveIRNSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 800e112:	4603      	mov	r3, r0
 800e114:	4619      	mov	r1, r3
 800e116:	4620      	mov	r0, r4
 800e118:	f7fd fa34 	bl	800b584 <_ZNSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	4618      	mov	r0, r3
 800e120:	370c      	adds	r7, #12
 800e122:	46bd      	mov	sp, r7
 800e124:	bd90      	pop	{r4, r7, pc}

0800e126 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama18Stm32TextureLoaderEELb1EEC1ERKS2_>:
      explicit _Sp_ebo_helper(const _Tp& __tp) : _Tp(__tp) { }
 800e126:	b580      	push	{r7, lr}
 800e128:	b082      	sub	sp, #8
 800e12a:	af00      	add	r7, sp, #0
 800e12c:	6078      	str	r0, [r7, #4]
 800e12e:	6039      	str	r1, [r7, #0]
 800e130:	6839      	ldr	r1, [r7, #0]
 800e132:	6878      	ldr	r0, [r7, #4]
 800e134:	f7fd f9bb 	bl	800b4ae <_ZNSaIN4tama18Stm32TextureLoaderEEC1ERKS1_>
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	4618      	mov	r0, r3
 800e13c:	3708      	adds	r7, #8
 800e13e:	46bd      	mov	sp, r7
 800e140:	bd80      	pop	{r7, pc}

0800e142 <_ZN9__gnu_cxx13new_allocatorIN4tama18Stm32TextureLoaderEE7destroyIS2_EEvPT_>:
	destroy(_Up* __p) { __p->~_Up(); }
 800e142:	b480      	push	{r7}
 800e144:	b083      	sub	sp, #12
 800e146:	af00      	add	r7, sp, #0
 800e148:	6078      	str	r0, [r7, #4]
 800e14a:	6039      	str	r1, [r7, #0]
 800e14c:	bf00      	nop
 800e14e:	370c      	adds	r7, #12
 800e150:	46bd      	mov	sp, r7
 800e152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e156:	4770      	bx	lr

0800e158 <_ZNK9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800e158:	b480      	push	{r7}
 800e15a:	b083      	sub	sp, #12
 800e15c:	af00      	add	r7, sp, #0
 800e15e:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 800e160:	4b03      	ldr	r3, [pc, #12]	; (800e170 <_ZNK9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEE8max_sizeEv+0x18>)
 800e162:	4618      	mov	r0, r3
 800e164:	370c      	adds	r7, #12
 800e166:	46bd      	mov	sp, r7
 800e168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e16c:	4770      	bx	lr
 800e16e:	bf00      	nop
 800e170:	0aaaaaaa 	.word	0x0aaaaaaa

0800e174 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800e174:	b580      	push	{r7, lr}
 800e176:	b084      	sub	sp, #16
 800e178:	af00      	add	r7, sp, #0
 800e17a:	60f8      	str	r0, [r7, #12]
 800e17c:	60b9      	str	r1, [r7, #8]
 800e17e:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800e180:	68f8      	ldr	r0, [r7, #12]
 800e182:	f000 fb6d 	bl	800e860 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>
 800e186:	4602      	mov	r2, r0
 800e188:	68bb      	ldr	r3, [r7, #8]
 800e18a:	4293      	cmp	r3, r2
 800e18c:	bf8c      	ite	hi
 800e18e:	2301      	movhi	r3, #1
 800e190:	2300      	movls	r3, #0
 800e192:	b2db      	uxtb	r3, r3
 800e194:	2b00      	cmp	r3, #0
 800e196:	d001      	beq.n	800e19c <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800e198:	f009 f9bb 	bl	8017512 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800e19c:	68ba      	ldr	r2, [r7, #8]
 800e19e:	4613      	mov	r3, r2
 800e1a0:	009b      	lsls	r3, r3, #2
 800e1a2:	4413      	add	r3, r2
 800e1a4:	009b      	lsls	r3, r3, #2
 800e1a6:	4618      	mov	r0, r3
 800e1a8:	f009 f985 	bl	80174b6 <_Znwj>
 800e1ac:	4603      	mov	r3, r0
      }
 800e1ae:	4618      	mov	r0, r3
 800e1b0:	3710      	adds	r7, #16
 800e1b2:	46bd      	mov	sp, r7
 800e1b4:	bd80      	pop	{r7, pc}

0800e1b6 <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800e1b6:	b480      	push	{r7}
 800e1b8:	b083      	sub	sp, #12
 800e1ba:	af00      	add	r7, sp, #0
 800e1bc:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	4618      	mov	r0, r3
 800e1c2:	370c      	adds	r7, #12
 800e1c4:	46bd      	mov	sp, r7
 800e1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ca:	4770      	bx	lr

0800e1cc <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>:
      deallocate(pointer __p, size_type)
 800e1cc:	b580      	push	{r7, lr}
 800e1ce:	b084      	sub	sp, #16
 800e1d0:	af00      	add	r7, sp, #0
 800e1d2:	60f8      	str	r0, [r7, #12]
 800e1d4:	60b9      	str	r1, [r7, #8]
 800e1d6:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800e1d8:	68b8      	ldr	r0, [r7, #8]
 800e1da:	f009 f985 	bl	80174e8 <_ZdlPv>
      }
 800e1de:	bf00      	nop
 800e1e0:	3710      	adds	r7, #16
 800e1e2:	46bd      	mov	sp, r7
 800e1e4:	bd80      	pop	{r7, pc}

0800e1e6 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>:
      explicit _Sp_ebo_helper(_Tp&& __tp) : _M_tp(std::move(__tp)) { }
 800e1e6:	b590      	push	{r4, r7, lr}
 800e1e8:	b083      	sub	sp, #12
 800e1ea:	af00      	add	r7, sp, #0
 800e1ec:	6078      	str	r0, [r7, #4]
 800e1ee:	6039      	str	r1, [r7, #0]
 800e1f0:	687c      	ldr	r4, [r7, #4]
 800e1f2:	6838      	ldr	r0, [r7, #0]
 800e1f4:	f7fd faa3 	bl	800b73e <_ZSt4moveIRNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 800e1f8:	4603      	mov	r3, r0
 800e1fa:	4619      	mov	r1, r3
 800e1fc:	4620      	mov	r0, r4
 800e1fe:	f7fd faa9 	bl	800b754 <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	4618      	mov	r0, r3
 800e206:	370c      	adds	r7, #12
 800e208:	46bd      	mov	sp, r7
 800e20a:	bd90      	pop	{r4, r7, pc}

0800e20c <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama27Nokia5110DisplayDataManagerEELb1EEC1ERKS2_>:
      explicit _Sp_ebo_helper(const _Tp& __tp) : _Tp(__tp) { }
 800e20c:	b580      	push	{r7, lr}
 800e20e:	b082      	sub	sp, #8
 800e210:	af00      	add	r7, sp, #0
 800e212:	6078      	str	r0, [r7, #4]
 800e214:	6039      	str	r1, [r7, #0]
 800e216:	6839      	ldr	r1, [r7, #0]
 800e218:	6878      	ldr	r0, [r7, #4]
 800e21a:	f7fd fa30 	bl	800b67e <_ZNSaIN4tama27Nokia5110DisplayDataManagerEEC1ERKS1_>
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	4618      	mov	r0, r3
 800e222:	3708      	adds	r7, #8
 800e224:	46bd      	mov	sp, r7
 800e226:	bd80      	pop	{r7, pc}

0800e228 <_ZN9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEE7destroyIS2_EEvPT_>:
	destroy(_Up* __p) { __p->~_Up(); }
 800e228:	b480      	push	{r7}
 800e22a:	b083      	sub	sp, #12
 800e22c:	af00      	add	r7, sp, #0
 800e22e:	6078      	str	r0, [r7, #4]
 800e230:	6039      	str	r1, [r7, #0]
 800e232:	bf00      	nop
 800e234:	370c      	adds	r7, #12
 800e236:	46bd      	mov	sp, r7
 800e238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e23c:	4770      	bx	lr

0800e23e <_ZNK9__gnu_cxx13new_allocatorIN4tama16Stm32TimeMonitorEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800e23e:	b480      	push	{r7}
 800e240:	b083      	sub	sp, #12
 800e242:	af00      	add	r7, sp, #0
 800e244:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 800e246:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800e24a:	4618      	mov	r0, r3
 800e24c:	370c      	adds	r7, #12
 800e24e:	46bd      	mov	sp, r7
 800e250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e254:	4770      	bx	lr

0800e256 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800e256:	b580      	push	{r7, lr}
 800e258:	b084      	sub	sp, #16
 800e25a:	af00      	add	r7, sp, #0
 800e25c:	60f8      	str	r0, [r7, #12]
 800e25e:	60b9      	str	r1, [r7, #8]
 800e260:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800e262:	68f8      	ldr	r0, [r7, #12]
 800e264:	f000 fb0a 	bl	800e87c <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>
 800e268:	4602      	mov	r2, r0
 800e26a:	68bb      	ldr	r3, [r7, #8]
 800e26c:	4293      	cmp	r3, r2
 800e26e:	bf8c      	ite	hi
 800e270:	2301      	movhi	r3, #1
 800e272:	2300      	movls	r3, #0
 800e274:	b2db      	uxtb	r3, r3
 800e276:	2b00      	cmp	r3, #0
 800e278:	d001      	beq.n	800e27e <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800e27a:	f009 f94a 	bl	8017512 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800e27e:	68ba      	ldr	r2, [r7, #8]
 800e280:	4613      	mov	r3, r2
 800e282:	009b      	lsls	r3, r3, #2
 800e284:	4413      	add	r3, r2
 800e286:	009b      	lsls	r3, r3, #2
 800e288:	4618      	mov	r0, r3
 800e28a:	f009 f914 	bl	80174b6 <_Znwj>
 800e28e:	4603      	mov	r3, r0
      }
 800e290:	4618      	mov	r0, r3
 800e292:	3710      	adds	r7, #16
 800e294:	46bd      	mov	sp, r7
 800e296:	bd80      	pop	{r7, pc}

0800e298 <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800e298:	b480      	push	{r7}
 800e29a:	b083      	sub	sp, #12
 800e29c:	af00      	add	r7, sp, #0
 800e29e:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	4618      	mov	r0, r3
 800e2a4:	370c      	adds	r7, #12
 800e2a6:	46bd      	mov	sp, r7
 800e2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ac:	4770      	bx	lr

0800e2ae <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>:
      deallocate(pointer __p, size_type)
 800e2ae:	b580      	push	{r7, lr}
 800e2b0:	b084      	sub	sp, #16
 800e2b2:	af00      	add	r7, sp, #0
 800e2b4:	60f8      	str	r0, [r7, #12]
 800e2b6:	60b9      	str	r1, [r7, #8]
 800e2b8:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800e2ba:	68b8      	ldr	r0, [r7, #8]
 800e2bc:	f009 f914 	bl	80174e8 <_ZdlPv>
      }
 800e2c0:	bf00      	nop
 800e2c2:	3710      	adds	r7, #16
 800e2c4:	46bd      	mov	sp, r7
 800e2c6:	bd80      	pop	{r7, pc}

0800e2c8 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama16Stm32TimeMonitorELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>:
      explicit _Sp_ebo_helper(_Tp&& __tp) : _M_tp(std::move(__tp)) { }
 800e2c8:	b590      	push	{r4, r7, lr}
 800e2ca:	b083      	sub	sp, #12
 800e2cc:	af00      	add	r7, sp, #0
 800e2ce:	6078      	str	r0, [r7, #4]
 800e2d0:	6039      	str	r1, [r7, #0]
 800e2d2:	687c      	ldr	r4, [r7, #4]
 800e2d4:	6838      	ldr	r0, [r7, #0]
 800e2d6:	f7fd fb1a 	bl	800b90e <_ZSt4moveIRNSt12__shared_ptrIN4tama16Stm32TimeMonitorELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 800e2da:	4603      	mov	r3, r0
 800e2dc:	4619      	mov	r1, r3
 800e2de:	4620      	mov	r0, r4
 800e2e0:	f7fd fb20 	bl	800b924 <_ZNSt12__shared_ptrIN4tama16Stm32TimeMonitorELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	4618      	mov	r0, r3
 800e2e8:	370c      	adds	r7, #12
 800e2ea:	46bd      	mov	sp, r7
 800e2ec:	bd90      	pop	{r4, r7, pc}

0800e2ee <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama16Stm32TimeMonitorEELb1EEC1ERKS2_>:
      explicit _Sp_ebo_helper(const _Tp& __tp) : _Tp(__tp) { }
 800e2ee:	b580      	push	{r7, lr}
 800e2f0:	b082      	sub	sp, #8
 800e2f2:	af00      	add	r7, sp, #0
 800e2f4:	6078      	str	r0, [r7, #4]
 800e2f6:	6039      	str	r1, [r7, #0]
 800e2f8:	6839      	ldr	r1, [r7, #0]
 800e2fa:	6878      	ldr	r0, [r7, #4]
 800e2fc:	f7fd faa7 	bl	800b84e <_ZNSaIN4tama16Stm32TimeMonitorEEC1ERKS1_>
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	4618      	mov	r0, r3
 800e304:	3708      	adds	r7, #8
 800e306:	46bd      	mov	sp, r7
 800e308:	bd80      	pop	{r7, pc}

0800e30a <_ZN9__gnu_cxx13new_allocatorIN4tama16Stm32TimeMonitorEE7destroyIS2_EEvPT_>:
	destroy(_Up* __p) { __p->~_Up(); }
 800e30a:	b480      	push	{r7}
 800e30c:	b083      	sub	sp, #12
 800e30e:	af00      	add	r7, sp, #0
 800e310:	6078      	str	r0, [r7, #4]
 800e312:	6039      	str	r1, [r7, #0]
 800e314:	bf00      	nop
 800e316:	370c      	adds	r7, #12
 800e318:	46bd      	mov	sp, r7
 800e31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e31e:	4770      	bx	lr

0800e320 <_ZNK9__gnu_cxx13new_allocatorIN4tama25Stm32SoundPlayingStrategyEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800e320:	b480      	push	{r7}
 800e322:	b083      	sub	sp, #12
 800e324:	af00      	add	r7, sp, #0
 800e326:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 800e328:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800e32c:	4618      	mov	r0, r3
 800e32e:	370c      	adds	r7, #12
 800e330:	46bd      	mov	sp, r7
 800e332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e336:	4770      	bx	lr

0800e338 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800e338:	b580      	push	{r7, lr}
 800e33a:	b084      	sub	sp, #16
 800e33c:	af00      	add	r7, sp, #0
 800e33e:	60f8      	str	r0, [r7, #12]
 800e340:	60b9      	str	r1, [r7, #8]
 800e342:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800e344:	68f8      	ldr	r0, [r7, #12]
 800e346:	f000 faa7 	bl	800e898 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>
 800e34a:	4602      	mov	r2, r0
 800e34c:	68bb      	ldr	r3, [r7, #8]
 800e34e:	4293      	cmp	r3, r2
 800e350:	bf8c      	ite	hi
 800e352:	2301      	movhi	r3, #1
 800e354:	2300      	movls	r3, #0
 800e356:	b2db      	uxtb	r3, r3
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d001      	beq.n	800e360 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800e35c:	f009 f8d9 	bl	8017512 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800e360:	68ba      	ldr	r2, [r7, #8]
 800e362:	4613      	mov	r3, r2
 800e364:	009b      	lsls	r3, r3, #2
 800e366:	4413      	add	r3, r2
 800e368:	009b      	lsls	r3, r3, #2
 800e36a:	4618      	mov	r0, r3
 800e36c:	f009 f8a3 	bl	80174b6 <_Znwj>
 800e370:	4603      	mov	r3, r0
      }
 800e372:	4618      	mov	r0, r3
 800e374:	3710      	adds	r7, #16
 800e376:	46bd      	mov	sp, r7
 800e378:	bd80      	pop	{r7, pc}

0800e37a <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800e37a:	b480      	push	{r7}
 800e37c:	b083      	sub	sp, #12
 800e37e:	af00      	add	r7, sp, #0
 800e380:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	4618      	mov	r0, r3
 800e386:	370c      	adds	r7, #12
 800e388:	46bd      	mov	sp, r7
 800e38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e38e:	4770      	bx	lr

0800e390 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>:
      deallocate(pointer __p, size_type)
 800e390:	b580      	push	{r7, lr}
 800e392:	b084      	sub	sp, #16
 800e394:	af00      	add	r7, sp, #0
 800e396:	60f8      	str	r0, [r7, #12]
 800e398:	60b9      	str	r1, [r7, #8]
 800e39a:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800e39c:	68b8      	ldr	r0, [r7, #8]
 800e39e:	f009 f8a3 	bl	80174e8 <_ZdlPv>
      }
 800e3a2:	bf00      	nop
 800e3a4:	3710      	adds	r7, #16
 800e3a6:	46bd      	mov	sp, r7
 800e3a8:	bd80      	pop	{r7, pc}

0800e3aa <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama25Stm32SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>:
      explicit _Sp_ebo_helper(_Tp&& __tp) : _M_tp(std::move(__tp)) { }
 800e3aa:	b590      	push	{r4, r7, lr}
 800e3ac:	b083      	sub	sp, #12
 800e3ae:	af00      	add	r7, sp, #0
 800e3b0:	6078      	str	r0, [r7, #4]
 800e3b2:	6039      	str	r1, [r7, #0]
 800e3b4:	687c      	ldr	r4, [r7, #4]
 800e3b6:	6838      	ldr	r0, [r7, #0]
 800e3b8:	f7fd fb91 	bl	800bade <_ZSt4moveIRNSt12__shared_ptrIN4tama25Stm32SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 800e3bc:	4603      	mov	r3, r0
 800e3be:	4619      	mov	r1, r3
 800e3c0:	4620      	mov	r0, r4
 800e3c2:	f7fd fb97 	bl	800baf4 <_ZNSt12__shared_ptrIN4tama25Stm32SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	4618      	mov	r0, r3
 800e3ca:	370c      	adds	r7, #12
 800e3cc:	46bd      	mov	sp, r7
 800e3ce:	bd90      	pop	{r4, r7, pc}

0800e3d0 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama25Stm32SoundPlayingStrategyEELb1EEC1ERKS2_>:
      explicit _Sp_ebo_helper(const _Tp& __tp) : _Tp(__tp) { }
 800e3d0:	b580      	push	{r7, lr}
 800e3d2:	b082      	sub	sp, #8
 800e3d4:	af00      	add	r7, sp, #0
 800e3d6:	6078      	str	r0, [r7, #4]
 800e3d8:	6039      	str	r1, [r7, #0]
 800e3da:	6839      	ldr	r1, [r7, #0]
 800e3dc:	6878      	ldr	r0, [r7, #4]
 800e3de:	f7fd fb1e 	bl	800ba1e <_ZNSaIN4tama25Stm32SoundPlayingStrategyEEC1ERKS1_>
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	4618      	mov	r0, r3
 800e3e6:	3708      	adds	r7, #8
 800e3e8:	46bd      	mov	sp, r7
 800e3ea:	bd80      	pop	{r7, pc}

0800e3ec <_ZN9__gnu_cxx13new_allocatorIN4tama25Stm32SoundPlayingStrategyEE7destroyIS2_EEvPT_>:
	destroy(_Up* __p) { __p->~_Up(); }
 800e3ec:	b480      	push	{r7}
 800e3ee:	b083      	sub	sp, #12
 800e3f0:	af00      	add	r7, sp, #0
 800e3f2:	6078      	str	r0, [r7, #4]
 800e3f4:	6039      	str	r1, [r7, #0]
 800e3f6:	bf00      	nop
 800e3f8:	370c      	adds	r7, #12
 800e3fa:	46bd      	mov	sp, r7
 800e3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e400:	4770      	bx	lr

0800e402 <_ZNK9__gnu_cxx13new_allocatorIN4tama10Stm32InputEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800e402:	b480      	push	{r7}
 800e404:	b083      	sub	sp, #12
 800e406:	af00      	add	r7, sp, #0
 800e408:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 800e40a:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800e40e:	4618      	mov	r0, r3
 800e410:	370c      	adds	r7, #12
 800e412:	46bd      	mov	sp, r7
 800e414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e418:	4770      	bx	lr

0800e41a <_ZNSt12_Vector_baseISt10shared_ptrIN4tama7OnInputEESaIS3_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 800e41a:	b580      	push	{r7, lr}
 800e41c:	b082      	sub	sp, #8
 800e41e:	af00      	add	r7, sp, #0
 800e420:	6078      	str	r0, [r7, #4]
 800e422:	6878      	ldr	r0, [r7, #4]
 800e424:	f000 fa5b 	bl	800e8de <_ZNSaISt10shared_ptrIN4tama7OnInputEEED1Ev>
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	4618      	mov	r0, r3
 800e42c:	3708      	adds	r7, #8
 800e42e:	46bd      	mov	sp, r7
 800e430:	bd80      	pop	{r7, pc}

0800e432 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama7OnInputEESaIS3_EEC1Ev>:
      _Vector_base()
 800e432:	b580      	push	{r7, lr}
 800e434:	b082      	sub	sp, #8
 800e436:	af00      	add	r7, sp, #0
 800e438:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	4618      	mov	r0, r3
 800e43e:	f000 fa39 	bl	800e8b4 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama7OnInputEESaIS3_EE12_Vector_implC1Ev>
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	4618      	mov	r0, r3
 800e446:	3708      	adds	r7, #8
 800e448:	46bd      	mov	sp, r7
 800e44a:	bd80      	pop	{r7, pc}

0800e44c <_ZNSt12_Vector_baseISt10shared_ptrIN4tama7OnInputEESaIS3_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800e44c:	b580      	push	{r7, lr}
 800e44e:	b082      	sub	sp, #8
 800e450:	af00      	add	r7, sp, #0
 800e452:	6078      	str	r0, [r7, #4]
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	6819      	ldr	r1, [r3, #0]
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	689b      	ldr	r3, [r3, #8]
		      - this->_M_impl._M_start); }
 800e45c:	461a      	mov	r2, r3
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	1ad3      	subs	r3, r2, r3
 800e464:	10db      	asrs	r3, r3, #3
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 800e466:	461a      	mov	r2, r3
 800e468:	6878      	ldr	r0, [r7, #4]
 800e46a:	f7f2 fac0 	bl	80009ee <_ZNSt12_Vector_baseISt10shared_ptrIN4tama7OnInputEESaIS3_EE13_M_deallocateEPS3_j>
		      - this->_M_impl._M_start); }
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	4618      	mov	r0, r3
 800e472:	f7ff ffd2 	bl	800e41a <_ZNSt12_Vector_baseISt10shared_ptrIN4tama7OnInputEESaIS3_EE12_Vector_implD1Ev>
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	4618      	mov	r0, r3
 800e47a:	3708      	adds	r7, #8
 800e47c:	46bd      	mov	sp, r7
 800e47e:	bd80      	pop	{r7, pc}

0800e480 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800e480:	b580      	push	{r7, lr}
 800e482:	b084      	sub	sp, #16
 800e484:	af00      	add	r7, sp, #0
 800e486:	60f8      	str	r0, [r7, #12]
 800e488:	60b9      	str	r1, [r7, #8]
 800e48a:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800e48c:	68f8      	ldr	r0, [r7, #12]
 800e48e:	f000 fa33 	bl	800e8f8 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>
 800e492:	4602      	mov	r2, r0
 800e494:	68bb      	ldr	r3, [r7, #8]
 800e496:	4293      	cmp	r3, r2
 800e498:	bf8c      	ite	hi
 800e49a:	2301      	movhi	r3, #1
 800e49c:	2300      	movls	r3, #0
 800e49e:	b2db      	uxtb	r3, r3
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d001      	beq.n	800e4a8 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800e4a4:	f009 f835 	bl	8017512 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800e4a8:	68ba      	ldr	r2, [r7, #8]
 800e4aa:	4613      	mov	r3, r2
 800e4ac:	009b      	lsls	r3, r3, #2
 800e4ae:	4413      	add	r3, r2
 800e4b0:	009b      	lsls	r3, r3, #2
 800e4b2:	4618      	mov	r0, r3
 800e4b4:	f008 ffff 	bl	80174b6 <_Znwj>
 800e4b8:	4603      	mov	r3, r0
      }
 800e4ba:	4618      	mov	r0, r3
 800e4bc:	3710      	adds	r7, #16
 800e4be:	46bd      	mov	sp, r7
 800e4c0:	bd80      	pop	{r7, pc}

0800e4c2 <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800e4c2:	b480      	push	{r7}
 800e4c4:	b083      	sub	sp, #12
 800e4c6:	af00      	add	r7, sp, #0
 800e4c8:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	4618      	mov	r0, r3
 800e4ce:	370c      	adds	r7, #12
 800e4d0:	46bd      	mov	sp, r7
 800e4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4d6:	4770      	bx	lr

0800e4d8 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>:
      deallocate(pointer __p, size_type)
 800e4d8:	b580      	push	{r7, lr}
 800e4da:	b084      	sub	sp, #16
 800e4dc:	af00      	add	r7, sp, #0
 800e4de:	60f8      	str	r0, [r7, #12]
 800e4e0:	60b9      	str	r1, [r7, #8]
 800e4e2:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800e4e4:	68b8      	ldr	r0, [r7, #8]
 800e4e6:	f008 ffff 	bl	80174e8 <_ZdlPv>
      }
 800e4ea:	bf00      	nop
 800e4ec:	3710      	adds	r7, #16
 800e4ee:	46bd      	mov	sp, r7
 800e4f0:	bd80      	pop	{r7, pc}

0800e4f2 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama10Stm32InputELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>:
      explicit _Sp_ebo_helper(_Tp&& __tp) : _M_tp(std::move(__tp)) { }
 800e4f2:	b590      	push	{r4, r7, lr}
 800e4f4:	b083      	sub	sp, #12
 800e4f6:	af00      	add	r7, sp, #0
 800e4f8:	6078      	str	r0, [r7, #4]
 800e4fa:	6039      	str	r1, [r7, #0]
 800e4fc:	687c      	ldr	r4, [r7, #4]
 800e4fe:	6838      	ldr	r0, [r7, #0]
 800e500:	f7fd fbd5 	bl	800bcae <_ZSt4moveIRNSt12__shared_ptrIN4tama10Stm32InputELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 800e504:	4603      	mov	r3, r0
 800e506:	4619      	mov	r1, r3
 800e508:	4620      	mov	r0, r4
 800e50a:	f7fd fbdb 	bl	800bcc4 <_ZNSt12__shared_ptrIN4tama10Stm32InputELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	4618      	mov	r0, r3
 800e512:	370c      	adds	r7, #12
 800e514:	46bd      	mov	sp, r7
 800e516:	bd90      	pop	{r4, r7, pc}

0800e518 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama10Stm32InputEELb1EEC1ERKS2_>:
      explicit _Sp_ebo_helper(const _Tp& __tp) : _Tp(__tp) { }
 800e518:	b580      	push	{r7, lr}
 800e51a:	b082      	sub	sp, #8
 800e51c:	af00      	add	r7, sp, #0
 800e51e:	6078      	str	r0, [r7, #4]
 800e520:	6039      	str	r1, [r7, #0]
 800e522:	6839      	ldr	r1, [r7, #0]
 800e524:	6878      	ldr	r0, [r7, #4]
 800e526:	f7fd fb62 	bl	800bbee <_ZNSaIN4tama10Stm32InputEEC1ERKS1_>
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	4618      	mov	r0, r3
 800e52e:	3708      	adds	r7, #8
 800e530:	46bd      	mov	sp, r7
 800e532:	bd80      	pop	{r7, pc}

0800e534 <_ZN4tama10Stm32InputD1Ev>:
 800e534:	b580      	push	{r7, lr}
 800e536:	b082      	sub	sp, #8
 800e538:	af00      	add	r7, sp, #0
 800e53a:	6078      	str	r0, [r7, #4]
 800e53c:	4a05      	ldr	r2, [pc, #20]	; (800e554 <_ZN4tama10Stm32InputD1Ev+0x20>)
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	601a      	str	r2, [r3, #0]
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	4618      	mov	r0, r3
 800e546:	f7fe fc4f 	bl	800cde8 <_ZN4tama5InputD1Ev>
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	4618      	mov	r0, r3
 800e54e:	3708      	adds	r7, #8
 800e550:	46bd      	mov	sp, r7
 800e552:	bd80      	pop	{r7, pc}
 800e554:	0801b168 	.word	0x0801b168

0800e558 <_ZN9__gnu_cxx13new_allocatorIN4tama10Stm32InputEE7destroyIS2_EEvPT_>:
	destroy(_Up* __p) { __p->~_Up(); }
 800e558:	b580      	push	{r7, lr}
 800e55a:	b082      	sub	sp, #8
 800e55c:	af00      	add	r7, sp, #0
 800e55e:	6078      	str	r0, [r7, #4]
 800e560:	6039      	str	r1, [r7, #0]
 800e562:	6838      	ldr	r0, [r7, #0]
 800e564:	f7ff ffe6 	bl	800e534 <_ZN4tama10Stm32InputD1Ev>
 800e568:	bf00      	nop
 800e56a:	3708      	adds	r7, #8
 800e56c:	46bd      	mov	sp, r7
 800e56e:	bd80      	pop	{r7, pc}

0800e570 <_ZNK9__gnu_cxx13new_allocatorIN4tama7ContextEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800e570:	b480      	push	{r7}
 800e572:	b083      	sub	sp, #12
 800e574:	af00      	add	r7, sp, #0
 800e576:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 800e578:	f06f 437c 	mvn.w	r3, #4227858432	; 0xfc000000
 800e57c:	4618      	mov	r0, r3
 800e57e:	370c      	adds	r7, #12
 800e580:	46bd      	mov	sp, r7
 800e582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e586:	4770      	bx	lr

0800e588 <_ZNSt12__shared_ptrIN4tama11SoundPlayerELN9__gnu_cxx12_Lock_policyE0EEC1EOS4_>:
      __shared_ptr(__shared_ptr&& __r) noexcept
 800e588:	b580      	push	{r7, lr}
 800e58a:	b082      	sub	sp, #8
 800e58c:	af00      	add	r7, sp, #0
 800e58e:	6078      	str	r0, [r7, #4]
 800e590:	6039      	str	r1, [r7, #0]
      : _M_ptr(__r._M_ptr), _M_refcount()
 800e592:	683b      	ldr	r3, [r7, #0]
 800e594:	681a      	ldr	r2, [r3, #0]
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	601a      	str	r2, [r3, #0]
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	3304      	adds	r3, #4
 800e59e:	4618      	mov	r0, r3
 800e5a0:	f7f2 fc6b 	bl	8000e7a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	_M_refcount._M_swap(__r._M_refcount);
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	1d1a      	adds	r2, r3, #4
 800e5a8:	683b      	ldr	r3, [r7, #0]
 800e5aa:	3304      	adds	r3, #4
 800e5ac:	4619      	mov	r1, r3
 800e5ae:	4610      	mov	r0, r2
 800e5b0:	f7f2 fc71 	bl	8000e96 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	__r._M_ptr = 0;
 800e5b4:	683b      	ldr	r3, [r7, #0]
 800e5b6:	2200      	movs	r2, #0
 800e5b8:	601a      	str	r2, [r3, #0]
      }
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	4618      	mov	r0, r3
 800e5be:	3708      	adds	r7, #8
 800e5c0:	46bd      	mov	sp, r7
 800e5c2:	bd80      	pop	{r7, pc}

0800e5c4 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800e5c4:	b580      	push	{r7, lr}
 800e5c6:	b084      	sub	sp, #16
 800e5c8:	af00      	add	r7, sp, #0
 800e5ca:	60f8      	str	r0, [r7, #12]
 800e5cc:	60b9      	str	r1, [r7, #8]
 800e5ce:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800e5d0:	68f8      	ldr	r0, [r7, #12]
 800e5d2:	f000 f99f 	bl	800e914 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>
 800e5d6:	4602      	mov	r2, r0
 800e5d8:	68bb      	ldr	r3, [r7, #8]
 800e5da:	4293      	cmp	r3, r2
 800e5dc:	bf8c      	ite	hi
 800e5de:	2301      	movhi	r3, #1
 800e5e0:	2300      	movls	r3, #0
 800e5e2:	b2db      	uxtb	r3, r3
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d001      	beq.n	800e5ec <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800e5e8:	f008 ff93 	bl	8017512 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800e5ec:	68ba      	ldr	r2, [r7, #8]
 800e5ee:	4613      	mov	r3, r2
 800e5f0:	009b      	lsls	r3, r3, #2
 800e5f2:	4413      	add	r3, r2
 800e5f4:	009b      	lsls	r3, r3, #2
 800e5f6:	4618      	mov	r0, r3
 800e5f8:	f008 ff5d 	bl	80174b6 <_Znwj>
 800e5fc:	4603      	mov	r3, r0
      }
 800e5fe:	4618      	mov	r0, r3
 800e600:	3710      	adds	r7, #16
 800e602:	46bd      	mov	sp, r7
 800e604:	bd80      	pop	{r7, pc}

0800e606 <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800e606:	b480      	push	{r7}
 800e608:	b083      	sub	sp, #12
 800e60a:	af00      	add	r7, sp, #0
 800e60c:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	4618      	mov	r0, r3
 800e612:	370c      	adds	r7, #12
 800e614:	46bd      	mov	sp, r7
 800e616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e61a:	4770      	bx	lr

0800e61c <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>:
      deallocate(pointer __p, size_type)
 800e61c:	b580      	push	{r7, lr}
 800e61e:	b084      	sub	sp, #16
 800e620:	af00      	add	r7, sp, #0
 800e622:	60f8      	str	r0, [r7, #12]
 800e624:	60b9      	str	r1, [r7, #8]
 800e626:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800e628:	68b8      	ldr	r0, [r7, #8]
 800e62a:	f008 ff5d 	bl	80174e8 <_ZdlPv>
      }
 800e62e:	bf00      	nop
 800e630:	3710      	adds	r7, #16
 800e632:	46bd      	mov	sp, r7
 800e634:	bd80      	pop	{r7, pc}

0800e636 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>:
      explicit _Sp_ebo_helper(_Tp&& __tp) : _M_tp(std::move(__tp)) { }
 800e636:	b590      	push	{r4, r7, lr}
 800e638:	b083      	sub	sp, #12
 800e63a:	af00      	add	r7, sp, #0
 800e63c:	6078      	str	r0, [r7, #4]
 800e63e:	6039      	str	r1, [r7, #0]
 800e640:	687c      	ldr	r4, [r7, #4]
 800e642:	6838      	ldr	r0, [r7, #0]
 800e644:	f7fd fc43 	bl	800bece <_ZSt4moveIRNSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 800e648:	4603      	mov	r3, r0
 800e64a:	4619      	mov	r1, r3
 800e64c:	4620      	mov	r0, r4
 800e64e:	f7fd fc49 	bl	800bee4 <_ZNSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	4618      	mov	r0, r3
 800e656:	370c      	adds	r7, #12
 800e658:	46bd      	mov	sp, r7
 800e65a:	bd90      	pop	{r4, r7, pc}

0800e65c <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama7ContextEELb1EEC1ERKS2_>:
      explicit _Sp_ebo_helper(const _Tp& __tp) : _Tp(__tp) { }
 800e65c:	b580      	push	{r7, lr}
 800e65e:	b082      	sub	sp, #8
 800e660:	af00      	add	r7, sp, #0
 800e662:	6078      	str	r0, [r7, #4]
 800e664:	6039      	str	r1, [r7, #0]
 800e666:	6839      	ldr	r1, [r7, #0]
 800e668:	6878      	ldr	r0, [r7, #4]
 800e66a:	f7fd fbbf 	bl	800bdec <_ZNSaIN4tama7ContextEEC1ERKS1_>
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	4618      	mov	r0, r3
 800e672:	3708      	adds	r7, #8
 800e674:	46bd      	mov	sp, r7
 800e676:	bd80      	pop	{r7, pc}

0800e678 <_ZNSt5stackISt10shared_ptrIN4tama5StageEESt5dequeIS3_SaIS3_EEED1Ev>:
    class stack
 800e678:	b580      	push	{r7, lr}
 800e67a:	b082      	sub	sp, #8
 800e67c:	af00      	add	r7, sp, #0
 800e67e:	6078      	str	r0, [r7, #4]
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	4618      	mov	r0, r3
 800e684:	f000 f954 	bl	800e930 <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EED1Ev>
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	4618      	mov	r0, r3
 800e68c:	3708      	adds	r7, #8
 800e68e:	46bd      	mov	sp, r7
 800e690:	bd80      	pop	{r7, pc}

0800e692 <_ZN4tama7ContextD1Ev>:

namespace tama
{
    class Stage;

    class Context
 800e692:	b580      	push	{r7, lr}
 800e694:	b082      	sub	sp, #8
 800e696:	af00      	add	r7, sp, #0
 800e698:	6078      	str	r0, [r7, #4]
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	3338      	adds	r3, #56	; 0x38
 800e69e:	4618      	mov	r0, r3
 800e6a0:	f7f5 f821 	bl	80036e6 <_ZNSt10shared_ptrIN4tama11SoundPlayerEED1Ev>
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	3330      	adds	r3, #48	; 0x30
 800e6a8:	4618      	mov	r0, r3
 800e6aa:	f7f3 fb0c 	bl	8001cc6 <_ZNSt10shared_ptrIN4tama5InputEED1Ev>
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	3328      	adds	r3, #40	; 0x28
 800e6b2:	4618      	mov	r0, r3
 800e6b4:	f7f5 f946 	bl	8003944 <_ZNSt10shared_ptrIN4tama13TextureLoaderEED1Ev>
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	4618      	mov	r0, r3
 800e6bc:	f7ff ffdc 	bl	800e678 <_ZNSt5stackISt10shared_ptrIN4tama5StageEESt5dequeIS3_SaIS3_EEED1Ev>
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	4618      	mov	r0, r3
 800e6c4:	3708      	adds	r7, #8
 800e6c6:	46bd      	mov	sp, r7
 800e6c8:	bd80      	pop	{r7, pc}

0800e6ca <_ZN9__gnu_cxx13new_allocatorIN4tama7ContextEE7destroyIS2_EEvPT_>:
	destroy(_Up* __p) { __p->~_Up(); }
 800e6ca:	b580      	push	{r7, lr}
 800e6cc:	b082      	sub	sp, #8
 800e6ce:	af00      	add	r7, sp, #0
 800e6d0:	6078      	str	r0, [r7, #4]
 800e6d2:	6039      	str	r1, [r7, #0]
 800e6d4:	6838      	ldr	r0, [r7, #0]
 800e6d6:	f7ff ffdc 	bl	800e692 <_ZN4tama7ContextD1Ev>
 800e6da:	bf00      	nop
 800e6dc:	3708      	adds	r7, #8
 800e6de:	46bd      	mov	sp, r7
 800e6e0:	bd80      	pop	{r7, pc}
	...

0800e6e4 <_ZNK9__gnu_cxx13new_allocatorIN4tama14InitialLoadingEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800e6e4:	b480      	push	{r7}
 800e6e6:	b083      	sub	sp, #12
 800e6e8:	af00      	add	r7, sp, #0
 800e6ea:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 800e6ec:	4b03      	ldr	r3, [pc, #12]	; (800e6fc <_ZNK9__gnu_cxx13new_allocatorIN4tama14InitialLoadingEE8max_sizeEv+0x18>)
 800e6ee:	4618      	mov	r0, r3
 800e6f0:	370c      	adds	r7, #12
 800e6f2:	46bd      	mov	sp, r7
 800e6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6f8:	4770      	bx	lr
 800e6fa:	bf00      	nop
 800e6fc:	009d89d8 	.word	0x009d89d8

0800e700 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800e700:	b580      	push	{r7, lr}
 800e702:	b084      	sub	sp, #16
 800e704:	af00      	add	r7, sp, #0
 800e706:	60f8      	str	r0, [r7, #12]
 800e708:	60b9      	str	r1, [r7, #8]
 800e70a:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800e70c:	68f8      	ldr	r0, [r7, #12]
 800e70e:	f000 f935 	bl	800e97c <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>
 800e712:	4602      	mov	r2, r0
 800e714:	68bb      	ldr	r3, [r7, #8]
 800e716:	4293      	cmp	r3, r2
 800e718:	bf8c      	ite	hi
 800e71a:	2301      	movhi	r3, #1
 800e71c:	2300      	movls	r3, #0
 800e71e:	b2db      	uxtb	r3, r3
 800e720:	2b00      	cmp	r3, #0
 800e722:	d001      	beq.n	800e728 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800e724:	f008 fef5 	bl	8017512 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800e728:	68ba      	ldr	r2, [r7, #8]
 800e72a:	4613      	mov	r3, r2
 800e72c:	009b      	lsls	r3, r3, #2
 800e72e:	4413      	add	r3, r2
 800e730:	009b      	lsls	r3, r3, #2
 800e732:	4618      	mov	r0, r3
 800e734:	f008 febf 	bl	80174b6 <_Znwj>
 800e738:	4603      	mov	r3, r0
      }
 800e73a:	4618      	mov	r0, r3
 800e73c:	3710      	adds	r7, #16
 800e73e:	46bd      	mov	sp, r7
 800e740:	bd80      	pop	{r7, pc}

0800e742 <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800e742:	b480      	push	{r7}
 800e744:	b083      	sub	sp, #12
 800e746:	af00      	add	r7, sp, #0
 800e748:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	4618      	mov	r0, r3
 800e74e:	370c      	adds	r7, #12
 800e750:	46bd      	mov	sp, r7
 800e752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e756:	4770      	bx	lr

0800e758 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>:
      deallocate(pointer __p, size_type)
 800e758:	b580      	push	{r7, lr}
 800e75a:	b084      	sub	sp, #16
 800e75c:	af00      	add	r7, sp, #0
 800e75e:	60f8      	str	r0, [r7, #12]
 800e760:	60b9      	str	r1, [r7, #8]
 800e762:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800e764:	68b8      	ldr	r0, [r7, #8]
 800e766:	f008 febf 	bl	80174e8 <_ZdlPv>
      }
 800e76a:	bf00      	nop
 800e76c:	3710      	adds	r7, #16
 800e76e:	46bd      	mov	sp, r7
 800e770:	bd80      	pop	{r7, pc}

0800e772 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama14InitialLoadingELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>:
      explicit _Sp_ebo_helper(_Tp&& __tp) : _M_tp(std::move(__tp)) { }
 800e772:	b590      	push	{r4, r7, lr}
 800e774:	b083      	sub	sp, #12
 800e776:	af00      	add	r7, sp, #0
 800e778:	6078      	str	r0, [r7, #4]
 800e77a:	6039      	str	r1, [r7, #0]
 800e77c:	687c      	ldr	r4, [r7, #4]
 800e77e:	6838      	ldr	r0, [r7, #0]
 800e780:	f7fd fc93 	bl	800c0aa <_ZSt4moveIRNSt12__shared_ptrIN4tama14InitialLoadingELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 800e784:	4603      	mov	r3, r0
 800e786:	4619      	mov	r1, r3
 800e788:	4620      	mov	r0, r4
 800e78a:	f7fd fc99 	bl	800c0c0 <_ZNSt12__shared_ptrIN4tama14InitialLoadingELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	4618      	mov	r0, r3
 800e792:	370c      	adds	r7, #12
 800e794:	46bd      	mov	sp, r7
 800e796:	bd90      	pop	{r4, r7, pc}

0800e798 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama14InitialLoadingEELb1EEC1ERKS2_>:
      explicit _Sp_ebo_helper(const _Tp& __tp) : _Tp(__tp) { }
 800e798:	b580      	push	{r7, lr}
 800e79a:	b082      	sub	sp, #8
 800e79c:	af00      	add	r7, sp, #0
 800e79e:	6078      	str	r0, [r7, #4]
 800e7a0:	6039      	str	r1, [r7, #0]
 800e7a2:	6839      	ldr	r1, [r7, #0]
 800e7a4:	6878      	ldr	r0, [r7, #4]
 800e7a6:	f7fd fc1a 	bl	800bfde <_ZNSaIN4tama14InitialLoadingEEC1ERKS1_>
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	4618      	mov	r0, r3
 800e7ae:	3708      	adds	r7, #8
 800e7b0:	46bd      	mov	sp, r7
 800e7b2:	bd80      	pop	{r7, pc}

0800e7b4 <_ZNSt5arrayIN4tama6SpriteELj9EED1Ev>:
    struct array
 800e7b4:	b590      	push	{r4, r7, lr}
 800e7b6:	b083      	sub	sp, #12
 800e7b8:	af00      	add	r7, sp, #0
 800e7ba:	6078      	str	r0, [r7, #4]
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d00a      	beq.n	800e7d8 <_ZNSt5arrayIN4tama6SpriteELj9EED1Ev+0x24>
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	f503 7490 	add.w	r4, r3, #288	; 0x120
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	429c      	cmp	r4, r3
 800e7cc:	d004      	beq.n	800e7d8 <_ZNSt5arrayIN4tama6SpriteELj9EED1Ev+0x24>
 800e7ce:	3c20      	subs	r4, #32
 800e7d0:	4620      	mov	r0, r4
 800e7d2:	f7f5 f85b 	bl	800388c <_ZN4tama6SpriteD1Ev>
 800e7d6:	e7f7      	b.n	800e7c8 <_ZNSt5arrayIN4tama6SpriteELj9EED1Ev+0x14>
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	4618      	mov	r0, r3
 800e7dc:	370c      	adds	r7, #12
 800e7de:	46bd      	mov	sp, r7
 800e7e0:	bd90      	pop	{r4, r7, pc}
	...

0800e7e4 <_ZN4tama14InitialLoadingD1Ev>:
#include "../../ui/display/drawable/sprite/Sprite.h"
#include "../../ui/display/drawable/text/Text.h"

namespace tama
{
    class InitialLoading : public Stage
 800e7e4:	b580      	push	{r7, lr}
 800e7e6:	b082      	sub	sp, #8
 800e7e8:	af00      	add	r7, sp, #0
 800e7ea:	6078      	str	r0, [r7, #4]
 800e7ec:	4a0e      	ldr	r2, [pc, #56]	; (800e828 <_ZN4tama14InitialLoadingD1Ev+0x44>)
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	601a      	str	r2, [r3, #0]
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800e7f8:	4618      	mov	r0, r3
 800e7fa:	f7f5 f873 	bl	80038e4 <_ZN4tama4TextD1Ev>
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	f503 739a 	add.w	r3, r3, #308	; 0x134
 800e804:	4618      	mov	r0, r3
 800e806:	f7f5 f841 	bl	800388c <_ZN4tama6SpriteD1Ev>
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	3314      	adds	r3, #20
 800e80e:	4618      	mov	r0, r3
 800e810:	f7ff ffd0 	bl	800e7b4 <_ZNSt5arrayIN4tama6SpriteELj9EED1Ev>
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	4618      	mov	r0, r3
 800e818:	f7f3 fcbe 	bl	8002198 <_ZN4tama5StageD1Ev>
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	4618      	mov	r0, r3
 800e820:	3708      	adds	r7, #8
 800e822:	46bd      	mov	sp, r7
 800e824:	bd80      	pop	{r7, pc}
 800e826:	bf00      	nop
 800e828:	0801a4ac 	.word	0x0801a4ac

0800e82c <_ZN9__gnu_cxx13new_allocatorIN4tama14InitialLoadingEE7destroyIS2_EEvPT_>:
	destroy(_Up* __p) { __p->~_Up(); }
 800e82c:	b580      	push	{r7, lr}
 800e82e:	b082      	sub	sp, #8
 800e830:	af00      	add	r7, sp, #0
 800e832:	6078      	str	r0, [r7, #4]
 800e834:	6039      	str	r1, [r7, #0]
 800e836:	6838      	ldr	r0, [r7, #0]
 800e838:	f7ff ffd4 	bl	800e7e4 <_ZN4tama14InitialLoadingD1Ev>
 800e83c:	bf00      	nop
 800e83e:	3708      	adds	r7, #8
 800e840:	46bd      	mov	sp, r7
 800e842:	bd80      	pop	{r7, pc}

0800e844 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800e844:	b480      	push	{r7}
 800e846:	b083      	sub	sp, #12
 800e848:	af00      	add	r7, sp, #0
 800e84a:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 800e84c:	4b03      	ldr	r3, [pc, #12]	; (800e85c <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv+0x18>)
 800e84e:	4618      	mov	r0, r3
 800e850:	370c      	adds	r7, #12
 800e852:	46bd      	mov	sp, r7
 800e854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e858:	4770      	bx	lr
 800e85a:	bf00      	nop
 800e85c:	0ccccccc 	.word	0x0ccccccc

0800e860 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800e860:	b480      	push	{r7}
 800e862:	b083      	sub	sp, #12
 800e864:	af00      	add	r7, sp, #0
 800e866:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 800e868:	4b03      	ldr	r3, [pc, #12]	; (800e878 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv+0x18>)
 800e86a:	4618      	mov	r0, r3
 800e86c:	370c      	adds	r7, #12
 800e86e:	46bd      	mov	sp, r7
 800e870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e874:	4770      	bx	lr
 800e876:	bf00      	nop
 800e878:	0ccccccc 	.word	0x0ccccccc

0800e87c <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800e87c:	b480      	push	{r7}
 800e87e:	b083      	sub	sp, #12
 800e880:	af00      	add	r7, sp, #0
 800e882:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 800e884:	4b03      	ldr	r3, [pc, #12]	; (800e894 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv+0x18>)
 800e886:	4618      	mov	r0, r3
 800e888:	370c      	adds	r7, #12
 800e88a:	46bd      	mov	sp, r7
 800e88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e890:	4770      	bx	lr
 800e892:	bf00      	nop
 800e894:	0ccccccc 	.word	0x0ccccccc

0800e898 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800e898:	b480      	push	{r7}
 800e89a:	b083      	sub	sp, #12
 800e89c:	af00      	add	r7, sp, #0
 800e89e:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 800e8a0:	4b03      	ldr	r3, [pc, #12]	; (800e8b0 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv+0x18>)
 800e8a2:	4618      	mov	r0, r3
 800e8a4:	370c      	adds	r7, #12
 800e8a6:	46bd      	mov	sp, r7
 800e8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ac:	4770      	bx	lr
 800e8ae:	bf00      	nop
 800e8b0:	0ccccccc 	.word	0x0ccccccc

0800e8b4 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama7OnInputEESaIS3_EE12_Vector_implC1Ev>:
	_Vector_impl()
 800e8b4:	b580      	push	{r7, lr}
 800e8b6:	b082      	sub	sp, #8
 800e8b8:	af00      	add	r7, sp, #0
 800e8ba:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 800e8bc:	6878      	ldr	r0, [r7, #4]
 800e8be:	f000 f86b 	bl	800e998 <_ZNSaISt10shared_ptrIN4tama7OnInputEEEC1Ev>
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	2200      	movs	r2, #0
 800e8c6:	601a      	str	r2, [r3, #0]
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	2200      	movs	r2, #0
 800e8cc:	605a      	str	r2, [r3, #4]
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	2200      	movs	r2, #0
 800e8d2:	609a      	str	r2, [r3, #8]
	{ }
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	4618      	mov	r0, r3
 800e8d8:	3708      	adds	r7, #8
 800e8da:	46bd      	mov	sp, r7
 800e8dc:	bd80      	pop	{r7, pc}

0800e8de <_ZNSaISt10shared_ptrIN4tama7OnInputEEED1Ev>:
 800e8de:	b580      	push	{r7, lr}
 800e8e0:	b082      	sub	sp, #8
 800e8e2:	af00      	add	r7, sp, #0
 800e8e4:	6078      	str	r0, [r7, #4]
 800e8e6:	6878      	ldr	r0, [r7, #4]
 800e8e8:	f000 f862 	bl	800e9b0 <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama7OnInputEEED1Ev>
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	4618      	mov	r0, r3
 800e8f0:	3708      	adds	r7, #8
 800e8f2:	46bd      	mov	sp, r7
 800e8f4:	bd80      	pop	{r7, pc}
	...

0800e8f8 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800e8f8:	b480      	push	{r7}
 800e8fa:	b083      	sub	sp, #12
 800e8fc:	af00      	add	r7, sp, #0
 800e8fe:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 800e900:	4b03      	ldr	r3, [pc, #12]	; (800e910 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv+0x18>)
 800e902:	4618      	mov	r0, r3
 800e904:	370c      	adds	r7, #12
 800e906:	46bd      	mov	sp, r7
 800e908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e90c:	4770      	bx	lr
 800e90e:	bf00      	nop
 800e910:	0ccccccc 	.word	0x0ccccccc

0800e914 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800e914:	b480      	push	{r7}
 800e916:	b083      	sub	sp, #12
 800e918:	af00      	add	r7, sp, #0
 800e91a:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 800e91c:	4b03      	ldr	r3, [pc, #12]	; (800e92c <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv+0x18>)
 800e91e:	4618      	mov	r0, r3
 800e920:	370c      	adds	r7, #12
 800e922:	46bd      	mov	sp, r7
 800e924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e928:	4770      	bx	lr
 800e92a:	bf00      	nop
 800e92c:	0ccccccc 	.word	0x0ccccccc

0800e930 <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EED1Ev>:
      ~deque()
 800e930:	b580      	push	{r7, lr}
 800e932:	b08a      	sub	sp, #40	; 0x28
 800e934:	af00      	add	r7, sp, #0
 800e936:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 800e938:	f107 0308 	add.w	r3, r7, #8
 800e93c:	6879      	ldr	r1, [r7, #4]
 800e93e:	4618      	mov	r0, r3
 800e940:	f000 f86f 	bl	800ea22 <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE5beginEv>
 800e944:	f107 0318 	add.w	r3, r7, #24
 800e948:	6879      	ldr	r1, [r7, #4]
 800e94a:	4618      	mov	r0, r3
 800e94c:	f7f2 fc5f 	bl	800120e <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE3endEv>
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	4618      	mov	r0, r3
 800e954:	f7f2 fc6a 	bl	800122c <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE19_M_get_Tp_allocatorEv>
 800e958:	4603      	mov	r3, r0
 800e95a:	f107 0218 	add.w	r2, r7, #24
 800e95e:	f107 0108 	add.w	r1, r7, #8
 800e962:	6878      	ldr	r0, [r7, #4]
 800e964:	f000 f86c 	bl	800ea40 <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE15_M_destroy_dataESt15_Deque_iteratorIS3_RS3_PS3_ES9_RKS4_>
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	4618      	mov	r0, r3
 800e96c:	f000 f837 	bl	800e9de <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EED1Ev>
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	4618      	mov	r0, r3
 800e974:	3728      	adds	r7, #40	; 0x28
 800e976:	46bd      	mov	sp, r7
 800e978:	bd80      	pop	{r7, pc}
	...

0800e97c <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800e97c:	b480      	push	{r7}
 800e97e:	b083      	sub	sp, #12
 800e980:	af00      	add	r7, sp, #0
 800e982:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 800e984:	4b03      	ldr	r3, [pc, #12]	; (800e994 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv+0x18>)
 800e986:	4618      	mov	r0, r3
 800e988:	370c      	adds	r7, #12
 800e98a:	46bd      	mov	sp, r7
 800e98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e990:	4770      	bx	lr
 800e992:	bf00      	nop
 800e994:	0ccccccc 	.word	0x0ccccccc

0800e998 <_ZNSaISt10shared_ptrIN4tama7OnInputEEEC1Ev>:
      allocator() throw() { }
 800e998:	b580      	push	{r7, lr}
 800e99a:	b082      	sub	sp, #8
 800e99c:	af00      	add	r7, sp, #0
 800e99e:	6078      	str	r0, [r7, #4]
 800e9a0:	6878      	ldr	r0, [r7, #4]
 800e9a2:	f000 f86c 	bl	800ea7e <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama7OnInputEEEC1Ev>
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	4618      	mov	r0, r3
 800e9aa:	3708      	adds	r7, #8
 800e9ac:	46bd      	mov	sp, r7
 800e9ae:	bd80      	pop	{r7, pc}

0800e9b0 <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama7OnInputEEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800e9b0:	b480      	push	{r7}
 800e9b2:	b083      	sub	sp, #12
 800e9b4:	af00      	add	r7, sp, #0
 800e9b6:	6078      	str	r0, [r7, #4]
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	4618      	mov	r0, r3
 800e9bc:	370c      	adds	r7, #12
 800e9be:	46bd      	mov	sp, r7
 800e9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9c4:	4770      	bx	lr

0800e9c6 <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE11_Deque_implD1Ev>:
      struct _Deque_impl
 800e9c6:	b580      	push	{r7, lr}
 800e9c8:	b082      	sub	sp, #8
 800e9ca:	af00      	add	r7, sp, #0
 800e9cc:	6078      	str	r0, [r7, #4]
 800e9ce:	6878      	ldr	r0, [r7, #4]
 800e9d0:	f000 f860 	bl	800ea94 <_ZNSaISt10shared_ptrIN4tama5StageEEED1Ev>
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	4618      	mov	r0, r3
 800e9d8:	3708      	adds	r7, #8
 800e9da:	46bd      	mov	sp, r7
 800e9dc:	bd80      	pop	{r7, pc}

0800e9de <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 800e9de:	b580      	push	{r7, lr}
 800e9e0:	b082      	sub	sp, #8
 800e9e2:	af00      	add	r7, sp, #0
 800e9e4:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d010      	beq.n	800ea10 <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 800e9f6:	3304      	adds	r3, #4
 800e9f8:	461a      	mov	r2, r3
 800e9fa:	6878      	ldr	r0, [r7, #4]
 800e9fc:	f000 f856 	bl	800eaac <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE16_M_destroy_nodesEPPS3_S7_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	6819      	ldr	r1, [r3, #0]
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	685b      	ldr	r3, [r3, #4]
 800ea08:	461a      	mov	r2, r3
 800ea0a:	6878      	ldr	r0, [r7, #4]
 800ea0c:	f7f2 fcc0 	bl	8001390 <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE17_M_deallocate_mapEPPS3_j>
    }
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	4618      	mov	r0, r3
 800ea14:	f7ff ffd7 	bl	800e9c6 <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE11_Deque_implD1Ev>
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	4618      	mov	r0, r3
 800ea1c:	3708      	adds	r7, #8
 800ea1e:	46bd      	mov	sp, r7
 800ea20:	bd80      	pop	{r7, pc}

0800ea22 <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800ea22:	b580      	push	{r7, lr}
 800ea24:	b082      	sub	sp, #8
 800ea26:	af00      	add	r7, sp, #0
 800ea28:	6078      	str	r0, [r7, #4]
 800ea2a:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 800ea2c:	683b      	ldr	r3, [r7, #0]
 800ea2e:	3308      	adds	r3, #8
 800ea30:	4619      	mov	r1, r3
 800ea32:	6878      	ldr	r0, [r7, #4]
 800ea34:	f7f2 fc05 	bl	8001242 <_ZNSt15_Deque_iteratorISt10shared_ptrIN4tama5StageEERS3_PS3_EC1ERKS6_>
 800ea38:	6878      	ldr	r0, [r7, #4]
 800ea3a:	3708      	adds	r7, #8
 800ea3c:	46bd      	mov	sp, r7
 800ea3e:	bd80      	pop	{r7, pc}

0800ea40 <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE15_M_destroy_dataESt15_Deque_iteratorIS3_RS3_PS3_ES9_RKS4_>:
      _M_destroy_data(iterator __first, iterator __last,
 800ea40:	b580      	push	{r7, lr}
 800ea42:	b08c      	sub	sp, #48	; 0x30
 800ea44:	af00      	add	r7, sp, #0
 800ea46:	60f8      	str	r0, [r7, #12]
 800ea48:	60b9      	str	r1, [r7, #8]
 800ea4a:	607a      	str	r2, [r7, #4]
 800ea4c:	603b      	str	r3, [r7, #0]
	  _M_destroy_data_aux(__first, __last);
 800ea4e:	f107 0310 	add.w	r3, r7, #16
 800ea52:	68b9      	ldr	r1, [r7, #8]
 800ea54:	4618      	mov	r0, r3
 800ea56:	f7f2 fbf4 	bl	8001242 <_ZNSt15_Deque_iteratorISt10shared_ptrIN4tama5StageEERS3_PS3_EC1ERKS6_>
 800ea5a:	f107 0320 	add.w	r3, r7, #32
 800ea5e:	6879      	ldr	r1, [r7, #4]
 800ea60:	4618      	mov	r0, r3
 800ea62:	f7f2 fbee 	bl	8001242 <_ZNSt15_Deque_iteratorISt10shared_ptrIN4tama5StageEERS3_PS3_EC1ERKS6_>
 800ea66:	f107 0220 	add.w	r2, r7, #32
 800ea6a:	f107 0310 	add.w	r3, r7, #16
 800ea6e:	4619      	mov	r1, r3
 800ea70:	68f8      	ldr	r0, [r7, #12]
 800ea72:	f000 f835 	bl	800eae0 <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE19_M_destroy_data_auxESt15_Deque_iteratorIS3_RS3_PS3_ES9_>
      }
 800ea76:	bf00      	nop
 800ea78:	3730      	adds	r7, #48	; 0x30
 800ea7a:	46bd      	mov	sp, r7
 800ea7c:	bd80      	pop	{r7, pc}

0800ea7e <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama7OnInputEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800ea7e:	b480      	push	{r7}
 800ea80:	b083      	sub	sp, #12
 800ea82:	af00      	add	r7, sp, #0
 800ea84:	6078      	str	r0, [r7, #4]
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	4618      	mov	r0, r3
 800ea8a:	370c      	adds	r7, #12
 800ea8c:	46bd      	mov	sp, r7
 800ea8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea92:	4770      	bx	lr

0800ea94 <_ZNSaISt10shared_ptrIN4tama5StageEEED1Ev>:
      ~allocator() throw() { }
 800ea94:	b580      	push	{r7, lr}
 800ea96:	b082      	sub	sp, #8
 800ea98:	af00      	add	r7, sp, #0
 800ea9a:	6078      	str	r0, [r7, #4]
 800ea9c:	6878      	ldr	r0, [r7, #4]
 800ea9e:	f000 f87a 	bl	800eb96 <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama5StageEEED1Ev>
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	4618      	mov	r0, r3
 800eaa6:	3708      	adds	r7, #8
 800eaa8:	46bd      	mov	sp, r7
 800eaaa:	bd80      	pop	{r7, pc}

0800eaac <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE16_M_destroy_nodesEPPS3_S7_>:
    _Deque_base<_Tp, _Alloc>::
 800eaac:	b580      	push	{r7, lr}
 800eaae:	b086      	sub	sp, #24
 800eab0:	af00      	add	r7, sp, #0
 800eab2:	60f8      	str	r0, [r7, #12]
 800eab4:	60b9      	str	r1, [r7, #8]
 800eab6:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 800eab8:	68bb      	ldr	r3, [r7, #8]
 800eaba:	617b      	str	r3, [r7, #20]
 800eabc:	697a      	ldr	r2, [r7, #20]
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	429a      	cmp	r2, r3
 800eac2:	d209      	bcs.n	800ead8 <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE16_M_destroy_nodesEPPS3_S7_+0x2c>
	_M_deallocate_node(*__n);
 800eac4:	697b      	ldr	r3, [r7, #20]
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	4619      	mov	r1, r3
 800eaca:	68f8      	ldr	r0, [r7, #12]
 800eacc:	f7f2 fcdd 	bl	800148a <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE18_M_deallocate_nodeEPS3_>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 800ead0:	697b      	ldr	r3, [r7, #20]
 800ead2:	3304      	adds	r3, #4
 800ead4:	617b      	str	r3, [r7, #20]
 800ead6:	e7f1      	b.n	800eabc <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE16_M_destroy_nodesEPPS3_S7_+0x10>
    }
 800ead8:	bf00      	nop
 800eada:	3718      	adds	r7, #24
 800eadc:	46bd      	mov	sp, r7
 800eade:	bd80      	pop	{r7, pc}

0800eae0 <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE19_M_destroy_data_auxESt15_Deque_iteratorIS3_RS3_PS3_ES9_>:
     deque<_Tp, _Alloc>::
 800eae0:	b5b0      	push	{r4, r5, r7, lr}
 800eae2:	b086      	sub	sp, #24
 800eae4:	af00      	add	r7, sp, #0
 800eae6:	60f8      	str	r0, [r7, #12]
 800eae8:	60b9      	str	r1, [r7, #8]
 800eaea:	607a      	str	r2, [r7, #4]
       for (_Map_pointer __node = __first._M_node + 1;
 800eaec:	68bb      	ldr	r3, [r7, #8]
 800eaee:	68db      	ldr	r3, [r3, #12]
 800eaf0:	3304      	adds	r3, #4
 800eaf2:	617b      	str	r3, [r7, #20]
	    __node < __last._M_node; ++__node)
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	68db      	ldr	r3, [r3, #12]
 800eaf8:	697a      	ldr	r2, [r7, #20]
 800eafa:	429a      	cmp	r2, r3
 800eafc:	d216      	bcs.n	800eb2c <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE19_M_destroy_data_auxESt15_Deque_iteratorIS3_RS3_PS3_ES9_+0x4c>
	 std::_Destroy(*__node, *__node + _S_buffer_size(),
 800eafe:	697b      	ldr	r3, [r7, #20]
 800eb00:	681d      	ldr	r5, [r3, #0]
 800eb02:	697b      	ldr	r3, [r7, #20]
 800eb04:	681c      	ldr	r4, [r3, #0]
 800eb06:	f000 f851 	bl	800ebac <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE14_S_buffer_sizeEv>
 800eb0a:	4603      	mov	r3, r0
 800eb0c:	00db      	lsls	r3, r3, #3
 800eb0e:	441c      	add	r4, r3
		       _M_get_Tp_allocator());
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	4618      	mov	r0, r3
 800eb14:	f7f2 fb8a 	bl	800122c <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE19_M_get_Tp_allocatorEv>
 800eb18:	4603      	mov	r3, r0
	 std::_Destroy(*__node, *__node + _S_buffer_size(),
 800eb1a:	461a      	mov	r2, r3
 800eb1c:	4621      	mov	r1, r4
 800eb1e:	4628      	mov	r0, r5
 800eb20:	f000 f84c 	bl	800ebbc <_ZSt8_DestroyIPSt10shared_ptrIN4tama5StageEES3_EvT_S5_RSaIT0_E>
       for (_Map_pointer __node = __first._M_node + 1;
 800eb24:	697b      	ldr	r3, [r7, #20]
 800eb26:	3304      	adds	r3, #4
 800eb28:	617b      	str	r3, [r7, #20]
 800eb2a:	e7e3      	b.n	800eaf4 <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE19_M_destroy_data_auxESt15_Deque_iteratorIS3_RS3_PS3_ES9_+0x14>
       if (__first._M_node != __last._M_node)
 800eb2c:	68bb      	ldr	r3, [r7, #8]
 800eb2e:	68da      	ldr	r2, [r3, #12]
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	68db      	ldr	r3, [r3, #12]
 800eb34:	429a      	cmp	r2, r3
 800eb36:	d01c      	beq.n	800eb72 <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE19_M_destroy_data_auxESt15_Deque_iteratorIS3_RS3_PS3_ES9_+0x92>
	   std::_Destroy(__first._M_cur, __first._M_last,
 800eb38:	68bb      	ldr	r3, [r7, #8]
 800eb3a:	681c      	ldr	r4, [r3, #0]
 800eb3c:	68bb      	ldr	r3, [r7, #8]
 800eb3e:	689d      	ldr	r5, [r3, #8]
			 _M_get_Tp_allocator());
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	4618      	mov	r0, r3
 800eb44:	f7f2 fb72 	bl	800122c <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE19_M_get_Tp_allocatorEv>
 800eb48:	4603      	mov	r3, r0
	   std::_Destroy(__first._M_cur, __first._M_last,
 800eb4a:	461a      	mov	r2, r3
 800eb4c:	4629      	mov	r1, r5
 800eb4e:	4620      	mov	r0, r4
 800eb50:	f000 f834 	bl	800ebbc <_ZSt8_DestroyIPSt10shared_ptrIN4tama5StageEES3_EvT_S5_RSaIT0_E>
	   std::_Destroy(__last._M_first, __last._M_cur,
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	685c      	ldr	r4, [r3, #4]
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	681d      	ldr	r5, [r3, #0]
			 _M_get_Tp_allocator());
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	4618      	mov	r0, r3
 800eb60:	f7f2 fb64 	bl	800122c <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE19_M_get_Tp_allocatorEv>
 800eb64:	4603      	mov	r3, r0
	   std::_Destroy(__last._M_first, __last._M_cur,
 800eb66:	461a      	mov	r2, r3
 800eb68:	4629      	mov	r1, r5
 800eb6a:	4620      	mov	r0, r4
 800eb6c:	f000 f826 	bl	800ebbc <_ZSt8_DestroyIPSt10shared_ptrIN4tama5StageEES3_EvT_S5_RSaIT0_E>
     }
 800eb70:	e00d      	b.n	800eb8e <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE19_M_destroy_data_auxESt15_Deque_iteratorIS3_RS3_PS3_ES9_+0xae>
	 std::_Destroy(__first._M_cur, __last._M_cur,
 800eb72:	68bb      	ldr	r3, [r7, #8]
 800eb74:	681c      	ldr	r4, [r3, #0]
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	681d      	ldr	r5, [r3, #0]
		       _M_get_Tp_allocator());
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	4618      	mov	r0, r3
 800eb7e:	f7f2 fb55 	bl	800122c <_ZNSt11_Deque_baseISt10shared_ptrIN4tama5StageEESaIS3_EE19_M_get_Tp_allocatorEv>
 800eb82:	4603      	mov	r3, r0
	 std::_Destroy(__first._M_cur, __last._M_cur,
 800eb84:	461a      	mov	r2, r3
 800eb86:	4629      	mov	r1, r5
 800eb88:	4620      	mov	r0, r4
 800eb8a:	f000 f817 	bl	800ebbc <_ZSt8_DestroyIPSt10shared_ptrIN4tama5StageEES3_EvT_S5_RSaIT0_E>
     }
 800eb8e:	bf00      	nop
 800eb90:	3718      	adds	r7, #24
 800eb92:	46bd      	mov	sp, r7
 800eb94:	bdb0      	pop	{r4, r5, r7, pc}

0800eb96 <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama5StageEEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800eb96:	b480      	push	{r7}
 800eb98:	b083      	sub	sp, #12
 800eb9a:	af00      	add	r7, sp, #0
 800eb9c:	6078      	str	r0, [r7, #4]
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	4618      	mov	r0, r3
 800eba2:	370c      	adds	r7, #12
 800eba4:	46bd      	mov	sp, r7
 800eba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebaa:	4770      	bx	lr

0800ebac <_ZNSt5dequeISt10shared_ptrIN4tama5StageEESaIS3_EE14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 800ebac:	b580      	push	{r7, lr}
 800ebae:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 800ebb0:	2008      	movs	r0, #8
 800ebb2:	f7f2 f985 	bl	8000ec0 <_ZSt16__deque_buf_sizej>
 800ebb6:	4603      	mov	r3, r0
 800ebb8:	4618      	mov	r0, r3
 800ebba:	bd80      	pop	{r7, pc}

0800ebbc <_ZSt8_DestroyIPSt10shared_ptrIN4tama5StageEES3_EvT_S5_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800ebbc:	b580      	push	{r7, lr}
 800ebbe:	b084      	sub	sp, #16
 800ebc0:	af00      	add	r7, sp, #0
 800ebc2:	60f8      	str	r0, [r7, #12]
 800ebc4:	60b9      	str	r1, [r7, #8]
 800ebc6:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800ebc8:	68b9      	ldr	r1, [r7, #8]
 800ebca:	68f8      	ldr	r0, [r7, #12]
 800ebcc:	f000 f804 	bl	800ebd8 <_ZSt8_DestroyIPSt10shared_ptrIN4tama5StageEEEvT_S5_>
    }
 800ebd0:	bf00      	nop
 800ebd2:	3710      	adds	r7, #16
 800ebd4:	46bd      	mov	sp, r7
 800ebd6:	bd80      	pop	{r7, pc}

0800ebd8 <_ZSt8_DestroyIPSt10shared_ptrIN4tama5StageEEEvT_S5_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800ebd8:	b580      	push	{r7, lr}
 800ebda:	b082      	sub	sp, #8
 800ebdc:	af00      	add	r7, sp, #0
 800ebde:	6078      	str	r0, [r7, #4]
 800ebe0:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 800ebe2:	6839      	ldr	r1, [r7, #0]
 800ebe4:	6878      	ldr	r0, [r7, #4]
 800ebe6:	f000 f80f 	bl	800ec08 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt10shared_ptrIN4tama5StageEEEEvT_S7_>
    }
 800ebea:	bf00      	nop
 800ebec:	3708      	adds	r7, #8
 800ebee:	46bd      	mov	sp, r7
 800ebf0:	bd80      	pop	{r7, pc}

0800ebf2 <_ZSt11__addressofISt10shared_ptrIN4tama5StageEEEPT_RS4_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800ebf2:	b480      	push	{r7}
 800ebf4:	b083      	sub	sp, #12
 800ebf6:	af00      	add	r7, sp, #0
 800ebf8:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	4618      	mov	r0, r3
 800ebfe:	370c      	adds	r7, #12
 800ec00:	46bd      	mov	sp, r7
 800ec02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec06:	4770      	bx	lr

0800ec08 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt10shared_ptrIN4tama5StageEEEEvT_S7_>:
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
 800ec08:	b580      	push	{r7, lr}
 800ec0a:	b082      	sub	sp, #8
 800ec0c:	af00      	add	r7, sp, #0
 800ec0e:	6078      	str	r0, [r7, #4]
 800ec10:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800ec12:	687a      	ldr	r2, [r7, #4]
 800ec14:	683b      	ldr	r3, [r7, #0]
 800ec16:	429a      	cmp	r2, r3
 800ec18:	d00a      	beq.n	800ec30 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt10shared_ptrIN4tama5StageEEEEvT_S7_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 800ec1a:	6878      	ldr	r0, [r7, #4]
 800ec1c:	f7ff ffe9 	bl	800ebf2 <_ZSt11__addressofISt10shared_ptrIN4tama5StageEEEPT_RS4_>
 800ec20:	4603      	mov	r3, r0
 800ec22:	4618      	mov	r0, r3
 800ec24:	f000 f808 	bl	800ec38 <_ZSt8_DestroyISt10shared_ptrIN4tama5StageEEEvPT_>
	  for (; __first != __last; ++__first)
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	3308      	adds	r3, #8
 800ec2c:	607b      	str	r3, [r7, #4]
 800ec2e:	e7f0      	b.n	800ec12 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt10shared_ptrIN4tama5StageEEEEvT_S7_+0xa>
	}
 800ec30:	bf00      	nop
 800ec32:	3708      	adds	r7, #8
 800ec34:	46bd      	mov	sp, r7
 800ec36:	bd80      	pop	{r7, pc}

0800ec38 <_ZSt8_DestroyISt10shared_ptrIN4tama5StageEEEvPT_>:
    _Destroy(_Tp* __pointer)
 800ec38:	b580      	push	{r7, lr}
 800ec3a:	b082      	sub	sp, #8
 800ec3c:	af00      	add	r7, sp, #0
 800ec3e:	6078      	str	r0, [r7, #4]
    { __pointer->~_Tp(); }
 800ec40:	6878      	ldr	r0, [r7, #4]
 800ec42:	f7f2 f994 	bl	8000f6e <_ZNSt10shared_ptrIN4tama5StageEED1Ev>
 800ec46:	bf00      	nop
 800ec48:	3708      	adds	r7, #8
 800ec4a:	46bd      	mov	sp, r7
 800ec4c:	bd80      	pop	{r7, pc}
	...

0800ec50 <_ZNSt15_Sp_counted_ptrIPN4tama11SoundPlayerELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 800ec50:	b580      	push	{r7, lr}
 800ec52:	b082      	sub	sp, #8
 800ec54:	af00      	add	r7, sp, #0
 800ec56:	6078      	str	r0, [r7, #4]
 800ec58:	4a05      	ldr	r2, [pc, #20]	; (800ec70 <_ZNSt15_Sp_counted_ptrIPN4tama11SoundPlayerELN9__gnu_cxx12_Lock_policyE0EED1Ev+0x20>)
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	601a      	str	r2, [r3, #0]
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	4618      	mov	r0, r3
 800ec62:	f7f3 f93b 	bl	8001edc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	4618      	mov	r0, r3
 800ec6a:	3708      	adds	r7, #8
 800ec6c:	46bd      	mov	sp, r7
 800ec6e:	bd80      	pop	{r7, pc}
 800ec70:	0801b0e4 	.word	0x0801b0e4

0800ec74 <_ZNSt15_Sp_counted_ptrIPN4tama11SoundPlayerELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 800ec74:	b580      	push	{r7, lr}
 800ec76:	b082      	sub	sp, #8
 800ec78:	af00      	add	r7, sp, #0
 800ec7a:	6078      	str	r0, [r7, #4]
 800ec7c:	6878      	ldr	r0, [r7, #4]
 800ec7e:	f7ff ffe7 	bl	800ec50 <_ZNSt15_Sp_counted_ptrIPN4tama11SoundPlayerELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800ec82:	2110      	movs	r1, #16
 800ec84:	6878      	ldr	r0, [r7, #4]
 800ec86:	f008 fc14 	bl	80174b2 <_ZdlPvj>
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	4618      	mov	r0, r3
 800ec8e:	3708      	adds	r7, #8
 800ec90:	46bd      	mov	sp, r7
 800ec92:	bd80      	pop	{r7, pc}

0800ec94 <_ZNSt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:
      ~_Sp_counted_deleter() noexcept { }
 800ec94:	b580      	push	{r7, lr}
 800ec96:	b082      	sub	sp, #8
 800ec98:	af00      	add	r7, sp, #0
 800ec9a:	6078      	str	r0, [r7, #4]
 800ec9c:	4a08      	ldr	r2, [pc, #32]	; (800ecc0 <_ZNSt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev+0x2c>)
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	601a      	str	r2, [r3, #0]
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	330c      	adds	r3, #12
 800eca6:	4618      	mov	r0, r3
 800eca8:	f7fe fbeb 	bl	800d482 <_ZNSt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	4618      	mov	r0, r3
 800ecb0:	f7f3 f914 	bl	8001edc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	4618      	mov	r0, r3
 800ecb8:	3708      	adds	r7, #8
 800ecba:	46bd      	mov	sp, r7
 800ecbc:	bd80      	pop	{r7, pc}
 800ecbe:	bf00      	nop
 800ecc0:	0801b020 	.word	0x0801b020

0800ecc4 <_ZNSt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
 800ecc4:	b580      	push	{r7, lr}
 800ecc6:	b082      	sub	sp, #8
 800ecc8:	af00      	add	r7, sp, #0
 800ecca:	6078      	str	r0, [r7, #4]
 800eccc:	6878      	ldr	r0, [r7, #4]
 800ecce:	f7ff ffe1 	bl	800ec94 <_ZNSt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
 800ecd2:	2114      	movs	r1, #20
 800ecd4:	6878      	ldr	r0, [r7, #4]
 800ecd6:	f008 fbec 	bl	80174b2 <_ZdlPvj>
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	4618      	mov	r0, r3
 800ecde:	3708      	adds	r7, #8
 800ece0:	46bd      	mov	sp, r7
 800ece2:	bd80      	pop	{r7, pc}

0800ece4 <_ZNSt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      _M_dispose() noexcept
 800ece4:	b580      	push	{r7, lr}
 800ece6:	b082      	sub	sp, #8
 800ece8:	af00      	add	r7, sp, #0
 800ecea:	6078      	str	r0, [r7, #4]
      { _M_impl._M_del()(_M_impl._M_ptr); }
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	330c      	adds	r3, #12
 800ecf0:	4618      	mov	r0, r3
 800ecf2:	f000 fb19 	bl	800f328 <_ZNSt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>
 800ecf6:	4602      	mov	r2, r0
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	691b      	ldr	r3, [r3, #16]
 800ecfc:	4619      	mov	r1, r3
 800ecfe:	4610      	mov	r0, r2
 800ed00:	f7fe fc0f 	bl	800d522 <_ZNSt12__shared_ptrIN4tama14InitialLoadingELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>
 800ed04:	bf00      	nop
 800ed06:	3708      	adds	r7, #8
 800ed08:	46bd      	mov	sp, r7
 800ed0a:	bd80      	pop	{r7, pc}

0800ed0c <_ZNSt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      _M_destroy() noexcept
 800ed0c:	b580      	push	{r7, lr}
 800ed0e:	b086      	sub	sp, #24
 800ed10:	af00      	add	r7, sp, #0
 800ed12:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	330c      	adds	r3, #12
 800ed18:	4618      	mov	r0, r3
 800ed1a:	f000 fb12 	bl	800f342 <_ZNSt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>
 800ed1e:	4602      	mov	r2, r0
 800ed20:	f107 0314 	add.w	r3, r7, #20
 800ed24:	4611      	mov	r1, r2
 800ed26:	4618      	mov	r0, r3
 800ed28:	f7fe fb43 	bl	800d3b2 <_ZNSaISt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 800ed2c:	f107 0114 	add.w	r1, r7, #20
 800ed30:	f107 030c 	add.w	r3, r7, #12
 800ed34:	687a      	ldr	r2, [r7, #4]
 800ed36:	4618      	mov	r0, r3
 800ed38:	f7ff f92e 	bl	800df98 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
	this->~_Sp_counted_deleter();
 800ed3c:	6878      	ldr	r0, [r7, #4]
 800ed3e:	f7ff ffa9 	bl	800ec94 <_ZNSt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 800ed42:	f107 030c 	add.w	r3, r7, #12
 800ed46:	4618      	mov	r0, r3
 800ed48:	f7fe fb5f 	bl	800d40a <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	__allocator_type __a(_M_impl._M_alloc());
 800ed4c:	f107 0314 	add.w	r3, r7, #20
 800ed50:	4618      	mov	r0, r3
 800ed52:	f7fe fb3b 	bl	800d3cc <_ZNSaISt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
      }
 800ed56:	bf00      	nop
 800ed58:	3718      	adds	r7, #24
 800ed5a:	46bd      	mov	sp, r7
 800ed5c:	bd80      	pop	{r7, pc}

0800ed5e <_ZNSt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept
 800ed5e:	b480      	push	{r7}
 800ed60:	b083      	sub	sp, #12
 800ed62:	af00      	add	r7, sp, #0
 800ed64:	6078      	str	r0, [r7, #4]
 800ed66:	6039      	str	r1, [r7, #0]
        return nullptr;
 800ed68:	2300      	movs	r3, #0
      }
 800ed6a:	4618      	mov	r0, r3
 800ed6c:	370c      	adds	r7, #12
 800ed6e:	46bd      	mov	sp, r7
 800ed70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed74:	4770      	bx	lr
	...

0800ed78 <_ZNSt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:
      ~_Sp_counted_deleter() noexcept { }
 800ed78:	b580      	push	{r7, lr}
 800ed7a:	b082      	sub	sp, #8
 800ed7c:	af00      	add	r7, sp, #0
 800ed7e:	6078      	str	r0, [r7, #4]
 800ed80:	4a08      	ldr	r2, [pc, #32]	; (800eda4 <_ZNSt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev+0x2c>)
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	601a      	str	r2, [r3, #0]
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	330c      	adds	r3, #12
 800ed8a:	4618      	mov	r0, r3
 800ed8c:	f7fe fa3e 	bl	800d20c <_ZNSt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	4618      	mov	r0, r3
 800ed94:	f7f3 f8a2 	bl	8001edc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	4618      	mov	r0, r3
 800ed9c:	3708      	adds	r7, #8
 800ed9e:	46bd      	mov	sp, r7
 800eda0:	bd80      	pop	{r7, pc}
 800eda2:	bf00      	nop
 800eda4:	0801b03c 	.word	0x0801b03c

0800eda8 <_ZNSt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
 800eda8:	b580      	push	{r7, lr}
 800edaa:	b082      	sub	sp, #8
 800edac:	af00      	add	r7, sp, #0
 800edae:	6078      	str	r0, [r7, #4]
 800edb0:	6878      	ldr	r0, [r7, #4]
 800edb2:	f7ff ffe1 	bl	800ed78 <_ZNSt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
 800edb6:	2114      	movs	r1, #20
 800edb8:	6878      	ldr	r0, [r7, #4]
 800edba:	f008 fb7a 	bl	80174b2 <_ZdlPvj>
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	4618      	mov	r0, r3
 800edc2:	3708      	adds	r7, #8
 800edc4:	46bd      	mov	sp, r7
 800edc6:	bd80      	pop	{r7, pc}

0800edc8 <_ZNSt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      _M_dispose() noexcept
 800edc8:	b580      	push	{r7, lr}
 800edca:	b082      	sub	sp, #8
 800edcc:	af00      	add	r7, sp, #0
 800edce:	6078      	str	r0, [r7, #4]
      { _M_impl._M_del()(_M_impl._M_ptr); }
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	330c      	adds	r3, #12
 800edd4:	4618      	mov	r0, r3
 800edd6:	f000 fac2 	bl	800f35e <_ZNSt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>
 800edda:	4602      	mov	r2, r0
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	691b      	ldr	r3, [r3, #16]
 800ede0:	4619      	mov	r1, r3
 800ede2:	4610      	mov	r0, r2
 800ede4:	f7fe fa61 	bl	800d2aa <_ZNSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>
 800ede8:	bf00      	nop
 800edea:	3708      	adds	r7, #8
 800edec:	46bd      	mov	sp, r7
 800edee:	bd80      	pop	{r7, pc}

0800edf0 <_ZNSt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      _M_destroy() noexcept
 800edf0:	b580      	push	{r7, lr}
 800edf2:	b086      	sub	sp, #24
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	330c      	adds	r3, #12
 800edfc:	4618      	mov	r0, r3
 800edfe:	f000 fabb 	bl	800f378 <_ZNSt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>
 800ee02:	4602      	mov	r2, r0
 800ee04:	f107 0314 	add.w	r3, r7, #20
 800ee08:	4611      	mov	r1, r2
 800ee0a:	4618      	mov	r0, r3
 800ee0c:	f7fe f996 	bl	800d13c <_ZNSaISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 800ee10:	f107 0114 	add.w	r1, r7, #20
 800ee14:	f107 030c 	add.w	r3, r7, #12
 800ee18:	687a      	ldr	r2, [r7, #4]
 800ee1a:	4618      	mov	r0, r3
 800ee1c:	f7ff f805 	bl	800de2a <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
	this->~_Sp_counted_deleter();
 800ee20:	6878      	ldr	r0, [r7, #4]
 800ee22:	f7ff ffa9 	bl	800ed78 <_ZNSt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 800ee26:	f107 030c 	add.w	r3, r7, #12
 800ee2a:	4618      	mov	r0, r3
 800ee2c:	f7fe f9b2 	bl	800d194 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	__allocator_type __a(_M_impl._M_alloc());
 800ee30:	f107 0314 	add.w	r3, r7, #20
 800ee34:	4618      	mov	r0, r3
 800ee36:	f7fe f98e 	bl	800d156 <_ZNSaISt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
      }
 800ee3a:	bf00      	nop
 800ee3c:	3718      	adds	r7, #24
 800ee3e:	46bd      	mov	sp, r7
 800ee40:	bd80      	pop	{r7, pc}

0800ee42 <_ZNSt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept
 800ee42:	b480      	push	{r7}
 800ee44:	b083      	sub	sp, #12
 800ee46:	af00      	add	r7, sp, #0
 800ee48:	6078      	str	r0, [r7, #4]
 800ee4a:	6039      	str	r1, [r7, #0]
        return nullptr;
 800ee4c:	2300      	movs	r3, #0
      }
 800ee4e:	4618      	mov	r0, r3
 800ee50:	370c      	adds	r7, #12
 800ee52:	46bd      	mov	sp, r7
 800ee54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee58:	4770      	bx	lr
	...

0800ee5c <_ZNSt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:
      ~_Sp_counted_deleter() noexcept { }
 800ee5c:	b580      	push	{r7, lr}
 800ee5e:	b082      	sub	sp, #8
 800ee60:	af00      	add	r7, sp, #0
 800ee62:	6078      	str	r0, [r7, #4]
 800ee64:	4a08      	ldr	r2, [pc, #32]	; (800ee88 <_ZNSt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev+0x2c>)
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	601a      	str	r2, [r3, #0]
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	330c      	adds	r3, #12
 800ee6e:	4618      	mov	r0, r3
 800ee70:	f7fe f862 	bl	800cf38 <_ZNSt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	4618      	mov	r0, r3
 800ee78:	f7f3 f830 	bl	8001edc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	4618      	mov	r0, r3
 800ee80:	3708      	adds	r7, #8
 800ee82:	46bd      	mov	sp, r7
 800ee84:	bd80      	pop	{r7, pc}
 800ee86:	bf00      	nop
 800ee88:	0801b058 	.word	0x0801b058

0800ee8c <_ZNSt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
 800ee8c:	b580      	push	{r7, lr}
 800ee8e:	b082      	sub	sp, #8
 800ee90:	af00      	add	r7, sp, #0
 800ee92:	6078      	str	r0, [r7, #4]
 800ee94:	6878      	ldr	r0, [r7, #4]
 800ee96:	f7ff ffe1 	bl	800ee5c <_ZNSt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
 800ee9a:	2114      	movs	r1, #20
 800ee9c:	6878      	ldr	r0, [r7, #4]
 800ee9e:	f008 fb08 	bl	80174b2 <_ZdlPvj>
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	4618      	mov	r0, r3
 800eea6:	3708      	adds	r7, #8
 800eea8:	46bd      	mov	sp, r7
 800eeaa:	bd80      	pop	{r7, pc}

0800eeac <_ZNSt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      _M_dispose() noexcept
 800eeac:	b580      	push	{r7, lr}
 800eeae:	b082      	sub	sp, #8
 800eeb0:	af00      	add	r7, sp, #0
 800eeb2:	6078      	str	r0, [r7, #4]
      { _M_impl._M_del()(_M_impl._M_ptr); }
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	330c      	adds	r3, #12
 800eeb8:	4618      	mov	r0, r3
 800eeba:	f000 fa6b 	bl	800f394 <_ZNSt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>
 800eebe:	4602      	mov	r2, r0
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	691b      	ldr	r3, [r3, #16]
 800eec4:	4619      	mov	r1, r3
 800eec6:	4610      	mov	r0, r2
 800eec8:	f7fe f885 	bl	800cfd6 <_ZNSt12__shared_ptrIN4tama10Stm32InputELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>
 800eecc:	bf00      	nop
 800eece:	3708      	adds	r7, #8
 800eed0:	46bd      	mov	sp, r7
 800eed2:	bd80      	pop	{r7, pc}

0800eed4 <_ZNSt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      _M_destroy() noexcept
 800eed4:	b580      	push	{r7, lr}
 800eed6:	b086      	sub	sp, #24
 800eed8:	af00      	add	r7, sp, #0
 800eeda:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	330c      	adds	r3, #12
 800eee0:	4618      	mov	r0, r3
 800eee2:	f000 fa64 	bl	800f3ae <_ZNSt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>
 800eee6:	4602      	mov	r2, r0
 800eee8:	f107 0314 	add.w	r3, r7, #20
 800eeec:	4611      	mov	r1, r2
 800eeee:	4618      	mov	r0, r3
 800eef0:	f7fd ffba 	bl	800ce68 <_ZNSaISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 800eef4:	f107 0114 	add.w	r1, r7, #20
 800eef8:	f107 030c 	add.w	r3, r7, #12
 800eefc:	687a      	ldr	r2, [r7, #4]
 800eefe:	4618      	mov	r0, r3
 800ef00:	f7fe fec1 	bl	800dc86 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
	this->~_Sp_counted_deleter();
 800ef04:	6878      	ldr	r0, [r7, #4]
 800ef06:	f7ff ffa9 	bl	800ee5c <_ZNSt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 800ef0a:	f107 030c 	add.w	r3, r7, #12
 800ef0e:	4618      	mov	r0, r3
 800ef10:	f7fd ffd6 	bl	800cec0 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	__allocator_type __a(_M_impl._M_alloc());
 800ef14:	f107 0314 	add.w	r3, r7, #20
 800ef18:	4618      	mov	r0, r3
 800ef1a:	f7fd ffb2 	bl	800ce82 <_ZNSaISt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
      }
 800ef1e:	bf00      	nop
 800ef20:	3718      	adds	r7, #24
 800ef22:	46bd      	mov	sp, r7
 800ef24:	bd80      	pop	{r7, pc}

0800ef26 <_ZNSt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept
 800ef26:	b480      	push	{r7}
 800ef28:	b083      	sub	sp, #12
 800ef2a:	af00      	add	r7, sp, #0
 800ef2c:	6078      	str	r0, [r7, #4]
 800ef2e:	6039      	str	r1, [r7, #0]
        return nullptr;
 800ef30:	2300      	movs	r3, #0
      }
 800ef32:	4618      	mov	r0, r3
 800ef34:	370c      	adds	r7, #12
 800ef36:	46bd      	mov	sp, r7
 800ef38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef3c:	4770      	bx	lr
	...

0800ef40 <_ZNSt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:
      ~_Sp_counted_deleter() noexcept { }
 800ef40:	b580      	push	{r7, lr}
 800ef42:	b082      	sub	sp, #8
 800ef44:	af00      	add	r7, sp, #0
 800ef46:	6078      	str	r0, [r7, #4]
 800ef48:	4a08      	ldr	r2, [pc, #32]	; (800ef6c <_ZNSt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev+0x2c>)
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	601a      	str	r2, [r3, #0]
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	330c      	adds	r3, #12
 800ef52:	4618      	mov	r0, r3
 800ef54:	f7fd fe7c 	bl	800cc50 <_ZNSt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	4618      	mov	r0, r3
 800ef5c:	f7f2 ffbe 	bl	8001edc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	4618      	mov	r0, r3
 800ef64:	3708      	adds	r7, #8
 800ef66:	46bd      	mov	sp, r7
 800ef68:	bd80      	pop	{r7, pc}
 800ef6a:	bf00      	nop
 800ef6c:	0801b074 	.word	0x0801b074

0800ef70 <_ZNSt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
 800ef70:	b580      	push	{r7, lr}
 800ef72:	b082      	sub	sp, #8
 800ef74:	af00      	add	r7, sp, #0
 800ef76:	6078      	str	r0, [r7, #4]
 800ef78:	6878      	ldr	r0, [r7, #4]
 800ef7a:	f7ff ffe1 	bl	800ef40 <_ZNSt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
 800ef7e:	2114      	movs	r1, #20
 800ef80:	6878      	ldr	r0, [r7, #4]
 800ef82:	f008 fa96 	bl	80174b2 <_ZdlPvj>
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	4618      	mov	r0, r3
 800ef8a:	3708      	adds	r7, #8
 800ef8c:	46bd      	mov	sp, r7
 800ef8e:	bd80      	pop	{r7, pc}

0800ef90 <_ZNSt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      _M_dispose() noexcept
 800ef90:	b580      	push	{r7, lr}
 800ef92:	b082      	sub	sp, #8
 800ef94:	af00      	add	r7, sp, #0
 800ef96:	6078      	str	r0, [r7, #4]
      { _M_impl._M_del()(_M_impl._M_ptr); }
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	330c      	adds	r3, #12
 800ef9c:	4618      	mov	r0, r3
 800ef9e:	f000 fa14 	bl	800f3ca <_ZNSt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>
 800efa2:	4602      	mov	r2, r0
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	691b      	ldr	r3, [r3, #16]
 800efa8:	4619      	mov	r1, r3
 800efaa:	4610      	mov	r0, r2
 800efac:	f7fd fe9f 	bl	800ccee <_ZNSt12__shared_ptrIN4tama25Stm32SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>
 800efb0:	bf00      	nop
 800efb2:	3708      	adds	r7, #8
 800efb4:	46bd      	mov	sp, r7
 800efb6:	bd80      	pop	{r7, pc}

0800efb8 <_ZNSt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      _M_destroy() noexcept
 800efb8:	b580      	push	{r7, lr}
 800efba:	b086      	sub	sp, #24
 800efbc:	af00      	add	r7, sp, #0
 800efbe:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	330c      	adds	r3, #12
 800efc4:	4618      	mov	r0, r3
 800efc6:	f000 fa0d 	bl	800f3e4 <_ZNSt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>
 800efca:	4602      	mov	r2, r0
 800efcc:	f107 0314 	add.w	r3, r7, #20
 800efd0:	4611      	mov	r1, r2
 800efd2:	4618      	mov	r0, r3
 800efd4:	f7fd fdd4 	bl	800cb80 <_ZNSaISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 800efd8:	f107 0114 	add.w	r1, r7, #20
 800efdc:	f107 030c 	add.w	r3, r7, #12
 800efe0:	687a      	ldr	r2, [r7, #4]
 800efe2:	4618      	mov	r0, r3
 800efe4:	f7fe fd73 	bl	800dace <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
	this->~_Sp_counted_deleter();
 800efe8:	6878      	ldr	r0, [r7, #4]
 800efea:	f7ff ffa9 	bl	800ef40 <_ZNSt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 800efee:	f107 030c 	add.w	r3, r7, #12
 800eff2:	4618      	mov	r0, r3
 800eff4:	f7fd fdf0 	bl	800cbd8 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	__allocator_type __a(_M_impl._M_alloc());
 800eff8:	f107 0314 	add.w	r3, r7, #20
 800effc:	4618      	mov	r0, r3
 800effe:	f7fd fdcc 	bl	800cb9a <_ZNSaISt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
      }
 800f002:	bf00      	nop
 800f004:	3718      	adds	r7, #24
 800f006:	46bd      	mov	sp, r7
 800f008:	bd80      	pop	{r7, pc}

0800f00a <_ZNSt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept
 800f00a:	b480      	push	{r7}
 800f00c:	b083      	sub	sp, #12
 800f00e:	af00      	add	r7, sp, #0
 800f010:	6078      	str	r0, [r7, #4]
 800f012:	6039      	str	r1, [r7, #0]
        return nullptr;
 800f014:	2300      	movs	r3, #0
      }
 800f016:	4618      	mov	r0, r3
 800f018:	370c      	adds	r7, #12
 800f01a:	46bd      	mov	sp, r7
 800f01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f020:	4770      	bx	lr
	...

0800f024 <_ZNSt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:
      ~_Sp_counted_deleter() noexcept { }
 800f024:	b580      	push	{r7, lr}
 800f026:	b082      	sub	sp, #8
 800f028:	af00      	add	r7, sp, #0
 800f02a:	6078      	str	r0, [r7, #4]
 800f02c:	4a08      	ldr	r2, [pc, #32]	; (800f050 <_ZNSt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev+0x2c>)
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	601a      	str	r2, [r3, #0]
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	330c      	adds	r3, #12
 800f036:	4618      	mov	r0, r3
 800f038:	f7fd fcb2 	bl	800c9a0 <_ZNSt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	4618      	mov	r0, r3
 800f040:	f7f2 ff4c 	bl	8001edc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	4618      	mov	r0, r3
 800f048:	3708      	adds	r7, #8
 800f04a:	46bd      	mov	sp, r7
 800f04c:	bd80      	pop	{r7, pc}
 800f04e:	bf00      	nop
 800f050:	0801b090 	.word	0x0801b090

0800f054 <_ZNSt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
 800f054:	b580      	push	{r7, lr}
 800f056:	b082      	sub	sp, #8
 800f058:	af00      	add	r7, sp, #0
 800f05a:	6078      	str	r0, [r7, #4]
 800f05c:	6878      	ldr	r0, [r7, #4]
 800f05e:	f7ff ffe1 	bl	800f024 <_ZNSt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
 800f062:	2114      	movs	r1, #20
 800f064:	6878      	ldr	r0, [r7, #4]
 800f066:	f008 fa24 	bl	80174b2 <_ZdlPvj>
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	4618      	mov	r0, r3
 800f06e:	3708      	adds	r7, #8
 800f070:	46bd      	mov	sp, r7
 800f072:	bd80      	pop	{r7, pc}

0800f074 <_ZNSt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      _M_dispose() noexcept
 800f074:	b580      	push	{r7, lr}
 800f076:	b082      	sub	sp, #8
 800f078:	af00      	add	r7, sp, #0
 800f07a:	6078      	str	r0, [r7, #4]
      { _M_impl._M_del()(_M_impl._M_ptr); }
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	330c      	adds	r3, #12
 800f080:	4618      	mov	r0, r3
 800f082:	f000 f9bd 	bl	800f400 <_ZNSt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>
 800f086:	4602      	mov	r2, r0
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	691b      	ldr	r3, [r3, #16]
 800f08c:	4619      	mov	r1, r3
 800f08e:	4610      	mov	r0, r2
 800f090:	f7fd fcd5 	bl	800ca3e <_ZNSt12__shared_ptrIN4tama16Stm32TimeMonitorELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>
 800f094:	bf00      	nop
 800f096:	3708      	adds	r7, #8
 800f098:	46bd      	mov	sp, r7
 800f09a:	bd80      	pop	{r7, pc}

0800f09c <_ZNSt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      _M_destroy() noexcept
 800f09c:	b580      	push	{r7, lr}
 800f09e:	b086      	sub	sp, #24
 800f0a0:	af00      	add	r7, sp, #0
 800f0a2:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	330c      	adds	r3, #12
 800f0a8:	4618      	mov	r0, r3
 800f0aa:	f000 f9b6 	bl	800f41a <_ZNSt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>
 800f0ae:	4602      	mov	r2, r0
 800f0b0:	f107 0314 	add.w	r3, r7, #20
 800f0b4:	4611      	mov	r1, r2
 800f0b6:	4618      	mov	r0, r3
 800f0b8:	f7fd fc0a 	bl	800c8d0 <_ZNSaISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 800f0bc:	f107 0114 	add.w	r1, r7, #20
 800f0c0:	f107 030c 	add.w	r3, r7, #12
 800f0c4:	687a      	ldr	r2, [r7, #4]
 800f0c6:	4618      	mov	r0, r3
 800f0c8:	f7fe fc4d 	bl	800d966 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
	this->~_Sp_counted_deleter();
 800f0cc:	6878      	ldr	r0, [r7, #4]
 800f0ce:	f7ff ffa9 	bl	800f024 <_ZNSt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 800f0d2:	f107 030c 	add.w	r3, r7, #12
 800f0d6:	4618      	mov	r0, r3
 800f0d8:	f7fd fc26 	bl	800c928 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	__allocator_type __a(_M_impl._M_alloc());
 800f0dc:	f107 0314 	add.w	r3, r7, #20
 800f0e0:	4618      	mov	r0, r3
 800f0e2:	f7fd fc02 	bl	800c8ea <_ZNSaISt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
      }
 800f0e6:	bf00      	nop
 800f0e8:	3718      	adds	r7, #24
 800f0ea:	46bd      	mov	sp, r7
 800f0ec:	bd80      	pop	{r7, pc}

0800f0ee <_ZNSt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept
 800f0ee:	b480      	push	{r7}
 800f0f0:	b083      	sub	sp, #12
 800f0f2:	af00      	add	r7, sp, #0
 800f0f4:	6078      	str	r0, [r7, #4]
 800f0f6:	6039      	str	r1, [r7, #0]
        return nullptr;
 800f0f8:	2300      	movs	r3, #0
      }
 800f0fa:	4618      	mov	r0, r3
 800f0fc:	370c      	adds	r7, #12
 800f0fe:	46bd      	mov	sp, r7
 800f100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f104:	4770      	bx	lr
	...

0800f108 <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:
      ~_Sp_counted_deleter() noexcept { }
 800f108:	b580      	push	{r7, lr}
 800f10a:	b082      	sub	sp, #8
 800f10c:	af00      	add	r7, sp, #0
 800f10e:	6078      	str	r0, [r7, #4]
 800f110:	4a08      	ldr	r2, [pc, #32]	; (800f134 <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev+0x2c>)
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	601a      	str	r2, [r3, #0]
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	330c      	adds	r3, #12
 800f11a:	4618      	mov	r0, r3
 800f11c:	f7fd fae6 	bl	800c6ec <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	4618      	mov	r0, r3
 800f124:	f7f2 feda 	bl	8001edc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	4618      	mov	r0, r3
 800f12c:	3708      	adds	r7, #8
 800f12e:	46bd      	mov	sp, r7
 800f130:	bd80      	pop	{r7, pc}
 800f132:	bf00      	nop
 800f134:	0801b0ac 	.word	0x0801b0ac

0800f138 <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
 800f138:	b580      	push	{r7, lr}
 800f13a:	b082      	sub	sp, #8
 800f13c:	af00      	add	r7, sp, #0
 800f13e:	6078      	str	r0, [r7, #4]
 800f140:	6878      	ldr	r0, [r7, #4]
 800f142:	f7ff ffe1 	bl	800f108 <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
 800f146:	2114      	movs	r1, #20
 800f148:	6878      	ldr	r0, [r7, #4]
 800f14a:	f008 f9b2 	bl	80174b2 <_ZdlPvj>
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	4618      	mov	r0, r3
 800f152:	3708      	adds	r7, #8
 800f154:	46bd      	mov	sp, r7
 800f156:	bd80      	pop	{r7, pc}

0800f158 <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      _M_dispose() noexcept
 800f158:	b580      	push	{r7, lr}
 800f15a:	b082      	sub	sp, #8
 800f15c:	af00      	add	r7, sp, #0
 800f15e:	6078      	str	r0, [r7, #4]
      { _M_impl._M_del()(_M_impl._M_ptr); }
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	330c      	adds	r3, #12
 800f164:	4618      	mov	r0, r3
 800f166:	f000 f966 	bl	800f436 <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>
 800f16a:	4602      	mov	r2, r0
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	691b      	ldr	r3, [r3, #16]
 800f170:	4619      	mov	r1, r3
 800f172:	4610      	mov	r0, r2
 800f174:	f7fd fb09 	bl	800c78a <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>
 800f178:	bf00      	nop
 800f17a:	3708      	adds	r7, #8
 800f17c:	46bd      	mov	sp, r7
 800f17e:	bd80      	pop	{r7, pc}

0800f180 <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      _M_destroy() noexcept
 800f180:	b580      	push	{r7, lr}
 800f182:	b086      	sub	sp, #24
 800f184:	af00      	add	r7, sp, #0
 800f186:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	330c      	adds	r3, #12
 800f18c:	4618      	mov	r0, r3
 800f18e:	f000 f95f 	bl	800f450 <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>
 800f192:	4602      	mov	r2, r0
 800f194:	f107 0314 	add.w	r3, r7, #20
 800f198:	4611      	mov	r1, r2
 800f19a:	4618      	mov	r0, r3
 800f19c:	f7fd fa3e 	bl	800c61c <_ZNSaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 800f1a0:	f107 0114 	add.w	r1, r7, #20
 800f1a4:	f107 030c 	add.w	r3, r7, #12
 800f1a8:	687a      	ldr	r2, [r7, #4]
 800f1aa:	4618      	mov	r0, r3
 800f1ac:	f7fe fb27 	bl	800d7fe <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
	this->~_Sp_counted_deleter();
 800f1b0:	6878      	ldr	r0, [r7, #4]
 800f1b2:	f7ff ffa9 	bl	800f108 <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 800f1b6:	f107 030c 	add.w	r3, r7, #12
 800f1ba:	4618      	mov	r0, r3
 800f1bc:	f7fd fa5a 	bl	800c674 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	__allocator_type __a(_M_impl._M_alloc());
 800f1c0:	f107 0314 	add.w	r3, r7, #20
 800f1c4:	4618      	mov	r0, r3
 800f1c6:	f7fd fa36 	bl	800c636 <_ZNSaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
      }
 800f1ca:	bf00      	nop
 800f1cc:	3718      	adds	r7, #24
 800f1ce:	46bd      	mov	sp, r7
 800f1d0:	bd80      	pop	{r7, pc}

0800f1d2 <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept
 800f1d2:	b480      	push	{r7}
 800f1d4:	b083      	sub	sp, #12
 800f1d6:	af00      	add	r7, sp, #0
 800f1d8:	6078      	str	r0, [r7, #4]
 800f1da:	6039      	str	r1, [r7, #0]
        return nullptr;
 800f1dc:	2300      	movs	r3, #0
      }
 800f1de:	4618      	mov	r0, r3
 800f1e0:	370c      	adds	r7, #12
 800f1e2:	46bd      	mov	sp, r7
 800f1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1e8:	4770      	bx	lr
	...

0800f1ec <_ZNSt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:
      ~_Sp_counted_deleter() noexcept { }
 800f1ec:	b580      	push	{r7, lr}
 800f1ee:	b082      	sub	sp, #8
 800f1f0:	af00      	add	r7, sp, #0
 800f1f2:	6078      	str	r0, [r7, #4]
 800f1f4:	4a08      	ldr	r2, [pc, #32]	; (800f218 <_ZNSt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev+0x2c>)
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	601a      	str	r2, [r3, #0]
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	330c      	adds	r3, #12
 800f1fe:	4618      	mov	r0, r3
 800f200:	f7fd f8fd 	bl	800c3fe <_ZNSt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	4618      	mov	r0, r3
 800f208:	f7f2 fe68 	bl	8001edc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	4618      	mov	r0, r3
 800f210:	3708      	adds	r7, #8
 800f212:	46bd      	mov	sp, r7
 800f214:	bd80      	pop	{r7, pc}
 800f216:	bf00      	nop
 800f218:	0801b0c8 	.word	0x0801b0c8

0800f21c <_ZNSt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
 800f21c:	b580      	push	{r7, lr}
 800f21e:	b082      	sub	sp, #8
 800f220:	af00      	add	r7, sp, #0
 800f222:	6078      	str	r0, [r7, #4]
 800f224:	6878      	ldr	r0, [r7, #4]
 800f226:	f7ff ffe1 	bl	800f1ec <_ZNSt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
 800f22a:	2114      	movs	r1, #20
 800f22c:	6878      	ldr	r0, [r7, #4]
 800f22e:	f008 f940 	bl	80174b2 <_ZdlPvj>
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	4618      	mov	r0, r3
 800f236:	3708      	adds	r7, #8
 800f238:	46bd      	mov	sp, r7
 800f23a:	bd80      	pop	{r7, pc}

0800f23c <_ZNSt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      _M_dispose() noexcept
 800f23c:	b580      	push	{r7, lr}
 800f23e:	b082      	sub	sp, #8
 800f240:	af00      	add	r7, sp, #0
 800f242:	6078      	str	r0, [r7, #4]
      { _M_impl._M_del()(_M_impl._M_ptr); }
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	330c      	adds	r3, #12
 800f248:	4618      	mov	r0, r3
 800f24a:	f000 f90f 	bl	800f46c <_ZNSt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>
 800f24e:	4602      	mov	r2, r0
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	691b      	ldr	r3, [r3, #16]
 800f254:	4619      	mov	r1, r3
 800f256:	4610      	mov	r0, r2
 800f258:	f7fd f921 	bl	800c49e <_ZNSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>
 800f25c:	bf00      	nop
 800f25e:	3708      	adds	r7, #8
 800f260:	46bd      	mov	sp, r7
 800f262:	bd80      	pop	{r7, pc}

0800f264 <_ZNSt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      _M_destroy() noexcept
 800f264:	b580      	push	{r7, lr}
 800f266:	b086      	sub	sp, #24
 800f268:	af00      	add	r7, sp, #0
 800f26a:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	330c      	adds	r3, #12
 800f270:	4618      	mov	r0, r3
 800f272:	f000 f908 	bl	800f486 <_ZNSt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>
 800f276:	4602      	mov	r2, r0
 800f278:	f107 0314 	add.w	r3, r7, #20
 800f27c:	4611      	mov	r1, r2
 800f27e:	4618      	mov	r0, r3
 800f280:	f7fd f855 	bl	800c32e <_ZNSaISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 800f284:	f107 0114 	add.w	r1, r7, #20
 800f288:	f107 030c 	add.w	r3, r7, #12
 800f28c:	687a      	ldr	r2, [r7, #4]
 800f28e:	4618      	mov	r0, r3
 800f290:	f7fe f9fe 	bl	800d690 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
	this->~_Sp_counted_deleter();
 800f294:	6878      	ldr	r0, [r7, #4]
 800f296:	f7ff ffa9 	bl	800f1ec <_ZNSt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 800f29a:	f107 030c 	add.w	r3, r7, #12
 800f29e:	4618      	mov	r0, r3
 800f2a0:	f7fd f871 	bl	800c386 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	__allocator_type __a(_M_impl._M_alloc());
 800f2a4:	f107 0314 	add.w	r3, r7, #20
 800f2a8:	4618      	mov	r0, r3
 800f2aa:	f7fd f84d 	bl	800c348 <_ZNSaISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
      }
 800f2ae:	bf00      	nop
 800f2b0:	3718      	adds	r7, #24
 800f2b2:	46bd      	mov	sp, r7
 800f2b4:	bd80      	pop	{r7, pc}

0800f2b6 <_ZNSt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept
 800f2b6:	b480      	push	{r7}
 800f2b8:	b083      	sub	sp, #12
 800f2ba:	af00      	add	r7, sp, #0
 800f2bc:	6078      	str	r0, [r7, #4]
 800f2be:	6039      	str	r1, [r7, #0]
        return nullptr;
 800f2c0:	2300      	movs	r3, #0
      }
 800f2c2:	4618      	mov	r0, r3
 800f2c4:	370c      	adds	r7, #12
 800f2c6:	46bd      	mov	sp, r7
 800f2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2cc:	4770      	bx	lr

0800f2ce <_ZNSt15_Sp_counted_ptrIPN4tama11SoundPlayerELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 800f2ce:	b590      	push	{r4, r7, lr}
 800f2d0:	b083      	sub	sp, #12
 800f2d2:	af00      	add	r7, sp, #0
 800f2d4:	6078      	str	r0, [r7, #4]
      { delete _M_ptr; }
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	68dc      	ldr	r4, [r3, #12]
 800f2da:	2c00      	cmp	r4, #0
 800f2dc:	d006      	beq.n	800f2ec <_ZNSt15_Sp_counted_ptrIPN4tama11SoundPlayerELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x1e>
 800f2de:	4620      	mov	r0, r4
 800f2e0:	f7fa f9c4 	bl	800966c <_ZN4tama11SoundPlayerD1Ev>
 800f2e4:	2124      	movs	r1, #36	; 0x24
 800f2e6:	4620      	mov	r0, r4
 800f2e8:	f008 f8e3 	bl	80174b2 <_ZdlPvj>
 800f2ec:	bf00      	nop
 800f2ee:	370c      	adds	r7, #12
 800f2f0:	46bd      	mov	sp, r7
 800f2f2:	bd90      	pop	{r4, r7, pc}

0800f2f4 <_ZNSt15_Sp_counted_ptrIPN4tama11SoundPlayerELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 800f2f4:	b580      	push	{r7, lr}
 800f2f6:	b082      	sub	sp, #8
 800f2f8:	af00      	add	r7, sp, #0
 800f2fa:	6078      	str	r0, [r7, #4]
      { delete this; }
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d002      	beq.n	800f308 <_ZNSt15_Sp_counted_ptrIPN4tama11SoundPlayerELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x14>
 800f302:	6878      	ldr	r0, [r7, #4]
 800f304:	f7ff fcb6 	bl	800ec74 <_ZNSt15_Sp_counted_ptrIPN4tama11SoundPlayerELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 800f308:	bf00      	nop
 800f30a:	3708      	adds	r7, #8
 800f30c:	46bd      	mov	sp, r7
 800f30e:	bd80      	pop	{r7, pc}

0800f310 <_ZNSt15_Sp_counted_ptrIPN4tama11SoundPlayerELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info&) noexcept
 800f310:	b480      	push	{r7}
 800f312:	b083      	sub	sp, #12
 800f314:	af00      	add	r7, sp, #0
 800f316:	6078      	str	r0, [r7, #4]
 800f318:	6039      	str	r1, [r7, #0]
      { return nullptr; }
 800f31a:	2300      	movs	r3, #0
 800f31c:	4618      	mov	r0, r3
 800f31e:	370c      	adds	r7, #12
 800f320:	46bd      	mov	sp, r7
 800f322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f326:	4770      	bx	lr

0800f328 <_ZNSt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>:
	_Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }
 800f328:	b580      	push	{r7, lr}
 800f32a:	b082      	sub	sp, #8
 800f32c:	af00      	add	r7, sp, #0
 800f32e:	6078      	str	r0, [r7, #4]
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	4618      	mov	r0, r3
 800f334:	f000 f8b5 	bl	800f4a2 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama14InitialLoadingELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>
 800f338:	4603      	mov	r3, r0
 800f33a:	4618      	mov	r0, r3
 800f33c:	3708      	adds	r7, #8
 800f33e:	46bd      	mov	sp, r7
 800f340:	bd80      	pop	{r7, pc}

0800f342 <_ZNSt19_Sp_counted_deleterIPN4tama14InitialLoadingENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }
 800f342:	b580      	push	{r7, lr}
 800f344:	b082      	sub	sp, #8
 800f346:	af00      	add	r7, sp, #0
 800f348:	6078      	str	r0, [r7, #4]
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	3301      	adds	r3, #1
 800f34e:	4618      	mov	r0, r3
 800f350:	f000 f8b2 	bl	800f4b8 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama14InitialLoadingEELb1EE6_S_getERS3_>
 800f354:	4603      	mov	r3, r0
 800f356:	4618      	mov	r0, r3
 800f358:	3708      	adds	r7, #8
 800f35a:	46bd      	mov	sp, r7
 800f35c:	bd80      	pop	{r7, pc}

0800f35e <_ZNSt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>:
	_Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }
 800f35e:	b580      	push	{r7, lr}
 800f360:	b082      	sub	sp, #8
 800f362:	af00      	add	r7, sp, #0
 800f364:	6078      	str	r0, [r7, #4]
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	4618      	mov	r0, r3
 800f36a:	f000 f8b0 	bl	800f4ce <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>
 800f36e:	4603      	mov	r3, r0
 800f370:	4618      	mov	r0, r3
 800f372:	3708      	adds	r7, #8
 800f374:	46bd      	mov	sp, r7
 800f376:	bd80      	pop	{r7, pc}

0800f378 <_ZNSt19_Sp_counted_deleterIPN4tama7ContextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }
 800f378:	b580      	push	{r7, lr}
 800f37a:	b082      	sub	sp, #8
 800f37c:	af00      	add	r7, sp, #0
 800f37e:	6078      	str	r0, [r7, #4]
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	3301      	adds	r3, #1
 800f384:	4618      	mov	r0, r3
 800f386:	f000 f8ad 	bl	800f4e4 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama7ContextEELb1EE6_S_getERS3_>
 800f38a:	4603      	mov	r3, r0
 800f38c:	4618      	mov	r0, r3
 800f38e:	3708      	adds	r7, #8
 800f390:	46bd      	mov	sp, r7
 800f392:	bd80      	pop	{r7, pc}

0800f394 <_ZNSt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>:
	_Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }
 800f394:	b580      	push	{r7, lr}
 800f396:	b082      	sub	sp, #8
 800f398:	af00      	add	r7, sp, #0
 800f39a:	6078      	str	r0, [r7, #4]
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	4618      	mov	r0, r3
 800f3a0:	f000 f8ab 	bl	800f4fa <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama10Stm32InputELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>
 800f3a4:	4603      	mov	r3, r0
 800f3a6:	4618      	mov	r0, r3
 800f3a8:	3708      	adds	r7, #8
 800f3aa:	46bd      	mov	sp, r7
 800f3ac:	bd80      	pop	{r7, pc}

0800f3ae <_ZNSt19_Sp_counted_deleterIPN4tama10Stm32InputENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }
 800f3ae:	b580      	push	{r7, lr}
 800f3b0:	b082      	sub	sp, #8
 800f3b2:	af00      	add	r7, sp, #0
 800f3b4:	6078      	str	r0, [r7, #4]
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	3301      	adds	r3, #1
 800f3ba:	4618      	mov	r0, r3
 800f3bc:	f000 f8a8 	bl	800f510 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama10Stm32InputEELb1EE6_S_getERS3_>
 800f3c0:	4603      	mov	r3, r0
 800f3c2:	4618      	mov	r0, r3
 800f3c4:	3708      	adds	r7, #8
 800f3c6:	46bd      	mov	sp, r7
 800f3c8:	bd80      	pop	{r7, pc}

0800f3ca <_ZNSt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>:
	_Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }
 800f3ca:	b580      	push	{r7, lr}
 800f3cc:	b082      	sub	sp, #8
 800f3ce:	af00      	add	r7, sp, #0
 800f3d0:	6078      	str	r0, [r7, #4]
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	4618      	mov	r0, r3
 800f3d6:	f000 f8a6 	bl	800f526 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama25Stm32SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>
 800f3da:	4603      	mov	r3, r0
 800f3dc:	4618      	mov	r0, r3
 800f3de:	3708      	adds	r7, #8
 800f3e0:	46bd      	mov	sp, r7
 800f3e2:	bd80      	pop	{r7, pc}

0800f3e4 <_ZNSt19_Sp_counted_deleterIPN4tama25Stm32SoundPlayingStrategyENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }
 800f3e4:	b580      	push	{r7, lr}
 800f3e6:	b082      	sub	sp, #8
 800f3e8:	af00      	add	r7, sp, #0
 800f3ea:	6078      	str	r0, [r7, #4]
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	3301      	adds	r3, #1
 800f3f0:	4618      	mov	r0, r3
 800f3f2:	f000 f8a3 	bl	800f53c <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama25Stm32SoundPlayingStrategyEELb1EE6_S_getERS3_>
 800f3f6:	4603      	mov	r3, r0
 800f3f8:	4618      	mov	r0, r3
 800f3fa:	3708      	adds	r7, #8
 800f3fc:	46bd      	mov	sp, r7
 800f3fe:	bd80      	pop	{r7, pc}

0800f400 <_ZNSt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>:
	_Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }
 800f400:	b580      	push	{r7, lr}
 800f402:	b082      	sub	sp, #8
 800f404:	af00      	add	r7, sp, #0
 800f406:	6078      	str	r0, [r7, #4]
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	4618      	mov	r0, r3
 800f40c:	f000 f8a1 	bl	800f552 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama16Stm32TimeMonitorELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>
 800f410:	4603      	mov	r3, r0
 800f412:	4618      	mov	r0, r3
 800f414:	3708      	adds	r7, #8
 800f416:	46bd      	mov	sp, r7
 800f418:	bd80      	pop	{r7, pc}

0800f41a <_ZNSt19_Sp_counted_deleterIPN4tama16Stm32TimeMonitorENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }
 800f41a:	b580      	push	{r7, lr}
 800f41c:	b082      	sub	sp, #8
 800f41e:	af00      	add	r7, sp, #0
 800f420:	6078      	str	r0, [r7, #4]
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	3301      	adds	r3, #1
 800f426:	4618      	mov	r0, r3
 800f428:	f000 f89e 	bl	800f568 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama16Stm32TimeMonitorEELb1EE6_S_getERS3_>
 800f42c:	4603      	mov	r3, r0
 800f42e:	4618      	mov	r0, r3
 800f430:	3708      	adds	r7, #8
 800f432:	46bd      	mov	sp, r7
 800f434:	bd80      	pop	{r7, pc}

0800f436 <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>:
	_Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }
 800f436:	b580      	push	{r7, lr}
 800f438:	b082      	sub	sp, #8
 800f43a:	af00      	add	r7, sp, #0
 800f43c:	6078      	str	r0, [r7, #4]
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	4618      	mov	r0, r3
 800f442:	f000 f89c 	bl	800f57e <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>
 800f446:	4603      	mov	r3, r0
 800f448:	4618      	mov	r0, r3
 800f44a:	3708      	adds	r7, #8
 800f44c:	46bd      	mov	sp, r7
 800f44e:	bd80      	pop	{r7, pc}

0800f450 <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }
 800f450:	b580      	push	{r7, lr}
 800f452:	b082      	sub	sp, #8
 800f454:	af00      	add	r7, sp, #0
 800f456:	6078      	str	r0, [r7, #4]
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	3301      	adds	r3, #1
 800f45c:	4618      	mov	r0, r3
 800f45e:	f000 f899 	bl	800f594 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama27Nokia5110DisplayDataManagerEELb1EE6_S_getERS3_>
 800f462:	4603      	mov	r3, r0
 800f464:	4618      	mov	r0, r3
 800f466:	3708      	adds	r7, #8
 800f468:	46bd      	mov	sp, r7
 800f46a:	bd80      	pop	{r7, pc}

0800f46c <_ZNSt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>:
	_Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }
 800f46c:	b580      	push	{r7, lr}
 800f46e:	b082      	sub	sp, #8
 800f470:	af00      	add	r7, sp, #0
 800f472:	6078      	str	r0, [r7, #4]
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	4618      	mov	r0, r3
 800f478:	f000 f897 	bl	800f5aa <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>
 800f47c:	4603      	mov	r3, r0
 800f47e:	4618      	mov	r0, r3
 800f480:	3708      	adds	r7, #8
 800f482:	46bd      	mov	sp, r7
 800f484:	bd80      	pop	{r7, pc}

0800f486 <_ZNSt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }
 800f486:	b580      	push	{r7, lr}
 800f488:	b082      	sub	sp, #8
 800f48a:	af00      	add	r7, sp, #0
 800f48c:	6078      	str	r0, [r7, #4]
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	3301      	adds	r3, #1
 800f492:	4618      	mov	r0, r3
 800f494:	f000 f894 	bl	800f5c0 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama18Stm32TextureLoaderEELb1EE6_S_getERS3_>
 800f498:	4603      	mov	r3, r0
 800f49a:	4618      	mov	r0, r3
 800f49c:	3708      	adds	r7, #8
 800f49e:	46bd      	mov	sp, r7
 800f4a0:	bd80      	pop	{r7, pc}

0800f4a2 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama14InitialLoadingELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>:
      _S_get(_Sp_ebo_helper& __eboh)
 800f4a2:	b480      	push	{r7}
 800f4a4:	b083      	sub	sp, #12
 800f4a6:	af00      	add	r7, sp, #0
 800f4a8:	6078      	str	r0, [r7, #4]
      { return __eboh._M_tp; }
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	4618      	mov	r0, r3
 800f4ae:	370c      	adds	r7, #12
 800f4b0:	46bd      	mov	sp, r7
 800f4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4b6:	4770      	bx	lr

0800f4b8 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama14InitialLoadingEELb1EE6_S_getERS3_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 800f4b8:	b480      	push	{r7}
 800f4ba:	b083      	sub	sp, #12
 800f4bc:	af00      	add	r7, sp, #0
 800f4be:	6078      	str	r0, [r7, #4]
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	4618      	mov	r0, r3
 800f4c4:	370c      	adds	r7, #12
 800f4c6:	46bd      	mov	sp, r7
 800f4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4cc:	4770      	bx	lr

0800f4ce <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama7ContextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>:
      _S_get(_Sp_ebo_helper& __eboh)
 800f4ce:	b480      	push	{r7}
 800f4d0:	b083      	sub	sp, #12
 800f4d2:	af00      	add	r7, sp, #0
 800f4d4:	6078      	str	r0, [r7, #4]
      { return __eboh._M_tp; }
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	4618      	mov	r0, r3
 800f4da:	370c      	adds	r7, #12
 800f4dc:	46bd      	mov	sp, r7
 800f4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4e2:	4770      	bx	lr

0800f4e4 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama7ContextEELb1EE6_S_getERS3_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 800f4e4:	b480      	push	{r7}
 800f4e6:	b083      	sub	sp, #12
 800f4e8:	af00      	add	r7, sp, #0
 800f4ea:	6078      	str	r0, [r7, #4]
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	4618      	mov	r0, r3
 800f4f0:	370c      	adds	r7, #12
 800f4f2:	46bd      	mov	sp, r7
 800f4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4f8:	4770      	bx	lr

0800f4fa <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama10Stm32InputELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>:
      _S_get(_Sp_ebo_helper& __eboh)
 800f4fa:	b480      	push	{r7}
 800f4fc:	b083      	sub	sp, #12
 800f4fe:	af00      	add	r7, sp, #0
 800f500:	6078      	str	r0, [r7, #4]
      { return __eboh._M_tp; }
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	4618      	mov	r0, r3
 800f506:	370c      	adds	r7, #12
 800f508:	46bd      	mov	sp, r7
 800f50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f50e:	4770      	bx	lr

0800f510 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama10Stm32InputEELb1EE6_S_getERS3_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 800f510:	b480      	push	{r7}
 800f512:	b083      	sub	sp, #12
 800f514:	af00      	add	r7, sp, #0
 800f516:	6078      	str	r0, [r7, #4]
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	4618      	mov	r0, r3
 800f51c:	370c      	adds	r7, #12
 800f51e:	46bd      	mov	sp, r7
 800f520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f524:	4770      	bx	lr

0800f526 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama25Stm32SoundPlayingStrategyELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>:
      _S_get(_Sp_ebo_helper& __eboh)
 800f526:	b480      	push	{r7}
 800f528:	b083      	sub	sp, #12
 800f52a:	af00      	add	r7, sp, #0
 800f52c:	6078      	str	r0, [r7, #4]
      { return __eboh._M_tp; }
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	4618      	mov	r0, r3
 800f532:	370c      	adds	r7, #12
 800f534:	46bd      	mov	sp, r7
 800f536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f53a:	4770      	bx	lr

0800f53c <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama25Stm32SoundPlayingStrategyEELb1EE6_S_getERS3_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 800f53c:	b480      	push	{r7}
 800f53e:	b083      	sub	sp, #12
 800f540:	af00      	add	r7, sp, #0
 800f542:	6078      	str	r0, [r7, #4]
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	4618      	mov	r0, r3
 800f548:	370c      	adds	r7, #12
 800f54a:	46bd      	mov	sp, r7
 800f54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f550:	4770      	bx	lr

0800f552 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama16Stm32TimeMonitorELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>:
      _S_get(_Sp_ebo_helper& __eboh)
 800f552:	b480      	push	{r7}
 800f554:	b083      	sub	sp, #12
 800f556:	af00      	add	r7, sp, #0
 800f558:	6078      	str	r0, [r7, #4]
      { return __eboh._M_tp; }
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	4618      	mov	r0, r3
 800f55e:	370c      	adds	r7, #12
 800f560:	46bd      	mov	sp, r7
 800f562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f566:	4770      	bx	lr

0800f568 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama16Stm32TimeMonitorEELb1EE6_S_getERS3_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 800f568:	b480      	push	{r7}
 800f56a:	b083      	sub	sp, #12
 800f56c:	af00      	add	r7, sp, #0
 800f56e:	6078      	str	r0, [r7, #4]
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	4618      	mov	r0, r3
 800f574:	370c      	adds	r7, #12
 800f576:	46bd      	mov	sp, r7
 800f578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f57c:	4770      	bx	lr

0800f57e <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>:
      _S_get(_Sp_ebo_helper& __eboh)
 800f57e:	b480      	push	{r7}
 800f580:	b083      	sub	sp, #12
 800f582:	af00      	add	r7, sp, #0
 800f584:	6078      	str	r0, [r7, #4]
      { return __eboh._M_tp; }
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	4618      	mov	r0, r3
 800f58a:	370c      	adds	r7, #12
 800f58c:	46bd      	mov	sp, r7
 800f58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f592:	4770      	bx	lr

0800f594 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama27Nokia5110DisplayDataManagerEELb1EE6_S_getERS3_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 800f594:	b480      	push	{r7}
 800f596:	b083      	sub	sp, #12
 800f598:	af00      	add	r7, sp, #0
 800f59a:	6078      	str	r0, [r7, #4]
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	4618      	mov	r0, r3
 800f5a0:	370c      	adds	r7, #12
 800f5a2:	46bd      	mov	sp, r7
 800f5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5a8:	4770      	bx	lr

0800f5aa <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>:
      _S_get(_Sp_ebo_helper& __eboh)
 800f5aa:	b480      	push	{r7}
 800f5ac:	b083      	sub	sp, #12
 800f5ae:	af00      	add	r7, sp, #0
 800f5b0:	6078      	str	r0, [r7, #4]
      { return __eboh._M_tp; }
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	4618      	mov	r0, r3
 800f5b6:	370c      	adds	r7, #12
 800f5b8:	46bd      	mov	sp, r7
 800f5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5be:	4770      	bx	lr

0800f5c0 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama18Stm32TextureLoaderEELb1EE6_S_getERS3_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 800f5c0:	b480      	push	{r7}
 800f5c2:	b083      	sub	sp, #12
 800f5c4:	af00      	add	r7, sp, #0
 800f5c6:	6078      	str	r0, [r7, #4]
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	4618      	mov	r0, r3
 800f5cc:	370c      	adds	r7, #12
 800f5ce:	46bd      	mov	sp, r7
 800f5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5d4:	4770      	bx	lr
	...

0800f5d8 <_ZN4tama7DisplayC1Ev>:
#include "PixelColor.h"
#include "display-data/DisplayData.h"

namespace tama
{
    class Display
 800f5d8:	b480      	push	{r7}
 800f5da:	b083      	sub	sp, #12
 800f5dc:	af00      	add	r7, sp, #0
 800f5de:	6078      	str	r0, [r7, #4]
 800f5e0:	4a04      	ldr	r2, [pc, #16]	; (800f5f4 <_ZN4tama7DisplayC1Ev+0x1c>)
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	601a      	str	r2, [r3, #0]
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	4618      	mov	r0, r3
 800f5ea:	370c      	adds	r7, #12
 800f5ec:	46bd      	mov	sp, r7
 800f5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5f2:	4770      	bx	lr
 800f5f4:	0801b158 	.word	0x0801b158

0800f5f8 <_ZN4tama16Nokia5510DisplayC1ERNS_13DisplayConfigE>:
// Created by grzegorz on 3/25/21.
//

#include "Nokia5510Display.h"

tama::Nokia5510Display::Nokia5510Display(DisplayConfig & displayConfig)
 800f5f8:	b5b0      	push	{r4, r5, r7, lr}
 800f5fa:	b084      	sub	sp, #16
 800f5fc:	af00      	add	r7, sp, #0
 800f5fe:	6078      	str	r0, [r7, #4]
 800f600:	6039      	str	r1, [r7, #0]
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	4618      	mov	r0, r3
 800f606:	f7ff ffe7 	bl	800f5d8 <_ZN4tama7DisplayC1Ev>
 800f60a:	4a32      	ldr	r2, [pc, #200]	; (800f6d4 <_ZN4tama16Nokia5510DisplayC1ERNS_13DisplayConfigE+0xdc>)
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	601a      	str	r2, [r3, #0]
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	2254      	movs	r2, #84	; 0x54
 800f614:	629a      	str	r2, [r3, #40]	; 0x28
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	2230      	movs	r2, #48	; 0x30
 800f61a:	62da      	str	r2, [r3, #44]	; 0x2c
{
    this->cfg = displayConfig;
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	683a      	ldr	r2, [r7, #0]
 800f620:	1d1c      	adds	r4, r3, #4
 800f622:	4615      	mov	r5, r2
 800f624:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f626:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f628:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f62a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f62c:	682b      	ldr	r3, [r5, #0]
 800f62e:	6023      	str	r3, [r4, #0]
    HAL_GPIO_WritePin(cfg.reset_port, cfg.reset_pin, GPIO_PIN_RESET);
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	6898      	ldr	r0, [r3, #8]
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	899b      	ldrh	r3, [r3, #12]
 800f638:	2200      	movs	r2, #0
 800f63a:	4619      	mov	r1, r3
 800f63c:	f001 fcfc 	bl	8011038 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 800f640:	2064      	movs	r0, #100	; 0x64
 800f642:	f001 fa2b 	bl	8010a9c <HAL_Delay>
    HAL_GPIO_WritePin(cfg.reset_port, cfg.reset_pin, GPIO_PIN_SET);
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	6898      	ldr	r0, [r3, #8]
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	899b      	ldrh	r3, [r3, #12]
 800f64e:	2201      	movs	r2, #1
 800f650:	4619      	mov	r1, r3
 800f652:	f001 fcf1 	bl	8011038 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(cfg.bl_port, cfg.bl_pin, GPIO_PIN_SET);
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	6918      	ldr	r0, [r3, #16]
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	8a9b      	ldrh	r3, [r3, #20]
 800f65e:	2201      	movs	r2, #1
 800f660:	4619      	mov	r1, r3
 800f662:	f001 fce9 	bl	8011038 <HAL_GPIO_WritePin>
    writeCommand(0x21);
 800f666:	2121      	movs	r1, #33	; 0x21
 800f668:	6878      	ldr	r0, [r7, #4]
 800f66a:	f000 f884 	bl	800f776 <_ZN4tama16Nokia5510Display12writeCommandEh>
    writeCommand(0x04);
 800f66e:	2104      	movs	r1, #4
 800f670:	6878      	ldr	r0, [r7, #4]
 800f672:	f000 f880 	bl	800f776 <_ZN4tama16Nokia5510Display12writeCommandEh>
    writeCommand(0x10 | 0x04);
 800f676:	2114      	movs	r1, #20
 800f678:	6878      	ldr	r0, [r7, #4]
 800f67a:	f000 f87c 	bl	800f776 <_ZN4tama16Nokia5510Display12writeCommandEh>
    writeCommand(0x80 | 0x41); //contrast
 800f67e:	21c1      	movs	r1, #193	; 0xc1
 800f680:	6878      	ldr	r0, [r7, #4]
 800f682:	f000 f878 	bl	800f776 <_ZN4tama16Nokia5510Display12writeCommandEh>
    writeCommand(0x20);
 800f686:	2120      	movs	r1, #32
 800f688:	6878      	ldr	r0, [r7, #4]
 800f68a:	f000 f874 	bl	800f776 <_ZN4tama16Nokia5510Display12writeCommandEh>
    writeCommand(0x08 | 0x04);
 800f68e:	210c      	movs	r1, #12
 800f690:	6878      	ldr	r0, [r7, #4]
 800f692:	f000 f870 	bl	800f776 <_ZN4tama16Nokia5510Display12writeCommandEh>
    for (int i = 0; i < 504; i++)
 800f696:	2300      	movs	r3, #0
 800f698:	60fb      	str	r3, [r7, #12]
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 800f6a0:	da07      	bge.n	800f6b2 <_ZN4tama16Nokia5510DisplayC1ERNS_13DisplayConfigE+0xba>
        displayPixel(0x0);
 800f6a2:	2100      	movs	r1, #0
 800f6a4:	6878      	ldr	r0, [r7, #4]
 800f6a6:	f000 f83d 	bl	800f724 <_ZN4tama16Nokia5510Display12displayPixelEh>
    for (int i = 0; i < 504; i++)
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	3301      	adds	r3, #1
 800f6ae:	60fb      	str	r3, [r7, #12]
 800f6b0:	e7f3      	b.n	800f69a <_ZN4tama16Nokia5510DisplayC1ERNS_13DisplayConfigE+0xa2>
    writeCommand(0x20 | 0x00);
 800f6b2:	2120      	movs	r1, #32
 800f6b4:	6878      	ldr	r0, [r7, #4]
 800f6b6:	f000 f85e 	bl	800f776 <_ZN4tama16Nokia5510Display12writeCommandEh>
    writeCommand(0x80 | 0); // Wybˇr kolumny
 800f6ba:	2180      	movs	r1, #128	; 0x80
 800f6bc:	6878      	ldr	r0, [r7, #4]
 800f6be:	f000 f85a 	bl	800f776 <_ZN4tama16Nokia5510Display12writeCommandEh>
    writeCommand(0x40 | 0); // Wybˇr wiersza
 800f6c2:	2140      	movs	r1, #64	; 0x40
 800f6c4:	6878      	ldr	r0, [r7, #4]
 800f6c6:	f000 f856 	bl	800f776 <_ZN4tama16Nokia5510Display12writeCommandEh>
}
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	4618      	mov	r0, r3
 800f6ce:	3710      	adds	r7, #16
 800f6d0:	46bd      	mov	sp, r7
 800f6d2:	bdb0      	pop	{r4, r5, r7, pc}
 800f6d4:	0801b148 	.word	0x0801b148

0800f6d8 <_ZN4tama16Nokia5510Display11displayDataEv>:

void tama::Nokia5510Display::displayData()
{
 800f6d8:	b480      	push	{r7}
 800f6da:	b083      	sub	sp, #12
 800f6dc:	af00      	add	r7, sp, #0
 800f6de:	6078      	str	r0, [r7, #4]

}
 800f6e0:	bf00      	nop
 800f6e2:	370c      	adds	r7, #12
 800f6e4:	46bd      	mov	sp, r7
 800f6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ea:	4770      	bx	lr

0800f6ec <_ZN4tama16Nokia5510Display7setDataERNS_11DisplayDataE>:

void tama::Nokia5510Display::setData(DisplayData & pixels)
{
 800f6ec:	b580      	push	{r7, lr}
 800f6ee:	b084      	sub	sp, #16
 800f6f0:	af00      	add	r7, sp, #0
 800f6f2:	6078      	str	r0, [r7, #4]
 800f6f4:	6039      	str	r1, [r7, #0]


	for (unsigned i = 0; i <504; ++i)
 800f6f6:	2300      	movs	r3, #0
 800f6f8:	60fb      	str	r3, [r7, #12]
 800f6fa:	68fb      	ldr	r3, [r7, #12]
 800f6fc:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 800f700:	d20c      	bcs.n	800f71c <_ZN4tama16Nokia5510Display7setDataERNS_11DisplayDataE+0x30>
	{
		displayPixel(((uint8_t *)pixels.data)[i]);
 800f702:	683b      	ldr	r3, [r7, #0]
 800f704:	681a      	ldr	r2, [r3, #0]
 800f706:	68fb      	ldr	r3, [r7, #12]
 800f708:	4413      	add	r3, r2
 800f70a:	781b      	ldrb	r3, [r3, #0]
 800f70c:	4619      	mov	r1, r3
 800f70e:	6878      	ldr	r0, [r7, #4]
 800f710:	f000 f808 	bl	800f724 <_ZN4tama16Nokia5510Display12displayPixelEh>
	for (unsigned i = 0; i <504; ++i)
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	3301      	adds	r3, #1
 800f718:	60fb      	str	r3, [r7, #12]
 800f71a:	e7ee      	b.n	800f6fa <_ZN4tama16Nokia5510Display7setDataERNS_11DisplayDataE+0xe>
//
//    HAL_GPIO_WritePin(cfg.dc_port, cfg.dc_pin, GPIO_PIN_SET);
//    HAL_GPIO_WritePin(cfg.ce_port, cfg.ce_pin, GPIO_PIN_RESET);
//    HAL_SPI_Transmit(cfg.spi, ((uint8_t *)pixels.data + 252), 252, 100);
//    HAL_GPIO_WritePin(cfg.ce_port, cfg.ce_pin, GPIO_PIN_SET);
}
 800f71c:	bf00      	nop
 800f71e:	3710      	adds	r7, #16
 800f720:	46bd      	mov	sp, r7
 800f722:	bd80      	pop	{r7, pc}

0800f724 <_ZN4tama16Nokia5510Display12displayPixelEh>:


void tama::Nokia5510Display::displayPixel(uint8_t pixelData)
{
 800f724:	b580      	push	{r7, lr}
 800f726:	b082      	sub	sp, #8
 800f728:	af00      	add	r7, sp, #0
 800f72a:	6078      	str	r0, [r7, #4]
 800f72c:	460b      	mov	r3, r1
 800f72e:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(cfg.dc_port, cfg.dc_pin, GPIO_PIN_SET);
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	6998      	ldr	r0, [r3, #24]
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f738:	2201      	movs	r2, #1
 800f73a:	4619      	mov	r1, r3
 800f73c:	f001 fc7c 	bl	8011038 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(cfg.ce_port, cfg.ce_pin, GPIO_PIN_RESET);
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	6a18      	ldr	r0, [r3, #32]
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	8b9b      	ldrh	r3, [r3, #28]
 800f748:	2200      	movs	r2, #0
 800f74a:	4619      	mov	r1, r3
 800f74c:	f001 fc74 	bl	8011038 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(cfg.spi, &pixelData, 1, 100);
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	6858      	ldr	r0, [r3, #4]
 800f754:	1cf9      	adds	r1, r7, #3
 800f756:	2364      	movs	r3, #100	; 0x64
 800f758:	2201      	movs	r2, #1
 800f75a:	f004 fd57 	bl	801420c <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(cfg.ce_port, cfg.ce_pin, GPIO_PIN_SET);
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	6a18      	ldr	r0, [r3, #32]
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	8b9b      	ldrh	r3, [r3, #28]
 800f766:	2201      	movs	r2, #1
 800f768:	4619      	mov	r1, r3
 800f76a:	f001 fc65 	bl	8011038 <HAL_GPIO_WritePin>
}
 800f76e:	bf00      	nop
 800f770:	3708      	adds	r7, #8
 800f772:	46bd      	mov	sp, r7
 800f774:	bd80      	pop	{r7, pc}

0800f776 <_ZN4tama16Nokia5510Display12writeCommandEh>:

void tama::Nokia5510Display::writeCommand(uint8_t cmd)
{
 800f776:	b580      	push	{r7, lr}
 800f778:	b082      	sub	sp, #8
 800f77a:	af00      	add	r7, sp, #0
 800f77c:	6078      	str	r0, [r7, #4]
 800f77e:	460b      	mov	r3, r1
 800f780:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(cfg.dc_port, cfg.dc_pin, GPIO_PIN_RESET);
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	6998      	ldr	r0, [r3, #24]
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f78a:	2200      	movs	r2, #0
 800f78c:	4619      	mov	r1, r3
 800f78e:	f001 fc53 	bl	8011038 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(cfg.ce_port, cfg.ce_pin, GPIO_PIN_RESET);
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	6a18      	ldr	r0, [r3, #32]
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	8b9b      	ldrh	r3, [r3, #28]
 800f79a:	2200      	movs	r2, #0
 800f79c:	4619      	mov	r1, r3
 800f79e:	f001 fc4b 	bl	8011038 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(cfg.spi, &cmd, 1, 100);
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	6858      	ldr	r0, [r3, #4]
 800f7a6:	1cf9      	adds	r1, r7, #3
 800f7a8:	2364      	movs	r3, #100	; 0x64
 800f7aa:	2201      	movs	r2, #1
 800f7ac:	f004 fd2e 	bl	801420c <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(cfg.ce_port, cfg.ce_pin, GPIO_PIN_SET);
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	6a18      	ldr	r0, [r3, #32]
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	8b9b      	ldrh	r3, [r3, #28]
 800f7b8:	2201      	movs	r2, #1
 800f7ba:	4619      	mov	r1, r3
 800f7bc:	f001 fc3c 	bl	8011038 <HAL_GPIO_WritePin>
}
 800f7c0:	bf00      	nop
 800f7c2:	3708      	adds	r7, #8
 800f7c4:	46bd      	mov	sp, r7
 800f7c6:	bd80      	pop	{r7, pc}

0800f7c8 <_ZN4tama10Stm32Input6updateEv>:
#include <gpio.h>
#include "Stm32Input.h"
#include "../../Core/input/button.h"

void tama::Stm32Input::update()
{
 800f7c8:	b580      	push	{r7, lr}
 800f7ca:	b088      	sub	sp, #32
 800f7cc:	af00      	add	r7, sp, #0
 800f7ce:	6078      	str	r0, [r7, #4]
    Button button = tama::Button::NONE;
 800f7d0:	2303      	movs	r3, #3
 800f7d2:	77fb      	strb	r3, [r7, #31]

    if (HAL_GPIO_ReadPin(BUTTON_C_GPIO_Port, BUTTON_C_Pin) == GPIO_PIN_RESET)
 800f7d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800f7d8:	482e      	ldr	r0, [pc, #184]	; (800f894 <_ZN4tama10Stm32Input6updateEv+0xcc>)
 800f7da:	f001 fc15 	bl	8011008 <HAL_GPIO_ReadPin>
 800f7de:	4603      	mov	r3, r0
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	bf0c      	ite	eq
 800f7e4:	2301      	moveq	r3, #1
 800f7e6:	2300      	movne	r3, #0
 800f7e8:	b2db      	uxtb	r3, r3
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d001      	beq.n	800f7f2 <_ZN4tama10Stm32Input6updateEv+0x2a>
    {
        button = tama::Button::C;
 800f7ee:	2302      	movs	r3, #2
 800f7f0:	77fb      	strb	r3, [r7, #31]
    }
    if (HAL_GPIO_ReadPin(BUTTON_B_GPIO_Port, BUTTON_B_Pin) == GPIO_PIN_RESET)
 800f7f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f7f6:	4827      	ldr	r0, [pc, #156]	; (800f894 <_ZN4tama10Stm32Input6updateEv+0xcc>)
 800f7f8:	f001 fc06 	bl	8011008 <HAL_GPIO_ReadPin>
 800f7fc:	4603      	mov	r3, r0
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	bf0c      	ite	eq
 800f802:	2301      	moveq	r3, #1
 800f804:	2300      	movne	r3, #0
 800f806:	b2db      	uxtb	r3, r3
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d001      	beq.n	800f810 <_ZN4tama10Stm32Input6updateEv+0x48>
    {
        button = tama::Button::B;
 800f80c:	2301      	movs	r3, #1
 800f80e:	77fb      	strb	r3, [r7, #31]
    }

    if (button != tama::Button::NONE)
 800f810:	7ffb      	ldrb	r3, [r7, #31]
 800f812:	2b03      	cmp	r3, #3
 800f814:	d039      	beq.n	800f88a <_ZN4tama10Stm32Input6updateEv+0xc2>
    {
        for (auto listener : listeners)
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	3304      	adds	r3, #4
 800f81a:	61bb      	str	r3, [r7, #24]
 800f81c:	69b8      	ldr	r0, [r7, #24]
 800f81e:	f7f1 f86f 	bl	8000900 <_ZNSt6vectorISt10shared_ptrIN4tama7OnInputEESaIS3_EE5beginEv>
 800f822:	4603      	mov	r3, r0
 800f824:	60fb      	str	r3, [r7, #12]
 800f826:	69b8      	ldr	r0, [r7, #24]
 800f828:	f7f0 ff27 	bl	800067a <_ZNSt6vectorISt10shared_ptrIN4tama7OnInputEESaIS3_EE3endEv>
 800f82c:	4603      	mov	r3, r0
 800f82e:	60bb      	str	r3, [r7, #8]
 800f830:	f107 0208 	add.w	r2, r7, #8
 800f834:	f107 030c 	add.w	r3, r7, #12
 800f838:	4611      	mov	r1, r2
 800f83a:	4618      	mov	r0, r3
 800f83c:	f000 f82c 	bl	800f898 <_ZN9__gnu_cxxneIPSt10shared_ptrIN4tama7OnInputEESt6vectorIS4_SaIS4_EEEEbRKNS_17__normal_iteratorIT_T0_EESE_>
 800f840:	4603      	mov	r3, r0
 800f842:	2b00      	cmp	r3, #0
 800f844:	d021      	beq.n	800f88a <_ZN4tama10Stm32Input6updateEv+0xc2>
 800f846:	f107 030c 	add.w	r3, r7, #12
 800f84a:	4618      	mov	r0, r3
 800f84c:	f000 f84d 	bl	800f8ea <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama7OnInputEESt6vectorIS4_SaIS4_EEEdeEv>
 800f850:	4602      	mov	r2, r0
 800f852:	f107 0310 	add.w	r3, r7, #16
 800f856:	4611      	mov	r1, r2
 800f858:	4618      	mov	r0, r3
 800f85a:	f7f0 ffcf 	bl	80007fc <_ZNSt10shared_ptrIN4tama7OnInputEEC1ERKS2_>
        {
            listener->onInput(button);
 800f85e:	f107 0310 	add.w	r3, r7, #16
 800f862:	4618      	mov	r0, r3
 800f864:	f000 f84d 	bl	800f902 <_ZNKSt19__shared_ptr_accessIN4tama7OnInputELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800f868:	4602      	mov	r2, r0
 800f86a:	6813      	ldr	r3, [r2, #0]
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	7ff9      	ldrb	r1, [r7, #31]
 800f870:	4610      	mov	r0, r2
 800f872:	4798      	blx	r3
        for (auto listener : listeners)
 800f874:	f107 0310 	add.w	r3, r7, #16
 800f878:	4618      	mov	r0, r3
 800f87a:	f7f1 f959 	bl	8000b30 <_ZNSt10shared_ptrIN4tama7OnInputEED1Ev>
 800f87e:	f107 030c 	add.w	r3, r7, #12
 800f882:	4618      	mov	r0, r3
 800f884:	f000 f820 	bl	800f8c8 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama7OnInputEESt6vectorIS4_SaIS4_EEEppEv>
 800f888:	e7d2      	b.n	800f830 <_ZN4tama10Stm32Input6updateEv+0x68>
        }
    }
}
 800f88a:	bf00      	nop
 800f88c:	3720      	adds	r7, #32
 800f88e:	46bd      	mov	sp, r7
 800f890:	bd80      	pop	{r7, pc}
 800f892:	bf00      	nop
 800f894:	40020c00 	.word	0x40020c00

0800f898 <_ZN9__gnu_cxxneIPSt10shared_ptrIN4tama7OnInputEESt6vectorIS4_SaIS4_EEEEbRKNS_17__normal_iteratorIT_T0_EESE_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 800f898:	b590      	push	{r4, r7, lr}
 800f89a:	b083      	sub	sp, #12
 800f89c:	af00      	add	r7, sp, #0
 800f89e:	6078      	str	r0, [r7, #4]
 800f8a0:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 800f8a2:	6878      	ldr	r0, [r7, #4]
 800f8a4:	f7f1 f866 	bl	8000974 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama7OnInputEESt6vectorIS4_SaIS4_EEE4baseEv>
 800f8a8:	4603      	mov	r3, r0
 800f8aa:	681c      	ldr	r4, [r3, #0]
 800f8ac:	6838      	ldr	r0, [r7, #0]
 800f8ae:	f7f1 f861 	bl	8000974 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama7OnInputEESt6vectorIS4_SaIS4_EEE4baseEv>
 800f8b2:	4603      	mov	r3, r0
 800f8b4:	681b      	ldr	r3, [r3, #0]
 800f8b6:	429c      	cmp	r4, r3
 800f8b8:	bf14      	ite	ne
 800f8ba:	2301      	movne	r3, #1
 800f8bc:	2300      	moveq	r3, #0
 800f8be:	b2db      	uxtb	r3, r3
 800f8c0:	4618      	mov	r0, r3
 800f8c2:	370c      	adds	r7, #12
 800f8c4:	46bd      	mov	sp, r7
 800f8c6:	bd90      	pop	{r4, r7, pc}

0800f8c8 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama7OnInputEESt6vectorIS4_SaIS4_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800f8c8:	b480      	push	{r7}
 800f8ca:	b083      	sub	sp, #12
 800f8cc:	af00      	add	r7, sp, #0
 800f8ce:	6078      	str	r0, [r7, #4]
	++_M_current;
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	f103 0208 	add.w	r2, r3, #8
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	601a      	str	r2, [r3, #0]
	return *this;
 800f8dc:	687b      	ldr	r3, [r7, #4]
      }
 800f8de:	4618      	mov	r0, r3
 800f8e0:	370c      	adds	r7, #12
 800f8e2:	46bd      	mov	sp, r7
 800f8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8e8:	4770      	bx	lr

0800f8ea <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama7OnInputEESt6vectorIS4_SaIS4_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800f8ea:	b480      	push	{r7}
 800f8ec:	b083      	sub	sp, #12
 800f8ee:	af00      	add	r7, sp, #0
 800f8f0:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	4618      	mov	r0, r3
 800f8f8:	370c      	adds	r7, #12
 800f8fa:	46bd      	mov	sp, r7
 800f8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f900:	4770      	bx	lr

0800f902 <_ZNKSt19__shared_ptr_accessIN4tama7OnInputELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 800f902:	b580      	push	{r7, lr}
 800f904:	b082      	sub	sp, #8
 800f906:	af00      	add	r7, sp, #0
 800f908:	6078      	str	r0, [r7, #4]
	return _M_get();
 800f90a:	6878      	ldr	r0, [r7, #4]
 800f90c:	f000 f805 	bl	800f91a <_ZNKSt19__shared_ptr_accessIN4tama7OnInputELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 800f910:	4603      	mov	r3, r0
      }
 800f912:	4618      	mov	r0, r3
 800f914:	3708      	adds	r7, #8
 800f916:	46bd      	mov	sp, r7
 800f918:	bd80      	pop	{r7, pc}

0800f91a <_ZNKSt19__shared_ptr_accessIN4tama7OnInputELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 800f91a:	b580      	push	{r7, lr}
 800f91c:	b082      	sub	sp, #8
 800f91e:	af00      	add	r7, sp, #0
 800f920:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 800f922:	6878      	ldr	r0, [r7, #4]
 800f924:	f000 f805 	bl	800f932 <_ZNKSt12__shared_ptrIN4tama7OnInputELN9__gnu_cxx12_Lock_policyE0EE3getEv>
 800f928:	4603      	mov	r3, r0
 800f92a:	4618      	mov	r0, r3
 800f92c:	3708      	adds	r7, #8
 800f92e:	46bd      	mov	sp, r7
 800f930:	bd80      	pop	{r7, pc}

0800f932 <_ZNKSt12__shared_ptrIN4tama7OnInputELN9__gnu_cxx12_Lock_policyE0EE3getEv>:
      get() const noexcept
 800f932:	b480      	push	{r7}
 800f934:	b083      	sub	sp, #12
 800f936:	af00      	add	r7, sp, #0
 800f938:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	4618      	mov	r0, r3
 800f940:	370c      	adds	r7, #12
 800f942:	46bd      	mov	sp, r7
 800f944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f948:	4770      	bx	lr

0800f94a <_ZN4tama27Nokia5110DisplayDataManager25getActiveSceneDisplayDataESt10shared_ptrINS_7TextureEE>:
//

#include "Nokia5110DisplayDataManager.h"

tama::DisplayData tama::Nokia5110DisplayDataManager::getActiveSceneDisplayData(std::shared_ptr<Texture> texture)
{
 800f94a:	b590      	push	{r4, r7, lr}
 800f94c:	b08b      	sub	sp, #44	; 0x2c
 800f94e:	af00      	add	r7, sp, #0
 800f950:	60f8      	str	r0, [r7, #12]
 800f952:	60b9      	str	r1, [r7, #8]
 800f954:	607a      	str	r2, [r7, #4]
    uint8_t * data = new uint8_t[dataSize];
 800f956:	68bb      	ldr	r3, [r7, #8]
 800f958:	691b      	ldr	r3, [r3, #16]
 800f95a:	4618      	mov	r0, r3
 800f95c:	f007 fda7 	bl	80174ae <_Znaj>
 800f960:	4603      	mov	r3, r0
 800f962:	61fb      	str	r3, [r7, #28]
    for (unsigned i = 0; i < texture->height; ++i)
 800f964:	2300      	movs	r3, #0
 800f966:	627b      	str	r3, [r7, #36]	; 0x24
 800f968:	6878      	ldr	r0, [r7, #4]
 800f96a:	f7f7 fcbd 	bl	80072e8 <_ZNKSt19__shared_ptr_accessIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800f96e:	4603      	mov	r3, r0
 800f970:	689b      	ldr	r3, [r3, #8]
 800f972:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f974:	429a      	cmp	r2, r3
 800f976:	bf34      	ite	cc
 800f978:	2301      	movcc	r3, #1
 800f97a:	2300      	movcs	r3, #0
 800f97c:	b2db      	uxtb	r3, r3
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d03f      	beq.n	800fa02 <_ZN4tama27Nokia5110DisplayDataManager25getActiveSceneDisplayDataESt10shared_ptrINS_7TextureEE+0xb8>
    {
        for (unsigned j = 0; j < texture->width; ++j) //i = 32, j = 60
 800f982:	2300      	movs	r3, #0
 800f984:	623b      	str	r3, [r7, #32]
 800f986:	6878      	ldr	r0, [r7, #4]
 800f988:	f7f7 fcae 	bl	80072e8 <_ZNKSt19__shared_ptr_accessIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800f98c:	4603      	mov	r3, r0
 800f98e:	685b      	ldr	r3, [r3, #4]
 800f990:	6a3a      	ldr	r2, [r7, #32]
 800f992:	429a      	cmp	r2, r3
 800f994:	bf34      	ite	cc
 800f996:	2301      	movcc	r3, #1
 800f998:	2300      	movcs	r3, #0
 800f99a:	b2db      	uxtb	r3, r3
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	d02c      	beq.n	800f9fa <_ZN4tama27Nokia5110DisplayDataManager25getActiveSceneDisplayDataESt10shared_ptrINS_7TextureEE+0xb0>
        {
            unsigned segmentHeightNumber = i / segmentSize; // 0, 1, .., 7 -> 4
 800f9a0:	68bb      	ldr	r3, [r7, #8]
 800f9a2:	685b      	ldr	r3, [r3, #4]
 800f9a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f9a6:	fbb2 f3f3 	udiv	r3, r2, r3
 800f9aa:	61bb      	str	r3, [r7, #24]
            unsigned bitInSegment = i % segmentSize; // 0 ... 7 -> 0  // 504 = 7 * 48 + 47
 800f9ac:	68bb      	ldr	r3, [r7, #8]
 800f9ae:	685a      	ldr	r2, [r3, #4]
 800f9b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9b2:	fbb3 f1f2 	udiv	r1, r3, r2
 800f9b6:	fb02 f201 	mul.w	r2, r2, r1
 800f9ba:	1a9b      	subs	r3, r3, r2
 800f9bc:	617b      	str	r3, [r7, #20]
            setPixel(data[segmentHeightNumber * segmentsInWidth + j], bitInSegment, texture->data[i][j]);
 800f9be:	68bb      	ldr	r3, [r7, #8]
 800f9c0:	68db      	ldr	r3, [r3, #12]
 800f9c2:	69ba      	ldr	r2, [r7, #24]
 800f9c4:	fb02 f203 	mul.w	r2, r2, r3
 800f9c8:	6a3b      	ldr	r3, [r7, #32]
 800f9ca:	4413      	add	r3, r2
 800f9cc:	69fa      	ldr	r2, [r7, #28]
 800f9ce:	18d4      	adds	r4, r2, r3
 800f9d0:	6878      	ldr	r0, [r7, #4]
 800f9d2:	f7f7 fc89 	bl	80072e8 <_ZNKSt19__shared_ptr_accessIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800f9d6:	4603      	mov	r3, r0
 800f9d8:	68da      	ldr	r2, [r3, #12]
 800f9da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9dc:	009b      	lsls	r3, r3, #2
 800f9de:	4413      	add	r3, r2
 800f9e0:	681a      	ldr	r2, [r3, #0]
 800f9e2:	6a3b      	ldr	r3, [r7, #32]
 800f9e4:	4413      	add	r3, r2
 800f9e6:	781b      	ldrb	r3, [r3, #0]
 800f9e8:	697a      	ldr	r2, [r7, #20]
 800f9ea:	4621      	mov	r1, r4
 800f9ec:	68b8      	ldr	r0, [r7, #8]
 800f9ee:	f000 f817 	bl	800fa20 <_ZN4tama27Nokia5110DisplayDataManager8setPixelERhjNS_10PixelColorE>
        for (unsigned j = 0; j < texture->width; ++j) //i = 32, j = 60
 800f9f2:	6a3b      	ldr	r3, [r7, #32]
 800f9f4:	3301      	adds	r3, #1
 800f9f6:	623b      	str	r3, [r7, #32]
 800f9f8:	e7c5      	b.n	800f986 <_ZN4tama27Nokia5110DisplayDataManager25getActiveSceneDisplayDataESt10shared_ptrINS_7TextureEE+0x3c>
    for (unsigned i = 0; i < texture->height; ++i)
 800f9fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9fc:	3301      	adds	r3, #1
 800f9fe:	627b      	str	r3, [r7, #36]	; 0x24
 800fa00:	e7b2      	b.n	800f968 <_ZN4tama27Nokia5110DisplayDataManager25getActiveSceneDisplayDataESt10shared_ptrINS_7TextureEE+0x1e>
        }
    }
    return DisplayData{data, dataSize, dataFragmentSize};
 800fa02:	68fb      	ldr	r3, [r7, #12]
 800fa04:	69fa      	ldr	r2, [r7, #28]
 800fa06:	601a      	str	r2, [r3, #0]
 800fa08:	68bb      	ldr	r3, [r7, #8]
 800fa0a:	691a      	ldr	r2, [r3, #16]
 800fa0c:	68fb      	ldr	r3, [r7, #12]
 800fa0e:	605a      	str	r2, [r3, #4]
 800fa10:	68bb      	ldr	r3, [r7, #8]
 800fa12:	695a      	ldr	r2, [r3, #20]
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	609a      	str	r2, [r3, #8]
}
 800fa18:	68f8      	ldr	r0, [r7, #12]
 800fa1a:	372c      	adds	r7, #44	; 0x2c
 800fa1c:	46bd      	mov	sp, r7
 800fa1e:	bd90      	pop	{r4, r7, pc}

0800fa20 <_ZN4tama27Nokia5110DisplayDataManager8setPixelERhjNS_10PixelColorE>:

void tama::Nokia5110DisplayDataManager::setPixel(uint8_t & pixelSegment, unsigned position, tama::PixelColor color)
{
 800fa20:	b480      	push	{r7}
 800fa22:	b085      	sub	sp, #20
 800fa24:	af00      	add	r7, sp, #0
 800fa26:	60f8      	str	r0, [r7, #12]
 800fa28:	60b9      	str	r1, [r7, #8]
 800fa2a:	607a      	str	r2, [r7, #4]
 800fa2c:	70fb      	strb	r3, [r7, #3]
    if (color == PixelColor::BLACK)
 800fa2e:	78fb      	ldrb	r3, [r7, #3]
 800fa30:	2b01      	cmp	r3, #1
 800fa32:	d10d      	bne.n	800fa50 <_ZN4tama27Nokia5110DisplayDataManager8setPixelERhjNS_10PixelColorE+0x30>
    {
       pixelSegment |= 1 << position;
 800fa34:	68bb      	ldr	r3, [r7, #8]
 800fa36:	781b      	ldrb	r3, [r3, #0]
 800fa38:	b25a      	sxtb	r2, r3
 800fa3a:	2101      	movs	r1, #1
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	fa01 f303 	lsl.w	r3, r1, r3
 800fa42:	b25b      	sxtb	r3, r3
 800fa44:	4313      	orrs	r3, r2
 800fa46:	b25b      	sxtb	r3, r3
 800fa48:	b2da      	uxtb	r2, r3
 800fa4a:	68bb      	ldr	r3, [r7, #8]
 800fa4c:	701a      	strb	r2, [r3, #0]
    } else {
        pixelSegment &= ~(1 << position);
    }
}
 800fa4e:	e00e      	b.n	800fa6e <_ZN4tama27Nokia5110DisplayDataManager8setPixelERhjNS_10PixelColorE+0x4e>
        pixelSegment &= ~(1 << position);
 800fa50:	68bb      	ldr	r3, [r7, #8]
 800fa52:	781b      	ldrb	r3, [r3, #0]
 800fa54:	b25a      	sxtb	r2, r3
 800fa56:	2101      	movs	r1, #1
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	fa01 f303 	lsl.w	r3, r1, r3
 800fa5e:	b25b      	sxtb	r3, r3
 800fa60:	43db      	mvns	r3, r3
 800fa62:	b25b      	sxtb	r3, r3
 800fa64:	4013      	ands	r3, r2
 800fa66:	b25b      	sxtb	r3, r3
 800fa68:	b2da      	uxtb	r2, r3
 800fa6a:	68bb      	ldr	r3, [r7, #8]
 800fa6c:	701a      	strb	r2, [r3, #0]
}
 800fa6e:	bf00      	nop
 800fa70:	3714      	adds	r7, #20
 800fa72:	46bd      	mov	sp, r7
 800fa74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa78:	4770      	bx	lr

0800fa7a <_ZN4tama18Stm32TextureLoader4loadERKNS_12TextureAssetE>:
//

#include "Stm32TextureLoader.h"

std::shared_ptr<tama::Texture> tama::Stm32TextureLoader::load(const TextureAsset & textureAsset)
{
 800fa7a:	b590      	push	{r4, r7, lr}
 800fa7c:	b089      	sub	sp, #36	; 0x24
 800fa7e:	af00      	add	r7, sp, #0
 800fa80:	60f8      	str	r0, [r7, #12]
 800fa82:	60b9      	str	r1, [r7, #8]
 800fa84:	607a      	str	r2, [r7, #4]
    std::shared_ptr<Texture> texture = std::make_shared<Texture>(textureAsset.width, textureAsset.height);
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	1d19      	adds	r1, r3, #4
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	f103 0208 	add.w	r2, r3, #8
 800fa90:	68fb      	ldr	r3, [r7, #12]
 800fa92:	4618      	mov	r0, r3
 800fa94:	f000 f895 	bl	800fbc2 <_ZSt11make_sharedIN4tama7TextureEJRKjS3_EESt10shared_ptrIT_EDpOT0_>
    PixelColor ** textureData = createEmptyTextureData(textureAsset.width, textureAsset.height);
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	6859      	ldr	r1, [r3, #4]
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	689b      	ldr	r3, [r3, #8]
 800faa0:	461a      	mov	r2, r3
 800faa2:	68b8      	ldr	r0, [r7, #8]
 800faa4:	f000 f854 	bl	800fb50 <_ZN4tama18Stm32TextureLoader22createEmptyTextureDataEjj>
 800faa8:	6178      	str	r0, [r7, #20]

    for (unsigned i = 0; i < textureAsset.height; ++i)
 800faaa:	2300      	movs	r3, #0
 800faac:	61fb      	str	r3, [r7, #28]
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	689b      	ldr	r3, [r3, #8]
 800fab2:	69fa      	ldr	r2, [r7, #28]
 800fab4:	429a      	cmp	r2, r3
 800fab6:	d227      	bcs.n	800fb08 <_ZN4tama18Stm32TextureLoader4loadERKNS_12TextureAssetE+0x8e>
    {
        for (unsigned j = 0; j < textureAsset.width; ++j)
 800fab8:	2300      	movs	r3, #0
 800faba:	61bb      	str	r3, [r7, #24]
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	685b      	ldr	r3, [r3, #4]
 800fac0:	69ba      	ldr	r2, [r7, #24]
 800fac2:	429a      	cmp	r2, r3
 800fac4:	d21c      	bcs.n	800fb00 <_ZN4tama18Stm32TextureLoader4loadERKNS_12TextureAssetE+0x86>
        {
            textureData[i][j] = colorFromData(textureAsset.data[i * textureAsset.width + j]);
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	681a      	ldr	r2, [r3, #0]
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	685b      	ldr	r3, [r3, #4]
 800face:	69f9      	ldr	r1, [r7, #28]
 800fad0:	fb01 f103 	mul.w	r1, r1, r3
 800fad4:	69bb      	ldr	r3, [r7, #24]
 800fad6:	440b      	add	r3, r1
 800fad8:	005b      	lsls	r3, r3, #1
 800fada:	4413      	add	r3, r2
 800fadc:	f9b3 1000 	ldrsh.w	r1, [r3]
 800fae0:	69fb      	ldr	r3, [r7, #28]
 800fae2:	009b      	lsls	r3, r3, #2
 800fae4:	697a      	ldr	r2, [r7, #20]
 800fae6:	4413      	add	r3, r2
 800fae8:	681a      	ldr	r2, [r3, #0]
 800faea:	69bb      	ldr	r3, [r7, #24]
 800faec:	18d4      	adds	r4, r2, r3
 800faee:	68b8      	ldr	r0, [r7, #8]
 800faf0:	f000 f815 	bl	800fb1e <_ZN4tama18Stm32TextureLoader13colorFromDataEs>
 800faf4:	4603      	mov	r3, r0
 800faf6:	7023      	strb	r3, [r4, #0]
        for (unsigned j = 0; j < textureAsset.width; ++j)
 800faf8:	69bb      	ldr	r3, [r7, #24]
 800fafa:	3301      	adds	r3, #1
 800fafc:	61bb      	str	r3, [r7, #24]
 800fafe:	e7dd      	b.n	800fabc <_ZN4tama18Stm32TextureLoader4loadERKNS_12TextureAssetE+0x42>
    for (unsigned i = 0; i < textureAsset.height; ++i)
 800fb00:	69fb      	ldr	r3, [r7, #28]
 800fb02:	3301      	adds	r3, #1
 800fb04:	61fb      	str	r3, [r7, #28]
 800fb06:	e7d2      	b.n	800faae <_ZN4tama18Stm32TextureLoader4loadERKNS_12TextureAssetE+0x34>
        }
    }

    texture->data = textureData;
 800fb08:	68f8      	ldr	r0, [r7, #12]
 800fb0a:	f7f7 fbed 	bl	80072e8 <_ZNKSt19__shared_ptr_accessIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800fb0e:	4602      	mov	r2, r0
 800fb10:	697b      	ldr	r3, [r7, #20]
 800fb12:	60d3      	str	r3, [r2, #12]

    return texture;
 800fb14:	bf00      	nop
}
 800fb16:	68f8      	ldr	r0, [r7, #12]
 800fb18:	3724      	adds	r7, #36	; 0x24
 800fb1a:	46bd      	mov	sp, r7
 800fb1c:	bd90      	pop	{r4, r7, pc}

0800fb1e <_ZN4tama18Stm32TextureLoader13colorFromDataEs>:

tama::PixelColor tama::Stm32TextureLoader::colorFromData(short data)
{
 800fb1e:	b480      	push	{r7}
 800fb20:	b083      	sub	sp, #12
 800fb22:	af00      	add	r7, sp, #0
 800fb24:	6078      	str	r0, [r7, #4]
 800fb26:	460b      	mov	r3, r1
 800fb28:	807b      	strh	r3, [r7, #2]
    if (data == 15)
 800fb2a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800fb2e:	2b0f      	cmp	r3, #15
 800fb30:	d101      	bne.n	800fb36 <_ZN4tama18Stm32TextureLoader13colorFromDataEs+0x18>
    {
        return PixelColor::WHITE;
 800fb32:	2300      	movs	r3, #0
 800fb34:	e006      	b.n	800fb44 <_ZN4tama18Stm32TextureLoader13colorFromDataEs+0x26>
    } else if (data == 0)
 800fb36:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d101      	bne.n	800fb42 <_ZN4tama18Stm32TextureLoader13colorFromDataEs+0x24>
    {
        return PixelColor::BLACK;
 800fb3e:	2301      	movs	r3, #1
 800fb40:	e000      	b.n	800fb44 <_ZN4tama18Stm32TextureLoader13colorFromDataEs+0x26>
    }
    return PixelColor::TRANSPARENT;
 800fb42:	2302      	movs	r3, #2
}
 800fb44:	4618      	mov	r0, r3
 800fb46:	370c      	adds	r7, #12
 800fb48:	46bd      	mov	sp, r7
 800fb4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb4e:	4770      	bx	lr

0800fb50 <_ZN4tama18Stm32TextureLoader22createEmptyTextureDataEjj>:

tama::PixelColor ** tama::Stm32TextureLoader::createEmptyTextureData(unsigned int width, unsigned int height)
{
 800fb50:	b590      	push	{r4, r7, lr}
 800fb52:	b087      	sub	sp, #28
 800fb54:	af00      	add	r7, sp, #0
 800fb56:	60f8      	str	r0, [r7, #12]
 800fb58:	60b9      	str	r1, [r7, #8]
 800fb5a:	607a      	str	r2, [r7, #4]
    PixelColor ** textureData = new PixelColor*[height];
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	4a12      	ldr	r2, [pc, #72]	; (800fba8 <_ZN4tama18Stm32TextureLoader22createEmptyTextureDataEjj+0x58>)
 800fb60:	4293      	cmp	r3, r2
 800fb62:	d801      	bhi.n	800fb68 <_ZN4tama18Stm32TextureLoader22createEmptyTextureDataEjj+0x18>
 800fb64:	009b      	lsls	r3, r3, #2
 800fb66:	e001      	b.n	800fb6c <_ZN4tama18Stm32TextureLoader22createEmptyTextureDataEjj+0x1c>
 800fb68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fb6c:	4618      	mov	r0, r3
 800fb6e:	f007 fc9e 	bl	80174ae <_Znaj>
 800fb72:	4603      	mov	r3, r0
 800fb74:	613b      	str	r3, [r7, #16]
    for (unsigned i = 0; i < height; ++i)
 800fb76:	2300      	movs	r3, #0
 800fb78:	617b      	str	r3, [r7, #20]
 800fb7a:	697a      	ldr	r2, [r7, #20]
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	429a      	cmp	r2, r3
 800fb80:	d20d      	bcs.n	800fb9e <_ZN4tama18Stm32TextureLoader22createEmptyTextureDataEjj+0x4e>
    {
        textureData[i] = new PixelColor[width];
 800fb82:	68b9      	ldr	r1, [r7, #8]
 800fb84:	697b      	ldr	r3, [r7, #20]
 800fb86:	009b      	lsls	r3, r3, #2
 800fb88:	693a      	ldr	r2, [r7, #16]
 800fb8a:	18d4      	adds	r4, r2, r3
 800fb8c:	4608      	mov	r0, r1
 800fb8e:	f007 fc8e 	bl	80174ae <_Znaj>
 800fb92:	4603      	mov	r3, r0
 800fb94:	6023      	str	r3, [r4, #0]
    for (unsigned i = 0; i < height; ++i)
 800fb96:	697b      	ldr	r3, [r7, #20]
 800fb98:	3301      	adds	r3, #1
 800fb9a:	617b      	str	r3, [r7, #20]
 800fb9c:	e7ed      	b.n	800fb7a <_ZN4tama18Stm32TextureLoader22createEmptyTextureDataEjj+0x2a>
    }
    return textureData;
 800fb9e:	693b      	ldr	r3, [r7, #16]
}
 800fba0:	4618      	mov	r0, r3
 800fba2:	371c      	adds	r7, #28
 800fba4:	46bd      	mov	sp, r7
 800fba6:	bd90      	pop	{r4, r7, pc}
 800fba8:	1ffffffe 	.word	0x1ffffffe

0800fbac <_ZSt7forwardIRKjEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800fbac:	b480      	push	{r7}
 800fbae:	b083      	sub	sp, #12
 800fbb0:	af00      	add	r7, sp, #0
 800fbb2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	4618      	mov	r0, r3
 800fbb8:	370c      	adds	r7, #12
 800fbba:	46bd      	mov	sp, r7
 800fbbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbc0:	4770      	bx	lr

0800fbc2 <_ZSt11make_sharedIN4tama7TextureEJRKjS3_EESt10shared_ptrIT_EDpOT0_>:
    make_shared(_Args&&... __args)
 800fbc2:	b590      	push	{r4, r7, lr}
 800fbc4:	b087      	sub	sp, #28
 800fbc6:	af00      	add	r7, sp, #0
 800fbc8:	60f8      	str	r0, [r7, #12]
 800fbca:	60b9      	str	r1, [r7, #8]
 800fbcc:	607a      	str	r2, [r7, #4]
				       std::forward<_Args>(__args)...);
 800fbce:	f107 0314 	add.w	r3, r7, #20
 800fbd2:	4618      	mov	r0, r3
 800fbd4:	f7f7 fd2f 	bl	8007636 <_ZNSaIN4tama7TextureEEC1Ev>
 800fbd8:	68b8      	ldr	r0, [r7, #8]
 800fbda:	f7ff ffe7 	bl	800fbac <_ZSt7forwardIRKjEOT_RNSt16remove_referenceIS2_E4typeE>
 800fbde:	4604      	mov	r4, r0
 800fbe0:	6878      	ldr	r0, [r7, #4]
 800fbe2:	f7ff ffe3 	bl	800fbac <_ZSt7forwardIRKjEOT_RNSt16remove_referenceIS2_E4typeE>
 800fbe6:	4603      	mov	r3, r0
 800fbe8:	68f8      	ldr	r0, [r7, #12]
 800fbea:	f107 0114 	add.w	r1, r7, #20
 800fbee:	4622      	mov	r2, r4
 800fbf0:	f000 f809 	bl	800fc06 <_ZSt15allocate_sharedIN4tama7TextureESaIS1_EJRKjS4_EESt10shared_ptrIT_ERKT0_DpOT1_>
 800fbf4:	f107 0314 	add.w	r3, r7, #20
 800fbf8:	4618      	mov	r0, r3
 800fbfa:	f7f7 fd28 	bl	800764e <_ZNSaIN4tama7TextureEED1Ev>
    }
 800fbfe:	68f8      	ldr	r0, [r7, #12]
 800fc00:	371c      	adds	r7, #28
 800fc02:	46bd      	mov	sp, r7
 800fc04:	bd90      	pop	{r4, r7, pc}

0800fc06 <_ZSt15allocate_sharedIN4tama7TextureESaIS1_EJRKjS4_EESt10shared_ptrIT_ERKT0_DpOT1_>:
    allocate_shared(const _Alloc& __a, _Args&&... __args)
 800fc06:	b5b0      	push	{r4, r5, r7, lr}
 800fc08:	b088      	sub	sp, #32
 800fc0a:	af02      	add	r7, sp, #8
 800fc0c:	60f8      	str	r0, [r7, #12]
 800fc0e:	60b9      	str	r1, [r7, #8]
 800fc10:	607a      	str	r2, [r7, #4]
 800fc12:	603b      	str	r3, [r7, #0]
			     std::forward<_Args>(__args)...);
 800fc14:	6878      	ldr	r0, [r7, #4]
 800fc16:	f7ff ffc9 	bl	800fbac <_ZSt7forwardIRKjEOT_RNSt16remove_referenceIS2_E4typeE>
 800fc1a:	4604      	mov	r4, r0
 800fc1c:	6838      	ldr	r0, [r7, #0]
 800fc1e:	f7ff ffc5 	bl	800fbac <_ZSt7forwardIRKjEOT_RNSt16remove_referenceIS2_E4typeE>
 800fc22:	4603      	mov	r3, r0
 800fc24:	9300      	str	r3, [sp, #0]
 800fc26:	4623      	mov	r3, r4
 800fc28:	68ba      	ldr	r2, [r7, #8]
 800fc2a:	4629      	mov	r1, r5
 800fc2c:	68f8      	ldr	r0, [r7, #12]
 800fc2e:	f000 f804 	bl	800fc3a <_ZNSt10shared_ptrIN4tama7TextureEEC1ISaIS1_EJRKjS6_EEESt19_Sp_make_shared_tagRKT_DpOT0_>
    }
 800fc32:	68f8      	ldr	r0, [r7, #12]
 800fc34:	3718      	adds	r7, #24
 800fc36:	46bd      	mov	sp, r7
 800fc38:	bdb0      	pop	{r4, r5, r7, pc}

0800fc3a <_ZNSt10shared_ptrIN4tama7TextureEEC1ISaIS1_EJRKjS6_EEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 800fc3a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fc3c:	b087      	sub	sp, #28
 800fc3e:	af02      	add	r7, sp, #8
 800fc40:	60f8      	str	r0, [r7, #12]
 800fc42:	7239      	strb	r1, [r7, #8]
 800fc44:	607a      	str	r2, [r7, #4]
 800fc46:	603b      	str	r3, [r7, #0]
	: __shared_ptr<_Tp>(__tag, __a, std::forward<_Args>(__args)...)
 800fc48:	68fc      	ldr	r4, [r7, #12]
 800fc4a:	6838      	ldr	r0, [r7, #0]
 800fc4c:	f7ff ffae 	bl	800fbac <_ZSt7forwardIRKjEOT_RNSt16remove_referenceIS2_E4typeE>
 800fc50:	4605      	mov	r5, r0
 800fc52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fc54:	f7ff ffaa 	bl	800fbac <_ZSt7forwardIRKjEOT_RNSt16remove_referenceIS2_E4typeE>
 800fc58:	4603      	mov	r3, r0
 800fc5a:	9300      	str	r3, [sp, #0]
 800fc5c:	462b      	mov	r3, r5
 800fc5e:	687a      	ldr	r2, [r7, #4]
 800fc60:	4631      	mov	r1, r6
 800fc62:	4620      	mov	r0, r4
 800fc64:	f000 f805 	bl	800fc72 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJRKjS8_EEESt19_Sp_make_shared_tagRKT_DpOT0_>
	{ }
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	4618      	mov	r0, r3
 800fc6c:	3714      	adds	r7, #20
 800fc6e:	46bd      	mov	sp, r7
 800fc70:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fc72 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJRKjS8_EEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 800fc72:	b590      	push	{r4, r7, lr}
 800fc74:	b08d      	sub	sp, #52	; 0x34
 800fc76:	af00      	add	r7, sp, #0
 800fc78:	60f8      	str	r0, [r7, #12]
 800fc7a:	7239      	strb	r1, [r7, #8]
 800fc7c:	607a      	str	r2, [r7, #4]
 800fc7e:	603b      	str	r3, [r7, #0]
	: _M_ptr(), _M_refcount()
 800fc80:	68fb      	ldr	r3, [r7, #12]
 800fc82:	2200      	movs	r2, #0
 800fc84:	601a      	str	r2, [r3, #0]
 800fc86:	68fb      	ldr	r3, [r7, #12]
 800fc88:	3304      	adds	r3, #4
 800fc8a:	4618      	mov	r0, r3
 800fc8c:	f7f1 f8f5 	bl	8000e7a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 800fc90:	f107 0320 	add.w	r3, r7, #32
 800fc94:	6879      	ldr	r1, [r7, #4]
 800fc96:	4618      	mov	r0, r3
 800fc98:	f7f7 fff4 	bl	8007c84 <_ZNSaIN4tama7TextureEEC1ERKS1_>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 800fc9c:	f107 0318 	add.w	r3, r7, #24
 800fca0:	f107 0220 	add.w	r2, r7, #32
 800fca4:	4611      	mov	r1, r2
 800fca6:	4618      	mov	r0, r3
 800fca8:	f7f7 fffa 	bl	8007ca0 <_ZSt18__allocate_guardedISaIN4tama7TextureEEESt15__allocated_ptrIT_ERS4_>
	  auto __ptr = __guard.get();
 800fcac:	f107 0318 	add.w	r3, r7, #24
 800fcb0:	4618      	mov	r0, r3
 800fcb2:	f7f8 f81d 	bl	8007cf0 <_ZNSt15__allocated_ptrISaIN4tama7TextureEEE3getEv>
 800fcb6:	62f8      	str	r0, [r7, #44]	; 0x2c
	  __traits::construct(__del._M_alloc, __ptr,
 800fcb8:	6838      	ldr	r0, [r7, #0]
 800fcba:	f7ff ff77 	bl	800fbac <_ZSt7forwardIRKjEOT_RNSt16remove_referenceIS2_E4typeE>
 800fcbe:	4604      	mov	r4, r0
 800fcc0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800fcc2:	f7ff ff73 	bl	800fbac <_ZSt7forwardIRKjEOT_RNSt16remove_referenceIS2_E4typeE>
 800fcc6:	4603      	mov	r3, r0
 800fcc8:	f107 0020 	add.w	r0, r7, #32
 800fccc:	4622      	mov	r2, r4
 800fcce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fcd0:	f000 f84e 	bl	800fd70 <_ZNSt16allocator_traitsISaIN4tama7TextureEEE9constructIS1_JRKjS6_EEEvRS2_PT_DpOT0_>
	  __guard = nullptr;
 800fcd4:	f107 0318 	add.w	r3, r7, #24
 800fcd8:	2100      	movs	r1, #0
 800fcda:	4618      	mov	r0, r3
 800fcdc:	f7f8 f82e 	bl	8007d3c <_ZNSt15__allocated_ptrISaIN4tama7TextureEEEaSEDn>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 800fce0:	f107 0220 	add.w	r2, r7, #32
 800fce4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fce8:	4611      	mov	r1, r2
 800fcea:	4618      	mov	r0, r3
 800fcec:	f7f7 fe6f 	bl	80079ce <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>
 800fcf0:	f107 0220 	add.w	r2, r7, #32
 800fcf4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fcf8:	4611      	mov	r1, r2
 800fcfa:	4618      	mov	r0, r3
 800fcfc:	f7f7 ffc2 	bl	8007c84 <_ZNSaIN4tama7TextureEEC1ERKS1_>
 800fd00:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fd04:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800fd08:	f107 0014 	add.w	r0, r7, #20
 800fd0c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fd0e:	f7f8 f84a 	bl	8007da6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama7TextureENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
 800fd12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fd16:	4618      	mov	r0, r3
 800fd18:	f7f7 fc99 	bl	800764e <_ZNSaIN4tama7TextureEED1Ev>
 800fd1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fd20:	4618      	mov	r0, r3
 800fd22:	f7f7 fe47 	bl	80079b4 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	  _M_refcount._M_swap(__count);
 800fd26:	68fb      	ldr	r3, [r7, #12]
 800fd28:	3304      	adds	r3, #4
 800fd2a:	f107 0214 	add.w	r2, r7, #20
 800fd2e:	4611      	mov	r1, r2
 800fd30:	4618      	mov	r0, r3
 800fd32:	f7f1 f8b0 	bl	8000e96 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  _M_ptr = __ptr;
 800fd36:	68fb      	ldr	r3, [r7, #12]
 800fd38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fd3a:	601a      	str	r2, [r3, #0]
	  _M_enable_shared_from_this_with(_M_ptr);
 800fd3c:	68fb      	ldr	r3, [r7, #12]
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	4619      	mov	r1, r3
 800fd42:	68f8      	ldr	r0, [r7, #12]
 800fd44:	f7f8 f886 	bl	8007e54 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 800fd48:	f107 0314 	add.w	r3, r7, #20
 800fd4c:	4618      	mov	r0, r3
 800fd4e:	f7f0 fe78 	bl	8000a42 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 800fd52:	f107 0318 	add.w	r3, r7, #24
 800fd56:	4618      	mov	r0, r3
 800fd58:	f7f7 ffb5 	bl	8007cc6 <_ZNSt15__allocated_ptrISaIN4tama7TextureEEED1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 800fd5c:	f107 0320 	add.w	r3, r7, #32
 800fd60:	4618      	mov	r0, r3
 800fd62:	f7f7 fe27 	bl	80079b4 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	}
 800fd66:	68fb      	ldr	r3, [r7, #12]
 800fd68:	4618      	mov	r0, r3
 800fd6a:	3734      	adds	r7, #52	; 0x34
 800fd6c:	46bd      	mov	sp, r7
 800fd6e:	bd90      	pop	{r4, r7, pc}

0800fd70 <_ZNSt16allocator_traitsISaIN4tama7TextureEEE9constructIS1_JRKjS6_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 800fd70:	b590      	push	{r4, r7, lr}
 800fd72:	b085      	sub	sp, #20
 800fd74:	af00      	add	r7, sp, #0
 800fd76:	60f8      	str	r0, [r7, #12]
 800fd78:	60b9      	str	r1, [r7, #8]
 800fd7a:	607a      	str	r2, [r7, #4]
 800fd7c:	603b      	str	r3, [r7, #0]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 800fd7e:	6878      	ldr	r0, [r7, #4]
 800fd80:	f7ff ff14 	bl	800fbac <_ZSt7forwardIRKjEOT_RNSt16remove_referenceIS2_E4typeE>
 800fd84:	4604      	mov	r4, r0
 800fd86:	6838      	ldr	r0, [r7, #0]
 800fd88:	f7ff ff10 	bl	800fbac <_ZSt7forwardIRKjEOT_RNSt16remove_referenceIS2_E4typeE>
 800fd8c:	4603      	mov	r3, r0
 800fd8e:	4622      	mov	r2, r4
 800fd90:	68b9      	ldr	r1, [r7, #8]
 800fd92:	68f8      	ldr	r0, [r7, #12]
 800fd94:	f000 f804 	bl	800fda0 <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEE9constructIS2_JRKjS6_EEEvPT_DpOT0_>
 800fd98:	bf00      	nop
 800fd9a:	3714      	adds	r7, #20
 800fd9c:	46bd      	mov	sp, r7
 800fd9e:	bd90      	pop	{r4, r7, pc}

0800fda0 <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEE9constructIS2_JRKjS6_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800fda0:	b5b0      	push	{r4, r5, r7, lr}
 800fda2:	b084      	sub	sp, #16
 800fda4:	af00      	add	r7, sp, #0
 800fda6:	60f8      	str	r0, [r7, #12]
 800fda8:	60b9      	str	r1, [r7, #8]
 800fdaa:	607a      	str	r2, [r7, #4]
 800fdac:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800fdae:	6878      	ldr	r0, [r7, #4]
 800fdb0:	f7ff fefc 	bl	800fbac <_ZSt7forwardIRKjEOT_RNSt16remove_referenceIS2_E4typeE>
 800fdb4:	4603      	mov	r3, r0
 800fdb6:	681c      	ldr	r4, [r3, #0]
 800fdb8:	6838      	ldr	r0, [r7, #0]
 800fdba:	f7ff fef7 	bl	800fbac <_ZSt7forwardIRKjEOT_RNSt16remove_referenceIS2_E4typeE>
 800fdbe:	4603      	mov	r3, r0
 800fdc0:	681d      	ldr	r5, [r3, #0]
 800fdc2:	68bb      	ldr	r3, [r7, #8]
 800fdc4:	4619      	mov	r1, r3
 800fdc6:	2010      	movs	r0, #16
 800fdc8:	f7f0 fbb9 	bl	800053e <_ZnwjPv>
 800fdcc:	4603      	mov	r3, r0
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d004      	beq.n	800fddc <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEE9constructIS2_JRKjS6_EEEvPT_DpOT0_+0x3c>
 800fdd2:	462a      	mov	r2, r5
 800fdd4:	4621      	mov	r1, r4
 800fdd6:	4618      	mov	r0, r3
 800fdd8:	f7f6 fd08 	bl	80067ec <_ZN4tama7TextureC1Ejj>
 800fddc:	bf00      	nop
 800fdde:	3710      	adds	r7, #16
 800fde0:	46bd      	mov	sp, r7
 800fde2:	bdb0      	pop	{r4, r5, r7, pc}

0800fde4 <_ZN4tama16Stm32TimeMonitor10startTimerEv>:
//

#include "Stm32TimeMonitor.h"

void tama::Stm32TimeMonitor::startTimer()
{
 800fde4:	b580      	push	{r7, lr}
 800fde6:	b082      	sub	sp, #8
 800fde8:	af00      	add	r7, sp, #0
 800fdea:	6078      	str	r0, [r7, #4]
    timestamp = HAL_GetTick();
 800fdec:	f000 fe4a 	bl	8010a84 <HAL_GetTick>
 800fdf0:	4602      	mov	r2, r0
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	605a      	str	r2, [r3, #4]
}
 800fdf6:	bf00      	nop
 800fdf8:	3708      	adds	r7, #8
 800fdfa:	46bd      	mov	sp, r7
 800fdfc:	bd80      	pop	{r7, pc}

0800fdfe <_ZN4tama16Stm32TimeMonitor14getElapsedTimeEv>:

unsigned int tama::Stm32TimeMonitor::getElapsedTime()
{
 800fdfe:	b580      	push	{r7, lr}
 800fe00:	b082      	sub	sp, #8
 800fe02:	af00      	add	r7, sp, #0
 800fe04:	6078      	str	r0, [r7, #4]
    return HAL_GetTick() - timestamp;
 800fe06:	f000 fe3d 	bl	8010a84 <HAL_GetTick>
 800fe0a:	4602      	mov	r2, r0
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	685b      	ldr	r3, [r3, #4]
 800fe10:	1ad3      	subs	r3, r2, r3
}
 800fe12:	4618      	mov	r0, r3
 800fe14:	3708      	adds	r7, #8
 800fe16:	46bd      	mov	sp, r7
 800fe18:	bd80      	pop	{r7, pc}
	...

0800fe1c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800fe1c:	b580      	push	{r7, lr}
 800fe1e:	b08c      	sub	sp, #48	; 0x30
 800fe20:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fe22:	f107 031c 	add.w	r3, r7, #28
 800fe26:	2200      	movs	r2, #0
 800fe28:	601a      	str	r2, [r3, #0]
 800fe2a:	605a      	str	r2, [r3, #4]
 800fe2c:	609a      	str	r2, [r3, #8]
 800fe2e:	60da      	str	r2, [r3, #12]
 800fe30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800fe32:	2300      	movs	r3, #0
 800fe34:	61bb      	str	r3, [r7, #24]
 800fe36:	4b7e      	ldr	r3, [pc, #504]	; (8010030 <MX_GPIO_Init+0x214>)
 800fe38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe3a:	4a7d      	ldr	r2, [pc, #500]	; (8010030 <MX_GPIO_Init+0x214>)
 800fe3c:	f043 0310 	orr.w	r3, r3, #16
 800fe40:	6313      	str	r3, [r2, #48]	; 0x30
 800fe42:	4b7b      	ldr	r3, [pc, #492]	; (8010030 <MX_GPIO_Init+0x214>)
 800fe44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe46:	f003 0310 	and.w	r3, r3, #16
 800fe4a:	61bb      	str	r3, [r7, #24]
 800fe4c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800fe4e:	2300      	movs	r3, #0
 800fe50:	617b      	str	r3, [r7, #20]
 800fe52:	4b77      	ldr	r3, [pc, #476]	; (8010030 <MX_GPIO_Init+0x214>)
 800fe54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe56:	4a76      	ldr	r2, [pc, #472]	; (8010030 <MX_GPIO_Init+0x214>)
 800fe58:	f043 0304 	orr.w	r3, r3, #4
 800fe5c:	6313      	str	r3, [r2, #48]	; 0x30
 800fe5e:	4b74      	ldr	r3, [pc, #464]	; (8010030 <MX_GPIO_Init+0x214>)
 800fe60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe62:	f003 0304 	and.w	r3, r3, #4
 800fe66:	617b      	str	r3, [r7, #20]
 800fe68:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800fe6a:	2300      	movs	r3, #0
 800fe6c:	613b      	str	r3, [r7, #16]
 800fe6e:	4b70      	ldr	r3, [pc, #448]	; (8010030 <MX_GPIO_Init+0x214>)
 800fe70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe72:	4a6f      	ldr	r2, [pc, #444]	; (8010030 <MX_GPIO_Init+0x214>)
 800fe74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fe78:	6313      	str	r3, [r2, #48]	; 0x30
 800fe7a:	4b6d      	ldr	r3, [pc, #436]	; (8010030 <MX_GPIO_Init+0x214>)
 800fe7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fe82:	613b      	str	r3, [r7, #16]
 800fe84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800fe86:	2300      	movs	r3, #0
 800fe88:	60fb      	str	r3, [r7, #12]
 800fe8a:	4b69      	ldr	r3, [pc, #420]	; (8010030 <MX_GPIO_Init+0x214>)
 800fe8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe8e:	4a68      	ldr	r2, [pc, #416]	; (8010030 <MX_GPIO_Init+0x214>)
 800fe90:	f043 0301 	orr.w	r3, r3, #1
 800fe94:	6313      	str	r3, [r2, #48]	; 0x30
 800fe96:	4b66      	ldr	r3, [pc, #408]	; (8010030 <MX_GPIO_Init+0x214>)
 800fe98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe9a:	f003 0301 	and.w	r3, r3, #1
 800fe9e:	60fb      	str	r3, [r7, #12]
 800fea0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800fea2:	2300      	movs	r3, #0
 800fea4:	60bb      	str	r3, [r7, #8]
 800fea6:	4b62      	ldr	r3, [pc, #392]	; (8010030 <MX_GPIO_Init+0x214>)
 800fea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800feaa:	4a61      	ldr	r2, [pc, #388]	; (8010030 <MX_GPIO_Init+0x214>)
 800feac:	f043 0302 	orr.w	r3, r3, #2
 800feb0:	6313      	str	r3, [r2, #48]	; 0x30
 800feb2:	4b5f      	ldr	r3, [pc, #380]	; (8010030 <MX_GPIO_Init+0x214>)
 800feb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800feb6:	f003 0302 	and.w	r3, r3, #2
 800feba:	60bb      	str	r3, [r7, #8]
 800febc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800febe:	2300      	movs	r3, #0
 800fec0:	607b      	str	r3, [r7, #4]
 800fec2:	4b5b      	ldr	r3, [pc, #364]	; (8010030 <MX_GPIO_Init+0x214>)
 800fec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fec6:	4a5a      	ldr	r2, [pc, #360]	; (8010030 <MX_GPIO_Init+0x214>)
 800fec8:	f043 0308 	orr.w	r3, r3, #8
 800fecc:	6313      	str	r3, [r2, #48]	; 0x30
 800fece:	4b58      	ldr	r3, [pc, #352]	; (8010030 <MX_GPIO_Init+0x214>)
 800fed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fed2:	f003 0308 	and.w	r3, r3, #8
 800fed6:	607b      	str	r3, [r7, #4]
 800fed8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|RST_Pin|BL_Pin, GPIO_PIN_RESET);
 800feda:	2200      	movs	r2, #0
 800fedc:	f44f 7122 	mov.w	r1, #648	; 0x288
 800fee0:	4854      	ldr	r0, [pc, #336]	; (8010034 <MX_GPIO_Init+0x218>)
 800fee2:	f001 f8a9 	bl	8011038 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800fee6:	2201      	movs	r2, #1
 800fee8:	2101      	movs	r1, #1
 800feea:	4853      	ldr	r0, [pc, #332]	; (8010038 <MX_GPIO_Init+0x21c>)
 800feec:	f001 f8a4 	bl	8011038 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 800fef0:	2200      	movs	r2, #0
 800fef2:	2120      	movs	r1, #32
 800fef4:	4850      	ldr	r0, [pc, #320]	; (8010038 <MX_GPIO_Init+0x21c>)
 800fef6:	f001 f89f 	bl	8011038 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_RESET);
 800fefa:	2200      	movs	r2, #0
 800fefc:	2102      	movs	r1, #2
 800fefe:	484f      	ldr	r0, [pc, #316]	; (801003c <MX_GPIO_Init+0x220>)
 800ff00:	f001 f89a 	bl	8011038 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800ff04:	2200      	movs	r2, #0
 800ff06:	f24f 0110 	movw	r1, #61456	; 0xf010
 800ff0a:	484d      	ldr	r0, [pc, #308]	; (8010040 <MX_GPIO_Init+0x224>)
 800ff0c:	f001 f894 	bl	8011038 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 800ff10:	2304      	movs	r3, #4
 800ff12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ff14:	2300      	movs	r3, #0
 800ff16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ff18:	2300      	movs	r3, #0
 800ff1a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 800ff1c:	f107 031c 	add.w	r3, r7, #28
 800ff20:	4619      	mov	r1, r3
 800ff22:	4844      	ldr	r0, [pc, #272]	; (8010034 <MX_GPIO_Init+0x218>)
 800ff24:	f000 feee 	bl	8010d04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|RST_Pin|BL_Pin;
 800ff28:	f44f 7322 	mov.w	r3, #648	; 0x288
 800ff2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ff2e:	2301      	movs	r3, #1
 800ff30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ff32:	2300      	movs	r3, #0
 800ff34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ff36:	2300      	movs	r3, #0
 800ff38:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800ff3a:	f107 031c 	add.w	r3, r7, #28
 800ff3e:	4619      	mov	r1, r3
 800ff40:	483c      	ldr	r0, [pc, #240]	; (8010034 <MX_GPIO_Init+0x218>)
 800ff42:	f000 fedf 	bl	8010d04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 800ff46:	2332      	movs	r3, #50	; 0x32
 800ff48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800ff4a:	4b3e      	ldr	r3, [pc, #248]	; (8010044 <MX_GPIO_Init+0x228>)
 800ff4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ff4e:	2300      	movs	r3, #0
 800ff50:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800ff52:	f107 031c 	add.w	r3, r7, #28
 800ff56:	4619      	mov	r1, r3
 800ff58:	4836      	ldr	r0, [pc, #216]	; (8010034 <MX_GPIO_Init+0x218>)
 800ff5a:	f000 fed3 	bl	8010d04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|DC_Pin;
 800ff5e:	2321      	movs	r3, #33	; 0x21
 800ff60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ff62:	2301      	movs	r3, #1
 800ff64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ff66:	2300      	movs	r3, #0
 800ff68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ff6a:	2300      	movs	r3, #0
 800ff6c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ff6e:	f107 031c 	add.w	r3, r7, #28
 800ff72:	4619      	mov	r1, r3
 800ff74:	4830      	ldr	r0, [pc, #192]	; (8010038 <MX_GPIO_Init+0x21c>)
 800ff76:	f000 fec5 	bl	8010d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800ff7a:	2301      	movs	r3, #1
 800ff7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800ff7e:	4b31      	ldr	r3, [pc, #196]	; (8010044 <MX_GPIO_Init+0x228>)
 800ff80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ff82:	2300      	movs	r3, #0
 800ff84:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ff86:	f107 031c 	add.w	r3, r7, #28
 800ff8a:	4619      	mov	r1, r3
 800ff8c:	482e      	ldr	r0, [pc, #184]	; (8010048 <MX_GPIO_Init+0x22c>)
 800ff8e:	f000 feb9 	bl	8010d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CE_Pin;
 800ff92:	2302      	movs	r3, #2
 800ff94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ff96:	2301      	movs	r3, #1
 800ff98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ff9a:	2300      	movs	r3, #0
 800ff9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ff9e:	2300      	movs	r3, #0
 800ffa0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CE_GPIO_Port, &GPIO_InitStruct);
 800ffa2:	f107 031c 	add.w	r3, r7, #28
 800ffa6:	4619      	mov	r1, r3
 800ffa8:	4824      	ldr	r0, [pc, #144]	; (801003c <MX_GPIO_Init+0x220>)
 800ffaa:	f000 feab 	bl	8010d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_B_Pin;
 800ffae:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ffb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ffb4:	2300      	movs	r3, #0
 800ffb6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ffb8:	2301      	movs	r3, #1
 800ffba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUTTON_B_GPIO_Port, &GPIO_InitStruct);
 800ffbc:	f107 031c 	add.w	r3, r7, #28
 800ffc0:	4619      	mov	r1, r3
 800ffc2:	481f      	ldr	r0, [pc, #124]	; (8010040 <MX_GPIO_Init+0x224>)
 800ffc4:	f000 fe9e 	bl	8010d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_C_Pin;
 800ffc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ffcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800ffce:	4b1f      	ldr	r3, [pc, #124]	; (801004c <MX_GPIO_Init+0x230>)
 800ffd0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ffd2:	2301      	movs	r3, #1
 800ffd4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUTTON_C_GPIO_Port, &GPIO_InitStruct);
 800ffd6:	f107 031c 	add.w	r3, r7, #28
 800ffda:	4619      	mov	r1, r3
 800ffdc:	4818      	ldr	r0, [pc, #96]	; (8010040 <MX_GPIO_Init+0x224>)
 800ffde:	f000 fe91 	bl	8010d04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800ffe2:	f24f 0310 	movw	r3, #61456	; 0xf010
 800ffe6:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ffe8:	2301      	movs	r3, #1
 800ffea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ffec:	2300      	movs	r3, #0
 800ffee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800fff0:	2300      	movs	r3, #0
 800fff2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800fff4:	f107 031c 	add.w	r3, r7, #28
 800fff8:	4619      	mov	r1, r3
 800fffa:	4811      	ldr	r0, [pc, #68]	; (8010040 <MX_GPIO_Init+0x224>)
 800fffc:	f000 fe82 	bl	8010d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8010000:	2320      	movs	r3, #32
 8010002:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8010004:	2300      	movs	r3, #0
 8010006:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010008:	2300      	movs	r3, #0
 801000a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 801000c:	f107 031c 	add.w	r3, r7, #28
 8010010:	4619      	mov	r1, r3
 8010012:	480b      	ldr	r0, [pc, #44]	; (8010040 <MX_GPIO_Init+0x224>)
 8010014:	f000 fe76 	bl	8010d04 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8010018:	2200      	movs	r2, #0
 801001a:	2100      	movs	r1, #0
 801001c:	2028      	movs	r0, #40	; 0x28
 801001e:	f000 fe3a 	bl	8010c96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8010022:	2028      	movs	r0, #40	; 0x28
 8010024:	f000 fe53 	bl	8010cce <HAL_NVIC_EnableIRQ>

}
 8010028:	bf00      	nop
 801002a:	3730      	adds	r7, #48	; 0x30
 801002c:	46bd      	mov	sp, r7
 801002e:	bd80      	pop	{r7, pc}
 8010030:	40023800 	.word	0x40023800
 8010034:	40021000 	.word	0x40021000
 8010038:	40020800 	.word	0x40020800
 801003c:	40020400 	.word	0x40020400
 8010040:	40020c00 	.word	0x40020c00
 8010044:	10120000 	.word	0x10120000
 8010048:	40020000 	.word	0x40020000
 801004c:	10110000 	.word	0x10110000

08010050 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8010050:	b580      	push	{r7, lr}
 8010052:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8010054:	4b12      	ldr	r3, [pc, #72]	; (80100a0 <MX_I2C1_Init+0x50>)
 8010056:	4a13      	ldr	r2, [pc, #76]	; (80100a4 <MX_I2C1_Init+0x54>)
 8010058:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 801005a:	4b11      	ldr	r3, [pc, #68]	; (80100a0 <MX_I2C1_Init+0x50>)
 801005c:	4a12      	ldr	r2, [pc, #72]	; (80100a8 <MX_I2C1_Init+0x58>)
 801005e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8010060:	4b0f      	ldr	r3, [pc, #60]	; (80100a0 <MX_I2C1_Init+0x50>)
 8010062:	2200      	movs	r2, #0
 8010064:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8010066:	4b0e      	ldr	r3, [pc, #56]	; (80100a0 <MX_I2C1_Init+0x50>)
 8010068:	2200      	movs	r2, #0
 801006a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 801006c:	4b0c      	ldr	r3, [pc, #48]	; (80100a0 <MX_I2C1_Init+0x50>)
 801006e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8010072:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8010074:	4b0a      	ldr	r3, [pc, #40]	; (80100a0 <MX_I2C1_Init+0x50>)
 8010076:	2200      	movs	r2, #0
 8010078:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 801007a:	4b09      	ldr	r3, [pc, #36]	; (80100a0 <MX_I2C1_Init+0x50>)
 801007c:	2200      	movs	r2, #0
 801007e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8010080:	4b07      	ldr	r3, [pc, #28]	; (80100a0 <MX_I2C1_Init+0x50>)
 8010082:	2200      	movs	r2, #0
 8010084:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8010086:	4b06      	ldr	r3, [pc, #24]	; (80100a0 <MX_I2C1_Init+0x50>)
 8010088:	2200      	movs	r2, #0
 801008a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 801008c:	4804      	ldr	r0, [pc, #16]	; (80100a0 <MX_I2C1_Init+0x50>)
 801008e:	f002 fce5 	bl	8012a5c <HAL_I2C_Init>
 8010092:	4603      	mov	r3, r0
 8010094:	2b00      	cmp	r3, #0
 8010096:	d001      	beq.n	801009c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8010098:	f000 fa36 	bl	8010508 <Error_Handler>
  }

}
 801009c:	bf00      	nop
 801009e:	bd80      	pop	{r7, pc}
 80100a0:	200002b0 	.word	0x200002b0
 80100a4:	40005400 	.word	0x40005400
 80100a8:	000186a0 	.word	0x000186a0

080100ac <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80100ac:	b580      	push	{r7, lr}
 80100ae:	b08a      	sub	sp, #40	; 0x28
 80100b0:	af00      	add	r7, sp, #0
 80100b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80100b4:	f107 0314 	add.w	r3, r7, #20
 80100b8:	2200      	movs	r2, #0
 80100ba:	601a      	str	r2, [r3, #0]
 80100bc:	605a      	str	r2, [r3, #4]
 80100be:	609a      	str	r2, [r3, #8]
 80100c0:	60da      	str	r2, [r3, #12]
 80100c2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	681b      	ldr	r3, [r3, #0]
 80100c8:	4a19      	ldr	r2, [pc, #100]	; (8010130 <HAL_I2C_MspInit+0x84>)
 80100ca:	4293      	cmp	r3, r2
 80100cc:	d12c      	bne.n	8010128 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80100ce:	2300      	movs	r3, #0
 80100d0:	613b      	str	r3, [r7, #16]
 80100d2:	4b18      	ldr	r3, [pc, #96]	; (8010134 <HAL_I2C_MspInit+0x88>)
 80100d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80100d6:	4a17      	ldr	r2, [pc, #92]	; (8010134 <HAL_I2C_MspInit+0x88>)
 80100d8:	f043 0302 	orr.w	r3, r3, #2
 80100dc:	6313      	str	r3, [r2, #48]	; 0x30
 80100de:	4b15      	ldr	r3, [pc, #84]	; (8010134 <HAL_I2C_MspInit+0x88>)
 80100e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80100e2:	f003 0302 	and.w	r3, r3, #2
 80100e6:	613b      	str	r3, [r7, #16]
 80100e8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80100ea:	f44f 7310 	mov.w	r3, #576	; 0x240
 80100ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80100f0:	2312      	movs	r3, #18
 80100f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80100f4:	2301      	movs	r3, #1
 80100f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80100f8:	2300      	movs	r3, #0
 80100fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80100fc:	2304      	movs	r3, #4
 80100fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8010100:	f107 0314 	add.w	r3, r7, #20
 8010104:	4619      	mov	r1, r3
 8010106:	480c      	ldr	r0, [pc, #48]	; (8010138 <HAL_I2C_MspInit+0x8c>)
 8010108:	f000 fdfc 	bl	8010d04 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 801010c:	2300      	movs	r3, #0
 801010e:	60fb      	str	r3, [r7, #12]
 8010110:	4b08      	ldr	r3, [pc, #32]	; (8010134 <HAL_I2C_MspInit+0x88>)
 8010112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010114:	4a07      	ldr	r2, [pc, #28]	; (8010134 <HAL_I2C_MspInit+0x88>)
 8010116:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801011a:	6413      	str	r3, [r2, #64]	; 0x40
 801011c:	4b05      	ldr	r3, [pc, #20]	; (8010134 <HAL_I2C_MspInit+0x88>)
 801011e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010120:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010124:	60fb      	str	r3, [r7, #12]
 8010126:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8010128:	bf00      	nop
 801012a:	3728      	adds	r7, #40	; 0x28
 801012c:	46bd      	mov	sp, r7
 801012e:	bd80      	pop	{r7, pc}
 8010130:	40005400 	.word	0x40005400
 8010134:	40023800 	.word	0x40023800
 8010138:	40020400 	.word	0x40020400

0801013c <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
I2S_HandleTypeDef hi2s3;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 801013c:	b580      	push	{r7, lr}
 801013e:	af00      	add	r7, sp, #0

  hi2s2.Instance = SPI2;
 8010140:	4b12      	ldr	r3, [pc, #72]	; (801018c <MX_I2S2_Init+0x50>)
 8010142:	4a13      	ldr	r2, [pc, #76]	; (8010190 <MX_I2S2_Init+0x54>)
 8010144:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8010146:	4b11      	ldr	r3, [pc, #68]	; (801018c <MX_I2S2_Init+0x50>)
 8010148:	f44f 7200 	mov.w	r2, #512	; 0x200
 801014c:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 801014e:	4b0f      	ldr	r3, [pc, #60]	; (801018c <MX_I2S2_Init+0x50>)
 8010150:	2200      	movs	r2, #0
 8010152:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8010154:	4b0d      	ldr	r3, [pc, #52]	; (801018c <MX_I2S2_Init+0x50>)
 8010156:	2200      	movs	r2, #0
 8010158:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 801015a:	4b0c      	ldr	r3, [pc, #48]	; (801018c <MX_I2S2_Init+0x50>)
 801015c:	2200      	movs	r2, #0
 801015e:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8010160:	4b0a      	ldr	r3, [pc, #40]	; (801018c <MX_I2S2_Init+0x50>)
 8010162:	4a0c      	ldr	r2, [pc, #48]	; (8010194 <MX_I2S2_Init+0x58>)
 8010164:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8010166:	4b09      	ldr	r3, [pc, #36]	; (801018c <MX_I2S2_Init+0x50>)
 8010168:	2200      	movs	r2, #0
 801016a:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 801016c:	4b07      	ldr	r3, [pc, #28]	; (801018c <MX_I2S2_Init+0x50>)
 801016e:	2200      	movs	r2, #0
 8010170:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8010172:	4b06      	ldr	r3, [pc, #24]	; (801018c <MX_I2S2_Init+0x50>)
 8010174:	2201      	movs	r2, #1
 8010176:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8010178:	4804      	ldr	r0, [pc, #16]	; (801018c <MX_I2S2_Init+0x50>)
 801017a:	f002 fda7 	bl	8012ccc <HAL_I2S_Init>
 801017e:	4603      	mov	r3, r0
 8010180:	2b00      	cmp	r3, #0
 8010182:	d001      	beq.n	8010188 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 8010184:	f000 f9c0 	bl	8010508 <Error_Handler>
  }

}
 8010188:	bf00      	nop
 801018a:	bd80      	pop	{r7, pc}
 801018c:	20000304 	.word	0x20000304
 8010190:	40003800 	.word	0x40003800
 8010194:	00017700 	.word	0x00017700

08010198 <MX_I2S3_Init>:
/* I2S3 init function */
void MX_I2S3_Init(void)
{
 8010198:	b580      	push	{r7, lr}
 801019a:	af00      	add	r7, sp, #0

  hi2s3.Instance = SPI3;
 801019c:	4b13      	ldr	r3, [pc, #76]	; (80101ec <MX_I2S3_Init+0x54>)
 801019e:	4a14      	ldr	r2, [pc, #80]	; (80101f0 <MX_I2S3_Init+0x58>)
 80101a0:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80101a2:	4b12      	ldr	r3, [pc, #72]	; (80101ec <MX_I2S3_Init+0x54>)
 80101a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80101a8:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80101aa:	4b10      	ldr	r3, [pc, #64]	; (80101ec <MX_I2S3_Init+0x54>)
 80101ac:	2200      	movs	r2, #0
 80101ae:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80101b0:	4b0e      	ldr	r3, [pc, #56]	; (80101ec <MX_I2S3_Init+0x54>)
 80101b2:	2200      	movs	r2, #0
 80101b4:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80101b6:	4b0d      	ldr	r3, [pc, #52]	; (80101ec <MX_I2S3_Init+0x54>)
 80101b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80101bc:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80101be:	4b0b      	ldr	r3, [pc, #44]	; (80101ec <MX_I2S3_Init+0x54>)
 80101c0:	4a0c      	ldr	r2, [pc, #48]	; (80101f4 <MX_I2S3_Init+0x5c>)
 80101c2:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80101c4:	4b09      	ldr	r3, [pc, #36]	; (80101ec <MX_I2S3_Init+0x54>)
 80101c6:	2200      	movs	r2, #0
 80101c8:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80101ca:	4b08      	ldr	r3, [pc, #32]	; (80101ec <MX_I2S3_Init+0x54>)
 80101cc:	2200      	movs	r2, #0
 80101ce:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80101d0:	4b06      	ldr	r3, [pc, #24]	; (80101ec <MX_I2S3_Init+0x54>)
 80101d2:	2200      	movs	r2, #0
 80101d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80101d6:	4805      	ldr	r0, [pc, #20]	; (80101ec <MX_I2S3_Init+0x54>)
 80101d8:	f002 fd78 	bl	8012ccc <HAL_I2S_Init>
 80101dc:	4603      	mov	r3, r0
 80101de:	2b00      	cmp	r3, #0
 80101e0:	d001      	beq.n	80101e6 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80101e2:	f000 f991 	bl	8010508 <Error_Handler>
  }

}
 80101e6:	bf00      	nop
 80101e8:	bd80      	pop	{r7, pc}
 80101ea:	bf00      	nop
 80101ec:	2000034c 	.word	0x2000034c
 80101f0:	40003c00 	.word	0x40003c00
 80101f4:	00017700 	.word	0x00017700

080101f8 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 80101f8:	b580      	push	{r7, lr}
 80101fa:	b08e      	sub	sp, #56	; 0x38
 80101fc:	af00      	add	r7, sp, #0
 80101fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010200:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010204:	2200      	movs	r2, #0
 8010206:	601a      	str	r2, [r3, #0]
 8010208:	605a      	str	r2, [r3, #4]
 801020a:	609a      	str	r2, [r3, #8]
 801020c:	60da      	str	r2, [r3, #12]
 801020e:	611a      	str	r2, [r3, #16]
  if(i2sHandle->Instance==SPI2)
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	681b      	ldr	r3, [r3, #0]
 8010214:	4a59      	ldr	r2, [pc, #356]	; (801037c <HAL_I2S_MspInit+0x184>)
 8010216:	4293      	cmp	r3, r2
 8010218:	d15b      	bne.n	80102d2 <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 801021a:	2300      	movs	r3, #0
 801021c:	623b      	str	r3, [r7, #32]
 801021e:	4b58      	ldr	r3, [pc, #352]	; (8010380 <HAL_I2S_MspInit+0x188>)
 8010220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010222:	4a57      	ldr	r2, [pc, #348]	; (8010380 <HAL_I2S_MspInit+0x188>)
 8010224:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010228:	6413      	str	r3, [r2, #64]	; 0x40
 801022a:	4b55      	ldr	r3, [pc, #340]	; (8010380 <HAL_I2S_MspInit+0x188>)
 801022c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801022e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010232:	623b      	str	r3, [r7, #32]
 8010234:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8010236:	2300      	movs	r3, #0
 8010238:	61fb      	str	r3, [r7, #28]
 801023a:	4b51      	ldr	r3, [pc, #324]	; (8010380 <HAL_I2S_MspInit+0x188>)
 801023c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801023e:	4a50      	ldr	r2, [pc, #320]	; (8010380 <HAL_I2S_MspInit+0x188>)
 8010240:	f043 0304 	orr.w	r3, r3, #4
 8010244:	6313      	str	r3, [r2, #48]	; 0x30
 8010246:	4b4e      	ldr	r3, [pc, #312]	; (8010380 <HAL_I2S_MspInit+0x188>)
 8010248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801024a:	f003 0304 	and.w	r3, r3, #4
 801024e:	61fb      	str	r3, [r7, #28]
 8010250:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8010252:	2300      	movs	r3, #0
 8010254:	61bb      	str	r3, [r7, #24]
 8010256:	4b4a      	ldr	r3, [pc, #296]	; (8010380 <HAL_I2S_MspInit+0x188>)
 8010258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801025a:	4a49      	ldr	r2, [pc, #292]	; (8010380 <HAL_I2S_MspInit+0x188>)
 801025c:	f043 0302 	orr.w	r3, r3, #2
 8010260:	6313      	str	r3, [r2, #48]	; 0x30
 8010262:	4b47      	ldr	r3, [pc, #284]	; (8010380 <HAL_I2S_MspInit+0x188>)
 8010264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010266:	f003 0302 	and.w	r3, r3, #2
 801026a:	61bb      	str	r3, [r7, #24]
 801026c:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 801026e:	2304      	movs	r3, #4
 8010270:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010272:	2302      	movs	r3, #2
 8010274:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010276:	2300      	movs	r3, #0
 8010278:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801027a:	2300      	movs	r3, #0
 801027c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 801027e:	2306      	movs	r3, #6
 8010280:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8010282:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010286:	4619      	mov	r1, r3
 8010288:	483e      	ldr	r0, [pc, #248]	; (8010384 <HAL_I2S_MspInit+0x18c>)
 801028a:	f000 fd3b 	bl	8010d04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 801028e:	2308      	movs	r3, #8
 8010290:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010292:	2302      	movs	r3, #2
 8010294:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010296:	2300      	movs	r3, #0
 8010298:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801029a:	2300      	movs	r3, #0
 801029c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 801029e:	2305      	movs	r3, #5
 80102a0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80102a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80102a6:	4619      	mov	r1, r3
 80102a8:	4836      	ldr	r0, [pc, #216]	; (8010384 <HAL_I2S_MspInit+0x18c>)
 80102aa:	f000 fd2b 	bl	8010d04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 80102ae:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80102b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80102b4:	2302      	movs	r3, #2
 80102b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80102b8:	2300      	movs	r3, #0
 80102ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80102bc:	2300      	movs	r3, #0
 80102be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80102c0:	2305      	movs	r3, #5
 80102c2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80102c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80102c8:	4619      	mov	r1, r3
 80102ca:	482f      	ldr	r0, [pc, #188]	; (8010388 <HAL_I2S_MspInit+0x190>)
 80102cc:	f000 fd1a 	bl	8010d04 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80102d0:	e04f      	b.n	8010372 <HAL_I2S_MspInit+0x17a>
  else if(i2sHandle->Instance==SPI3)
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	681b      	ldr	r3, [r3, #0]
 80102d6:	4a2d      	ldr	r2, [pc, #180]	; (801038c <HAL_I2S_MspInit+0x194>)
 80102d8:	4293      	cmp	r3, r2
 80102da:	d14a      	bne.n	8010372 <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80102dc:	2300      	movs	r3, #0
 80102de:	617b      	str	r3, [r7, #20]
 80102e0:	4b27      	ldr	r3, [pc, #156]	; (8010380 <HAL_I2S_MspInit+0x188>)
 80102e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80102e4:	4a26      	ldr	r2, [pc, #152]	; (8010380 <HAL_I2S_MspInit+0x188>)
 80102e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80102ea:	6413      	str	r3, [r2, #64]	; 0x40
 80102ec:	4b24      	ldr	r3, [pc, #144]	; (8010380 <HAL_I2S_MspInit+0x188>)
 80102ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80102f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80102f4:	617b      	str	r3, [r7, #20]
 80102f6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80102f8:	2300      	movs	r3, #0
 80102fa:	613b      	str	r3, [r7, #16]
 80102fc:	4b20      	ldr	r3, [pc, #128]	; (8010380 <HAL_I2S_MspInit+0x188>)
 80102fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010300:	4a1f      	ldr	r2, [pc, #124]	; (8010380 <HAL_I2S_MspInit+0x188>)
 8010302:	f043 0301 	orr.w	r3, r3, #1
 8010306:	6313      	str	r3, [r2, #48]	; 0x30
 8010308:	4b1d      	ldr	r3, [pc, #116]	; (8010380 <HAL_I2S_MspInit+0x188>)
 801030a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801030c:	f003 0301 	and.w	r3, r3, #1
 8010310:	613b      	str	r3, [r7, #16]
 8010312:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8010314:	2300      	movs	r3, #0
 8010316:	60fb      	str	r3, [r7, #12]
 8010318:	4b19      	ldr	r3, [pc, #100]	; (8010380 <HAL_I2S_MspInit+0x188>)
 801031a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801031c:	4a18      	ldr	r2, [pc, #96]	; (8010380 <HAL_I2S_MspInit+0x188>)
 801031e:	f043 0304 	orr.w	r3, r3, #4
 8010322:	6313      	str	r3, [r2, #48]	; 0x30
 8010324:	4b16      	ldr	r3, [pc, #88]	; (8010380 <HAL_I2S_MspInit+0x188>)
 8010326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010328:	f003 0304 	and.w	r3, r3, #4
 801032c:	60fb      	str	r3, [r7, #12]
 801032e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8010330:	2310      	movs	r3, #16
 8010332:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010334:	2302      	movs	r3, #2
 8010336:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010338:	2300      	movs	r3, #0
 801033a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801033c:	2300      	movs	r3, #0
 801033e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8010340:	2306      	movs	r3, #6
 8010342:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8010344:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010348:	4619      	mov	r1, r3
 801034a:	4811      	ldr	r0, [pc, #68]	; (8010390 <HAL_I2S_MspInit+0x198>)
 801034c:	f000 fcda 	bl	8010d04 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8010350:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8010354:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010356:	2302      	movs	r3, #2
 8010358:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801035a:	2300      	movs	r3, #0
 801035c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801035e:	2300      	movs	r3, #0
 8010360:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8010362:	2306      	movs	r3, #6
 8010364:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8010366:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801036a:	4619      	mov	r1, r3
 801036c:	4805      	ldr	r0, [pc, #20]	; (8010384 <HAL_I2S_MspInit+0x18c>)
 801036e:	f000 fcc9 	bl	8010d04 <HAL_GPIO_Init>
}
 8010372:	bf00      	nop
 8010374:	3738      	adds	r7, #56	; 0x38
 8010376:	46bd      	mov	sp, r7
 8010378:	bd80      	pop	{r7, pc}
 801037a:	bf00      	nop
 801037c:	40003800 	.word	0x40003800
 8010380:	40023800 	.word	0x40023800
 8010384:	40020800 	.word	0x40020800
 8010388:	40020400 	.word	0x40020400
 801038c:	40003c00 	.word	0x40003c00
 8010390:	40020000 	.word	0x40020000

08010394 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8010394:	b580      	push	{r7, lr}
 8010396:	b082      	sub	sp, #8
 8010398:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 801039a:	f000 fb0d 	bl	80109b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 801039e:	f000 f821 	bl	80103e4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80103a2:	f7ff fd3b 	bl	800fe1c <MX_GPIO_Init>
  MX_I2C1_Init();
 80103a6:	f7ff fe53 	bl	8010050 <MX_I2C1_Init>
  MX_I2S2_Init();
 80103aa:	f7ff fec7 	bl	801013c <MX_I2S2_Init>
  MX_I2S3_Init();
 80103ae:	f7ff fef3 	bl	8010198 <MX_I2S3_Init>
  MX_SPI1_Init();
 80103b2:	f000 f8b1 	bl	8010518 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80103b6:	f006 fdc1 	bl	8016f3c <MX_USB_HOST_Init>
  MX_TIM3_Init();
 80103ba:	f000 fa01 	bl	80107c0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80103be:	2100      	movs	r1, #0
 80103c0:	4807      	ldr	r0, [pc, #28]	; (80103e0 <main+0x4c>)
 80103c2:	f004 f963 	bl	801468c <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_PRESCALER(&htim3, 0);
 80103c6:	4b06      	ldr	r3, [pc, #24]	; (80103e0 <main+0x4c>)
 80103c8:	681b      	ldr	r3, [r3, #0]
 80103ca:	2200      	movs	r2, #0
 80103cc:	629a      	str	r2, [r3, #40]	; 0x28
//  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 10000);
//  for (int i =1; i <= 40; i += 1) {
                 __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 10);
 80103ce:	4b04      	ldr	r3, [pc, #16]	; (80103e0 <main+0x4c>)
 80103d0:	681b      	ldr	r3, [r3, #0]
 80103d2:	220a      	movs	r2, #10
 80103d4:	635a      	str	r2, [r3, #52]	; 0x34
//                 HAL_Delay(100);
//  }
  tama::Main tamaMain;
  tamaMain.run();
 80103d6:	1d3b      	adds	r3, r7, #4
 80103d8:	4618      	mov	r0, r3
 80103da:	f7f9 f9bb 	bl	8009754 <_ZN4tama4Main3runEv>
 80103de:	bf00      	nop
 80103e0:	200003ec 	.word	0x200003ec

080103e4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80103e4:	b580      	push	{r7, lr}
 80103e6:	b09a      	sub	sp, #104	; 0x68
 80103e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80103ea:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80103ee:	2230      	movs	r2, #48	; 0x30
 80103f0:	2100      	movs	r1, #0
 80103f2:	4618      	mov	r0, r3
 80103f4:	f007 fb70 	bl	8017ad8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80103f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80103fc:	2200      	movs	r2, #0
 80103fe:	601a      	str	r2, [r3, #0]
 8010400:	605a      	str	r2, [r3, #4]
 8010402:	609a      	str	r2, [r3, #8]
 8010404:	60da      	str	r2, [r3, #12]
 8010406:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8010408:	f107 030c 	add.w	r3, r7, #12
 801040c:	2200      	movs	r2, #0
 801040e:	601a      	str	r2, [r3, #0]
 8010410:	605a      	str	r2, [r3, #4]
 8010412:	609a      	str	r2, [r3, #8]
 8010414:	60da      	str	r2, [r3, #12]
 8010416:	611a      	str	r2, [r3, #16]
 8010418:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 801041a:	2300      	movs	r3, #0
 801041c:	60bb      	str	r3, [r7, #8]
 801041e:	4b38      	ldr	r3, [pc, #224]	; (8010500 <_Z18SystemClock_Configv+0x11c>)
 8010420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010422:	4a37      	ldr	r2, [pc, #220]	; (8010500 <_Z18SystemClock_Configv+0x11c>)
 8010424:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010428:	6413      	str	r3, [r2, #64]	; 0x40
 801042a:	4b35      	ldr	r3, [pc, #212]	; (8010500 <_Z18SystemClock_Configv+0x11c>)
 801042c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801042e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010432:	60bb      	str	r3, [r7, #8]
 8010434:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8010436:	2300      	movs	r3, #0
 8010438:	607b      	str	r3, [r7, #4]
 801043a:	4b32      	ldr	r3, [pc, #200]	; (8010504 <_Z18SystemClock_Configv+0x120>)
 801043c:	681b      	ldr	r3, [r3, #0]
 801043e:	4a31      	ldr	r2, [pc, #196]	; (8010504 <_Z18SystemClock_Configv+0x120>)
 8010440:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8010444:	6013      	str	r3, [r2, #0]
 8010446:	4b2f      	ldr	r3, [pc, #188]	; (8010504 <_Z18SystemClock_Configv+0x120>)
 8010448:	681b      	ldr	r3, [r3, #0]
 801044a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 801044e:	607b      	str	r3, [r7, #4]
 8010450:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8010452:	2301      	movs	r3, #1
 8010454:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8010456:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 801045a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 801045c:	2302      	movs	r3, #2
 801045e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8010460:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8010464:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 8010466:	2304      	movs	r3, #4
 8010468:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 801046a:	23c0      	movs	r3, #192	; 0xc0
 801046c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 801046e:	2304      	movs	r3, #4
 8010470:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8010472:	2308      	movs	r3, #8
 8010474:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8010476:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801047a:	4618      	mov	r0, r3
 801047c:	f003 f8c6 	bl	801360c <HAL_RCC_OscConfig>
 8010480:	4603      	mov	r3, r0
 8010482:	2b00      	cmp	r3, #0
 8010484:	bf14      	ite	ne
 8010486:	2301      	movne	r3, #1
 8010488:	2300      	moveq	r3, #0
 801048a:	b2db      	uxtb	r3, r3
 801048c:	2b00      	cmp	r3, #0
 801048e:	d001      	beq.n	8010494 <_Z18SystemClock_Configv+0xb0>
  {
    Error_Handler();
 8010490:	f000 f83a 	bl	8010508 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8010494:	230f      	movs	r3, #15
 8010496:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8010498:	2302      	movs	r3, #2
 801049a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 801049c:	2300      	movs	r3, #0
 801049e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80104a0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80104a4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80104a6:	2300      	movs	r3, #0
 80104a8:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80104aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80104ae:	2103      	movs	r1, #3
 80104b0:	4618      	mov	r0, r3
 80104b2:	f003 fb1b 	bl	8013aec <HAL_RCC_ClockConfig>
 80104b6:	4603      	mov	r3, r0
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	bf14      	ite	ne
 80104bc:	2301      	movne	r3, #1
 80104be:	2300      	moveq	r3, #0
 80104c0:	b2db      	uxtb	r3, r3
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	d001      	beq.n	80104ca <_Z18SystemClock_Configv+0xe6>
  {
    Error_Handler();
 80104c6:	f000 f81f 	bl	8010508 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80104ca:	2301      	movs	r3, #1
 80104cc:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 80104ce:	23c8      	movs	r3, #200	; 0xc8
 80104d0:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 80104d2:	2305      	movs	r3, #5
 80104d4:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80104d6:	2302      	movs	r3, #2
 80104d8:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80104da:	f107 030c 	add.w	r3, r7, #12
 80104de:	4618      	mov	r0, r3
 80104e0:	f003 fce2 	bl	8013ea8 <HAL_RCCEx_PeriphCLKConfig>
 80104e4:	4603      	mov	r3, r0
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	bf14      	ite	ne
 80104ea:	2301      	movne	r3, #1
 80104ec:	2300      	moveq	r3, #0
 80104ee:	b2db      	uxtb	r3, r3
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d001      	beq.n	80104f8 <_Z18SystemClock_Configv+0x114>
  {
    Error_Handler();
 80104f4:	f000 f808 	bl	8010508 <Error_Handler>
  }
}
 80104f8:	bf00      	nop
 80104fa:	3768      	adds	r7, #104	; 0x68
 80104fc:	46bd      	mov	sp, r7
 80104fe:	bd80      	pop	{r7, pc}
 8010500:	40023800 	.word	0x40023800
 8010504:	40007000 	.word	0x40007000

08010508 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8010508:	b480      	push	{r7}
 801050a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 801050c:	bf00      	nop
 801050e:	46bd      	mov	sp, r7
 8010510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010514:	4770      	bx	lr
	...

08010518 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8010518:	b580      	push	{r7, lr}
 801051a:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 801051c:	4b17      	ldr	r3, [pc, #92]	; (801057c <MX_SPI1_Init+0x64>)
 801051e:	4a18      	ldr	r2, [pc, #96]	; (8010580 <MX_SPI1_Init+0x68>)
 8010520:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8010522:	4b16      	ldr	r3, [pc, #88]	; (801057c <MX_SPI1_Init+0x64>)
 8010524:	f44f 7282 	mov.w	r2, #260	; 0x104
 8010528:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 801052a:	4b14      	ldr	r3, [pc, #80]	; (801057c <MX_SPI1_Init+0x64>)
 801052c:	2200      	movs	r2, #0
 801052e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8010530:	4b12      	ldr	r3, [pc, #72]	; (801057c <MX_SPI1_Init+0x64>)
 8010532:	2200      	movs	r2, #0
 8010534:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8010536:	4b11      	ldr	r3, [pc, #68]	; (801057c <MX_SPI1_Init+0x64>)
 8010538:	2200      	movs	r2, #0
 801053a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 801053c:	4b0f      	ldr	r3, [pc, #60]	; (801057c <MX_SPI1_Init+0x64>)
 801053e:	2200      	movs	r2, #0
 8010540:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8010542:	4b0e      	ldr	r3, [pc, #56]	; (801057c <MX_SPI1_Init+0x64>)
 8010544:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010548:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 801054a:	4b0c      	ldr	r3, [pc, #48]	; (801057c <MX_SPI1_Init+0x64>)
 801054c:	2220      	movs	r2, #32
 801054e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8010550:	4b0a      	ldr	r3, [pc, #40]	; (801057c <MX_SPI1_Init+0x64>)
 8010552:	2200      	movs	r2, #0
 8010554:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8010556:	4b09      	ldr	r3, [pc, #36]	; (801057c <MX_SPI1_Init+0x64>)
 8010558:	2200      	movs	r2, #0
 801055a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801055c:	4b07      	ldr	r3, [pc, #28]	; (801057c <MX_SPI1_Init+0x64>)
 801055e:	2200      	movs	r2, #0
 8010560:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8010562:	4b06      	ldr	r3, [pc, #24]	; (801057c <MX_SPI1_Init+0x64>)
 8010564:	220a      	movs	r2, #10
 8010566:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8010568:	4804      	ldr	r0, [pc, #16]	; (801057c <MX_SPI1_Init+0x64>)
 801056a:	f003 fdeb 	bl	8014144 <HAL_SPI_Init>
 801056e:	4603      	mov	r3, r0
 8010570:	2b00      	cmp	r3, #0
 8010572:	d001      	beq.n	8010578 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8010574:	f7ff ffc8 	bl	8010508 <Error_Handler>
  }

}
 8010578:	bf00      	nop
 801057a:	bd80      	pop	{r7, pc}
 801057c:	20000394 	.word	0x20000394
 8010580:	40013000 	.word	0x40013000

08010584 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8010584:	b580      	push	{r7, lr}
 8010586:	b08a      	sub	sp, #40	; 0x28
 8010588:	af00      	add	r7, sp, #0
 801058a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801058c:	f107 0314 	add.w	r3, r7, #20
 8010590:	2200      	movs	r2, #0
 8010592:	601a      	str	r2, [r3, #0]
 8010594:	605a      	str	r2, [r3, #4]
 8010596:	609a      	str	r2, [r3, #8]
 8010598:	60da      	str	r2, [r3, #12]
 801059a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	681b      	ldr	r3, [r3, #0]
 80105a0:	4a19      	ldr	r2, [pc, #100]	; (8010608 <HAL_SPI_MspInit+0x84>)
 80105a2:	4293      	cmp	r3, r2
 80105a4:	d12b      	bne.n	80105fe <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80105a6:	2300      	movs	r3, #0
 80105a8:	613b      	str	r3, [r7, #16]
 80105aa:	4b18      	ldr	r3, [pc, #96]	; (801060c <HAL_SPI_MspInit+0x88>)
 80105ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80105ae:	4a17      	ldr	r2, [pc, #92]	; (801060c <HAL_SPI_MspInit+0x88>)
 80105b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80105b4:	6453      	str	r3, [r2, #68]	; 0x44
 80105b6:	4b15      	ldr	r3, [pc, #84]	; (801060c <HAL_SPI_MspInit+0x88>)
 80105b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80105ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80105be:	613b      	str	r3, [r7, #16]
 80105c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80105c2:	2300      	movs	r3, #0
 80105c4:	60fb      	str	r3, [r7, #12]
 80105c6:	4b11      	ldr	r3, [pc, #68]	; (801060c <HAL_SPI_MspInit+0x88>)
 80105c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80105ca:	4a10      	ldr	r2, [pc, #64]	; (801060c <HAL_SPI_MspInit+0x88>)
 80105cc:	f043 0301 	orr.w	r3, r3, #1
 80105d0:	6313      	str	r3, [r2, #48]	; 0x30
 80105d2:	4b0e      	ldr	r3, [pc, #56]	; (801060c <HAL_SPI_MspInit+0x88>)
 80105d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80105d6:	f003 0301 	and.w	r3, r3, #1
 80105da:	60fb      	str	r3, [r7, #12]
 80105dc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80105de:	23e0      	movs	r3, #224	; 0xe0
 80105e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80105e2:	2302      	movs	r3, #2
 80105e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80105e6:	2300      	movs	r3, #0
 80105e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80105ea:	2303      	movs	r3, #3
 80105ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80105ee:	2305      	movs	r3, #5
 80105f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80105f2:	f107 0314 	add.w	r3, r7, #20
 80105f6:	4619      	mov	r1, r3
 80105f8:	4805      	ldr	r0, [pc, #20]	; (8010610 <HAL_SPI_MspInit+0x8c>)
 80105fa:	f000 fb83 	bl	8010d04 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80105fe:	bf00      	nop
 8010600:	3728      	adds	r7, #40	; 0x28
 8010602:	46bd      	mov	sp, r7
 8010604:	bd80      	pop	{r7, pc}
 8010606:	bf00      	nop
 8010608:	40013000 	.word	0x40013000
 801060c:	40023800 	.word	0x40023800
 8010610:	40020000 	.word	0x40020000

08010614 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8010614:	b580      	push	{r7, lr}
 8010616:	b082      	sub	sp, #8
 8010618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801061a:	2300      	movs	r3, #0
 801061c:	607b      	str	r3, [r7, #4]
 801061e:	4b10      	ldr	r3, [pc, #64]	; (8010660 <HAL_MspInit+0x4c>)
 8010620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010622:	4a0f      	ldr	r2, [pc, #60]	; (8010660 <HAL_MspInit+0x4c>)
 8010624:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010628:	6453      	str	r3, [r2, #68]	; 0x44
 801062a:	4b0d      	ldr	r3, [pc, #52]	; (8010660 <HAL_MspInit+0x4c>)
 801062c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801062e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010632:	607b      	str	r3, [r7, #4]
 8010634:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8010636:	2300      	movs	r3, #0
 8010638:	603b      	str	r3, [r7, #0]
 801063a:	4b09      	ldr	r3, [pc, #36]	; (8010660 <HAL_MspInit+0x4c>)
 801063c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801063e:	4a08      	ldr	r2, [pc, #32]	; (8010660 <HAL_MspInit+0x4c>)
 8010640:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010644:	6413      	str	r3, [r2, #64]	; 0x40
 8010646:	4b06      	ldr	r3, [pc, #24]	; (8010660 <HAL_MspInit+0x4c>)
 8010648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801064a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801064e:	603b      	str	r3, [r7, #0]
 8010650:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8010652:	2007      	movs	r0, #7
 8010654:	f000 fb14 	bl	8010c80 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8010658:	bf00      	nop
 801065a:	3708      	adds	r7, #8
 801065c:	46bd      	mov	sp, r7
 801065e:	bd80      	pop	{r7, pc}
 8010660:	40023800 	.word	0x40023800

08010664 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8010664:	b480      	push	{r7}
 8010666:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8010668:	bf00      	nop
 801066a:	46bd      	mov	sp, r7
 801066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010670:	4770      	bx	lr

08010672 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8010672:	b480      	push	{r7}
 8010674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8010676:	e7fe      	b.n	8010676 <HardFault_Handler+0x4>

08010678 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8010678:	b480      	push	{r7}
 801067a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 801067c:	e7fe      	b.n	801067c <MemManage_Handler+0x4>

0801067e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 801067e:	b480      	push	{r7}
 8010680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8010682:	e7fe      	b.n	8010682 <BusFault_Handler+0x4>

08010684 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8010684:	b480      	push	{r7}
 8010686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8010688:	e7fe      	b.n	8010688 <UsageFault_Handler+0x4>

0801068a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 801068a:	b480      	push	{r7}
 801068c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 801068e:	bf00      	nop
 8010690:	46bd      	mov	sp, r7
 8010692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010696:	4770      	bx	lr

08010698 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8010698:	b480      	push	{r7}
 801069a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 801069c:	bf00      	nop
 801069e:	46bd      	mov	sp, r7
 80106a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106a4:	4770      	bx	lr

080106a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80106a6:	b480      	push	{r7}
 80106a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80106aa:	bf00      	nop
 80106ac:	46bd      	mov	sp, r7
 80106ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106b2:	4770      	bx	lr

080106b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80106b4:	b580      	push	{r7, lr}
 80106b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80106b8:	f000 f9d0 	bl	8010a5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80106bc:	bf00      	nop
 80106be:	bd80      	pop	{r7, pc}

080106c0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80106c0:	b580      	push	{r7, lr}
 80106c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80106c4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80106c8:	f000 fcd0 	bl	801106c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80106cc:	bf00      	nop
 80106ce:	bd80      	pop	{r7, pc}

080106d0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80106d0:	b580      	push	{r7, lr}
 80106d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80106d4:	4802      	ldr	r0, [pc, #8]	; (80106e0 <OTG_FS_IRQHandler+0x10>)
 80106d6:	f000 ff7b 	bl	80115d0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80106da:	bf00      	nop
 80106dc:	bd80      	pop	{r7, pc}
 80106de:	bf00      	nop
 80106e0:	20000808 	.word	0x20000808

080106e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80106e4:	b480      	push	{r7}
 80106e6:	af00      	add	r7, sp, #0
	return 1;
 80106e8:	2301      	movs	r3, #1
}
 80106ea:	4618      	mov	r0, r3
 80106ec:	46bd      	mov	sp, r7
 80106ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106f2:	4770      	bx	lr

080106f4 <_kill>:

int _kill(int pid, int sig)
{
 80106f4:	b580      	push	{r7, lr}
 80106f6:	b082      	sub	sp, #8
 80106f8:	af00      	add	r7, sp, #0
 80106fa:	6078      	str	r0, [r7, #4]
 80106fc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80106fe:	f007 f98d 	bl	8017a1c <__errno>
 8010702:	4602      	mov	r2, r0
 8010704:	2316      	movs	r3, #22
 8010706:	6013      	str	r3, [r2, #0]
	return -1;
 8010708:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801070c:	4618      	mov	r0, r3
 801070e:	3708      	adds	r7, #8
 8010710:	46bd      	mov	sp, r7
 8010712:	bd80      	pop	{r7, pc}

08010714 <_exit>:

void _exit (int status)
{
 8010714:	b580      	push	{r7, lr}
 8010716:	b082      	sub	sp, #8
 8010718:	af00      	add	r7, sp, #0
 801071a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 801071c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8010720:	6878      	ldr	r0, [r7, #4]
 8010722:	f7ff ffe7 	bl	80106f4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8010726:	e7fe      	b.n	8010726 <_exit+0x12>

08010728 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8010728:	b580      	push	{r7, lr}
 801072a:	b086      	sub	sp, #24
 801072c:	af00      	add	r7, sp, #0
 801072e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8010730:	4a14      	ldr	r2, [pc, #80]	; (8010784 <_sbrk+0x5c>)
 8010732:	4b15      	ldr	r3, [pc, #84]	; (8010788 <_sbrk+0x60>)
 8010734:	1ad3      	subs	r3, r2, r3
 8010736:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8010738:	697b      	ldr	r3, [r7, #20]
 801073a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 801073c:	4b13      	ldr	r3, [pc, #76]	; (801078c <_sbrk+0x64>)
 801073e:	681b      	ldr	r3, [r3, #0]
 8010740:	2b00      	cmp	r3, #0
 8010742:	d102      	bne.n	801074a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8010744:	4b11      	ldr	r3, [pc, #68]	; (801078c <_sbrk+0x64>)
 8010746:	4a12      	ldr	r2, [pc, #72]	; (8010790 <_sbrk+0x68>)
 8010748:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 801074a:	4b10      	ldr	r3, [pc, #64]	; (801078c <_sbrk+0x64>)
 801074c:	681a      	ldr	r2, [r3, #0]
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	4413      	add	r3, r2
 8010752:	693a      	ldr	r2, [r7, #16]
 8010754:	429a      	cmp	r2, r3
 8010756:	d207      	bcs.n	8010768 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8010758:	f007 f960 	bl	8017a1c <__errno>
 801075c:	4602      	mov	r2, r0
 801075e:	230c      	movs	r3, #12
 8010760:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8010762:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010766:	e009      	b.n	801077c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8010768:	4b08      	ldr	r3, [pc, #32]	; (801078c <_sbrk+0x64>)
 801076a:	681b      	ldr	r3, [r3, #0]
 801076c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 801076e:	4b07      	ldr	r3, [pc, #28]	; (801078c <_sbrk+0x64>)
 8010770:	681a      	ldr	r2, [r3, #0]
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	4413      	add	r3, r2
 8010776:	4a05      	ldr	r2, [pc, #20]	; (801078c <_sbrk+0x64>)
 8010778:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 801077a:	68fb      	ldr	r3, [r7, #12]
}
 801077c:	4618      	mov	r0, r3
 801077e:	3718      	adds	r7, #24
 8010780:	46bd      	mov	sp, r7
 8010782:	bd80      	pop	{r7, pc}
 8010784:	20020000 	.word	0x20020000
 8010788:	00000400 	.word	0x00000400
 801078c:	20000298 	.word	0x20000298
 8010790:	20000ad0 	.word	0x20000ad0

08010794 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8010794:	b480      	push	{r7}
 8010796:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8010798:	4b08      	ldr	r3, [pc, #32]	; (80107bc <SystemInit+0x28>)
 801079a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801079e:	4a07      	ldr	r2, [pc, #28]	; (80107bc <SystemInit+0x28>)
 80107a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80107a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80107a8:	4b04      	ldr	r3, [pc, #16]	; (80107bc <SystemInit+0x28>)
 80107aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80107ae:	609a      	str	r2, [r3, #8]
#endif
}
 80107b0:	bf00      	nop
 80107b2:	46bd      	mov	sp, r7
 80107b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107b8:	4770      	bx	lr
 80107ba:	bf00      	nop
 80107bc:	e000ed00 	.word	0xe000ed00

080107c0 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80107c0:	b580      	push	{r7, lr}
 80107c2:	b08e      	sub	sp, #56	; 0x38
 80107c4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80107c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80107ca:	2200      	movs	r2, #0
 80107cc:	601a      	str	r2, [r3, #0]
 80107ce:	605a      	str	r2, [r3, #4]
 80107d0:	609a      	str	r2, [r3, #8]
 80107d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80107d4:	f107 0320 	add.w	r3, r7, #32
 80107d8:	2200      	movs	r2, #0
 80107da:	601a      	str	r2, [r3, #0]
 80107dc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80107de:	1d3b      	adds	r3, r7, #4
 80107e0:	2200      	movs	r2, #0
 80107e2:	601a      	str	r2, [r3, #0]
 80107e4:	605a      	str	r2, [r3, #4]
 80107e6:	609a      	str	r2, [r3, #8]
 80107e8:	60da      	str	r2, [r3, #12]
 80107ea:	611a      	str	r2, [r3, #16]
 80107ec:	615a      	str	r2, [r3, #20]
 80107ee:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 80107f0:	4b2c      	ldr	r3, [pc, #176]	; (80108a4 <MX_TIM3_Init+0xe4>)
 80107f2:	4a2d      	ldr	r2, [pc, #180]	; (80108a8 <MX_TIM3_Init+0xe8>)
 80107f4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 95;
 80107f6:	4b2b      	ldr	r3, [pc, #172]	; (80108a4 <MX_TIM3_Init+0xe4>)
 80107f8:	225f      	movs	r2, #95	; 0x5f
 80107fa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80107fc:	4b29      	ldr	r3, [pc, #164]	; (80108a4 <MX_TIM3_Init+0xe4>)
 80107fe:	2200      	movs	r2, #0
 8010800:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 24;
 8010802:	4b28      	ldr	r3, [pc, #160]	; (80108a4 <MX_TIM3_Init+0xe4>)
 8010804:	2218      	movs	r2, #24
 8010806:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8010808:	4b26      	ldr	r3, [pc, #152]	; (80108a4 <MX_TIM3_Init+0xe4>)
 801080a:	2200      	movs	r2, #0
 801080c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 801080e:	4b25      	ldr	r3, [pc, #148]	; (80108a4 <MX_TIM3_Init+0xe4>)
 8010810:	2280      	movs	r2, #128	; 0x80
 8010812:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8010814:	4823      	ldr	r0, [pc, #140]	; (80108a4 <MX_TIM3_Init+0xe4>)
 8010816:	f003 fed9 	bl	80145cc <HAL_TIM_Base_Init>
 801081a:	4603      	mov	r3, r0
 801081c:	2b00      	cmp	r3, #0
 801081e:	d001      	beq.n	8010824 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8010820:	f7ff fe72 	bl	8010508 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8010824:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010828:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 801082a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801082e:	4619      	mov	r1, r3
 8010830:	481c      	ldr	r0, [pc, #112]	; (80108a4 <MX_TIM3_Init+0xe4>)
 8010832:	f004 f823 	bl	801487c <HAL_TIM_ConfigClockSource>
 8010836:	4603      	mov	r3, r0
 8010838:	2b00      	cmp	r3, #0
 801083a:	d001      	beq.n	8010840 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 801083c:	f7ff fe64 	bl	8010508 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8010840:	4818      	ldr	r0, [pc, #96]	; (80108a4 <MX_TIM3_Init+0xe4>)
 8010842:	f003 feee 	bl	8014622 <HAL_TIM_PWM_Init>
 8010846:	4603      	mov	r3, r0
 8010848:	2b00      	cmp	r3, #0
 801084a:	d001      	beq.n	8010850 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 801084c:	f7ff fe5c 	bl	8010508 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8010850:	2300      	movs	r3, #0
 8010852:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8010854:	2300      	movs	r3, #0
 8010856:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8010858:	f107 0320 	add.w	r3, r7, #32
 801085c:	4619      	mov	r1, r3
 801085e:	4811      	ldr	r0, [pc, #68]	; (80108a4 <MX_TIM3_Init+0xe4>)
 8010860:	f004 fb90 	bl	8014f84 <HAL_TIMEx_MasterConfigSynchronization>
 8010864:	4603      	mov	r3, r0
 8010866:	2b00      	cmp	r3, #0
 8010868:	d001      	beq.n	801086e <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 801086a:	f7ff fe4d 	bl	8010508 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 801086e:	2360      	movs	r3, #96	; 0x60
 8010870:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8010872:	2300      	movs	r3, #0
 8010874:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8010876:	2300      	movs	r3, #0
 8010878:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 801087a:	2300      	movs	r3, #0
 801087c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 801087e:	1d3b      	adds	r3, r7, #4
 8010880:	2200      	movs	r2, #0
 8010882:	4619      	mov	r1, r3
 8010884:	4807      	ldr	r0, [pc, #28]	; (80108a4 <MX_TIM3_Init+0xe4>)
 8010886:	f003 ff33 	bl	80146f0 <HAL_TIM_PWM_ConfigChannel>
 801088a:	4603      	mov	r3, r0
 801088c:	2b00      	cmp	r3, #0
 801088e:	d001      	beq.n	8010894 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8010890:	f7ff fe3a 	bl	8010508 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8010894:	4803      	ldr	r0, [pc, #12]	; (80108a4 <MX_TIM3_Init+0xe4>)
 8010896:	f000 f82b 	bl	80108f0 <HAL_TIM_MspPostInit>

}
 801089a:	bf00      	nop
 801089c:	3738      	adds	r7, #56	; 0x38
 801089e:	46bd      	mov	sp, r7
 80108a0:	bd80      	pop	{r7, pc}
 80108a2:	bf00      	nop
 80108a4:	200003ec 	.word	0x200003ec
 80108a8:	40000400 	.word	0x40000400

080108ac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80108ac:	b480      	push	{r7}
 80108ae:	b085      	sub	sp, #20
 80108b0:	af00      	add	r7, sp, #0
 80108b2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	681b      	ldr	r3, [r3, #0]
 80108b8:	4a0b      	ldr	r2, [pc, #44]	; (80108e8 <HAL_TIM_Base_MspInit+0x3c>)
 80108ba:	4293      	cmp	r3, r2
 80108bc:	d10d      	bne.n	80108da <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80108be:	2300      	movs	r3, #0
 80108c0:	60fb      	str	r3, [r7, #12]
 80108c2:	4b0a      	ldr	r3, [pc, #40]	; (80108ec <HAL_TIM_Base_MspInit+0x40>)
 80108c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80108c6:	4a09      	ldr	r2, [pc, #36]	; (80108ec <HAL_TIM_Base_MspInit+0x40>)
 80108c8:	f043 0302 	orr.w	r3, r3, #2
 80108cc:	6413      	str	r3, [r2, #64]	; 0x40
 80108ce:	4b07      	ldr	r3, [pc, #28]	; (80108ec <HAL_TIM_Base_MspInit+0x40>)
 80108d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80108d2:	f003 0302 	and.w	r3, r3, #2
 80108d6:	60fb      	str	r3, [r7, #12]
 80108d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80108da:	bf00      	nop
 80108dc:	3714      	adds	r7, #20
 80108de:	46bd      	mov	sp, r7
 80108e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108e4:	4770      	bx	lr
 80108e6:	bf00      	nop
 80108e8:	40000400 	.word	0x40000400
 80108ec:	40023800 	.word	0x40023800

080108f0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80108f0:	b580      	push	{r7, lr}
 80108f2:	b088      	sub	sp, #32
 80108f4:	af00      	add	r7, sp, #0
 80108f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80108f8:	f107 030c 	add.w	r3, r7, #12
 80108fc:	2200      	movs	r2, #0
 80108fe:	601a      	str	r2, [r3, #0]
 8010900:	605a      	str	r2, [r3, #4]
 8010902:	609a      	str	r2, [r3, #8]
 8010904:	60da      	str	r2, [r3, #12]
 8010906:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	681b      	ldr	r3, [r3, #0]
 801090c:	4a12      	ldr	r2, [pc, #72]	; (8010958 <HAL_TIM_MspPostInit+0x68>)
 801090e:	4293      	cmp	r3, r2
 8010910:	d11d      	bne.n	801094e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8010912:	2300      	movs	r3, #0
 8010914:	60bb      	str	r3, [r7, #8]
 8010916:	4b11      	ldr	r3, [pc, #68]	; (801095c <HAL_TIM_MspPostInit+0x6c>)
 8010918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801091a:	4a10      	ldr	r2, [pc, #64]	; (801095c <HAL_TIM_MspPostInit+0x6c>)
 801091c:	f043 0304 	orr.w	r3, r3, #4
 8010920:	6313      	str	r3, [r2, #48]	; 0x30
 8010922:	4b0e      	ldr	r3, [pc, #56]	; (801095c <HAL_TIM_MspPostInit+0x6c>)
 8010924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010926:	f003 0304 	and.w	r3, r3, #4
 801092a:	60bb      	str	r3, [r7, #8]
 801092c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 801092e:	2340      	movs	r3, #64	; 0x40
 8010930:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010932:	2302      	movs	r3, #2
 8010934:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010936:	2300      	movs	r3, #0
 8010938:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801093a:	2300      	movs	r3, #0
 801093c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 801093e:	2302      	movs	r3, #2
 8010940:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8010942:	f107 030c 	add.w	r3, r7, #12
 8010946:	4619      	mov	r1, r3
 8010948:	4805      	ldr	r0, [pc, #20]	; (8010960 <HAL_TIM_MspPostInit+0x70>)
 801094a:	f000 f9db 	bl	8010d04 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 801094e:	bf00      	nop
 8010950:	3720      	adds	r7, #32
 8010952:	46bd      	mov	sp, r7
 8010954:	bd80      	pop	{r7, pc}
 8010956:	bf00      	nop
 8010958:	40000400 	.word	0x40000400
 801095c:	40023800 	.word	0x40023800
 8010960:	40020800 	.word	0x40020800

08010964 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8010964:	f8df d034 	ldr.w	sp, [pc, #52]	; 801099c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8010968:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 801096a:	e003      	b.n	8010974 <LoopCopyDataInit>

0801096c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 801096c:	4b0c      	ldr	r3, [pc, #48]	; (80109a0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 801096e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8010970:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8010972:	3104      	adds	r1, #4

08010974 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8010974:	480b      	ldr	r0, [pc, #44]	; (80109a4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8010976:	4b0c      	ldr	r3, [pc, #48]	; (80109a8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8010978:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 801097a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 801097c:	d3f6      	bcc.n	801096c <CopyDataInit>
  ldr  r2, =_sbss
 801097e:	4a0b      	ldr	r2, [pc, #44]	; (80109ac <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8010980:	e002      	b.n	8010988 <LoopFillZerobss>

08010982 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8010982:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8010984:	f842 3b04 	str.w	r3, [r2], #4

08010988 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8010988:	4b09      	ldr	r3, [pc, #36]	; (80109b0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 801098a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 801098c:	d3f9      	bcc.n	8010982 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 801098e:	f7ff ff01 	bl	8010794 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8010992:	f007 f849 	bl	8017a28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8010996:	f7ff fcfd 	bl	8010394 <main>
  bx  lr    
 801099a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 801099c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80109a0:	0801b290 	.word	0x0801b290
  ldr  r0, =_sdata
 80109a4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80109a8:	2000027c 	.word	0x2000027c
  ldr  r2, =_sbss
 80109ac:	2000027c 	.word	0x2000027c
  ldr  r3, = _ebss
 80109b0:	20000ad0 	.word	0x20000ad0

080109b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80109b4:	e7fe      	b.n	80109b4 <ADC_IRQHandler>
	...

080109b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80109b8:	b580      	push	{r7, lr}
 80109ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80109bc:	4b0e      	ldr	r3, [pc, #56]	; (80109f8 <HAL_Init+0x40>)
 80109be:	681b      	ldr	r3, [r3, #0]
 80109c0:	4a0d      	ldr	r2, [pc, #52]	; (80109f8 <HAL_Init+0x40>)
 80109c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80109c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80109c8:	4b0b      	ldr	r3, [pc, #44]	; (80109f8 <HAL_Init+0x40>)
 80109ca:	681b      	ldr	r3, [r3, #0]
 80109cc:	4a0a      	ldr	r2, [pc, #40]	; (80109f8 <HAL_Init+0x40>)
 80109ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80109d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80109d4:	4b08      	ldr	r3, [pc, #32]	; (80109f8 <HAL_Init+0x40>)
 80109d6:	681b      	ldr	r3, [r3, #0]
 80109d8:	4a07      	ldr	r2, [pc, #28]	; (80109f8 <HAL_Init+0x40>)
 80109da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80109de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80109e0:	2003      	movs	r0, #3
 80109e2:	f000 f94d 	bl	8010c80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80109e6:	2000      	movs	r0, #0
 80109e8:	f000 f808 	bl	80109fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80109ec:	f7ff fe12 	bl	8010614 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80109f0:	2300      	movs	r3, #0
}
 80109f2:	4618      	mov	r0, r3
 80109f4:	bd80      	pop	{r7, pc}
 80109f6:	bf00      	nop
 80109f8:	40023c00 	.word	0x40023c00

080109fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80109fc:	b580      	push	{r7, lr}
 80109fe:	b082      	sub	sp, #8
 8010a00:	af00      	add	r7, sp, #0
 8010a02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8010a04:	4b12      	ldr	r3, [pc, #72]	; (8010a50 <HAL_InitTick+0x54>)
 8010a06:	681a      	ldr	r2, [r3, #0]
 8010a08:	4b12      	ldr	r3, [pc, #72]	; (8010a54 <HAL_InitTick+0x58>)
 8010a0a:	781b      	ldrb	r3, [r3, #0]
 8010a0c:	4619      	mov	r1, r3
 8010a0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8010a12:	fbb3 f3f1 	udiv	r3, r3, r1
 8010a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8010a1a:	4618      	mov	r0, r3
 8010a1c:	f000 f965 	bl	8010cea <HAL_SYSTICK_Config>
 8010a20:	4603      	mov	r3, r0
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	d001      	beq.n	8010a2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8010a26:	2301      	movs	r3, #1
 8010a28:	e00e      	b.n	8010a48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	2b0f      	cmp	r3, #15
 8010a2e:	d80a      	bhi.n	8010a46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8010a30:	2200      	movs	r2, #0
 8010a32:	6879      	ldr	r1, [r7, #4]
 8010a34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010a38:	f000 f92d 	bl	8010c96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8010a3c:	4a06      	ldr	r2, [pc, #24]	; (8010a58 <HAL_InitTick+0x5c>)
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8010a42:	2300      	movs	r3, #0
 8010a44:	e000      	b.n	8010a48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8010a46:	2301      	movs	r3, #1
}
 8010a48:	4618      	mov	r0, r3
 8010a4a:	3708      	adds	r7, #8
 8010a4c:	46bd      	mov	sp, r7
 8010a4e:	bd80      	pop	{r7, pc}
 8010a50:	200001e8 	.word	0x200001e8
 8010a54:	200001f0 	.word	0x200001f0
 8010a58:	200001ec 	.word	0x200001ec

08010a5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8010a5c:	b480      	push	{r7}
 8010a5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8010a60:	4b06      	ldr	r3, [pc, #24]	; (8010a7c <HAL_IncTick+0x20>)
 8010a62:	781b      	ldrb	r3, [r3, #0]
 8010a64:	461a      	mov	r2, r3
 8010a66:	4b06      	ldr	r3, [pc, #24]	; (8010a80 <HAL_IncTick+0x24>)
 8010a68:	681b      	ldr	r3, [r3, #0]
 8010a6a:	4413      	add	r3, r2
 8010a6c:	4a04      	ldr	r2, [pc, #16]	; (8010a80 <HAL_IncTick+0x24>)
 8010a6e:	6013      	str	r3, [r2, #0]
}
 8010a70:	bf00      	nop
 8010a72:	46bd      	mov	sp, r7
 8010a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a78:	4770      	bx	lr
 8010a7a:	bf00      	nop
 8010a7c:	200001f0 	.word	0x200001f0
 8010a80:	2000042c 	.word	0x2000042c

08010a84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8010a84:	b480      	push	{r7}
 8010a86:	af00      	add	r7, sp, #0
  return uwTick;
 8010a88:	4b03      	ldr	r3, [pc, #12]	; (8010a98 <HAL_GetTick+0x14>)
 8010a8a:	681b      	ldr	r3, [r3, #0]
}
 8010a8c:	4618      	mov	r0, r3
 8010a8e:	46bd      	mov	sp, r7
 8010a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a94:	4770      	bx	lr
 8010a96:	bf00      	nop
 8010a98:	2000042c 	.word	0x2000042c

08010a9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8010a9c:	b580      	push	{r7, lr}
 8010a9e:	b084      	sub	sp, #16
 8010aa0:	af00      	add	r7, sp, #0
 8010aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8010aa4:	f7ff ffee 	bl	8010a84 <HAL_GetTick>
 8010aa8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8010aae:	68fb      	ldr	r3, [r7, #12]
 8010ab0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010ab4:	d005      	beq.n	8010ac2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8010ab6:	4b09      	ldr	r3, [pc, #36]	; (8010adc <HAL_Delay+0x40>)
 8010ab8:	781b      	ldrb	r3, [r3, #0]
 8010aba:	461a      	mov	r2, r3
 8010abc:	68fb      	ldr	r3, [r7, #12]
 8010abe:	4413      	add	r3, r2
 8010ac0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8010ac2:	bf00      	nop
 8010ac4:	f7ff ffde 	bl	8010a84 <HAL_GetTick>
 8010ac8:	4602      	mov	r2, r0
 8010aca:	68bb      	ldr	r3, [r7, #8]
 8010acc:	1ad3      	subs	r3, r2, r3
 8010ace:	68fa      	ldr	r2, [r7, #12]
 8010ad0:	429a      	cmp	r2, r3
 8010ad2:	d8f7      	bhi.n	8010ac4 <HAL_Delay+0x28>
  {
  }
}
 8010ad4:	bf00      	nop
 8010ad6:	3710      	adds	r7, #16
 8010ad8:	46bd      	mov	sp, r7
 8010ada:	bd80      	pop	{r7, pc}
 8010adc:	200001f0 	.word	0x200001f0

08010ae0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8010ae0:	b480      	push	{r7}
 8010ae2:	b085      	sub	sp, #20
 8010ae4:	af00      	add	r7, sp, #0
 8010ae6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	f003 0307 	and.w	r3, r3, #7
 8010aee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8010af0:	4b0c      	ldr	r3, [pc, #48]	; (8010b24 <__NVIC_SetPriorityGrouping+0x44>)
 8010af2:	68db      	ldr	r3, [r3, #12]
 8010af4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8010af6:	68ba      	ldr	r2, [r7, #8]
 8010af8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8010afc:	4013      	ands	r3, r2
 8010afe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8010b00:	68fb      	ldr	r3, [r7, #12]
 8010b02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8010b04:	68bb      	ldr	r3, [r7, #8]
 8010b06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8010b08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8010b0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010b10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8010b12:	4a04      	ldr	r2, [pc, #16]	; (8010b24 <__NVIC_SetPriorityGrouping+0x44>)
 8010b14:	68bb      	ldr	r3, [r7, #8]
 8010b16:	60d3      	str	r3, [r2, #12]
}
 8010b18:	bf00      	nop
 8010b1a:	3714      	adds	r7, #20
 8010b1c:	46bd      	mov	sp, r7
 8010b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b22:	4770      	bx	lr
 8010b24:	e000ed00 	.word	0xe000ed00

08010b28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8010b28:	b480      	push	{r7}
 8010b2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8010b2c:	4b04      	ldr	r3, [pc, #16]	; (8010b40 <__NVIC_GetPriorityGrouping+0x18>)
 8010b2e:	68db      	ldr	r3, [r3, #12]
 8010b30:	0a1b      	lsrs	r3, r3, #8
 8010b32:	f003 0307 	and.w	r3, r3, #7
}
 8010b36:	4618      	mov	r0, r3
 8010b38:	46bd      	mov	sp, r7
 8010b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b3e:	4770      	bx	lr
 8010b40:	e000ed00 	.word	0xe000ed00

08010b44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8010b44:	b480      	push	{r7}
 8010b46:	b083      	sub	sp, #12
 8010b48:	af00      	add	r7, sp, #0
 8010b4a:	4603      	mov	r3, r0
 8010b4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	db0b      	blt.n	8010b6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8010b56:	79fb      	ldrb	r3, [r7, #7]
 8010b58:	f003 021f 	and.w	r2, r3, #31
 8010b5c:	4907      	ldr	r1, [pc, #28]	; (8010b7c <__NVIC_EnableIRQ+0x38>)
 8010b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010b62:	095b      	lsrs	r3, r3, #5
 8010b64:	2001      	movs	r0, #1
 8010b66:	fa00 f202 	lsl.w	r2, r0, r2
 8010b6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8010b6e:	bf00      	nop
 8010b70:	370c      	adds	r7, #12
 8010b72:	46bd      	mov	sp, r7
 8010b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b78:	4770      	bx	lr
 8010b7a:	bf00      	nop
 8010b7c:	e000e100 	.word	0xe000e100

08010b80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8010b80:	b480      	push	{r7}
 8010b82:	b083      	sub	sp, #12
 8010b84:	af00      	add	r7, sp, #0
 8010b86:	4603      	mov	r3, r0
 8010b88:	6039      	str	r1, [r7, #0]
 8010b8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010b8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	db0a      	blt.n	8010baa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010b94:	683b      	ldr	r3, [r7, #0]
 8010b96:	b2da      	uxtb	r2, r3
 8010b98:	490c      	ldr	r1, [pc, #48]	; (8010bcc <__NVIC_SetPriority+0x4c>)
 8010b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010b9e:	0112      	lsls	r2, r2, #4
 8010ba0:	b2d2      	uxtb	r2, r2
 8010ba2:	440b      	add	r3, r1
 8010ba4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8010ba8:	e00a      	b.n	8010bc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010baa:	683b      	ldr	r3, [r7, #0]
 8010bac:	b2da      	uxtb	r2, r3
 8010bae:	4908      	ldr	r1, [pc, #32]	; (8010bd0 <__NVIC_SetPriority+0x50>)
 8010bb0:	79fb      	ldrb	r3, [r7, #7]
 8010bb2:	f003 030f 	and.w	r3, r3, #15
 8010bb6:	3b04      	subs	r3, #4
 8010bb8:	0112      	lsls	r2, r2, #4
 8010bba:	b2d2      	uxtb	r2, r2
 8010bbc:	440b      	add	r3, r1
 8010bbe:	761a      	strb	r2, [r3, #24]
}
 8010bc0:	bf00      	nop
 8010bc2:	370c      	adds	r7, #12
 8010bc4:	46bd      	mov	sp, r7
 8010bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bca:	4770      	bx	lr
 8010bcc:	e000e100 	.word	0xe000e100
 8010bd0:	e000ed00 	.word	0xe000ed00

08010bd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8010bd4:	b480      	push	{r7}
 8010bd6:	b089      	sub	sp, #36	; 0x24
 8010bd8:	af00      	add	r7, sp, #0
 8010bda:	60f8      	str	r0, [r7, #12]
 8010bdc:	60b9      	str	r1, [r7, #8]
 8010bde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8010be0:	68fb      	ldr	r3, [r7, #12]
 8010be2:	f003 0307 	and.w	r3, r3, #7
 8010be6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8010be8:	69fb      	ldr	r3, [r7, #28]
 8010bea:	f1c3 0307 	rsb	r3, r3, #7
 8010bee:	2b04      	cmp	r3, #4
 8010bf0:	bf28      	it	cs
 8010bf2:	2304      	movcs	r3, #4
 8010bf4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8010bf6:	69fb      	ldr	r3, [r7, #28]
 8010bf8:	3304      	adds	r3, #4
 8010bfa:	2b06      	cmp	r3, #6
 8010bfc:	d902      	bls.n	8010c04 <NVIC_EncodePriority+0x30>
 8010bfe:	69fb      	ldr	r3, [r7, #28]
 8010c00:	3b03      	subs	r3, #3
 8010c02:	e000      	b.n	8010c06 <NVIC_EncodePriority+0x32>
 8010c04:	2300      	movs	r3, #0
 8010c06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010c08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010c0c:	69bb      	ldr	r3, [r7, #24]
 8010c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8010c12:	43da      	mvns	r2, r3
 8010c14:	68bb      	ldr	r3, [r7, #8]
 8010c16:	401a      	ands	r2, r3
 8010c18:	697b      	ldr	r3, [r7, #20]
 8010c1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8010c1c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8010c20:	697b      	ldr	r3, [r7, #20]
 8010c22:	fa01 f303 	lsl.w	r3, r1, r3
 8010c26:	43d9      	mvns	r1, r3
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010c2c:	4313      	orrs	r3, r2
         );
}
 8010c2e:	4618      	mov	r0, r3
 8010c30:	3724      	adds	r7, #36	; 0x24
 8010c32:	46bd      	mov	sp, r7
 8010c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c38:	4770      	bx	lr
	...

08010c3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8010c3c:	b580      	push	{r7, lr}
 8010c3e:	b082      	sub	sp, #8
 8010c40:	af00      	add	r7, sp, #0
 8010c42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	3b01      	subs	r3, #1
 8010c48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8010c4c:	d301      	bcc.n	8010c52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8010c4e:	2301      	movs	r3, #1
 8010c50:	e00f      	b.n	8010c72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8010c52:	4a0a      	ldr	r2, [pc, #40]	; (8010c7c <SysTick_Config+0x40>)
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	3b01      	subs	r3, #1
 8010c58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8010c5a:	210f      	movs	r1, #15
 8010c5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010c60:	f7ff ff8e 	bl	8010b80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8010c64:	4b05      	ldr	r3, [pc, #20]	; (8010c7c <SysTick_Config+0x40>)
 8010c66:	2200      	movs	r2, #0
 8010c68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8010c6a:	4b04      	ldr	r3, [pc, #16]	; (8010c7c <SysTick_Config+0x40>)
 8010c6c:	2207      	movs	r2, #7
 8010c6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8010c70:	2300      	movs	r3, #0
}
 8010c72:	4618      	mov	r0, r3
 8010c74:	3708      	adds	r7, #8
 8010c76:	46bd      	mov	sp, r7
 8010c78:	bd80      	pop	{r7, pc}
 8010c7a:	bf00      	nop
 8010c7c:	e000e010 	.word	0xe000e010

08010c80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8010c80:	b580      	push	{r7, lr}
 8010c82:	b082      	sub	sp, #8
 8010c84:	af00      	add	r7, sp, #0
 8010c86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8010c88:	6878      	ldr	r0, [r7, #4]
 8010c8a:	f7ff ff29 	bl	8010ae0 <__NVIC_SetPriorityGrouping>
}
 8010c8e:	bf00      	nop
 8010c90:	3708      	adds	r7, #8
 8010c92:	46bd      	mov	sp, r7
 8010c94:	bd80      	pop	{r7, pc}

08010c96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8010c96:	b580      	push	{r7, lr}
 8010c98:	b086      	sub	sp, #24
 8010c9a:	af00      	add	r7, sp, #0
 8010c9c:	4603      	mov	r3, r0
 8010c9e:	60b9      	str	r1, [r7, #8]
 8010ca0:	607a      	str	r2, [r7, #4]
 8010ca2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8010ca4:	2300      	movs	r3, #0
 8010ca6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8010ca8:	f7ff ff3e 	bl	8010b28 <__NVIC_GetPriorityGrouping>
 8010cac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8010cae:	687a      	ldr	r2, [r7, #4]
 8010cb0:	68b9      	ldr	r1, [r7, #8]
 8010cb2:	6978      	ldr	r0, [r7, #20]
 8010cb4:	f7ff ff8e 	bl	8010bd4 <NVIC_EncodePriority>
 8010cb8:	4602      	mov	r2, r0
 8010cba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010cbe:	4611      	mov	r1, r2
 8010cc0:	4618      	mov	r0, r3
 8010cc2:	f7ff ff5d 	bl	8010b80 <__NVIC_SetPriority>
}
 8010cc6:	bf00      	nop
 8010cc8:	3718      	adds	r7, #24
 8010cca:	46bd      	mov	sp, r7
 8010ccc:	bd80      	pop	{r7, pc}

08010cce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8010cce:	b580      	push	{r7, lr}
 8010cd0:	b082      	sub	sp, #8
 8010cd2:	af00      	add	r7, sp, #0
 8010cd4:	4603      	mov	r3, r0
 8010cd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8010cd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010cdc:	4618      	mov	r0, r3
 8010cde:	f7ff ff31 	bl	8010b44 <__NVIC_EnableIRQ>
}
 8010ce2:	bf00      	nop
 8010ce4:	3708      	adds	r7, #8
 8010ce6:	46bd      	mov	sp, r7
 8010ce8:	bd80      	pop	{r7, pc}

08010cea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8010cea:	b580      	push	{r7, lr}
 8010cec:	b082      	sub	sp, #8
 8010cee:	af00      	add	r7, sp, #0
 8010cf0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8010cf2:	6878      	ldr	r0, [r7, #4]
 8010cf4:	f7ff ffa2 	bl	8010c3c <SysTick_Config>
 8010cf8:	4603      	mov	r3, r0
}
 8010cfa:	4618      	mov	r0, r3
 8010cfc:	3708      	adds	r7, #8
 8010cfe:	46bd      	mov	sp, r7
 8010d00:	bd80      	pop	{r7, pc}
	...

08010d04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8010d04:	b480      	push	{r7}
 8010d06:	b089      	sub	sp, #36	; 0x24
 8010d08:	af00      	add	r7, sp, #0
 8010d0a:	6078      	str	r0, [r7, #4]
 8010d0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8010d0e:	2300      	movs	r3, #0
 8010d10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8010d12:	2300      	movs	r3, #0
 8010d14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8010d16:	2300      	movs	r3, #0
 8010d18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8010d1a:	2300      	movs	r3, #0
 8010d1c:	61fb      	str	r3, [r7, #28]
 8010d1e:	e159      	b.n	8010fd4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8010d20:	2201      	movs	r2, #1
 8010d22:	69fb      	ldr	r3, [r7, #28]
 8010d24:	fa02 f303 	lsl.w	r3, r2, r3
 8010d28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8010d2a:	683b      	ldr	r3, [r7, #0]
 8010d2c:	681b      	ldr	r3, [r3, #0]
 8010d2e:	697a      	ldr	r2, [r7, #20]
 8010d30:	4013      	ands	r3, r2
 8010d32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8010d34:	693a      	ldr	r2, [r7, #16]
 8010d36:	697b      	ldr	r3, [r7, #20]
 8010d38:	429a      	cmp	r2, r3
 8010d3a:	f040 8148 	bne.w	8010fce <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8010d3e:	683b      	ldr	r3, [r7, #0]
 8010d40:	685b      	ldr	r3, [r3, #4]
 8010d42:	2b01      	cmp	r3, #1
 8010d44:	d00b      	beq.n	8010d5e <HAL_GPIO_Init+0x5a>
 8010d46:	683b      	ldr	r3, [r7, #0]
 8010d48:	685b      	ldr	r3, [r3, #4]
 8010d4a:	2b02      	cmp	r3, #2
 8010d4c:	d007      	beq.n	8010d5e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8010d4e:	683b      	ldr	r3, [r7, #0]
 8010d50:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8010d52:	2b11      	cmp	r3, #17
 8010d54:	d003      	beq.n	8010d5e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8010d56:	683b      	ldr	r3, [r7, #0]
 8010d58:	685b      	ldr	r3, [r3, #4]
 8010d5a:	2b12      	cmp	r3, #18
 8010d5c:	d130      	bne.n	8010dc0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	689b      	ldr	r3, [r3, #8]
 8010d62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8010d64:	69fb      	ldr	r3, [r7, #28]
 8010d66:	005b      	lsls	r3, r3, #1
 8010d68:	2203      	movs	r2, #3
 8010d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8010d6e:	43db      	mvns	r3, r3
 8010d70:	69ba      	ldr	r2, [r7, #24]
 8010d72:	4013      	ands	r3, r2
 8010d74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8010d76:	683b      	ldr	r3, [r7, #0]
 8010d78:	68da      	ldr	r2, [r3, #12]
 8010d7a:	69fb      	ldr	r3, [r7, #28]
 8010d7c:	005b      	lsls	r3, r3, #1
 8010d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8010d82:	69ba      	ldr	r2, [r7, #24]
 8010d84:	4313      	orrs	r3, r2
 8010d86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	69ba      	ldr	r2, [r7, #24]
 8010d8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	685b      	ldr	r3, [r3, #4]
 8010d92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8010d94:	2201      	movs	r2, #1
 8010d96:	69fb      	ldr	r3, [r7, #28]
 8010d98:	fa02 f303 	lsl.w	r3, r2, r3
 8010d9c:	43db      	mvns	r3, r3
 8010d9e:	69ba      	ldr	r2, [r7, #24]
 8010da0:	4013      	ands	r3, r2
 8010da2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8010da4:	683b      	ldr	r3, [r7, #0]
 8010da6:	685b      	ldr	r3, [r3, #4]
 8010da8:	091b      	lsrs	r3, r3, #4
 8010daa:	f003 0201 	and.w	r2, r3, #1
 8010dae:	69fb      	ldr	r3, [r7, #28]
 8010db0:	fa02 f303 	lsl.w	r3, r2, r3
 8010db4:	69ba      	ldr	r2, [r7, #24]
 8010db6:	4313      	orrs	r3, r2
 8010db8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	69ba      	ldr	r2, [r7, #24]
 8010dbe:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	68db      	ldr	r3, [r3, #12]
 8010dc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8010dc6:	69fb      	ldr	r3, [r7, #28]
 8010dc8:	005b      	lsls	r3, r3, #1
 8010dca:	2203      	movs	r2, #3
 8010dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8010dd0:	43db      	mvns	r3, r3
 8010dd2:	69ba      	ldr	r2, [r7, #24]
 8010dd4:	4013      	ands	r3, r2
 8010dd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8010dd8:	683b      	ldr	r3, [r7, #0]
 8010dda:	689a      	ldr	r2, [r3, #8]
 8010ddc:	69fb      	ldr	r3, [r7, #28]
 8010dde:	005b      	lsls	r3, r3, #1
 8010de0:	fa02 f303 	lsl.w	r3, r2, r3
 8010de4:	69ba      	ldr	r2, [r7, #24]
 8010de6:	4313      	orrs	r3, r2
 8010de8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	69ba      	ldr	r2, [r7, #24]
 8010dee:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8010df0:	683b      	ldr	r3, [r7, #0]
 8010df2:	685b      	ldr	r3, [r3, #4]
 8010df4:	2b02      	cmp	r3, #2
 8010df6:	d003      	beq.n	8010e00 <HAL_GPIO_Init+0xfc>
 8010df8:	683b      	ldr	r3, [r7, #0]
 8010dfa:	685b      	ldr	r3, [r3, #4]
 8010dfc:	2b12      	cmp	r3, #18
 8010dfe:	d123      	bne.n	8010e48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8010e00:	69fb      	ldr	r3, [r7, #28]
 8010e02:	08da      	lsrs	r2, r3, #3
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	3208      	adds	r2, #8
 8010e08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8010e0e:	69fb      	ldr	r3, [r7, #28]
 8010e10:	f003 0307 	and.w	r3, r3, #7
 8010e14:	009b      	lsls	r3, r3, #2
 8010e16:	220f      	movs	r2, #15
 8010e18:	fa02 f303 	lsl.w	r3, r2, r3
 8010e1c:	43db      	mvns	r3, r3
 8010e1e:	69ba      	ldr	r2, [r7, #24]
 8010e20:	4013      	ands	r3, r2
 8010e22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8010e24:	683b      	ldr	r3, [r7, #0]
 8010e26:	691a      	ldr	r2, [r3, #16]
 8010e28:	69fb      	ldr	r3, [r7, #28]
 8010e2a:	f003 0307 	and.w	r3, r3, #7
 8010e2e:	009b      	lsls	r3, r3, #2
 8010e30:	fa02 f303 	lsl.w	r3, r2, r3
 8010e34:	69ba      	ldr	r2, [r7, #24]
 8010e36:	4313      	orrs	r3, r2
 8010e38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8010e3a:	69fb      	ldr	r3, [r7, #28]
 8010e3c:	08da      	lsrs	r2, r3, #3
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	3208      	adds	r2, #8
 8010e42:	69b9      	ldr	r1, [r7, #24]
 8010e44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	681b      	ldr	r3, [r3, #0]
 8010e4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8010e4e:	69fb      	ldr	r3, [r7, #28]
 8010e50:	005b      	lsls	r3, r3, #1
 8010e52:	2203      	movs	r2, #3
 8010e54:	fa02 f303 	lsl.w	r3, r2, r3
 8010e58:	43db      	mvns	r3, r3
 8010e5a:	69ba      	ldr	r2, [r7, #24]
 8010e5c:	4013      	ands	r3, r2
 8010e5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8010e60:	683b      	ldr	r3, [r7, #0]
 8010e62:	685b      	ldr	r3, [r3, #4]
 8010e64:	f003 0203 	and.w	r2, r3, #3
 8010e68:	69fb      	ldr	r3, [r7, #28]
 8010e6a:	005b      	lsls	r3, r3, #1
 8010e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8010e70:	69ba      	ldr	r2, [r7, #24]
 8010e72:	4313      	orrs	r3, r2
 8010e74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	69ba      	ldr	r2, [r7, #24]
 8010e7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8010e7c:	683b      	ldr	r3, [r7, #0]
 8010e7e:	685b      	ldr	r3, [r3, #4]
 8010e80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	f000 80a2 	beq.w	8010fce <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010e8a:	2300      	movs	r3, #0
 8010e8c:	60fb      	str	r3, [r7, #12]
 8010e8e:	4b56      	ldr	r3, [pc, #344]	; (8010fe8 <HAL_GPIO_Init+0x2e4>)
 8010e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010e92:	4a55      	ldr	r2, [pc, #340]	; (8010fe8 <HAL_GPIO_Init+0x2e4>)
 8010e94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010e98:	6453      	str	r3, [r2, #68]	; 0x44
 8010e9a:	4b53      	ldr	r3, [pc, #332]	; (8010fe8 <HAL_GPIO_Init+0x2e4>)
 8010e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010e9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010ea2:	60fb      	str	r3, [r7, #12]
 8010ea4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8010ea6:	4a51      	ldr	r2, [pc, #324]	; (8010fec <HAL_GPIO_Init+0x2e8>)
 8010ea8:	69fb      	ldr	r3, [r7, #28]
 8010eaa:	089b      	lsrs	r3, r3, #2
 8010eac:	3302      	adds	r3, #2
 8010eae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8010eb4:	69fb      	ldr	r3, [r7, #28]
 8010eb6:	f003 0303 	and.w	r3, r3, #3
 8010eba:	009b      	lsls	r3, r3, #2
 8010ebc:	220f      	movs	r2, #15
 8010ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8010ec2:	43db      	mvns	r3, r3
 8010ec4:	69ba      	ldr	r2, [r7, #24]
 8010ec6:	4013      	ands	r3, r2
 8010ec8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	4a48      	ldr	r2, [pc, #288]	; (8010ff0 <HAL_GPIO_Init+0x2ec>)
 8010ece:	4293      	cmp	r3, r2
 8010ed0:	d019      	beq.n	8010f06 <HAL_GPIO_Init+0x202>
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	4a47      	ldr	r2, [pc, #284]	; (8010ff4 <HAL_GPIO_Init+0x2f0>)
 8010ed6:	4293      	cmp	r3, r2
 8010ed8:	d013      	beq.n	8010f02 <HAL_GPIO_Init+0x1fe>
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	4a46      	ldr	r2, [pc, #280]	; (8010ff8 <HAL_GPIO_Init+0x2f4>)
 8010ede:	4293      	cmp	r3, r2
 8010ee0:	d00d      	beq.n	8010efe <HAL_GPIO_Init+0x1fa>
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	4a45      	ldr	r2, [pc, #276]	; (8010ffc <HAL_GPIO_Init+0x2f8>)
 8010ee6:	4293      	cmp	r3, r2
 8010ee8:	d007      	beq.n	8010efa <HAL_GPIO_Init+0x1f6>
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	4a44      	ldr	r2, [pc, #272]	; (8011000 <HAL_GPIO_Init+0x2fc>)
 8010eee:	4293      	cmp	r3, r2
 8010ef0:	d101      	bne.n	8010ef6 <HAL_GPIO_Init+0x1f2>
 8010ef2:	2304      	movs	r3, #4
 8010ef4:	e008      	b.n	8010f08 <HAL_GPIO_Init+0x204>
 8010ef6:	2307      	movs	r3, #7
 8010ef8:	e006      	b.n	8010f08 <HAL_GPIO_Init+0x204>
 8010efa:	2303      	movs	r3, #3
 8010efc:	e004      	b.n	8010f08 <HAL_GPIO_Init+0x204>
 8010efe:	2302      	movs	r3, #2
 8010f00:	e002      	b.n	8010f08 <HAL_GPIO_Init+0x204>
 8010f02:	2301      	movs	r3, #1
 8010f04:	e000      	b.n	8010f08 <HAL_GPIO_Init+0x204>
 8010f06:	2300      	movs	r3, #0
 8010f08:	69fa      	ldr	r2, [r7, #28]
 8010f0a:	f002 0203 	and.w	r2, r2, #3
 8010f0e:	0092      	lsls	r2, r2, #2
 8010f10:	4093      	lsls	r3, r2
 8010f12:	69ba      	ldr	r2, [r7, #24]
 8010f14:	4313      	orrs	r3, r2
 8010f16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8010f18:	4934      	ldr	r1, [pc, #208]	; (8010fec <HAL_GPIO_Init+0x2e8>)
 8010f1a:	69fb      	ldr	r3, [r7, #28]
 8010f1c:	089b      	lsrs	r3, r3, #2
 8010f1e:	3302      	adds	r3, #2
 8010f20:	69ba      	ldr	r2, [r7, #24]
 8010f22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8010f26:	4b37      	ldr	r3, [pc, #220]	; (8011004 <HAL_GPIO_Init+0x300>)
 8010f28:	681b      	ldr	r3, [r3, #0]
 8010f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8010f2c:	693b      	ldr	r3, [r7, #16]
 8010f2e:	43db      	mvns	r3, r3
 8010f30:	69ba      	ldr	r2, [r7, #24]
 8010f32:	4013      	ands	r3, r2
 8010f34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8010f36:	683b      	ldr	r3, [r7, #0]
 8010f38:	685b      	ldr	r3, [r3, #4]
 8010f3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	d003      	beq.n	8010f4a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8010f42:	69ba      	ldr	r2, [r7, #24]
 8010f44:	693b      	ldr	r3, [r7, #16]
 8010f46:	4313      	orrs	r3, r2
 8010f48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8010f4a:	4a2e      	ldr	r2, [pc, #184]	; (8011004 <HAL_GPIO_Init+0x300>)
 8010f4c:	69bb      	ldr	r3, [r7, #24]
 8010f4e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8010f50:	4b2c      	ldr	r3, [pc, #176]	; (8011004 <HAL_GPIO_Init+0x300>)
 8010f52:	685b      	ldr	r3, [r3, #4]
 8010f54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8010f56:	693b      	ldr	r3, [r7, #16]
 8010f58:	43db      	mvns	r3, r3
 8010f5a:	69ba      	ldr	r2, [r7, #24]
 8010f5c:	4013      	ands	r3, r2
 8010f5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8010f60:	683b      	ldr	r3, [r7, #0]
 8010f62:	685b      	ldr	r3, [r3, #4]
 8010f64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	d003      	beq.n	8010f74 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8010f6c:	69ba      	ldr	r2, [r7, #24]
 8010f6e:	693b      	ldr	r3, [r7, #16]
 8010f70:	4313      	orrs	r3, r2
 8010f72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8010f74:	4a23      	ldr	r2, [pc, #140]	; (8011004 <HAL_GPIO_Init+0x300>)
 8010f76:	69bb      	ldr	r3, [r7, #24]
 8010f78:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8010f7a:	4b22      	ldr	r3, [pc, #136]	; (8011004 <HAL_GPIO_Init+0x300>)
 8010f7c:	689b      	ldr	r3, [r3, #8]
 8010f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8010f80:	693b      	ldr	r3, [r7, #16]
 8010f82:	43db      	mvns	r3, r3
 8010f84:	69ba      	ldr	r2, [r7, #24]
 8010f86:	4013      	ands	r3, r2
 8010f88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8010f8a:	683b      	ldr	r3, [r7, #0]
 8010f8c:	685b      	ldr	r3, [r3, #4]
 8010f8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	d003      	beq.n	8010f9e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8010f96:	69ba      	ldr	r2, [r7, #24]
 8010f98:	693b      	ldr	r3, [r7, #16]
 8010f9a:	4313      	orrs	r3, r2
 8010f9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8010f9e:	4a19      	ldr	r2, [pc, #100]	; (8011004 <HAL_GPIO_Init+0x300>)
 8010fa0:	69bb      	ldr	r3, [r7, #24]
 8010fa2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8010fa4:	4b17      	ldr	r3, [pc, #92]	; (8011004 <HAL_GPIO_Init+0x300>)
 8010fa6:	68db      	ldr	r3, [r3, #12]
 8010fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8010faa:	693b      	ldr	r3, [r7, #16]
 8010fac:	43db      	mvns	r3, r3
 8010fae:	69ba      	ldr	r2, [r7, #24]
 8010fb0:	4013      	ands	r3, r2
 8010fb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8010fb4:	683b      	ldr	r3, [r7, #0]
 8010fb6:	685b      	ldr	r3, [r3, #4]
 8010fb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	d003      	beq.n	8010fc8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8010fc0:	69ba      	ldr	r2, [r7, #24]
 8010fc2:	693b      	ldr	r3, [r7, #16]
 8010fc4:	4313      	orrs	r3, r2
 8010fc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8010fc8:	4a0e      	ldr	r2, [pc, #56]	; (8011004 <HAL_GPIO_Init+0x300>)
 8010fca:	69bb      	ldr	r3, [r7, #24]
 8010fcc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8010fce:	69fb      	ldr	r3, [r7, #28]
 8010fd0:	3301      	adds	r3, #1
 8010fd2:	61fb      	str	r3, [r7, #28]
 8010fd4:	69fb      	ldr	r3, [r7, #28]
 8010fd6:	2b0f      	cmp	r3, #15
 8010fd8:	f67f aea2 	bls.w	8010d20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8010fdc:	bf00      	nop
 8010fde:	3724      	adds	r7, #36	; 0x24
 8010fe0:	46bd      	mov	sp, r7
 8010fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fe6:	4770      	bx	lr
 8010fe8:	40023800 	.word	0x40023800
 8010fec:	40013800 	.word	0x40013800
 8010ff0:	40020000 	.word	0x40020000
 8010ff4:	40020400 	.word	0x40020400
 8010ff8:	40020800 	.word	0x40020800
 8010ffc:	40020c00 	.word	0x40020c00
 8011000:	40021000 	.word	0x40021000
 8011004:	40013c00 	.word	0x40013c00

08011008 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8011008:	b480      	push	{r7}
 801100a:	b085      	sub	sp, #20
 801100c:	af00      	add	r7, sp, #0
 801100e:	6078      	str	r0, [r7, #4]
 8011010:	460b      	mov	r3, r1
 8011012:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	691a      	ldr	r2, [r3, #16]
 8011018:	887b      	ldrh	r3, [r7, #2]
 801101a:	4013      	ands	r3, r2
 801101c:	2b00      	cmp	r3, #0
 801101e:	d002      	beq.n	8011026 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8011020:	2301      	movs	r3, #1
 8011022:	73fb      	strb	r3, [r7, #15]
 8011024:	e001      	b.n	801102a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8011026:	2300      	movs	r3, #0
 8011028:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 801102a:	7bfb      	ldrb	r3, [r7, #15]
}
 801102c:	4618      	mov	r0, r3
 801102e:	3714      	adds	r7, #20
 8011030:	46bd      	mov	sp, r7
 8011032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011036:	4770      	bx	lr

08011038 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8011038:	b480      	push	{r7}
 801103a:	b083      	sub	sp, #12
 801103c:	af00      	add	r7, sp, #0
 801103e:	6078      	str	r0, [r7, #4]
 8011040:	460b      	mov	r3, r1
 8011042:	807b      	strh	r3, [r7, #2]
 8011044:	4613      	mov	r3, r2
 8011046:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8011048:	787b      	ldrb	r3, [r7, #1]
 801104a:	2b00      	cmp	r3, #0
 801104c:	d003      	beq.n	8011056 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 801104e:	887a      	ldrh	r2, [r7, #2]
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8011054:	e003      	b.n	801105e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8011056:	887b      	ldrh	r3, [r7, #2]
 8011058:	041a      	lsls	r2, r3, #16
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	619a      	str	r2, [r3, #24]
}
 801105e:	bf00      	nop
 8011060:	370c      	adds	r7, #12
 8011062:	46bd      	mov	sp, r7
 8011064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011068:	4770      	bx	lr
	...

0801106c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 801106c:	b580      	push	{r7, lr}
 801106e:	b082      	sub	sp, #8
 8011070:	af00      	add	r7, sp, #0
 8011072:	4603      	mov	r3, r0
 8011074:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8011076:	4b08      	ldr	r3, [pc, #32]	; (8011098 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8011078:	695a      	ldr	r2, [r3, #20]
 801107a:	88fb      	ldrh	r3, [r7, #6]
 801107c:	4013      	ands	r3, r2
 801107e:	2b00      	cmp	r3, #0
 8011080:	d006      	beq.n	8011090 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8011082:	4a05      	ldr	r2, [pc, #20]	; (8011098 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8011084:	88fb      	ldrh	r3, [r7, #6]
 8011086:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8011088:	88fb      	ldrh	r3, [r7, #6]
 801108a:	4618      	mov	r0, r3
 801108c:	f000 f806 	bl	801109c <HAL_GPIO_EXTI_Callback>
  }
}
 8011090:	bf00      	nop
 8011092:	3708      	adds	r7, #8
 8011094:	46bd      	mov	sp, r7
 8011096:	bd80      	pop	{r7, pc}
 8011098:	40013c00 	.word	0x40013c00

0801109c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 801109c:	b480      	push	{r7}
 801109e:	b083      	sub	sp, #12
 80110a0:	af00      	add	r7, sp, #0
 80110a2:	4603      	mov	r3, r0
 80110a4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80110a6:	bf00      	nop
 80110a8:	370c      	adds	r7, #12
 80110aa:	46bd      	mov	sp, r7
 80110ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110b0:	4770      	bx	lr

080110b2 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80110b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80110b4:	b08f      	sub	sp, #60	; 0x3c
 80110b6:	af0a      	add	r7, sp, #40	; 0x28
 80110b8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	2b00      	cmp	r3, #0
 80110be:	d101      	bne.n	80110c4 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80110c0:	2301      	movs	r3, #1
 80110c2:	e054      	b.n	801116e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	681b      	ldr	r3, [r3, #0]
 80110c8:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 80110d0:	b2db      	uxtb	r3, r3
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	d106      	bne.n	80110e4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	2200      	movs	r2, #0
 80110da:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80110de:	6878      	ldr	r0, [r7, #4]
 80110e0:	f005 ff80 	bl	8016fe4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	2203      	movs	r2, #3
 80110e8:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80110ec:	68fb      	ldr	r3, [r7, #12]
 80110ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80110f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	d102      	bne.n	80110fe <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	2200      	movs	r2, #0
 80110fc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	681b      	ldr	r3, [r3, #0]
 8011102:	4618      	mov	r0, r3
 8011104:	f004 f81e 	bl	8015144 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	681b      	ldr	r3, [r3, #0]
 801110c:	603b      	str	r3, [r7, #0]
 801110e:	687e      	ldr	r6, [r7, #4]
 8011110:	466d      	mov	r5, sp
 8011112:	f106 0410 	add.w	r4, r6, #16
 8011116:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011118:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801111a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801111c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801111e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8011122:	e885 0003 	stmia.w	r5, {r0, r1}
 8011126:	1d33      	adds	r3, r6, #4
 8011128:	cb0e      	ldmia	r3, {r1, r2, r3}
 801112a:	6838      	ldr	r0, [r7, #0]
 801112c:	f003 ff98 	bl	8015060 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	681b      	ldr	r3, [r3, #0]
 8011134:	2101      	movs	r1, #1
 8011136:	4618      	mov	r0, r3
 8011138:	f004 f815 	bl	8015166 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	681b      	ldr	r3, [r3, #0]
 8011140:	603b      	str	r3, [r7, #0]
 8011142:	687e      	ldr	r6, [r7, #4]
 8011144:	466d      	mov	r5, sp
 8011146:	f106 0410 	add.w	r4, r6, #16
 801114a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801114c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801114e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011150:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011152:	e894 0003 	ldmia.w	r4, {r0, r1}
 8011156:	e885 0003 	stmia.w	r5, {r0, r1}
 801115a:	1d33      	adds	r3, r6, #4
 801115c:	cb0e      	ldmia	r3, {r1, r2, r3}
 801115e:	6838      	ldr	r0, [r7, #0]
 8011160:	f004 f928 	bl	80153b4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	2201      	movs	r2, #1
 8011168:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 801116c:	2300      	movs	r3, #0
}
 801116e:	4618      	mov	r0, r3
 8011170:	3714      	adds	r7, #20
 8011172:	46bd      	mov	sp, r7
 8011174:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011176 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8011176:	b590      	push	{r4, r7, lr}
 8011178:	b089      	sub	sp, #36	; 0x24
 801117a:	af04      	add	r7, sp, #16
 801117c:	6078      	str	r0, [r7, #4]
 801117e:	4608      	mov	r0, r1
 8011180:	4611      	mov	r1, r2
 8011182:	461a      	mov	r2, r3
 8011184:	4603      	mov	r3, r0
 8011186:	70fb      	strb	r3, [r7, #3]
 8011188:	460b      	mov	r3, r1
 801118a:	70bb      	strb	r3, [r7, #2]
 801118c:	4613      	mov	r3, r2
 801118e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8011196:	2b01      	cmp	r3, #1
 8011198:	d101      	bne.n	801119e <HAL_HCD_HC_Init+0x28>
 801119a:	2302      	movs	r3, #2
 801119c:	e07f      	b.n	801129e <HAL_HCD_HC_Init+0x128>
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	2201      	movs	r2, #1
 80111a2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 80111a6:	78fa      	ldrb	r2, [r7, #3]
 80111a8:	6879      	ldr	r1, [r7, #4]
 80111aa:	4613      	mov	r3, r2
 80111ac:	009b      	lsls	r3, r3, #2
 80111ae:	4413      	add	r3, r2
 80111b0:	00db      	lsls	r3, r3, #3
 80111b2:	440b      	add	r3, r1
 80111b4:	333d      	adds	r3, #61	; 0x3d
 80111b6:	2200      	movs	r2, #0
 80111b8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80111ba:	78fa      	ldrb	r2, [r7, #3]
 80111bc:	6879      	ldr	r1, [r7, #4]
 80111be:	4613      	mov	r3, r2
 80111c0:	009b      	lsls	r3, r3, #2
 80111c2:	4413      	add	r3, r2
 80111c4:	00db      	lsls	r3, r3, #3
 80111c6:	440b      	add	r3, r1
 80111c8:	3338      	adds	r3, #56	; 0x38
 80111ca:	787a      	ldrb	r2, [r7, #1]
 80111cc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80111ce:	78fa      	ldrb	r2, [r7, #3]
 80111d0:	6879      	ldr	r1, [r7, #4]
 80111d2:	4613      	mov	r3, r2
 80111d4:	009b      	lsls	r3, r3, #2
 80111d6:	4413      	add	r3, r2
 80111d8:	00db      	lsls	r3, r3, #3
 80111da:	440b      	add	r3, r1
 80111dc:	3340      	adds	r3, #64	; 0x40
 80111de:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80111e0:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80111e2:	78fa      	ldrb	r2, [r7, #3]
 80111e4:	6879      	ldr	r1, [r7, #4]
 80111e6:	4613      	mov	r3, r2
 80111e8:	009b      	lsls	r3, r3, #2
 80111ea:	4413      	add	r3, r2
 80111ec:	00db      	lsls	r3, r3, #3
 80111ee:	440b      	add	r3, r1
 80111f0:	3339      	adds	r3, #57	; 0x39
 80111f2:	78fa      	ldrb	r2, [r7, #3]
 80111f4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80111f6:	78fa      	ldrb	r2, [r7, #3]
 80111f8:	6879      	ldr	r1, [r7, #4]
 80111fa:	4613      	mov	r3, r2
 80111fc:	009b      	lsls	r3, r3, #2
 80111fe:	4413      	add	r3, r2
 8011200:	00db      	lsls	r3, r3, #3
 8011202:	440b      	add	r3, r1
 8011204:	333f      	adds	r3, #63	; 0x3f
 8011206:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 801120a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 801120c:	78fa      	ldrb	r2, [r7, #3]
 801120e:	78bb      	ldrb	r3, [r7, #2]
 8011210:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011214:	b2d8      	uxtb	r0, r3
 8011216:	6879      	ldr	r1, [r7, #4]
 8011218:	4613      	mov	r3, r2
 801121a:	009b      	lsls	r3, r3, #2
 801121c:	4413      	add	r3, r2
 801121e:	00db      	lsls	r3, r3, #3
 8011220:	440b      	add	r3, r1
 8011222:	333a      	adds	r3, #58	; 0x3a
 8011224:	4602      	mov	r2, r0
 8011226:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8011228:	f997 3002 	ldrsb.w	r3, [r7, #2]
 801122c:	2b00      	cmp	r3, #0
 801122e:	da0a      	bge.n	8011246 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8011230:	78fa      	ldrb	r2, [r7, #3]
 8011232:	6879      	ldr	r1, [r7, #4]
 8011234:	4613      	mov	r3, r2
 8011236:	009b      	lsls	r3, r3, #2
 8011238:	4413      	add	r3, r2
 801123a:	00db      	lsls	r3, r3, #3
 801123c:	440b      	add	r3, r1
 801123e:	333b      	adds	r3, #59	; 0x3b
 8011240:	2201      	movs	r2, #1
 8011242:	701a      	strb	r2, [r3, #0]
 8011244:	e009      	b.n	801125a <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8011246:	78fa      	ldrb	r2, [r7, #3]
 8011248:	6879      	ldr	r1, [r7, #4]
 801124a:	4613      	mov	r3, r2
 801124c:	009b      	lsls	r3, r3, #2
 801124e:	4413      	add	r3, r2
 8011250:	00db      	lsls	r3, r3, #3
 8011252:	440b      	add	r3, r1
 8011254:	333b      	adds	r3, #59	; 0x3b
 8011256:	2200      	movs	r2, #0
 8011258:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 801125a:	78fa      	ldrb	r2, [r7, #3]
 801125c:	6879      	ldr	r1, [r7, #4]
 801125e:	4613      	mov	r3, r2
 8011260:	009b      	lsls	r3, r3, #2
 8011262:	4413      	add	r3, r2
 8011264:	00db      	lsls	r3, r3, #3
 8011266:	440b      	add	r3, r1
 8011268:	333c      	adds	r3, #60	; 0x3c
 801126a:	f897 2020 	ldrb.w	r2, [r7, #32]
 801126e:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	6818      	ldr	r0, [r3, #0]
 8011274:	787c      	ldrb	r4, [r7, #1]
 8011276:	78ba      	ldrb	r2, [r7, #2]
 8011278:	78f9      	ldrb	r1, [r7, #3]
 801127a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801127c:	9302      	str	r3, [sp, #8]
 801127e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011282:	9301      	str	r3, [sp, #4]
 8011284:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011288:	9300      	str	r3, [sp, #0]
 801128a:	4623      	mov	r3, r4
 801128c:	f004 f9d2 	bl	8015634 <USB_HC_Init>
 8011290:	4603      	mov	r3, r0
 8011292:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	2200      	movs	r2, #0
 8011298:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 801129c:	7bfb      	ldrb	r3, [r7, #15]
}
 801129e:	4618      	mov	r0, r3
 80112a0:	3714      	adds	r7, #20
 80112a2:	46bd      	mov	sp, r7
 80112a4:	bd90      	pop	{r4, r7, pc}

080112a6 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80112a6:	b580      	push	{r7, lr}
 80112a8:	b084      	sub	sp, #16
 80112aa:	af00      	add	r7, sp, #0
 80112ac:	6078      	str	r0, [r7, #4]
 80112ae:	460b      	mov	r3, r1
 80112b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80112b2:	2300      	movs	r3, #0
 80112b4:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80112bc:	2b01      	cmp	r3, #1
 80112be:	d101      	bne.n	80112c4 <HAL_HCD_HC_Halt+0x1e>
 80112c0:	2302      	movs	r3, #2
 80112c2:	e00f      	b.n	80112e4 <HAL_HCD_HC_Halt+0x3e>
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	2201      	movs	r2, #1
 80112c8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	681b      	ldr	r3, [r3, #0]
 80112d0:	78fa      	ldrb	r2, [r7, #3]
 80112d2:	4611      	mov	r1, r2
 80112d4:	4618      	mov	r0, r3
 80112d6:	f004 fc0e 	bl	8015af6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	2200      	movs	r2, #0
 80112de:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80112e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80112e4:	4618      	mov	r0, r3
 80112e6:	3710      	adds	r7, #16
 80112e8:	46bd      	mov	sp, r7
 80112ea:	bd80      	pop	{r7, pc}

080112ec <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80112ec:	b580      	push	{r7, lr}
 80112ee:	b082      	sub	sp, #8
 80112f0:	af00      	add	r7, sp, #0
 80112f2:	6078      	str	r0, [r7, #4]
 80112f4:	4608      	mov	r0, r1
 80112f6:	4611      	mov	r1, r2
 80112f8:	461a      	mov	r2, r3
 80112fa:	4603      	mov	r3, r0
 80112fc:	70fb      	strb	r3, [r7, #3]
 80112fe:	460b      	mov	r3, r1
 8011300:	70bb      	strb	r3, [r7, #2]
 8011302:	4613      	mov	r3, r2
 8011304:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8011306:	78fa      	ldrb	r2, [r7, #3]
 8011308:	6879      	ldr	r1, [r7, #4]
 801130a:	4613      	mov	r3, r2
 801130c:	009b      	lsls	r3, r3, #2
 801130e:	4413      	add	r3, r2
 8011310:	00db      	lsls	r3, r3, #3
 8011312:	440b      	add	r3, r1
 8011314:	333b      	adds	r3, #59	; 0x3b
 8011316:	78ba      	ldrb	r2, [r7, #2]
 8011318:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 801131a:	78fa      	ldrb	r2, [r7, #3]
 801131c:	6879      	ldr	r1, [r7, #4]
 801131e:	4613      	mov	r3, r2
 8011320:	009b      	lsls	r3, r3, #2
 8011322:	4413      	add	r3, r2
 8011324:	00db      	lsls	r3, r3, #3
 8011326:	440b      	add	r3, r1
 8011328:	333f      	adds	r3, #63	; 0x3f
 801132a:	787a      	ldrb	r2, [r7, #1]
 801132c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 801132e:	7c3b      	ldrb	r3, [r7, #16]
 8011330:	2b00      	cmp	r3, #0
 8011332:	d114      	bne.n	801135e <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8011334:	78fa      	ldrb	r2, [r7, #3]
 8011336:	6879      	ldr	r1, [r7, #4]
 8011338:	4613      	mov	r3, r2
 801133a:	009b      	lsls	r3, r3, #2
 801133c:	4413      	add	r3, r2
 801133e:	00db      	lsls	r3, r3, #3
 8011340:	440b      	add	r3, r1
 8011342:	3342      	adds	r3, #66	; 0x42
 8011344:	2203      	movs	r2, #3
 8011346:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8011348:	78fa      	ldrb	r2, [r7, #3]
 801134a:	6879      	ldr	r1, [r7, #4]
 801134c:	4613      	mov	r3, r2
 801134e:	009b      	lsls	r3, r3, #2
 8011350:	4413      	add	r3, r2
 8011352:	00db      	lsls	r3, r3, #3
 8011354:	440b      	add	r3, r1
 8011356:	333d      	adds	r3, #61	; 0x3d
 8011358:	7f3a      	ldrb	r2, [r7, #28]
 801135a:	701a      	strb	r2, [r3, #0]
 801135c:	e009      	b.n	8011372 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 801135e:	78fa      	ldrb	r2, [r7, #3]
 8011360:	6879      	ldr	r1, [r7, #4]
 8011362:	4613      	mov	r3, r2
 8011364:	009b      	lsls	r3, r3, #2
 8011366:	4413      	add	r3, r2
 8011368:	00db      	lsls	r3, r3, #3
 801136a:	440b      	add	r3, r1
 801136c:	3342      	adds	r3, #66	; 0x42
 801136e:	2202      	movs	r2, #2
 8011370:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8011372:	787b      	ldrb	r3, [r7, #1]
 8011374:	2b03      	cmp	r3, #3
 8011376:	f200 80d6 	bhi.w	8011526 <HAL_HCD_HC_SubmitRequest+0x23a>
 801137a:	a201      	add	r2, pc, #4	; (adr r2, 8011380 <HAL_HCD_HC_SubmitRequest+0x94>)
 801137c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011380:	08011391 	.word	0x08011391
 8011384:	08011511 	.word	0x08011511
 8011388:	080113fd 	.word	0x080113fd
 801138c:	08011487 	.word	0x08011487
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8011390:	7c3b      	ldrb	r3, [r7, #16]
 8011392:	2b01      	cmp	r3, #1
 8011394:	f040 80c9 	bne.w	801152a <HAL_HCD_HC_SubmitRequest+0x23e>
 8011398:	78bb      	ldrb	r3, [r7, #2]
 801139a:	2b00      	cmp	r3, #0
 801139c:	f040 80c5 	bne.w	801152a <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 80113a0:	8b3b      	ldrh	r3, [r7, #24]
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	d109      	bne.n	80113ba <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80113a6:	78fa      	ldrb	r2, [r7, #3]
 80113a8:	6879      	ldr	r1, [r7, #4]
 80113aa:	4613      	mov	r3, r2
 80113ac:	009b      	lsls	r3, r3, #2
 80113ae:	4413      	add	r3, r2
 80113b0:	00db      	lsls	r3, r3, #3
 80113b2:	440b      	add	r3, r1
 80113b4:	3351      	adds	r3, #81	; 0x51
 80113b6:	2201      	movs	r2, #1
 80113b8:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80113ba:	78fa      	ldrb	r2, [r7, #3]
 80113bc:	6879      	ldr	r1, [r7, #4]
 80113be:	4613      	mov	r3, r2
 80113c0:	009b      	lsls	r3, r3, #2
 80113c2:	4413      	add	r3, r2
 80113c4:	00db      	lsls	r3, r3, #3
 80113c6:	440b      	add	r3, r1
 80113c8:	3351      	adds	r3, #81	; 0x51
 80113ca:	781b      	ldrb	r3, [r3, #0]
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	d10a      	bne.n	80113e6 <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80113d0:	78fa      	ldrb	r2, [r7, #3]
 80113d2:	6879      	ldr	r1, [r7, #4]
 80113d4:	4613      	mov	r3, r2
 80113d6:	009b      	lsls	r3, r3, #2
 80113d8:	4413      	add	r3, r2
 80113da:	00db      	lsls	r3, r3, #3
 80113dc:	440b      	add	r3, r1
 80113de:	3342      	adds	r3, #66	; 0x42
 80113e0:	2200      	movs	r2, #0
 80113e2:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80113e4:	e0a1      	b.n	801152a <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80113e6:	78fa      	ldrb	r2, [r7, #3]
 80113e8:	6879      	ldr	r1, [r7, #4]
 80113ea:	4613      	mov	r3, r2
 80113ec:	009b      	lsls	r3, r3, #2
 80113ee:	4413      	add	r3, r2
 80113f0:	00db      	lsls	r3, r3, #3
 80113f2:	440b      	add	r3, r1
 80113f4:	3342      	adds	r3, #66	; 0x42
 80113f6:	2202      	movs	r2, #2
 80113f8:	701a      	strb	r2, [r3, #0]
      break;
 80113fa:	e096      	b.n	801152a <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80113fc:	78bb      	ldrb	r3, [r7, #2]
 80113fe:	2b00      	cmp	r3, #0
 8011400:	d120      	bne.n	8011444 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8011402:	78fa      	ldrb	r2, [r7, #3]
 8011404:	6879      	ldr	r1, [r7, #4]
 8011406:	4613      	mov	r3, r2
 8011408:	009b      	lsls	r3, r3, #2
 801140a:	4413      	add	r3, r2
 801140c:	00db      	lsls	r3, r3, #3
 801140e:	440b      	add	r3, r1
 8011410:	3351      	adds	r3, #81	; 0x51
 8011412:	781b      	ldrb	r3, [r3, #0]
 8011414:	2b00      	cmp	r3, #0
 8011416:	d10a      	bne.n	801142e <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8011418:	78fa      	ldrb	r2, [r7, #3]
 801141a:	6879      	ldr	r1, [r7, #4]
 801141c:	4613      	mov	r3, r2
 801141e:	009b      	lsls	r3, r3, #2
 8011420:	4413      	add	r3, r2
 8011422:	00db      	lsls	r3, r3, #3
 8011424:	440b      	add	r3, r1
 8011426:	3342      	adds	r3, #66	; 0x42
 8011428:	2200      	movs	r2, #0
 801142a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 801142c:	e07e      	b.n	801152c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 801142e:	78fa      	ldrb	r2, [r7, #3]
 8011430:	6879      	ldr	r1, [r7, #4]
 8011432:	4613      	mov	r3, r2
 8011434:	009b      	lsls	r3, r3, #2
 8011436:	4413      	add	r3, r2
 8011438:	00db      	lsls	r3, r3, #3
 801143a:	440b      	add	r3, r1
 801143c:	3342      	adds	r3, #66	; 0x42
 801143e:	2202      	movs	r2, #2
 8011440:	701a      	strb	r2, [r3, #0]
      break;
 8011442:	e073      	b.n	801152c <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8011444:	78fa      	ldrb	r2, [r7, #3]
 8011446:	6879      	ldr	r1, [r7, #4]
 8011448:	4613      	mov	r3, r2
 801144a:	009b      	lsls	r3, r3, #2
 801144c:	4413      	add	r3, r2
 801144e:	00db      	lsls	r3, r3, #3
 8011450:	440b      	add	r3, r1
 8011452:	3350      	adds	r3, #80	; 0x50
 8011454:	781b      	ldrb	r3, [r3, #0]
 8011456:	2b00      	cmp	r3, #0
 8011458:	d10a      	bne.n	8011470 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 801145a:	78fa      	ldrb	r2, [r7, #3]
 801145c:	6879      	ldr	r1, [r7, #4]
 801145e:	4613      	mov	r3, r2
 8011460:	009b      	lsls	r3, r3, #2
 8011462:	4413      	add	r3, r2
 8011464:	00db      	lsls	r3, r3, #3
 8011466:	440b      	add	r3, r1
 8011468:	3342      	adds	r3, #66	; 0x42
 801146a:	2200      	movs	r2, #0
 801146c:	701a      	strb	r2, [r3, #0]
      break;
 801146e:	e05d      	b.n	801152c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8011470:	78fa      	ldrb	r2, [r7, #3]
 8011472:	6879      	ldr	r1, [r7, #4]
 8011474:	4613      	mov	r3, r2
 8011476:	009b      	lsls	r3, r3, #2
 8011478:	4413      	add	r3, r2
 801147a:	00db      	lsls	r3, r3, #3
 801147c:	440b      	add	r3, r1
 801147e:	3342      	adds	r3, #66	; 0x42
 8011480:	2202      	movs	r2, #2
 8011482:	701a      	strb	r2, [r3, #0]
      break;
 8011484:	e052      	b.n	801152c <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8011486:	78bb      	ldrb	r3, [r7, #2]
 8011488:	2b00      	cmp	r3, #0
 801148a:	d120      	bne.n	80114ce <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 801148c:	78fa      	ldrb	r2, [r7, #3]
 801148e:	6879      	ldr	r1, [r7, #4]
 8011490:	4613      	mov	r3, r2
 8011492:	009b      	lsls	r3, r3, #2
 8011494:	4413      	add	r3, r2
 8011496:	00db      	lsls	r3, r3, #3
 8011498:	440b      	add	r3, r1
 801149a:	3351      	adds	r3, #81	; 0x51
 801149c:	781b      	ldrb	r3, [r3, #0]
 801149e:	2b00      	cmp	r3, #0
 80114a0:	d10a      	bne.n	80114b8 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80114a2:	78fa      	ldrb	r2, [r7, #3]
 80114a4:	6879      	ldr	r1, [r7, #4]
 80114a6:	4613      	mov	r3, r2
 80114a8:	009b      	lsls	r3, r3, #2
 80114aa:	4413      	add	r3, r2
 80114ac:	00db      	lsls	r3, r3, #3
 80114ae:	440b      	add	r3, r1
 80114b0:	3342      	adds	r3, #66	; 0x42
 80114b2:	2200      	movs	r2, #0
 80114b4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80114b6:	e039      	b.n	801152c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80114b8:	78fa      	ldrb	r2, [r7, #3]
 80114ba:	6879      	ldr	r1, [r7, #4]
 80114bc:	4613      	mov	r3, r2
 80114be:	009b      	lsls	r3, r3, #2
 80114c0:	4413      	add	r3, r2
 80114c2:	00db      	lsls	r3, r3, #3
 80114c4:	440b      	add	r3, r1
 80114c6:	3342      	adds	r3, #66	; 0x42
 80114c8:	2202      	movs	r2, #2
 80114ca:	701a      	strb	r2, [r3, #0]
      break;
 80114cc:	e02e      	b.n	801152c <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80114ce:	78fa      	ldrb	r2, [r7, #3]
 80114d0:	6879      	ldr	r1, [r7, #4]
 80114d2:	4613      	mov	r3, r2
 80114d4:	009b      	lsls	r3, r3, #2
 80114d6:	4413      	add	r3, r2
 80114d8:	00db      	lsls	r3, r3, #3
 80114da:	440b      	add	r3, r1
 80114dc:	3350      	adds	r3, #80	; 0x50
 80114de:	781b      	ldrb	r3, [r3, #0]
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	d10a      	bne.n	80114fa <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80114e4:	78fa      	ldrb	r2, [r7, #3]
 80114e6:	6879      	ldr	r1, [r7, #4]
 80114e8:	4613      	mov	r3, r2
 80114ea:	009b      	lsls	r3, r3, #2
 80114ec:	4413      	add	r3, r2
 80114ee:	00db      	lsls	r3, r3, #3
 80114f0:	440b      	add	r3, r1
 80114f2:	3342      	adds	r3, #66	; 0x42
 80114f4:	2200      	movs	r2, #0
 80114f6:	701a      	strb	r2, [r3, #0]
      break;
 80114f8:	e018      	b.n	801152c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80114fa:	78fa      	ldrb	r2, [r7, #3]
 80114fc:	6879      	ldr	r1, [r7, #4]
 80114fe:	4613      	mov	r3, r2
 8011500:	009b      	lsls	r3, r3, #2
 8011502:	4413      	add	r3, r2
 8011504:	00db      	lsls	r3, r3, #3
 8011506:	440b      	add	r3, r1
 8011508:	3342      	adds	r3, #66	; 0x42
 801150a:	2202      	movs	r2, #2
 801150c:	701a      	strb	r2, [r3, #0]
      break;
 801150e:	e00d      	b.n	801152c <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8011510:	78fa      	ldrb	r2, [r7, #3]
 8011512:	6879      	ldr	r1, [r7, #4]
 8011514:	4613      	mov	r3, r2
 8011516:	009b      	lsls	r3, r3, #2
 8011518:	4413      	add	r3, r2
 801151a:	00db      	lsls	r3, r3, #3
 801151c:	440b      	add	r3, r1
 801151e:	3342      	adds	r3, #66	; 0x42
 8011520:	2200      	movs	r2, #0
 8011522:	701a      	strb	r2, [r3, #0]
      break;
 8011524:	e002      	b.n	801152c <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8011526:	bf00      	nop
 8011528:	e000      	b.n	801152c <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 801152a:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 801152c:	78fa      	ldrb	r2, [r7, #3]
 801152e:	6879      	ldr	r1, [r7, #4]
 8011530:	4613      	mov	r3, r2
 8011532:	009b      	lsls	r3, r3, #2
 8011534:	4413      	add	r3, r2
 8011536:	00db      	lsls	r3, r3, #3
 8011538:	440b      	add	r3, r1
 801153a:	3344      	adds	r3, #68	; 0x44
 801153c:	697a      	ldr	r2, [r7, #20]
 801153e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8011540:	78fa      	ldrb	r2, [r7, #3]
 8011542:	8b39      	ldrh	r1, [r7, #24]
 8011544:	6878      	ldr	r0, [r7, #4]
 8011546:	4613      	mov	r3, r2
 8011548:	009b      	lsls	r3, r3, #2
 801154a:	4413      	add	r3, r2
 801154c:	00db      	lsls	r3, r3, #3
 801154e:	4403      	add	r3, r0
 8011550:	3348      	adds	r3, #72	; 0x48
 8011552:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8011554:	78fa      	ldrb	r2, [r7, #3]
 8011556:	6879      	ldr	r1, [r7, #4]
 8011558:	4613      	mov	r3, r2
 801155a:	009b      	lsls	r3, r3, #2
 801155c:	4413      	add	r3, r2
 801155e:	00db      	lsls	r3, r3, #3
 8011560:	440b      	add	r3, r1
 8011562:	335c      	adds	r3, #92	; 0x5c
 8011564:	2200      	movs	r2, #0
 8011566:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8011568:	78fa      	ldrb	r2, [r7, #3]
 801156a:	6879      	ldr	r1, [r7, #4]
 801156c:	4613      	mov	r3, r2
 801156e:	009b      	lsls	r3, r3, #2
 8011570:	4413      	add	r3, r2
 8011572:	00db      	lsls	r3, r3, #3
 8011574:	440b      	add	r3, r1
 8011576:	334c      	adds	r3, #76	; 0x4c
 8011578:	2200      	movs	r2, #0
 801157a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 801157c:	78fa      	ldrb	r2, [r7, #3]
 801157e:	6879      	ldr	r1, [r7, #4]
 8011580:	4613      	mov	r3, r2
 8011582:	009b      	lsls	r3, r3, #2
 8011584:	4413      	add	r3, r2
 8011586:	00db      	lsls	r3, r3, #3
 8011588:	440b      	add	r3, r1
 801158a:	3339      	adds	r3, #57	; 0x39
 801158c:	78fa      	ldrb	r2, [r7, #3]
 801158e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8011590:	78fa      	ldrb	r2, [r7, #3]
 8011592:	6879      	ldr	r1, [r7, #4]
 8011594:	4613      	mov	r3, r2
 8011596:	009b      	lsls	r3, r3, #2
 8011598:	4413      	add	r3, r2
 801159a:	00db      	lsls	r3, r3, #3
 801159c:	440b      	add	r3, r1
 801159e:	335d      	adds	r3, #93	; 0x5d
 80115a0:	2200      	movs	r2, #0
 80115a2:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	6818      	ldr	r0, [r3, #0]
 80115a8:	78fa      	ldrb	r2, [r7, #3]
 80115aa:	4613      	mov	r3, r2
 80115ac:	009b      	lsls	r3, r3, #2
 80115ae:	4413      	add	r3, r2
 80115b0:	00db      	lsls	r3, r3, #3
 80115b2:	3338      	adds	r3, #56	; 0x38
 80115b4:	687a      	ldr	r2, [r7, #4]
 80115b6:	18d1      	adds	r1, r2, r3
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	691b      	ldr	r3, [r3, #16]
 80115bc:	b2db      	uxtb	r3, r3
 80115be:	461a      	mov	r2, r3
 80115c0:	f004 f942 	bl	8015848 <USB_HC_StartXfer>
 80115c4:	4603      	mov	r3, r0
}
 80115c6:	4618      	mov	r0, r3
 80115c8:	3708      	adds	r7, #8
 80115ca:	46bd      	mov	sp, r7
 80115cc:	bd80      	pop	{r7, pc}
 80115ce:	bf00      	nop

080115d0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80115d0:	b580      	push	{r7, lr}
 80115d2:	b086      	sub	sp, #24
 80115d4:	af00      	add	r7, sp, #0
 80115d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	681b      	ldr	r3, [r3, #0]
 80115dc:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80115de:	693b      	ldr	r3, [r7, #16]
 80115e0:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	681b      	ldr	r3, [r3, #0]
 80115e6:	4618      	mov	r0, r3
 80115e8:	f003 fea1 	bl	801532e <USB_GetMode>
 80115ec:	4603      	mov	r3, r0
 80115ee:	2b01      	cmp	r3, #1
 80115f0:	f040 80ef 	bne.w	80117d2 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	681b      	ldr	r3, [r3, #0]
 80115f8:	4618      	mov	r0, r3
 80115fa:	f003 fe85 	bl	8015308 <USB_ReadInterrupts>
 80115fe:	4603      	mov	r3, r0
 8011600:	2b00      	cmp	r3, #0
 8011602:	f000 80e5 	beq.w	80117d0 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	681b      	ldr	r3, [r3, #0]
 801160a:	4618      	mov	r0, r3
 801160c:	f003 fe7c 	bl	8015308 <USB_ReadInterrupts>
 8011610:	4603      	mov	r3, r0
 8011612:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8011616:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801161a:	d104      	bne.n	8011626 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	681b      	ldr	r3, [r3, #0]
 8011620:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8011624:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	681b      	ldr	r3, [r3, #0]
 801162a:	4618      	mov	r0, r3
 801162c:	f003 fe6c 	bl	8015308 <USB_ReadInterrupts>
 8011630:	4603      	mov	r3, r0
 8011632:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8011636:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801163a:	d104      	bne.n	8011646 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	681b      	ldr	r3, [r3, #0]
 8011640:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8011644:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	681b      	ldr	r3, [r3, #0]
 801164a:	4618      	mov	r0, r3
 801164c:	f003 fe5c 	bl	8015308 <USB_ReadInterrupts>
 8011650:	4603      	mov	r3, r0
 8011652:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8011656:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801165a:	d104      	bne.n	8011666 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	681b      	ldr	r3, [r3, #0]
 8011660:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8011664:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	681b      	ldr	r3, [r3, #0]
 801166a:	4618      	mov	r0, r3
 801166c:	f003 fe4c 	bl	8015308 <USB_ReadInterrupts>
 8011670:	4603      	mov	r3, r0
 8011672:	f003 0302 	and.w	r3, r3, #2
 8011676:	2b02      	cmp	r3, #2
 8011678:	d103      	bne.n	8011682 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	681b      	ldr	r3, [r3, #0]
 801167e:	2202      	movs	r2, #2
 8011680:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	681b      	ldr	r3, [r3, #0]
 8011686:	4618      	mov	r0, r3
 8011688:	f003 fe3e 	bl	8015308 <USB_ReadInterrupts>
 801168c:	4603      	mov	r3, r0
 801168e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011692:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011696:	d115      	bne.n	80116c4 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	681b      	ldr	r3, [r3, #0]
 801169c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80116a0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80116a2:	68fb      	ldr	r3, [r7, #12]
 80116a4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80116a8:	681b      	ldr	r3, [r3, #0]
 80116aa:	f003 0301 	and.w	r3, r3, #1
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	d108      	bne.n	80116c4 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80116b2:	6878      	ldr	r0, [r7, #4]
 80116b4:	f005 fd14 	bl	80170e0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	681b      	ldr	r3, [r3, #0]
 80116bc:	2101      	movs	r1, #1
 80116be:	4618      	mov	r0, r3
 80116c0:	f003 ff34 	bl	801552c <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	681b      	ldr	r3, [r3, #0]
 80116c8:	4618      	mov	r0, r3
 80116ca:	f003 fe1d 	bl	8015308 <USB_ReadInterrupts>
 80116ce:	4603      	mov	r3, r0
 80116d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80116d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80116d8:	d102      	bne.n	80116e0 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 80116da:	6878      	ldr	r0, [r7, #4]
 80116dc:	f001 f94a 	bl	8012974 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	681b      	ldr	r3, [r3, #0]
 80116e4:	4618      	mov	r0, r3
 80116e6:	f003 fe0f 	bl	8015308 <USB_ReadInterrupts>
 80116ea:	4603      	mov	r3, r0
 80116ec:	f003 0308 	and.w	r3, r3, #8
 80116f0:	2b08      	cmp	r3, #8
 80116f2:	d106      	bne.n	8011702 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80116f4:	6878      	ldr	r0, [r7, #4]
 80116f6:	f005 fcd7 	bl	80170a8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	681b      	ldr	r3, [r3, #0]
 80116fe:	2208      	movs	r2, #8
 8011700:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	681b      	ldr	r3, [r3, #0]
 8011706:	4618      	mov	r0, r3
 8011708:	f003 fdfe 	bl	8015308 <USB_ReadInterrupts>
 801170c:	4603      	mov	r3, r0
 801170e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011712:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8011716:	d138      	bne.n	801178a <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	681b      	ldr	r3, [r3, #0]
 801171c:	4618      	mov	r0, r3
 801171e:	f004 f9d9 	bl	8015ad4 <USB_HC_ReadInterrupt>
 8011722:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8011724:	2300      	movs	r3, #0
 8011726:	617b      	str	r3, [r7, #20]
 8011728:	e025      	b.n	8011776 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 801172a:	697b      	ldr	r3, [r7, #20]
 801172c:	f003 030f 	and.w	r3, r3, #15
 8011730:	68ba      	ldr	r2, [r7, #8]
 8011732:	fa22 f303 	lsr.w	r3, r2, r3
 8011736:	f003 0301 	and.w	r3, r3, #1
 801173a:	2b00      	cmp	r3, #0
 801173c:	d018      	beq.n	8011770 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 801173e:	697b      	ldr	r3, [r7, #20]
 8011740:	015a      	lsls	r2, r3, #5
 8011742:	68fb      	ldr	r3, [r7, #12]
 8011744:	4413      	add	r3, r2
 8011746:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801174a:	681b      	ldr	r3, [r3, #0]
 801174c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011750:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011754:	d106      	bne.n	8011764 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8011756:	697b      	ldr	r3, [r7, #20]
 8011758:	b2db      	uxtb	r3, r3
 801175a:	4619      	mov	r1, r3
 801175c:	6878      	ldr	r0, [r7, #4]
 801175e:	f000 f8b3 	bl	80118c8 <HCD_HC_IN_IRQHandler>
 8011762:	e005      	b.n	8011770 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8011764:	697b      	ldr	r3, [r7, #20]
 8011766:	b2db      	uxtb	r3, r3
 8011768:	4619      	mov	r1, r3
 801176a:	6878      	ldr	r0, [r7, #4]
 801176c:	f000 fce1 	bl	8012132 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8011770:	697b      	ldr	r3, [r7, #20]
 8011772:	3301      	adds	r3, #1
 8011774:	617b      	str	r3, [r7, #20]
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	689b      	ldr	r3, [r3, #8]
 801177a:	697a      	ldr	r2, [r7, #20]
 801177c:	429a      	cmp	r2, r3
 801177e:	d3d4      	bcc.n	801172a <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	681b      	ldr	r3, [r3, #0]
 8011784:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8011788:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	681b      	ldr	r3, [r3, #0]
 801178e:	4618      	mov	r0, r3
 8011790:	f003 fdba 	bl	8015308 <USB_ReadInterrupts>
 8011794:	4603      	mov	r3, r0
 8011796:	f003 0310 	and.w	r3, r3, #16
 801179a:	2b10      	cmp	r3, #16
 801179c:	d101      	bne.n	80117a2 <HAL_HCD_IRQHandler+0x1d2>
 801179e:	2301      	movs	r3, #1
 80117a0:	e000      	b.n	80117a4 <HAL_HCD_IRQHandler+0x1d4>
 80117a2:	2300      	movs	r3, #0
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	d014      	beq.n	80117d2 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	681b      	ldr	r3, [r3, #0]
 80117ac:	699a      	ldr	r2, [r3, #24]
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	681b      	ldr	r3, [r3, #0]
 80117b2:	f022 0210 	bic.w	r2, r2, #16
 80117b6:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80117b8:	6878      	ldr	r0, [r7, #4]
 80117ba:	f001 f82f 	bl	801281c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	681b      	ldr	r3, [r3, #0]
 80117c2:	699a      	ldr	r2, [r3, #24]
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	681b      	ldr	r3, [r3, #0]
 80117c8:	f042 0210 	orr.w	r2, r2, #16
 80117cc:	619a      	str	r2, [r3, #24]
 80117ce:	e000      	b.n	80117d2 <HAL_HCD_IRQHandler+0x202>
      return;
 80117d0:	bf00      	nop
    }
  }
}
 80117d2:	3718      	adds	r7, #24
 80117d4:	46bd      	mov	sp, r7
 80117d6:	bd80      	pop	{r7, pc}

080117d8 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80117d8:	b580      	push	{r7, lr}
 80117da:	b082      	sub	sp, #8
 80117dc:	af00      	add	r7, sp, #0
 80117de:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80117e6:	2b01      	cmp	r3, #1
 80117e8:	d101      	bne.n	80117ee <HAL_HCD_Start+0x16>
 80117ea:	2302      	movs	r3, #2
 80117ec:	e013      	b.n	8011816 <HAL_HCD_Start+0x3e>
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	2201      	movs	r2, #1
 80117f2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	681b      	ldr	r3, [r3, #0]
 80117fa:	4618      	mov	r0, r3
 80117fc:	f003 fc91 	bl	8015122 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	681b      	ldr	r3, [r3, #0]
 8011804:	2101      	movs	r1, #1
 8011806:	4618      	mov	r0, r3
 8011808:	f003 feca 	bl	80155a0 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	2200      	movs	r2, #0
 8011810:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8011814:	2300      	movs	r3, #0
}
 8011816:	4618      	mov	r0, r3
 8011818:	3708      	adds	r7, #8
 801181a:	46bd      	mov	sp, r7
 801181c:	bd80      	pop	{r7, pc}

0801181e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 801181e:	b580      	push	{r7, lr}
 8011820:	b082      	sub	sp, #8
 8011822:	af00      	add	r7, sp, #0
 8011824:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 801182c:	2b01      	cmp	r3, #1
 801182e:	d101      	bne.n	8011834 <HAL_HCD_Stop+0x16>
 8011830:	2302      	movs	r3, #2
 8011832:	e00d      	b.n	8011850 <HAL_HCD_Stop+0x32>
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	2201      	movs	r2, #1
 8011838:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	681b      	ldr	r3, [r3, #0]
 8011840:	4618      	mov	r0, r3
 8011842:	f004 fa93 	bl	8015d6c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	2200      	movs	r2, #0
 801184a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 801184e:	2300      	movs	r3, #0
}
 8011850:	4618      	mov	r0, r3
 8011852:	3708      	adds	r7, #8
 8011854:	46bd      	mov	sp, r7
 8011856:	bd80      	pop	{r7, pc}

08011858 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8011858:	b480      	push	{r7}
 801185a:	b083      	sub	sp, #12
 801185c:	af00      	add	r7, sp, #0
 801185e:	6078      	str	r0, [r7, #4]
 8011860:	460b      	mov	r3, r1
 8011862:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8011864:	78fa      	ldrb	r2, [r7, #3]
 8011866:	6879      	ldr	r1, [r7, #4]
 8011868:	4613      	mov	r3, r2
 801186a:	009b      	lsls	r3, r3, #2
 801186c:	4413      	add	r3, r2
 801186e:	00db      	lsls	r3, r3, #3
 8011870:	440b      	add	r3, r1
 8011872:	335c      	adds	r3, #92	; 0x5c
 8011874:	781b      	ldrb	r3, [r3, #0]
}
 8011876:	4618      	mov	r0, r3
 8011878:	370c      	adds	r7, #12
 801187a:	46bd      	mov	sp, r7
 801187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011880:	4770      	bx	lr

08011882 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8011882:	b480      	push	{r7}
 8011884:	b083      	sub	sp, #12
 8011886:	af00      	add	r7, sp, #0
 8011888:	6078      	str	r0, [r7, #4]
 801188a:	460b      	mov	r3, r1
 801188c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 801188e:	78fa      	ldrb	r2, [r7, #3]
 8011890:	6879      	ldr	r1, [r7, #4]
 8011892:	4613      	mov	r3, r2
 8011894:	009b      	lsls	r3, r3, #2
 8011896:	4413      	add	r3, r2
 8011898:	00db      	lsls	r3, r3, #3
 801189a:	440b      	add	r3, r1
 801189c:	334c      	adds	r3, #76	; 0x4c
 801189e:	681b      	ldr	r3, [r3, #0]
}
 80118a0:	4618      	mov	r0, r3
 80118a2:	370c      	adds	r7, #12
 80118a4:	46bd      	mov	sp, r7
 80118a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118aa:	4770      	bx	lr

080118ac <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80118ac:	b580      	push	{r7, lr}
 80118ae:	b082      	sub	sp, #8
 80118b0:	af00      	add	r7, sp, #0
 80118b2:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	681b      	ldr	r3, [r3, #0]
 80118b8:	4618      	mov	r0, r3
 80118ba:	f003 feaa 	bl	8015612 <USB_GetCurrentFrame>
 80118be:	4603      	mov	r3, r0
}
 80118c0:	4618      	mov	r0, r3
 80118c2:	3708      	adds	r7, #8
 80118c4:	46bd      	mov	sp, r7
 80118c6:	bd80      	pop	{r7, pc}

080118c8 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80118c8:	b580      	push	{r7, lr}
 80118ca:	b086      	sub	sp, #24
 80118cc:	af00      	add	r7, sp, #0
 80118ce:	6078      	str	r0, [r7, #4]
 80118d0:	460b      	mov	r3, r1
 80118d2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	681b      	ldr	r3, [r3, #0]
 80118d8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80118da:	697b      	ldr	r3, [r7, #20]
 80118dc:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80118de:	78fb      	ldrb	r3, [r7, #3]
 80118e0:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80118e2:	68fb      	ldr	r3, [r7, #12]
 80118e4:	015a      	lsls	r2, r3, #5
 80118e6:	693b      	ldr	r3, [r7, #16]
 80118e8:	4413      	add	r3, r2
 80118ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80118ee:	689b      	ldr	r3, [r3, #8]
 80118f0:	f003 0304 	and.w	r3, r3, #4
 80118f4:	2b04      	cmp	r3, #4
 80118f6:	d119      	bne.n	801192c <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80118f8:	68fb      	ldr	r3, [r7, #12]
 80118fa:	015a      	lsls	r2, r3, #5
 80118fc:	693b      	ldr	r3, [r7, #16]
 80118fe:	4413      	add	r3, r2
 8011900:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011904:	461a      	mov	r2, r3
 8011906:	2304      	movs	r3, #4
 8011908:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 801190a:	68fb      	ldr	r3, [r7, #12]
 801190c:	015a      	lsls	r2, r3, #5
 801190e:	693b      	ldr	r3, [r7, #16]
 8011910:	4413      	add	r3, r2
 8011912:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011916:	68db      	ldr	r3, [r3, #12]
 8011918:	68fa      	ldr	r2, [r7, #12]
 801191a:	0151      	lsls	r1, r2, #5
 801191c:	693a      	ldr	r2, [r7, #16]
 801191e:	440a      	add	r2, r1
 8011920:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8011924:	f043 0302 	orr.w	r3, r3, #2
 8011928:	60d3      	str	r3, [r2, #12]
 801192a:	e0ce      	b.n	8011aca <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 801192c:	68fb      	ldr	r3, [r7, #12]
 801192e:	015a      	lsls	r2, r3, #5
 8011930:	693b      	ldr	r3, [r7, #16]
 8011932:	4413      	add	r3, r2
 8011934:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011938:	689b      	ldr	r3, [r3, #8]
 801193a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801193e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011942:	d12c      	bne.n	801199e <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8011944:	68fb      	ldr	r3, [r7, #12]
 8011946:	015a      	lsls	r2, r3, #5
 8011948:	693b      	ldr	r3, [r7, #16]
 801194a:	4413      	add	r3, r2
 801194c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011950:	461a      	mov	r2, r3
 8011952:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011956:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8011958:	6879      	ldr	r1, [r7, #4]
 801195a:	68fa      	ldr	r2, [r7, #12]
 801195c:	4613      	mov	r3, r2
 801195e:	009b      	lsls	r3, r3, #2
 8011960:	4413      	add	r3, r2
 8011962:	00db      	lsls	r3, r3, #3
 8011964:	440b      	add	r3, r1
 8011966:	335d      	adds	r3, #93	; 0x5d
 8011968:	2207      	movs	r2, #7
 801196a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 801196c:	68fb      	ldr	r3, [r7, #12]
 801196e:	015a      	lsls	r2, r3, #5
 8011970:	693b      	ldr	r3, [r7, #16]
 8011972:	4413      	add	r3, r2
 8011974:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011978:	68db      	ldr	r3, [r3, #12]
 801197a:	68fa      	ldr	r2, [r7, #12]
 801197c:	0151      	lsls	r1, r2, #5
 801197e:	693a      	ldr	r2, [r7, #16]
 8011980:	440a      	add	r2, r1
 8011982:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8011986:	f043 0302 	orr.w	r3, r3, #2
 801198a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	681b      	ldr	r3, [r3, #0]
 8011990:	68fa      	ldr	r2, [r7, #12]
 8011992:	b2d2      	uxtb	r2, r2
 8011994:	4611      	mov	r1, r2
 8011996:	4618      	mov	r0, r3
 8011998:	f004 f8ad 	bl	8015af6 <USB_HC_Halt>
 801199c:	e095      	b.n	8011aca <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 801199e:	68fb      	ldr	r3, [r7, #12]
 80119a0:	015a      	lsls	r2, r3, #5
 80119a2:	693b      	ldr	r3, [r7, #16]
 80119a4:	4413      	add	r3, r2
 80119a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80119aa:	689b      	ldr	r3, [r3, #8]
 80119ac:	f003 0320 	and.w	r3, r3, #32
 80119b0:	2b20      	cmp	r3, #32
 80119b2:	d109      	bne.n	80119c8 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80119b4:	68fb      	ldr	r3, [r7, #12]
 80119b6:	015a      	lsls	r2, r3, #5
 80119b8:	693b      	ldr	r3, [r7, #16]
 80119ba:	4413      	add	r3, r2
 80119bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80119c0:	461a      	mov	r2, r3
 80119c2:	2320      	movs	r3, #32
 80119c4:	6093      	str	r3, [r2, #8]
 80119c6:	e080      	b.n	8011aca <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80119c8:	68fb      	ldr	r3, [r7, #12]
 80119ca:	015a      	lsls	r2, r3, #5
 80119cc:	693b      	ldr	r3, [r7, #16]
 80119ce:	4413      	add	r3, r2
 80119d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80119d4:	689b      	ldr	r3, [r3, #8]
 80119d6:	f003 0308 	and.w	r3, r3, #8
 80119da:	2b08      	cmp	r3, #8
 80119dc:	d134      	bne.n	8011a48 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80119de:	68fb      	ldr	r3, [r7, #12]
 80119e0:	015a      	lsls	r2, r3, #5
 80119e2:	693b      	ldr	r3, [r7, #16]
 80119e4:	4413      	add	r3, r2
 80119e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80119ea:	68db      	ldr	r3, [r3, #12]
 80119ec:	68fa      	ldr	r2, [r7, #12]
 80119ee:	0151      	lsls	r1, r2, #5
 80119f0:	693a      	ldr	r2, [r7, #16]
 80119f2:	440a      	add	r2, r1
 80119f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80119f8:	f043 0302 	orr.w	r3, r3, #2
 80119fc:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80119fe:	6879      	ldr	r1, [r7, #4]
 8011a00:	68fa      	ldr	r2, [r7, #12]
 8011a02:	4613      	mov	r3, r2
 8011a04:	009b      	lsls	r3, r3, #2
 8011a06:	4413      	add	r3, r2
 8011a08:	00db      	lsls	r3, r3, #3
 8011a0a:	440b      	add	r3, r1
 8011a0c:	335d      	adds	r3, #93	; 0x5d
 8011a0e:	2205      	movs	r2, #5
 8011a10:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8011a12:	68fb      	ldr	r3, [r7, #12]
 8011a14:	015a      	lsls	r2, r3, #5
 8011a16:	693b      	ldr	r3, [r7, #16]
 8011a18:	4413      	add	r3, r2
 8011a1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011a1e:	461a      	mov	r2, r3
 8011a20:	2310      	movs	r3, #16
 8011a22:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8011a24:	68fb      	ldr	r3, [r7, #12]
 8011a26:	015a      	lsls	r2, r3, #5
 8011a28:	693b      	ldr	r3, [r7, #16]
 8011a2a:	4413      	add	r3, r2
 8011a2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011a30:	461a      	mov	r2, r3
 8011a32:	2308      	movs	r3, #8
 8011a34:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	681b      	ldr	r3, [r3, #0]
 8011a3a:	68fa      	ldr	r2, [r7, #12]
 8011a3c:	b2d2      	uxtb	r2, r2
 8011a3e:	4611      	mov	r1, r2
 8011a40:	4618      	mov	r0, r3
 8011a42:	f004 f858 	bl	8015af6 <USB_HC_Halt>
 8011a46:	e040      	b.n	8011aca <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8011a48:	68fb      	ldr	r3, [r7, #12]
 8011a4a:	015a      	lsls	r2, r3, #5
 8011a4c:	693b      	ldr	r3, [r7, #16]
 8011a4e:	4413      	add	r3, r2
 8011a50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011a54:	689b      	ldr	r3, [r3, #8]
 8011a56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011a5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011a5e:	d134      	bne.n	8011aca <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8011a60:	68fb      	ldr	r3, [r7, #12]
 8011a62:	015a      	lsls	r2, r3, #5
 8011a64:	693b      	ldr	r3, [r7, #16]
 8011a66:	4413      	add	r3, r2
 8011a68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011a6c:	68db      	ldr	r3, [r3, #12]
 8011a6e:	68fa      	ldr	r2, [r7, #12]
 8011a70:	0151      	lsls	r1, r2, #5
 8011a72:	693a      	ldr	r2, [r7, #16]
 8011a74:	440a      	add	r2, r1
 8011a76:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8011a7a:	f043 0302 	orr.w	r3, r3, #2
 8011a7e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	681b      	ldr	r3, [r3, #0]
 8011a84:	68fa      	ldr	r2, [r7, #12]
 8011a86:	b2d2      	uxtb	r2, r2
 8011a88:	4611      	mov	r1, r2
 8011a8a:	4618      	mov	r0, r3
 8011a8c:	f004 f833 	bl	8015af6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8011a90:	68fb      	ldr	r3, [r7, #12]
 8011a92:	015a      	lsls	r2, r3, #5
 8011a94:	693b      	ldr	r3, [r7, #16]
 8011a96:	4413      	add	r3, r2
 8011a98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011a9c:	461a      	mov	r2, r3
 8011a9e:	2310      	movs	r3, #16
 8011aa0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8011aa2:	6879      	ldr	r1, [r7, #4]
 8011aa4:	68fa      	ldr	r2, [r7, #12]
 8011aa6:	4613      	mov	r3, r2
 8011aa8:	009b      	lsls	r3, r3, #2
 8011aaa:	4413      	add	r3, r2
 8011aac:	00db      	lsls	r3, r3, #3
 8011aae:	440b      	add	r3, r1
 8011ab0:	335d      	adds	r3, #93	; 0x5d
 8011ab2:	2208      	movs	r2, #8
 8011ab4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8011ab6:	68fb      	ldr	r3, [r7, #12]
 8011ab8:	015a      	lsls	r2, r3, #5
 8011aba:	693b      	ldr	r3, [r7, #16]
 8011abc:	4413      	add	r3, r2
 8011abe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011ac2:	461a      	mov	r2, r3
 8011ac4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011ac8:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8011aca:	68fb      	ldr	r3, [r7, #12]
 8011acc:	015a      	lsls	r2, r3, #5
 8011ace:	693b      	ldr	r3, [r7, #16]
 8011ad0:	4413      	add	r3, r2
 8011ad2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011ad6:	689b      	ldr	r3, [r3, #8]
 8011ad8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011adc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011ae0:	d122      	bne.n	8011b28 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8011ae2:	68fb      	ldr	r3, [r7, #12]
 8011ae4:	015a      	lsls	r2, r3, #5
 8011ae6:	693b      	ldr	r3, [r7, #16]
 8011ae8:	4413      	add	r3, r2
 8011aea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011aee:	68db      	ldr	r3, [r3, #12]
 8011af0:	68fa      	ldr	r2, [r7, #12]
 8011af2:	0151      	lsls	r1, r2, #5
 8011af4:	693a      	ldr	r2, [r7, #16]
 8011af6:	440a      	add	r2, r1
 8011af8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8011afc:	f043 0302 	orr.w	r3, r3, #2
 8011b00:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	681b      	ldr	r3, [r3, #0]
 8011b06:	68fa      	ldr	r2, [r7, #12]
 8011b08:	b2d2      	uxtb	r2, r2
 8011b0a:	4611      	mov	r1, r2
 8011b0c:	4618      	mov	r0, r3
 8011b0e:	f003 fff2 	bl	8015af6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8011b12:	68fb      	ldr	r3, [r7, #12]
 8011b14:	015a      	lsls	r2, r3, #5
 8011b16:	693b      	ldr	r3, [r7, #16]
 8011b18:	4413      	add	r3, r2
 8011b1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011b1e:	461a      	mov	r2, r3
 8011b20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011b24:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8011b26:	e300      	b.n	801212a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8011b28:	68fb      	ldr	r3, [r7, #12]
 8011b2a:	015a      	lsls	r2, r3, #5
 8011b2c:	693b      	ldr	r3, [r7, #16]
 8011b2e:	4413      	add	r3, r2
 8011b30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011b34:	689b      	ldr	r3, [r3, #8]
 8011b36:	f003 0301 	and.w	r3, r3, #1
 8011b3a:	2b01      	cmp	r3, #1
 8011b3c:	f040 80fd 	bne.w	8011d3a <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	691b      	ldr	r3, [r3, #16]
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	d01b      	beq.n	8011b80 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8011b48:	6879      	ldr	r1, [r7, #4]
 8011b4a:	68fa      	ldr	r2, [r7, #12]
 8011b4c:	4613      	mov	r3, r2
 8011b4e:	009b      	lsls	r3, r3, #2
 8011b50:	4413      	add	r3, r2
 8011b52:	00db      	lsls	r3, r3, #3
 8011b54:	440b      	add	r3, r1
 8011b56:	3348      	adds	r3, #72	; 0x48
 8011b58:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8011b5a:	68fb      	ldr	r3, [r7, #12]
 8011b5c:	0159      	lsls	r1, r3, #5
 8011b5e:	693b      	ldr	r3, [r7, #16]
 8011b60:	440b      	add	r3, r1
 8011b62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011b66:	691b      	ldr	r3, [r3, #16]
 8011b68:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8011b6c:	1ad1      	subs	r1, r2, r3
 8011b6e:	6878      	ldr	r0, [r7, #4]
 8011b70:	68fa      	ldr	r2, [r7, #12]
 8011b72:	4613      	mov	r3, r2
 8011b74:	009b      	lsls	r3, r3, #2
 8011b76:	4413      	add	r3, r2
 8011b78:	00db      	lsls	r3, r3, #3
 8011b7a:	4403      	add	r3, r0
 8011b7c:	334c      	adds	r3, #76	; 0x4c
 8011b7e:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8011b80:	6879      	ldr	r1, [r7, #4]
 8011b82:	68fa      	ldr	r2, [r7, #12]
 8011b84:	4613      	mov	r3, r2
 8011b86:	009b      	lsls	r3, r3, #2
 8011b88:	4413      	add	r3, r2
 8011b8a:	00db      	lsls	r3, r3, #3
 8011b8c:	440b      	add	r3, r1
 8011b8e:	335d      	adds	r3, #93	; 0x5d
 8011b90:	2201      	movs	r2, #1
 8011b92:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8011b94:	6879      	ldr	r1, [r7, #4]
 8011b96:	68fa      	ldr	r2, [r7, #12]
 8011b98:	4613      	mov	r3, r2
 8011b9a:	009b      	lsls	r3, r3, #2
 8011b9c:	4413      	add	r3, r2
 8011b9e:	00db      	lsls	r3, r3, #3
 8011ba0:	440b      	add	r3, r1
 8011ba2:	3358      	adds	r3, #88	; 0x58
 8011ba4:	2200      	movs	r2, #0
 8011ba6:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8011ba8:	68fb      	ldr	r3, [r7, #12]
 8011baa:	015a      	lsls	r2, r3, #5
 8011bac:	693b      	ldr	r3, [r7, #16]
 8011bae:	4413      	add	r3, r2
 8011bb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011bb4:	461a      	mov	r2, r3
 8011bb6:	2301      	movs	r3, #1
 8011bb8:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8011bba:	6879      	ldr	r1, [r7, #4]
 8011bbc:	68fa      	ldr	r2, [r7, #12]
 8011bbe:	4613      	mov	r3, r2
 8011bc0:	009b      	lsls	r3, r3, #2
 8011bc2:	4413      	add	r3, r2
 8011bc4:	00db      	lsls	r3, r3, #3
 8011bc6:	440b      	add	r3, r1
 8011bc8:	333f      	adds	r3, #63	; 0x3f
 8011bca:	781b      	ldrb	r3, [r3, #0]
 8011bcc:	2b00      	cmp	r3, #0
 8011bce:	d00a      	beq.n	8011be6 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8011bd0:	6879      	ldr	r1, [r7, #4]
 8011bd2:	68fa      	ldr	r2, [r7, #12]
 8011bd4:	4613      	mov	r3, r2
 8011bd6:	009b      	lsls	r3, r3, #2
 8011bd8:	4413      	add	r3, r2
 8011bda:	00db      	lsls	r3, r3, #3
 8011bdc:	440b      	add	r3, r1
 8011bde:	333f      	adds	r3, #63	; 0x3f
 8011be0:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8011be2:	2b02      	cmp	r3, #2
 8011be4:	d121      	bne.n	8011c2a <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8011be6:	68fb      	ldr	r3, [r7, #12]
 8011be8:	015a      	lsls	r2, r3, #5
 8011bea:	693b      	ldr	r3, [r7, #16]
 8011bec:	4413      	add	r3, r2
 8011bee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011bf2:	68db      	ldr	r3, [r3, #12]
 8011bf4:	68fa      	ldr	r2, [r7, #12]
 8011bf6:	0151      	lsls	r1, r2, #5
 8011bf8:	693a      	ldr	r2, [r7, #16]
 8011bfa:	440a      	add	r2, r1
 8011bfc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8011c00:	f043 0302 	orr.w	r3, r3, #2
 8011c04:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	681b      	ldr	r3, [r3, #0]
 8011c0a:	68fa      	ldr	r2, [r7, #12]
 8011c0c:	b2d2      	uxtb	r2, r2
 8011c0e:	4611      	mov	r1, r2
 8011c10:	4618      	mov	r0, r3
 8011c12:	f003 ff70 	bl	8015af6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8011c16:	68fb      	ldr	r3, [r7, #12]
 8011c18:	015a      	lsls	r2, r3, #5
 8011c1a:	693b      	ldr	r3, [r7, #16]
 8011c1c:	4413      	add	r3, r2
 8011c1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011c22:	461a      	mov	r2, r3
 8011c24:	2310      	movs	r3, #16
 8011c26:	6093      	str	r3, [r2, #8]
 8011c28:	e070      	b.n	8011d0c <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8011c2a:	6879      	ldr	r1, [r7, #4]
 8011c2c:	68fa      	ldr	r2, [r7, #12]
 8011c2e:	4613      	mov	r3, r2
 8011c30:	009b      	lsls	r3, r3, #2
 8011c32:	4413      	add	r3, r2
 8011c34:	00db      	lsls	r3, r3, #3
 8011c36:	440b      	add	r3, r1
 8011c38:	333f      	adds	r3, #63	; 0x3f
 8011c3a:	781b      	ldrb	r3, [r3, #0]
 8011c3c:	2b03      	cmp	r3, #3
 8011c3e:	d12a      	bne.n	8011c96 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8011c40:	68fb      	ldr	r3, [r7, #12]
 8011c42:	015a      	lsls	r2, r3, #5
 8011c44:	693b      	ldr	r3, [r7, #16]
 8011c46:	4413      	add	r3, r2
 8011c48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011c4c:	681b      	ldr	r3, [r3, #0]
 8011c4e:	68fa      	ldr	r2, [r7, #12]
 8011c50:	0151      	lsls	r1, r2, #5
 8011c52:	693a      	ldr	r2, [r7, #16]
 8011c54:	440a      	add	r2, r1
 8011c56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8011c5a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8011c5e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8011c60:	6879      	ldr	r1, [r7, #4]
 8011c62:	68fa      	ldr	r2, [r7, #12]
 8011c64:	4613      	mov	r3, r2
 8011c66:	009b      	lsls	r3, r3, #2
 8011c68:	4413      	add	r3, r2
 8011c6a:	00db      	lsls	r3, r3, #3
 8011c6c:	440b      	add	r3, r1
 8011c6e:	335c      	adds	r3, #92	; 0x5c
 8011c70:	2201      	movs	r2, #1
 8011c72:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8011c74:	68fb      	ldr	r3, [r7, #12]
 8011c76:	b2d8      	uxtb	r0, r3
 8011c78:	6879      	ldr	r1, [r7, #4]
 8011c7a:	68fa      	ldr	r2, [r7, #12]
 8011c7c:	4613      	mov	r3, r2
 8011c7e:	009b      	lsls	r3, r3, #2
 8011c80:	4413      	add	r3, r2
 8011c82:	00db      	lsls	r3, r3, #3
 8011c84:	440b      	add	r3, r1
 8011c86:	335c      	adds	r3, #92	; 0x5c
 8011c88:	781b      	ldrb	r3, [r3, #0]
 8011c8a:	461a      	mov	r2, r3
 8011c8c:	4601      	mov	r1, r0
 8011c8e:	6878      	ldr	r0, [r7, #4]
 8011c90:	f005 fa34 	bl	80170fc <HAL_HCD_HC_NotifyURBChange_Callback>
 8011c94:	e03a      	b.n	8011d0c <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8011c96:	6879      	ldr	r1, [r7, #4]
 8011c98:	68fa      	ldr	r2, [r7, #12]
 8011c9a:	4613      	mov	r3, r2
 8011c9c:	009b      	lsls	r3, r3, #2
 8011c9e:	4413      	add	r3, r2
 8011ca0:	00db      	lsls	r3, r3, #3
 8011ca2:	440b      	add	r3, r1
 8011ca4:	333f      	adds	r3, #63	; 0x3f
 8011ca6:	781b      	ldrb	r3, [r3, #0]
 8011ca8:	2b01      	cmp	r3, #1
 8011caa:	d12f      	bne.n	8011d0c <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8011cac:	6879      	ldr	r1, [r7, #4]
 8011cae:	68fa      	ldr	r2, [r7, #12]
 8011cb0:	4613      	mov	r3, r2
 8011cb2:	009b      	lsls	r3, r3, #2
 8011cb4:	4413      	add	r3, r2
 8011cb6:	00db      	lsls	r3, r3, #3
 8011cb8:	440b      	add	r3, r1
 8011cba:	335c      	adds	r3, #92	; 0x5c
 8011cbc:	2201      	movs	r2, #1
 8011cbe:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8011cc0:	6879      	ldr	r1, [r7, #4]
 8011cc2:	68fa      	ldr	r2, [r7, #12]
 8011cc4:	4613      	mov	r3, r2
 8011cc6:	009b      	lsls	r3, r3, #2
 8011cc8:	4413      	add	r3, r2
 8011cca:	00db      	lsls	r3, r3, #3
 8011ccc:	440b      	add	r3, r1
 8011cce:	3350      	adds	r3, #80	; 0x50
 8011cd0:	781b      	ldrb	r3, [r3, #0]
 8011cd2:	f083 0301 	eor.w	r3, r3, #1
 8011cd6:	b2d8      	uxtb	r0, r3
 8011cd8:	6879      	ldr	r1, [r7, #4]
 8011cda:	68fa      	ldr	r2, [r7, #12]
 8011cdc:	4613      	mov	r3, r2
 8011cde:	009b      	lsls	r3, r3, #2
 8011ce0:	4413      	add	r3, r2
 8011ce2:	00db      	lsls	r3, r3, #3
 8011ce4:	440b      	add	r3, r1
 8011ce6:	3350      	adds	r3, #80	; 0x50
 8011ce8:	4602      	mov	r2, r0
 8011cea:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8011cec:	68fb      	ldr	r3, [r7, #12]
 8011cee:	b2d8      	uxtb	r0, r3
 8011cf0:	6879      	ldr	r1, [r7, #4]
 8011cf2:	68fa      	ldr	r2, [r7, #12]
 8011cf4:	4613      	mov	r3, r2
 8011cf6:	009b      	lsls	r3, r3, #2
 8011cf8:	4413      	add	r3, r2
 8011cfa:	00db      	lsls	r3, r3, #3
 8011cfc:	440b      	add	r3, r1
 8011cfe:	335c      	adds	r3, #92	; 0x5c
 8011d00:	781b      	ldrb	r3, [r3, #0]
 8011d02:	461a      	mov	r2, r3
 8011d04:	4601      	mov	r1, r0
 8011d06:	6878      	ldr	r0, [r7, #4]
 8011d08:	f005 f9f8 	bl	80170fc <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8011d0c:	6879      	ldr	r1, [r7, #4]
 8011d0e:	68fa      	ldr	r2, [r7, #12]
 8011d10:	4613      	mov	r3, r2
 8011d12:	009b      	lsls	r3, r3, #2
 8011d14:	4413      	add	r3, r2
 8011d16:	00db      	lsls	r3, r3, #3
 8011d18:	440b      	add	r3, r1
 8011d1a:	3350      	adds	r3, #80	; 0x50
 8011d1c:	781b      	ldrb	r3, [r3, #0]
 8011d1e:	f083 0301 	eor.w	r3, r3, #1
 8011d22:	b2d8      	uxtb	r0, r3
 8011d24:	6879      	ldr	r1, [r7, #4]
 8011d26:	68fa      	ldr	r2, [r7, #12]
 8011d28:	4613      	mov	r3, r2
 8011d2a:	009b      	lsls	r3, r3, #2
 8011d2c:	4413      	add	r3, r2
 8011d2e:	00db      	lsls	r3, r3, #3
 8011d30:	440b      	add	r3, r1
 8011d32:	3350      	adds	r3, #80	; 0x50
 8011d34:	4602      	mov	r2, r0
 8011d36:	701a      	strb	r2, [r3, #0]
}
 8011d38:	e1f7      	b.n	801212a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8011d3a:	68fb      	ldr	r3, [r7, #12]
 8011d3c:	015a      	lsls	r2, r3, #5
 8011d3e:	693b      	ldr	r3, [r7, #16]
 8011d40:	4413      	add	r3, r2
 8011d42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011d46:	689b      	ldr	r3, [r3, #8]
 8011d48:	f003 0302 	and.w	r3, r3, #2
 8011d4c:	2b02      	cmp	r3, #2
 8011d4e:	f040 811a 	bne.w	8011f86 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8011d52:	68fb      	ldr	r3, [r7, #12]
 8011d54:	015a      	lsls	r2, r3, #5
 8011d56:	693b      	ldr	r3, [r7, #16]
 8011d58:	4413      	add	r3, r2
 8011d5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011d5e:	68db      	ldr	r3, [r3, #12]
 8011d60:	68fa      	ldr	r2, [r7, #12]
 8011d62:	0151      	lsls	r1, r2, #5
 8011d64:	693a      	ldr	r2, [r7, #16]
 8011d66:	440a      	add	r2, r1
 8011d68:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8011d6c:	f023 0302 	bic.w	r3, r3, #2
 8011d70:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8011d72:	6879      	ldr	r1, [r7, #4]
 8011d74:	68fa      	ldr	r2, [r7, #12]
 8011d76:	4613      	mov	r3, r2
 8011d78:	009b      	lsls	r3, r3, #2
 8011d7a:	4413      	add	r3, r2
 8011d7c:	00db      	lsls	r3, r3, #3
 8011d7e:	440b      	add	r3, r1
 8011d80:	335d      	adds	r3, #93	; 0x5d
 8011d82:	781b      	ldrb	r3, [r3, #0]
 8011d84:	2b01      	cmp	r3, #1
 8011d86:	d10a      	bne.n	8011d9e <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8011d88:	6879      	ldr	r1, [r7, #4]
 8011d8a:	68fa      	ldr	r2, [r7, #12]
 8011d8c:	4613      	mov	r3, r2
 8011d8e:	009b      	lsls	r3, r3, #2
 8011d90:	4413      	add	r3, r2
 8011d92:	00db      	lsls	r3, r3, #3
 8011d94:	440b      	add	r3, r1
 8011d96:	335c      	adds	r3, #92	; 0x5c
 8011d98:	2201      	movs	r2, #1
 8011d9a:	701a      	strb	r2, [r3, #0]
 8011d9c:	e0d9      	b.n	8011f52 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8011d9e:	6879      	ldr	r1, [r7, #4]
 8011da0:	68fa      	ldr	r2, [r7, #12]
 8011da2:	4613      	mov	r3, r2
 8011da4:	009b      	lsls	r3, r3, #2
 8011da6:	4413      	add	r3, r2
 8011da8:	00db      	lsls	r3, r3, #3
 8011daa:	440b      	add	r3, r1
 8011dac:	335d      	adds	r3, #93	; 0x5d
 8011dae:	781b      	ldrb	r3, [r3, #0]
 8011db0:	2b05      	cmp	r3, #5
 8011db2:	d10a      	bne.n	8011dca <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8011db4:	6879      	ldr	r1, [r7, #4]
 8011db6:	68fa      	ldr	r2, [r7, #12]
 8011db8:	4613      	mov	r3, r2
 8011dba:	009b      	lsls	r3, r3, #2
 8011dbc:	4413      	add	r3, r2
 8011dbe:	00db      	lsls	r3, r3, #3
 8011dc0:	440b      	add	r3, r1
 8011dc2:	335c      	adds	r3, #92	; 0x5c
 8011dc4:	2205      	movs	r2, #5
 8011dc6:	701a      	strb	r2, [r3, #0]
 8011dc8:	e0c3      	b.n	8011f52 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8011dca:	6879      	ldr	r1, [r7, #4]
 8011dcc:	68fa      	ldr	r2, [r7, #12]
 8011dce:	4613      	mov	r3, r2
 8011dd0:	009b      	lsls	r3, r3, #2
 8011dd2:	4413      	add	r3, r2
 8011dd4:	00db      	lsls	r3, r3, #3
 8011dd6:	440b      	add	r3, r1
 8011dd8:	335d      	adds	r3, #93	; 0x5d
 8011dda:	781b      	ldrb	r3, [r3, #0]
 8011ddc:	2b06      	cmp	r3, #6
 8011dde:	d00a      	beq.n	8011df6 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8011de0:	6879      	ldr	r1, [r7, #4]
 8011de2:	68fa      	ldr	r2, [r7, #12]
 8011de4:	4613      	mov	r3, r2
 8011de6:	009b      	lsls	r3, r3, #2
 8011de8:	4413      	add	r3, r2
 8011dea:	00db      	lsls	r3, r3, #3
 8011dec:	440b      	add	r3, r1
 8011dee:	335d      	adds	r3, #93	; 0x5d
 8011df0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8011df2:	2b08      	cmp	r3, #8
 8011df4:	d156      	bne.n	8011ea4 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8011df6:	6879      	ldr	r1, [r7, #4]
 8011df8:	68fa      	ldr	r2, [r7, #12]
 8011dfa:	4613      	mov	r3, r2
 8011dfc:	009b      	lsls	r3, r3, #2
 8011dfe:	4413      	add	r3, r2
 8011e00:	00db      	lsls	r3, r3, #3
 8011e02:	440b      	add	r3, r1
 8011e04:	3358      	adds	r3, #88	; 0x58
 8011e06:	681b      	ldr	r3, [r3, #0]
 8011e08:	1c59      	adds	r1, r3, #1
 8011e0a:	6878      	ldr	r0, [r7, #4]
 8011e0c:	68fa      	ldr	r2, [r7, #12]
 8011e0e:	4613      	mov	r3, r2
 8011e10:	009b      	lsls	r3, r3, #2
 8011e12:	4413      	add	r3, r2
 8011e14:	00db      	lsls	r3, r3, #3
 8011e16:	4403      	add	r3, r0
 8011e18:	3358      	adds	r3, #88	; 0x58
 8011e1a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8011e1c:	6879      	ldr	r1, [r7, #4]
 8011e1e:	68fa      	ldr	r2, [r7, #12]
 8011e20:	4613      	mov	r3, r2
 8011e22:	009b      	lsls	r3, r3, #2
 8011e24:	4413      	add	r3, r2
 8011e26:	00db      	lsls	r3, r3, #3
 8011e28:	440b      	add	r3, r1
 8011e2a:	3358      	adds	r3, #88	; 0x58
 8011e2c:	681b      	ldr	r3, [r3, #0]
 8011e2e:	2b03      	cmp	r3, #3
 8011e30:	d914      	bls.n	8011e5c <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8011e32:	6879      	ldr	r1, [r7, #4]
 8011e34:	68fa      	ldr	r2, [r7, #12]
 8011e36:	4613      	mov	r3, r2
 8011e38:	009b      	lsls	r3, r3, #2
 8011e3a:	4413      	add	r3, r2
 8011e3c:	00db      	lsls	r3, r3, #3
 8011e3e:	440b      	add	r3, r1
 8011e40:	3358      	adds	r3, #88	; 0x58
 8011e42:	2200      	movs	r2, #0
 8011e44:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8011e46:	6879      	ldr	r1, [r7, #4]
 8011e48:	68fa      	ldr	r2, [r7, #12]
 8011e4a:	4613      	mov	r3, r2
 8011e4c:	009b      	lsls	r3, r3, #2
 8011e4e:	4413      	add	r3, r2
 8011e50:	00db      	lsls	r3, r3, #3
 8011e52:	440b      	add	r3, r1
 8011e54:	335c      	adds	r3, #92	; 0x5c
 8011e56:	2204      	movs	r2, #4
 8011e58:	701a      	strb	r2, [r3, #0]
 8011e5a:	e009      	b.n	8011e70 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8011e5c:	6879      	ldr	r1, [r7, #4]
 8011e5e:	68fa      	ldr	r2, [r7, #12]
 8011e60:	4613      	mov	r3, r2
 8011e62:	009b      	lsls	r3, r3, #2
 8011e64:	4413      	add	r3, r2
 8011e66:	00db      	lsls	r3, r3, #3
 8011e68:	440b      	add	r3, r1
 8011e6a:	335c      	adds	r3, #92	; 0x5c
 8011e6c:	2202      	movs	r2, #2
 8011e6e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8011e70:	68fb      	ldr	r3, [r7, #12]
 8011e72:	015a      	lsls	r2, r3, #5
 8011e74:	693b      	ldr	r3, [r7, #16]
 8011e76:	4413      	add	r3, r2
 8011e78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011e7c:	681b      	ldr	r3, [r3, #0]
 8011e7e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8011e80:	68bb      	ldr	r3, [r7, #8]
 8011e82:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8011e86:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8011e88:	68bb      	ldr	r3, [r7, #8]
 8011e8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8011e8e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8011e90:	68fb      	ldr	r3, [r7, #12]
 8011e92:	015a      	lsls	r2, r3, #5
 8011e94:	693b      	ldr	r3, [r7, #16]
 8011e96:	4413      	add	r3, r2
 8011e98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011e9c:	461a      	mov	r2, r3
 8011e9e:	68bb      	ldr	r3, [r7, #8]
 8011ea0:	6013      	str	r3, [r2, #0]
 8011ea2:	e056      	b.n	8011f52 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8011ea4:	6879      	ldr	r1, [r7, #4]
 8011ea6:	68fa      	ldr	r2, [r7, #12]
 8011ea8:	4613      	mov	r3, r2
 8011eaa:	009b      	lsls	r3, r3, #2
 8011eac:	4413      	add	r3, r2
 8011eae:	00db      	lsls	r3, r3, #3
 8011eb0:	440b      	add	r3, r1
 8011eb2:	335d      	adds	r3, #93	; 0x5d
 8011eb4:	781b      	ldrb	r3, [r3, #0]
 8011eb6:	2b03      	cmp	r3, #3
 8011eb8:	d123      	bne.n	8011f02 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8011eba:	6879      	ldr	r1, [r7, #4]
 8011ebc:	68fa      	ldr	r2, [r7, #12]
 8011ebe:	4613      	mov	r3, r2
 8011ec0:	009b      	lsls	r3, r3, #2
 8011ec2:	4413      	add	r3, r2
 8011ec4:	00db      	lsls	r3, r3, #3
 8011ec6:	440b      	add	r3, r1
 8011ec8:	335c      	adds	r3, #92	; 0x5c
 8011eca:	2202      	movs	r2, #2
 8011ecc:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8011ece:	68fb      	ldr	r3, [r7, #12]
 8011ed0:	015a      	lsls	r2, r3, #5
 8011ed2:	693b      	ldr	r3, [r7, #16]
 8011ed4:	4413      	add	r3, r2
 8011ed6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011eda:	681b      	ldr	r3, [r3, #0]
 8011edc:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8011ede:	68bb      	ldr	r3, [r7, #8]
 8011ee0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8011ee4:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8011ee6:	68bb      	ldr	r3, [r7, #8]
 8011ee8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8011eec:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8011eee:	68fb      	ldr	r3, [r7, #12]
 8011ef0:	015a      	lsls	r2, r3, #5
 8011ef2:	693b      	ldr	r3, [r7, #16]
 8011ef4:	4413      	add	r3, r2
 8011ef6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011efa:	461a      	mov	r2, r3
 8011efc:	68bb      	ldr	r3, [r7, #8]
 8011efe:	6013      	str	r3, [r2, #0]
 8011f00:	e027      	b.n	8011f52 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8011f02:	6879      	ldr	r1, [r7, #4]
 8011f04:	68fa      	ldr	r2, [r7, #12]
 8011f06:	4613      	mov	r3, r2
 8011f08:	009b      	lsls	r3, r3, #2
 8011f0a:	4413      	add	r3, r2
 8011f0c:	00db      	lsls	r3, r3, #3
 8011f0e:	440b      	add	r3, r1
 8011f10:	335d      	adds	r3, #93	; 0x5d
 8011f12:	781b      	ldrb	r3, [r3, #0]
 8011f14:	2b07      	cmp	r3, #7
 8011f16:	d11c      	bne.n	8011f52 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8011f18:	6879      	ldr	r1, [r7, #4]
 8011f1a:	68fa      	ldr	r2, [r7, #12]
 8011f1c:	4613      	mov	r3, r2
 8011f1e:	009b      	lsls	r3, r3, #2
 8011f20:	4413      	add	r3, r2
 8011f22:	00db      	lsls	r3, r3, #3
 8011f24:	440b      	add	r3, r1
 8011f26:	3358      	adds	r3, #88	; 0x58
 8011f28:	681b      	ldr	r3, [r3, #0]
 8011f2a:	1c59      	adds	r1, r3, #1
 8011f2c:	6878      	ldr	r0, [r7, #4]
 8011f2e:	68fa      	ldr	r2, [r7, #12]
 8011f30:	4613      	mov	r3, r2
 8011f32:	009b      	lsls	r3, r3, #2
 8011f34:	4413      	add	r3, r2
 8011f36:	00db      	lsls	r3, r3, #3
 8011f38:	4403      	add	r3, r0
 8011f3a:	3358      	adds	r3, #88	; 0x58
 8011f3c:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8011f3e:	6879      	ldr	r1, [r7, #4]
 8011f40:	68fa      	ldr	r2, [r7, #12]
 8011f42:	4613      	mov	r3, r2
 8011f44:	009b      	lsls	r3, r3, #2
 8011f46:	4413      	add	r3, r2
 8011f48:	00db      	lsls	r3, r3, #3
 8011f4a:	440b      	add	r3, r1
 8011f4c:	335c      	adds	r3, #92	; 0x5c
 8011f4e:	2204      	movs	r2, #4
 8011f50:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8011f52:	68fb      	ldr	r3, [r7, #12]
 8011f54:	015a      	lsls	r2, r3, #5
 8011f56:	693b      	ldr	r3, [r7, #16]
 8011f58:	4413      	add	r3, r2
 8011f5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011f5e:	461a      	mov	r2, r3
 8011f60:	2302      	movs	r3, #2
 8011f62:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8011f64:	68fb      	ldr	r3, [r7, #12]
 8011f66:	b2d8      	uxtb	r0, r3
 8011f68:	6879      	ldr	r1, [r7, #4]
 8011f6a:	68fa      	ldr	r2, [r7, #12]
 8011f6c:	4613      	mov	r3, r2
 8011f6e:	009b      	lsls	r3, r3, #2
 8011f70:	4413      	add	r3, r2
 8011f72:	00db      	lsls	r3, r3, #3
 8011f74:	440b      	add	r3, r1
 8011f76:	335c      	adds	r3, #92	; 0x5c
 8011f78:	781b      	ldrb	r3, [r3, #0]
 8011f7a:	461a      	mov	r2, r3
 8011f7c:	4601      	mov	r1, r0
 8011f7e:	6878      	ldr	r0, [r7, #4]
 8011f80:	f005 f8bc 	bl	80170fc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8011f84:	e0d1      	b.n	801212a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8011f86:	68fb      	ldr	r3, [r7, #12]
 8011f88:	015a      	lsls	r2, r3, #5
 8011f8a:	693b      	ldr	r3, [r7, #16]
 8011f8c:	4413      	add	r3, r2
 8011f8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011f92:	689b      	ldr	r3, [r3, #8]
 8011f94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011f98:	2b80      	cmp	r3, #128	; 0x80
 8011f9a:	d13e      	bne.n	801201a <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8011f9c:	68fb      	ldr	r3, [r7, #12]
 8011f9e:	015a      	lsls	r2, r3, #5
 8011fa0:	693b      	ldr	r3, [r7, #16]
 8011fa2:	4413      	add	r3, r2
 8011fa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011fa8:	68db      	ldr	r3, [r3, #12]
 8011faa:	68fa      	ldr	r2, [r7, #12]
 8011fac:	0151      	lsls	r1, r2, #5
 8011fae:	693a      	ldr	r2, [r7, #16]
 8011fb0:	440a      	add	r2, r1
 8011fb2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8011fb6:	f043 0302 	orr.w	r3, r3, #2
 8011fba:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8011fbc:	6879      	ldr	r1, [r7, #4]
 8011fbe:	68fa      	ldr	r2, [r7, #12]
 8011fc0:	4613      	mov	r3, r2
 8011fc2:	009b      	lsls	r3, r3, #2
 8011fc4:	4413      	add	r3, r2
 8011fc6:	00db      	lsls	r3, r3, #3
 8011fc8:	440b      	add	r3, r1
 8011fca:	3358      	adds	r3, #88	; 0x58
 8011fcc:	681b      	ldr	r3, [r3, #0]
 8011fce:	1c59      	adds	r1, r3, #1
 8011fd0:	6878      	ldr	r0, [r7, #4]
 8011fd2:	68fa      	ldr	r2, [r7, #12]
 8011fd4:	4613      	mov	r3, r2
 8011fd6:	009b      	lsls	r3, r3, #2
 8011fd8:	4413      	add	r3, r2
 8011fda:	00db      	lsls	r3, r3, #3
 8011fdc:	4403      	add	r3, r0
 8011fde:	3358      	adds	r3, #88	; 0x58
 8011fe0:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8011fe2:	6879      	ldr	r1, [r7, #4]
 8011fe4:	68fa      	ldr	r2, [r7, #12]
 8011fe6:	4613      	mov	r3, r2
 8011fe8:	009b      	lsls	r3, r3, #2
 8011fea:	4413      	add	r3, r2
 8011fec:	00db      	lsls	r3, r3, #3
 8011fee:	440b      	add	r3, r1
 8011ff0:	335d      	adds	r3, #93	; 0x5d
 8011ff2:	2206      	movs	r2, #6
 8011ff4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	681b      	ldr	r3, [r3, #0]
 8011ffa:	68fa      	ldr	r2, [r7, #12]
 8011ffc:	b2d2      	uxtb	r2, r2
 8011ffe:	4611      	mov	r1, r2
 8012000:	4618      	mov	r0, r3
 8012002:	f003 fd78 	bl	8015af6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8012006:	68fb      	ldr	r3, [r7, #12]
 8012008:	015a      	lsls	r2, r3, #5
 801200a:	693b      	ldr	r3, [r7, #16]
 801200c:	4413      	add	r3, r2
 801200e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012012:	461a      	mov	r2, r3
 8012014:	2380      	movs	r3, #128	; 0x80
 8012016:	6093      	str	r3, [r2, #8]
}
 8012018:	e087      	b.n	801212a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 801201a:	68fb      	ldr	r3, [r7, #12]
 801201c:	015a      	lsls	r2, r3, #5
 801201e:	693b      	ldr	r3, [r7, #16]
 8012020:	4413      	add	r3, r2
 8012022:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012026:	689b      	ldr	r3, [r3, #8]
 8012028:	f003 0310 	and.w	r3, r3, #16
 801202c:	2b10      	cmp	r3, #16
 801202e:	d17c      	bne.n	801212a <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8012030:	6879      	ldr	r1, [r7, #4]
 8012032:	68fa      	ldr	r2, [r7, #12]
 8012034:	4613      	mov	r3, r2
 8012036:	009b      	lsls	r3, r3, #2
 8012038:	4413      	add	r3, r2
 801203a:	00db      	lsls	r3, r3, #3
 801203c:	440b      	add	r3, r1
 801203e:	333f      	adds	r3, #63	; 0x3f
 8012040:	781b      	ldrb	r3, [r3, #0]
 8012042:	2b03      	cmp	r3, #3
 8012044:	d122      	bne.n	801208c <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8012046:	6879      	ldr	r1, [r7, #4]
 8012048:	68fa      	ldr	r2, [r7, #12]
 801204a:	4613      	mov	r3, r2
 801204c:	009b      	lsls	r3, r3, #2
 801204e:	4413      	add	r3, r2
 8012050:	00db      	lsls	r3, r3, #3
 8012052:	440b      	add	r3, r1
 8012054:	3358      	adds	r3, #88	; 0x58
 8012056:	2200      	movs	r2, #0
 8012058:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 801205a:	68fb      	ldr	r3, [r7, #12]
 801205c:	015a      	lsls	r2, r3, #5
 801205e:	693b      	ldr	r3, [r7, #16]
 8012060:	4413      	add	r3, r2
 8012062:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012066:	68db      	ldr	r3, [r3, #12]
 8012068:	68fa      	ldr	r2, [r7, #12]
 801206a:	0151      	lsls	r1, r2, #5
 801206c:	693a      	ldr	r2, [r7, #16]
 801206e:	440a      	add	r2, r1
 8012070:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8012074:	f043 0302 	orr.w	r3, r3, #2
 8012078:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	681b      	ldr	r3, [r3, #0]
 801207e:	68fa      	ldr	r2, [r7, #12]
 8012080:	b2d2      	uxtb	r2, r2
 8012082:	4611      	mov	r1, r2
 8012084:	4618      	mov	r0, r3
 8012086:	f003 fd36 	bl	8015af6 <USB_HC_Halt>
 801208a:	e045      	b.n	8012118 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 801208c:	6879      	ldr	r1, [r7, #4]
 801208e:	68fa      	ldr	r2, [r7, #12]
 8012090:	4613      	mov	r3, r2
 8012092:	009b      	lsls	r3, r3, #2
 8012094:	4413      	add	r3, r2
 8012096:	00db      	lsls	r3, r3, #3
 8012098:	440b      	add	r3, r1
 801209a:	333f      	adds	r3, #63	; 0x3f
 801209c:	781b      	ldrb	r3, [r3, #0]
 801209e:	2b00      	cmp	r3, #0
 80120a0:	d00a      	beq.n	80120b8 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80120a2:	6879      	ldr	r1, [r7, #4]
 80120a4:	68fa      	ldr	r2, [r7, #12]
 80120a6:	4613      	mov	r3, r2
 80120a8:	009b      	lsls	r3, r3, #2
 80120aa:	4413      	add	r3, r2
 80120ac:	00db      	lsls	r3, r3, #3
 80120ae:	440b      	add	r3, r1
 80120b0:	333f      	adds	r3, #63	; 0x3f
 80120b2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80120b4:	2b02      	cmp	r3, #2
 80120b6:	d12f      	bne.n	8012118 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80120b8:	6879      	ldr	r1, [r7, #4]
 80120ba:	68fa      	ldr	r2, [r7, #12]
 80120bc:	4613      	mov	r3, r2
 80120be:	009b      	lsls	r3, r3, #2
 80120c0:	4413      	add	r3, r2
 80120c2:	00db      	lsls	r3, r3, #3
 80120c4:	440b      	add	r3, r1
 80120c6:	3358      	adds	r3, #88	; 0x58
 80120c8:	2200      	movs	r2, #0
 80120ca:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	691b      	ldr	r3, [r3, #16]
 80120d0:	2b00      	cmp	r3, #0
 80120d2:	d121      	bne.n	8012118 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 80120d4:	6879      	ldr	r1, [r7, #4]
 80120d6:	68fa      	ldr	r2, [r7, #12]
 80120d8:	4613      	mov	r3, r2
 80120da:	009b      	lsls	r3, r3, #2
 80120dc:	4413      	add	r3, r2
 80120de:	00db      	lsls	r3, r3, #3
 80120e0:	440b      	add	r3, r1
 80120e2:	335d      	adds	r3, #93	; 0x5d
 80120e4:	2203      	movs	r2, #3
 80120e6:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80120e8:	68fb      	ldr	r3, [r7, #12]
 80120ea:	015a      	lsls	r2, r3, #5
 80120ec:	693b      	ldr	r3, [r7, #16]
 80120ee:	4413      	add	r3, r2
 80120f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80120f4:	68db      	ldr	r3, [r3, #12]
 80120f6:	68fa      	ldr	r2, [r7, #12]
 80120f8:	0151      	lsls	r1, r2, #5
 80120fa:	693a      	ldr	r2, [r7, #16]
 80120fc:	440a      	add	r2, r1
 80120fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8012102:	f043 0302 	orr.w	r3, r3, #2
 8012106:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	681b      	ldr	r3, [r3, #0]
 801210c:	68fa      	ldr	r2, [r7, #12]
 801210e:	b2d2      	uxtb	r2, r2
 8012110:	4611      	mov	r1, r2
 8012112:	4618      	mov	r0, r3
 8012114:	f003 fcef 	bl	8015af6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8012118:	68fb      	ldr	r3, [r7, #12]
 801211a:	015a      	lsls	r2, r3, #5
 801211c:	693b      	ldr	r3, [r7, #16]
 801211e:	4413      	add	r3, r2
 8012120:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012124:	461a      	mov	r2, r3
 8012126:	2310      	movs	r3, #16
 8012128:	6093      	str	r3, [r2, #8]
}
 801212a:	bf00      	nop
 801212c:	3718      	adds	r7, #24
 801212e:	46bd      	mov	sp, r7
 8012130:	bd80      	pop	{r7, pc}

08012132 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8012132:	b580      	push	{r7, lr}
 8012134:	b086      	sub	sp, #24
 8012136:	af00      	add	r7, sp, #0
 8012138:	6078      	str	r0, [r7, #4]
 801213a:	460b      	mov	r3, r1
 801213c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	681b      	ldr	r3, [r3, #0]
 8012142:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012144:	697b      	ldr	r3, [r7, #20]
 8012146:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8012148:	78fb      	ldrb	r3, [r7, #3]
 801214a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 801214c:	68fb      	ldr	r3, [r7, #12]
 801214e:	015a      	lsls	r2, r3, #5
 8012150:	693b      	ldr	r3, [r7, #16]
 8012152:	4413      	add	r3, r2
 8012154:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012158:	689b      	ldr	r3, [r3, #8]
 801215a:	f003 0304 	and.w	r3, r3, #4
 801215e:	2b04      	cmp	r3, #4
 8012160:	d119      	bne.n	8012196 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8012162:	68fb      	ldr	r3, [r7, #12]
 8012164:	015a      	lsls	r2, r3, #5
 8012166:	693b      	ldr	r3, [r7, #16]
 8012168:	4413      	add	r3, r2
 801216a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801216e:	461a      	mov	r2, r3
 8012170:	2304      	movs	r3, #4
 8012172:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8012174:	68fb      	ldr	r3, [r7, #12]
 8012176:	015a      	lsls	r2, r3, #5
 8012178:	693b      	ldr	r3, [r7, #16]
 801217a:	4413      	add	r3, r2
 801217c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012180:	68db      	ldr	r3, [r3, #12]
 8012182:	68fa      	ldr	r2, [r7, #12]
 8012184:	0151      	lsls	r1, r2, #5
 8012186:	693a      	ldr	r2, [r7, #16]
 8012188:	440a      	add	r2, r1
 801218a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801218e:	f043 0302 	orr.w	r3, r3, #2
 8012192:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8012194:	e33e      	b.n	8012814 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8012196:	68fb      	ldr	r3, [r7, #12]
 8012198:	015a      	lsls	r2, r3, #5
 801219a:	693b      	ldr	r3, [r7, #16]
 801219c:	4413      	add	r3, r2
 801219e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80121a2:	689b      	ldr	r3, [r3, #8]
 80121a4:	f003 0320 	and.w	r3, r3, #32
 80121a8:	2b20      	cmp	r3, #32
 80121aa:	d141      	bne.n	8012230 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80121ac:	68fb      	ldr	r3, [r7, #12]
 80121ae:	015a      	lsls	r2, r3, #5
 80121b0:	693b      	ldr	r3, [r7, #16]
 80121b2:	4413      	add	r3, r2
 80121b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80121b8:	461a      	mov	r2, r3
 80121ba:	2320      	movs	r3, #32
 80121bc:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80121be:	6879      	ldr	r1, [r7, #4]
 80121c0:	68fa      	ldr	r2, [r7, #12]
 80121c2:	4613      	mov	r3, r2
 80121c4:	009b      	lsls	r3, r3, #2
 80121c6:	4413      	add	r3, r2
 80121c8:	00db      	lsls	r3, r3, #3
 80121ca:	440b      	add	r3, r1
 80121cc:	333d      	adds	r3, #61	; 0x3d
 80121ce:	781b      	ldrb	r3, [r3, #0]
 80121d0:	2b01      	cmp	r3, #1
 80121d2:	f040 831f 	bne.w	8012814 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 80121d6:	6879      	ldr	r1, [r7, #4]
 80121d8:	68fa      	ldr	r2, [r7, #12]
 80121da:	4613      	mov	r3, r2
 80121dc:	009b      	lsls	r3, r3, #2
 80121de:	4413      	add	r3, r2
 80121e0:	00db      	lsls	r3, r3, #3
 80121e2:	440b      	add	r3, r1
 80121e4:	333d      	adds	r3, #61	; 0x3d
 80121e6:	2200      	movs	r2, #0
 80121e8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80121ea:	6879      	ldr	r1, [r7, #4]
 80121ec:	68fa      	ldr	r2, [r7, #12]
 80121ee:	4613      	mov	r3, r2
 80121f0:	009b      	lsls	r3, r3, #2
 80121f2:	4413      	add	r3, r2
 80121f4:	00db      	lsls	r3, r3, #3
 80121f6:	440b      	add	r3, r1
 80121f8:	335c      	adds	r3, #92	; 0x5c
 80121fa:	2202      	movs	r2, #2
 80121fc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80121fe:	68fb      	ldr	r3, [r7, #12]
 8012200:	015a      	lsls	r2, r3, #5
 8012202:	693b      	ldr	r3, [r7, #16]
 8012204:	4413      	add	r3, r2
 8012206:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801220a:	68db      	ldr	r3, [r3, #12]
 801220c:	68fa      	ldr	r2, [r7, #12]
 801220e:	0151      	lsls	r1, r2, #5
 8012210:	693a      	ldr	r2, [r7, #16]
 8012212:	440a      	add	r2, r1
 8012214:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8012218:	f043 0302 	orr.w	r3, r3, #2
 801221c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 801221e:	687b      	ldr	r3, [r7, #4]
 8012220:	681b      	ldr	r3, [r3, #0]
 8012222:	68fa      	ldr	r2, [r7, #12]
 8012224:	b2d2      	uxtb	r2, r2
 8012226:	4611      	mov	r1, r2
 8012228:	4618      	mov	r0, r3
 801222a:	f003 fc64 	bl	8015af6 <USB_HC_Halt>
}
 801222e:	e2f1      	b.n	8012814 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8012230:	68fb      	ldr	r3, [r7, #12]
 8012232:	015a      	lsls	r2, r3, #5
 8012234:	693b      	ldr	r3, [r7, #16]
 8012236:	4413      	add	r3, r2
 8012238:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801223c:	689b      	ldr	r3, [r3, #8]
 801223e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012242:	2b40      	cmp	r3, #64	; 0x40
 8012244:	d13f      	bne.n	80122c6 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8012246:	6879      	ldr	r1, [r7, #4]
 8012248:	68fa      	ldr	r2, [r7, #12]
 801224a:	4613      	mov	r3, r2
 801224c:	009b      	lsls	r3, r3, #2
 801224e:	4413      	add	r3, r2
 8012250:	00db      	lsls	r3, r3, #3
 8012252:	440b      	add	r3, r1
 8012254:	335d      	adds	r3, #93	; 0x5d
 8012256:	2204      	movs	r2, #4
 8012258:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 801225a:	6879      	ldr	r1, [r7, #4]
 801225c:	68fa      	ldr	r2, [r7, #12]
 801225e:	4613      	mov	r3, r2
 8012260:	009b      	lsls	r3, r3, #2
 8012262:	4413      	add	r3, r2
 8012264:	00db      	lsls	r3, r3, #3
 8012266:	440b      	add	r3, r1
 8012268:	333d      	adds	r3, #61	; 0x3d
 801226a:	2201      	movs	r2, #1
 801226c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 801226e:	6879      	ldr	r1, [r7, #4]
 8012270:	68fa      	ldr	r2, [r7, #12]
 8012272:	4613      	mov	r3, r2
 8012274:	009b      	lsls	r3, r3, #2
 8012276:	4413      	add	r3, r2
 8012278:	00db      	lsls	r3, r3, #3
 801227a:	440b      	add	r3, r1
 801227c:	3358      	adds	r3, #88	; 0x58
 801227e:	2200      	movs	r2, #0
 8012280:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8012282:	68fb      	ldr	r3, [r7, #12]
 8012284:	015a      	lsls	r2, r3, #5
 8012286:	693b      	ldr	r3, [r7, #16]
 8012288:	4413      	add	r3, r2
 801228a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801228e:	68db      	ldr	r3, [r3, #12]
 8012290:	68fa      	ldr	r2, [r7, #12]
 8012292:	0151      	lsls	r1, r2, #5
 8012294:	693a      	ldr	r2, [r7, #16]
 8012296:	440a      	add	r2, r1
 8012298:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801229c:	f043 0302 	orr.w	r3, r3, #2
 80122a0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	681b      	ldr	r3, [r3, #0]
 80122a6:	68fa      	ldr	r2, [r7, #12]
 80122a8:	b2d2      	uxtb	r2, r2
 80122aa:	4611      	mov	r1, r2
 80122ac:	4618      	mov	r0, r3
 80122ae:	f003 fc22 	bl	8015af6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80122b2:	68fb      	ldr	r3, [r7, #12]
 80122b4:	015a      	lsls	r2, r3, #5
 80122b6:	693b      	ldr	r3, [r7, #16]
 80122b8:	4413      	add	r3, r2
 80122ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80122be:	461a      	mov	r2, r3
 80122c0:	2340      	movs	r3, #64	; 0x40
 80122c2:	6093      	str	r3, [r2, #8]
}
 80122c4:	e2a6      	b.n	8012814 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80122c6:	68fb      	ldr	r3, [r7, #12]
 80122c8:	015a      	lsls	r2, r3, #5
 80122ca:	693b      	ldr	r3, [r7, #16]
 80122cc:	4413      	add	r3, r2
 80122ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80122d2:	689b      	ldr	r3, [r3, #8]
 80122d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80122d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80122dc:	d122      	bne.n	8012324 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80122de:	68fb      	ldr	r3, [r7, #12]
 80122e0:	015a      	lsls	r2, r3, #5
 80122e2:	693b      	ldr	r3, [r7, #16]
 80122e4:	4413      	add	r3, r2
 80122e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80122ea:	68db      	ldr	r3, [r3, #12]
 80122ec:	68fa      	ldr	r2, [r7, #12]
 80122ee:	0151      	lsls	r1, r2, #5
 80122f0:	693a      	ldr	r2, [r7, #16]
 80122f2:	440a      	add	r2, r1
 80122f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80122f8:	f043 0302 	orr.w	r3, r3, #2
 80122fc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	681b      	ldr	r3, [r3, #0]
 8012302:	68fa      	ldr	r2, [r7, #12]
 8012304:	b2d2      	uxtb	r2, r2
 8012306:	4611      	mov	r1, r2
 8012308:	4618      	mov	r0, r3
 801230a:	f003 fbf4 	bl	8015af6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 801230e:	68fb      	ldr	r3, [r7, #12]
 8012310:	015a      	lsls	r2, r3, #5
 8012312:	693b      	ldr	r3, [r7, #16]
 8012314:	4413      	add	r3, r2
 8012316:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801231a:	461a      	mov	r2, r3
 801231c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012320:	6093      	str	r3, [r2, #8]
}
 8012322:	e277      	b.n	8012814 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8012324:	68fb      	ldr	r3, [r7, #12]
 8012326:	015a      	lsls	r2, r3, #5
 8012328:	693b      	ldr	r3, [r7, #16]
 801232a:	4413      	add	r3, r2
 801232c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012330:	689b      	ldr	r3, [r3, #8]
 8012332:	f003 0301 	and.w	r3, r3, #1
 8012336:	2b01      	cmp	r3, #1
 8012338:	d135      	bne.n	80123a6 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 801233a:	6879      	ldr	r1, [r7, #4]
 801233c:	68fa      	ldr	r2, [r7, #12]
 801233e:	4613      	mov	r3, r2
 8012340:	009b      	lsls	r3, r3, #2
 8012342:	4413      	add	r3, r2
 8012344:	00db      	lsls	r3, r3, #3
 8012346:	440b      	add	r3, r1
 8012348:	3358      	adds	r3, #88	; 0x58
 801234a:	2200      	movs	r2, #0
 801234c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 801234e:	68fb      	ldr	r3, [r7, #12]
 8012350:	015a      	lsls	r2, r3, #5
 8012352:	693b      	ldr	r3, [r7, #16]
 8012354:	4413      	add	r3, r2
 8012356:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801235a:	68db      	ldr	r3, [r3, #12]
 801235c:	68fa      	ldr	r2, [r7, #12]
 801235e:	0151      	lsls	r1, r2, #5
 8012360:	693a      	ldr	r2, [r7, #16]
 8012362:	440a      	add	r2, r1
 8012364:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8012368:	f043 0302 	orr.w	r3, r3, #2
 801236c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	681b      	ldr	r3, [r3, #0]
 8012372:	68fa      	ldr	r2, [r7, #12]
 8012374:	b2d2      	uxtb	r2, r2
 8012376:	4611      	mov	r1, r2
 8012378:	4618      	mov	r0, r3
 801237a:	f003 fbbc 	bl	8015af6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 801237e:	68fb      	ldr	r3, [r7, #12]
 8012380:	015a      	lsls	r2, r3, #5
 8012382:	693b      	ldr	r3, [r7, #16]
 8012384:	4413      	add	r3, r2
 8012386:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801238a:	461a      	mov	r2, r3
 801238c:	2301      	movs	r3, #1
 801238e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8012390:	6879      	ldr	r1, [r7, #4]
 8012392:	68fa      	ldr	r2, [r7, #12]
 8012394:	4613      	mov	r3, r2
 8012396:	009b      	lsls	r3, r3, #2
 8012398:	4413      	add	r3, r2
 801239a:	00db      	lsls	r3, r3, #3
 801239c:	440b      	add	r3, r1
 801239e:	335d      	adds	r3, #93	; 0x5d
 80123a0:	2201      	movs	r2, #1
 80123a2:	701a      	strb	r2, [r3, #0]
}
 80123a4:	e236      	b.n	8012814 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80123a6:	68fb      	ldr	r3, [r7, #12]
 80123a8:	015a      	lsls	r2, r3, #5
 80123aa:	693b      	ldr	r3, [r7, #16]
 80123ac:	4413      	add	r3, r2
 80123ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80123b2:	689b      	ldr	r3, [r3, #8]
 80123b4:	f003 0308 	and.w	r3, r3, #8
 80123b8:	2b08      	cmp	r3, #8
 80123ba:	d12b      	bne.n	8012414 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80123bc:	68fb      	ldr	r3, [r7, #12]
 80123be:	015a      	lsls	r2, r3, #5
 80123c0:	693b      	ldr	r3, [r7, #16]
 80123c2:	4413      	add	r3, r2
 80123c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80123c8:	461a      	mov	r2, r3
 80123ca:	2308      	movs	r3, #8
 80123cc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80123ce:	68fb      	ldr	r3, [r7, #12]
 80123d0:	015a      	lsls	r2, r3, #5
 80123d2:	693b      	ldr	r3, [r7, #16]
 80123d4:	4413      	add	r3, r2
 80123d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80123da:	68db      	ldr	r3, [r3, #12]
 80123dc:	68fa      	ldr	r2, [r7, #12]
 80123de:	0151      	lsls	r1, r2, #5
 80123e0:	693a      	ldr	r2, [r7, #16]
 80123e2:	440a      	add	r2, r1
 80123e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80123e8:	f043 0302 	orr.w	r3, r3, #2
 80123ec:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	681b      	ldr	r3, [r3, #0]
 80123f2:	68fa      	ldr	r2, [r7, #12]
 80123f4:	b2d2      	uxtb	r2, r2
 80123f6:	4611      	mov	r1, r2
 80123f8:	4618      	mov	r0, r3
 80123fa:	f003 fb7c 	bl	8015af6 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80123fe:	6879      	ldr	r1, [r7, #4]
 8012400:	68fa      	ldr	r2, [r7, #12]
 8012402:	4613      	mov	r3, r2
 8012404:	009b      	lsls	r3, r3, #2
 8012406:	4413      	add	r3, r2
 8012408:	00db      	lsls	r3, r3, #3
 801240a:	440b      	add	r3, r1
 801240c:	335d      	adds	r3, #93	; 0x5d
 801240e:	2205      	movs	r2, #5
 8012410:	701a      	strb	r2, [r3, #0]
}
 8012412:	e1ff      	b.n	8012814 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8012414:	68fb      	ldr	r3, [r7, #12]
 8012416:	015a      	lsls	r2, r3, #5
 8012418:	693b      	ldr	r3, [r7, #16]
 801241a:	4413      	add	r3, r2
 801241c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012420:	689b      	ldr	r3, [r3, #8]
 8012422:	f003 0310 	and.w	r3, r3, #16
 8012426:	2b10      	cmp	r3, #16
 8012428:	d155      	bne.n	80124d6 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 801242a:	6879      	ldr	r1, [r7, #4]
 801242c:	68fa      	ldr	r2, [r7, #12]
 801242e:	4613      	mov	r3, r2
 8012430:	009b      	lsls	r3, r3, #2
 8012432:	4413      	add	r3, r2
 8012434:	00db      	lsls	r3, r3, #3
 8012436:	440b      	add	r3, r1
 8012438:	3358      	adds	r3, #88	; 0x58
 801243a:	2200      	movs	r2, #0
 801243c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 801243e:	6879      	ldr	r1, [r7, #4]
 8012440:	68fa      	ldr	r2, [r7, #12]
 8012442:	4613      	mov	r3, r2
 8012444:	009b      	lsls	r3, r3, #2
 8012446:	4413      	add	r3, r2
 8012448:	00db      	lsls	r3, r3, #3
 801244a:	440b      	add	r3, r1
 801244c:	335d      	adds	r3, #93	; 0x5d
 801244e:	2203      	movs	r2, #3
 8012450:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8012452:	6879      	ldr	r1, [r7, #4]
 8012454:	68fa      	ldr	r2, [r7, #12]
 8012456:	4613      	mov	r3, r2
 8012458:	009b      	lsls	r3, r3, #2
 801245a:	4413      	add	r3, r2
 801245c:	00db      	lsls	r3, r3, #3
 801245e:	440b      	add	r3, r1
 8012460:	333d      	adds	r3, #61	; 0x3d
 8012462:	781b      	ldrb	r3, [r3, #0]
 8012464:	2b00      	cmp	r3, #0
 8012466:	d114      	bne.n	8012492 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8012468:	6879      	ldr	r1, [r7, #4]
 801246a:	68fa      	ldr	r2, [r7, #12]
 801246c:	4613      	mov	r3, r2
 801246e:	009b      	lsls	r3, r3, #2
 8012470:	4413      	add	r3, r2
 8012472:	00db      	lsls	r3, r3, #3
 8012474:	440b      	add	r3, r1
 8012476:	333c      	adds	r3, #60	; 0x3c
 8012478:	781b      	ldrb	r3, [r3, #0]
 801247a:	2b00      	cmp	r3, #0
 801247c:	d109      	bne.n	8012492 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 801247e:	6879      	ldr	r1, [r7, #4]
 8012480:	68fa      	ldr	r2, [r7, #12]
 8012482:	4613      	mov	r3, r2
 8012484:	009b      	lsls	r3, r3, #2
 8012486:	4413      	add	r3, r2
 8012488:	00db      	lsls	r3, r3, #3
 801248a:	440b      	add	r3, r1
 801248c:	333d      	adds	r3, #61	; 0x3d
 801248e:	2201      	movs	r2, #1
 8012490:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8012492:	68fb      	ldr	r3, [r7, #12]
 8012494:	015a      	lsls	r2, r3, #5
 8012496:	693b      	ldr	r3, [r7, #16]
 8012498:	4413      	add	r3, r2
 801249a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801249e:	68db      	ldr	r3, [r3, #12]
 80124a0:	68fa      	ldr	r2, [r7, #12]
 80124a2:	0151      	lsls	r1, r2, #5
 80124a4:	693a      	ldr	r2, [r7, #16]
 80124a6:	440a      	add	r2, r1
 80124a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80124ac:	f043 0302 	orr.w	r3, r3, #2
 80124b0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	681b      	ldr	r3, [r3, #0]
 80124b6:	68fa      	ldr	r2, [r7, #12]
 80124b8:	b2d2      	uxtb	r2, r2
 80124ba:	4611      	mov	r1, r2
 80124bc:	4618      	mov	r0, r3
 80124be:	f003 fb1a 	bl	8015af6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80124c2:	68fb      	ldr	r3, [r7, #12]
 80124c4:	015a      	lsls	r2, r3, #5
 80124c6:	693b      	ldr	r3, [r7, #16]
 80124c8:	4413      	add	r3, r2
 80124ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80124ce:	461a      	mov	r2, r3
 80124d0:	2310      	movs	r3, #16
 80124d2:	6093      	str	r3, [r2, #8]
}
 80124d4:	e19e      	b.n	8012814 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80124d6:	68fb      	ldr	r3, [r7, #12]
 80124d8:	015a      	lsls	r2, r3, #5
 80124da:	693b      	ldr	r3, [r7, #16]
 80124dc:	4413      	add	r3, r2
 80124de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80124e2:	689b      	ldr	r3, [r3, #8]
 80124e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80124e8:	2b80      	cmp	r3, #128	; 0x80
 80124ea:	d12b      	bne.n	8012544 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80124ec:	68fb      	ldr	r3, [r7, #12]
 80124ee:	015a      	lsls	r2, r3, #5
 80124f0:	693b      	ldr	r3, [r7, #16]
 80124f2:	4413      	add	r3, r2
 80124f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80124f8:	68db      	ldr	r3, [r3, #12]
 80124fa:	68fa      	ldr	r2, [r7, #12]
 80124fc:	0151      	lsls	r1, r2, #5
 80124fe:	693a      	ldr	r2, [r7, #16]
 8012500:	440a      	add	r2, r1
 8012502:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8012506:	f043 0302 	orr.w	r3, r3, #2
 801250a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	681b      	ldr	r3, [r3, #0]
 8012510:	68fa      	ldr	r2, [r7, #12]
 8012512:	b2d2      	uxtb	r2, r2
 8012514:	4611      	mov	r1, r2
 8012516:	4618      	mov	r0, r3
 8012518:	f003 faed 	bl	8015af6 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 801251c:	6879      	ldr	r1, [r7, #4]
 801251e:	68fa      	ldr	r2, [r7, #12]
 8012520:	4613      	mov	r3, r2
 8012522:	009b      	lsls	r3, r3, #2
 8012524:	4413      	add	r3, r2
 8012526:	00db      	lsls	r3, r3, #3
 8012528:	440b      	add	r3, r1
 801252a:	335d      	adds	r3, #93	; 0x5d
 801252c:	2206      	movs	r2, #6
 801252e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8012530:	68fb      	ldr	r3, [r7, #12]
 8012532:	015a      	lsls	r2, r3, #5
 8012534:	693b      	ldr	r3, [r7, #16]
 8012536:	4413      	add	r3, r2
 8012538:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801253c:	461a      	mov	r2, r3
 801253e:	2380      	movs	r3, #128	; 0x80
 8012540:	6093      	str	r3, [r2, #8]
}
 8012542:	e167      	b.n	8012814 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8012544:	68fb      	ldr	r3, [r7, #12]
 8012546:	015a      	lsls	r2, r3, #5
 8012548:	693b      	ldr	r3, [r7, #16]
 801254a:	4413      	add	r3, r2
 801254c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012550:	689b      	ldr	r3, [r3, #8]
 8012552:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8012556:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801255a:	d135      	bne.n	80125c8 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 801255c:	68fb      	ldr	r3, [r7, #12]
 801255e:	015a      	lsls	r2, r3, #5
 8012560:	693b      	ldr	r3, [r7, #16]
 8012562:	4413      	add	r3, r2
 8012564:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012568:	68db      	ldr	r3, [r3, #12]
 801256a:	68fa      	ldr	r2, [r7, #12]
 801256c:	0151      	lsls	r1, r2, #5
 801256e:	693a      	ldr	r2, [r7, #16]
 8012570:	440a      	add	r2, r1
 8012572:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8012576:	f043 0302 	orr.w	r3, r3, #2
 801257a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	681b      	ldr	r3, [r3, #0]
 8012580:	68fa      	ldr	r2, [r7, #12]
 8012582:	b2d2      	uxtb	r2, r2
 8012584:	4611      	mov	r1, r2
 8012586:	4618      	mov	r0, r3
 8012588:	f003 fab5 	bl	8015af6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 801258c:	68fb      	ldr	r3, [r7, #12]
 801258e:	015a      	lsls	r2, r3, #5
 8012590:	693b      	ldr	r3, [r7, #16]
 8012592:	4413      	add	r3, r2
 8012594:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012598:	461a      	mov	r2, r3
 801259a:	2310      	movs	r3, #16
 801259c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 801259e:	68fb      	ldr	r3, [r7, #12]
 80125a0:	015a      	lsls	r2, r3, #5
 80125a2:	693b      	ldr	r3, [r7, #16]
 80125a4:	4413      	add	r3, r2
 80125a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80125aa:	461a      	mov	r2, r3
 80125ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80125b0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80125b2:	6879      	ldr	r1, [r7, #4]
 80125b4:	68fa      	ldr	r2, [r7, #12]
 80125b6:	4613      	mov	r3, r2
 80125b8:	009b      	lsls	r3, r3, #2
 80125ba:	4413      	add	r3, r2
 80125bc:	00db      	lsls	r3, r3, #3
 80125be:	440b      	add	r3, r1
 80125c0:	335d      	adds	r3, #93	; 0x5d
 80125c2:	2208      	movs	r2, #8
 80125c4:	701a      	strb	r2, [r3, #0]
}
 80125c6:	e125      	b.n	8012814 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80125c8:	68fb      	ldr	r3, [r7, #12]
 80125ca:	015a      	lsls	r2, r3, #5
 80125cc:	693b      	ldr	r3, [r7, #16]
 80125ce:	4413      	add	r3, r2
 80125d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80125d4:	689b      	ldr	r3, [r3, #8]
 80125d6:	f003 0302 	and.w	r3, r3, #2
 80125da:	2b02      	cmp	r3, #2
 80125dc:	f040 811a 	bne.w	8012814 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80125e0:	68fb      	ldr	r3, [r7, #12]
 80125e2:	015a      	lsls	r2, r3, #5
 80125e4:	693b      	ldr	r3, [r7, #16]
 80125e6:	4413      	add	r3, r2
 80125e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80125ec:	68db      	ldr	r3, [r3, #12]
 80125ee:	68fa      	ldr	r2, [r7, #12]
 80125f0:	0151      	lsls	r1, r2, #5
 80125f2:	693a      	ldr	r2, [r7, #16]
 80125f4:	440a      	add	r2, r1
 80125f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80125fa:	f023 0302 	bic.w	r3, r3, #2
 80125fe:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8012600:	6879      	ldr	r1, [r7, #4]
 8012602:	68fa      	ldr	r2, [r7, #12]
 8012604:	4613      	mov	r3, r2
 8012606:	009b      	lsls	r3, r3, #2
 8012608:	4413      	add	r3, r2
 801260a:	00db      	lsls	r3, r3, #3
 801260c:	440b      	add	r3, r1
 801260e:	335d      	adds	r3, #93	; 0x5d
 8012610:	781b      	ldrb	r3, [r3, #0]
 8012612:	2b01      	cmp	r3, #1
 8012614:	d137      	bne.n	8012686 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8012616:	6879      	ldr	r1, [r7, #4]
 8012618:	68fa      	ldr	r2, [r7, #12]
 801261a:	4613      	mov	r3, r2
 801261c:	009b      	lsls	r3, r3, #2
 801261e:	4413      	add	r3, r2
 8012620:	00db      	lsls	r3, r3, #3
 8012622:	440b      	add	r3, r1
 8012624:	335c      	adds	r3, #92	; 0x5c
 8012626:	2201      	movs	r2, #1
 8012628:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 801262a:	6879      	ldr	r1, [r7, #4]
 801262c:	68fa      	ldr	r2, [r7, #12]
 801262e:	4613      	mov	r3, r2
 8012630:	009b      	lsls	r3, r3, #2
 8012632:	4413      	add	r3, r2
 8012634:	00db      	lsls	r3, r3, #3
 8012636:	440b      	add	r3, r1
 8012638:	333f      	adds	r3, #63	; 0x3f
 801263a:	781b      	ldrb	r3, [r3, #0]
 801263c:	2b02      	cmp	r3, #2
 801263e:	d00b      	beq.n	8012658 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8012640:	6879      	ldr	r1, [r7, #4]
 8012642:	68fa      	ldr	r2, [r7, #12]
 8012644:	4613      	mov	r3, r2
 8012646:	009b      	lsls	r3, r3, #2
 8012648:	4413      	add	r3, r2
 801264a:	00db      	lsls	r3, r3, #3
 801264c:	440b      	add	r3, r1
 801264e:	333f      	adds	r3, #63	; 0x3f
 8012650:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8012652:	2b03      	cmp	r3, #3
 8012654:	f040 80c5 	bne.w	80127e2 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8012658:	6879      	ldr	r1, [r7, #4]
 801265a:	68fa      	ldr	r2, [r7, #12]
 801265c:	4613      	mov	r3, r2
 801265e:	009b      	lsls	r3, r3, #2
 8012660:	4413      	add	r3, r2
 8012662:	00db      	lsls	r3, r3, #3
 8012664:	440b      	add	r3, r1
 8012666:	3351      	adds	r3, #81	; 0x51
 8012668:	781b      	ldrb	r3, [r3, #0]
 801266a:	f083 0301 	eor.w	r3, r3, #1
 801266e:	b2d8      	uxtb	r0, r3
 8012670:	6879      	ldr	r1, [r7, #4]
 8012672:	68fa      	ldr	r2, [r7, #12]
 8012674:	4613      	mov	r3, r2
 8012676:	009b      	lsls	r3, r3, #2
 8012678:	4413      	add	r3, r2
 801267a:	00db      	lsls	r3, r3, #3
 801267c:	440b      	add	r3, r1
 801267e:	3351      	adds	r3, #81	; 0x51
 8012680:	4602      	mov	r2, r0
 8012682:	701a      	strb	r2, [r3, #0]
 8012684:	e0ad      	b.n	80127e2 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8012686:	6879      	ldr	r1, [r7, #4]
 8012688:	68fa      	ldr	r2, [r7, #12]
 801268a:	4613      	mov	r3, r2
 801268c:	009b      	lsls	r3, r3, #2
 801268e:	4413      	add	r3, r2
 8012690:	00db      	lsls	r3, r3, #3
 8012692:	440b      	add	r3, r1
 8012694:	335d      	adds	r3, #93	; 0x5d
 8012696:	781b      	ldrb	r3, [r3, #0]
 8012698:	2b03      	cmp	r3, #3
 801269a:	d10a      	bne.n	80126b2 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 801269c:	6879      	ldr	r1, [r7, #4]
 801269e:	68fa      	ldr	r2, [r7, #12]
 80126a0:	4613      	mov	r3, r2
 80126a2:	009b      	lsls	r3, r3, #2
 80126a4:	4413      	add	r3, r2
 80126a6:	00db      	lsls	r3, r3, #3
 80126a8:	440b      	add	r3, r1
 80126aa:	335c      	adds	r3, #92	; 0x5c
 80126ac:	2202      	movs	r2, #2
 80126ae:	701a      	strb	r2, [r3, #0]
 80126b0:	e097      	b.n	80127e2 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80126b2:	6879      	ldr	r1, [r7, #4]
 80126b4:	68fa      	ldr	r2, [r7, #12]
 80126b6:	4613      	mov	r3, r2
 80126b8:	009b      	lsls	r3, r3, #2
 80126ba:	4413      	add	r3, r2
 80126bc:	00db      	lsls	r3, r3, #3
 80126be:	440b      	add	r3, r1
 80126c0:	335d      	adds	r3, #93	; 0x5d
 80126c2:	781b      	ldrb	r3, [r3, #0]
 80126c4:	2b04      	cmp	r3, #4
 80126c6:	d10a      	bne.n	80126de <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80126c8:	6879      	ldr	r1, [r7, #4]
 80126ca:	68fa      	ldr	r2, [r7, #12]
 80126cc:	4613      	mov	r3, r2
 80126ce:	009b      	lsls	r3, r3, #2
 80126d0:	4413      	add	r3, r2
 80126d2:	00db      	lsls	r3, r3, #3
 80126d4:	440b      	add	r3, r1
 80126d6:	335c      	adds	r3, #92	; 0x5c
 80126d8:	2202      	movs	r2, #2
 80126da:	701a      	strb	r2, [r3, #0]
 80126dc:	e081      	b.n	80127e2 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80126de:	6879      	ldr	r1, [r7, #4]
 80126e0:	68fa      	ldr	r2, [r7, #12]
 80126e2:	4613      	mov	r3, r2
 80126e4:	009b      	lsls	r3, r3, #2
 80126e6:	4413      	add	r3, r2
 80126e8:	00db      	lsls	r3, r3, #3
 80126ea:	440b      	add	r3, r1
 80126ec:	335d      	adds	r3, #93	; 0x5d
 80126ee:	781b      	ldrb	r3, [r3, #0]
 80126f0:	2b05      	cmp	r3, #5
 80126f2:	d10a      	bne.n	801270a <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80126f4:	6879      	ldr	r1, [r7, #4]
 80126f6:	68fa      	ldr	r2, [r7, #12]
 80126f8:	4613      	mov	r3, r2
 80126fa:	009b      	lsls	r3, r3, #2
 80126fc:	4413      	add	r3, r2
 80126fe:	00db      	lsls	r3, r3, #3
 8012700:	440b      	add	r3, r1
 8012702:	335c      	adds	r3, #92	; 0x5c
 8012704:	2205      	movs	r2, #5
 8012706:	701a      	strb	r2, [r3, #0]
 8012708:	e06b      	b.n	80127e2 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 801270a:	6879      	ldr	r1, [r7, #4]
 801270c:	68fa      	ldr	r2, [r7, #12]
 801270e:	4613      	mov	r3, r2
 8012710:	009b      	lsls	r3, r3, #2
 8012712:	4413      	add	r3, r2
 8012714:	00db      	lsls	r3, r3, #3
 8012716:	440b      	add	r3, r1
 8012718:	335d      	adds	r3, #93	; 0x5d
 801271a:	781b      	ldrb	r3, [r3, #0]
 801271c:	2b06      	cmp	r3, #6
 801271e:	d00a      	beq.n	8012736 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8012720:	6879      	ldr	r1, [r7, #4]
 8012722:	68fa      	ldr	r2, [r7, #12]
 8012724:	4613      	mov	r3, r2
 8012726:	009b      	lsls	r3, r3, #2
 8012728:	4413      	add	r3, r2
 801272a:	00db      	lsls	r3, r3, #3
 801272c:	440b      	add	r3, r1
 801272e:	335d      	adds	r3, #93	; 0x5d
 8012730:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8012732:	2b08      	cmp	r3, #8
 8012734:	d155      	bne.n	80127e2 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8012736:	6879      	ldr	r1, [r7, #4]
 8012738:	68fa      	ldr	r2, [r7, #12]
 801273a:	4613      	mov	r3, r2
 801273c:	009b      	lsls	r3, r3, #2
 801273e:	4413      	add	r3, r2
 8012740:	00db      	lsls	r3, r3, #3
 8012742:	440b      	add	r3, r1
 8012744:	3358      	adds	r3, #88	; 0x58
 8012746:	681b      	ldr	r3, [r3, #0]
 8012748:	1c59      	adds	r1, r3, #1
 801274a:	6878      	ldr	r0, [r7, #4]
 801274c:	68fa      	ldr	r2, [r7, #12]
 801274e:	4613      	mov	r3, r2
 8012750:	009b      	lsls	r3, r3, #2
 8012752:	4413      	add	r3, r2
 8012754:	00db      	lsls	r3, r3, #3
 8012756:	4403      	add	r3, r0
 8012758:	3358      	adds	r3, #88	; 0x58
 801275a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 801275c:	6879      	ldr	r1, [r7, #4]
 801275e:	68fa      	ldr	r2, [r7, #12]
 8012760:	4613      	mov	r3, r2
 8012762:	009b      	lsls	r3, r3, #2
 8012764:	4413      	add	r3, r2
 8012766:	00db      	lsls	r3, r3, #3
 8012768:	440b      	add	r3, r1
 801276a:	3358      	adds	r3, #88	; 0x58
 801276c:	681b      	ldr	r3, [r3, #0]
 801276e:	2b03      	cmp	r3, #3
 8012770:	d914      	bls.n	801279c <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8012772:	6879      	ldr	r1, [r7, #4]
 8012774:	68fa      	ldr	r2, [r7, #12]
 8012776:	4613      	mov	r3, r2
 8012778:	009b      	lsls	r3, r3, #2
 801277a:	4413      	add	r3, r2
 801277c:	00db      	lsls	r3, r3, #3
 801277e:	440b      	add	r3, r1
 8012780:	3358      	adds	r3, #88	; 0x58
 8012782:	2200      	movs	r2, #0
 8012784:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8012786:	6879      	ldr	r1, [r7, #4]
 8012788:	68fa      	ldr	r2, [r7, #12]
 801278a:	4613      	mov	r3, r2
 801278c:	009b      	lsls	r3, r3, #2
 801278e:	4413      	add	r3, r2
 8012790:	00db      	lsls	r3, r3, #3
 8012792:	440b      	add	r3, r1
 8012794:	335c      	adds	r3, #92	; 0x5c
 8012796:	2204      	movs	r2, #4
 8012798:	701a      	strb	r2, [r3, #0]
 801279a:	e009      	b.n	80127b0 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 801279c:	6879      	ldr	r1, [r7, #4]
 801279e:	68fa      	ldr	r2, [r7, #12]
 80127a0:	4613      	mov	r3, r2
 80127a2:	009b      	lsls	r3, r3, #2
 80127a4:	4413      	add	r3, r2
 80127a6:	00db      	lsls	r3, r3, #3
 80127a8:	440b      	add	r3, r1
 80127aa:	335c      	adds	r3, #92	; 0x5c
 80127ac:	2202      	movs	r2, #2
 80127ae:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80127b0:	68fb      	ldr	r3, [r7, #12]
 80127b2:	015a      	lsls	r2, r3, #5
 80127b4:	693b      	ldr	r3, [r7, #16]
 80127b6:	4413      	add	r3, r2
 80127b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80127bc:	681b      	ldr	r3, [r3, #0]
 80127be:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80127c0:	68bb      	ldr	r3, [r7, #8]
 80127c2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80127c6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80127c8:	68bb      	ldr	r3, [r7, #8]
 80127ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80127ce:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80127d0:	68fb      	ldr	r3, [r7, #12]
 80127d2:	015a      	lsls	r2, r3, #5
 80127d4:	693b      	ldr	r3, [r7, #16]
 80127d6:	4413      	add	r3, r2
 80127d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80127dc:	461a      	mov	r2, r3
 80127de:	68bb      	ldr	r3, [r7, #8]
 80127e0:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80127e2:	68fb      	ldr	r3, [r7, #12]
 80127e4:	015a      	lsls	r2, r3, #5
 80127e6:	693b      	ldr	r3, [r7, #16]
 80127e8:	4413      	add	r3, r2
 80127ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80127ee:	461a      	mov	r2, r3
 80127f0:	2302      	movs	r3, #2
 80127f2:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80127f4:	68fb      	ldr	r3, [r7, #12]
 80127f6:	b2d8      	uxtb	r0, r3
 80127f8:	6879      	ldr	r1, [r7, #4]
 80127fa:	68fa      	ldr	r2, [r7, #12]
 80127fc:	4613      	mov	r3, r2
 80127fe:	009b      	lsls	r3, r3, #2
 8012800:	4413      	add	r3, r2
 8012802:	00db      	lsls	r3, r3, #3
 8012804:	440b      	add	r3, r1
 8012806:	335c      	adds	r3, #92	; 0x5c
 8012808:	781b      	ldrb	r3, [r3, #0]
 801280a:	461a      	mov	r2, r3
 801280c:	4601      	mov	r1, r0
 801280e:	6878      	ldr	r0, [r7, #4]
 8012810:	f004 fc74 	bl	80170fc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8012814:	bf00      	nop
 8012816:	3718      	adds	r7, #24
 8012818:	46bd      	mov	sp, r7
 801281a:	bd80      	pop	{r7, pc}

0801281c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 801281c:	b580      	push	{r7, lr}
 801281e:	b08a      	sub	sp, #40	; 0x28
 8012820:	af00      	add	r7, sp, #0
 8012822:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	681b      	ldr	r3, [r3, #0]
 8012828:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 801282a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801282c:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	681b      	ldr	r3, [r3, #0]
 8012832:	6a1b      	ldr	r3, [r3, #32]
 8012834:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8012836:	69fb      	ldr	r3, [r7, #28]
 8012838:	f003 030f 	and.w	r3, r3, #15
 801283c:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 801283e:	69fb      	ldr	r3, [r7, #28]
 8012840:	0c5b      	lsrs	r3, r3, #17
 8012842:	f003 030f 	and.w	r3, r3, #15
 8012846:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8012848:	69fb      	ldr	r3, [r7, #28]
 801284a:	091b      	lsrs	r3, r3, #4
 801284c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8012850:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8012852:	697b      	ldr	r3, [r7, #20]
 8012854:	2b02      	cmp	r3, #2
 8012856:	d003      	beq.n	8012860 <HCD_RXQLVL_IRQHandler+0x44>
 8012858:	2b05      	cmp	r3, #5
 801285a:	f000 8082 	beq.w	8012962 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 801285e:	e083      	b.n	8012968 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8012860:	693b      	ldr	r3, [r7, #16]
 8012862:	2b00      	cmp	r3, #0
 8012864:	d07f      	beq.n	8012966 <HCD_RXQLVL_IRQHandler+0x14a>
 8012866:	6879      	ldr	r1, [r7, #4]
 8012868:	69ba      	ldr	r2, [r7, #24]
 801286a:	4613      	mov	r3, r2
 801286c:	009b      	lsls	r3, r3, #2
 801286e:	4413      	add	r3, r2
 8012870:	00db      	lsls	r3, r3, #3
 8012872:	440b      	add	r3, r1
 8012874:	3344      	adds	r3, #68	; 0x44
 8012876:	681b      	ldr	r3, [r3, #0]
 8012878:	2b00      	cmp	r3, #0
 801287a:	d074      	beq.n	8012966 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	6818      	ldr	r0, [r3, #0]
 8012880:	6879      	ldr	r1, [r7, #4]
 8012882:	69ba      	ldr	r2, [r7, #24]
 8012884:	4613      	mov	r3, r2
 8012886:	009b      	lsls	r3, r3, #2
 8012888:	4413      	add	r3, r2
 801288a:	00db      	lsls	r3, r3, #3
 801288c:	440b      	add	r3, r1
 801288e:	3344      	adds	r3, #68	; 0x44
 8012890:	681b      	ldr	r3, [r3, #0]
 8012892:	693a      	ldr	r2, [r7, #16]
 8012894:	b292      	uxth	r2, r2
 8012896:	4619      	mov	r1, r3
 8012898:	f002 fd0d 	bl	80152b6 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 801289c:	6879      	ldr	r1, [r7, #4]
 801289e:	69ba      	ldr	r2, [r7, #24]
 80128a0:	4613      	mov	r3, r2
 80128a2:	009b      	lsls	r3, r3, #2
 80128a4:	4413      	add	r3, r2
 80128a6:	00db      	lsls	r3, r3, #3
 80128a8:	440b      	add	r3, r1
 80128aa:	3344      	adds	r3, #68	; 0x44
 80128ac:	681a      	ldr	r2, [r3, #0]
 80128ae:	693b      	ldr	r3, [r7, #16]
 80128b0:	18d1      	adds	r1, r2, r3
 80128b2:	6878      	ldr	r0, [r7, #4]
 80128b4:	69ba      	ldr	r2, [r7, #24]
 80128b6:	4613      	mov	r3, r2
 80128b8:	009b      	lsls	r3, r3, #2
 80128ba:	4413      	add	r3, r2
 80128bc:	00db      	lsls	r3, r3, #3
 80128be:	4403      	add	r3, r0
 80128c0:	3344      	adds	r3, #68	; 0x44
 80128c2:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 80128c4:	6879      	ldr	r1, [r7, #4]
 80128c6:	69ba      	ldr	r2, [r7, #24]
 80128c8:	4613      	mov	r3, r2
 80128ca:	009b      	lsls	r3, r3, #2
 80128cc:	4413      	add	r3, r2
 80128ce:	00db      	lsls	r3, r3, #3
 80128d0:	440b      	add	r3, r1
 80128d2:	334c      	adds	r3, #76	; 0x4c
 80128d4:	681a      	ldr	r2, [r3, #0]
 80128d6:	693b      	ldr	r3, [r7, #16]
 80128d8:	18d1      	adds	r1, r2, r3
 80128da:	6878      	ldr	r0, [r7, #4]
 80128dc:	69ba      	ldr	r2, [r7, #24]
 80128de:	4613      	mov	r3, r2
 80128e0:	009b      	lsls	r3, r3, #2
 80128e2:	4413      	add	r3, r2
 80128e4:	00db      	lsls	r3, r3, #3
 80128e6:	4403      	add	r3, r0
 80128e8:	334c      	adds	r3, #76	; 0x4c
 80128ea:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 80128ec:	69bb      	ldr	r3, [r7, #24]
 80128ee:	015a      	lsls	r2, r3, #5
 80128f0:	6a3b      	ldr	r3, [r7, #32]
 80128f2:	4413      	add	r3, r2
 80128f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80128f8:	691a      	ldr	r2, [r3, #16]
 80128fa:	4b1d      	ldr	r3, [pc, #116]	; (8012970 <HCD_RXQLVL_IRQHandler+0x154>)
 80128fc:	4013      	ands	r3, r2
 80128fe:	2b00      	cmp	r3, #0
 8012900:	d031      	beq.n	8012966 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8012902:	69bb      	ldr	r3, [r7, #24]
 8012904:	015a      	lsls	r2, r3, #5
 8012906:	6a3b      	ldr	r3, [r7, #32]
 8012908:	4413      	add	r3, r2
 801290a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801290e:	681b      	ldr	r3, [r3, #0]
 8012910:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8012912:	68fb      	ldr	r3, [r7, #12]
 8012914:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8012918:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 801291a:	68fb      	ldr	r3, [r7, #12]
 801291c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8012920:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8012922:	69bb      	ldr	r3, [r7, #24]
 8012924:	015a      	lsls	r2, r3, #5
 8012926:	6a3b      	ldr	r3, [r7, #32]
 8012928:	4413      	add	r3, r2
 801292a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801292e:	461a      	mov	r2, r3
 8012930:	68fb      	ldr	r3, [r7, #12]
 8012932:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8012934:	6879      	ldr	r1, [r7, #4]
 8012936:	69ba      	ldr	r2, [r7, #24]
 8012938:	4613      	mov	r3, r2
 801293a:	009b      	lsls	r3, r3, #2
 801293c:	4413      	add	r3, r2
 801293e:	00db      	lsls	r3, r3, #3
 8012940:	440b      	add	r3, r1
 8012942:	3350      	adds	r3, #80	; 0x50
 8012944:	781b      	ldrb	r3, [r3, #0]
 8012946:	f083 0301 	eor.w	r3, r3, #1
 801294a:	b2d8      	uxtb	r0, r3
 801294c:	6879      	ldr	r1, [r7, #4]
 801294e:	69ba      	ldr	r2, [r7, #24]
 8012950:	4613      	mov	r3, r2
 8012952:	009b      	lsls	r3, r3, #2
 8012954:	4413      	add	r3, r2
 8012956:	00db      	lsls	r3, r3, #3
 8012958:	440b      	add	r3, r1
 801295a:	3350      	adds	r3, #80	; 0x50
 801295c:	4602      	mov	r2, r0
 801295e:	701a      	strb	r2, [r3, #0]
      break;
 8012960:	e001      	b.n	8012966 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8012962:	bf00      	nop
 8012964:	e000      	b.n	8012968 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8012966:	bf00      	nop
  }
}
 8012968:	bf00      	nop
 801296a:	3728      	adds	r7, #40	; 0x28
 801296c:	46bd      	mov	sp, r7
 801296e:	bd80      	pop	{r7, pc}
 8012970:	1ff80000 	.word	0x1ff80000

08012974 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8012974:	b580      	push	{r7, lr}
 8012976:	b086      	sub	sp, #24
 8012978:	af00      	add	r7, sp, #0
 801297a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	681b      	ldr	r3, [r3, #0]
 8012980:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012982:	697b      	ldr	r3, [r7, #20]
 8012984:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8012986:	693b      	ldr	r3, [r7, #16]
 8012988:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 801298c:	681b      	ldr	r3, [r3, #0]
 801298e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8012990:	693b      	ldr	r3, [r7, #16]
 8012992:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8012996:	681b      	ldr	r3, [r3, #0]
 8012998:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 801299a:	68bb      	ldr	r3, [r7, #8]
 801299c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80129a0:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80129a2:	68fb      	ldr	r3, [r7, #12]
 80129a4:	f003 0302 	and.w	r3, r3, #2
 80129a8:	2b02      	cmp	r3, #2
 80129aa:	d10b      	bne.n	80129c4 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80129ac:	68fb      	ldr	r3, [r7, #12]
 80129ae:	f003 0301 	and.w	r3, r3, #1
 80129b2:	2b01      	cmp	r3, #1
 80129b4:	d102      	bne.n	80129bc <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80129b6:	6878      	ldr	r0, [r7, #4]
 80129b8:	f004 fb84 	bl	80170c4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80129bc:	68bb      	ldr	r3, [r7, #8]
 80129be:	f043 0302 	orr.w	r3, r3, #2
 80129c2:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80129c4:	68fb      	ldr	r3, [r7, #12]
 80129c6:	f003 0308 	and.w	r3, r3, #8
 80129ca:	2b08      	cmp	r3, #8
 80129cc:	d132      	bne.n	8012a34 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80129ce:	68bb      	ldr	r3, [r7, #8]
 80129d0:	f043 0308 	orr.w	r3, r3, #8
 80129d4:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80129d6:	68fb      	ldr	r3, [r7, #12]
 80129d8:	f003 0304 	and.w	r3, r3, #4
 80129dc:	2b04      	cmp	r3, #4
 80129de:	d126      	bne.n	8012a2e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80129e0:	687b      	ldr	r3, [r7, #4]
 80129e2:	699b      	ldr	r3, [r3, #24]
 80129e4:	2b02      	cmp	r3, #2
 80129e6:	d113      	bne.n	8012a10 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80129e8:	68fb      	ldr	r3, [r7, #12]
 80129ea:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80129ee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80129f2:	d106      	bne.n	8012a02 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	681b      	ldr	r3, [r3, #0]
 80129f8:	2102      	movs	r1, #2
 80129fa:	4618      	mov	r0, r3
 80129fc:	f002 fd96 	bl	801552c <USB_InitFSLSPClkSel>
 8012a00:	e011      	b.n	8012a26 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	681b      	ldr	r3, [r3, #0]
 8012a06:	2101      	movs	r1, #1
 8012a08:	4618      	mov	r0, r3
 8012a0a:	f002 fd8f 	bl	801552c <USB_InitFSLSPClkSel>
 8012a0e:	e00a      	b.n	8012a26 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8012a10:	687b      	ldr	r3, [r7, #4]
 8012a12:	68db      	ldr	r3, [r3, #12]
 8012a14:	2b01      	cmp	r3, #1
 8012a16:	d106      	bne.n	8012a26 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8012a18:	693b      	ldr	r3, [r7, #16]
 8012a1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012a1e:	461a      	mov	r2, r3
 8012a20:	f64e 2360 	movw	r3, #60000	; 0xea60
 8012a24:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8012a26:	6878      	ldr	r0, [r7, #4]
 8012a28:	f004 fb76 	bl	8017118 <HAL_HCD_PortEnabled_Callback>
 8012a2c:	e002      	b.n	8012a34 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8012a2e:	6878      	ldr	r0, [r7, #4]
 8012a30:	f004 fb80 	bl	8017134 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8012a34:	68fb      	ldr	r3, [r7, #12]
 8012a36:	f003 0320 	and.w	r3, r3, #32
 8012a3a:	2b20      	cmp	r3, #32
 8012a3c:	d103      	bne.n	8012a46 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8012a3e:	68bb      	ldr	r3, [r7, #8]
 8012a40:	f043 0320 	orr.w	r3, r3, #32
 8012a44:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8012a46:	693b      	ldr	r3, [r7, #16]
 8012a48:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8012a4c:	461a      	mov	r2, r3
 8012a4e:	68bb      	ldr	r3, [r7, #8]
 8012a50:	6013      	str	r3, [r2, #0]
}
 8012a52:	bf00      	nop
 8012a54:	3718      	adds	r7, #24
 8012a56:	46bd      	mov	sp, r7
 8012a58:	bd80      	pop	{r7, pc}
	...

08012a5c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8012a5c:	b580      	push	{r7, lr}
 8012a5e:	b084      	sub	sp, #16
 8012a60:	af00      	add	r7, sp, #0
 8012a62:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	2b00      	cmp	r3, #0
 8012a68:	d101      	bne.n	8012a6e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8012a6a:	2301      	movs	r3, #1
 8012a6c:	e11f      	b.n	8012cae <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012a74:	b2db      	uxtb	r3, r3
 8012a76:	2b00      	cmp	r3, #0
 8012a78:	d106      	bne.n	8012a88 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	2200      	movs	r2, #0
 8012a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8012a82:	6878      	ldr	r0, [r7, #4]
 8012a84:	f7fd fb12 	bl	80100ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	2224      	movs	r2, #36	; 0x24
 8012a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	681b      	ldr	r3, [r3, #0]
 8012a94:	681a      	ldr	r2, [r3, #0]
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	681b      	ldr	r3, [r3, #0]
 8012a9a:	f022 0201 	bic.w	r2, r2, #1
 8012a9e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	681b      	ldr	r3, [r3, #0]
 8012aa4:	681a      	ldr	r2, [r3, #0]
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	681b      	ldr	r3, [r3, #0]
 8012aaa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8012aae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	681b      	ldr	r3, [r3, #0]
 8012ab4:	681a      	ldr	r2, [r3, #0]
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	681b      	ldr	r3, [r3, #0]
 8012aba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8012abe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8012ac0:	f001 f9de 	bl	8013e80 <HAL_RCC_GetPCLK1Freq>
 8012ac4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	685b      	ldr	r3, [r3, #4]
 8012aca:	4a7b      	ldr	r2, [pc, #492]	; (8012cb8 <HAL_I2C_Init+0x25c>)
 8012acc:	4293      	cmp	r3, r2
 8012ace:	d807      	bhi.n	8012ae0 <HAL_I2C_Init+0x84>
 8012ad0:	68fb      	ldr	r3, [r7, #12]
 8012ad2:	4a7a      	ldr	r2, [pc, #488]	; (8012cbc <HAL_I2C_Init+0x260>)
 8012ad4:	4293      	cmp	r3, r2
 8012ad6:	bf94      	ite	ls
 8012ad8:	2301      	movls	r3, #1
 8012ada:	2300      	movhi	r3, #0
 8012adc:	b2db      	uxtb	r3, r3
 8012ade:	e006      	b.n	8012aee <HAL_I2C_Init+0x92>
 8012ae0:	68fb      	ldr	r3, [r7, #12]
 8012ae2:	4a77      	ldr	r2, [pc, #476]	; (8012cc0 <HAL_I2C_Init+0x264>)
 8012ae4:	4293      	cmp	r3, r2
 8012ae6:	bf94      	ite	ls
 8012ae8:	2301      	movls	r3, #1
 8012aea:	2300      	movhi	r3, #0
 8012aec:	b2db      	uxtb	r3, r3
 8012aee:	2b00      	cmp	r3, #0
 8012af0:	d001      	beq.n	8012af6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8012af2:	2301      	movs	r3, #1
 8012af4:	e0db      	b.n	8012cae <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8012af6:	68fb      	ldr	r3, [r7, #12]
 8012af8:	4a72      	ldr	r2, [pc, #456]	; (8012cc4 <HAL_I2C_Init+0x268>)
 8012afa:	fba2 2303 	umull	r2, r3, r2, r3
 8012afe:	0c9b      	lsrs	r3, r3, #18
 8012b00:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	681b      	ldr	r3, [r3, #0]
 8012b06:	685b      	ldr	r3, [r3, #4]
 8012b08:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	681b      	ldr	r3, [r3, #0]
 8012b10:	68ba      	ldr	r2, [r7, #8]
 8012b12:	430a      	orrs	r2, r1
 8012b14:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8012b16:	687b      	ldr	r3, [r7, #4]
 8012b18:	681b      	ldr	r3, [r3, #0]
 8012b1a:	6a1b      	ldr	r3, [r3, #32]
 8012b1c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	685b      	ldr	r3, [r3, #4]
 8012b24:	4a64      	ldr	r2, [pc, #400]	; (8012cb8 <HAL_I2C_Init+0x25c>)
 8012b26:	4293      	cmp	r3, r2
 8012b28:	d802      	bhi.n	8012b30 <HAL_I2C_Init+0xd4>
 8012b2a:	68bb      	ldr	r3, [r7, #8]
 8012b2c:	3301      	adds	r3, #1
 8012b2e:	e009      	b.n	8012b44 <HAL_I2C_Init+0xe8>
 8012b30:	68bb      	ldr	r3, [r7, #8]
 8012b32:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8012b36:	fb02 f303 	mul.w	r3, r2, r3
 8012b3a:	4a63      	ldr	r2, [pc, #396]	; (8012cc8 <HAL_I2C_Init+0x26c>)
 8012b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8012b40:	099b      	lsrs	r3, r3, #6
 8012b42:	3301      	adds	r3, #1
 8012b44:	687a      	ldr	r2, [r7, #4]
 8012b46:	6812      	ldr	r2, [r2, #0]
 8012b48:	430b      	orrs	r3, r1
 8012b4a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	681b      	ldr	r3, [r3, #0]
 8012b50:	69db      	ldr	r3, [r3, #28]
 8012b52:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8012b56:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	685b      	ldr	r3, [r3, #4]
 8012b5e:	4956      	ldr	r1, [pc, #344]	; (8012cb8 <HAL_I2C_Init+0x25c>)
 8012b60:	428b      	cmp	r3, r1
 8012b62:	d80d      	bhi.n	8012b80 <HAL_I2C_Init+0x124>
 8012b64:	68fb      	ldr	r3, [r7, #12]
 8012b66:	1e59      	subs	r1, r3, #1
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	685b      	ldr	r3, [r3, #4]
 8012b6c:	005b      	lsls	r3, r3, #1
 8012b6e:	fbb1 f3f3 	udiv	r3, r1, r3
 8012b72:	3301      	adds	r3, #1
 8012b74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012b78:	2b04      	cmp	r3, #4
 8012b7a:	bf38      	it	cc
 8012b7c:	2304      	movcc	r3, #4
 8012b7e:	e04f      	b.n	8012c20 <HAL_I2C_Init+0x1c4>
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	689b      	ldr	r3, [r3, #8]
 8012b84:	2b00      	cmp	r3, #0
 8012b86:	d111      	bne.n	8012bac <HAL_I2C_Init+0x150>
 8012b88:	68fb      	ldr	r3, [r7, #12]
 8012b8a:	1e58      	subs	r0, r3, #1
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	6859      	ldr	r1, [r3, #4]
 8012b90:	460b      	mov	r3, r1
 8012b92:	005b      	lsls	r3, r3, #1
 8012b94:	440b      	add	r3, r1
 8012b96:	fbb0 f3f3 	udiv	r3, r0, r3
 8012b9a:	3301      	adds	r3, #1
 8012b9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012ba0:	2b00      	cmp	r3, #0
 8012ba2:	bf0c      	ite	eq
 8012ba4:	2301      	moveq	r3, #1
 8012ba6:	2300      	movne	r3, #0
 8012ba8:	b2db      	uxtb	r3, r3
 8012baa:	e012      	b.n	8012bd2 <HAL_I2C_Init+0x176>
 8012bac:	68fb      	ldr	r3, [r7, #12]
 8012bae:	1e58      	subs	r0, r3, #1
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	6859      	ldr	r1, [r3, #4]
 8012bb4:	460b      	mov	r3, r1
 8012bb6:	009b      	lsls	r3, r3, #2
 8012bb8:	440b      	add	r3, r1
 8012bba:	0099      	lsls	r1, r3, #2
 8012bbc:	440b      	add	r3, r1
 8012bbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8012bc2:	3301      	adds	r3, #1
 8012bc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012bc8:	2b00      	cmp	r3, #0
 8012bca:	bf0c      	ite	eq
 8012bcc:	2301      	moveq	r3, #1
 8012bce:	2300      	movne	r3, #0
 8012bd0:	b2db      	uxtb	r3, r3
 8012bd2:	2b00      	cmp	r3, #0
 8012bd4:	d001      	beq.n	8012bda <HAL_I2C_Init+0x17e>
 8012bd6:	2301      	movs	r3, #1
 8012bd8:	e022      	b.n	8012c20 <HAL_I2C_Init+0x1c4>
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	689b      	ldr	r3, [r3, #8]
 8012bde:	2b00      	cmp	r3, #0
 8012be0:	d10e      	bne.n	8012c00 <HAL_I2C_Init+0x1a4>
 8012be2:	68fb      	ldr	r3, [r7, #12]
 8012be4:	1e58      	subs	r0, r3, #1
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	6859      	ldr	r1, [r3, #4]
 8012bea:	460b      	mov	r3, r1
 8012bec:	005b      	lsls	r3, r3, #1
 8012bee:	440b      	add	r3, r1
 8012bf0:	fbb0 f3f3 	udiv	r3, r0, r3
 8012bf4:	3301      	adds	r3, #1
 8012bf6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012bfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012bfe:	e00f      	b.n	8012c20 <HAL_I2C_Init+0x1c4>
 8012c00:	68fb      	ldr	r3, [r7, #12]
 8012c02:	1e58      	subs	r0, r3, #1
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	6859      	ldr	r1, [r3, #4]
 8012c08:	460b      	mov	r3, r1
 8012c0a:	009b      	lsls	r3, r3, #2
 8012c0c:	440b      	add	r3, r1
 8012c0e:	0099      	lsls	r1, r3, #2
 8012c10:	440b      	add	r3, r1
 8012c12:	fbb0 f3f3 	udiv	r3, r0, r3
 8012c16:	3301      	adds	r3, #1
 8012c18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012c1c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8012c20:	6879      	ldr	r1, [r7, #4]
 8012c22:	6809      	ldr	r1, [r1, #0]
 8012c24:	4313      	orrs	r3, r2
 8012c26:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	681b      	ldr	r3, [r3, #0]
 8012c2c:	681b      	ldr	r3, [r3, #0]
 8012c2e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	69da      	ldr	r2, [r3, #28]
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	6a1b      	ldr	r3, [r3, #32]
 8012c3a:	431a      	orrs	r2, r3
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	681b      	ldr	r3, [r3, #0]
 8012c40:	430a      	orrs	r2, r1
 8012c42:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	681b      	ldr	r3, [r3, #0]
 8012c48:	689b      	ldr	r3, [r3, #8]
 8012c4a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8012c4e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8012c52:	687a      	ldr	r2, [r7, #4]
 8012c54:	6911      	ldr	r1, [r2, #16]
 8012c56:	687a      	ldr	r2, [r7, #4]
 8012c58:	68d2      	ldr	r2, [r2, #12]
 8012c5a:	4311      	orrs	r1, r2
 8012c5c:	687a      	ldr	r2, [r7, #4]
 8012c5e:	6812      	ldr	r2, [r2, #0]
 8012c60:	430b      	orrs	r3, r1
 8012c62:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	681b      	ldr	r3, [r3, #0]
 8012c68:	68db      	ldr	r3, [r3, #12]
 8012c6a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	695a      	ldr	r2, [r3, #20]
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	699b      	ldr	r3, [r3, #24]
 8012c76:	431a      	orrs	r2, r3
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	681b      	ldr	r3, [r3, #0]
 8012c7c:	430a      	orrs	r2, r1
 8012c7e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	681b      	ldr	r3, [r3, #0]
 8012c84:	681a      	ldr	r2, [r3, #0]
 8012c86:	687b      	ldr	r3, [r7, #4]
 8012c88:	681b      	ldr	r3, [r3, #0]
 8012c8a:	f042 0201 	orr.w	r2, r2, #1
 8012c8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	2200      	movs	r2, #0
 8012c94:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	2220      	movs	r2, #32
 8012c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	2200      	movs	r2, #0
 8012ca2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	2200      	movs	r2, #0
 8012ca8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8012cac:	2300      	movs	r3, #0
}
 8012cae:	4618      	mov	r0, r3
 8012cb0:	3710      	adds	r7, #16
 8012cb2:	46bd      	mov	sp, r7
 8012cb4:	bd80      	pop	{r7, pc}
 8012cb6:	bf00      	nop
 8012cb8:	000186a0 	.word	0x000186a0
 8012cbc:	001e847f 	.word	0x001e847f
 8012cc0:	003d08ff 	.word	0x003d08ff
 8012cc4:	431bde83 	.word	0x431bde83
 8012cc8:	10624dd3 	.word	0x10624dd3

08012ccc <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8012ccc:	b580      	push	{r7, lr}
 8012cce:	b088      	sub	sp, #32
 8012cd0:	af00      	add	r7, sp, #0
 8012cd2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	2b00      	cmp	r3, #0
 8012cd8:	d101      	bne.n	8012cde <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8012cda:	2301      	movs	r3, #1
 8012cdc:	e128      	b.n	8012f30 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8012cde:	687b      	ldr	r3, [r7, #4]
 8012ce0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8012ce4:	b2db      	uxtb	r3, r3
 8012ce6:	2b00      	cmp	r3, #0
 8012ce8:	d109      	bne.n	8012cfe <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	2200      	movs	r2, #0
 8012cee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	4a90      	ldr	r2, [pc, #576]	; (8012f38 <HAL_I2S_Init+0x26c>)
 8012cf6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8012cf8:	6878      	ldr	r0, [r7, #4]
 8012cfa:	f7fd fa7d 	bl	80101f8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8012cfe:	687b      	ldr	r3, [r7, #4]
 8012d00:	2202      	movs	r2, #2
 8012d02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	681b      	ldr	r3, [r3, #0]
 8012d0a:	69db      	ldr	r3, [r3, #28]
 8012d0c:	687a      	ldr	r2, [r7, #4]
 8012d0e:	6812      	ldr	r2, [r2, #0]
 8012d10:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8012d14:	f023 030f 	bic.w	r3, r3, #15
 8012d18:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	681b      	ldr	r3, [r3, #0]
 8012d1e:	2202      	movs	r2, #2
 8012d20:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8012d22:	687b      	ldr	r3, [r7, #4]
 8012d24:	695b      	ldr	r3, [r3, #20]
 8012d26:	2b02      	cmp	r3, #2
 8012d28:	d060      	beq.n	8012dec <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	68db      	ldr	r3, [r3, #12]
 8012d2e:	2b00      	cmp	r3, #0
 8012d30:	d102      	bne.n	8012d38 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8012d32:	2310      	movs	r3, #16
 8012d34:	617b      	str	r3, [r7, #20]
 8012d36:	e001      	b.n	8012d3c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8012d38:	2320      	movs	r3, #32
 8012d3a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	689b      	ldr	r3, [r3, #8]
 8012d40:	2b20      	cmp	r3, #32
 8012d42:	d802      	bhi.n	8012d4a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8012d44:	697b      	ldr	r3, [r7, #20]
 8012d46:	005b      	lsls	r3, r3, #1
 8012d48:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8012d4a:	2001      	movs	r0, #1
 8012d4c:	f001 f99c 	bl	8014088 <HAL_RCCEx_GetPeriphCLKFreq>
 8012d50:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8012d52:	687b      	ldr	r3, [r7, #4]
 8012d54:	691b      	ldr	r3, [r3, #16]
 8012d56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012d5a:	d125      	bne.n	8012da8 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8012d5c:	687b      	ldr	r3, [r7, #4]
 8012d5e:	68db      	ldr	r3, [r3, #12]
 8012d60:	2b00      	cmp	r3, #0
 8012d62:	d010      	beq.n	8012d86 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8012d64:	697b      	ldr	r3, [r7, #20]
 8012d66:	009b      	lsls	r3, r3, #2
 8012d68:	68fa      	ldr	r2, [r7, #12]
 8012d6a:	fbb2 f2f3 	udiv	r2, r2, r3
 8012d6e:	4613      	mov	r3, r2
 8012d70:	009b      	lsls	r3, r3, #2
 8012d72:	4413      	add	r3, r2
 8012d74:	005b      	lsls	r3, r3, #1
 8012d76:	461a      	mov	r2, r3
 8012d78:	687b      	ldr	r3, [r7, #4]
 8012d7a:	695b      	ldr	r3, [r3, #20]
 8012d7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8012d80:	3305      	adds	r3, #5
 8012d82:	613b      	str	r3, [r7, #16]
 8012d84:	e01f      	b.n	8012dc6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8012d86:	697b      	ldr	r3, [r7, #20]
 8012d88:	00db      	lsls	r3, r3, #3
 8012d8a:	68fa      	ldr	r2, [r7, #12]
 8012d8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8012d90:	4613      	mov	r3, r2
 8012d92:	009b      	lsls	r3, r3, #2
 8012d94:	4413      	add	r3, r2
 8012d96:	005b      	lsls	r3, r3, #1
 8012d98:	461a      	mov	r2, r3
 8012d9a:	687b      	ldr	r3, [r7, #4]
 8012d9c:	695b      	ldr	r3, [r3, #20]
 8012d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8012da2:	3305      	adds	r3, #5
 8012da4:	613b      	str	r3, [r7, #16]
 8012da6:	e00e      	b.n	8012dc6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8012da8:	68fa      	ldr	r2, [r7, #12]
 8012daa:	697b      	ldr	r3, [r7, #20]
 8012dac:	fbb2 f2f3 	udiv	r2, r2, r3
 8012db0:	4613      	mov	r3, r2
 8012db2:	009b      	lsls	r3, r3, #2
 8012db4:	4413      	add	r3, r2
 8012db6:	005b      	lsls	r3, r3, #1
 8012db8:	461a      	mov	r2, r3
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	695b      	ldr	r3, [r3, #20]
 8012dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8012dc2:	3305      	adds	r3, #5
 8012dc4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8012dc6:	693b      	ldr	r3, [r7, #16]
 8012dc8:	4a5c      	ldr	r2, [pc, #368]	; (8012f3c <HAL_I2S_Init+0x270>)
 8012dca:	fba2 2303 	umull	r2, r3, r2, r3
 8012dce:	08db      	lsrs	r3, r3, #3
 8012dd0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8012dd2:	693b      	ldr	r3, [r7, #16]
 8012dd4:	f003 0301 	and.w	r3, r3, #1
 8012dd8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8012dda:	693a      	ldr	r2, [r7, #16]
 8012ddc:	69bb      	ldr	r3, [r7, #24]
 8012dde:	1ad3      	subs	r3, r2, r3
 8012de0:	085b      	lsrs	r3, r3, #1
 8012de2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8012de4:	69bb      	ldr	r3, [r7, #24]
 8012de6:	021b      	lsls	r3, r3, #8
 8012de8:	61bb      	str	r3, [r7, #24]
 8012dea:	e003      	b.n	8012df4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8012dec:	2302      	movs	r3, #2
 8012dee:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8012df0:	2300      	movs	r3, #0
 8012df2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8012df4:	69fb      	ldr	r3, [r7, #28]
 8012df6:	2b01      	cmp	r3, #1
 8012df8:	d902      	bls.n	8012e00 <HAL_I2S_Init+0x134>
 8012dfa:	69fb      	ldr	r3, [r7, #28]
 8012dfc:	2bff      	cmp	r3, #255	; 0xff
 8012dfe:	d907      	bls.n	8012e10 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012e04:	f043 0210 	orr.w	r2, r3, #16
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8012e0c:	2301      	movs	r3, #1
 8012e0e:	e08f      	b.n	8012f30 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	691a      	ldr	r2, [r3, #16]
 8012e14:	69bb      	ldr	r3, [r7, #24]
 8012e16:	ea42 0103 	orr.w	r1, r2, r3
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	681b      	ldr	r3, [r3, #0]
 8012e1e:	69fa      	ldr	r2, [r7, #28]
 8012e20:	430a      	orrs	r2, r1
 8012e22:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	681b      	ldr	r3, [r3, #0]
 8012e28:	69db      	ldr	r3, [r3, #28]
 8012e2a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8012e2e:	f023 030f 	bic.w	r3, r3, #15
 8012e32:	687a      	ldr	r2, [r7, #4]
 8012e34:	6851      	ldr	r1, [r2, #4]
 8012e36:	687a      	ldr	r2, [r7, #4]
 8012e38:	6892      	ldr	r2, [r2, #8]
 8012e3a:	4311      	orrs	r1, r2
 8012e3c:	687a      	ldr	r2, [r7, #4]
 8012e3e:	68d2      	ldr	r2, [r2, #12]
 8012e40:	4311      	orrs	r1, r2
 8012e42:	687a      	ldr	r2, [r7, #4]
 8012e44:	6992      	ldr	r2, [r2, #24]
 8012e46:	430a      	orrs	r2, r1
 8012e48:	431a      	orrs	r2, r3
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	681b      	ldr	r3, [r3, #0]
 8012e4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8012e52:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8012e54:	687b      	ldr	r3, [r7, #4]
 8012e56:	6a1b      	ldr	r3, [r3, #32]
 8012e58:	2b01      	cmp	r3, #1
 8012e5a:	d161      	bne.n	8012f20 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	4a38      	ldr	r2, [pc, #224]	; (8012f40 <HAL_I2S_Init+0x274>)
 8012e60:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8012e62:	687b      	ldr	r3, [r7, #4]
 8012e64:	681b      	ldr	r3, [r3, #0]
 8012e66:	4a37      	ldr	r2, [pc, #220]	; (8012f44 <HAL_I2S_Init+0x278>)
 8012e68:	4293      	cmp	r3, r2
 8012e6a:	d101      	bne.n	8012e70 <HAL_I2S_Init+0x1a4>
 8012e6c:	4b36      	ldr	r3, [pc, #216]	; (8012f48 <HAL_I2S_Init+0x27c>)
 8012e6e:	e001      	b.n	8012e74 <HAL_I2S_Init+0x1a8>
 8012e70:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8012e74:	69db      	ldr	r3, [r3, #28]
 8012e76:	687a      	ldr	r2, [r7, #4]
 8012e78:	6812      	ldr	r2, [r2, #0]
 8012e7a:	4932      	ldr	r1, [pc, #200]	; (8012f44 <HAL_I2S_Init+0x278>)
 8012e7c:	428a      	cmp	r2, r1
 8012e7e:	d101      	bne.n	8012e84 <HAL_I2S_Init+0x1b8>
 8012e80:	4a31      	ldr	r2, [pc, #196]	; (8012f48 <HAL_I2S_Init+0x27c>)
 8012e82:	e001      	b.n	8012e88 <HAL_I2S_Init+0x1bc>
 8012e84:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8012e88:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8012e8c:	f023 030f 	bic.w	r3, r3, #15
 8012e90:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8012e92:	687b      	ldr	r3, [r7, #4]
 8012e94:	681b      	ldr	r3, [r3, #0]
 8012e96:	4a2b      	ldr	r2, [pc, #172]	; (8012f44 <HAL_I2S_Init+0x278>)
 8012e98:	4293      	cmp	r3, r2
 8012e9a:	d101      	bne.n	8012ea0 <HAL_I2S_Init+0x1d4>
 8012e9c:	4b2a      	ldr	r3, [pc, #168]	; (8012f48 <HAL_I2S_Init+0x27c>)
 8012e9e:	e001      	b.n	8012ea4 <HAL_I2S_Init+0x1d8>
 8012ea0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8012ea4:	2202      	movs	r2, #2
 8012ea6:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8012ea8:	687b      	ldr	r3, [r7, #4]
 8012eaa:	681b      	ldr	r3, [r3, #0]
 8012eac:	4a25      	ldr	r2, [pc, #148]	; (8012f44 <HAL_I2S_Init+0x278>)
 8012eae:	4293      	cmp	r3, r2
 8012eb0:	d101      	bne.n	8012eb6 <HAL_I2S_Init+0x1ea>
 8012eb2:	4b25      	ldr	r3, [pc, #148]	; (8012f48 <HAL_I2S_Init+0x27c>)
 8012eb4:	e001      	b.n	8012eba <HAL_I2S_Init+0x1ee>
 8012eb6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8012eba:	69db      	ldr	r3, [r3, #28]
 8012ebc:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	685b      	ldr	r3, [r3, #4]
 8012ec2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012ec6:	d003      	beq.n	8012ed0 <HAL_I2S_Init+0x204>
 8012ec8:	687b      	ldr	r3, [r7, #4]
 8012eca:	685b      	ldr	r3, [r3, #4]
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	d103      	bne.n	8012ed8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8012ed0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012ed4:	613b      	str	r3, [r7, #16]
 8012ed6:	e001      	b.n	8012edc <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8012ed8:	2300      	movs	r3, #0
 8012eda:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8012edc:	693b      	ldr	r3, [r7, #16]
 8012ede:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	689b      	ldr	r3, [r3, #8]
 8012ee4:	b299      	uxth	r1, r3
 8012ee6:	687b      	ldr	r3, [r7, #4]
 8012ee8:	68db      	ldr	r3, [r3, #12]
 8012eea:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8012eec:	687b      	ldr	r3, [r7, #4]
 8012eee:	699b      	ldr	r3, [r3, #24]
 8012ef0:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8012ef2:	4303      	orrs	r3, r0
 8012ef4:	b29b      	uxth	r3, r3
 8012ef6:	430b      	orrs	r3, r1
 8012ef8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8012efa:	4313      	orrs	r3, r2
 8012efc:	b29a      	uxth	r2, r3
 8012efe:	897b      	ldrh	r3, [r7, #10]
 8012f00:	4313      	orrs	r3, r2
 8012f02:	b29b      	uxth	r3, r3
 8012f04:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8012f08:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8012f0a:	687b      	ldr	r3, [r7, #4]
 8012f0c:	681b      	ldr	r3, [r3, #0]
 8012f0e:	4a0d      	ldr	r2, [pc, #52]	; (8012f44 <HAL_I2S_Init+0x278>)
 8012f10:	4293      	cmp	r3, r2
 8012f12:	d101      	bne.n	8012f18 <HAL_I2S_Init+0x24c>
 8012f14:	4b0c      	ldr	r3, [pc, #48]	; (8012f48 <HAL_I2S_Init+0x27c>)
 8012f16:	e001      	b.n	8012f1c <HAL_I2S_Init+0x250>
 8012f18:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8012f1c:	897a      	ldrh	r2, [r7, #10]
 8012f1e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	2200      	movs	r2, #0
 8012f24:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	2201      	movs	r2, #1
 8012f2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8012f2e:	2300      	movs	r3, #0
}
 8012f30:	4618      	mov	r0, r3
 8012f32:	3720      	adds	r7, #32
 8012f34:	46bd      	mov	sp, r7
 8012f36:	bd80      	pop	{r7, pc}
 8012f38:	08013043 	.word	0x08013043
 8012f3c:	cccccccd 	.word	0xcccccccd
 8012f40:	08013159 	.word	0x08013159
 8012f44:	40003800 	.word	0x40003800
 8012f48:	40003400 	.word	0x40003400

08012f4c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8012f4c:	b480      	push	{r7}
 8012f4e:	b083      	sub	sp, #12
 8012f50:	af00      	add	r7, sp, #0
 8012f52:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8012f54:	bf00      	nop
 8012f56:	370c      	adds	r7, #12
 8012f58:	46bd      	mov	sp, r7
 8012f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f5e:	4770      	bx	lr

08012f60 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8012f60:	b480      	push	{r7}
 8012f62:	b083      	sub	sp, #12
 8012f64:	af00      	add	r7, sp, #0
 8012f66:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8012f68:	bf00      	nop
 8012f6a:	370c      	adds	r7, #12
 8012f6c:	46bd      	mov	sp, r7
 8012f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f72:	4770      	bx	lr

08012f74 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8012f74:	b480      	push	{r7}
 8012f76:	b083      	sub	sp, #12
 8012f78:	af00      	add	r7, sp, #0
 8012f7a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8012f7c:	bf00      	nop
 8012f7e:	370c      	adds	r7, #12
 8012f80:	46bd      	mov	sp, r7
 8012f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f86:	4770      	bx	lr

08012f88 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8012f88:	b580      	push	{r7, lr}
 8012f8a:	b082      	sub	sp, #8
 8012f8c:	af00      	add	r7, sp, #0
 8012f8e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8012f90:	687b      	ldr	r3, [r7, #4]
 8012f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f94:	881a      	ldrh	r2, [r3, #0]
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	681b      	ldr	r3, [r3, #0]
 8012f9a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8012f9c:	687b      	ldr	r3, [r7, #4]
 8012f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012fa0:	1c9a      	adds	r2, r3, #2
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8012fa6:	687b      	ldr	r3, [r7, #4]
 8012fa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012faa:	b29b      	uxth	r3, r3
 8012fac:	3b01      	subs	r3, #1
 8012fae:	b29a      	uxth	r2, r3
 8012fb0:	687b      	ldr	r3, [r7, #4]
 8012fb2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8012fb4:	687b      	ldr	r3, [r7, #4]
 8012fb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012fb8:	b29b      	uxth	r3, r3
 8012fba:	2b00      	cmp	r3, #0
 8012fbc:	d10e      	bne.n	8012fdc <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8012fbe:	687b      	ldr	r3, [r7, #4]
 8012fc0:	681b      	ldr	r3, [r3, #0]
 8012fc2:	685a      	ldr	r2, [r3, #4]
 8012fc4:	687b      	ldr	r3, [r7, #4]
 8012fc6:	681b      	ldr	r3, [r3, #0]
 8012fc8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8012fcc:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	2201      	movs	r2, #1
 8012fd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8012fd6:	6878      	ldr	r0, [r7, #4]
 8012fd8:	f7ff ffb8 	bl	8012f4c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8012fdc:	bf00      	nop
 8012fde:	3708      	adds	r7, #8
 8012fe0:	46bd      	mov	sp, r7
 8012fe2:	bd80      	pop	{r7, pc}

08012fe4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8012fe4:	b580      	push	{r7, lr}
 8012fe6:	b082      	sub	sp, #8
 8012fe8:	af00      	add	r7, sp, #0
 8012fea:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	681b      	ldr	r3, [r3, #0]
 8012ff0:	68da      	ldr	r2, [r3, #12]
 8012ff2:	687b      	ldr	r3, [r7, #4]
 8012ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ff6:	b292      	uxth	r2, r2
 8012ff8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8012ffa:	687b      	ldr	r3, [r7, #4]
 8012ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ffe:	1c9a      	adds	r2, r3, #2
 8013000:	687b      	ldr	r3, [r7, #4]
 8013002:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8013004:	687b      	ldr	r3, [r7, #4]
 8013006:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013008:	b29b      	uxth	r3, r3
 801300a:	3b01      	subs	r3, #1
 801300c:	b29a      	uxth	r2, r3
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013016:	b29b      	uxth	r3, r3
 8013018:	2b00      	cmp	r3, #0
 801301a:	d10e      	bne.n	801303a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 801301c:	687b      	ldr	r3, [r7, #4]
 801301e:	681b      	ldr	r3, [r3, #0]
 8013020:	685a      	ldr	r2, [r3, #4]
 8013022:	687b      	ldr	r3, [r7, #4]
 8013024:	681b      	ldr	r3, [r3, #0]
 8013026:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801302a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 801302c:	687b      	ldr	r3, [r7, #4]
 801302e:	2201      	movs	r2, #1
 8013030:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8013034:	6878      	ldr	r0, [r7, #4]
 8013036:	f7ff ff93 	bl	8012f60 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 801303a:	bf00      	nop
 801303c:	3708      	adds	r7, #8
 801303e:	46bd      	mov	sp, r7
 8013040:	bd80      	pop	{r7, pc}

08013042 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8013042:	b580      	push	{r7, lr}
 8013044:	b086      	sub	sp, #24
 8013046:	af00      	add	r7, sp, #0
 8013048:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 801304a:	687b      	ldr	r3, [r7, #4]
 801304c:	681b      	ldr	r3, [r3, #0]
 801304e:	689b      	ldr	r3, [r3, #8]
 8013050:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8013052:	687b      	ldr	r3, [r7, #4]
 8013054:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8013058:	b2db      	uxtb	r3, r3
 801305a:	2b04      	cmp	r3, #4
 801305c:	d13a      	bne.n	80130d4 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 801305e:	697b      	ldr	r3, [r7, #20]
 8013060:	f003 0301 	and.w	r3, r3, #1
 8013064:	2b01      	cmp	r3, #1
 8013066:	d109      	bne.n	801307c <I2S_IRQHandler+0x3a>
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	681b      	ldr	r3, [r3, #0]
 801306c:	685b      	ldr	r3, [r3, #4]
 801306e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013072:	2b40      	cmp	r3, #64	; 0x40
 8013074:	d102      	bne.n	801307c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8013076:	6878      	ldr	r0, [r7, #4]
 8013078:	f7ff ffb4 	bl	8012fe4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 801307c:	697b      	ldr	r3, [r7, #20]
 801307e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013082:	2b40      	cmp	r3, #64	; 0x40
 8013084:	d126      	bne.n	80130d4 <I2S_IRQHandler+0x92>
 8013086:	687b      	ldr	r3, [r7, #4]
 8013088:	681b      	ldr	r3, [r3, #0]
 801308a:	685b      	ldr	r3, [r3, #4]
 801308c:	f003 0320 	and.w	r3, r3, #32
 8013090:	2b20      	cmp	r3, #32
 8013092:	d11f      	bne.n	80130d4 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8013094:	687b      	ldr	r3, [r7, #4]
 8013096:	681b      	ldr	r3, [r3, #0]
 8013098:	685a      	ldr	r2, [r3, #4]
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	681b      	ldr	r3, [r3, #0]
 801309e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80130a2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80130a4:	2300      	movs	r3, #0
 80130a6:	613b      	str	r3, [r7, #16]
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	681b      	ldr	r3, [r3, #0]
 80130ac:	68db      	ldr	r3, [r3, #12]
 80130ae:	613b      	str	r3, [r7, #16]
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	681b      	ldr	r3, [r3, #0]
 80130b4:	689b      	ldr	r3, [r3, #8]
 80130b6:	613b      	str	r3, [r7, #16]
 80130b8:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80130ba:	687b      	ldr	r3, [r7, #4]
 80130bc:	2201      	movs	r2, #1
 80130be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80130c2:	687b      	ldr	r3, [r7, #4]
 80130c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80130c6:	f043 0202 	orr.w	r2, r3, #2
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80130ce:	6878      	ldr	r0, [r7, #4]
 80130d0:	f7ff ff50 	bl	8012f74 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80130da:	b2db      	uxtb	r3, r3
 80130dc:	2b03      	cmp	r3, #3
 80130de:	d136      	bne.n	801314e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80130e0:	697b      	ldr	r3, [r7, #20]
 80130e2:	f003 0302 	and.w	r3, r3, #2
 80130e6:	2b02      	cmp	r3, #2
 80130e8:	d109      	bne.n	80130fe <I2S_IRQHandler+0xbc>
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	681b      	ldr	r3, [r3, #0]
 80130ee:	685b      	ldr	r3, [r3, #4]
 80130f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80130f4:	2b80      	cmp	r3, #128	; 0x80
 80130f6:	d102      	bne.n	80130fe <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80130f8:	6878      	ldr	r0, [r7, #4]
 80130fa:	f7ff ff45 	bl	8012f88 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80130fe:	697b      	ldr	r3, [r7, #20]
 8013100:	f003 0308 	and.w	r3, r3, #8
 8013104:	2b08      	cmp	r3, #8
 8013106:	d122      	bne.n	801314e <I2S_IRQHandler+0x10c>
 8013108:	687b      	ldr	r3, [r7, #4]
 801310a:	681b      	ldr	r3, [r3, #0]
 801310c:	685b      	ldr	r3, [r3, #4]
 801310e:	f003 0320 	and.w	r3, r3, #32
 8013112:	2b20      	cmp	r3, #32
 8013114:	d11b      	bne.n	801314e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8013116:	687b      	ldr	r3, [r7, #4]
 8013118:	681b      	ldr	r3, [r3, #0]
 801311a:	685a      	ldr	r2, [r3, #4]
 801311c:	687b      	ldr	r3, [r7, #4]
 801311e:	681b      	ldr	r3, [r3, #0]
 8013120:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8013124:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8013126:	2300      	movs	r3, #0
 8013128:	60fb      	str	r3, [r7, #12]
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	681b      	ldr	r3, [r3, #0]
 801312e:	689b      	ldr	r3, [r3, #8]
 8013130:	60fb      	str	r3, [r7, #12]
 8013132:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	2201      	movs	r2, #1
 8013138:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013140:	f043 0204 	orr.w	r2, r3, #4
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8013148:	6878      	ldr	r0, [r7, #4]
 801314a:	f7ff ff13 	bl	8012f74 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 801314e:	bf00      	nop
 8013150:	3718      	adds	r7, #24
 8013152:	46bd      	mov	sp, r7
 8013154:	bd80      	pop	{r7, pc}
	...

08013158 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8013158:	b580      	push	{r7, lr}
 801315a:	b088      	sub	sp, #32
 801315c:	af00      	add	r7, sp, #0
 801315e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8013160:	687b      	ldr	r3, [r7, #4]
 8013162:	681b      	ldr	r3, [r3, #0]
 8013164:	689b      	ldr	r3, [r3, #8]
 8013166:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8013168:	687b      	ldr	r3, [r7, #4]
 801316a:	681b      	ldr	r3, [r3, #0]
 801316c:	4aa2      	ldr	r2, [pc, #648]	; (80133f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 801316e:	4293      	cmp	r3, r2
 8013170:	d101      	bne.n	8013176 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8013172:	4ba2      	ldr	r3, [pc, #648]	; (80133fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8013174:	e001      	b.n	801317a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8013176:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 801317a:	689b      	ldr	r3, [r3, #8]
 801317c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 801317e:	687b      	ldr	r3, [r7, #4]
 8013180:	681b      	ldr	r3, [r3, #0]
 8013182:	685b      	ldr	r3, [r3, #4]
 8013184:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8013186:	687b      	ldr	r3, [r7, #4]
 8013188:	681b      	ldr	r3, [r3, #0]
 801318a:	4a9b      	ldr	r2, [pc, #620]	; (80133f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 801318c:	4293      	cmp	r3, r2
 801318e:	d101      	bne.n	8013194 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8013190:	4b9a      	ldr	r3, [pc, #616]	; (80133fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8013192:	e001      	b.n	8013198 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8013194:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8013198:	685b      	ldr	r3, [r3, #4]
 801319a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 801319c:	687b      	ldr	r3, [r7, #4]
 801319e:	685b      	ldr	r3, [r3, #4]
 80131a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80131a4:	d004      	beq.n	80131b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80131a6:	687b      	ldr	r3, [r7, #4]
 80131a8:	685b      	ldr	r3, [r3, #4]
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	f040 8099 	bne.w	80132e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80131b0:	69fb      	ldr	r3, [r7, #28]
 80131b2:	f003 0302 	and.w	r3, r3, #2
 80131b6:	2b02      	cmp	r3, #2
 80131b8:	d107      	bne.n	80131ca <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80131ba:	697b      	ldr	r3, [r7, #20]
 80131bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80131c0:	2b00      	cmp	r3, #0
 80131c2:	d002      	beq.n	80131ca <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80131c4:	6878      	ldr	r0, [r7, #4]
 80131c6:	f000 f925 	bl	8013414 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80131ca:	69bb      	ldr	r3, [r7, #24]
 80131cc:	f003 0301 	and.w	r3, r3, #1
 80131d0:	2b01      	cmp	r3, #1
 80131d2:	d107      	bne.n	80131e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80131d4:	693b      	ldr	r3, [r7, #16]
 80131d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80131da:	2b00      	cmp	r3, #0
 80131dc:	d002      	beq.n	80131e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80131de:	6878      	ldr	r0, [r7, #4]
 80131e0:	f000 f9c8 	bl	8013574 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80131e4:	69bb      	ldr	r3, [r7, #24]
 80131e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80131ea:	2b40      	cmp	r3, #64	; 0x40
 80131ec:	d13a      	bne.n	8013264 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80131ee:	693b      	ldr	r3, [r7, #16]
 80131f0:	f003 0320 	and.w	r3, r3, #32
 80131f4:	2b00      	cmp	r3, #0
 80131f6:	d035      	beq.n	8013264 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	681b      	ldr	r3, [r3, #0]
 80131fc:	4a7e      	ldr	r2, [pc, #504]	; (80133f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80131fe:	4293      	cmp	r3, r2
 8013200:	d101      	bne.n	8013206 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8013202:	4b7e      	ldr	r3, [pc, #504]	; (80133fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8013204:	e001      	b.n	801320a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8013206:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 801320a:	685a      	ldr	r2, [r3, #4]
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	681b      	ldr	r3, [r3, #0]
 8013210:	4979      	ldr	r1, [pc, #484]	; (80133f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8013212:	428b      	cmp	r3, r1
 8013214:	d101      	bne.n	801321a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8013216:	4b79      	ldr	r3, [pc, #484]	; (80133fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8013218:	e001      	b.n	801321e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 801321a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 801321e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8013222:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8013224:	687b      	ldr	r3, [r7, #4]
 8013226:	681b      	ldr	r3, [r3, #0]
 8013228:	685a      	ldr	r2, [r3, #4]
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	681b      	ldr	r3, [r3, #0]
 801322e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8013232:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8013234:	2300      	movs	r3, #0
 8013236:	60fb      	str	r3, [r7, #12]
 8013238:	687b      	ldr	r3, [r7, #4]
 801323a:	681b      	ldr	r3, [r3, #0]
 801323c:	68db      	ldr	r3, [r3, #12]
 801323e:	60fb      	str	r3, [r7, #12]
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	681b      	ldr	r3, [r3, #0]
 8013244:	689b      	ldr	r3, [r3, #8]
 8013246:	60fb      	str	r3, [r7, #12]
 8013248:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 801324a:	687b      	ldr	r3, [r7, #4]
 801324c:	2201      	movs	r2, #1
 801324e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8013252:	687b      	ldr	r3, [r7, #4]
 8013254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013256:	f043 0202 	orr.w	r2, r3, #2
 801325a:	687b      	ldr	r3, [r7, #4]
 801325c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 801325e:	6878      	ldr	r0, [r7, #4]
 8013260:	f7ff fe88 	bl	8012f74 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8013264:	69fb      	ldr	r3, [r7, #28]
 8013266:	f003 0308 	and.w	r3, r3, #8
 801326a:	2b08      	cmp	r3, #8
 801326c:	f040 80be 	bne.w	80133ec <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8013270:	697b      	ldr	r3, [r7, #20]
 8013272:	f003 0320 	and.w	r3, r3, #32
 8013276:	2b00      	cmp	r3, #0
 8013278:	f000 80b8 	beq.w	80133ec <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	681b      	ldr	r3, [r3, #0]
 8013280:	685a      	ldr	r2, [r3, #4]
 8013282:	687b      	ldr	r3, [r7, #4]
 8013284:	681b      	ldr	r3, [r3, #0]
 8013286:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 801328a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	681b      	ldr	r3, [r3, #0]
 8013290:	4a59      	ldr	r2, [pc, #356]	; (80133f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8013292:	4293      	cmp	r3, r2
 8013294:	d101      	bne.n	801329a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8013296:	4b59      	ldr	r3, [pc, #356]	; (80133fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8013298:	e001      	b.n	801329e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 801329a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 801329e:	685a      	ldr	r2, [r3, #4]
 80132a0:	687b      	ldr	r3, [r7, #4]
 80132a2:	681b      	ldr	r3, [r3, #0]
 80132a4:	4954      	ldr	r1, [pc, #336]	; (80133f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80132a6:	428b      	cmp	r3, r1
 80132a8:	d101      	bne.n	80132ae <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80132aa:	4b54      	ldr	r3, [pc, #336]	; (80133fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80132ac:	e001      	b.n	80132b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80132ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80132b2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80132b6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80132b8:	2300      	movs	r3, #0
 80132ba:	60bb      	str	r3, [r7, #8]
 80132bc:	687b      	ldr	r3, [r7, #4]
 80132be:	681b      	ldr	r3, [r3, #0]
 80132c0:	689b      	ldr	r3, [r3, #8]
 80132c2:	60bb      	str	r3, [r7, #8]
 80132c4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80132c6:	687b      	ldr	r3, [r7, #4]
 80132c8:	2201      	movs	r2, #1
 80132ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80132ce:	687b      	ldr	r3, [r7, #4]
 80132d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80132d2:	f043 0204 	orr.w	r2, r3, #4
 80132d6:	687b      	ldr	r3, [r7, #4]
 80132d8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80132da:	6878      	ldr	r0, [r7, #4]
 80132dc:	f7ff fe4a 	bl	8012f74 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80132e0:	e084      	b.n	80133ec <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80132e2:	69bb      	ldr	r3, [r7, #24]
 80132e4:	f003 0302 	and.w	r3, r3, #2
 80132e8:	2b02      	cmp	r3, #2
 80132ea:	d107      	bne.n	80132fc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80132ec:	693b      	ldr	r3, [r7, #16]
 80132ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80132f2:	2b00      	cmp	r3, #0
 80132f4:	d002      	beq.n	80132fc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80132f6:	6878      	ldr	r0, [r7, #4]
 80132f8:	f000 f8be 	bl	8013478 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80132fc:	69fb      	ldr	r3, [r7, #28]
 80132fe:	f003 0301 	and.w	r3, r3, #1
 8013302:	2b01      	cmp	r3, #1
 8013304:	d107      	bne.n	8013316 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8013306:	697b      	ldr	r3, [r7, #20]
 8013308:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801330c:	2b00      	cmp	r3, #0
 801330e:	d002      	beq.n	8013316 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8013310:	6878      	ldr	r0, [r7, #4]
 8013312:	f000 f8fd 	bl	8013510 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8013316:	69fb      	ldr	r3, [r7, #28]
 8013318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801331c:	2b40      	cmp	r3, #64	; 0x40
 801331e:	d12f      	bne.n	8013380 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8013320:	697b      	ldr	r3, [r7, #20]
 8013322:	f003 0320 	and.w	r3, r3, #32
 8013326:	2b00      	cmp	r3, #0
 8013328:	d02a      	beq.n	8013380 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 801332a:	687b      	ldr	r3, [r7, #4]
 801332c:	681b      	ldr	r3, [r3, #0]
 801332e:	685a      	ldr	r2, [r3, #4]
 8013330:	687b      	ldr	r3, [r7, #4]
 8013332:	681b      	ldr	r3, [r3, #0]
 8013334:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8013338:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	681b      	ldr	r3, [r3, #0]
 801333e:	4a2e      	ldr	r2, [pc, #184]	; (80133f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8013340:	4293      	cmp	r3, r2
 8013342:	d101      	bne.n	8013348 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8013344:	4b2d      	ldr	r3, [pc, #180]	; (80133fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8013346:	e001      	b.n	801334c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8013348:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 801334c:	685a      	ldr	r2, [r3, #4]
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	681b      	ldr	r3, [r3, #0]
 8013352:	4929      	ldr	r1, [pc, #164]	; (80133f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8013354:	428b      	cmp	r3, r1
 8013356:	d101      	bne.n	801335c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8013358:	4b28      	ldr	r3, [pc, #160]	; (80133fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 801335a:	e001      	b.n	8013360 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 801335c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8013360:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8013364:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8013366:	687b      	ldr	r3, [r7, #4]
 8013368:	2201      	movs	r2, #1
 801336a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 801336e:	687b      	ldr	r3, [r7, #4]
 8013370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013372:	f043 0202 	orr.w	r2, r3, #2
 8013376:	687b      	ldr	r3, [r7, #4]
 8013378:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 801337a:	6878      	ldr	r0, [r7, #4]
 801337c:	f7ff fdfa 	bl	8012f74 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8013380:	69bb      	ldr	r3, [r7, #24]
 8013382:	f003 0308 	and.w	r3, r3, #8
 8013386:	2b08      	cmp	r3, #8
 8013388:	d131      	bne.n	80133ee <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 801338a:	693b      	ldr	r3, [r7, #16]
 801338c:	f003 0320 	and.w	r3, r3, #32
 8013390:	2b00      	cmp	r3, #0
 8013392:	d02c      	beq.n	80133ee <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8013394:	687b      	ldr	r3, [r7, #4]
 8013396:	681b      	ldr	r3, [r3, #0]
 8013398:	4a17      	ldr	r2, [pc, #92]	; (80133f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 801339a:	4293      	cmp	r3, r2
 801339c:	d101      	bne.n	80133a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 801339e:	4b17      	ldr	r3, [pc, #92]	; (80133fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80133a0:	e001      	b.n	80133a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80133a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80133a6:	685a      	ldr	r2, [r3, #4]
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	681b      	ldr	r3, [r3, #0]
 80133ac:	4912      	ldr	r1, [pc, #72]	; (80133f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80133ae:	428b      	cmp	r3, r1
 80133b0:	d101      	bne.n	80133b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80133b2:	4b12      	ldr	r3, [pc, #72]	; (80133fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80133b4:	e001      	b.n	80133ba <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80133b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80133ba:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80133be:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	681b      	ldr	r3, [r3, #0]
 80133c4:	685a      	ldr	r2, [r3, #4]
 80133c6:	687b      	ldr	r3, [r7, #4]
 80133c8:	681b      	ldr	r3, [r3, #0]
 80133ca:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80133ce:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80133d0:	687b      	ldr	r3, [r7, #4]
 80133d2:	2201      	movs	r2, #1
 80133d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80133d8:	687b      	ldr	r3, [r7, #4]
 80133da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80133dc:	f043 0204 	orr.w	r2, r3, #4
 80133e0:	687b      	ldr	r3, [r7, #4]
 80133e2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80133e4:	6878      	ldr	r0, [r7, #4]
 80133e6:	f7ff fdc5 	bl	8012f74 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80133ea:	e000      	b.n	80133ee <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80133ec:	bf00      	nop
}
 80133ee:	bf00      	nop
 80133f0:	3720      	adds	r7, #32
 80133f2:	46bd      	mov	sp, r7
 80133f4:	bd80      	pop	{r7, pc}
 80133f6:	bf00      	nop
 80133f8:	40003800 	.word	0x40003800
 80133fc:	40003400 	.word	0x40003400

08013400 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8013400:	b480      	push	{r7}
 8013402:	b083      	sub	sp, #12
 8013404:	af00      	add	r7, sp, #0
 8013406:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8013408:	bf00      	nop
 801340a:	370c      	adds	r7, #12
 801340c:	46bd      	mov	sp, r7
 801340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013412:	4770      	bx	lr

08013414 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8013414:	b580      	push	{r7, lr}
 8013416:	b082      	sub	sp, #8
 8013418:	af00      	add	r7, sp, #0
 801341a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013420:	1c99      	adds	r1, r3, #2
 8013422:	687a      	ldr	r2, [r7, #4]
 8013424:	6251      	str	r1, [r2, #36]	; 0x24
 8013426:	881a      	ldrh	r2, [r3, #0]
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	681b      	ldr	r3, [r3, #0]
 801342c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 801342e:	687b      	ldr	r3, [r7, #4]
 8013430:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013432:	b29b      	uxth	r3, r3
 8013434:	3b01      	subs	r3, #1
 8013436:	b29a      	uxth	r2, r3
 8013438:	687b      	ldr	r3, [r7, #4]
 801343a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 801343c:	687b      	ldr	r3, [r7, #4]
 801343e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013440:	b29b      	uxth	r3, r3
 8013442:	2b00      	cmp	r3, #0
 8013444:	d113      	bne.n	801346e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8013446:	687b      	ldr	r3, [r7, #4]
 8013448:	681b      	ldr	r3, [r3, #0]
 801344a:	685a      	ldr	r2, [r3, #4]
 801344c:	687b      	ldr	r3, [r7, #4]
 801344e:	681b      	ldr	r3, [r3, #0]
 8013450:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8013454:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8013456:	687b      	ldr	r3, [r7, #4]
 8013458:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801345a:	b29b      	uxth	r3, r3
 801345c:	2b00      	cmp	r3, #0
 801345e:	d106      	bne.n	801346e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8013460:	687b      	ldr	r3, [r7, #4]
 8013462:	2201      	movs	r2, #1
 8013464:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8013468:	6878      	ldr	r0, [r7, #4]
 801346a:	f7ff ffc9 	bl	8013400 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 801346e:	bf00      	nop
 8013470:	3708      	adds	r7, #8
 8013472:	46bd      	mov	sp, r7
 8013474:	bd80      	pop	{r7, pc}
	...

08013478 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8013478:	b580      	push	{r7, lr}
 801347a:	b082      	sub	sp, #8
 801347c:	af00      	add	r7, sp, #0
 801347e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013484:	1c99      	adds	r1, r3, #2
 8013486:	687a      	ldr	r2, [r7, #4]
 8013488:	6251      	str	r1, [r2, #36]	; 0x24
 801348a:	8819      	ldrh	r1, [r3, #0]
 801348c:	687b      	ldr	r3, [r7, #4]
 801348e:	681b      	ldr	r3, [r3, #0]
 8013490:	4a1d      	ldr	r2, [pc, #116]	; (8013508 <I2SEx_TxISR_I2SExt+0x90>)
 8013492:	4293      	cmp	r3, r2
 8013494:	d101      	bne.n	801349a <I2SEx_TxISR_I2SExt+0x22>
 8013496:	4b1d      	ldr	r3, [pc, #116]	; (801350c <I2SEx_TxISR_I2SExt+0x94>)
 8013498:	e001      	b.n	801349e <I2SEx_TxISR_I2SExt+0x26>
 801349a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 801349e:	460a      	mov	r2, r1
 80134a0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80134a2:	687b      	ldr	r3, [r7, #4]
 80134a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80134a6:	b29b      	uxth	r3, r3
 80134a8:	3b01      	subs	r3, #1
 80134aa:	b29a      	uxth	r2, r3
 80134ac:	687b      	ldr	r3, [r7, #4]
 80134ae:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80134b0:	687b      	ldr	r3, [r7, #4]
 80134b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80134b4:	b29b      	uxth	r3, r3
 80134b6:	2b00      	cmp	r3, #0
 80134b8:	d121      	bne.n	80134fe <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80134ba:	687b      	ldr	r3, [r7, #4]
 80134bc:	681b      	ldr	r3, [r3, #0]
 80134be:	4a12      	ldr	r2, [pc, #72]	; (8013508 <I2SEx_TxISR_I2SExt+0x90>)
 80134c0:	4293      	cmp	r3, r2
 80134c2:	d101      	bne.n	80134c8 <I2SEx_TxISR_I2SExt+0x50>
 80134c4:	4b11      	ldr	r3, [pc, #68]	; (801350c <I2SEx_TxISR_I2SExt+0x94>)
 80134c6:	e001      	b.n	80134cc <I2SEx_TxISR_I2SExt+0x54>
 80134c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80134cc:	685a      	ldr	r2, [r3, #4]
 80134ce:	687b      	ldr	r3, [r7, #4]
 80134d0:	681b      	ldr	r3, [r3, #0]
 80134d2:	490d      	ldr	r1, [pc, #52]	; (8013508 <I2SEx_TxISR_I2SExt+0x90>)
 80134d4:	428b      	cmp	r3, r1
 80134d6:	d101      	bne.n	80134dc <I2SEx_TxISR_I2SExt+0x64>
 80134d8:	4b0c      	ldr	r3, [pc, #48]	; (801350c <I2SEx_TxISR_I2SExt+0x94>)
 80134da:	e001      	b.n	80134e0 <I2SEx_TxISR_I2SExt+0x68>
 80134dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80134e0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80134e4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80134e6:	687b      	ldr	r3, [r7, #4]
 80134e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80134ea:	b29b      	uxth	r3, r3
 80134ec:	2b00      	cmp	r3, #0
 80134ee:	d106      	bne.n	80134fe <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	2201      	movs	r2, #1
 80134f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80134f8:	6878      	ldr	r0, [r7, #4]
 80134fa:	f7ff ff81 	bl	8013400 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80134fe:	bf00      	nop
 8013500:	3708      	adds	r7, #8
 8013502:	46bd      	mov	sp, r7
 8013504:	bd80      	pop	{r7, pc}
 8013506:	bf00      	nop
 8013508:	40003800 	.word	0x40003800
 801350c:	40003400 	.word	0x40003400

08013510 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8013510:	b580      	push	{r7, lr}
 8013512:	b082      	sub	sp, #8
 8013514:	af00      	add	r7, sp, #0
 8013516:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8013518:	687b      	ldr	r3, [r7, #4]
 801351a:	681b      	ldr	r3, [r3, #0]
 801351c:	68d8      	ldr	r0, [r3, #12]
 801351e:	687b      	ldr	r3, [r7, #4]
 8013520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013522:	1c99      	adds	r1, r3, #2
 8013524:	687a      	ldr	r2, [r7, #4]
 8013526:	62d1      	str	r1, [r2, #44]	; 0x2c
 8013528:	b282      	uxth	r2, r0
 801352a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 801352c:	687b      	ldr	r3, [r7, #4]
 801352e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013530:	b29b      	uxth	r3, r3
 8013532:	3b01      	subs	r3, #1
 8013534:	b29a      	uxth	r2, r3
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 801353a:	687b      	ldr	r3, [r7, #4]
 801353c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801353e:	b29b      	uxth	r3, r3
 8013540:	2b00      	cmp	r3, #0
 8013542:	d113      	bne.n	801356c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8013544:	687b      	ldr	r3, [r7, #4]
 8013546:	681b      	ldr	r3, [r3, #0]
 8013548:	685a      	ldr	r2, [r3, #4]
 801354a:	687b      	ldr	r3, [r7, #4]
 801354c:	681b      	ldr	r3, [r3, #0]
 801354e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8013552:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8013554:	687b      	ldr	r3, [r7, #4]
 8013556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013558:	b29b      	uxth	r3, r3
 801355a:	2b00      	cmp	r3, #0
 801355c:	d106      	bne.n	801356c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 801355e:	687b      	ldr	r3, [r7, #4]
 8013560:	2201      	movs	r2, #1
 8013562:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8013566:	6878      	ldr	r0, [r7, #4]
 8013568:	f7ff ff4a 	bl	8013400 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 801356c:	bf00      	nop
 801356e:	3708      	adds	r7, #8
 8013570:	46bd      	mov	sp, r7
 8013572:	bd80      	pop	{r7, pc}

08013574 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8013574:	b580      	push	{r7, lr}
 8013576:	b082      	sub	sp, #8
 8013578:	af00      	add	r7, sp, #0
 801357a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 801357c:	687b      	ldr	r3, [r7, #4]
 801357e:	681b      	ldr	r3, [r3, #0]
 8013580:	4a20      	ldr	r2, [pc, #128]	; (8013604 <I2SEx_RxISR_I2SExt+0x90>)
 8013582:	4293      	cmp	r3, r2
 8013584:	d101      	bne.n	801358a <I2SEx_RxISR_I2SExt+0x16>
 8013586:	4b20      	ldr	r3, [pc, #128]	; (8013608 <I2SEx_RxISR_I2SExt+0x94>)
 8013588:	e001      	b.n	801358e <I2SEx_RxISR_I2SExt+0x1a>
 801358a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 801358e:	68d8      	ldr	r0, [r3, #12]
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013594:	1c99      	adds	r1, r3, #2
 8013596:	687a      	ldr	r2, [r7, #4]
 8013598:	62d1      	str	r1, [r2, #44]	; 0x2c
 801359a:	b282      	uxth	r2, r0
 801359c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80135a2:	b29b      	uxth	r3, r3
 80135a4:	3b01      	subs	r3, #1
 80135a6:	b29a      	uxth	r2, r3
 80135a8:	687b      	ldr	r3, [r7, #4]
 80135aa:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80135ac:	687b      	ldr	r3, [r7, #4]
 80135ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80135b0:	b29b      	uxth	r3, r3
 80135b2:	2b00      	cmp	r3, #0
 80135b4:	d121      	bne.n	80135fa <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	681b      	ldr	r3, [r3, #0]
 80135ba:	4a12      	ldr	r2, [pc, #72]	; (8013604 <I2SEx_RxISR_I2SExt+0x90>)
 80135bc:	4293      	cmp	r3, r2
 80135be:	d101      	bne.n	80135c4 <I2SEx_RxISR_I2SExt+0x50>
 80135c0:	4b11      	ldr	r3, [pc, #68]	; (8013608 <I2SEx_RxISR_I2SExt+0x94>)
 80135c2:	e001      	b.n	80135c8 <I2SEx_RxISR_I2SExt+0x54>
 80135c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80135c8:	685a      	ldr	r2, [r3, #4]
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	681b      	ldr	r3, [r3, #0]
 80135ce:	490d      	ldr	r1, [pc, #52]	; (8013604 <I2SEx_RxISR_I2SExt+0x90>)
 80135d0:	428b      	cmp	r3, r1
 80135d2:	d101      	bne.n	80135d8 <I2SEx_RxISR_I2SExt+0x64>
 80135d4:	4b0c      	ldr	r3, [pc, #48]	; (8013608 <I2SEx_RxISR_I2SExt+0x94>)
 80135d6:	e001      	b.n	80135dc <I2SEx_RxISR_I2SExt+0x68>
 80135d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80135dc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80135e0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80135e2:	687b      	ldr	r3, [r7, #4]
 80135e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80135e6:	b29b      	uxth	r3, r3
 80135e8:	2b00      	cmp	r3, #0
 80135ea:	d106      	bne.n	80135fa <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80135ec:	687b      	ldr	r3, [r7, #4]
 80135ee:	2201      	movs	r2, #1
 80135f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80135f4:	6878      	ldr	r0, [r7, #4]
 80135f6:	f7ff ff03 	bl	8013400 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80135fa:	bf00      	nop
 80135fc:	3708      	adds	r7, #8
 80135fe:	46bd      	mov	sp, r7
 8013600:	bd80      	pop	{r7, pc}
 8013602:	bf00      	nop
 8013604:	40003800 	.word	0x40003800
 8013608:	40003400 	.word	0x40003400

0801360c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801360c:	b580      	push	{r7, lr}
 801360e:	b086      	sub	sp, #24
 8013610:	af00      	add	r7, sp, #0
 8013612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8013614:	687b      	ldr	r3, [r7, #4]
 8013616:	2b00      	cmp	r3, #0
 8013618:	d101      	bne.n	801361e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801361a:	2301      	movs	r3, #1
 801361c:	e25b      	b.n	8013ad6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	681b      	ldr	r3, [r3, #0]
 8013622:	f003 0301 	and.w	r3, r3, #1
 8013626:	2b00      	cmp	r3, #0
 8013628:	d075      	beq.n	8013716 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 801362a:	4ba3      	ldr	r3, [pc, #652]	; (80138b8 <HAL_RCC_OscConfig+0x2ac>)
 801362c:	689b      	ldr	r3, [r3, #8]
 801362e:	f003 030c 	and.w	r3, r3, #12
 8013632:	2b04      	cmp	r3, #4
 8013634:	d00c      	beq.n	8013650 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8013636:	4ba0      	ldr	r3, [pc, #640]	; (80138b8 <HAL_RCC_OscConfig+0x2ac>)
 8013638:	689b      	ldr	r3, [r3, #8]
 801363a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 801363e:	2b08      	cmp	r3, #8
 8013640:	d112      	bne.n	8013668 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8013642:	4b9d      	ldr	r3, [pc, #628]	; (80138b8 <HAL_RCC_OscConfig+0x2ac>)
 8013644:	685b      	ldr	r3, [r3, #4]
 8013646:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801364a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801364e:	d10b      	bne.n	8013668 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8013650:	4b99      	ldr	r3, [pc, #612]	; (80138b8 <HAL_RCC_OscConfig+0x2ac>)
 8013652:	681b      	ldr	r3, [r3, #0]
 8013654:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013658:	2b00      	cmp	r3, #0
 801365a:	d05b      	beq.n	8013714 <HAL_RCC_OscConfig+0x108>
 801365c:	687b      	ldr	r3, [r7, #4]
 801365e:	685b      	ldr	r3, [r3, #4]
 8013660:	2b00      	cmp	r3, #0
 8013662:	d157      	bne.n	8013714 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8013664:	2301      	movs	r3, #1
 8013666:	e236      	b.n	8013ad6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8013668:	687b      	ldr	r3, [r7, #4]
 801366a:	685b      	ldr	r3, [r3, #4]
 801366c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013670:	d106      	bne.n	8013680 <HAL_RCC_OscConfig+0x74>
 8013672:	4b91      	ldr	r3, [pc, #580]	; (80138b8 <HAL_RCC_OscConfig+0x2ac>)
 8013674:	681b      	ldr	r3, [r3, #0]
 8013676:	4a90      	ldr	r2, [pc, #576]	; (80138b8 <HAL_RCC_OscConfig+0x2ac>)
 8013678:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801367c:	6013      	str	r3, [r2, #0]
 801367e:	e01d      	b.n	80136bc <HAL_RCC_OscConfig+0xb0>
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	685b      	ldr	r3, [r3, #4]
 8013684:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8013688:	d10c      	bne.n	80136a4 <HAL_RCC_OscConfig+0x98>
 801368a:	4b8b      	ldr	r3, [pc, #556]	; (80138b8 <HAL_RCC_OscConfig+0x2ac>)
 801368c:	681b      	ldr	r3, [r3, #0]
 801368e:	4a8a      	ldr	r2, [pc, #552]	; (80138b8 <HAL_RCC_OscConfig+0x2ac>)
 8013690:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8013694:	6013      	str	r3, [r2, #0]
 8013696:	4b88      	ldr	r3, [pc, #544]	; (80138b8 <HAL_RCC_OscConfig+0x2ac>)
 8013698:	681b      	ldr	r3, [r3, #0]
 801369a:	4a87      	ldr	r2, [pc, #540]	; (80138b8 <HAL_RCC_OscConfig+0x2ac>)
 801369c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80136a0:	6013      	str	r3, [r2, #0]
 80136a2:	e00b      	b.n	80136bc <HAL_RCC_OscConfig+0xb0>
 80136a4:	4b84      	ldr	r3, [pc, #528]	; (80138b8 <HAL_RCC_OscConfig+0x2ac>)
 80136a6:	681b      	ldr	r3, [r3, #0]
 80136a8:	4a83      	ldr	r2, [pc, #524]	; (80138b8 <HAL_RCC_OscConfig+0x2ac>)
 80136aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80136ae:	6013      	str	r3, [r2, #0]
 80136b0:	4b81      	ldr	r3, [pc, #516]	; (80138b8 <HAL_RCC_OscConfig+0x2ac>)
 80136b2:	681b      	ldr	r3, [r3, #0]
 80136b4:	4a80      	ldr	r2, [pc, #512]	; (80138b8 <HAL_RCC_OscConfig+0x2ac>)
 80136b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80136ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	685b      	ldr	r3, [r3, #4]
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	d013      	beq.n	80136ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80136c4:	f7fd f9de 	bl	8010a84 <HAL_GetTick>
 80136c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80136ca:	e008      	b.n	80136de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80136cc:	f7fd f9da 	bl	8010a84 <HAL_GetTick>
 80136d0:	4602      	mov	r2, r0
 80136d2:	693b      	ldr	r3, [r7, #16]
 80136d4:	1ad3      	subs	r3, r2, r3
 80136d6:	2b64      	cmp	r3, #100	; 0x64
 80136d8:	d901      	bls.n	80136de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80136da:	2303      	movs	r3, #3
 80136dc:	e1fb      	b.n	8013ad6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80136de:	4b76      	ldr	r3, [pc, #472]	; (80138b8 <HAL_RCC_OscConfig+0x2ac>)
 80136e0:	681b      	ldr	r3, [r3, #0]
 80136e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80136e6:	2b00      	cmp	r3, #0
 80136e8:	d0f0      	beq.n	80136cc <HAL_RCC_OscConfig+0xc0>
 80136ea:	e014      	b.n	8013716 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80136ec:	f7fd f9ca 	bl	8010a84 <HAL_GetTick>
 80136f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80136f2:	e008      	b.n	8013706 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80136f4:	f7fd f9c6 	bl	8010a84 <HAL_GetTick>
 80136f8:	4602      	mov	r2, r0
 80136fa:	693b      	ldr	r3, [r7, #16]
 80136fc:	1ad3      	subs	r3, r2, r3
 80136fe:	2b64      	cmp	r3, #100	; 0x64
 8013700:	d901      	bls.n	8013706 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8013702:	2303      	movs	r3, #3
 8013704:	e1e7      	b.n	8013ad6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8013706:	4b6c      	ldr	r3, [pc, #432]	; (80138b8 <HAL_RCC_OscConfig+0x2ac>)
 8013708:	681b      	ldr	r3, [r3, #0]
 801370a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801370e:	2b00      	cmp	r3, #0
 8013710:	d1f0      	bne.n	80136f4 <HAL_RCC_OscConfig+0xe8>
 8013712:	e000      	b.n	8013716 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8013714:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8013716:	687b      	ldr	r3, [r7, #4]
 8013718:	681b      	ldr	r3, [r3, #0]
 801371a:	f003 0302 	and.w	r3, r3, #2
 801371e:	2b00      	cmp	r3, #0
 8013720:	d063      	beq.n	80137ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8013722:	4b65      	ldr	r3, [pc, #404]	; (80138b8 <HAL_RCC_OscConfig+0x2ac>)
 8013724:	689b      	ldr	r3, [r3, #8]
 8013726:	f003 030c 	and.w	r3, r3, #12
 801372a:	2b00      	cmp	r3, #0
 801372c:	d00b      	beq.n	8013746 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801372e:	4b62      	ldr	r3, [pc, #392]	; (80138b8 <HAL_RCC_OscConfig+0x2ac>)
 8013730:	689b      	ldr	r3, [r3, #8]
 8013732:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8013736:	2b08      	cmp	r3, #8
 8013738:	d11c      	bne.n	8013774 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801373a:	4b5f      	ldr	r3, [pc, #380]	; (80138b8 <HAL_RCC_OscConfig+0x2ac>)
 801373c:	685b      	ldr	r3, [r3, #4]
 801373e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8013742:	2b00      	cmp	r3, #0
 8013744:	d116      	bne.n	8013774 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8013746:	4b5c      	ldr	r3, [pc, #368]	; (80138b8 <HAL_RCC_OscConfig+0x2ac>)
 8013748:	681b      	ldr	r3, [r3, #0]
 801374a:	f003 0302 	and.w	r3, r3, #2
 801374e:	2b00      	cmp	r3, #0
 8013750:	d005      	beq.n	801375e <HAL_RCC_OscConfig+0x152>
 8013752:	687b      	ldr	r3, [r7, #4]
 8013754:	68db      	ldr	r3, [r3, #12]
 8013756:	2b01      	cmp	r3, #1
 8013758:	d001      	beq.n	801375e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 801375a:	2301      	movs	r3, #1
 801375c:	e1bb      	b.n	8013ad6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801375e:	4b56      	ldr	r3, [pc, #344]	; (80138b8 <HAL_RCC_OscConfig+0x2ac>)
 8013760:	681b      	ldr	r3, [r3, #0]
 8013762:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8013766:	687b      	ldr	r3, [r7, #4]
 8013768:	691b      	ldr	r3, [r3, #16]
 801376a:	00db      	lsls	r3, r3, #3
 801376c:	4952      	ldr	r1, [pc, #328]	; (80138b8 <HAL_RCC_OscConfig+0x2ac>)
 801376e:	4313      	orrs	r3, r2
 8013770:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8013772:	e03a      	b.n	80137ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8013774:	687b      	ldr	r3, [r7, #4]
 8013776:	68db      	ldr	r3, [r3, #12]
 8013778:	2b00      	cmp	r3, #0
 801377a:	d020      	beq.n	80137be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801377c:	4b4f      	ldr	r3, [pc, #316]	; (80138bc <HAL_RCC_OscConfig+0x2b0>)
 801377e:	2201      	movs	r2, #1
 8013780:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013782:	f7fd f97f 	bl	8010a84 <HAL_GetTick>
 8013786:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8013788:	e008      	b.n	801379c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801378a:	f7fd f97b 	bl	8010a84 <HAL_GetTick>
 801378e:	4602      	mov	r2, r0
 8013790:	693b      	ldr	r3, [r7, #16]
 8013792:	1ad3      	subs	r3, r2, r3
 8013794:	2b02      	cmp	r3, #2
 8013796:	d901      	bls.n	801379c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8013798:	2303      	movs	r3, #3
 801379a:	e19c      	b.n	8013ad6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801379c:	4b46      	ldr	r3, [pc, #280]	; (80138b8 <HAL_RCC_OscConfig+0x2ac>)
 801379e:	681b      	ldr	r3, [r3, #0]
 80137a0:	f003 0302 	and.w	r3, r3, #2
 80137a4:	2b00      	cmp	r3, #0
 80137a6:	d0f0      	beq.n	801378a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80137a8:	4b43      	ldr	r3, [pc, #268]	; (80138b8 <HAL_RCC_OscConfig+0x2ac>)
 80137aa:	681b      	ldr	r3, [r3, #0]
 80137ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	691b      	ldr	r3, [r3, #16]
 80137b4:	00db      	lsls	r3, r3, #3
 80137b6:	4940      	ldr	r1, [pc, #256]	; (80138b8 <HAL_RCC_OscConfig+0x2ac>)
 80137b8:	4313      	orrs	r3, r2
 80137ba:	600b      	str	r3, [r1, #0]
 80137bc:	e015      	b.n	80137ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80137be:	4b3f      	ldr	r3, [pc, #252]	; (80138bc <HAL_RCC_OscConfig+0x2b0>)
 80137c0:	2200      	movs	r2, #0
 80137c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80137c4:	f7fd f95e 	bl	8010a84 <HAL_GetTick>
 80137c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80137ca:	e008      	b.n	80137de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80137cc:	f7fd f95a 	bl	8010a84 <HAL_GetTick>
 80137d0:	4602      	mov	r2, r0
 80137d2:	693b      	ldr	r3, [r7, #16]
 80137d4:	1ad3      	subs	r3, r2, r3
 80137d6:	2b02      	cmp	r3, #2
 80137d8:	d901      	bls.n	80137de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80137da:	2303      	movs	r3, #3
 80137dc:	e17b      	b.n	8013ad6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80137de:	4b36      	ldr	r3, [pc, #216]	; (80138b8 <HAL_RCC_OscConfig+0x2ac>)
 80137e0:	681b      	ldr	r3, [r3, #0]
 80137e2:	f003 0302 	and.w	r3, r3, #2
 80137e6:	2b00      	cmp	r3, #0
 80137e8:	d1f0      	bne.n	80137cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80137ea:	687b      	ldr	r3, [r7, #4]
 80137ec:	681b      	ldr	r3, [r3, #0]
 80137ee:	f003 0308 	and.w	r3, r3, #8
 80137f2:	2b00      	cmp	r3, #0
 80137f4:	d030      	beq.n	8013858 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80137f6:	687b      	ldr	r3, [r7, #4]
 80137f8:	695b      	ldr	r3, [r3, #20]
 80137fa:	2b00      	cmp	r3, #0
 80137fc:	d016      	beq.n	801382c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80137fe:	4b30      	ldr	r3, [pc, #192]	; (80138c0 <HAL_RCC_OscConfig+0x2b4>)
 8013800:	2201      	movs	r2, #1
 8013802:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8013804:	f7fd f93e 	bl	8010a84 <HAL_GetTick>
 8013808:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801380a:	e008      	b.n	801381e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801380c:	f7fd f93a 	bl	8010a84 <HAL_GetTick>
 8013810:	4602      	mov	r2, r0
 8013812:	693b      	ldr	r3, [r7, #16]
 8013814:	1ad3      	subs	r3, r2, r3
 8013816:	2b02      	cmp	r3, #2
 8013818:	d901      	bls.n	801381e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 801381a:	2303      	movs	r3, #3
 801381c:	e15b      	b.n	8013ad6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801381e:	4b26      	ldr	r3, [pc, #152]	; (80138b8 <HAL_RCC_OscConfig+0x2ac>)
 8013820:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013822:	f003 0302 	and.w	r3, r3, #2
 8013826:	2b00      	cmp	r3, #0
 8013828:	d0f0      	beq.n	801380c <HAL_RCC_OscConfig+0x200>
 801382a:	e015      	b.n	8013858 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801382c:	4b24      	ldr	r3, [pc, #144]	; (80138c0 <HAL_RCC_OscConfig+0x2b4>)
 801382e:	2200      	movs	r2, #0
 8013830:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8013832:	f7fd f927 	bl	8010a84 <HAL_GetTick>
 8013836:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8013838:	e008      	b.n	801384c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801383a:	f7fd f923 	bl	8010a84 <HAL_GetTick>
 801383e:	4602      	mov	r2, r0
 8013840:	693b      	ldr	r3, [r7, #16]
 8013842:	1ad3      	subs	r3, r2, r3
 8013844:	2b02      	cmp	r3, #2
 8013846:	d901      	bls.n	801384c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8013848:	2303      	movs	r3, #3
 801384a:	e144      	b.n	8013ad6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801384c:	4b1a      	ldr	r3, [pc, #104]	; (80138b8 <HAL_RCC_OscConfig+0x2ac>)
 801384e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013850:	f003 0302 	and.w	r3, r3, #2
 8013854:	2b00      	cmp	r3, #0
 8013856:	d1f0      	bne.n	801383a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	681b      	ldr	r3, [r3, #0]
 801385c:	f003 0304 	and.w	r3, r3, #4
 8013860:	2b00      	cmp	r3, #0
 8013862:	f000 80a0 	beq.w	80139a6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8013866:	2300      	movs	r3, #0
 8013868:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801386a:	4b13      	ldr	r3, [pc, #76]	; (80138b8 <HAL_RCC_OscConfig+0x2ac>)
 801386c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801386e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013872:	2b00      	cmp	r3, #0
 8013874:	d10f      	bne.n	8013896 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8013876:	2300      	movs	r3, #0
 8013878:	60bb      	str	r3, [r7, #8]
 801387a:	4b0f      	ldr	r3, [pc, #60]	; (80138b8 <HAL_RCC_OscConfig+0x2ac>)
 801387c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801387e:	4a0e      	ldr	r2, [pc, #56]	; (80138b8 <HAL_RCC_OscConfig+0x2ac>)
 8013880:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013884:	6413      	str	r3, [r2, #64]	; 0x40
 8013886:	4b0c      	ldr	r3, [pc, #48]	; (80138b8 <HAL_RCC_OscConfig+0x2ac>)
 8013888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801388a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801388e:	60bb      	str	r3, [r7, #8]
 8013890:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8013892:	2301      	movs	r3, #1
 8013894:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8013896:	4b0b      	ldr	r3, [pc, #44]	; (80138c4 <HAL_RCC_OscConfig+0x2b8>)
 8013898:	681b      	ldr	r3, [r3, #0]
 801389a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801389e:	2b00      	cmp	r3, #0
 80138a0:	d121      	bne.n	80138e6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80138a2:	4b08      	ldr	r3, [pc, #32]	; (80138c4 <HAL_RCC_OscConfig+0x2b8>)
 80138a4:	681b      	ldr	r3, [r3, #0]
 80138a6:	4a07      	ldr	r2, [pc, #28]	; (80138c4 <HAL_RCC_OscConfig+0x2b8>)
 80138a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80138ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80138ae:	f7fd f8e9 	bl	8010a84 <HAL_GetTick>
 80138b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80138b4:	e011      	b.n	80138da <HAL_RCC_OscConfig+0x2ce>
 80138b6:	bf00      	nop
 80138b8:	40023800 	.word	0x40023800
 80138bc:	42470000 	.word	0x42470000
 80138c0:	42470e80 	.word	0x42470e80
 80138c4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80138c8:	f7fd f8dc 	bl	8010a84 <HAL_GetTick>
 80138cc:	4602      	mov	r2, r0
 80138ce:	693b      	ldr	r3, [r7, #16]
 80138d0:	1ad3      	subs	r3, r2, r3
 80138d2:	2b02      	cmp	r3, #2
 80138d4:	d901      	bls.n	80138da <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80138d6:	2303      	movs	r3, #3
 80138d8:	e0fd      	b.n	8013ad6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80138da:	4b81      	ldr	r3, [pc, #516]	; (8013ae0 <HAL_RCC_OscConfig+0x4d4>)
 80138dc:	681b      	ldr	r3, [r3, #0]
 80138de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80138e2:	2b00      	cmp	r3, #0
 80138e4:	d0f0      	beq.n	80138c8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80138e6:	687b      	ldr	r3, [r7, #4]
 80138e8:	689b      	ldr	r3, [r3, #8]
 80138ea:	2b01      	cmp	r3, #1
 80138ec:	d106      	bne.n	80138fc <HAL_RCC_OscConfig+0x2f0>
 80138ee:	4b7d      	ldr	r3, [pc, #500]	; (8013ae4 <HAL_RCC_OscConfig+0x4d8>)
 80138f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80138f2:	4a7c      	ldr	r2, [pc, #496]	; (8013ae4 <HAL_RCC_OscConfig+0x4d8>)
 80138f4:	f043 0301 	orr.w	r3, r3, #1
 80138f8:	6713      	str	r3, [r2, #112]	; 0x70
 80138fa:	e01c      	b.n	8013936 <HAL_RCC_OscConfig+0x32a>
 80138fc:	687b      	ldr	r3, [r7, #4]
 80138fe:	689b      	ldr	r3, [r3, #8]
 8013900:	2b05      	cmp	r3, #5
 8013902:	d10c      	bne.n	801391e <HAL_RCC_OscConfig+0x312>
 8013904:	4b77      	ldr	r3, [pc, #476]	; (8013ae4 <HAL_RCC_OscConfig+0x4d8>)
 8013906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013908:	4a76      	ldr	r2, [pc, #472]	; (8013ae4 <HAL_RCC_OscConfig+0x4d8>)
 801390a:	f043 0304 	orr.w	r3, r3, #4
 801390e:	6713      	str	r3, [r2, #112]	; 0x70
 8013910:	4b74      	ldr	r3, [pc, #464]	; (8013ae4 <HAL_RCC_OscConfig+0x4d8>)
 8013912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013914:	4a73      	ldr	r2, [pc, #460]	; (8013ae4 <HAL_RCC_OscConfig+0x4d8>)
 8013916:	f043 0301 	orr.w	r3, r3, #1
 801391a:	6713      	str	r3, [r2, #112]	; 0x70
 801391c:	e00b      	b.n	8013936 <HAL_RCC_OscConfig+0x32a>
 801391e:	4b71      	ldr	r3, [pc, #452]	; (8013ae4 <HAL_RCC_OscConfig+0x4d8>)
 8013920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013922:	4a70      	ldr	r2, [pc, #448]	; (8013ae4 <HAL_RCC_OscConfig+0x4d8>)
 8013924:	f023 0301 	bic.w	r3, r3, #1
 8013928:	6713      	str	r3, [r2, #112]	; 0x70
 801392a:	4b6e      	ldr	r3, [pc, #440]	; (8013ae4 <HAL_RCC_OscConfig+0x4d8>)
 801392c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801392e:	4a6d      	ldr	r2, [pc, #436]	; (8013ae4 <HAL_RCC_OscConfig+0x4d8>)
 8013930:	f023 0304 	bic.w	r3, r3, #4
 8013934:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	689b      	ldr	r3, [r3, #8]
 801393a:	2b00      	cmp	r3, #0
 801393c:	d015      	beq.n	801396a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801393e:	f7fd f8a1 	bl	8010a84 <HAL_GetTick>
 8013942:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8013944:	e00a      	b.n	801395c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8013946:	f7fd f89d 	bl	8010a84 <HAL_GetTick>
 801394a:	4602      	mov	r2, r0
 801394c:	693b      	ldr	r3, [r7, #16]
 801394e:	1ad3      	subs	r3, r2, r3
 8013950:	f241 3288 	movw	r2, #5000	; 0x1388
 8013954:	4293      	cmp	r3, r2
 8013956:	d901      	bls.n	801395c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8013958:	2303      	movs	r3, #3
 801395a:	e0bc      	b.n	8013ad6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801395c:	4b61      	ldr	r3, [pc, #388]	; (8013ae4 <HAL_RCC_OscConfig+0x4d8>)
 801395e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013960:	f003 0302 	and.w	r3, r3, #2
 8013964:	2b00      	cmp	r3, #0
 8013966:	d0ee      	beq.n	8013946 <HAL_RCC_OscConfig+0x33a>
 8013968:	e014      	b.n	8013994 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801396a:	f7fd f88b 	bl	8010a84 <HAL_GetTick>
 801396e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8013970:	e00a      	b.n	8013988 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8013972:	f7fd f887 	bl	8010a84 <HAL_GetTick>
 8013976:	4602      	mov	r2, r0
 8013978:	693b      	ldr	r3, [r7, #16]
 801397a:	1ad3      	subs	r3, r2, r3
 801397c:	f241 3288 	movw	r2, #5000	; 0x1388
 8013980:	4293      	cmp	r3, r2
 8013982:	d901      	bls.n	8013988 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8013984:	2303      	movs	r3, #3
 8013986:	e0a6      	b.n	8013ad6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8013988:	4b56      	ldr	r3, [pc, #344]	; (8013ae4 <HAL_RCC_OscConfig+0x4d8>)
 801398a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801398c:	f003 0302 	and.w	r3, r3, #2
 8013990:	2b00      	cmp	r3, #0
 8013992:	d1ee      	bne.n	8013972 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8013994:	7dfb      	ldrb	r3, [r7, #23]
 8013996:	2b01      	cmp	r3, #1
 8013998:	d105      	bne.n	80139a6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801399a:	4b52      	ldr	r3, [pc, #328]	; (8013ae4 <HAL_RCC_OscConfig+0x4d8>)
 801399c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801399e:	4a51      	ldr	r2, [pc, #324]	; (8013ae4 <HAL_RCC_OscConfig+0x4d8>)
 80139a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80139a4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	699b      	ldr	r3, [r3, #24]
 80139aa:	2b00      	cmp	r3, #0
 80139ac:	f000 8092 	beq.w	8013ad4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80139b0:	4b4c      	ldr	r3, [pc, #304]	; (8013ae4 <HAL_RCC_OscConfig+0x4d8>)
 80139b2:	689b      	ldr	r3, [r3, #8]
 80139b4:	f003 030c 	and.w	r3, r3, #12
 80139b8:	2b08      	cmp	r3, #8
 80139ba:	d05c      	beq.n	8013a76 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	699b      	ldr	r3, [r3, #24]
 80139c0:	2b02      	cmp	r3, #2
 80139c2:	d141      	bne.n	8013a48 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80139c4:	4b48      	ldr	r3, [pc, #288]	; (8013ae8 <HAL_RCC_OscConfig+0x4dc>)
 80139c6:	2200      	movs	r2, #0
 80139c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80139ca:	f7fd f85b 	bl	8010a84 <HAL_GetTick>
 80139ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80139d0:	e008      	b.n	80139e4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80139d2:	f7fd f857 	bl	8010a84 <HAL_GetTick>
 80139d6:	4602      	mov	r2, r0
 80139d8:	693b      	ldr	r3, [r7, #16]
 80139da:	1ad3      	subs	r3, r2, r3
 80139dc:	2b02      	cmp	r3, #2
 80139de:	d901      	bls.n	80139e4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80139e0:	2303      	movs	r3, #3
 80139e2:	e078      	b.n	8013ad6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80139e4:	4b3f      	ldr	r3, [pc, #252]	; (8013ae4 <HAL_RCC_OscConfig+0x4d8>)
 80139e6:	681b      	ldr	r3, [r3, #0]
 80139e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80139ec:	2b00      	cmp	r3, #0
 80139ee:	d1f0      	bne.n	80139d2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80139f0:	687b      	ldr	r3, [r7, #4]
 80139f2:	69da      	ldr	r2, [r3, #28]
 80139f4:	687b      	ldr	r3, [r7, #4]
 80139f6:	6a1b      	ldr	r3, [r3, #32]
 80139f8:	431a      	orrs	r2, r3
 80139fa:	687b      	ldr	r3, [r7, #4]
 80139fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80139fe:	019b      	lsls	r3, r3, #6
 8013a00:	431a      	orrs	r2, r3
 8013a02:	687b      	ldr	r3, [r7, #4]
 8013a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013a06:	085b      	lsrs	r3, r3, #1
 8013a08:	3b01      	subs	r3, #1
 8013a0a:	041b      	lsls	r3, r3, #16
 8013a0c:	431a      	orrs	r2, r3
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a12:	061b      	lsls	r3, r3, #24
 8013a14:	4933      	ldr	r1, [pc, #204]	; (8013ae4 <HAL_RCC_OscConfig+0x4d8>)
 8013a16:	4313      	orrs	r3, r2
 8013a18:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8013a1a:	4b33      	ldr	r3, [pc, #204]	; (8013ae8 <HAL_RCC_OscConfig+0x4dc>)
 8013a1c:	2201      	movs	r2, #1
 8013a1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013a20:	f7fd f830 	bl	8010a84 <HAL_GetTick>
 8013a24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8013a26:	e008      	b.n	8013a3a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8013a28:	f7fd f82c 	bl	8010a84 <HAL_GetTick>
 8013a2c:	4602      	mov	r2, r0
 8013a2e:	693b      	ldr	r3, [r7, #16]
 8013a30:	1ad3      	subs	r3, r2, r3
 8013a32:	2b02      	cmp	r3, #2
 8013a34:	d901      	bls.n	8013a3a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8013a36:	2303      	movs	r3, #3
 8013a38:	e04d      	b.n	8013ad6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8013a3a:	4b2a      	ldr	r3, [pc, #168]	; (8013ae4 <HAL_RCC_OscConfig+0x4d8>)
 8013a3c:	681b      	ldr	r3, [r3, #0]
 8013a3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013a42:	2b00      	cmp	r3, #0
 8013a44:	d0f0      	beq.n	8013a28 <HAL_RCC_OscConfig+0x41c>
 8013a46:	e045      	b.n	8013ad4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8013a48:	4b27      	ldr	r3, [pc, #156]	; (8013ae8 <HAL_RCC_OscConfig+0x4dc>)
 8013a4a:	2200      	movs	r2, #0
 8013a4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013a4e:	f7fd f819 	bl	8010a84 <HAL_GetTick>
 8013a52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8013a54:	e008      	b.n	8013a68 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8013a56:	f7fd f815 	bl	8010a84 <HAL_GetTick>
 8013a5a:	4602      	mov	r2, r0
 8013a5c:	693b      	ldr	r3, [r7, #16]
 8013a5e:	1ad3      	subs	r3, r2, r3
 8013a60:	2b02      	cmp	r3, #2
 8013a62:	d901      	bls.n	8013a68 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8013a64:	2303      	movs	r3, #3
 8013a66:	e036      	b.n	8013ad6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8013a68:	4b1e      	ldr	r3, [pc, #120]	; (8013ae4 <HAL_RCC_OscConfig+0x4d8>)
 8013a6a:	681b      	ldr	r3, [r3, #0]
 8013a6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013a70:	2b00      	cmp	r3, #0
 8013a72:	d1f0      	bne.n	8013a56 <HAL_RCC_OscConfig+0x44a>
 8013a74:	e02e      	b.n	8013ad4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8013a76:	687b      	ldr	r3, [r7, #4]
 8013a78:	699b      	ldr	r3, [r3, #24]
 8013a7a:	2b01      	cmp	r3, #1
 8013a7c:	d101      	bne.n	8013a82 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8013a7e:	2301      	movs	r3, #1
 8013a80:	e029      	b.n	8013ad6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8013a82:	4b18      	ldr	r3, [pc, #96]	; (8013ae4 <HAL_RCC_OscConfig+0x4d8>)
 8013a84:	685b      	ldr	r3, [r3, #4]
 8013a86:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8013a88:	68fb      	ldr	r3, [r7, #12]
 8013a8a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8013a8e:	687b      	ldr	r3, [r7, #4]
 8013a90:	69db      	ldr	r3, [r3, #28]
 8013a92:	429a      	cmp	r2, r3
 8013a94:	d11c      	bne.n	8013ad0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8013a96:	68fb      	ldr	r3, [r7, #12]
 8013a98:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8013a9c:	687b      	ldr	r3, [r7, #4]
 8013a9e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8013aa0:	429a      	cmp	r2, r3
 8013aa2:	d115      	bne.n	8013ad0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8013aa4:	68fa      	ldr	r2, [r7, #12]
 8013aa6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8013aaa:	4013      	ands	r3, r2
 8013aac:	687a      	ldr	r2, [r7, #4]
 8013aae:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8013ab0:	4293      	cmp	r3, r2
 8013ab2:	d10d      	bne.n	8013ad0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8013ab4:	68fb      	ldr	r3, [r7, #12]
 8013ab6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8013aba:	687b      	ldr	r3, [r7, #4]
 8013abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8013abe:	429a      	cmp	r2, r3
 8013ac0:	d106      	bne.n	8013ad0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8013ac2:	68fb      	ldr	r3, [r7, #12]
 8013ac4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8013ac8:	687b      	ldr	r3, [r7, #4]
 8013aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8013acc:	429a      	cmp	r2, r3
 8013ace:	d001      	beq.n	8013ad4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8013ad0:	2301      	movs	r3, #1
 8013ad2:	e000      	b.n	8013ad6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8013ad4:	2300      	movs	r3, #0
}
 8013ad6:	4618      	mov	r0, r3
 8013ad8:	3718      	adds	r7, #24
 8013ada:	46bd      	mov	sp, r7
 8013adc:	bd80      	pop	{r7, pc}
 8013ade:	bf00      	nop
 8013ae0:	40007000 	.word	0x40007000
 8013ae4:	40023800 	.word	0x40023800
 8013ae8:	42470060 	.word	0x42470060

08013aec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8013aec:	b580      	push	{r7, lr}
 8013aee:	b084      	sub	sp, #16
 8013af0:	af00      	add	r7, sp, #0
 8013af2:	6078      	str	r0, [r7, #4]
 8013af4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8013af6:	687b      	ldr	r3, [r7, #4]
 8013af8:	2b00      	cmp	r3, #0
 8013afa:	d101      	bne.n	8013b00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8013afc:	2301      	movs	r3, #1
 8013afe:	e0cc      	b.n	8013c9a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8013b00:	4b68      	ldr	r3, [pc, #416]	; (8013ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8013b02:	681b      	ldr	r3, [r3, #0]
 8013b04:	f003 030f 	and.w	r3, r3, #15
 8013b08:	683a      	ldr	r2, [r7, #0]
 8013b0a:	429a      	cmp	r2, r3
 8013b0c:	d90c      	bls.n	8013b28 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8013b0e:	4b65      	ldr	r3, [pc, #404]	; (8013ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8013b10:	683a      	ldr	r2, [r7, #0]
 8013b12:	b2d2      	uxtb	r2, r2
 8013b14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8013b16:	4b63      	ldr	r3, [pc, #396]	; (8013ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8013b18:	681b      	ldr	r3, [r3, #0]
 8013b1a:	f003 030f 	and.w	r3, r3, #15
 8013b1e:	683a      	ldr	r2, [r7, #0]
 8013b20:	429a      	cmp	r2, r3
 8013b22:	d001      	beq.n	8013b28 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8013b24:	2301      	movs	r3, #1
 8013b26:	e0b8      	b.n	8013c9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8013b28:	687b      	ldr	r3, [r7, #4]
 8013b2a:	681b      	ldr	r3, [r3, #0]
 8013b2c:	f003 0302 	and.w	r3, r3, #2
 8013b30:	2b00      	cmp	r3, #0
 8013b32:	d020      	beq.n	8013b76 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8013b34:	687b      	ldr	r3, [r7, #4]
 8013b36:	681b      	ldr	r3, [r3, #0]
 8013b38:	f003 0304 	and.w	r3, r3, #4
 8013b3c:	2b00      	cmp	r3, #0
 8013b3e:	d005      	beq.n	8013b4c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8013b40:	4b59      	ldr	r3, [pc, #356]	; (8013ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8013b42:	689b      	ldr	r3, [r3, #8]
 8013b44:	4a58      	ldr	r2, [pc, #352]	; (8013ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8013b46:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8013b4a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8013b4c:	687b      	ldr	r3, [r7, #4]
 8013b4e:	681b      	ldr	r3, [r3, #0]
 8013b50:	f003 0308 	and.w	r3, r3, #8
 8013b54:	2b00      	cmp	r3, #0
 8013b56:	d005      	beq.n	8013b64 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8013b58:	4b53      	ldr	r3, [pc, #332]	; (8013ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8013b5a:	689b      	ldr	r3, [r3, #8]
 8013b5c:	4a52      	ldr	r2, [pc, #328]	; (8013ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8013b5e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8013b62:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8013b64:	4b50      	ldr	r3, [pc, #320]	; (8013ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8013b66:	689b      	ldr	r3, [r3, #8]
 8013b68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	689b      	ldr	r3, [r3, #8]
 8013b70:	494d      	ldr	r1, [pc, #308]	; (8013ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8013b72:	4313      	orrs	r3, r2
 8013b74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	681b      	ldr	r3, [r3, #0]
 8013b7a:	f003 0301 	and.w	r3, r3, #1
 8013b7e:	2b00      	cmp	r3, #0
 8013b80:	d044      	beq.n	8013c0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8013b82:	687b      	ldr	r3, [r7, #4]
 8013b84:	685b      	ldr	r3, [r3, #4]
 8013b86:	2b01      	cmp	r3, #1
 8013b88:	d107      	bne.n	8013b9a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8013b8a:	4b47      	ldr	r3, [pc, #284]	; (8013ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8013b8c:	681b      	ldr	r3, [r3, #0]
 8013b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013b92:	2b00      	cmp	r3, #0
 8013b94:	d119      	bne.n	8013bca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8013b96:	2301      	movs	r3, #1
 8013b98:	e07f      	b.n	8013c9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8013b9a:	687b      	ldr	r3, [r7, #4]
 8013b9c:	685b      	ldr	r3, [r3, #4]
 8013b9e:	2b02      	cmp	r3, #2
 8013ba0:	d003      	beq.n	8013baa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8013ba2:	687b      	ldr	r3, [r7, #4]
 8013ba4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8013ba6:	2b03      	cmp	r3, #3
 8013ba8:	d107      	bne.n	8013bba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8013baa:	4b3f      	ldr	r3, [pc, #252]	; (8013ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8013bac:	681b      	ldr	r3, [r3, #0]
 8013bae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013bb2:	2b00      	cmp	r3, #0
 8013bb4:	d109      	bne.n	8013bca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8013bb6:	2301      	movs	r3, #1
 8013bb8:	e06f      	b.n	8013c9a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8013bba:	4b3b      	ldr	r3, [pc, #236]	; (8013ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8013bbc:	681b      	ldr	r3, [r3, #0]
 8013bbe:	f003 0302 	and.w	r3, r3, #2
 8013bc2:	2b00      	cmp	r3, #0
 8013bc4:	d101      	bne.n	8013bca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8013bc6:	2301      	movs	r3, #1
 8013bc8:	e067      	b.n	8013c9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8013bca:	4b37      	ldr	r3, [pc, #220]	; (8013ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8013bcc:	689b      	ldr	r3, [r3, #8]
 8013bce:	f023 0203 	bic.w	r2, r3, #3
 8013bd2:	687b      	ldr	r3, [r7, #4]
 8013bd4:	685b      	ldr	r3, [r3, #4]
 8013bd6:	4934      	ldr	r1, [pc, #208]	; (8013ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8013bd8:	4313      	orrs	r3, r2
 8013bda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8013bdc:	f7fc ff52 	bl	8010a84 <HAL_GetTick>
 8013be0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8013be2:	e00a      	b.n	8013bfa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8013be4:	f7fc ff4e 	bl	8010a84 <HAL_GetTick>
 8013be8:	4602      	mov	r2, r0
 8013bea:	68fb      	ldr	r3, [r7, #12]
 8013bec:	1ad3      	subs	r3, r2, r3
 8013bee:	f241 3288 	movw	r2, #5000	; 0x1388
 8013bf2:	4293      	cmp	r3, r2
 8013bf4:	d901      	bls.n	8013bfa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8013bf6:	2303      	movs	r3, #3
 8013bf8:	e04f      	b.n	8013c9a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8013bfa:	4b2b      	ldr	r3, [pc, #172]	; (8013ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8013bfc:	689b      	ldr	r3, [r3, #8]
 8013bfe:	f003 020c 	and.w	r2, r3, #12
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	685b      	ldr	r3, [r3, #4]
 8013c06:	009b      	lsls	r3, r3, #2
 8013c08:	429a      	cmp	r2, r3
 8013c0a:	d1eb      	bne.n	8013be4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8013c0c:	4b25      	ldr	r3, [pc, #148]	; (8013ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8013c0e:	681b      	ldr	r3, [r3, #0]
 8013c10:	f003 030f 	and.w	r3, r3, #15
 8013c14:	683a      	ldr	r2, [r7, #0]
 8013c16:	429a      	cmp	r2, r3
 8013c18:	d20c      	bcs.n	8013c34 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8013c1a:	4b22      	ldr	r3, [pc, #136]	; (8013ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8013c1c:	683a      	ldr	r2, [r7, #0]
 8013c1e:	b2d2      	uxtb	r2, r2
 8013c20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8013c22:	4b20      	ldr	r3, [pc, #128]	; (8013ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8013c24:	681b      	ldr	r3, [r3, #0]
 8013c26:	f003 030f 	and.w	r3, r3, #15
 8013c2a:	683a      	ldr	r2, [r7, #0]
 8013c2c:	429a      	cmp	r2, r3
 8013c2e:	d001      	beq.n	8013c34 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8013c30:	2301      	movs	r3, #1
 8013c32:	e032      	b.n	8013c9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8013c34:	687b      	ldr	r3, [r7, #4]
 8013c36:	681b      	ldr	r3, [r3, #0]
 8013c38:	f003 0304 	and.w	r3, r3, #4
 8013c3c:	2b00      	cmp	r3, #0
 8013c3e:	d008      	beq.n	8013c52 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8013c40:	4b19      	ldr	r3, [pc, #100]	; (8013ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8013c42:	689b      	ldr	r3, [r3, #8]
 8013c44:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	68db      	ldr	r3, [r3, #12]
 8013c4c:	4916      	ldr	r1, [pc, #88]	; (8013ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8013c4e:	4313      	orrs	r3, r2
 8013c50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8013c52:	687b      	ldr	r3, [r7, #4]
 8013c54:	681b      	ldr	r3, [r3, #0]
 8013c56:	f003 0308 	and.w	r3, r3, #8
 8013c5a:	2b00      	cmp	r3, #0
 8013c5c:	d009      	beq.n	8013c72 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8013c5e:	4b12      	ldr	r3, [pc, #72]	; (8013ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8013c60:	689b      	ldr	r3, [r3, #8]
 8013c62:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8013c66:	687b      	ldr	r3, [r7, #4]
 8013c68:	691b      	ldr	r3, [r3, #16]
 8013c6a:	00db      	lsls	r3, r3, #3
 8013c6c:	490e      	ldr	r1, [pc, #56]	; (8013ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8013c6e:	4313      	orrs	r3, r2
 8013c70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8013c72:	f000 f821 	bl	8013cb8 <HAL_RCC_GetSysClockFreq>
 8013c76:	4601      	mov	r1, r0
 8013c78:	4b0b      	ldr	r3, [pc, #44]	; (8013ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8013c7a:	689b      	ldr	r3, [r3, #8]
 8013c7c:	091b      	lsrs	r3, r3, #4
 8013c7e:	f003 030f 	and.w	r3, r3, #15
 8013c82:	4a0a      	ldr	r2, [pc, #40]	; (8013cac <HAL_RCC_ClockConfig+0x1c0>)
 8013c84:	5cd3      	ldrb	r3, [r2, r3]
 8013c86:	fa21 f303 	lsr.w	r3, r1, r3
 8013c8a:	4a09      	ldr	r2, [pc, #36]	; (8013cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8013c8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8013c8e:	4b09      	ldr	r3, [pc, #36]	; (8013cb4 <HAL_RCC_ClockConfig+0x1c8>)
 8013c90:	681b      	ldr	r3, [r3, #0]
 8013c92:	4618      	mov	r0, r3
 8013c94:	f7fc feb2 	bl	80109fc <HAL_InitTick>

  return HAL_OK;
 8013c98:	2300      	movs	r3, #0
}
 8013c9a:	4618      	mov	r0, r3
 8013c9c:	3710      	adds	r7, #16
 8013c9e:	46bd      	mov	sp, r7
 8013ca0:	bd80      	pop	{r7, pc}
 8013ca2:	bf00      	nop
 8013ca4:	40023c00 	.word	0x40023c00
 8013ca8:	40023800 	.word	0x40023800
 8013cac:	0801b194 	.word	0x0801b194
 8013cb0:	200001e8 	.word	0x200001e8
 8013cb4:	200001ec 	.word	0x200001ec

08013cb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8013cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013cba:	b085      	sub	sp, #20
 8013cbc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8013cbe:	2300      	movs	r3, #0
 8013cc0:	607b      	str	r3, [r7, #4]
 8013cc2:	2300      	movs	r3, #0
 8013cc4:	60fb      	str	r3, [r7, #12]
 8013cc6:	2300      	movs	r3, #0
 8013cc8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8013cca:	2300      	movs	r3, #0
 8013ccc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8013cce:	4b63      	ldr	r3, [pc, #396]	; (8013e5c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8013cd0:	689b      	ldr	r3, [r3, #8]
 8013cd2:	f003 030c 	and.w	r3, r3, #12
 8013cd6:	2b04      	cmp	r3, #4
 8013cd8:	d007      	beq.n	8013cea <HAL_RCC_GetSysClockFreq+0x32>
 8013cda:	2b08      	cmp	r3, #8
 8013cdc:	d008      	beq.n	8013cf0 <HAL_RCC_GetSysClockFreq+0x38>
 8013cde:	2b00      	cmp	r3, #0
 8013ce0:	f040 80b4 	bne.w	8013e4c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8013ce4:	4b5e      	ldr	r3, [pc, #376]	; (8013e60 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8013ce6:	60bb      	str	r3, [r7, #8]
       break;
 8013ce8:	e0b3      	b.n	8013e52 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8013cea:	4b5e      	ldr	r3, [pc, #376]	; (8013e64 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8013cec:	60bb      	str	r3, [r7, #8]
      break;
 8013cee:	e0b0      	b.n	8013e52 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8013cf0:	4b5a      	ldr	r3, [pc, #360]	; (8013e5c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8013cf2:	685b      	ldr	r3, [r3, #4]
 8013cf4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013cf8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8013cfa:	4b58      	ldr	r3, [pc, #352]	; (8013e5c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8013cfc:	685b      	ldr	r3, [r3, #4]
 8013cfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8013d02:	2b00      	cmp	r3, #0
 8013d04:	d04a      	beq.n	8013d9c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8013d06:	4b55      	ldr	r3, [pc, #340]	; (8013e5c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8013d08:	685b      	ldr	r3, [r3, #4]
 8013d0a:	099b      	lsrs	r3, r3, #6
 8013d0c:	f04f 0400 	mov.w	r4, #0
 8013d10:	f240 11ff 	movw	r1, #511	; 0x1ff
 8013d14:	f04f 0200 	mov.w	r2, #0
 8013d18:	ea03 0501 	and.w	r5, r3, r1
 8013d1c:	ea04 0602 	and.w	r6, r4, r2
 8013d20:	4629      	mov	r1, r5
 8013d22:	4632      	mov	r2, r6
 8013d24:	f04f 0300 	mov.w	r3, #0
 8013d28:	f04f 0400 	mov.w	r4, #0
 8013d2c:	0154      	lsls	r4, r2, #5
 8013d2e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8013d32:	014b      	lsls	r3, r1, #5
 8013d34:	4619      	mov	r1, r3
 8013d36:	4622      	mov	r2, r4
 8013d38:	1b49      	subs	r1, r1, r5
 8013d3a:	eb62 0206 	sbc.w	r2, r2, r6
 8013d3e:	f04f 0300 	mov.w	r3, #0
 8013d42:	f04f 0400 	mov.w	r4, #0
 8013d46:	0194      	lsls	r4, r2, #6
 8013d48:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8013d4c:	018b      	lsls	r3, r1, #6
 8013d4e:	1a5b      	subs	r3, r3, r1
 8013d50:	eb64 0402 	sbc.w	r4, r4, r2
 8013d54:	f04f 0100 	mov.w	r1, #0
 8013d58:	f04f 0200 	mov.w	r2, #0
 8013d5c:	00e2      	lsls	r2, r4, #3
 8013d5e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8013d62:	00d9      	lsls	r1, r3, #3
 8013d64:	460b      	mov	r3, r1
 8013d66:	4614      	mov	r4, r2
 8013d68:	195b      	adds	r3, r3, r5
 8013d6a:	eb44 0406 	adc.w	r4, r4, r6
 8013d6e:	f04f 0100 	mov.w	r1, #0
 8013d72:	f04f 0200 	mov.w	r2, #0
 8013d76:	0262      	lsls	r2, r4, #9
 8013d78:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8013d7c:	0259      	lsls	r1, r3, #9
 8013d7e:	460b      	mov	r3, r1
 8013d80:	4614      	mov	r4, r2
 8013d82:	4618      	mov	r0, r3
 8013d84:	4621      	mov	r1, r4
 8013d86:	687b      	ldr	r3, [r7, #4]
 8013d88:	f04f 0400 	mov.w	r4, #0
 8013d8c:	461a      	mov	r2, r3
 8013d8e:	4623      	mov	r3, r4
 8013d90:	f7ec fa2a 	bl	80001e8 <__aeabi_uldivmod>
 8013d94:	4603      	mov	r3, r0
 8013d96:	460c      	mov	r4, r1
 8013d98:	60fb      	str	r3, [r7, #12]
 8013d9a:	e049      	b.n	8013e30 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8013d9c:	4b2f      	ldr	r3, [pc, #188]	; (8013e5c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8013d9e:	685b      	ldr	r3, [r3, #4]
 8013da0:	099b      	lsrs	r3, r3, #6
 8013da2:	f04f 0400 	mov.w	r4, #0
 8013da6:	f240 11ff 	movw	r1, #511	; 0x1ff
 8013daa:	f04f 0200 	mov.w	r2, #0
 8013dae:	ea03 0501 	and.w	r5, r3, r1
 8013db2:	ea04 0602 	and.w	r6, r4, r2
 8013db6:	4629      	mov	r1, r5
 8013db8:	4632      	mov	r2, r6
 8013dba:	f04f 0300 	mov.w	r3, #0
 8013dbe:	f04f 0400 	mov.w	r4, #0
 8013dc2:	0154      	lsls	r4, r2, #5
 8013dc4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8013dc8:	014b      	lsls	r3, r1, #5
 8013dca:	4619      	mov	r1, r3
 8013dcc:	4622      	mov	r2, r4
 8013dce:	1b49      	subs	r1, r1, r5
 8013dd0:	eb62 0206 	sbc.w	r2, r2, r6
 8013dd4:	f04f 0300 	mov.w	r3, #0
 8013dd8:	f04f 0400 	mov.w	r4, #0
 8013ddc:	0194      	lsls	r4, r2, #6
 8013dde:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8013de2:	018b      	lsls	r3, r1, #6
 8013de4:	1a5b      	subs	r3, r3, r1
 8013de6:	eb64 0402 	sbc.w	r4, r4, r2
 8013dea:	f04f 0100 	mov.w	r1, #0
 8013dee:	f04f 0200 	mov.w	r2, #0
 8013df2:	00e2      	lsls	r2, r4, #3
 8013df4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8013df8:	00d9      	lsls	r1, r3, #3
 8013dfa:	460b      	mov	r3, r1
 8013dfc:	4614      	mov	r4, r2
 8013dfe:	195b      	adds	r3, r3, r5
 8013e00:	eb44 0406 	adc.w	r4, r4, r6
 8013e04:	f04f 0100 	mov.w	r1, #0
 8013e08:	f04f 0200 	mov.w	r2, #0
 8013e0c:	02a2      	lsls	r2, r4, #10
 8013e0e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8013e12:	0299      	lsls	r1, r3, #10
 8013e14:	460b      	mov	r3, r1
 8013e16:	4614      	mov	r4, r2
 8013e18:	4618      	mov	r0, r3
 8013e1a:	4621      	mov	r1, r4
 8013e1c:	687b      	ldr	r3, [r7, #4]
 8013e1e:	f04f 0400 	mov.w	r4, #0
 8013e22:	461a      	mov	r2, r3
 8013e24:	4623      	mov	r3, r4
 8013e26:	f7ec f9df 	bl	80001e8 <__aeabi_uldivmod>
 8013e2a:	4603      	mov	r3, r0
 8013e2c:	460c      	mov	r4, r1
 8013e2e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8013e30:	4b0a      	ldr	r3, [pc, #40]	; (8013e5c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8013e32:	685b      	ldr	r3, [r3, #4]
 8013e34:	0c1b      	lsrs	r3, r3, #16
 8013e36:	f003 0303 	and.w	r3, r3, #3
 8013e3a:	3301      	adds	r3, #1
 8013e3c:	005b      	lsls	r3, r3, #1
 8013e3e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8013e40:	68fa      	ldr	r2, [r7, #12]
 8013e42:	683b      	ldr	r3, [r7, #0]
 8013e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8013e48:	60bb      	str	r3, [r7, #8]
      break;
 8013e4a:	e002      	b.n	8013e52 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8013e4c:	4b04      	ldr	r3, [pc, #16]	; (8013e60 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8013e4e:	60bb      	str	r3, [r7, #8]
      break;
 8013e50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8013e52:	68bb      	ldr	r3, [r7, #8]
}
 8013e54:	4618      	mov	r0, r3
 8013e56:	3714      	adds	r7, #20
 8013e58:	46bd      	mov	sp, r7
 8013e5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013e5c:	40023800 	.word	0x40023800
 8013e60:	00f42400 	.word	0x00f42400
 8013e64:	007a1200 	.word	0x007a1200

08013e68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8013e68:	b480      	push	{r7}
 8013e6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8013e6c:	4b03      	ldr	r3, [pc, #12]	; (8013e7c <HAL_RCC_GetHCLKFreq+0x14>)
 8013e6e:	681b      	ldr	r3, [r3, #0]
}
 8013e70:	4618      	mov	r0, r3
 8013e72:	46bd      	mov	sp, r7
 8013e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e78:	4770      	bx	lr
 8013e7a:	bf00      	nop
 8013e7c:	200001e8 	.word	0x200001e8

08013e80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8013e80:	b580      	push	{r7, lr}
 8013e82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8013e84:	f7ff fff0 	bl	8013e68 <HAL_RCC_GetHCLKFreq>
 8013e88:	4601      	mov	r1, r0
 8013e8a:	4b05      	ldr	r3, [pc, #20]	; (8013ea0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8013e8c:	689b      	ldr	r3, [r3, #8]
 8013e8e:	0a9b      	lsrs	r3, r3, #10
 8013e90:	f003 0307 	and.w	r3, r3, #7
 8013e94:	4a03      	ldr	r2, [pc, #12]	; (8013ea4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8013e96:	5cd3      	ldrb	r3, [r2, r3]
 8013e98:	fa21 f303 	lsr.w	r3, r1, r3
}
 8013e9c:	4618      	mov	r0, r3
 8013e9e:	bd80      	pop	{r7, pc}
 8013ea0:	40023800 	.word	0x40023800
 8013ea4:	0801b1a4 	.word	0x0801b1a4

08013ea8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8013ea8:	b580      	push	{r7, lr}
 8013eaa:	b086      	sub	sp, #24
 8013eac:	af00      	add	r7, sp, #0
 8013eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8013eb0:	2300      	movs	r3, #0
 8013eb2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8013eb4:	2300      	movs	r3, #0
 8013eb6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8013eb8:	687b      	ldr	r3, [r7, #4]
 8013eba:	681b      	ldr	r3, [r3, #0]
 8013ebc:	f003 0301 	and.w	r3, r3, #1
 8013ec0:	2b00      	cmp	r3, #0
 8013ec2:	d105      	bne.n	8013ed0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8013ec4:	687b      	ldr	r3, [r7, #4]
 8013ec6:	681b      	ldr	r3, [r3, #0]
 8013ec8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8013ecc:	2b00      	cmp	r3, #0
 8013ece:	d038      	beq.n	8013f42 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8013ed0:	4b68      	ldr	r3, [pc, #416]	; (8014074 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8013ed2:	2200      	movs	r2, #0
 8013ed4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8013ed6:	f7fc fdd5 	bl	8010a84 <HAL_GetTick>
 8013eda:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8013edc:	e008      	b.n	8013ef0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8013ede:	f7fc fdd1 	bl	8010a84 <HAL_GetTick>
 8013ee2:	4602      	mov	r2, r0
 8013ee4:	697b      	ldr	r3, [r7, #20]
 8013ee6:	1ad3      	subs	r3, r2, r3
 8013ee8:	2b02      	cmp	r3, #2
 8013eea:	d901      	bls.n	8013ef0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8013eec:	2303      	movs	r3, #3
 8013eee:	e0bd      	b.n	801406c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8013ef0:	4b61      	ldr	r3, [pc, #388]	; (8014078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8013ef2:	681b      	ldr	r3, [r3, #0]
 8013ef4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8013ef8:	2b00      	cmp	r3, #0
 8013efa:	d1f0      	bne.n	8013ede <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8013efc:	687b      	ldr	r3, [r7, #4]
 8013efe:	685a      	ldr	r2, [r3, #4]
 8013f00:	687b      	ldr	r3, [r7, #4]
 8013f02:	689b      	ldr	r3, [r3, #8]
 8013f04:	019b      	lsls	r3, r3, #6
 8013f06:	431a      	orrs	r2, r3
 8013f08:	687b      	ldr	r3, [r7, #4]
 8013f0a:	68db      	ldr	r3, [r3, #12]
 8013f0c:	071b      	lsls	r3, r3, #28
 8013f0e:	495a      	ldr	r1, [pc, #360]	; (8014078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8013f10:	4313      	orrs	r3, r2
 8013f12:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8013f16:	4b57      	ldr	r3, [pc, #348]	; (8014074 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8013f18:	2201      	movs	r2, #1
 8013f1a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8013f1c:	f7fc fdb2 	bl	8010a84 <HAL_GetTick>
 8013f20:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8013f22:	e008      	b.n	8013f36 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8013f24:	f7fc fdae 	bl	8010a84 <HAL_GetTick>
 8013f28:	4602      	mov	r2, r0
 8013f2a:	697b      	ldr	r3, [r7, #20]
 8013f2c:	1ad3      	subs	r3, r2, r3
 8013f2e:	2b02      	cmp	r3, #2
 8013f30:	d901      	bls.n	8013f36 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8013f32:	2303      	movs	r3, #3
 8013f34:	e09a      	b.n	801406c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8013f36:	4b50      	ldr	r3, [pc, #320]	; (8014078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8013f38:	681b      	ldr	r3, [r3, #0]
 8013f3a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8013f3e:	2b00      	cmp	r3, #0
 8013f40:	d0f0      	beq.n	8013f24 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8013f42:	687b      	ldr	r3, [r7, #4]
 8013f44:	681b      	ldr	r3, [r3, #0]
 8013f46:	f003 0302 	and.w	r3, r3, #2
 8013f4a:	2b00      	cmp	r3, #0
 8013f4c:	f000 8083 	beq.w	8014056 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8013f50:	2300      	movs	r3, #0
 8013f52:	60fb      	str	r3, [r7, #12]
 8013f54:	4b48      	ldr	r3, [pc, #288]	; (8014078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8013f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013f58:	4a47      	ldr	r2, [pc, #284]	; (8014078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8013f5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013f5e:	6413      	str	r3, [r2, #64]	; 0x40
 8013f60:	4b45      	ldr	r3, [pc, #276]	; (8014078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8013f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013f64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013f68:	60fb      	str	r3, [r7, #12]
 8013f6a:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8013f6c:	4b43      	ldr	r3, [pc, #268]	; (801407c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8013f6e:	681b      	ldr	r3, [r3, #0]
 8013f70:	4a42      	ldr	r2, [pc, #264]	; (801407c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8013f72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013f76:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8013f78:	f7fc fd84 	bl	8010a84 <HAL_GetTick>
 8013f7c:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8013f7e:	e008      	b.n	8013f92 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8013f80:	f7fc fd80 	bl	8010a84 <HAL_GetTick>
 8013f84:	4602      	mov	r2, r0
 8013f86:	697b      	ldr	r3, [r7, #20]
 8013f88:	1ad3      	subs	r3, r2, r3
 8013f8a:	2b02      	cmp	r3, #2
 8013f8c:	d901      	bls.n	8013f92 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8013f8e:	2303      	movs	r3, #3
 8013f90:	e06c      	b.n	801406c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8013f92:	4b3a      	ldr	r3, [pc, #232]	; (801407c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8013f94:	681b      	ldr	r3, [r3, #0]
 8013f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013f9a:	2b00      	cmp	r3, #0
 8013f9c:	d0f0      	beq.n	8013f80 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8013f9e:	4b36      	ldr	r3, [pc, #216]	; (8014078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8013fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013fa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8013fa6:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8013fa8:	693b      	ldr	r3, [r7, #16]
 8013faa:	2b00      	cmp	r3, #0
 8013fac:	d02f      	beq.n	801400e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8013fae:	687b      	ldr	r3, [r7, #4]
 8013fb0:	691b      	ldr	r3, [r3, #16]
 8013fb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8013fb6:	693a      	ldr	r2, [r7, #16]
 8013fb8:	429a      	cmp	r2, r3
 8013fba:	d028      	beq.n	801400e <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8013fbc:	4b2e      	ldr	r3, [pc, #184]	; (8014078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8013fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013fc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013fc4:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8013fc6:	4b2e      	ldr	r3, [pc, #184]	; (8014080 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8013fc8:	2201      	movs	r2, #1
 8013fca:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8013fcc:	4b2c      	ldr	r3, [pc, #176]	; (8014080 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8013fce:	2200      	movs	r2, #0
 8013fd0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8013fd2:	4a29      	ldr	r2, [pc, #164]	; (8014078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8013fd4:	693b      	ldr	r3, [r7, #16]
 8013fd6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8013fd8:	4b27      	ldr	r3, [pc, #156]	; (8014078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8013fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013fdc:	f003 0301 	and.w	r3, r3, #1
 8013fe0:	2b01      	cmp	r3, #1
 8013fe2:	d114      	bne.n	801400e <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8013fe4:	f7fc fd4e 	bl	8010a84 <HAL_GetTick>
 8013fe8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8013fea:	e00a      	b.n	8014002 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8013fec:	f7fc fd4a 	bl	8010a84 <HAL_GetTick>
 8013ff0:	4602      	mov	r2, r0
 8013ff2:	697b      	ldr	r3, [r7, #20]
 8013ff4:	1ad3      	subs	r3, r2, r3
 8013ff6:	f241 3288 	movw	r2, #5000	; 0x1388
 8013ffa:	4293      	cmp	r3, r2
 8013ffc:	d901      	bls.n	8014002 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8013ffe:	2303      	movs	r3, #3
 8014000:	e034      	b.n	801406c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8014002:	4b1d      	ldr	r3, [pc, #116]	; (8014078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8014004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014006:	f003 0302 	and.w	r3, r3, #2
 801400a:	2b00      	cmp	r3, #0
 801400c:	d0ee      	beq.n	8013fec <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801400e:	687b      	ldr	r3, [r7, #4]
 8014010:	691b      	ldr	r3, [r3, #16]
 8014012:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8014016:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801401a:	d10d      	bne.n	8014038 <HAL_RCCEx_PeriphCLKConfig+0x190>
 801401c:	4b16      	ldr	r3, [pc, #88]	; (8014078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801401e:	689b      	ldr	r3, [r3, #8]
 8014020:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8014024:	687b      	ldr	r3, [r7, #4]
 8014026:	691b      	ldr	r3, [r3, #16]
 8014028:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 801402c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8014030:	4911      	ldr	r1, [pc, #68]	; (8014078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8014032:	4313      	orrs	r3, r2
 8014034:	608b      	str	r3, [r1, #8]
 8014036:	e005      	b.n	8014044 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8014038:	4b0f      	ldr	r3, [pc, #60]	; (8014078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801403a:	689b      	ldr	r3, [r3, #8]
 801403c:	4a0e      	ldr	r2, [pc, #56]	; (8014078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801403e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8014042:	6093      	str	r3, [r2, #8]
 8014044:	4b0c      	ldr	r3, [pc, #48]	; (8014078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8014046:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	691b      	ldr	r3, [r3, #16]
 801404c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8014050:	4909      	ldr	r1, [pc, #36]	; (8014078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8014052:	4313      	orrs	r3, r2
 8014054:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8014056:	687b      	ldr	r3, [r7, #4]
 8014058:	681b      	ldr	r3, [r3, #0]
 801405a:	f003 0308 	and.w	r3, r3, #8
 801405e:	2b00      	cmp	r3, #0
 8014060:	d003      	beq.n	801406a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8014062:	687b      	ldr	r3, [r7, #4]
 8014064:	7d1a      	ldrb	r2, [r3, #20]
 8014066:	4b07      	ldr	r3, [pc, #28]	; (8014084 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8014068:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 801406a:	2300      	movs	r3, #0
}
 801406c:	4618      	mov	r0, r3
 801406e:	3718      	adds	r7, #24
 8014070:	46bd      	mov	sp, r7
 8014072:	bd80      	pop	{r7, pc}
 8014074:	42470068 	.word	0x42470068
 8014078:	40023800 	.word	0x40023800
 801407c:	40007000 	.word	0x40007000
 8014080:	42470e40 	.word	0x42470e40
 8014084:	424711e0 	.word	0x424711e0

08014088 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8014088:	b480      	push	{r7}
 801408a:	b087      	sub	sp, #28
 801408c:	af00      	add	r7, sp, #0
 801408e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8014090:	2300      	movs	r3, #0
 8014092:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8014094:	2300      	movs	r3, #0
 8014096:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8014098:	2300      	movs	r3, #0
 801409a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 801409c:	2300      	movs	r3, #0
 801409e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80140a0:	687b      	ldr	r3, [r7, #4]
 80140a2:	2b01      	cmp	r3, #1
 80140a4:	d13f      	bne.n	8014126 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80140a6:	4b23      	ldr	r3, [pc, #140]	; (8014134 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80140a8:	689b      	ldr	r3, [r3, #8]
 80140aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80140ae:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80140b0:	68fb      	ldr	r3, [r7, #12]
 80140b2:	2b00      	cmp	r3, #0
 80140b4:	d004      	beq.n	80140c0 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80140b6:	2b01      	cmp	r3, #1
 80140b8:	d131      	bne.n	801411e <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80140ba:	4b1f      	ldr	r3, [pc, #124]	; (8014138 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80140bc:	617b      	str	r3, [r7, #20]
          break;
 80140be:	e031      	b.n	8014124 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80140c0:	4b1c      	ldr	r3, [pc, #112]	; (8014134 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80140c2:	685b      	ldr	r3, [r3, #4]
 80140c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80140c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80140cc:	d109      	bne.n	80140e2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80140ce:	4b19      	ldr	r3, [pc, #100]	; (8014134 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80140d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80140d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80140d8:	4a18      	ldr	r2, [pc, #96]	; (801413c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80140da:	fbb2 f3f3 	udiv	r3, r2, r3
 80140de:	613b      	str	r3, [r7, #16]
 80140e0:	e008      	b.n	80140f4 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80140e2:	4b14      	ldr	r3, [pc, #80]	; (8014134 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80140e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80140e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80140ec:	4a14      	ldr	r2, [pc, #80]	; (8014140 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80140ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80140f2:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80140f4:	4b0f      	ldr	r3, [pc, #60]	; (8014134 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80140f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80140fa:	099b      	lsrs	r3, r3, #6
 80140fc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8014100:	693b      	ldr	r3, [r7, #16]
 8014102:	fb02 f303 	mul.w	r3, r2, r3
 8014106:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8014108:	4b0a      	ldr	r3, [pc, #40]	; (8014134 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 801410a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801410e:	0f1b      	lsrs	r3, r3, #28
 8014110:	f003 0307 	and.w	r3, r3, #7
 8014114:	68ba      	ldr	r2, [r7, #8]
 8014116:	fbb2 f3f3 	udiv	r3, r2, r3
 801411a:	617b      	str	r3, [r7, #20]
          break;
 801411c:	e002      	b.n	8014124 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 801411e:	2300      	movs	r3, #0
 8014120:	617b      	str	r3, [r7, #20]
          break;
 8014122:	bf00      	nop
        }
      }
      break;
 8014124:	bf00      	nop
    }
  }
  return frequency;
 8014126:	697b      	ldr	r3, [r7, #20]
}
 8014128:	4618      	mov	r0, r3
 801412a:	371c      	adds	r7, #28
 801412c:	46bd      	mov	sp, r7
 801412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014132:	4770      	bx	lr
 8014134:	40023800 	.word	0x40023800
 8014138:	00bb8000 	.word	0x00bb8000
 801413c:	007a1200 	.word	0x007a1200
 8014140:	00f42400 	.word	0x00f42400

08014144 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8014144:	b580      	push	{r7, lr}
 8014146:	b082      	sub	sp, #8
 8014148:	af00      	add	r7, sp, #0
 801414a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 801414c:	687b      	ldr	r3, [r7, #4]
 801414e:	2b00      	cmp	r3, #0
 8014150:	d101      	bne.n	8014156 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8014152:	2301      	movs	r3, #1
 8014154:	e056      	b.n	8014204 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8014156:	687b      	ldr	r3, [r7, #4]
 8014158:	2200      	movs	r2, #0
 801415a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8014162:	b2db      	uxtb	r3, r3
 8014164:	2b00      	cmp	r3, #0
 8014166:	d106      	bne.n	8014176 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8014168:	687b      	ldr	r3, [r7, #4]
 801416a:	2200      	movs	r2, #0
 801416c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8014170:	6878      	ldr	r0, [r7, #4]
 8014172:	f7fc fa07 	bl	8010584 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8014176:	687b      	ldr	r3, [r7, #4]
 8014178:	2202      	movs	r2, #2
 801417a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801417e:	687b      	ldr	r3, [r7, #4]
 8014180:	681b      	ldr	r3, [r3, #0]
 8014182:	681a      	ldr	r2, [r3, #0]
 8014184:	687b      	ldr	r3, [r7, #4]
 8014186:	681b      	ldr	r3, [r3, #0]
 8014188:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801418c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 801418e:	687b      	ldr	r3, [r7, #4]
 8014190:	685a      	ldr	r2, [r3, #4]
 8014192:	687b      	ldr	r3, [r7, #4]
 8014194:	689b      	ldr	r3, [r3, #8]
 8014196:	431a      	orrs	r2, r3
 8014198:	687b      	ldr	r3, [r7, #4]
 801419a:	68db      	ldr	r3, [r3, #12]
 801419c:	431a      	orrs	r2, r3
 801419e:	687b      	ldr	r3, [r7, #4]
 80141a0:	691b      	ldr	r3, [r3, #16]
 80141a2:	431a      	orrs	r2, r3
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	695b      	ldr	r3, [r3, #20]
 80141a8:	431a      	orrs	r2, r3
 80141aa:	687b      	ldr	r3, [r7, #4]
 80141ac:	699b      	ldr	r3, [r3, #24]
 80141ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80141b2:	431a      	orrs	r2, r3
 80141b4:	687b      	ldr	r3, [r7, #4]
 80141b6:	69db      	ldr	r3, [r3, #28]
 80141b8:	431a      	orrs	r2, r3
 80141ba:	687b      	ldr	r3, [r7, #4]
 80141bc:	6a1b      	ldr	r3, [r3, #32]
 80141be:	ea42 0103 	orr.w	r1, r2, r3
 80141c2:	687b      	ldr	r3, [r7, #4]
 80141c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80141c6:	687b      	ldr	r3, [r7, #4]
 80141c8:	681b      	ldr	r3, [r3, #0]
 80141ca:	430a      	orrs	r2, r1
 80141cc:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80141ce:	687b      	ldr	r3, [r7, #4]
 80141d0:	699b      	ldr	r3, [r3, #24]
 80141d2:	0c1b      	lsrs	r3, r3, #16
 80141d4:	f003 0104 	and.w	r1, r3, #4
 80141d8:	687b      	ldr	r3, [r7, #4]
 80141da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80141dc:	687b      	ldr	r3, [r7, #4]
 80141de:	681b      	ldr	r3, [r3, #0]
 80141e0:	430a      	orrs	r2, r1
 80141e2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80141e4:	687b      	ldr	r3, [r7, #4]
 80141e6:	681b      	ldr	r3, [r3, #0]
 80141e8:	69da      	ldr	r2, [r3, #28]
 80141ea:	687b      	ldr	r3, [r7, #4]
 80141ec:	681b      	ldr	r3, [r3, #0]
 80141ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80141f2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80141f4:	687b      	ldr	r3, [r7, #4]
 80141f6:	2200      	movs	r2, #0
 80141f8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80141fa:	687b      	ldr	r3, [r7, #4]
 80141fc:	2201      	movs	r2, #1
 80141fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8014202:	2300      	movs	r3, #0
}
 8014204:	4618      	mov	r0, r3
 8014206:	3708      	adds	r7, #8
 8014208:	46bd      	mov	sp, r7
 801420a:	bd80      	pop	{r7, pc}

0801420c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801420c:	b580      	push	{r7, lr}
 801420e:	b088      	sub	sp, #32
 8014210:	af00      	add	r7, sp, #0
 8014212:	60f8      	str	r0, [r7, #12]
 8014214:	60b9      	str	r1, [r7, #8]
 8014216:	603b      	str	r3, [r7, #0]
 8014218:	4613      	mov	r3, r2
 801421a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801421c:	2300      	movs	r3, #0
 801421e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8014220:	68fb      	ldr	r3, [r7, #12]
 8014222:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8014226:	2b01      	cmp	r3, #1
 8014228:	d101      	bne.n	801422e <HAL_SPI_Transmit+0x22>
 801422a:	2302      	movs	r3, #2
 801422c:	e11e      	b.n	801446c <HAL_SPI_Transmit+0x260>
 801422e:	68fb      	ldr	r3, [r7, #12]
 8014230:	2201      	movs	r2, #1
 8014232:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8014236:	f7fc fc25 	bl	8010a84 <HAL_GetTick>
 801423a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 801423c:	88fb      	ldrh	r3, [r7, #6]
 801423e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8014240:	68fb      	ldr	r3, [r7, #12]
 8014242:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8014246:	b2db      	uxtb	r3, r3
 8014248:	2b01      	cmp	r3, #1
 801424a:	d002      	beq.n	8014252 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 801424c:	2302      	movs	r3, #2
 801424e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8014250:	e103      	b.n	801445a <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8014252:	68bb      	ldr	r3, [r7, #8]
 8014254:	2b00      	cmp	r3, #0
 8014256:	d002      	beq.n	801425e <HAL_SPI_Transmit+0x52>
 8014258:	88fb      	ldrh	r3, [r7, #6]
 801425a:	2b00      	cmp	r3, #0
 801425c:	d102      	bne.n	8014264 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 801425e:	2301      	movs	r3, #1
 8014260:	77fb      	strb	r3, [r7, #31]
    goto error;
 8014262:	e0fa      	b.n	801445a <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8014264:	68fb      	ldr	r3, [r7, #12]
 8014266:	2203      	movs	r2, #3
 8014268:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801426c:	68fb      	ldr	r3, [r7, #12]
 801426e:	2200      	movs	r2, #0
 8014270:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8014272:	68fb      	ldr	r3, [r7, #12]
 8014274:	68ba      	ldr	r2, [r7, #8]
 8014276:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8014278:	68fb      	ldr	r3, [r7, #12]
 801427a:	88fa      	ldrh	r2, [r7, #6]
 801427c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 801427e:	68fb      	ldr	r3, [r7, #12]
 8014280:	88fa      	ldrh	r2, [r7, #6]
 8014282:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8014284:	68fb      	ldr	r3, [r7, #12]
 8014286:	2200      	movs	r2, #0
 8014288:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 801428a:	68fb      	ldr	r3, [r7, #12]
 801428c:	2200      	movs	r2, #0
 801428e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8014290:	68fb      	ldr	r3, [r7, #12]
 8014292:	2200      	movs	r2, #0
 8014294:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8014296:	68fb      	ldr	r3, [r7, #12]
 8014298:	2200      	movs	r2, #0
 801429a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 801429c:	68fb      	ldr	r3, [r7, #12]
 801429e:	2200      	movs	r2, #0
 80142a0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80142a2:	68fb      	ldr	r3, [r7, #12]
 80142a4:	689b      	ldr	r3, [r3, #8]
 80142a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80142aa:	d107      	bne.n	80142bc <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80142ac:	68fb      	ldr	r3, [r7, #12]
 80142ae:	681b      	ldr	r3, [r3, #0]
 80142b0:	681a      	ldr	r2, [r3, #0]
 80142b2:	68fb      	ldr	r3, [r7, #12]
 80142b4:	681b      	ldr	r3, [r3, #0]
 80142b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80142ba:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80142bc:	68fb      	ldr	r3, [r7, #12]
 80142be:	681b      	ldr	r3, [r3, #0]
 80142c0:	681b      	ldr	r3, [r3, #0]
 80142c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80142c6:	2b40      	cmp	r3, #64	; 0x40
 80142c8:	d007      	beq.n	80142da <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80142ca:	68fb      	ldr	r3, [r7, #12]
 80142cc:	681b      	ldr	r3, [r3, #0]
 80142ce:	681a      	ldr	r2, [r3, #0]
 80142d0:	68fb      	ldr	r3, [r7, #12]
 80142d2:	681b      	ldr	r3, [r3, #0]
 80142d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80142d8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80142da:	68fb      	ldr	r3, [r7, #12]
 80142dc:	68db      	ldr	r3, [r3, #12]
 80142de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80142e2:	d14b      	bne.n	801437c <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80142e4:	68fb      	ldr	r3, [r7, #12]
 80142e6:	685b      	ldr	r3, [r3, #4]
 80142e8:	2b00      	cmp	r3, #0
 80142ea:	d002      	beq.n	80142f2 <HAL_SPI_Transmit+0xe6>
 80142ec:	8afb      	ldrh	r3, [r7, #22]
 80142ee:	2b01      	cmp	r3, #1
 80142f0:	d13e      	bne.n	8014370 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80142f2:	68fb      	ldr	r3, [r7, #12]
 80142f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80142f6:	881a      	ldrh	r2, [r3, #0]
 80142f8:	68fb      	ldr	r3, [r7, #12]
 80142fa:	681b      	ldr	r3, [r3, #0]
 80142fc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80142fe:	68fb      	ldr	r3, [r7, #12]
 8014300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014302:	1c9a      	adds	r2, r3, #2
 8014304:	68fb      	ldr	r3, [r7, #12]
 8014306:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8014308:	68fb      	ldr	r3, [r7, #12]
 801430a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801430c:	b29b      	uxth	r3, r3
 801430e:	3b01      	subs	r3, #1
 8014310:	b29a      	uxth	r2, r3
 8014312:	68fb      	ldr	r3, [r7, #12]
 8014314:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8014316:	e02b      	b.n	8014370 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8014318:	68fb      	ldr	r3, [r7, #12]
 801431a:	681b      	ldr	r3, [r3, #0]
 801431c:	689b      	ldr	r3, [r3, #8]
 801431e:	f003 0302 	and.w	r3, r3, #2
 8014322:	2b02      	cmp	r3, #2
 8014324:	d112      	bne.n	801434c <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8014326:	68fb      	ldr	r3, [r7, #12]
 8014328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801432a:	881a      	ldrh	r2, [r3, #0]
 801432c:	68fb      	ldr	r3, [r7, #12]
 801432e:	681b      	ldr	r3, [r3, #0]
 8014330:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8014332:	68fb      	ldr	r3, [r7, #12]
 8014334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014336:	1c9a      	adds	r2, r3, #2
 8014338:	68fb      	ldr	r3, [r7, #12]
 801433a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 801433c:	68fb      	ldr	r3, [r7, #12]
 801433e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014340:	b29b      	uxth	r3, r3
 8014342:	3b01      	subs	r3, #1
 8014344:	b29a      	uxth	r2, r3
 8014346:	68fb      	ldr	r3, [r7, #12]
 8014348:	86da      	strh	r2, [r3, #54]	; 0x36
 801434a:	e011      	b.n	8014370 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801434c:	f7fc fb9a 	bl	8010a84 <HAL_GetTick>
 8014350:	4602      	mov	r2, r0
 8014352:	69bb      	ldr	r3, [r7, #24]
 8014354:	1ad3      	subs	r3, r2, r3
 8014356:	683a      	ldr	r2, [r7, #0]
 8014358:	429a      	cmp	r2, r3
 801435a:	d803      	bhi.n	8014364 <HAL_SPI_Transmit+0x158>
 801435c:	683b      	ldr	r3, [r7, #0]
 801435e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014362:	d102      	bne.n	801436a <HAL_SPI_Transmit+0x15e>
 8014364:	683b      	ldr	r3, [r7, #0]
 8014366:	2b00      	cmp	r3, #0
 8014368:	d102      	bne.n	8014370 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 801436a:	2303      	movs	r3, #3
 801436c:	77fb      	strb	r3, [r7, #31]
          goto error;
 801436e:	e074      	b.n	801445a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8014370:	68fb      	ldr	r3, [r7, #12]
 8014372:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014374:	b29b      	uxth	r3, r3
 8014376:	2b00      	cmp	r3, #0
 8014378:	d1ce      	bne.n	8014318 <HAL_SPI_Transmit+0x10c>
 801437a:	e04c      	b.n	8014416 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801437c:	68fb      	ldr	r3, [r7, #12]
 801437e:	685b      	ldr	r3, [r3, #4]
 8014380:	2b00      	cmp	r3, #0
 8014382:	d002      	beq.n	801438a <HAL_SPI_Transmit+0x17e>
 8014384:	8afb      	ldrh	r3, [r7, #22]
 8014386:	2b01      	cmp	r3, #1
 8014388:	d140      	bne.n	801440c <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801438a:	68fb      	ldr	r3, [r7, #12]
 801438c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801438e:	68fb      	ldr	r3, [r7, #12]
 8014390:	681b      	ldr	r3, [r3, #0]
 8014392:	330c      	adds	r3, #12
 8014394:	7812      	ldrb	r2, [r2, #0]
 8014396:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8014398:	68fb      	ldr	r3, [r7, #12]
 801439a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801439c:	1c5a      	adds	r2, r3, #1
 801439e:	68fb      	ldr	r3, [r7, #12]
 80143a0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80143a2:	68fb      	ldr	r3, [r7, #12]
 80143a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80143a6:	b29b      	uxth	r3, r3
 80143a8:	3b01      	subs	r3, #1
 80143aa:	b29a      	uxth	r2, r3
 80143ac:	68fb      	ldr	r3, [r7, #12]
 80143ae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80143b0:	e02c      	b.n	801440c <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80143b2:	68fb      	ldr	r3, [r7, #12]
 80143b4:	681b      	ldr	r3, [r3, #0]
 80143b6:	689b      	ldr	r3, [r3, #8]
 80143b8:	f003 0302 	and.w	r3, r3, #2
 80143bc:	2b02      	cmp	r3, #2
 80143be:	d113      	bne.n	80143e8 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80143c0:	68fb      	ldr	r3, [r7, #12]
 80143c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80143c4:	68fb      	ldr	r3, [r7, #12]
 80143c6:	681b      	ldr	r3, [r3, #0]
 80143c8:	330c      	adds	r3, #12
 80143ca:	7812      	ldrb	r2, [r2, #0]
 80143cc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80143ce:	68fb      	ldr	r3, [r7, #12]
 80143d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80143d2:	1c5a      	adds	r2, r3, #1
 80143d4:	68fb      	ldr	r3, [r7, #12]
 80143d6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80143d8:	68fb      	ldr	r3, [r7, #12]
 80143da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80143dc:	b29b      	uxth	r3, r3
 80143de:	3b01      	subs	r3, #1
 80143e0:	b29a      	uxth	r2, r3
 80143e2:	68fb      	ldr	r3, [r7, #12]
 80143e4:	86da      	strh	r2, [r3, #54]	; 0x36
 80143e6:	e011      	b.n	801440c <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80143e8:	f7fc fb4c 	bl	8010a84 <HAL_GetTick>
 80143ec:	4602      	mov	r2, r0
 80143ee:	69bb      	ldr	r3, [r7, #24]
 80143f0:	1ad3      	subs	r3, r2, r3
 80143f2:	683a      	ldr	r2, [r7, #0]
 80143f4:	429a      	cmp	r2, r3
 80143f6:	d803      	bhi.n	8014400 <HAL_SPI_Transmit+0x1f4>
 80143f8:	683b      	ldr	r3, [r7, #0]
 80143fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80143fe:	d102      	bne.n	8014406 <HAL_SPI_Transmit+0x1fa>
 8014400:	683b      	ldr	r3, [r7, #0]
 8014402:	2b00      	cmp	r3, #0
 8014404:	d102      	bne.n	801440c <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8014406:	2303      	movs	r3, #3
 8014408:	77fb      	strb	r3, [r7, #31]
          goto error;
 801440a:	e026      	b.n	801445a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 801440c:	68fb      	ldr	r3, [r7, #12]
 801440e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014410:	b29b      	uxth	r3, r3
 8014412:	2b00      	cmp	r3, #0
 8014414:	d1cd      	bne.n	80143b2 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8014416:	69ba      	ldr	r2, [r7, #24]
 8014418:	6839      	ldr	r1, [r7, #0]
 801441a:	68f8      	ldr	r0, [r7, #12]
 801441c:	f000 f894 	bl	8014548 <SPI_EndRxTxTransaction>
 8014420:	4603      	mov	r3, r0
 8014422:	2b00      	cmp	r3, #0
 8014424:	d002      	beq.n	801442c <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8014426:	68fb      	ldr	r3, [r7, #12]
 8014428:	2220      	movs	r2, #32
 801442a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801442c:	68fb      	ldr	r3, [r7, #12]
 801442e:	689b      	ldr	r3, [r3, #8]
 8014430:	2b00      	cmp	r3, #0
 8014432:	d10a      	bne.n	801444a <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8014434:	2300      	movs	r3, #0
 8014436:	613b      	str	r3, [r7, #16]
 8014438:	68fb      	ldr	r3, [r7, #12]
 801443a:	681b      	ldr	r3, [r3, #0]
 801443c:	68db      	ldr	r3, [r3, #12]
 801443e:	613b      	str	r3, [r7, #16]
 8014440:	68fb      	ldr	r3, [r7, #12]
 8014442:	681b      	ldr	r3, [r3, #0]
 8014444:	689b      	ldr	r3, [r3, #8]
 8014446:	613b      	str	r3, [r7, #16]
 8014448:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801444a:	68fb      	ldr	r3, [r7, #12]
 801444c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801444e:	2b00      	cmp	r3, #0
 8014450:	d002      	beq.n	8014458 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8014452:	2301      	movs	r3, #1
 8014454:	77fb      	strb	r3, [r7, #31]
 8014456:	e000      	b.n	801445a <HAL_SPI_Transmit+0x24e>
  }

error:
 8014458:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801445a:	68fb      	ldr	r3, [r7, #12]
 801445c:	2201      	movs	r2, #1
 801445e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8014462:	68fb      	ldr	r3, [r7, #12]
 8014464:	2200      	movs	r2, #0
 8014466:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 801446a:	7ffb      	ldrb	r3, [r7, #31]
}
 801446c:	4618      	mov	r0, r3
 801446e:	3720      	adds	r7, #32
 8014470:	46bd      	mov	sp, r7
 8014472:	bd80      	pop	{r7, pc}

08014474 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8014474:	b580      	push	{r7, lr}
 8014476:	b084      	sub	sp, #16
 8014478:	af00      	add	r7, sp, #0
 801447a:	60f8      	str	r0, [r7, #12]
 801447c:	60b9      	str	r1, [r7, #8]
 801447e:	603b      	str	r3, [r7, #0]
 8014480:	4613      	mov	r3, r2
 8014482:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8014484:	e04c      	b.n	8014520 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8014486:	683b      	ldr	r3, [r7, #0]
 8014488:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801448c:	d048      	beq.n	8014520 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 801448e:	f7fc faf9 	bl	8010a84 <HAL_GetTick>
 8014492:	4602      	mov	r2, r0
 8014494:	69bb      	ldr	r3, [r7, #24]
 8014496:	1ad3      	subs	r3, r2, r3
 8014498:	683a      	ldr	r2, [r7, #0]
 801449a:	429a      	cmp	r2, r3
 801449c:	d902      	bls.n	80144a4 <SPI_WaitFlagStateUntilTimeout+0x30>
 801449e:	683b      	ldr	r3, [r7, #0]
 80144a0:	2b00      	cmp	r3, #0
 80144a2:	d13d      	bne.n	8014520 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80144a4:	68fb      	ldr	r3, [r7, #12]
 80144a6:	681b      	ldr	r3, [r3, #0]
 80144a8:	685a      	ldr	r2, [r3, #4]
 80144aa:	68fb      	ldr	r3, [r7, #12]
 80144ac:	681b      	ldr	r3, [r3, #0]
 80144ae:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80144b2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80144b4:	68fb      	ldr	r3, [r7, #12]
 80144b6:	685b      	ldr	r3, [r3, #4]
 80144b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80144bc:	d111      	bne.n	80144e2 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80144be:	68fb      	ldr	r3, [r7, #12]
 80144c0:	689b      	ldr	r3, [r3, #8]
 80144c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80144c6:	d004      	beq.n	80144d2 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80144c8:	68fb      	ldr	r3, [r7, #12]
 80144ca:	689b      	ldr	r3, [r3, #8]
 80144cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80144d0:	d107      	bne.n	80144e2 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80144d2:	68fb      	ldr	r3, [r7, #12]
 80144d4:	681b      	ldr	r3, [r3, #0]
 80144d6:	681a      	ldr	r2, [r3, #0]
 80144d8:	68fb      	ldr	r3, [r7, #12]
 80144da:	681b      	ldr	r3, [r3, #0]
 80144dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80144e0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80144e2:	68fb      	ldr	r3, [r7, #12]
 80144e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80144e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80144ea:	d10f      	bne.n	801450c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80144ec:	68fb      	ldr	r3, [r7, #12]
 80144ee:	681b      	ldr	r3, [r3, #0]
 80144f0:	681a      	ldr	r2, [r3, #0]
 80144f2:	68fb      	ldr	r3, [r7, #12]
 80144f4:	681b      	ldr	r3, [r3, #0]
 80144f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80144fa:	601a      	str	r2, [r3, #0]
 80144fc:	68fb      	ldr	r3, [r7, #12]
 80144fe:	681b      	ldr	r3, [r3, #0]
 8014500:	681a      	ldr	r2, [r3, #0]
 8014502:	68fb      	ldr	r3, [r7, #12]
 8014504:	681b      	ldr	r3, [r3, #0]
 8014506:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801450a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801450c:	68fb      	ldr	r3, [r7, #12]
 801450e:	2201      	movs	r2, #1
 8014510:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8014514:	68fb      	ldr	r3, [r7, #12]
 8014516:	2200      	movs	r2, #0
 8014518:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 801451c:	2303      	movs	r3, #3
 801451e:	e00f      	b.n	8014540 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8014520:	68fb      	ldr	r3, [r7, #12]
 8014522:	681b      	ldr	r3, [r3, #0]
 8014524:	689a      	ldr	r2, [r3, #8]
 8014526:	68bb      	ldr	r3, [r7, #8]
 8014528:	4013      	ands	r3, r2
 801452a:	68ba      	ldr	r2, [r7, #8]
 801452c:	429a      	cmp	r2, r3
 801452e:	bf0c      	ite	eq
 8014530:	2301      	moveq	r3, #1
 8014532:	2300      	movne	r3, #0
 8014534:	b2db      	uxtb	r3, r3
 8014536:	461a      	mov	r2, r3
 8014538:	79fb      	ldrb	r3, [r7, #7]
 801453a:	429a      	cmp	r2, r3
 801453c:	d1a3      	bne.n	8014486 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 801453e:	2300      	movs	r3, #0
}
 8014540:	4618      	mov	r0, r3
 8014542:	3710      	adds	r7, #16
 8014544:	46bd      	mov	sp, r7
 8014546:	bd80      	pop	{r7, pc}

08014548 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8014548:	b580      	push	{r7, lr}
 801454a:	b088      	sub	sp, #32
 801454c:	af02      	add	r7, sp, #8
 801454e:	60f8      	str	r0, [r7, #12]
 8014550:	60b9      	str	r1, [r7, #8]
 8014552:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8014554:	4b1b      	ldr	r3, [pc, #108]	; (80145c4 <SPI_EndRxTxTransaction+0x7c>)
 8014556:	681b      	ldr	r3, [r3, #0]
 8014558:	4a1b      	ldr	r2, [pc, #108]	; (80145c8 <SPI_EndRxTxTransaction+0x80>)
 801455a:	fba2 2303 	umull	r2, r3, r2, r3
 801455e:	0d5b      	lsrs	r3, r3, #21
 8014560:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8014564:	fb02 f303 	mul.w	r3, r2, r3
 8014568:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801456a:	68fb      	ldr	r3, [r7, #12]
 801456c:	685b      	ldr	r3, [r3, #4]
 801456e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8014572:	d112      	bne.n	801459a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8014574:	687b      	ldr	r3, [r7, #4]
 8014576:	9300      	str	r3, [sp, #0]
 8014578:	68bb      	ldr	r3, [r7, #8]
 801457a:	2200      	movs	r2, #0
 801457c:	2180      	movs	r1, #128	; 0x80
 801457e:	68f8      	ldr	r0, [r7, #12]
 8014580:	f7ff ff78 	bl	8014474 <SPI_WaitFlagStateUntilTimeout>
 8014584:	4603      	mov	r3, r0
 8014586:	2b00      	cmp	r3, #0
 8014588:	d016      	beq.n	80145b8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801458a:	68fb      	ldr	r3, [r7, #12]
 801458c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801458e:	f043 0220 	orr.w	r2, r3, #32
 8014592:	68fb      	ldr	r3, [r7, #12]
 8014594:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8014596:	2303      	movs	r3, #3
 8014598:	e00f      	b.n	80145ba <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 801459a:	697b      	ldr	r3, [r7, #20]
 801459c:	2b00      	cmp	r3, #0
 801459e:	d00a      	beq.n	80145b6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80145a0:	697b      	ldr	r3, [r7, #20]
 80145a2:	3b01      	subs	r3, #1
 80145a4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80145a6:	68fb      	ldr	r3, [r7, #12]
 80145a8:	681b      	ldr	r3, [r3, #0]
 80145aa:	689b      	ldr	r3, [r3, #8]
 80145ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80145b0:	2b80      	cmp	r3, #128	; 0x80
 80145b2:	d0f2      	beq.n	801459a <SPI_EndRxTxTransaction+0x52>
 80145b4:	e000      	b.n	80145b8 <SPI_EndRxTxTransaction+0x70>
        break;
 80145b6:	bf00      	nop
  }

  return HAL_OK;
 80145b8:	2300      	movs	r3, #0
}
 80145ba:	4618      	mov	r0, r3
 80145bc:	3718      	adds	r7, #24
 80145be:	46bd      	mov	sp, r7
 80145c0:	bd80      	pop	{r7, pc}
 80145c2:	bf00      	nop
 80145c4:	200001e8 	.word	0x200001e8
 80145c8:	165e9f81 	.word	0x165e9f81

080145cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80145cc:	b580      	push	{r7, lr}
 80145ce:	b082      	sub	sp, #8
 80145d0:	af00      	add	r7, sp, #0
 80145d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80145d4:	687b      	ldr	r3, [r7, #4]
 80145d6:	2b00      	cmp	r3, #0
 80145d8:	d101      	bne.n	80145de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80145da:	2301      	movs	r3, #1
 80145dc:	e01d      	b.n	801461a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80145de:	687b      	ldr	r3, [r7, #4]
 80145e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80145e4:	b2db      	uxtb	r3, r3
 80145e6:	2b00      	cmp	r3, #0
 80145e8:	d106      	bne.n	80145f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80145ea:	687b      	ldr	r3, [r7, #4]
 80145ec:	2200      	movs	r2, #0
 80145ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80145f2:	6878      	ldr	r0, [r7, #4]
 80145f4:	f7fc f95a 	bl	80108ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80145f8:	687b      	ldr	r3, [r7, #4]
 80145fa:	2202      	movs	r2, #2
 80145fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8014600:	687b      	ldr	r3, [r7, #4]
 8014602:	681a      	ldr	r2, [r3, #0]
 8014604:	687b      	ldr	r3, [r7, #4]
 8014606:	3304      	adds	r3, #4
 8014608:	4619      	mov	r1, r3
 801460a:	4610      	mov	r0, r2
 801460c:	f000 f9ee 	bl	80149ec <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8014610:	687b      	ldr	r3, [r7, #4]
 8014612:	2201      	movs	r2, #1
 8014614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8014618:	2300      	movs	r3, #0
}
 801461a:	4618      	mov	r0, r3
 801461c:	3708      	adds	r7, #8
 801461e:	46bd      	mov	sp, r7
 8014620:	bd80      	pop	{r7, pc}

08014622 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8014622:	b580      	push	{r7, lr}
 8014624:	b082      	sub	sp, #8
 8014626:	af00      	add	r7, sp, #0
 8014628:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801462a:	687b      	ldr	r3, [r7, #4]
 801462c:	2b00      	cmp	r3, #0
 801462e:	d101      	bne.n	8014634 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8014630:	2301      	movs	r3, #1
 8014632:	e01d      	b.n	8014670 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801463a:	b2db      	uxtb	r3, r3
 801463c:	2b00      	cmp	r3, #0
 801463e:	d106      	bne.n	801464e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8014640:	687b      	ldr	r3, [r7, #4]
 8014642:	2200      	movs	r2, #0
 8014644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8014648:	6878      	ldr	r0, [r7, #4]
 801464a:	f000 f815 	bl	8014678 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801464e:	687b      	ldr	r3, [r7, #4]
 8014650:	2202      	movs	r2, #2
 8014652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8014656:	687b      	ldr	r3, [r7, #4]
 8014658:	681a      	ldr	r2, [r3, #0]
 801465a:	687b      	ldr	r3, [r7, #4]
 801465c:	3304      	adds	r3, #4
 801465e:	4619      	mov	r1, r3
 8014660:	4610      	mov	r0, r2
 8014662:	f000 f9c3 	bl	80149ec <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8014666:	687b      	ldr	r3, [r7, #4]
 8014668:	2201      	movs	r2, #1
 801466a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801466e:	2300      	movs	r3, #0
}
 8014670:	4618      	mov	r0, r3
 8014672:	3708      	adds	r7, #8
 8014674:	46bd      	mov	sp, r7
 8014676:	bd80      	pop	{r7, pc}

08014678 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8014678:	b480      	push	{r7}
 801467a:	b083      	sub	sp, #12
 801467c:	af00      	add	r7, sp, #0
 801467e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8014680:	bf00      	nop
 8014682:	370c      	adds	r7, #12
 8014684:	46bd      	mov	sp, r7
 8014686:	f85d 7b04 	ldr.w	r7, [sp], #4
 801468a:	4770      	bx	lr

0801468c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801468c:	b580      	push	{r7, lr}
 801468e:	b084      	sub	sp, #16
 8014690:	af00      	add	r7, sp, #0
 8014692:	6078      	str	r0, [r7, #4]
 8014694:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8014696:	687b      	ldr	r3, [r7, #4]
 8014698:	681b      	ldr	r3, [r3, #0]
 801469a:	2201      	movs	r2, #1
 801469c:	6839      	ldr	r1, [r7, #0]
 801469e:	4618      	mov	r0, r3
 80146a0:	f000 fc4a 	bl	8014f38 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80146a4:	687b      	ldr	r3, [r7, #4]
 80146a6:	681b      	ldr	r3, [r3, #0]
 80146a8:	4a10      	ldr	r2, [pc, #64]	; (80146ec <HAL_TIM_PWM_Start+0x60>)
 80146aa:	4293      	cmp	r3, r2
 80146ac:	d107      	bne.n	80146be <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80146ae:	687b      	ldr	r3, [r7, #4]
 80146b0:	681b      	ldr	r3, [r3, #0]
 80146b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80146b4:	687b      	ldr	r3, [r7, #4]
 80146b6:	681b      	ldr	r3, [r3, #0]
 80146b8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80146bc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80146be:	687b      	ldr	r3, [r7, #4]
 80146c0:	681b      	ldr	r3, [r3, #0]
 80146c2:	689b      	ldr	r3, [r3, #8]
 80146c4:	f003 0307 	and.w	r3, r3, #7
 80146c8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80146ca:	68fb      	ldr	r3, [r7, #12]
 80146cc:	2b06      	cmp	r3, #6
 80146ce:	d007      	beq.n	80146e0 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 80146d0:	687b      	ldr	r3, [r7, #4]
 80146d2:	681b      	ldr	r3, [r3, #0]
 80146d4:	681a      	ldr	r2, [r3, #0]
 80146d6:	687b      	ldr	r3, [r7, #4]
 80146d8:	681b      	ldr	r3, [r3, #0]
 80146da:	f042 0201 	orr.w	r2, r2, #1
 80146de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80146e0:	2300      	movs	r3, #0
}
 80146e2:	4618      	mov	r0, r3
 80146e4:	3710      	adds	r7, #16
 80146e6:	46bd      	mov	sp, r7
 80146e8:	bd80      	pop	{r7, pc}
 80146ea:	bf00      	nop
 80146ec:	40010000 	.word	0x40010000

080146f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80146f0:	b580      	push	{r7, lr}
 80146f2:	b084      	sub	sp, #16
 80146f4:	af00      	add	r7, sp, #0
 80146f6:	60f8      	str	r0, [r7, #12]
 80146f8:	60b9      	str	r1, [r7, #8]
 80146fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80146fc:	68fb      	ldr	r3, [r7, #12]
 80146fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8014702:	2b01      	cmp	r3, #1
 8014704:	d101      	bne.n	801470a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8014706:	2302      	movs	r3, #2
 8014708:	e0b4      	b.n	8014874 <HAL_TIM_PWM_ConfigChannel+0x184>
 801470a:	68fb      	ldr	r3, [r7, #12]
 801470c:	2201      	movs	r2, #1
 801470e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8014712:	68fb      	ldr	r3, [r7, #12]
 8014714:	2202      	movs	r2, #2
 8014716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 801471a:	687b      	ldr	r3, [r7, #4]
 801471c:	2b0c      	cmp	r3, #12
 801471e:	f200 809f 	bhi.w	8014860 <HAL_TIM_PWM_ConfigChannel+0x170>
 8014722:	a201      	add	r2, pc, #4	; (adr r2, 8014728 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8014724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014728:	0801475d 	.word	0x0801475d
 801472c:	08014861 	.word	0x08014861
 8014730:	08014861 	.word	0x08014861
 8014734:	08014861 	.word	0x08014861
 8014738:	0801479d 	.word	0x0801479d
 801473c:	08014861 	.word	0x08014861
 8014740:	08014861 	.word	0x08014861
 8014744:	08014861 	.word	0x08014861
 8014748:	080147df 	.word	0x080147df
 801474c:	08014861 	.word	0x08014861
 8014750:	08014861 	.word	0x08014861
 8014754:	08014861 	.word	0x08014861
 8014758:	0801481f 	.word	0x0801481f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801475c:	68fb      	ldr	r3, [r7, #12]
 801475e:	681b      	ldr	r3, [r3, #0]
 8014760:	68b9      	ldr	r1, [r7, #8]
 8014762:	4618      	mov	r0, r3
 8014764:	f000 f9c2 	bl	8014aec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8014768:	68fb      	ldr	r3, [r7, #12]
 801476a:	681b      	ldr	r3, [r3, #0]
 801476c:	699a      	ldr	r2, [r3, #24]
 801476e:	68fb      	ldr	r3, [r7, #12]
 8014770:	681b      	ldr	r3, [r3, #0]
 8014772:	f042 0208 	orr.w	r2, r2, #8
 8014776:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8014778:	68fb      	ldr	r3, [r7, #12]
 801477a:	681b      	ldr	r3, [r3, #0]
 801477c:	699a      	ldr	r2, [r3, #24]
 801477e:	68fb      	ldr	r3, [r7, #12]
 8014780:	681b      	ldr	r3, [r3, #0]
 8014782:	f022 0204 	bic.w	r2, r2, #4
 8014786:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8014788:	68fb      	ldr	r3, [r7, #12]
 801478a:	681b      	ldr	r3, [r3, #0]
 801478c:	6999      	ldr	r1, [r3, #24]
 801478e:	68bb      	ldr	r3, [r7, #8]
 8014790:	691a      	ldr	r2, [r3, #16]
 8014792:	68fb      	ldr	r3, [r7, #12]
 8014794:	681b      	ldr	r3, [r3, #0]
 8014796:	430a      	orrs	r2, r1
 8014798:	619a      	str	r2, [r3, #24]
      break;
 801479a:	e062      	b.n	8014862 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801479c:	68fb      	ldr	r3, [r7, #12]
 801479e:	681b      	ldr	r3, [r3, #0]
 80147a0:	68b9      	ldr	r1, [r7, #8]
 80147a2:	4618      	mov	r0, r3
 80147a4:	f000 fa08 	bl	8014bb8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80147a8:	68fb      	ldr	r3, [r7, #12]
 80147aa:	681b      	ldr	r3, [r3, #0]
 80147ac:	699a      	ldr	r2, [r3, #24]
 80147ae:	68fb      	ldr	r3, [r7, #12]
 80147b0:	681b      	ldr	r3, [r3, #0]
 80147b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80147b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80147b8:	68fb      	ldr	r3, [r7, #12]
 80147ba:	681b      	ldr	r3, [r3, #0]
 80147bc:	699a      	ldr	r2, [r3, #24]
 80147be:	68fb      	ldr	r3, [r7, #12]
 80147c0:	681b      	ldr	r3, [r3, #0]
 80147c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80147c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80147c8:	68fb      	ldr	r3, [r7, #12]
 80147ca:	681b      	ldr	r3, [r3, #0]
 80147cc:	6999      	ldr	r1, [r3, #24]
 80147ce:	68bb      	ldr	r3, [r7, #8]
 80147d0:	691b      	ldr	r3, [r3, #16]
 80147d2:	021a      	lsls	r2, r3, #8
 80147d4:	68fb      	ldr	r3, [r7, #12]
 80147d6:	681b      	ldr	r3, [r3, #0]
 80147d8:	430a      	orrs	r2, r1
 80147da:	619a      	str	r2, [r3, #24]
      break;
 80147dc:	e041      	b.n	8014862 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80147de:	68fb      	ldr	r3, [r7, #12]
 80147e0:	681b      	ldr	r3, [r3, #0]
 80147e2:	68b9      	ldr	r1, [r7, #8]
 80147e4:	4618      	mov	r0, r3
 80147e6:	f000 fa53 	bl	8014c90 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80147ea:	68fb      	ldr	r3, [r7, #12]
 80147ec:	681b      	ldr	r3, [r3, #0]
 80147ee:	69da      	ldr	r2, [r3, #28]
 80147f0:	68fb      	ldr	r3, [r7, #12]
 80147f2:	681b      	ldr	r3, [r3, #0]
 80147f4:	f042 0208 	orr.w	r2, r2, #8
 80147f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80147fa:	68fb      	ldr	r3, [r7, #12]
 80147fc:	681b      	ldr	r3, [r3, #0]
 80147fe:	69da      	ldr	r2, [r3, #28]
 8014800:	68fb      	ldr	r3, [r7, #12]
 8014802:	681b      	ldr	r3, [r3, #0]
 8014804:	f022 0204 	bic.w	r2, r2, #4
 8014808:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801480a:	68fb      	ldr	r3, [r7, #12]
 801480c:	681b      	ldr	r3, [r3, #0]
 801480e:	69d9      	ldr	r1, [r3, #28]
 8014810:	68bb      	ldr	r3, [r7, #8]
 8014812:	691a      	ldr	r2, [r3, #16]
 8014814:	68fb      	ldr	r3, [r7, #12]
 8014816:	681b      	ldr	r3, [r3, #0]
 8014818:	430a      	orrs	r2, r1
 801481a:	61da      	str	r2, [r3, #28]
      break;
 801481c:	e021      	b.n	8014862 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801481e:	68fb      	ldr	r3, [r7, #12]
 8014820:	681b      	ldr	r3, [r3, #0]
 8014822:	68b9      	ldr	r1, [r7, #8]
 8014824:	4618      	mov	r0, r3
 8014826:	f000 fa9d 	bl	8014d64 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801482a:	68fb      	ldr	r3, [r7, #12]
 801482c:	681b      	ldr	r3, [r3, #0]
 801482e:	69da      	ldr	r2, [r3, #28]
 8014830:	68fb      	ldr	r3, [r7, #12]
 8014832:	681b      	ldr	r3, [r3, #0]
 8014834:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8014838:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801483a:	68fb      	ldr	r3, [r7, #12]
 801483c:	681b      	ldr	r3, [r3, #0]
 801483e:	69da      	ldr	r2, [r3, #28]
 8014840:	68fb      	ldr	r3, [r7, #12]
 8014842:	681b      	ldr	r3, [r3, #0]
 8014844:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8014848:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801484a:	68fb      	ldr	r3, [r7, #12]
 801484c:	681b      	ldr	r3, [r3, #0]
 801484e:	69d9      	ldr	r1, [r3, #28]
 8014850:	68bb      	ldr	r3, [r7, #8]
 8014852:	691b      	ldr	r3, [r3, #16]
 8014854:	021a      	lsls	r2, r3, #8
 8014856:	68fb      	ldr	r3, [r7, #12]
 8014858:	681b      	ldr	r3, [r3, #0]
 801485a:	430a      	orrs	r2, r1
 801485c:	61da      	str	r2, [r3, #28]
      break;
 801485e:	e000      	b.n	8014862 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8014860:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8014862:	68fb      	ldr	r3, [r7, #12]
 8014864:	2201      	movs	r2, #1
 8014866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801486a:	68fb      	ldr	r3, [r7, #12]
 801486c:	2200      	movs	r2, #0
 801486e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8014872:	2300      	movs	r3, #0
}
 8014874:	4618      	mov	r0, r3
 8014876:	3710      	adds	r7, #16
 8014878:	46bd      	mov	sp, r7
 801487a:	bd80      	pop	{r7, pc}

0801487c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801487c:	b580      	push	{r7, lr}
 801487e:	b084      	sub	sp, #16
 8014880:	af00      	add	r7, sp, #0
 8014882:	6078      	str	r0, [r7, #4]
 8014884:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8014886:	687b      	ldr	r3, [r7, #4]
 8014888:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801488c:	2b01      	cmp	r3, #1
 801488e:	d101      	bne.n	8014894 <HAL_TIM_ConfigClockSource+0x18>
 8014890:	2302      	movs	r3, #2
 8014892:	e0a6      	b.n	80149e2 <HAL_TIM_ConfigClockSource+0x166>
 8014894:	687b      	ldr	r3, [r7, #4]
 8014896:	2201      	movs	r2, #1
 8014898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801489c:	687b      	ldr	r3, [r7, #4]
 801489e:	2202      	movs	r2, #2
 80148a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80148a4:	687b      	ldr	r3, [r7, #4]
 80148a6:	681b      	ldr	r3, [r3, #0]
 80148a8:	689b      	ldr	r3, [r3, #8]
 80148aa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80148ac:	68fb      	ldr	r3, [r7, #12]
 80148ae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80148b2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80148b4:	68fb      	ldr	r3, [r7, #12]
 80148b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80148ba:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80148bc:	687b      	ldr	r3, [r7, #4]
 80148be:	681b      	ldr	r3, [r3, #0]
 80148c0:	68fa      	ldr	r2, [r7, #12]
 80148c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80148c4:	683b      	ldr	r3, [r7, #0]
 80148c6:	681b      	ldr	r3, [r3, #0]
 80148c8:	2b40      	cmp	r3, #64	; 0x40
 80148ca:	d067      	beq.n	801499c <HAL_TIM_ConfigClockSource+0x120>
 80148cc:	2b40      	cmp	r3, #64	; 0x40
 80148ce:	d80b      	bhi.n	80148e8 <HAL_TIM_ConfigClockSource+0x6c>
 80148d0:	2b10      	cmp	r3, #16
 80148d2:	d073      	beq.n	80149bc <HAL_TIM_ConfigClockSource+0x140>
 80148d4:	2b10      	cmp	r3, #16
 80148d6:	d802      	bhi.n	80148de <HAL_TIM_ConfigClockSource+0x62>
 80148d8:	2b00      	cmp	r3, #0
 80148da:	d06f      	beq.n	80149bc <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80148dc:	e078      	b.n	80149d0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80148de:	2b20      	cmp	r3, #32
 80148e0:	d06c      	beq.n	80149bc <HAL_TIM_ConfigClockSource+0x140>
 80148e2:	2b30      	cmp	r3, #48	; 0x30
 80148e4:	d06a      	beq.n	80149bc <HAL_TIM_ConfigClockSource+0x140>
      break;
 80148e6:	e073      	b.n	80149d0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80148e8:	2b70      	cmp	r3, #112	; 0x70
 80148ea:	d00d      	beq.n	8014908 <HAL_TIM_ConfigClockSource+0x8c>
 80148ec:	2b70      	cmp	r3, #112	; 0x70
 80148ee:	d804      	bhi.n	80148fa <HAL_TIM_ConfigClockSource+0x7e>
 80148f0:	2b50      	cmp	r3, #80	; 0x50
 80148f2:	d033      	beq.n	801495c <HAL_TIM_ConfigClockSource+0xe0>
 80148f4:	2b60      	cmp	r3, #96	; 0x60
 80148f6:	d041      	beq.n	801497c <HAL_TIM_ConfigClockSource+0x100>
      break;
 80148f8:	e06a      	b.n	80149d0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80148fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80148fe:	d066      	beq.n	80149ce <HAL_TIM_ConfigClockSource+0x152>
 8014900:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8014904:	d017      	beq.n	8014936 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8014906:	e063      	b.n	80149d0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8014908:	687b      	ldr	r3, [r7, #4]
 801490a:	6818      	ldr	r0, [r3, #0]
 801490c:	683b      	ldr	r3, [r7, #0]
 801490e:	6899      	ldr	r1, [r3, #8]
 8014910:	683b      	ldr	r3, [r7, #0]
 8014912:	685a      	ldr	r2, [r3, #4]
 8014914:	683b      	ldr	r3, [r7, #0]
 8014916:	68db      	ldr	r3, [r3, #12]
 8014918:	f000 faee 	bl	8014ef8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 801491c:	687b      	ldr	r3, [r7, #4]
 801491e:	681b      	ldr	r3, [r3, #0]
 8014920:	689b      	ldr	r3, [r3, #8]
 8014922:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8014924:	68fb      	ldr	r3, [r7, #12]
 8014926:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 801492a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 801492c:	687b      	ldr	r3, [r7, #4]
 801492e:	681b      	ldr	r3, [r3, #0]
 8014930:	68fa      	ldr	r2, [r7, #12]
 8014932:	609a      	str	r2, [r3, #8]
      break;
 8014934:	e04c      	b.n	80149d0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8014936:	687b      	ldr	r3, [r7, #4]
 8014938:	6818      	ldr	r0, [r3, #0]
 801493a:	683b      	ldr	r3, [r7, #0]
 801493c:	6899      	ldr	r1, [r3, #8]
 801493e:	683b      	ldr	r3, [r7, #0]
 8014940:	685a      	ldr	r2, [r3, #4]
 8014942:	683b      	ldr	r3, [r7, #0]
 8014944:	68db      	ldr	r3, [r3, #12]
 8014946:	f000 fad7 	bl	8014ef8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801494a:	687b      	ldr	r3, [r7, #4]
 801494c:	681b      	ldr	r3, [r3, #0]
 801494e:	689a      	ldr	r2, [r3, #8]
 8014950:	687b      	ldr	r3, [r7, #4]
 8014952:	681b      	ldr	r3, [r3, #0]
 8014954:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8014958:	609a      	str	r2, [r3, #8]
      break;
 801495a:	e039      	b.n	80149d0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 801495c:	687b      	ldr	r3, [r7, #4]
 801495e:	6818      	ldr	r0, [r3, #0]
 8014960:	683b      	ldr	r3, [r7, #0]
 8014962:	6859      	ldr	r1, [r3, #4]
 8014964:	683b      	ldr	r3, [r7, #0]
 8014966:	68db      	ldr	r3, [r3, #12]
 8014968:	461a      	mov	r2, r3
 801496a:	f000 fa4b 	bl	8014e04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801496e:	687b      	ldr	r3, [r7, #4]
 8014970:	681b      	ldr	r3, [r3, #0]
 8014972:	2150      	movs	r1, #80	; 0x50
 8014974:	4618      	mov	r0, r3
 8014976:	f000 faa4 	bl	8014ec2 <TIM_ITRx_SetConfig>
      break;
 801497a:	e029      	b.n	80149d0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 801497c:	687b      	ldr	r3, [r7, #4]
 801497e:	6818      	ldr	r0, [r3, #0]
 8014980:	683b      	ldr	r3, [r7, #0]
 8014982:	6859      	ldr	r1, [r3, #4]
 8014984:	683b      	ldr	r3, [r7, #0]
 8014986:	68db      	ldr	r3, [r3, #12]
 8014988:	461a      	mov	r2, r3
 801498a:	f000 fa6a 	bl	8014e62 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801498e:	687b      	ldr	r3, [r7, #4]
 8014990:	681b      	ldr	r3, [r3, #0]
 8014992:	2160      	movs	r1, #96	; 0x60
 8014994:	4618      	mov	r0, r3
 8014996:	f000 fa94 	bl	8014ec2 <TIM_ITRx_SetConfig>
      break;
 801499a:	e019      	b.n	80149d0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 801499c:	687b      	ldr	r3, [r7, #4]
 801499e:	6818      	ldr	r0, [r3, #0]
 80149a0:	683b      	ldr	r3, [r7, #0]
 80149a2:	6859      	ldr	r1, [r3, #4]
 80149a4:	683b      	ldr	r3, [r7, #0]
 80149a6:	68db      	ldr	r3, [r3, #12]
 80149a8:	461a      	mov	r2, r3
 80149aa:	f000 fa2b 	bl	8014e04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80149ae:	687b      	ldr	r3, [r7, #4]
 80149b0:	681b      	ldr	r3, [r3, #0]
 80149b2:	2140      	movs	r1, #64	; 0x40
 80149b4:	4618      	mov	r0, r3
 80149b6:	f000 fa84 	bl	8014ec2 <TIM_ITRx_SetConfig>
      break;
 80149ba:	e009      	b.n	80149d0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80149bc:	687b      	ldr	r3, [r7, #4]
 80149be:	681a      	ldr	r2, [r3, #0]
 80149c0:	683b      	ldr	r3, [r7, #0]
 80149c2:	681b      	ldr	r3, [r3, #0]
 80149c4:	4619      	mov	r1, r3
 80149c6:	4610      	mov	r0, r2
 80149c8:	f000 fa7b 	bl	8014ec2 <TIM_ITRx_SetConfig>
      break;
 80149cc:	e000      	b.n	80149d0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80149ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80149d0:	687b      	ldr	r3, [r7, #4]
 80149d2:	2201      	movs	r2, #1
 80149d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80149d8:	687b      	ldr	r3, [r7, #4]
 80149da:	2200      	movs	r2, #0
 80149dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80149e0:	2300      	movs	r3, #0
}
 80149e2:	4618      	mov	r0, r3
 80149e4:	3710      	adds	r7, #16
 80149e6:	46bd      	mov	sp, r7
 80149e8:	bd80      	pop	{r7, pc}
	...

080149ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80149ec:	b480      	push	{r7}
 80149ee:	b085      	sub	sp, #20
 80149f0:	af00      	add	r7, sp, #0
 80149f2:	6078      	str	r0, [r7, #4]
 80149f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80149f6:	687b      	ldr	r3, [r7, #4]
 80149f8:	681b      	ldr	r3, [r3, #0]
 80149fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80149fc:	687b      	ldr	r3, [r7, #4]
 80149fe:	4a34      	ldr	r2, [pc, #208]	; (8014ad0 <TIM_Base_SetConfig+0xe4>)
 8014a00:	4293      	cmp	r3, r2
 8014a02:	d00f      	beq.n	8014a24 <TIM_Base_SetConfig+0x38>
 8014a04:	687b      	ldr	r3, [r7, #4]
 8014a06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014a0a:	d00b      	beq.n	8014a24 <TIM_Base_SetConfig+0x38>
 8014a0c:	687b      	ldr	r3, [r7, #4]
 8014a0e:	4a31      	ldr	r2, [pc, #196]	; (8014ad4 <TIM_Base_SetConfig+0xe8>)
 8014a10:	4293      	cmp	r3, r2
 8014a12:	d007      	beq.n	8014a24 <TIM_Base_SetConfig+0x38>
 8014a14:	687b      	ldr	r3, [r7, #4]
 8014a16:	4a30      	ldr	r2, [pc, #192]	; (8014ad8 <TIM_Base_SetConfig+0xec>)
 8014a18:	4293      	cmp	r3, r2
 8014a1a:	d003      	beq.n	8014a24 <TIM_Base_SetConfig+0x38>
 8014a1c:	687b      	ldr	r3, [r7, #4]
 8014a1e:	4a2f      	ldr	r2, [pc, #188]	; (8014adc <TIM_Base_SetConfig+0xf0>)
 8014a20:	4293      	cmp	r3, r2
 8014a22:	d108      	bne.n	8014a36 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8014a24:	68fb      	ldr	r3, [r7, #12]
 8014a26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014a2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8014a2c:	683b      	ldr	r3, [r7, #0]
 8014a2e:	685b      	ldr	r3, [r3, #4]
 8014a30:	68fa      	ldr	r2, [r7, #12]
 8014a32:	4313      	orrs	r3, r2
 8014a34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8014a36:	687b      	ldr	r3, [r7, #4]
 8014a38:	4a25      	ldr	r2, [pc, #148]	; (8014ad0 <TIM_Base_SetConfig+0xe4>)
 8014a3a:	4293      	cmp	r3, r2
 8014a3c:	d01b      	beq.n	8014a76 <TIM_Base_SetConfig+0x8a>
 8014a3e:	687b      	ldr	r3, [r7, #4]
 8014a40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014a44:	d017      	beq.n	8014a76 <TIM_Base_SetConfig+0x8a>
 8014a46:	687b      	ldr	r3, [r7, #4]
 8014a48:	4a22      	ldr	r2, [pc, #136]	; (8014ad4 <TIM_Base_SetConfig+0xe8>)
 8014a4a:	4293      	cmp	r3, r2
 8014a4c:	d013      	beq.n	8014a76 <TIM_Base_SetConfig+0x8a>
 8014a4e:	687b      	ldr	r3, [r7, #4]
 8014a50:	4a21      	ldr	r2, [pc, #132]	; (8014ad8 <TIM_Base_SetConfig+0xec>)
 8014a52:	4293      	cmp	r3, r2
 8014a54:	d00f      	beq.n	8014a76 <TIM_Base_SetConfig+0x8a>
 8014a56:	687b      	ldr	r3, [r7, #4]
 8014a58:	4a20      	ldr	r2, [pc, #128]	; (8014adc <TIM_Base_SetConfig+0xf0>)
 8014a5a:	4293      	cmp	r3, r2
 8014a5c:	d00b      	beq.n	8014a76 <TIM_Base_SetConfig+0x8a>
 8014a5e:	687b      	ldr	r3, [r7, #4]
 8014a60:	4a1f      	ldr	r2, [pc, #124]	; (8014ae0 <TIM_Base_SetConfig+0xf4>)
 8014a62:	4293      	cmp	r3, r2
 8014a64:	d007      	beq.n	8014a76 <TIM_Base_SetConfig+0x8a>
 8014a66:	687b      	ldr	r3, [r7, #4]
 8014a68:	4a1e      	ldr	r2, [pc, #120]	; (8014ae4 <TIM_Base_SetConfig+0xf8>)
 8014a6a:	4293      	cmp	r3, r2
 8014a6c:	d003      	beq.n	8014a76 <TIM_Base_SetConfig+0x8a>
 8014a6e:	687b      	ldr	r3, [r7, #4]
 8014a70:	4a1d      	ldr	r2, [pc, #116]	; (8014ae8 <TIM_Base_SetConfig+0xfc>)
 8014a72:	4293      	cmp	r3, r2
 8014a74:	d108      	bne.n	8014a88 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8014a76:	68fb      	ldr	r3, [r7, #12]
 8014a78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8014a7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8014a7e:	683b      	ldr	r3, [r7, #0]
 8014a80:	68db      	ldr	r3, [r3, #12]
 8014a82:	68fa      	ldr	r2, [r7, #12]
 8014a84:	4313      	orrs	r3, r2
 8014a86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8014a88:	68fb      	ldr	r3, [r7, #12]
 8014a8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8014a8e:	683b      	ldr	r3, [r7, #0]
 8014a90:	695b      	ldr	r3, [r3, #20]
 8014a92:	4313      	orrs	r3, r2
 8014a94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8014a96:	687b      	ldr	r3, [r7, #4]
 8014a98:	68fa      	ldr	r2, [r7, #12]
 8014a9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8014a9c:	683b      	ldr	r3, [r7, #0]
 8014a9e:	689a      	ldr	r2, [r3, #8]
 8014aa0:	687b      	ldr	r3, [r7, #4]
 8014aa2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8014aa4:	683b      	ldr	r3, [r7, #0]
 8014aa6:	681a      	ldr	r2, [r3, #0]
 8014aa8:	687b      	ldr	r3, [r7, #4]
 8014aaa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8014aac:	687b      	ldr	r3, [r7, #4]
 8014aae:	4a08      	ldr	r2, [pc, #32]	; (8014ad0 <TIM_Base_SetConfig+0xe4>)
 8014ab0:	4293      	cmp	r3, r2
 8014ab2:	d103      	bne.n	8014abc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8014ab4:	683b      	ldr	r3, [r7, #0]
 8014ab6:	691a      	ldr	r2, [r3, #16]
 8014ab8:	687b      	ldr	r3, [r7, #4]
 8014aba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8014abc:	687b      	ldr	r3, [r7, #4]
 8014abe:	2201      	movs	r2, #1
 8014ac0:	615a      	str	r2, [r3, #20]
}
 8014ac2:	bf00      	nop
 8014ac4:	3714      	adds	r7, #20
 8014ac6:	46bd      	mov	sp, r7
 8014ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014acc:	4770      	bx	lr
 8014ace:	bf00      	nop
 8014ad0:	40010000 	.word	0x40010000
 8014ad4:	40000400 	.word	0x40000400
 8014ad8:	40000800 	.word	0x40000800
 8014adc:	40000c00 	.word	0x40000c00
 8014ae0:	40014000 	.word	0x40014000
 8014ae4:	40014400 	.word	0x40014400
 8014ae8:	40014800 	.word	0x40014800

08014aec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8014aec:	b480      	push	{r7}
 8014aee:	b087      	sub	sp, #28
 8014af0:	af00      	add	r7, sp, #0
 8014af2:	6078      	str	r0, [r7, #4]
 8014af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8014af6:	687b      	ldr	r3, [r7, #4]
 8014af8:	6a1b      	ldr	r3, [r3, #32]
 8014afa:	f023 0201 	bic.w	r2, r3, #1
 8014afe:	687b      	ldr	r3, [r7, #4]
 8014b00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014b02:	687b      	ldr	r3, [r7, #4]
 8014b04:	6a1b      	ldr	r3, [r3, #32]
 8014b06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014b08:	687b      	ldr	r3, [r7, #4]
 8014b0a:	685b      	ldr	r3, [r3, #4]
 8014b0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8014b0e:	687b      	ldr	r3, [r7, #4]
 8014b10:	699b      	ldr	r3, [r3, #24]
 8014b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8014b14:	68fb      	ldr	r3, [r7, #12]
 8014b16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014b1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8014b1c:	68fb      	ldr	r3, [r7, #12]
 8014b1e:	f023 0303 	bic.w	r3, r3, #3
 8014b22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8014b24:	683b      	ldr	r3, [r7, #0]
 8014b26:	681b      	ldr	r3, [r3, #0]
 8014b28:	68fa      	ldr	r2, [r7, #12]
 8014b2a:	4313      	orrs	r3, r2
 8014b2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8014b2e:	697b      	ldr	r3, [r7, #20]
 8014b30:	f023 0302 	bic.w	r3, r3, #2
 8014b34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8014b36:	683b      	ldr	r3, [r7, #0]
 8014b38:	689b      	ldr	r3, [r3, #8]
 8014b3a:	697a      	ldr	r2, [r7, #20]
 8014b3c:	4313      	orrs	r3, r2
 8014b3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8014b40:	687b      	ldr	r3, [r7, #4]
 8014b42:	4a1c      	ldr	r2, [pc, #112]	; (8014bb4 <TIM_OC1_SetConfig+0xc8>)
 8014b44:	4293      	cmp	r3, r2
 8014b46:	d10c      	bne.n	8014b62 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8014b48:	697b      	ldr	r3, [r7, #20]
 8014b4a:	f023 0308 	bic.w	r3, r3, #8
 8014b4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8014b50:	683b      	ldr	r3, [r7, #0]
 8014b52:	68db      	ldr	r3, [r3, #12]
 8014b54:	697a      	ldr	r2, [r7, #20]
 8014b56:	4313      	orrs	r3, r2
 8014b58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8014b5a:	697b      	ldr	r3, [r7, #20]
 8014b5c:	f023 0304 	bic.w	r3, r3, #4
 8014b60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014b62:	687b      	ldr	r3, [r7, #4]
 8014b64:	4a13      	ldr	r2, [pc, #76]	; (8014bb4 <TIM_OC1_SetConfig+0xc8>)
 8014b66:	4293      	cmp	r3, r2
 8014b68:	d111      	bne.n	8014b8e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8014b6a:	693b      	ldr	r3, [r7, #16]
 8014b6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8014b70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8014b72:	693b      	ldr	r3, [r7, #16]
 8014b74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8014b78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8014b7a:	683b      	ldr	r3, [r7, #0]
 8014b7c:	695b      	ldr	r3, [r3, #20]
 8014b7e:	693a      	ldr	r2, [r7, #16]
 8014b80:	4313      	orrs	r3, r2
 8014b82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8014b84:	683b      	ldr	r3, [r7, #0]
 8014b86:	699b      	ldr	r3, [r3, #24]
 8014b88:	693a      	ldr	r2, [r7, #16]
 8014b8a:	4313      	orrs	r3, r2
 8014b8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014b8e:	687b      	ldr	r3, [r7, #4]
 8014b90:	693a      	ldr	r2, [r7, #16]
 8014b92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8014b94:	687b      	ldr	r3, [r7, #4]
 8014b96:	68fa      	ldr	r2, [r7, #12]
 8014b98:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8014b9a:	683b      	ldr	r3, [r7, #0]
 8014b9c:	685a      	ldr	r2, [r3, #4]
 8014b9e:	687b      	ldr	r3, [r7, #4]
 8014ba0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014ba2:	687b      	ldr	r3, [r7, #4]
 8014ba4:	697a      	ldr	r2, [r7, #20]
 8014ba6:	621a      	str	r2, [r3, #32]
}
 8014ba8:	bf00      	nop
 8014baa:	371c      	adds	r7, #28
 8014bac:	46bd      	mov	sp, r7
 8014bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bb2:	4770      	bx	lr
 8014bb4:	40010000 	.word	0x40010000

08014bb8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8014bb8:	b480      	push	{r7}
 8014bba:	b087      	sub	sp, #28
 8014bbc:	af00      	add	r7, sp, #0
 8014bbe:	6078      	str	r0, [r7, #4]
 8014bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8014bc2:	687b      	ldr	r3, [r7, #4]
 8014bc4:	6a1b      	ldr	r3, [r3, #32]
 8014bc6:	f023 0210 	bic.w	r2, r3, #16
 8014bca:	687b      	ldr	r3, [r7, #4]
 8014bcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014bce:	687b      	ldr	r3, [r7, #4]
 8014bd0:	6a1b      	ldr	r3, [r3, #32]
 8014bd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014bd4:	687b      	ldr	r3, [r7, #4]
 8014bd6:	685b      	ldr	r3, [r3, #4]
 8014bd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8014bda:	687b      	ldr	r3, [r7, #4]
 8014bdc:	699b      	ldr	r3, [r3, #24]
 8014bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8014be0:	68fb      	ldr	r3, [r7, #12]
 8014be2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8014be6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8014be8:	68fb      	ldr	r3, [r7, #12]
 8014bea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8014bee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8014bf0:	683b      	ldr	r3, [r7, #0]
 8014bf2:	681b      	ldr	r3, [r3, #0]
 8014bf4:	021b      	lsls	r3, r3, #8
 8014bf6:	68fa      	ldr	r2, [r7, #12]
 8014bf8:	4313      	orrs	r3, r2
 8014bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8014bfc:	697b      	ldr	r3, [r7, #20]
 8014bfe:	f023 0320 	bic.w	r3, r3, #32
 8014c02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8014c04:	683b      	ldr	r3, [r7, #0]
 8014c06:	689b      	ldr	r3, [r3, #8]
 8014c08:	011b      	lsls	r3, r3, #4
 8014c0a:	697a      	ldr	r2, [r7, #20]
 8014c0c:	4313      	orrs	r3, r2
 8014c0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8014c10:	687b      	ldr	r3, [r7, #4]
 8014c12:	4a1e      	ldr	r2, [pc, #120]	; (8014c8c <TIM_OC2_SetConfig+0xd4>)
 8014c14:	4293      	cmp	r3, r2
 8014c16:	d10d      	bne.n	8014c34 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8014c18:	697b      	ldr	r3, [r7, #20]
 8014c1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8014c1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8014c20:	683b      	ldr	r3, [r7, #0]
 8014c22:	68db      	ldr	r3, [r3, #12]
 8014c24:	011b      	lsls	r3, r3, #4
 8014c26:	697a      	ldr	r2, [r7, #20]
 8014c28:	4313      	orrs	r3, r2
 8014c2a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8014c2c:	697b      	ldr	r3, [r7, #20]
 8014c2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014c32:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014c34:	687b      	ldr	r3, [r7, #4]
 8014c36:	4a15      	ldr	r2, [pc, #84]	; (8014c8c <TIM_OC2_SetConfig+0xd4>)
 8014c38:	4293      	cmp	r3, r2
 8014c3a:	d113      	bne.n	8014c64 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8014c3c:	693b      	ldr	r3, [r7, #16]
 8014c3e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8014c42:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8014c44:	693b      	ldr	r3, [r7, #16]
 8014c46:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8014c4a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8014c4c:	683b      	ldr	r3, [r7, #0]
 8014c4e:	695b      	ldr	r3, [r3, #20]
 8014c50:	009b      	lsls	r3, r3, #2
 8014c52:	693a      	ldr	r2, [r7, #16]
 8014c54:	4313      	orrs	r3, r2
 8014c56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8014c58:	683b      	ldr	r3, [r7, #0]
 8014c5a:	699b      	ldr	r3, [r3, #24]
 8014c5c:	009b      	lsls	r3, r3, #2
 8014c5e:	693a      	ldr	r2, [r7, #16]
 8014c60:	4313      	orrs	r3, r2
 8014c62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014c64:	687b      	ldr	r3, [r7, #4]
 8014c66:	693a      	ldr	r2, [r7, #16]
 8014c68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8014c6a:	687b      	ldr	r3, [r7, #4]
 8014c6c:	68fa      	ldr	r2, [r7, #12]
 8014c6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8014c70:	683b      	ldr	r3, [r7, #0]
 8014c72:	685a      	ldr	r2, [r3, #4]
 8014c74:	687b      	ldr	r3, [r7, #4]
 8014c76:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014c78:	687b      	ldr	r3, [r7, #4]
 8014c7a:	697a      	ldr	r2, [r7, #20]
 8014c7c:	621a      	str	r2, [r3, #32]
}
 8014c7e:	bf00      	nop
 8014c80:	371c      	adds	r7, #28
 8014c82:	46bd      	mov	sp, r7
 8014c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c88:	4770      	bx	lr
 8014c8a:	bf00      	nop
 8014c8c:	40010000 	.word	0x40010000

08014c90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8014c90:	b480      	push	{r7}
 8014c92:	b087      	sub	sp, #28
 8014c94:	af00      	add	r7, sp, #0
 8014c96:	6078      	str	r0, [r7, #4]
 8014c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8014c9a:	687b      	ldr	r3, [r7, #4]
 8014c9c:	6a1b      	ldr	r3, [r3, #32]
 8014c9e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8014ca2:	687b      	ldr	r3, [r7, #4]
 8014ca4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014ca6:	687b      	ldr	r3, [r7, #4]
 8014ca8:	6a1b      	ldr	r3, [r3, #32]
 8014caa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014cac:	687b      	ldr	r3, [r7, #4]
 8014cae:	685b      	ldr	r3, [r3, #4]
 8014cb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8014cb2:	687b      	ldr	r3, [r7, #4]
 8014cb4:	69db      	ldr	r3, [r3, #28]
 8014cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8014cb8:	68fb      	ldr	r3, [r7, #12]
 8014cba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014cbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8014cc0:	68fb      	ldr	r3, [r7, #12]
 8014cc2:	f023 0303 	bic.w	r3, r3, #3
 8014cc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8014cc8:	683b      	ldr	r3, [r7, #0]
 8014cca:	681b      	ldr	r3, [r3, #0]
 8014ccc:	68fa      	ldr	r2, [r7, #12]
 8014cce:	4313      	orrs	r3, r2
 8014cd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8014cd2:	697b      	ldr	r3, [r7, #20]
 8014cd4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8014cd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8014cda:	683b      	ldr	r3, [r7, #0]
 8014cdc:	689b      	ldr	r3, [r3, #8]
 8014cde:	021b      	lsls	r3, r3, #8
 8014ce0:	697a      	ldr	r2, [r7, #20]
 8014ce2:	4313      	orrs	r3, r2
 8014ce4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8014ce6:	687b      	ldr	r3, [r7, #4]
 8014ce8:	4a1d      	ldr	r2, [pc, #116]	; (8014d60 <TIM_OC3_SetConfig+0xd0>)
 8014cea:	4293      	cmp	r3, r2
 8014cec:	d10d      	bne.n	8014d0a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8014cee:	697b      	ldr	r3, [r7, #20]
 8014cf0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8014cf4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8014cf6:	683b      	ldr	r3, [r7, #0]
 8014cf8:	68db      	ldr	r3, [r3, #12]
 8014cfa:	021b      	lsls	r3, r3, #8
 8014cfc:	697a      	ldr	r2, [r7, #20]
 8014cfe:	4313      	orrs	r3, r2
 8014d00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8014d02:	697b      	ldr	r3, [r7, #20]
 8014d04:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8014d08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014d0a:	687b      	ldr	r3, [r7, #4]
 8014d0c:	4a14      	ldr	r2, [pc, #80]	; (8014d60 <TIM_OC3_SetConfig+0xd0>)
 8014d0e:	4293      	cmp	r3, r2
 8014d10:	d113      	bne.n	8014d3a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8014d12:	693b      	ldr	r3, [r7, #16]
 8014d14:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014d18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8014d1a:	693b      	ldr	r3, [r7, #16]
 8014d1c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8014d20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8014d22:	683b      	ldr	r3, [r7, #0]
 8014d24:	695b      	ldr	r3, [r3, #20]
 8014d26:	011b      	lsls	r3, r3, #4
 8014d28:	693a      	ldr	r2, [r7, #16]
 8014d2a:	4313      	orrs	r3, r2
 8014d2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8014d2e:	683b      	ldr	r3, [r7, #0]
 8014d30:	699b      	ldr	r3, [r3, #24]
 8014d32:	011b      	lsls	r3, r3, #4
 8014d34:	693a      	ldr	r2, [r7, #16]
 8014d36:	4313      	orrs	r3, r2
 8014d38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014d3a:	687b      	ldr	r3, [r7, #4]
 8014d3c:	693a      	ldr	r2, [r7, #16]
 8014d3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8014d40:	687b      	ldr	r3, [r7, #4]
 8014d42:	68fa      	ldr	r2, [r7, #12]
 8014d44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8014d46:	683b      	ldr	r3, [r7, #0]
 8014d48:	685a      	ldr	r2, [r3, #4]
 8014d4a:	687b      	ldr	r3, [r7, #4]
 8014d4c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014d4e:	687b      	ldr	r3, [r7, #4]
 8014d50:	697a      	ldr	r2, [r7, #20]
 8014d52:	621a      	str	r2, [r3, #32]
}
 8014d54:	bf00      	nop
 8014d56:	371c      	adds	r7, #28
 8014d58:	46bd      	mov	sp, r7
 8014d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d5e:	4770      	bx	lr
 8014d60:	40010000 	.word	0x40010000

08014d64 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8014d64:	b480      	push	{r7}
 8014d66:	b087      	sub	sp, #28
 8014d68:	af00      	add	r7, sp, #0
 8014d6a:	6078      	str	r0, [r7, #4]
 8014d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8014d6e:	687b      	ldr	r3, [r7, #4]
 8014d70:	6a1b      	ldr	r3, [r3, #32]
 8014d72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8014d76:	687b      	ldr	r3, [r7, #4]
 8014d78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014d7a:	687b      	ldr	r3, [r7, #4]
 8014d7c:	6a1b      	ldr	r3, [r3, #32]
 8014d7e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014d80:	687b      	ldr	r3, [r7, #4]
 8014d82:	685b      	ldr	r3, [r3, #4]
 8014d84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8014d86:	687b      	ldr	r3, [r7, #4]
 8014d88:	69db      	ldr	r3, [r3, #28]
 8014d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8014d8c:	68fb      	ldr	r3, [r7, #12]
 8014d8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8014d92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8014d94:	68fb      	ldr	r3, [r7, #12]
 8014d96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8014d9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8014d9c:	683b      	ldr	r3, [r7, #0]
 8014d9e:	681b      	ldr	r3, [r3, #0]
 8014da0:	021b      	lsls	r3, r3, #8
 8014da2:	68fa      	ldr	r2, [r7, #12]
 8014da4:	4313      	orrs	r3, r2
 8014da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8014da8:	693b      	ldr	r3, [r7, #16]
 8014daa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8014dae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8014db0:	683b      	ldr	r3, [r7, #0]
 8014db2:	689b      	ldr	r3, [r3, #8]
 8014db4:	031b      	lsls	r3, r3, #12
 8014db6:	693a      	ldr	r2, [r7, #16]
 8014db8:	4313      	orrs	r3, r2
 8014dba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014dbc:	687b      	ldr	r3, [r7, #4]
 8014dbe:	4a10      	ldr	r2, [pc, #64]	; (8014e00 <TIM_OC4_SetConfig+0x9c>)
 8014dc0:	4293      	cmp	r3, r2
 8014dc2:	d109      	bne.n	8014dd8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8014dc4:	697b      	ldr	r3, [r7, #20]
 8014dc6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8014dca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8014dcc:	683b      	ldr	r3, [r7, #0]
 8014dce:	695b      	ldr	r3, [r3, #20]
 8014dd0:	019b      	lsls	r3, r3, #6
 8014dd2:	697a      	ldr	r2, [r7, #20]
 8014dd4:	4313      	orrs	r3, r2
 8014dd6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014dd8:	687b      	ldr	r3, [r7, #4]
 8014dda:	697a      	ldr	r2, [r7, #20]
 8014ddc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8014dde:	687b      	ldr	r3, [r7, #4]
 8014de0:	68fa      	ldr	r2, [r7, #12]
 8014de2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8014de4:	683b      	ldr	r3, [r7, #0]
 8014de6:	685a      	ldr	r2, [r3, #4]
 8014de8:	687b      	ldr	r3, [r7, #4]
 8014dea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014dec:	687b      	ldr	r3, [r7, #4]
 8014dee:	693a      	ldr	r2, [r7, #16]
 8014df0:	621a      	str	r2, [r3, #32]
}
 8014df2:	bf00      	nop
 8014df4:	371c      	adds	r7, #28
 8014df6:	46bd      	mov	sp, r7
 8014df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dfc:	4770      	bx	lr
 8014dfe:	bf00      	nop
 8014e00:	40010000 	.word	0x40010000

08014e04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8014e04:	b480      	push	{r7}
 8014e06:	b087      	sub	sp, #28
 8014e08:	af00      	add	r7, sp, #0
 8014e0a:	60f8      	str	r0, [r7, #12]
 8014e0c:	60b9      	str	r1, [r7, #8]
 8014e0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8014e10:	68fb      	ldr	r3, [r7, #12]
 8014e12:	6a1b      	ldr	r3, [r3, #32]
 8014e14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8014e16:	68fb      	ldr	r3, [r7, #12]
 8014e18:	6a1b      	ldr	r3, [r3, #32]
 8014e1a:	f023 0201 	bic.w	r2, r3, #1
 8014e1e:	68fb      	ldr	r3, [r7, #12]
 8014e20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8014e22:	68fb      	ldr	r3, [r7, #12]
 8014e24:	699b      	ldr	r3, [r3, #24]
 8014e26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8014e28:	693b      	ldr	r3, [r7, #16]
 8014e2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8014e2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8014e30:	687b      	ldr	r3, [r7, #4]
 8014e32:	011b      	lsls	r3, r3, #4
 8014e34:	693a      	ldr	r2, [r7, #16]
 8014e36:	4313      	orrs	r3, r2
 8014e38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8014e3a:	697b      	ldr	r3, [r7, #20]
 8014e3c:	f023 030a 	bic.w	r3, r3, #10
 8014e40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8014e42:	697a      	ldr	r2, [r7, #20]
 8014e44:	68bb      	ldr	r3, [r7, #8]
 8014e46:	4313      	orrs	r3, r2
 8014e48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8014e4a:	68fb      	ldr	r3, [r7, #12]
 8014e4c:	693a      	ldr	r2, [r7, #16]
 8014e4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8014e50:	68fb      	ldr	r3, [r7, #12]
 8014e52:	697a      	ldr	r2, [r7, #20]
 8014e54:	621a      	str	r2, [r3, #32]
}
 8014e56:	bf00      	nop
 8014e58:	371c      	adds	r7, #28
 8014e5a:	46bd      	mov	sp, r7
 8014e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e60:	4770      	bx	lr

08014e62 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8014e62:	b480      	push	{r7}
 8014e64:	b087      	sub	sp, #28
 8014e66:	af00      	add	r7, sp, #0
 8014e68:	60f8      	str	r0, [r7, #12]
 8014e6a:	60b9      	str	r1, [r7, #8]
 8014e6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8014e6e:	68fb      	ldr	r3, [r7, #12]
 8014e70:	6a1b      	ldr	r3, [r3, #32]
 8014e72:	f023 0210 	bic.w	r2, r3, #16
 8014e76:	68fb      	ldr	r3, [r7, #12]
 8014e78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8014e7a:	68fb      	ldr	r3, [r7, #12]
 8014e7c:	699b      	ldr	r3, [r3, #24]
 8014e7e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8014e80:	68fb      	ldr	r3, [r7, #12]
 8014e82:	6a1b      	ldr	r3, [r3, #32]
 8014e84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8014e86:	697b      	ldr	r3, [r7, #20]
 8014e88:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8014e8c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8014e8e:	687b      	ldr	r3, [r7, #4]
 8014e90:	031b      	lsls	r3, r3, #12
 8014e92:	697a      	ldr	r2, [r7, #20]
 8014e94:	4313      	orrs	r3, r2
 8014e96:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8014e98:	693b      	ldr	r3, [r7, #16]
 8014e9a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8014e9e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8014ea0:	68bb      	ldr	r3, [r7, #8]
 8014ea2:	011b      	lsls	r3, r3, #4
 8014ea4:	693a      	ldr	r2, [r7, #16]
 8014ea6:	4313      	orrs	r3, r2
 8014ea8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8014eaa:	68fb      	ldr	r3, [r7, #12]
 8014eac:	697a      	ldr	r2, [r7, #20]
 8014eae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8014eb0:	68fb      	ldr	r3, [r7, #12]
 8014eb2:	693a      	ldr	r2, [r7, #16]
 8014eb4:	621a      	str	r2, [r3, #32]
}
 8014eb6:	bf00      	nop
 8014eb8:	371c      	adds	r7, #28
 8014eba:	46bd      	mov	sp, r7
 8014ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ec0:	4770      	bx	lr

08014ec2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8014ec2:	b480      	push	{r7}
 8014ec4:	b085      	sub	sp, #20
 8014ec6:	af00      	add	r7, sp, #0
 8014ec8:	6078      	str	r0, [r7, #4]
 8014eca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8014ecc:	687b      	ldr	r3, [r7, #4]
 8014ece:	689b      	ldr	r3, [r3, #8]
 8014ed0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8014ed2:	68fb      	ldr	r3, [r7, #12]
 8014ed4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014ed8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8014eda:	683a      	ldr	r2, [r7, #0]
 8014edc:	68fb      	ldr	r3, [r7, #12]
 8014ede:	4313      	orrs	r3, r2
 8014ee0:	f043 0307 	orr.w	r3, r3, #7
 8014ee4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8014ee6:	687b      	ldr	r3, [r7, #4]
 8014ee8:	68fa      	ldr	r2, [r7, #12]
 8014eea:	609a      	str	r2, [r3, #8]
}
 8014eec:	bf00      	nop
 8014eee:	3714      	adds	r7, #20
 8014ef0:	46bd      	mov	sp, r7
 8014ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ef6:	4770      	bx	lr

08014ef8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8014ef8:	b480      	push	{r7}
 8014efa:	b087      	sub	sp, #28
 8014efc:	af00      	add	r7, sp, #0
 8014efe:	60f8      	str	r0, [r7, #12]
 8014f00:	60b9      	str	r1, [r7, #8]
 8014f02:	607a      	str	r2, [r7, #4]
 8014f04:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8014f06:	68fb      	ldr	r3, [r7, #12]
 8014f08:	689b      	ldr	r3, [r3, #8]
 8014f0a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8014f0c:	697b      	ldr	r3, [r7, #20]
 8014f0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8014f12:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8014f14:	683b      	ldr	r3, [r7, #0]
 8014f16:	021a      	lsls	r2, r3, #8
 8014f18:	687b      	ldr	r3, [r7, #4]
 8014f1a:	431a      	orrs	r2, r3
 8014f1c:	68bb      	ldr	r3, [r7, #8]
 8014f1e:	4313      	orrs	r3, r2
 8014f20:	697a      	ldr	r2, [r7, #20]
 8014f22:	4313      	orrs	r3, r2
 8014f24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8014f26:	68fb      	ldr	r3, [r7, #12]
 8014f28:	697a      	ldr	r2, [r7, #20]
 8014f2a:	609a      	str	r2, [r3, #8]
}
 8014f2c:	bf00      	nop
 8014f2e:	371c      	adds	r7, #28
 8014f30:	46bd      	mov	sp, r7
 8014f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f36:	4770      	bx	lr

08014f38 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8014f38:	b480      	push	{r7}
 8014f3a:	b087      	sub	sp, #28
 8014f3c:	af00      	add	r7, sp, #0
 8014f3e:	60f8      	str	r0, [r7, #12]
 8014f40:	60b9      	str	r1, [r7, #8]
 8014f42:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8014f44:	68bb      	ldr	r3, [r7, #8]
 8014f46:	f003 031f 	and.w	r3, r3, #31
 8014f4a:	2201      	movs	r2, #1
 8014f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8014f50:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8014f52:	68fb      	ldr	r3, [r7, #12]
 8014f54:	6a1a      	ldr	r2, [r3, #32]
 8014f56:	697b      	ldr	r3, [r7, #20]
 8014f58:	43db      	mvns	r3, r3
 8014f5a:	401a      	ands	r2, r3
 8014f5c:	68fb      	ldr	r3, [r7, #12]
 8014f5e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8014f60:	68fb      	ldr	r3, [r7, #12]
 8014f62:	6a1a      	ldr	r2, [r3, #32]
 8014f64:	68bb      	ldr	r3, [r7, #8]
 8014f66:	f003 031f 	and.w	r3, r3, #31
 8014f6a:	6879      	ldr	r1, [r7, #4]
 8014f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8014f70:	431a      	orrs	r2, r3
 8014f72:	68fb      	ldr	r3, [r7, #12]
 8014f74:	621a      	str	r2, [r3, #32]
}
 8014f76:	bf00      	nop
 8014f78:	371c      	adds	r7, #28
 8014f7a:	46bd      	mov	sp, r7
 8014f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f80:	4770      	bx	lr
	...

08014f84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8014f84:	b480      	push	{r7}
 8014f86:	b085      	sub	sp, #20
 8014f88:	af00      	add	r7, sp, #0
 8014f8a:	6078      	str	r0, [r7, #4]
 8014f8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8014f8e:	687b      	ldr	r3, [r7, #4]
 8014f90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8014f94:	2b01      	cmp	r3, #1
 8014f96:	d101      	bne.n	8014f9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8014f98:	2302      	movs	r3, #2
 8014f9a:	e050      	b.n	801503e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8014f9c:	687b      	ldr	r3, [r7, #4]
 8014f9e:	2201      	movs	r2, #1
 8014fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8014fa4:	687b      	ldr	r3, [r7, #4]
 8014fa6:	2202      	movs	r2, #2
 8014fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8014fac:	687b      	ldr	r3, [r7, #4]
 8014fae:	681b      	ldr	r3, [r3, #0]
 8014fb0:	685b      	ldr	r3, [r3, #4]
 8014fb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8014fb4:	687b      	ldr	r3, [r7, #4]
 8014fb6:	681b      	ldr	r3, [r3, #0]
 8014fb8:	689b      	ldr	r3, [r3, #8]
 8014fba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8014fbc:	68fb      	ldr	r3, [r7, #12]
 8014fbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014fc2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8014fc4:	683b      	ldr	r3, [r7, #0]
 8014fc6:	681b      	ldr	r3, [r3, #0]
 8014fc8:	68fa      	ldr	r2, [r7, #12]
 8014fca:	4313      	orrs	r3, r2
 8014fcc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8014fce:	687b      	ldr	r3, [r7, #4]
 8014fd0:	681b      	ldr	r3, [r3, #0]
 8014fd2:	68fa      	ldr	r2, [r7, #12]
 8014fd4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8014fd6:	687b      	ldr	r3, [r7, #4]
 8014fd8:	681b      	ldr	r3, [r3, #0]
 8014fda:	4a1c      	ldr	r2, [pc, #112]	; (801504c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8014fdc:	4293      	cmp	r3, r2
 8014fde:	d018      	beq.n	8015012 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8014fe0:	687b      	ldr	r3, [r7, #4]
 8014fe2:	681b      	ldr	r3, [r3, #0]
 8014fe4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014fe8:	d013      	beq.n	8015012 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8014fea:	687b      	ldr	r3, [r7, #4]
 8014fec:	681b      	ldr	r3, [r3, #0]
 8014fee:	4a18      	ldr	r2, [pc, #96]	; (8015050 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8014ff0:	4293      	cmp	r3, r2
 8014ff2:	d00e      	beq.n	8015012 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8014ff4:	687b      	ldr	r3, [r7, #4]
 8014ff6:	681b      	ldr	r3, [r3, #0]
 8014ff8:	4a16      	ldr	r2, [pc, #88]	; (8015054 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8014ffa:	4293      	cmp	r3, r2
 8014ffc:	d009      	beq.n	8015012 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8014ffe:	687b      	ldr	r3, [r7, #4]
 8015000:	681b      	ldr	r3, [r3, #0]
 8015002:	4a15      	ldr	r2, [pc, #84]	; (8015058 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8015004:	4293      	cmp	r3, r2
 8015006:	d004      	beq.n	8015012 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8015008:	687b      	ldr	r3, [r7, #4]
 801500a:	681b      	ldr	r3, [r3, #0]
 801500c:	4a13      	ldr	r2, [pc, #76]	; (801505c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 801500e:	4293      	cmp	r3, r2
 8015010:	d10c      	bne.n	801502c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8015012:	68bb      	ldr	r3, [r7, #8]
 8015014:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8015018:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801501a:	683b      	ldr	r3, [r7, #0]
 801501c:	685b      	ldr	r3, [r3, #4]
 801501e:	68ba      	ldr	r2, [r7, #8]
 8015020:	4313      	orrs	r3, r2
 8015022:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8015024:	687b      	ldr	r3, [r7, #4]
 8015026:	681b      	ldr	r3, [r3, #0]
 8015028:	68ba      	ldr	r2, [r7, #8]
 801502a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801502c:	687b      	ldr	r3, [r7, #4]
 801502e:	2201      	movs	r2, #1
 8015030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8015034:	687b      	ldr	r3, [r7, #4]
 8015036:	2200      	movs	r2, #0
 8015038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801503c:	2300      	movs	r3, #0
}
 801503e:	4618      	mov	r0, r3
 8015040:	3714      	adds	r7, #20
 8015042:	46bd      	mov	sp, r7
 8015044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015048:	4770      	bx	lr
 801504a:	bf00      	nop
 801504c:	40010000 	.word	0x40010000
 8015050:	40000400 	.word	0x40000400
 8015054:	40000800 	.word	0x40000800
 8015058:	40000c00 	.word	0x40000c00
 801505c:	40014000 	.word	0x40014000

08015060 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8015060:	b084      	sub	sp, #16
 8015062:	b580      	push	{r7, lr}
 8015064:	b084      	sub	sp, #16
 8015066:	af00      	add	r7, sp, #0
 8015068:	6078      	str	r0, [r7, #4]
 801506a:	f107 001c 	add.w	r0, r7, #28
 801506e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8015072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015074:	2b01      	cmp	r3, #1
 8015076:	d122      	bne.n	80150be <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8015078:	687b      	ldr	r3, [r7, #4]
 801507a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801507c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8015080:	687b      	ldr	r3, [r7, #4]
 8015082:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8015084:	687b      	ldr	r3, [r7, #4]
 8015086:	68db      	ldr	r3, [r3, #12]
 8015088:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 801508c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015090:	687a      	ldr	r2, [r7, #4]
 8015092:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8015094:	687b      	ldr	r3, [r7, #4]
 8015096:	68db      	ldr	r3, [r3, #12]
 8015098:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801509c:	687b      	ldr	r3, [r7, #4]
 801509e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80150a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80150a2:	2b01      	cmp	r3, #1
 80150a4:	d105      	bne.n	80150b2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80150a6:	687b      	ldr	r3, [r7, #4]
 80150a8:	68db      	ldr	r3, [r3, #12]
 80150aa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80150ae:	687b      	ldr	r3, [r7, #4]
 80150b0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80150b2:	6878      	ldr	r0, [r7, #4]
 80150b4:	f000 f94a 	bl	801534c <USB_CoreReset>
 80150b8:	4603      	mov	r3, r0
 80150ba:	73fb      	strb	r3, [r7, #15]
 80150bc:	e01a      	b.n	80150f4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80150be:	687b      	ldr	r3, [r7, #4]
 80150c0:	68db      	ldr	r3, [r3, #12]
 80150c2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80150c6:	687b      	ldr	r3, [r7, #4]
 80150c8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80150ca:	6878      	ldr	r0, [r7, #4]
 80150cc:	f000 f93e 	bl	801534c <USB_CoreReset>
 80150d0:	4603      	mov	r3, r0
 80150d2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80150d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80150d6:	2b00      	cmp	r3, #0
 80150d8:	d106      	bne.n	80150e8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80150da:	687b      	ldr	r3, [r7, #4]
 80150dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80150de:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80150e2:	687b      	ldr	r3, [r7, #4]
 80150e4:	639a      	str	r2, [r3, #56]	; 0x38
 80150e6:	e005      	b.n	80150f4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80150e8:	687b      	ldr	r3, [r7, #4]
 80150ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80150ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80150f0:	687b      	ldr	r3, [r7, #4]
 80150f2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80150f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80150f6:	2b01      	cmp	r3, #1
 80150f8:	d10b      	bne.n	8015112 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80150fa:	687b      	ldr	r3, [r7, #4]
 80150fc:	689b      	ldr	r3, [r3, #8]
 80150fe:	f043 0206 	orr.w	r2, r3, #6
 8015102:	687b      	ldr	r3, [r7, #4]
 8015104:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8015106:	687b      	ldr	r3, [r7, #4]
 8015108:	689b      	ldr	r3, [r3, #8]
 801510a:	f043 0220 	orr.w	r2, r3, #32
 801510e:	687b      	ldr	r3, [r7, #4]
 8015110:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8015112:	7bfb      	ldrb	r3, [r7, #15]
}
 8015114:	4618      	mov	r0, r3
 8015116:	3710      	adds	r7, #16
 8015118:	46bd      	mov	sp, r7
 801511a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801511e:	b004      	add	sp, #16
 8015120:	4770      	bx	lr

08015122 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8015122:	b480      	push	{r7}
 8015124:	b083      	sub	sp, #12
 8015126:	af00      	add	r7, sp, #0
 8015128:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 801512a:	687b      	ldr	r3, [r7, #4]
 801512c:	689b      	ldr	r3, [r3, #8]
 801512e:	f043 0201 	orr.w	r2, r3, #1
 8015132:	687b      	ldr	r3, [r7, #4]
 8015134:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8015136:	2300      	movs	r3, #0
}
 8015138:	4618      	mov	r0, r3
 801513a:	370c      	adds	r7, #12
 801513c:	46bd      	mov	sp, r7
 801513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015142:	4770      	bx	lr

08015144 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8015144:	b480      	push	{r7}
 8015146:	b083      	sub	sp, #12
 8015148:	af00      	add	r7, sp, #0
 801514a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 801514c:	687b      	ldr	r3, [r7, #4]
 801514e:	689b      	ldr	r3, [r3, #8]
 8015150:	f023 0201 	bic.w	r2, r3, #1
 8015154:	687b      	ldr	r3, [r7, #4]
 8015156:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8015158:	2300      	movs	r3, #0
}
 801515a:	4618      	mov	r0, r3
 801515c:	370c      	adds	r7, #12
 801515e:	46bd      	mov	sp, r7
 8015160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015164:	4770      	bx	lr

08015166 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8015166:	b580      	push	{r7, lr}
 8015168:	b082      	sub	sp, #8
 801516a:	af00      	add	r7, sp, #0
 801516c:	6078      	str	r0, [r7, #4]
 801516e:	460b      	mov	r3, r1
 8015170:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8015172:	687b      	ldr	r3, [r7, #4]
 8015174:	68db      	ldr	r3, [r3, #12]
 8015176:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 801517a:	687b      	ldr	r3, [r7, #4]
 801517c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 801517e:	78fb      	ldrb	r3, [r7, #3]
 8015180:	2b01      	cmp	r3, #1
 8015182:	d106      	bne.n	8015192 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8015184:	687b      	ldr	r3, [r7, #4]
 8015186:	68db      	ldr	r3, [r3, #12]
 8015188:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 801518c:	687b      	ldr	r3, [r7, #4]
 801518e:	60da      	str	r2, [r3, #12]
 8015190:	e00b      	b.n	80151aa <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8015192:	78fb      	ldrb	r3, [r7, #3]
 8015194:	2b00      	cmp	r3, #0
 8015196:	d106      	bne.n	80151a6 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8015198:	687b      	ldr	r3, [r7, #4]
 801519a:	68db      	ldr	r3, [r3, #12]
 801519c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80151a0:	687b      	ldr	r3, [r7, #4]
 80151a2:	60da      	str	r2, [r3, #12]
 80151a4:	e001      	b.n	80151aa <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80151a6:	2301      	movs	r3, #1
 80151a8:	e003      	b.n	80151b2 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80151aa:	2032      	movs	r0, #50	; 0x32
 80151ac:	f7fb fc76 	bl	8010a9c <HAL_Delay>

  return HAL_OK;
 80151b0:	2300      	movs	r3, #0
}
 80151b2:	4618      	mov	r0, r3
 80151b4:	3708      	adds	r7, #8
 80151b6:	46bd      	mov	sp, r7
 80151b8:	bd80      	pop	{r7, pc}
	...

080151bc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80151bc:	b480      	push	{r7}
 80151be:	b085      	sub	sp, #20
 80151c0:	af00      	add	r7, sp, #0
 80151c2:	6078      	str	r0, [r7, #4]
 80151c4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80151c6:	2300      	movs	r3, #0
 80151c8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80151ca:	683b      	ldr	r3, [r7, #0]
 80151cc:	019b      	lsls	r3, r3, #6
 80151ce:	f043 0220 	orr.w	r2, r3, #32
 80151d2:	687b      	ldr	r3, [r7, #4]
 80151d4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80151d6:	68fb      	ldr	r3, [r7, #12]
 80151d8:	3301      	adds	r3, #1
 80151da:	60fb      	str	r3, [r7, #12]
 80151dc:	68fb      	ldr	r3, [r7, #12]
 80151de:	4a09      	ldr	r2, [pc, #36]	; (8015204 <USB_FlushTxFifo+0x48>)
 80151e0:	4293      	cmp	r3, r2
 80151e2:	d901      	bls.n	80151e8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80151e4:	2303      	movs	r3, #3
 80151e6:	e006      	b.n	80151f6 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80151e8:	687b      	ldr	r3, [r7, #4]
 80151ea:	691b      	ldr	r3, [r3, #16]
 80151ec:	f003 0320 	and.w	r3, r3, #32
 80151f0:	2b20      	cmp	r3, #32
 80151f2:	d0f0      	beq.n	80151d6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80151f4:	2300      	movs	r3, #0
}
 80151f6:	4618      	mov	r0, r3
 80151f8:	3714      	adds	r7, #20
 80151fa:	46bd      	mov	sp, r7
 80151fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015200:	4770      	bx	lr
 8015202:	bf00      	nop
 8015204:	00030d40 	.word	0x00030d40

08015208 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8015208:	b480      	push	{r7}
 801520a:	b085      	sub	sp, #20
 801520c:	af00      	add	r7, sp, #0
 801520e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8015210:	2300      	movs	r3, #0
 8015212:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8015214:	687b      	ldr	r3, [r7, #4]
 8015216:	2210      	movs	r2, #16
 8015218:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801521a:	68fb      	ldr	r3, [r7, #12]
 801521c:	3301      	adds	r3, #1
 801521e:	60fb      	str	r3, [r7, #12]
 8015220:	68fb      	ldr	r3, [r7, #12]
 8015222:	4a09      	ldr	r2, [pc, #36]	; (8015248 <USB_FlushRxFifo+0x40>)
 8015224:	4293      	cmp	r3, r2
 8015226:	d901      	bls.n	801522c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8015228:	2303      	movs	r3, #3
 801522a:	e006      	b.n	801523a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 801522c:	687b      	ldr	r3, [r7, #4]
 801522e:	691b      	ldr	r3, [r3, #16]
 8015230:	f003 0310 	and.w	r3, r3, #16
 8015234:	2b10      	cmp	r3, #16
 8015236:	d0f0      	beq.n	801521a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8015238:	2300      	movs	r3, #0
}
 801523a:	4618      	mov	r0, r3
 801523c:	3714      	adds	r7, #20
 801523e:	46bd      	mov	sp, r7
 8015240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015244:	4770      	bx	lr
 8015246:	bf00      	nop
 8015248:	00030d40 	.word	0x00030d40

0801524c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 801524c:	b480      	push	{r7}
 801524e:	b089      	sub	sp, #36	; 0x24
 8015250:	af00      	add	r7, sp, #0
 8015252:	60f8      	str	r0, [r7, #12]
 8015254:	60b9      	str	r1, [r7, #8]
 8015256:	4611      	mov	r1, r2
 8015258:	461a      	mov	r2, r3
 801525a:	460b      	mov	r3, r1
 801525c:	71fb      	strb	r3, [r7, #7]
 801525e:	4613      	mov	r3, r2
 8015260:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015262:	68fb      	ldr	r3, [r7, #12]
 8015264:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8015266:	68bb      	ldr	r3, [r7, #8]
 8015268:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 801526a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801526e:	2b00      	cmp	r3, #0
 8015270:	d11a      	bne.n	80152a8 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8015272:	88bb      	ldrh	r3, [r7, #4]
 8015274:	3303      	adds	r3, #3
 8015276:	089b      	lsrs	r3, r3, #2
 8015278:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 801527a:	2300      	movs	r3, #0
 801527c:	61bb      	str	r3, [r7, #24]
 801527e:	e00f      	b.n	80152a0 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8015280:	79fb      	ldrb	r3, [r7, #7]
 8015282:	031a      	lsls	r2, r3, #12
 8015284:	697b      	ldr	r3, [r7, #20]
 8015286:	4413      	add	r3, r2
 8015288:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801528c:	461a      	mov	r2, r3
 801528e:	69fb      	ldr	r3, [r7, #28]
 8015290:	681b      	ldr	r3, [r3, #0]
 8015292:	6013      	str	r3, [r2, #0]
      pSrc++;
 8015294:	69fb      	ldr	r3, [r7, #28]
 8015296:	3304      	adds	r3, #4
 8015298:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 801529a:	69bb      	ldr	r3, [r7, #24]
 801529c:	3301      	adds	r3, #1
 801529e:	61bb      	str	r3, [r7, #24]
 80152a0:	69ba      	ldr	r2, [r7, #24]
 80152a2:	693b      	ldr	r3, [r7, #16]
 80152a4:	429a      	cmp	r2, r3
 80152a6:	d3eb      	bcc.n	8015280 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80152a8:	2300      	movs	r3, #0
}
 80152aa:	4618      	mov	r0, r3
 80152ac:	3724      	adds	r7, #36	; 0x24
 80152ae:	46bd      	mov	sp, r7
 80152b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152b4:	4770      	bx	lr

080152b6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80152b6:	b480      	push	{r7}
 80152b8:	b089      	sub	sp, #36	; 0x24
 80152ba:	af00      	add	r7, sp, #0
 80152bc:	60f8      	str	r0, [r7, #12]
 80152be:	60b9      	str	r1, [r7, #8]
 80152c0:	4613      	mov	r3, r2
 80152c2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80152c4:	68fb      	ldr	r3, [r7, #12]
 80152c6:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80152c8:	68bb      	ldr	r3, [r7, #8]
 80152ca:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80152cc:	88fb      	ldrh	r3, [r7, #6]
 80152ce:	3303      	adds	r3, #3
 80152d0:	089b      	lsrs	r3, r3, #2
 80152d2:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80152d4:	2300      	movs	r3, #0
 80152d6:	61bb      	str	r3, [r7, #24]
 80152d8:	e00b      	b.n	80152f2 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80152da:	697b      	ldr	r3, [r7, #20]
 80152dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80152e0:	681a      	ldr	r2, [r3, #0]
 80152e2:	69fb      	ldr	r3, [r7, #28]
 80152e4:	601a      	str	r2, [r3, #0]
    pDest++;
 80152e6:	69fb      	ldr	r3, [r7, #28]
 80152e8:	3304      	adds	r3, #4
 80152ea:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80152ec:	69bb      	ldr	r3, [r7, #24]
 80152ee:	3301      	adds	r3, #1
 80152f0:	61bb      	str	r3, [r7, #24]
 80152f2:	69ba      	ldr	r2, [r7, #24]
 80152f4:	693b      	ldr	r3, [r7, #16]
 80152f6:	429a      	cmp	r2, r3
 80152f8:	d3ef      	bcc.n	80152da <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80152fa:	69fb      	ldr	r3, [r7, #28]
}
 80152fc:	4618      	mov	r0, r3
 80152fe:	3724      	adds	r7, #36	; 0x24
 8015300:	46bd      	mov	sp, r7
 8015302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015306:	4770      	bx	lr

08015308 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8015308:	b480      	push	{r7}
 801530a:	b085      	sub	sp, #20
 801530c:	af00      	add	r7, sp, #0
 801530e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8015310:	687b      	ldr	r3, [r7, #4]
 8015312:	695b      	ldr	r3, [r3, #20]
 8015314:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8015316:	687b      	ldr	r3, [r7, #4]
 8015318:	699b      	ldr	r3, [r3, #24]
 801531a:	68fa      	ldr	r2, [r7, #12]
 801531c:	4013      	ands	r3, r2
 801531e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8015320:	68fb      	ldr	r3, [r7, #12]
}
 8015322:	4618      	mov	r0, r3
 8015324:	3714      	adds	r7, #20
 8015326:	46bd      	mov	sp, r7
 8015328:	f85d 7b04 	ldr.w	r7, [sp], #4
 801532c:	4770      	bx	lr

0801532e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 801532e:	b480      	push	{r7}
 8015330:	b083      	sub	sp, #12
 8015332:	af00      	add	r7, sp, #0
 8015334:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8015336:	687b      	ldr	r3, [r7, #4]
 8015338:	695b      	ldr	r3, [r3, #20]
 801533a:	f003 0301 	and.w	r3, r3, #1
}
 801533e:	4618      	mov	r0, r3
 8015340:	370c      	adds	r7, #12
 8015342:	46bd      	mov	sp, r7
 8015344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015348:	4770      	bx	lr
	...

0801534c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 801534c:	b480      	push	{r7}
 801534e:	b085      	sub	sp, #20
 8015350:	af00      	add	r7, sp, #0
 8015352:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8015354:	2300      	movs	r3, #0
 8015356:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8015358:	68fb      	ldr	r3, [r7, #12]
 801535a:	3301      	adds	r3, #1
 801535c:	60fb      	str	r3, [r7, #12]
 801535e:	68fb      	ldr	r3, [r7, #12]
 8015360:	4a13      	ldr	r2, [pc, #76]	; (80153b0 <USB_CoreReset+0x64>)
 8015362:	4293      	cmp	r3, r2
 8015364:	d901      	bls.n	801536a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8015366:	2303      	movs	r3, #3
 8015368:	e01b      	b.n	80153a2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801536a:	687b      	ldr	r3, [r7, #4]
 801536c:	691b      	ldr	r3, [r3, #16]
 801536e:	2b00      	cmp	r3, #0
 8015370:	daf2      	bge.n	8015358 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8015372:	2300      	movs	r3, #0
 8015374:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8015376:	687b      	ldr	r3, [r7, #4]
 8015378:	691b      	ldr	r3, [r3, #16]
 801537a:	f043 0201 	orr.w	r2, r3, #1
 801537e:	687b      	ldr	r3, [r7, #4]
 8015380:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8015382:	68fb      	ldr	r3, [r7, #12]
 8015384:	3301      	adds	r3, #1
 8015386:	60fb      	str	r3, [r7, #12]
 8015388:	68fb      	ldr	r3, [r7, #12]
 801538a:	4a09      	ldr	r2, [pc, #36]	; (80153b0 <USB_CoreReset+0x64>)
 801538c:	4293      	cmp	r3, r2
 801538e:	d901      	bls.n	8015394 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8015390:	2303      	movs	r3, #3
 8015392:	e006      	b.n	80153a2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8015394:	687b      	ldr	r3, [r7, #4]
 8015396:	691b      	ldr	r3, [r3, #16]
 8015398:	f003 0301 	and.w	r3, r3, #1
 801539c:	2b01      	cmp	r3, #1
 801539e:	d0f0      	beq.n	8015382 <USB_CoreReset+0x36>

  return HAL_OK;
 80153a0:	2300      	movs	r3, #0
}
 80153a2:	4618      	mov	r0, r3
 80153a4:	3714      	adds	r7, #20
 80153a6:	46bd      	mov	sp, r7
 80153a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153ac:	4770      	bx	lr
 80153ae:	bf00      	nop
 80153b0:	00030d40 	.word	0x00030d40

080153b4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80153b4:	b084      	sub	sp, #16
 80153b6:	b580      	push	{r7, lr}
 80153b8:	b084      	sub	sp, #16
 80153ba:	af00      	add	r7, sp, #0
 80153bc:	6078      	str	r0, [r7, #4]
 80153be:	f107 001c 	add.w	r0, r7, #28
 80153c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80153c6:	687b      	ldr	r3, [r7, #4]
 80153c8:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80153ca:	68bb      	ldr	r3, [r7, #8]
 80153cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80153d0:	461a      	mov	r2, r3
 80153d2:	2300      	movs	r3, #0
 80153d4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80153d6:	687b      	ldr	r3, [r7, #4]
 80153d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80153da:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80153de:	687b      	ldr	r3, [r7, #4]
 80153e0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80153e2:	687b      	ldr	r3, [r7, #4]
 80153e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80153e6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80153ea:	687b      	ldr	r3, [r7, #4]
 80153ec:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80153ee:	687b      	ldr	r3, [r7, #4]
 80153f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80153f2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80153f6:	687b      	ldr	r3, [r7, #4]
 80153f8:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80153fa:	687b      	ldr	r3, [r7, #4]
 80153fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80153fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015402:	2b00      	cmp	r3, #0
 8015404:	d018      	beq.n	8015438 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8015406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015408:	2b01      	cmp	r3, #1
 801540a:	d10a      	bne.n	8015422 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 801540c:	68bb      	ldr	r3, [r7, #8]
 801540e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8015412:	681b      	ldr	r3, [r3, #0]
 8015414:	68ba      	ldr	r2, [r7, #8]
 8015416:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801541a:	f043 0304 	orr.w	r3, r3, #4
 801541e:	6013      	str	r3, [r2, #0]
 8015420:	e014      	b.n	801544c <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8015422:	68bb      	ldr	r3, [r7, #8]
 8015424:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8015428:	681b      	ldr	r3, [r3, #0]
 801542a:	68ba      	ldr	r2, [r7, #8]
 801542c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8015430:	f023 0304 	bic.w	r3, r3, #4
 8015434:	6013      	str	r3, [r2, #0]
 8015436:	e009      	b.n	801544c <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8015438:	68bb      	ldr	r3, [r7, #8]
 801543a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801543e:	681b      	ldr	r3, [r3, #0]
 8015440:	68ba      	ldr	r2, [r7, #8]
 8015442:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8015446:	f023 0304 	bic.w	r3, r3, #4
 801544a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 801544c:	2110      	movs	r1, #16
 801544e:	6878      	ldr	r0, [r7, #4]
 8015450:	f7ff feb4 	bl	80151bc <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8015454:	6878      	ldr	r0, [r7, #4]
 8015456:	f7ff fed7 	bl	8015208 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 801545a:	2300      	movs	r3, #0
 801545c:	60fb      	str	r3, [r7, #12]
 801545e:	e015      	b.n	801548c <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8015460:	68fb      	ldr	r3, [r7, #12]
 8015462:	015a      	lsls	r2, r3, #5
 8015464:	68bb      	ldr	r3, [r7, #8]
 8015466:	4413      	add	r3, r2
 8015468:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801546c:	461a      	mov	r2, r3
 801546e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015472:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8015474:	68fb      	ldr	r3, [r7, #12]
 8015476:	015a      	lsls	r2, r3, #5
 8015478:	68bb      	ldr	r3, [r7, #8]
 801547a:	4413      	add	r3, r2
 801547c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015480:	461a      	mov	r2, r3
 8015482:	2300      	movs	r3, #0
 8015484:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8015486:	68fb      	ldr	r3, [r7, #12]
 8015488:	3301      	adds	r3, #1
 801548a:	60fb      	str	r3, [r7, #12]
 801548c:	6a3b      	ldr	r3, [r7, #32]
 801548e:	68fa      	ldr	r2, [r7, #12]
 8015490:	429a      	cmp	r2, r3
 8015492:	d3e5      	bcc.n	8015460 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8015494:	2101      	movs	r1, #1
 8015496:	6878      	ldr	r0, [r7, #4]
 8015498:	f000 f882 	bl	80155a0 <USB_DriveVbus>

  HAL_Delay(200U);
 801549c:	20c8      	movs	r0, #200	; 0xc8
 801549e:	f7fb fafd 	bl	8010a9c <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80154a2:	687b      	ldr	r3, [r7, #4]
 80154a4:	2200      	movs	r2, #0
 80154a6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80154a8:	687b      	ldr	r3, [r7, #4]
 80154aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80154ae:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80154b0:	687b      	ldr	r3, [r7, #4]
 80154b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80154b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80154b8:	2b00      	cmp	r3, #0
 80154ba:	d00b      	beq.n	80154d4 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80154bc:	687b      	ldr	r3, [r7, #4]
 80154be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80154c2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80154c4:	687b      	ldr	r3, [r7, #4]
 80154c6:	4a14      	ldr	r2, [pc, #80]	; (8015518 <USB_HostInit+0x164>)
 80154c8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80154ca:	687b      	ldr	r3, [r7, #4]
 80154cc:	4a13      	ldr	r2, [pc, #76]	; (801551c <USB_HostInit+0x168>)
 80154ce:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80154d2:	e009      	b.n	80154e8 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80154d4:	687b      	ldr	r3, [r7, #4]
 80154d6:	2280      	movs	r2, #128	; 0x80
 80154d8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80154da:	687b      	ldr	r3, [r7, #4]
 80154dc:	4a10      	ldr	r2, [pc, #64]	; (8015520 <USB_HostInit+0x16c>)
 80154de:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80154e0:	687b      	ldr	r3, [r7, #4]
 80154e2:	4a10      	ldr	r2, [pc, #64]	; (8015524 <USB_HostInit+0x170>)
 80154e4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80154e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80154ea:	2b00      	cmp	r3, #0
 80154ec:	d105      	bne.n	80154fa <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80154ee:	687b      	ldr	r3, [r7, #4]
 80154f0:	699b      	ldr	r3, [r3, #24]
 80154f2:	f043 0210 	orr.w	r2, r3, #16
 80154f6:	687b      	ldr	r3, [r7, #4]
 80154f8:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80154fa:	687b      	ldr	r3, [r7, #4]
 80154fc:	699a      	ldr	r2, [r3, #24]
 80154fe:	4b0a      	ldr	r3, [pc, #40]	; (8015528 <USB_HostInit+0x174>)
 8015500:	4313      	orrs	r3, r2
 8015502:	687a      	ldr	r2, [r7, #4]
 8015504:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8015506:	2300      	movs	r3, #0
}
 8015508:	4618      	mov	r0, r3
 801550a:	3710      	adds	r7, #16
 801550c:	46bd      	mov	sp, r7
 801550e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8015512:	b004      	add	sp, #16
 8015514:	4770      	bx	lr
 8015516:	bf00      	nop
 8015518:	01000200 	.word	0x01000200
 801551c:	00e00300 	.word	0x00e00300
 8015520:	00600080 	.word	0x00600080
 8015524:	004000e0 	.word	0x004000e0
 8015528:	a3200008 	.word	0xa3200008

0801552c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 801552c:	b480      	push	{r7}
 801552e:	b085      	sub	sp, #20
 8015530:	af00      	add	r7, sp, #0
 8015532:	6078      	str	r0, [r7, #4]
 8015534:	460b      	mov	r3, r1
 8015536:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015538:	687b      	ldr	r3, [r7, #4]
 801553a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 801553c:	68fb      	ldr	r3, [r7, #12]
 801553e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8015542:	681b      	ldr	r3, [r3, #0]
 8015544:	68fa      	ldr	r2, [r7, #12]
 8015546:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801554a:	f023 0303 	bic.w	r3, r3, #3
 801554e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8015550:	68fb      	ldr	r3, [r7, #12]
 8015552:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8015556:	681a      	ldr	r2, [r3, #0]
 8015558:	78fb      	ldrb	r3, [r7, #3]
 801555a:	f003 0303 	and.w	r3, r3, #3
 801555e:	68f9      	ldr	r1, [r7, #12]
 8015560:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8015564:	4313      	orrs	r3, r2
 8015566:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8015568:	78fb      	ldrb	r3, [r7, #3]
 801556a:	2b01      	cmp	r3, #1
 801556c:	d107      	bne.n	801557e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 801556e:	68fb      	ldr	r3, [r7, #12]
 8015570:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8015574:	461a      	mov	r2, r3
 8015576:	f64b 3380 	movw	r3, #48000	; 0xbb80
 801557a:	6053      	str	r3, [r2, #4]
 801557c:	e009      	b.n	8015592 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 801557e:	78fb      	ldrb	r3, [r7, #3]
 8015580:	2b02      	cmp	r3, #2
 8015582:	d106      	bne.n	8015592 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8015584:	68fb      	ldr	r3, [r7, #12]
 8015586:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801558a:	461a      	mov	r2, r3
 801558c:	f241 7370 	movw	r3, #6000	; 0x1770
 8015590:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8015592:	2300      	movs	r3, #0
}
 8015594:	4618      	mov	r0, r3
 8015596:	3714      	adds	r7, #20
 8015598:	46bd      	mov	sp, r7
 801559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801559e:	4770      	bx	lr

080155a0 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80155a0:	b480      	push	{r7}
 80155a2:	b085      	sub	sp, #20
 80155a4:	af00      	add	r7, sp, #0
 80155a6:	6078      	str	r0, [r7, #4]
 80155a8:	460b      	mov	r3, r1
 80155aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80155ac:	687b      	ldr	r3, [r7, #4]
 80155ae:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80155b0:	2300      	movs	r3, #0
 80155b2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80155b4:	68fb      	ldr	r3, [r7, #12]
 80155b6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80155ba:	681b      	ldr	r3, [r3, #0]
 80155bc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80155be:	68bb      	ldr	r3, [r7, #8]
 80155c0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80155c4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80155c6:	68bb      	ldr	r3, [r7, #8]
 80155c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80155cc:	2b00      	cmp	r3, #0
 80155ce:	d109      	bne.n	80155e4 <USB_DriveVbus+0x44>
 80155d0:	78fb      	ldrb	r3, [r7, #3]
 80155d2:	2b01      	cmp	r3, #1
 80155d4:	d106      	bne.n	80155e4 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80155d6:	68bb      	ldr	r3, [r7, #8]
 80155d8:	68fa      	ldr	r2, [r7, #12]
 80155da:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80155de:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80155e2:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80155e4:	68bb      	ldr	r3, [r7, #8]
 80155e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80155ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80155ee:	d109      	bne.n	8015604 <USB_DriveVbus+0x64>
 80155f0:	78fb      	ldrb	r3, [r7, #3]
 80155f2:	2b00      	cmp	r3, #0
 80155f4:	d106      	bne.n	8015604 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80155f6:	68bb      	ldr	r3, [r7, #8]
 80155f8:	68fa      	ldr	r2, [r7, #12]
 80155fa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80155fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015602:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8015604:	2300      	movs	r3, #0
}
 8015606:	4618      	mov	r0, r3
 8015608:	3714      	adds	r7, #20
 801560a:	46bd      	mov	sp, r7
 801560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015610:	4770      	bx	lr

08015612 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8015612:	b480      	push	{r7}
 8015614:	b085      	sub	sp, #20
 8015616:	af00      	add	r7, sp, #0
 8015618:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801561a:	687b      	ldr	r3, [r7, #4]
 801561c:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 801561e:	68fb      	ldr	r3, [r7, #12]
 8015620:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8015624:	689b      	ldr	r3, [r3, #8]
 8015626:	b29b      	uxth	r3, r3
}
 8015628:	4618      	mov	r0, r3
 801562a:	3714      	adds	r7, #20
 801562c:	46bd      	mov	sp, r7
 801562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015632:	4770      	bx	lr

08015634 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8015634:	b480      	push	{r7}
 8015636:	b087      	sub	sp, #28
 8015638:	af00      	add	r7, sp, #0
 801563a:	6078      	str	r0, [r7, #4]
 801563c:	4608      	mov	r0, r1
 801563e:	4611      	mov	r1, r2
 8015640:	461a      	mov	r2, r3
 8015642:	4603      	mov	r3, r0
 8015644:	70fb      	strb	r3, [r7, #3]
 8015646:	460b      	mov	r3, r1
 8015648:	70bb      	strb	r3, [r7, #2]
 801564a:	4613      	mov	r3, r2
 801564c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 801564e:	2300      	movs	r3, #0
 8015650:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015652:	687b      	ldr	r3, [r7, #4]
 8015654:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8015656:	78fb      	ldrb	r3, [r7, #3]
 8015658:	015a      	lsls	r2, r3, #5
 801565a:	68bb      	ldr	r3, [r7, #8]
 801565c:	4413      	add	r3, r2
 801565e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015662:	461a      	mov	r2, r3
 8015664:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015668:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 801566a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801566e:	2b03      	cmp	r3, #3
 8015670:	d87e      	bhi.n	8015770 <USB_HC_Init+0x13c>
 8015672:	a201      	add	r2, pc, #4	; (adr r2, 8015678 <USB_HC_Init+0x44>)
 8015674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015678:	08015689 	.word	0x08015689
 801567c:	08015733 	.word	0x08015733
 8015680:	08015689 	.word	0x08015689
 8015684:	080156f5 	.word	0x080156f5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8015688:	78fb      	ldrb	r3, [r7, #3]
 801568a:	015a      	lsls	r2, r3, #5
 801568c:	68bb      	ldr	r3, [r7, #8]
 801568e:	4413      	add	r3, r2
 8015690:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015694:	461a      	mov	r2, r3
 8015696:	f240 439d 	movw	r3, #1181	; 0x49d
 801569a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 801569c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80156a0:	2b00      	cmp	r3, #0
 80156a2:	da10      	bge.n	80156c6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80156a4:	78fb      	ldrb	r3, [r7, #3]
 80156a6:	015a      	lsls	r2, r3, #5
 80156a8:	68bb      	ldr	r3, [r7, #8]
 80156aa:	4413      	add	r3, r2
 80156ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80156b0:	68db      	ldr	r3, [r3, #12]
 80156b2:	78fa      	ldrb	r2, [r7, #3]
 80156b4:	0151      	lsls	r1, r2, #5
 80156b6:	68ba      	ldr	r2, [r7, #8]
 80156b8:	440a      	add	r2, r1
 80156ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80156be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80156c2:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 80156c4:	e057      	b.n	8015776 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80156c6:	687b      	ldr	r3, [r7, #4]
 80156c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80156ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80156ce:	2b00      	cmp	r3, #0
 80156d0:	d051      	beq.n	8015776 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80156d2:	78fb      	ldrb	r3, [r7, #3]
 80156d4:	015a      	lsls	r2, r3, #5
 80156d6:	68bb      	ldr	r3, [r7, #8]
 80156d8:	4413      	add	r3, r2
 80156da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80156de:	68db      	ldr	r3, [r3, #12]
 80156e0:	78fa      	ldrb	r2, [r7, #3]
 80156e2:	0151      	lsls	r1, r2, #5
 80156e4:	68ba      	ldr	r2, [r7, #8]
 80156e6:	440a      	add	r2, r1
 80156e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80156ec:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80156f0:	60d3      	str	r3, [r2, #12]
      break;
 80156f2:	e040      	b.n	8015776 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80156f4:	78fb      	ldrb	r3, [r7, #3]
 80156f6:	015a      	lsls	r2, r3, #5
 80156f8:	68bb      	ldr	r3, [r7, #8]
 80156fa:	4413      	add	r3, r2
 80156fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015700:	461a      	mov	r2, r3
 8015702:	f240 639d 	movw	r3, #1693	; 0x69d
 8015706:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8015708:	f997 3002 	ldrsb.w	r3, [r7, #2]
 801570c:	2b00      	cmp	r3, #0
 801570e:	da34      	bge.n	801577a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8015710:	78fb      	ldrb	r3, [r7, #3]
 8015712:	015a      	lsls	r2, r3, #5
 8015714:	68bb      	ldr	r3, [r7, #8]
 8015716:	4413      	add	r3, r2
 8015718:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801571c:	68db      	ldr	r3, [r3, #12]
 801571e:	78fa      	ldrb	r2, [r7, #3]
 8015720:	0151      	lsls	r1, r2, #5
 8015722:	68ba      	ldr	r2, [r7, #8]
 8015724:	440a      	add	r2, r1
 8015726:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801572a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801572e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8015730:	e023      	b.n	801577a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8015732:	78fb      	ldrb	r3, [r7, #3]
 8015734:	015a      	lsls	r2, r3, #5
 8015736:	68bb      	ldr	r3, [r7, #8]
 8015738:	4413      	add	r3, r2
 801573a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801573e:	461a      	mov	r2, r3
 8015740:	f240 2325 	movw	r3, #549	; 0x225
 8015744:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8015746:	f997 3002 	ldrsb.w	r3, [r7, #2]
 801574a:	2b00      	cmp	r3, #0
 801574c:	da17      	bge.n	801577e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 801574e:	78fb      	ldrb	r3, [r7, #3]
 8015750:	015a      	lsls	r2, r3, #5
 8015752:	68bb      	ldr	r3, [r7, #8]
 8015754:	4413      	add	r3, r2
 8015756:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801575a:	68db      	ldr	r3, [r3, #12]
 801575c:	78fa      	ldrb	r2, [r7, #3]
 801575e:	0151      	lsls	r1, r2, #5
 8015760:	68ba      	ldr	r2, [r7, #8]
 8015762:	440a      	add	r2, r1
 8015764:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8015768:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 801576c:	60d3      	str	r3, [r2, #12]
      }
      break;
 801576e:	e006      	b.n	801577e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8015770:	2301      	movs	r3, #1
 8015772:	75fb      	strb	r3, [r7, #23]
      break;
 8015774:	e004      	b.n	8015780 <USB_HC_Init+0x14c>
      break;
 8015776:	bf00      	nop
 8015778:	e002      	b.n	8015780 <USB_HC_Init+0x14c>
      break;
 801577a:	bf00      	nop
 801577c:	e000      	b.n	8015780 <USB_HC_Init+0x14c>
      break;
 801577e:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8015780:	68bb      	ldr	r3, [r7, #8]
 8015782:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8015786:	699a      	ldr	r2, [r3, #24]
 8015788:	78fb      	ldrb	r3, [r7, #3]
 801578a:	f003 030f 	and.w	r3, r3, #15
 801578e:	2101      	movs	r1, #1
 8015790:	fa01 f303 	lsl.w	r3, r1, r3
 8015794:	68b9      	ldr	r1, [r7, #8]
 8015796:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 801579a:	4313      	orrs	r3, r2
 801579c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 801579e:	687b      	ldr	r3, [r7, #4]
 80157a0:	699b      	ldr	r3, [r3, #24]
 80157a2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80157a6:	687b      	ldr	r3, [r7, #4]
 80157a8:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80157aa:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80157ae:	2b00      	cmp	r3, #0
 80157b0:	da03      	bge.n	80157ba <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80157b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80157b6:	613b      	str	r3, [r7, #16]
 80157b8:	e001      	b.n	80157be <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 80157ba:	2300      	movs	r3, #0
 80157bc:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 80157be:	f897 3020 	ldrb.w	r3, [r7, #32]
 80157c2:	2b02      	cmp	r3, #2
 80157c4:	d103      	bne.n	80157ce <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80157c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80157ca:	60fb      	str	r3, [r7, #12]
 80157cc:	e001      	b.n	80157d2 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80157ce:	2300      	movs	r3, #0
 80157d0:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80157d2:	787b      	ldrb	r3, [r7, #1]
 80157d4:	059b      	lsls	r3, r3, #22
 80157d6:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80157da:	78bb      	ldrb	r3, [r7, #2]
 80157dc:	02db      	lsls	r3, r3, #11
 80157de:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80157e2:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80157e4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80157e8:	049b      	lsls	r3, r3, #18
 80157ea:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80157ee:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80157f0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80157f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80157f6:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80157f8:	693b      	ldr	r3, [r7, #16]
 80157fa:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80157fc:	78fb      	ldrb	r3, [r7, #3]
 80157fe:	0159      	lsls	r1, r3, #5
 8015800:	68bb      	ldr	r3, [r7, #8]
 8015802:	440b      	add	r3, r1
 8015804:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015808:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 801580a:	68fb      	ldr	r3, [r7, #12]
 801580c:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 801580e:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8015810:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015814:	2b03      	cmp	r3, #3
 8015816:	d10f      	bne.n	8015838 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8015818:	78fb      	ldrb	r3, [r7, #3]
 801581a:	015a      	lsls	r2, r3, #5
 801581c:	68bb      	ldr	r3, [r7, #8]
 801581e:	4413      	add	r3, r2
 8015820:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015824:	681b      	ldr	r3, [r3, #0]
 8015826:	78fa      	ldrb	r2, [r7, #3]
 8015828:	0151      	lsls	r1, r2, #5
 801582a:	68ba      	ldr	r2, [r7, #8]
 801582c:	440a      	add	r2, r1
 801582e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8015832:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8015836:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8015838:	7dfb      	ldrb	r3, [r7, #23]
}
 801583a:	4618      	mov	r0, r3
 801583c:	371c      	adds	r7, #28
 801583e:	46bd      	mov	sp, r7
 8015840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015844:	4770      	bx	lr
 8015846:	bf00      	nop

08015848 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8015848:	b580      	push	{r7, lr}
 801584a:	b08c      	sub	sp, #48	; 0x30
 801584c:	af02      	add	r7, sp, #8
 801584e:	60f8      	str	r0, [r7, #12]
 8015850:	60b9      	str	r1, [r7, #8]
 8015852:	4613      	mov	r3, r2
 8015854:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015856:	68fb      	ldr	r3, [r7, #12]
 8015858:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 801585a:	68bb      	ldr	r3, [r7, #8]
 801585c:	785b      	ldrb	r3, [r3, #1]
 801585e:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8015860:	f44f 7380 	mov.w	r3, #256	; 0x100
 8015864:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8015866:	68fb      	ldr	r3, [r7, #12]
 8015868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801586a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801586e:	2b00      	cmp	r3, #0
 8015870:	d028      	beq.n	80158c4 <USB_HC_StartXfer+0x7c>
 8015872:	68bb      	ldr	r3, [r7, #8]
 8015874:	791b      	ldrb	r3, [r3, #4]
 8015876:	2b00      	cmp	r3, #0
 8015878:	d124      	bne.n	80158c4 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 801587a:	79fb      	ldrb	r3, [r7, #7]
 801587c:	2b00      	cmp	r3, #0
 801587e:	d10b      	bne.n	8015898 <USB_HC_StartXfer+0x50>
 8015880:	68bb      	ldr	r3, [r7, #8]
 8015882:	795b      	ldrb	r3, [r3, #5]
 8015884:	2b01      	cmp	r3, #1
 8015886:	d107      	bne.n	8015898 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8015888:	68bb      	ldr	r3, [r7, #8]
 801588a:	785b      	ldrb	r3, [r3, #1]
 801588c:	4619      	mov	r1, r3
 801588e:	68f8      	ldr	r0, [r7, #12]
 8015890:	f000 fa30 	bl	8015cf4 <USB_DoPing>
      return HAL_OK;
 8015894:	2300      	movs	r3, #0
 8015896:	e114      	b.n	8015ac2 <USB_HC_StartXfer+0x27a>
    }
    else if (dma == 1U)
 8015898:	79fb      	ldrb	r3, [r7, #7]
 801589a:	2b01      	cmp	r3, #1
 801589c:	d112      	bne.n	80158c4 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 801589e:	69fb      	ldr	r3, [r7, #28]
 80158a0:	015a      	lsls	r2, r3, #5
 80158a2:	6a3b      	ldr	r3, [r7, #32]
 80158a4:	4413      	add	r3, r2
 80158a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80158aa:	68db      	ldr	r3, [r3, #12]
 80158ac:	69fa      	ldr	r2, [r7, #28]
 80158ae:	0151      	lsls	r1, r2, #5
 80158b0:	6a3a      	ldr	r2, [r7, #32]
 80158b2:	440a      	add	r2, r1
 80158b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80158b8:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80158bc:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 80158be:	68bb      	ldr	r3, [r7, #8]
 80158c0:	2200      	movs	r2, #0
 80158c2:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80158c4:	68bb      	ldr	r3, [r7, #8]
 80158c6:	691b      	ldr	r3, [r3, #16]
 80158c8:	2b00      	cmp	r3, #0
 80158ca:	d018      	beq.n	80158fe <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80158cc:	68bb      	ldr	r3, [r7, #8]
 80158ce:	691b      	ldr	r3, [r3, #16]
 80158d0:	68ba      	ldr	r2, [r7, #8]
 80158d2:	8912      	ldrh	r2, [r2, #8]
 80158d4:	4413      	add	r3, r2
 80158d6:	3b01      	subs	r3, #1
 80158d8:	68ba      	ldr	r2, [r7, #8]
 80158da:	8912      	ldrh	r2, [r2, #8]
 80158dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80158e0:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80158e2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80158e4:	8b7b      	ldrh	r3, [r7, #26]
 80158e6:	429a      	cmp	r2, r3
 80158e8:	d90b      	bls.n	8015902 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 80158ea:	8b7b      	ldrh	r3, [r7, #26]
 80158ec:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80158ee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80158f0:	68ba      	ldr	r2, [r7, #8]
 80158f2:	8912      	ldrh	r2, [r2, #8]
 80158f4:	fb02 f203 	mul.w	r2, r2, r3
 80158f8:	68bb      	ldr	r3, [r7, #8]
 80158fa:	611a      	str	r2, [r3, #16]
 80158fc:	e001      	b.n	8015902 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 80158fe:	2301      	movs	r3, #1
 8015900:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8015902:	68bb      	ldr	r3, [r7, #8]
 8015904:	78db      	ldrb	r3, [r3, #3]
 8015906:	2b00      	cmp	r3, #0
 8015908:	d006      	beq.n	8015918 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 801590a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801590c:	68ba      	ldr	r2, [r7, #8]
 801590e:	8912      	ldrh	r2, [r2, #8]
 8015910:	fb02 f203 	mul.w	r2, r2, r3
 8015914:	68bb      	ldr	r3, [r7, #8]
 8015916:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8015918:	68bb      	ldr	r3, [r7, #8]
 801591a:	691b      	ldr	r3, [r3, #16]
 801591c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8015920:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8015922:	04d9      	lsls	r1, r3, #19
 8015924:	4b69      	ldr	r3, [pc, #420]	; (8015acc <USB_HC_StartXfer+0x284>)
 8015926:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8015928:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 801592a:	68bb      	ldr	r3, [r7, #8]
 801592c:	7a9b      	ldrb	r3, [r3, #10]
 801592e:	075b      	lsls	r3, r3, #29
 8015930:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8015934:	69f9      	ldr	r1, [r7, #28]
 8015936:	0148      	lsls	r0, r1, #5
 8015938:	6a39      	ldr	r1, [r7, #32]
 801593a:	4401      	add	r1, r0
 801593c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8015940:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8015942:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8015944:	79fb      	ldrb	r3, [r7, #7]
 8015946:	2b00      	cmp	r3, #0
 8015948:	d009      	beq.n	801595e <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 801594a:	68bb      	ldr	r3, [r7, #8]
 801594c:	68d9      	ldr	r1, [r3, #12]
 801594e:	69fb      	ldr	r3, [r7, #28]
 8015950:	015a      	lsls	r2, r3, #5
 8015952:	6a3b      	ldr	r3, [r7, #32]
 8015954:	4413      	add	r3, r2
 8015956:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801595a:	460a      	mov	r2, r1
 801595c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 801595e:	6a3b      	ldr	r3, [r7, #32]
 8015960:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8015964:	689b      	ldr	r3, [r3, #8]
 8015966:	f003 0301 	and.w	r3, r3, #1
 801596a:	2b00      	cmp	r3, #0
 801596c:	bf0c      	ite	eq
 801596e:	2301      	moveq	r3, #1
 8015970:	2300      	movne	r3, #0
 8015972:	b2db      	uxtb	r3, r3
 8015974:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8015976:	69fb      	ldr	r3, [r7, #28]
 8015978:	015a      	lsls	r2, r3, #5
 801597a:	6a3b      	ldr	r3, [r7, #32]
 801597c:	4413      	add	r3, r2
 801597e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015982:	681b      	ldr	r3, [r3, #0]
 8015984:	69fa      	ldr	r2, [r7, #28]
 8015986:	0151      	lsls	r1, r2, #5
 8015988:	6a3a      	ldr	r2, [r7, #32]
 801598a:	440a      	add	r2, r1
 801598c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8015990:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8015994:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8015996:	69fb      	ldr	r3, [r7, #28]
 8015998:	015a      	lsls	r2, r3, #5
 801599a:	6a3b      	ldr	r3, [r7, #32]
 801599c:	4413      	add	r3, r2
 801599e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80159a2:	681a      	ldr	r2, [r3, #0]
 80159a4:	7e7b      	ldrb	r3, [r7, #25]
 80159a6:	075b      	lsls	r3, r3, #29
 80159a8:	69f9      	ldr	r1, [r7, #28]
 80159aa:	0148      	lsls	r0, r1, #5
 80159ac:	6a39      	ldr	r1, [r7, #32]
 80159ae:	4401      	add	r1, r0
 80159b0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80159b4:	4313      	orrs	r3, r2
 80159b6:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80159b8:	69fb      	ldr	r3, [r7, #28]
 80159ba:	015a      	lsls	r2, r3, #5
 80159bc:	6a3b      	ldr	r3, [r7, #32]
 80159be:	4413      	add	r3, r2
 80159c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80159c4:	681b      	ldr	r3, [r3, #0]
 80159c6:	4a42      	ldr	r2, [pc, #264]	; (8015ad0 <USB_HC_StartXfer+0x288>)
 80159c8:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80159ca:	4b41      	ldr	r3, [pc, #260]	; (8015ad0 <USB_HC_StartXfer+0x288>)
 80159cc:	681b      	ldr	r3, [r3, #0]
 80159ce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80159d2:	4a3f      	ldr	r2, [pc, #252]	; (8015ad0 <USB_HC_StartXfer+0x288>)
 80159d4:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80159d6:	68bb      	ldr	r3, [r7, #8]
 80159d8:	78db      	ldrb	r3, [r3, #3]
 80159da:	2b00      	cmp	r3, #0
 80159dc:	d006      	beq.n	80159ec <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80159de:	4b3c      	ldr	r3, [pc, #240]	; (8015ad0 <USB_HC_StartXfer+0x288>)
 80159e0:	681b      	ldr	r3, [r3, #0]
 80159e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80159e6:	4a3a      	ldr	r2, [pc, #232]	; (8015ad0 <USB_HC_StartXfer+0x288>)
 80159e8:	6013      	str	r3, [r2, #0]
 80159ea:	e005      	b.n	80159f8 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80159ec:	4b38      	ldr	r3, [pc, #224]	; (8015ad0 <USB_HC_StartXfer+0x288>)
 80159ee:	681b      	ldr	r3, [r3, #0]
 80159f0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80159f4:	4a36      	ldr	r2, [pc, #216]	; (8015ad0 <USB_HC_StartXfer+0x288>)
 80159f6:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80159f8:	4b35      	ldr	r3, [pc, #212]	; (8015ad0 <USB_HC_StartXfer+0x288>)
 80159fa:	681b      	ldr	r3, [r3, #0]
 80159fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8015a00:	4a33      	ldr	r2, [pc, #204]	; (8015ad0 <USB_HC_StartXfer+0x288>)
 8015a02:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8015a04:	69fb      	ldr	r3, [r7, #28]
 8015a06:	015a      	lsls	r2, r3, #5
 8015a08:	6a3b      	ldr	r3, [r7, #32]
 8015a0a:	4413      	add	r3, r2
 8015a0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015a10:	461a      	mov	r2, r3
 8015a12:	4b2f      	ldr	r3, [pc, #188]	; (8015ad0 <USB_HC_StartXfer+0x288>)
 8015a14:	681b      	ldr	r3, [r3, #0]
 8015a16:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8015a18:	79fb      	ldrb	r3, [r7, #7]
 8015a1a:	2b00      	cmp	r3, #0
 8015a1c:	d001      	beq.n	8015a22 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8015a1e:	2300      	movs	r3, #0
 8015a20:	e04f      	b.n	8015ac2 <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8015a22:	68bb      	ldr	r3, [r7, #8]
 8015a24:	78db      	ldrb	r3, [r3, #3]
 8015a26:	2b00      	cmp	r3, #0
 8015a28:	d14a      	bne.n	8015ac0 <USB_HC_StartXfer+0x278>
 8015a2a:	68bb      	ldr	r3, [r7, #8]
 8015a2c:	691b      	ldr	r3, [r3, #16]
 8015a2e:	2b00      	cmp	r3, #0
 8015a30:	d046      	beq.n	8015ac0 <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 8015a32:	68bb      	ldr	r3, [r7, #8]
 8015a34:	79db      	ldrb	r3, [r3, #7]
 8015a36:	2b03      	cmp	r3, #3
 8015a38:	d830      	bhi.n	8015a9c <USB_HC_StartXfer+0x254>
 8015a3a:	a201      	add	r2, pc, #4	; (adr r2, 8015a40 <USB_HC_StartXfer+0x1f8>)
 8015a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015a40:	08015a51 	.word	0x08015a51
 8015a44:	08015a75 	.word	0x08015a75
 8015a48:	08015a51 	.word	0x08015a51
 8015a4c:	08015a75 	.word	0x08015a75
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8015a50:	68bb      	ldr	r3, [r7, #8]
 8015a52:	691b      	ldr	r3, [r3, #16]
 8015a54:	3303      	adds	r3, #3
 8015a56:	089b      	lsrs	r3, r3, #2
 8015a58:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8015a5a:	8afa      	ldrh	r2, [r7, #22]
 8015a5c:	68fb      	ldr	r3, [r7, #12]
 8015a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015a60:	b29b      	uxth	r3, r3
 8015a62:	429a      	cmp	r2, r3
 8015a64:	d91c      	bls.n	8015aa0 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8015a66:	68fb      	ldr	r3, [r7, #12]
 8015a68:	699b      	ldr	r3, [r3, #24]
 8015a6a:	f043 0220 	orr.w	r2, r3, #32
 8015a6e:	68fb      	ldr	r3, [r7, #12]
 8015a70:	619a      	str	r2, [r3, #24]
        }
        break;
 8015a72:	e015      	b.n	8015aa0 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8015a74:	68bb      	ldr	r3, [r7, #8]
 8015a76:	691b      	ldr	r3, [r3, #16]
 8015a78:	3303      	adds	r3, #3
 8015a7a:	089b      	lsrs	r3, r3, #2
 8015a7c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8015a7e:	8afa      	ldrh	r2, [r7, #22]
 8015a80:	6a3b      	ldr	r3, [r7, #32]
 8015a82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8015a86:	691b      	ldr	r3, [r3, #16]
 8015a88:	b29b      	uxth	r3, r3
 8015a8a:	429a      	cmp	r2, r3
 8015a8c:	d90a      	bls.n	8015aa4 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8015a8e:	68fb      	ldr	r3, [r7, #12]
 8015a90:	699b      	ldr	r3, [r3, #24]
 8015a92:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8015a96:	68fb      	ldr	r3, [r7, #12]
 8015a98:	619a      	str	r2, [r3, #24]
        }
        break;
 8015a9a:	e003      	b.n	8015aa4 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8015a9c:	bf00      	nop
 8015a9e:	e002      	b.n	8015aa6 <USB_HC_StartXfer+0x25e>
        break;
 8015aa0:	bf00      	nop
 8015aa2:	e000      	b.n	8015aa6 <USB_HC_StartXfer+0x25e>
        break;
 8015aa4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8015aa6:	68bb      	ldr	r3, [r7, #8]
 8015aa8:	68d9      	ldr	r1, [r3, #12]
 8015aaa:	68bb      	ldr	r3, [r7, #8]
 8015aac:	785a      	ldrb	r2, [r3, #1]
 8015aae:	68bb      	ldr	r3, [r7, #8]
 8015ab0:	691b      	ldr	r3, [r3, #16]
 8015ab2:	b298      	uxth	r0, r3
 8015ab4:	2300      	movs	r3, #0
 8015ab6:	9300      	str	r3, [sp, #0]
 8015ab8:	4603      	mov	r3, r0
 8015aba:	68f8      	ldr	r0, [r7, #12]
 8015abc:	f7ff fbc6 	bl	801524c <USB_WritePacket>
  }

  return HAL_OK;
 8015ac0:	2300      	movs	r3, #0
}
 8015ac2:	4618      	mov	r0, r3
 8015ac4:	3728      	adds	r7, #40	; 0x28
 8015ac6:	46bd      	mov	sp, r7
 8015ac8:	bd80      	pop	{r7, pc}
 8015aca:	bf00      	nop
 8015acc:	1ff80000 	.word	0x1ff80000
 8015ad0:	2000029c 	.word	0x2000029c

08015ad4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8015ad4:	b480      	push	{r7}
 8015ad6:	b085      	sub	sp, #20
 8015ad8:	af00      	add	r7, sp, #0
 8015ada:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015adc:	687b      	ldr	r3, [r7, #4]
 8015ade:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8015ae0:	68fb      	ldr	r3, [r7, #12]
 8015ae2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8015ae6:	695b      	ldr	r3, [r3, #20]
 8015ae8:	b29b      	uxth	r3, r3
}
 8015aea:	4618      	mov	r0, r3
 8015aec:	3714      	adds	r7, #20
 8015aee:	46bd      	mov	sp, r7
 8015af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015af4:	4770      	bx	lr

08015af6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8015af6:	b480      	push	{r7}
 8015af8:	b087      	sub	sp, #28
 8015afa:	af00      	add	r7, sp, #0
 8015afc:	6078      	str	r0, [r7, #4]
 8015afe:	460b      	mov	r3, r1
 8015b00:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015b02:	687b      	ldr	r3, [r7, #4]
 8015b04:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8015b06:	78fb      	ldrb	r3, [r7, #3]
 8015b08:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8015b0a:	2300      	movs	r3, #0
 8015b0c:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8015b0e:	68fb      	ldr	r3, [r7, #12]
 8015b10:	015a      	lsls	r2, r3, #5
 8015b12:	693b      	ldr	r3, [r7, #16]
 8015b14:	4413      	add	r3, r2
 8015b16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015b1a:	681b      	ldr	r3, [r3, #0]
 8015b1c:	0c9b      	lsrs	r3, r3, #18
 8015b1e:	f003 0303 	and.w	r3, r3, #3
 8015b22:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8015b24:	68bb      	ldr	r3, [r7, #8]
 8015b26:	2b00      	cmp	r3, #0
 8015b28:	d002      	beq.n	8015b30 <USB_HC_Halt+0x3a>
 8015b2a:	68bb      	ldr	r3, [r7, #8]
 8015b2c:	2b02      	cmp	r3, #2
 8015b2e:	d16c      	bne.n	8015c0a <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8015b30:	68fb      	ldr	r3, [r7, #12]
 8015b32:	015a      	lsls	r2, r3, #5
 8015b34:	693b      	ldr	r3, [r7, #16]
 8015b36:	4413      	add	r3, r2
 8015b38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015b3c:	681b      	ldr	r3, [r3, #0]
 8015b3e:	68fa      	ldr	r2, [r7, #12]
 8015b40:	0151      	lsls	r1, r2, #5
 8015b42:	693a      	ldr	r2, [r7, #16]
 8015b44:	440a      	add	r2, r1
 8015b46:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8015b4a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8015b4e:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8015b50:	687b      	ldr	r3, [r7, #4]
 8015b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015b54:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8015b58:	2b00      	cmp	r3, #0
 8015b5a:	d143      	bne.n	8015be4 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8015b5c:	68fb      	ldr	r3, [r7, #12]
 8015b5e:	015a      	lsls	r2, r3, #5
 8015b60:	693b      	ldr	r3, [r7, #16]
 8015b62:	4413      	add	r3, r2
 8015b64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015b68:	681b      	ldr	r3, [r3, #0]
 8015b6a:	68fa      	ldr	r2, [r7, #12]
 8015b6c:	0151      	lsls	r1, r2, #5
 8015b6e:	693a      	ldr	r2, [r7, #16]
 8015b70:	440a      	add	r2, r1
 8015b72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8015b76:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015b7a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8015b7c:	68fb      	ldr	r3, [r7, #12]
 8015b7e:	015a      	lsls	r2, r3, #5
 8015b80:	693b      	ldr	r3, [r7, #16]
 8015b82:	4413      	add	r3, r2
 8015b84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015b88:	681b      	ldr	r3, [r3, #0]
 8015b8a:	68fa      	ldr	r2, [r7, #12]
 8015b8c:	0151      	lsls	r1, r2, #5
 8015b8e:	693a      	ldr	r2, [r7, #16]
 8015b90:	440a      	add	r2, r1
 8015b92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8015b96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8015b9a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8015b9c:	68fb      	ldr	r3, [r7, #12]
 8015b9e:	015a      	lsls	r2, r3, #5
 8015ba0:	693b      	ldr	r3, [r7, #16]
 8015ba2:	4413      	add	r3, r2
 8015ba4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015ba8:	681b      	ldr	r3, [r3, #0]
 8015baa:	68fa      	ldr	r2, [r7, #12]
 8015bac:	0151      	lsls	r1, r2, #5
 8015bae:	693a      	ldr	r2, [r7, #16]
 8015bb0:	440a      	add	r2, r1
 8015bb2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8015bb6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8015bba:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8015bbc:	697b      	ldr	r3, [r7, #20]
 8015bbe:	3301      	adds	r3, #1
 8015bc0:	617b      	str	r3, [r7, #20]
 8015bc2:	697b      	ldr	r3, [r7, #20]
 8015bc4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8015bc8:	d81d      	bhi.n	8015c06 <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8015bca:	68fb      	ldr	r3, [r7, #12]
 8015bcc:	015a      	lsls	r2, r3, #5
 8015bce:	693b      	ldr	r3, [r7, #16]
 8015bd0:	4413      	add	r3, r2
 8015bd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015bd6:	681b      	ldr	r3, [r3, #0]
 8015bd8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8015bdc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8015be0:	d0ec      	beq.n	8015bbc <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8015be2:	e080      	b.n	8015ce6 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8015be4:	68fb      	ldr	r3, [r7, #12]
 8015be6:	015a      	lsls	r2, r3, #5
 8015be8:	693b      	ldr	r3, [r7, #16]
 8015bea:	4413      	add	r3, r2
 8015bec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015bf0:	681b      	ldr	r3, [r3, #0]
 8015bf2:	68fa      	ldr	r2, [r7, #12]
 8015bf4:	0151      	lsls	r1, r2, #5
 8015bf6:	693a      	ldr	r2, [r7, #16]
 8015bf8:	440a      	add	r2, r1
 8015bfa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8015bfe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8015c02:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8015c04:	e06f      	b.n	8015ce6 <USB_HC_Halt+0x1f0>
          break;
 8015c06:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8015c08:	e06d      	b.n	8015ce6 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8015c0a:	68fb      	ldr	r3, [r7, #12]
 8015c0c:	015a      	lsls	r2, r3, #5
 8015c0e:	693b      	ldr	r3, [r7, #16]
 8015c10:	4413      	add	r3, r2
 8015c12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015c16:	681b      	ldr	r3, [r3, #0]
 8015c18:	68fa      	ldr	r2, [r7, #12]
 8015c1a:	0151      	lsls	r1, r2, #5
 8015c1c:	693a      	ldr	r2, [r7, #16]
 8015c1e:	440a      	add	r2, r1
 8015c20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8015c24:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8015c28:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8015c2a:	693b      	ldr	r3, [r7, #16]
 8015c2c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8015c30:	691b      	ldr	r3, [r3, #16]
 8015c32:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8015c36:	2b00      	cmp	r3, #0
 8015c38:	d143      	bne.n	8015cc2 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8015c3a:	68fb      	ldr	r3, [r7, #12]
 8015c3c:	015a      	lsls	r2, r3, #5
 8015c3e:	693b      	ldr	r3, [r7, #16]
 8015c40:	4413      	add	r3, r2
 8015c42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015c46:	681b      	ldr	r3, [r3, #0]
 8015c48:	68fa      	ldr	r2, [r7, #12]
 8015c4a:	0151      	lsls	r1, r2, #5
 8015c4c:	693a      	ldr	r2, [r7, #16]
 8015c4e:	440a      	add	r2, r1
 8015c50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8015c54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015c58:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8015c5a:	68fb      	ldr	r3, [r7, #12]
 8015c5c:	015a      	lsls	r2, r3, #5
 8015c5e:	693b      	ldr	r3, [r7, #16]
 8015c60:	4413      	add	r3, r2
 8015c62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015c66:	681b      	ldr	r3, [r3, #0]
 8015c68:	68fa      	ldr	r2, [r7, #12]
 8015c6a:	0151      	lsls	r1, r2, #5
 8015c6c:	693a      	ldr	r2, [r7, #16]
 8015c6e:	440a      	add	r2, r1
 8015c70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8015c74:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8015c78:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8015c7a:	68fb      	ldr	r3, [r7, #12]
 8015c7c:	015a      	lsls	r2, r3, #5
 8015c7e:	693b      	ldr	r3, [r7, #16]
 8015c80:	4413      	add	r3, r2
 8015c82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015c86:	681b      	ldr	r3, [r3, #0]
 8015c88:	68fa      	ldr	r2, [r7, #12]
 8015c8a:	0151      	lsls	r1, r2, #5
 8015c8c:	693a      	ldr	r2, [r7, #16]
 8015c8e:	440a      	add	r2, r1
 8015c90:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8015c94:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8015c98:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8015c9a:	697b      	ldr	r3, [r7, #20]
 8015c9c:	3301      	adds	r3, #1
 8015c9e:	617b      	str	r3, [r7, #20]
 8015ca0:	697b      	ldr	r3, [r7, #20]
 8015ca2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8015ca6:	d81d      	bhi.n	8015ce4 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8015ca8:	68fb      	ldr	r3, [r7, #12]
 8015caa:	015a      	lsls	r2, r3, #5
 8015cac:	693b      	ldr	r3, [r7, #16]
 8015cae:	4413      	add	r3, r2
 8015cb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015cb4:	681b      	ldr	r3, [r3, #0]
 8015cb6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8015cba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8015cbe:	d0ec      	beq.n	8015c9a <USB_HC_Halt+0x1a4>
 8015cc0:	e011      	b.n	8015ce6 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8015cc2:	68fb      	ldr	r3, [r7, #12]
 8015cc4:	015a      	lsls	r2, r3, #5
 8015cc6:	693b      	ldr	r3, [r7, #16]
 8015cc8:	4413      	add	r3, r2
 8015cca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015cce:	681b      	ldr	r3, [r3, #0]
 8015cd0:	68fa      	ldr	r2, [r7, #12]
 8015cd2:	0151      	lsls	r1, r2, #5
 8015cd4:	693a      	ldr	r2, [r7, #16]
 8015cd6:	440a      	add	r2, r1
 8015cd8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8015cdc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8015ce0:	6013      	str	r3, [r2, #0]
 8015ce2:	e000      	b.n	8015ce6 <USB_HC_Halt+0x1f0>
          break;
 8015ce4:	bf00      	nop
    }
  }

  return HAL_OK;
 8015ce6:	2300      	movs	r3, #0
}
 8015ce8:	4618      	mov	r0, r3
 8015cea:	371c      	adds	r7, #28
 8015cec:	46bd      	mov	sp, r7
 8015cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cf2:	4770      	bx	lr

08015cf4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8015cf4:	b480      	push	{r7}
 8015cf6:	b087      	sub	sp, #28
 8015cf8:	af00      	add	r7, sp, #0
 8015cfa:	6078      	str	r0, [r7, #4]
 8015cfc:	460b      	mov	r3, r1
 8015cfe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015d00:	687b      	ldr	r3, [r7, #4]
 8015d02:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8015d04:	78fb      	ldrb	r3, [r7, #3]
 8015d06:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8015d08:	2301      	movs	r3, #1
 8015d0a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8015d0c:	68fb      	ldr	r3, [r7, #12]
 8015d0e:	04da      	lsls	r2, r3, #19
 8015d10:	4b15      	ldr	r3, [pc, #84]	; (8015d68 <USB_DoPing+0x74>)
 8015d12:	4013      	ands	r3, r2
 8015d14:	693a      	ldr	r2, [r7, #16]
 8015d16:	0151      	lsls	r1, r2, #5
 8015d18:	697a      	ldr	r2, [r7, #20]
 8015d1a:	440a      	add	r2, r1
 8015d1c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8015d20:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8015d24:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8015d26:	693b      	ldr	r3, [r7, #16]
 8015d28:	015a      	lsls	r2, r3, #5
 8015d2a:	697b      	ldr	r3, [r7, #20]
 8015d2c:	4413      	add	r3, r2
 8015d2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015d32:	681b      	ldr	r3, [r3, #0]
 8015d34:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8015d36:	68bb      	ldr	r3, [r7, #8]
 8015d38:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8015d3c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8015d3e:	68bb      	ldr	r3, [r7, #8]
 8015d40:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8015d44:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8015d46:	693b      	ldr	r3, [r7, #16]
 8015d48:	015a      	lsls	r2, r3, #5
 8015d4a:	697b      	ldr	r3, [r7, #20]
 8015d4c:	4413      	add	r3, r2
 8015d4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015d52:	461a      	mov	r2, r3
 8015d54:	68bb      	ldr	r3, [r7, #8]
 8015d56:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8015d58:	2300      	movs	r3, #0
}
 8015d5a:	4618      	mov	r0, r3
 8015d5c:	371c      	adds	r7, #28
 8015d5e:	46bd      	mov	sp, r7
 8015d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d64:	4770      	bx	lr
 8015d66:	bf00      	nop
 8015d68:	1ff80000 	.word	0x1ff80000

08015d6c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8015d6c:	b580      	push	{r7, lr}
 8015d6e:	b086      	sub	sp, #24
 8015d70:	af00      	add	r7, sp, #0
 8015d72:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015d74:	687b      	ldr	r3, [r7, #4]
 8015d76:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8015d78:	2300      	movs	r3, #0
 8015d7a:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8015d7c:	6878      	ldr	r0, [r7, #4]
 8015d7e:	f7ff f9e1 	bl	8015144 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8015d82:	2110      	movs	r1, #16
 8015d84:	6878      	ldr	r0, [r7, #4]
 8015d86:	f7ff fa19 	bl	80151bc <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8015d8a:	6878      	ldr	r0, [r7, #4]
 8015d8c:	f7ff fa3c 	bl	8015208 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8015d90:	2300      	movs	r3, #0
 8015d92:	613b      	str	r3, [r7, #16]
 8015d94:	e01f      	b.n	8015dd6 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8015d96:	693b      	ldr	r3, [r7, #16]
 8015d98:	015a      	lsls	r2, r3, #5
 8015d9a:	68fb      	ldr	r3, [r7, #12]
 8015d9c:	4413      	add	r3, r2
 8015d9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015da2:	681b      	ldr	r3, [r3, #0]
 8015da4:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8015da6:	68bb      	ldr	r3, [r7, #8]
 8015da8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8015dac:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8015dae:	68bb      	ldr	r3, [r7, #8]
 8015db0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015db4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8015db6:	68bb      	ldr	r3, [r7, #8]
 8015db8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8015dbc:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8015dbe:	693b      	ldr	r3, [r7, #16]
 8015dc0:	015a      	lsls	r2, r3, #5
 8015dc2:	68fb      	ldr	r3, [r7, #12]
 8015dc4:	4413      	add	r3, r2
 8015dc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015dca:	461a      	mov	r2, r3
 8015dcc:	68bb      	ldr	r3, [r7, #8]
 8015dce:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8015dd0:	693b      	ldr	r3, [r7, #16]
 8015dd2:	3301      	adds	r3, #1
 8015dd4:	613b      	str	r3, [r7, #16]
 8015dd6:	693b      	ldr	r3, [r7, #16]
 8015dd8:	2b0f      	cmp	r3, #15
 8015dda:	d9dc      	bls.n	8015d96 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8015ddc:	2300      	movs	r3, #0
 8015dde:	613b      	str	r3, [r7, #16]
 8015de0:	e034      	b.n	8015e4c <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8015de2:	693b      	ldr	r3, [r7, #16]
 8015de4:	015a      	lsls	r2, r3, #5
 8015de6:	68fb      	ldr	r3, [r7, #12]
 8015de8:	4413      	add	r3, r2
 8015dea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015dee:	681b      	ldr	r3, [r3, #0]
 8015df0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8015df2:	68bb      	ldr	r3, [r7, #8]
 8015df4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8015df8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8015dfa:	68bb      	ldr	r3, [r7, #8]
 8015dfc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8015e00:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8015e02:	68bb      	ldr	r3, [r7, #8]
 8015e04:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8015e08:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8015e0a:	693b      	ldr	r3, [r7, #16]
 8015e0c:	015a      	lsls	r2, r3, #5
 8015e0e:	68fb      	ldr	r3, [r7, #12]
 8015e10:	4413      	add	r3, r2
 8015e12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015e16:	461a      	mov	r2, r3
 8015e18:	68bb      	ldr	r3, [r7, #8]
 8015e1a:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8015e1c:	697b      	ldr	r3, [r7, #20]
 8015e1e:	3301      	adds	r3, #1
 8015e20:	617b      	str	r3, [r7, #20]
 8015e22:	697b      	ldr	r3, [r7, #20]
 8015e24:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8015e28:	d80c      	bhi.n	8015e44 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8015e2a:	693b      	ldr	r3, [r7, #16]
 8015e2c:	015a      	lsls	r2, r3, #5
 8015e2e:	68fb      	ldr	r3, [r7, #12]
 8015e30:	4413      	add	r3, r2
 8015e32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8015e36:	681b      	ldr	r3, [r3, #0]
 8015e38:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8015e3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8015e40:	d0ec      	beq.n	8015e1c <USB_StopHost+0xb0>
 8015e42:	e000      	b.n	8015e46 <USB_StopHost+0xda>
        break;
 8015e44:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8015e46:	693b      	ldr	r3, [r7, #16]
 8015e48:	3301      	adds	r3, #1
 8015e4a:	613b      	str	r3, [r7, #16]
 8015e4c:	693b      	ldr	r3, [r7, #16]
 8015e4e:	2b0f      	cmp	r3, #15
 8015e50:	d9c7      	bls.n	8015de2 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8015e52:	68fb      	ldr	r3, [r7, #12]
 8015e54:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8015e58:	461a      	mov	r2, r3
 8015e5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015e5e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8015e60:	687b      	ldr	r3, [r7, #4]
 8015e62:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015e66:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8015e68:	6878      	ldr	r0, [r7, #4]
 8015e6a:	f7ff f95a 	bl	8015122 <USB_EnableGlobalInt>

  return HAL_OK;
 8015e6e:	2300      	movs	r3, #0
}
 8015e70:	4618      	mov	r0, r3
 8015e72:	3718      	adds	r7, #24
 8015e74:	46bd      	mov	sp, r7
 8015e76:	bd80      	pop	{r7, pc}

08015e78 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8015e78:	b590      	push	{r4, r7, lr}
 8015e7a:	b089      	sub	sp, #36	; 0x24
 8015e7c:	af04      	add	r7, sp, #16
 8015e7e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8015e80:	2301      	movs	r3, #1
 8015e82:	2202      	movs	r2, #2
 8015e84:	2102      	movs	r1, #2
 8015e86:	6878      	ldr	r0, [r7, #4]
 8015e88:	f000 fc68 	bl	801675c <USBH_FindInterface>
 8015e8c:	4603      	mov	r3, r0
 8015e8e:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8015e90:	7bfb      	ldrb	r3, [r7, #15]
 8015e92:	2bff      	cmp	r3, #255	; 0xff
 8015e94:	d002      	beq.n	8015e9c <USBH_CDC_InterfaceInit+0x24>
 8015e96:	7bfb      	ldrb	r3, [r7, #15]
 8015e98:	2b01      	cmp	r3, #1
 8015e9a:	d901      	bls.n	8015ea0 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8015e9c:	2302      	movs	r3, #2
 8015e9e:	e13d      	b.n	801611c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8015ea0:	7bfb      	ldrb	r3, [r7, #15]
 8015ea2:	4619      	mov	r1, r3
 8015ea4:	6878      	ldr	r0, [r7, #4]
 8015ea6:	f000 fc3d 	bl	8016724 <USBH_SelectInterface>
 8015eaa:	4603      	mov	r3, r0
 8015eac:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8015eae:	7bbb      	ldrb	r3, [r7, #14]
 8015eb0:	2b00      	cmp	r3, #0
 8015eb2:	d001      	beq.n	8015eb8 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8015eb4:	2302      	movs	r3, #2
 8015eb6:	e131      	b.n	801611c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8015eb8:	687b      	ldr	r3, [r7, #4]
 8015eba:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8015ebe:	2050      	movs	r0, #80	; 0x50
 8015ec0:	f001 fdd6 	bl	8017a70 <malloc>
 8015ec4:	4603      	mov	r3, r0
 8015ec6:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8015ec8:	687b      	ldr	r3, [r7, #4]
 8015eca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8015ece:	69db      	ldr	r3, [r3, #28]
 8015ed0:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8015ed2:	68bb      	ldr	r3, [r7, #8]
 8015ed4:	2b00      	cmp	r3, #0
 8015ed6:	d101      	bne.n	8015edc <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8015ed8:	2302      	movs	r3, #2
 8015eda:	e11f      	b.n	801611c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8015edc:	2250      	movs	r2, #80	; 0x50
 8015ede:	2100      	movs	r1, #0
 8015ee0:	68b8      	ldr	r0, [r7, #8]
 8015ee2:	f001 fdf9 	bl	8017ad8 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8015ee6:	7bfb      	ldrb	r3, [r7, #15]
 8015ee8:	687a      	ldr	r2, [r7, #4]
 8015eea:	211a      	movs	r1, #26
 8015eec:	fb01 f303 	mul.w	r3, r1, r3
 8015ef0:	4413      	add	r3, r2
 8015ef2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8015ef6:	781b      	ldrb	r3, [r3, #0]
 8015ef8:	b25b      	sxtb	r3, r3
 8015efa:	2b00      	cmp	r3, #0
 8015efc:	da15      	bge.n	8015f2a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8015efe:	7bfb      	ldrb	r3, [r7, #15]
 8015f00:	687a      	ldr	r2, [r7, #4]
 8015f02:	211a      	movs	r1, #26
 8015f04:	fb01 f303 	mul.w	r3, r1, r3
 8015f08:	4413      	add	r3, r2
 8015f0a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8015f0e:	781a      	ldrb	r2, [r3, #0]
 8015f10:	68bb      	ldr	r3, [r7, #8]
 8015f12:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8015f14:	7bfb      	ldrb	r3, [r7, #15]
 8015f16:	687a      	ldr	r2, [r7, #4]
 8015f18:	211a      	movs	r1, #26
 8015f1a:	fb01 f303 	mul.w	r3, r1, r3
 8015f1e:	4413      	add	r3, r2
 8015f20:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8015f24:	881a      	ldrh	r2, [r3, #0]
 8015f26:	68bb      	ldr	r3, [r7, #8]
 8015f28:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8015f2a:	68bb      	ldr	r3, [r7, #8]
 8015f2c:	785b      	ldrb	r3, [r3, #1]
 8015f2e:	4619      	mov	r1, r3
 8015f30:	6878      	ldr	r0, [r7, #4]
 8015f32:	f000 ffa0 	bl	8016e76 <USBH_AllocPipe>
 8015f36:	4603      	mov	r3, r0
 8015f38:	461a      	mov	r2, r3
 8015f3a:	68bb      	ldr	r3, [r7, #8]
 8015f3c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8015f3e:	68bb      	ldr	r3, [r7, #8]
 8015f40:	7819      	ldrb	r1, [r3, #0]
 8015f42:	68bb      	ldr	r3, [r7, #8]
 8015f44:	7858      	ldrb	r0, [r3, #1]
 8015f46:	687b      	ldr	r3, [r7, #4]
 8015f48:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8015f4c:	687b      	ldr	r3, [r7, #4]
 8015f4e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8015f52:	68ba      	ldr	r2, [r7, #8]
 8015f54:	8952      	ldrh	r2, [r2, #10]
 8015f56:	9202      	str	r2, [sp, #8]
 8015f58:	2203      	movs	r2, #3
 8015f5a:	9201      	str	r2, [sp, #4]
 8015f5c:	9300      	str	r3, [sp, #0]
 8015f5e:	4623      	mov	r3, r4
 8015f60:	4602      	mov	r2, r0
 8015f62:	6878      	ldr	r0, [r7, #4]
 8015f64:	f000 ff58 	bl	8016e18 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8015f68:	68bb      	ldr	r3, [r7, #8]
 8015f6a:	781b      	ldrb	r3, [r3, #0]
 8015f6c:	2200      	movs	r2, #0
 8015f6e:	4619      	mov	r1, r3
 8015f70:	6878      	ldr	r0, [r7, #4]
 8015f72:	f001 fa1b 	bl	80173ac <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8015f76:	2300      	movs	r3, #0
 8015f78:	2200      	movs	r2, #0
 8015f7a:	210a      	movs	r1, #10
 8015f7c:	6878      	ldr	r0, [r7, #4]
 8015f7e:	f000 fbed 	bl	801675c <USBH_FindInterface>
 8015f82:	4603      	mov	r3, r0
 8015f84:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8015f86:	7bfb      	ldrb	r3, [r7, #15]
 8015f88:	2bff      	cmp	r3, #255	; 0xff
 8015f8a:	d002      	beq.n	8015f92 <USBH_CDC_InterfaceInit+0x11a>
 8015f8c:	7bfb      	ldrb	r3, [r7, #15]
 8015f8e:	2b01      	cmp	r3, #1
 8015f90:	d901      	bls.n	8015f96 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8015f92:	2302      	movs	r3, #2
 8015f94:	e0c2      	b.n	801611c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8015f96:	7bfb      	ldrb	r3, [r7, #15]
 8015f98:	687a      	ldr	r2, [r7, #4]
 8015f9a:	211a      	movs	r1, #26
 8015f9c:	fb01 f303 	mul.w	r3, r1, r3
 8015fa0:	4413      	add	r3, r2
 8015fa2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8015fa6:	781b      	ldrb	r3, [r3, #0]
 8015fa8:	b25b      	sxtb	r3, r3
 8015faa:	2b00      	cmp	r3, #0
 8015fac:	da16      	bge.n	8015fdc <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8015fae:	7bfb      	ldrb	r3, [r7, #15]
 8015fb0:	687a      	ldr	r2, [r7, #4]
 8015fb2:	211a      	movs	r1, #26
 8015fb4:	fb01 f303 	mul.w	r3, r1, r3
 8015fb8:	4413      	add	r3, r2
 8015fba:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8015fbe:	781a      	ldrb	r2, [r3, #0]
 8015fc0:	68bb      	ldr	r3, [r7, #8]
 8015fc2:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8015fc4:	7bfb      	ldrb	r3, [r7, #15]
 8015fc6:	687a      	ldr	r2, [r7, #4]
 8015fc8:	211a      	movs	r1, #26
 8015fca:	fb01 f303 	mul.w	r3, r1, r3
 8015fce:	4413      	add	r3, r2
 8015fd0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8015fd4:	881a      	ldrh	r2, [r3, #0]
 8015fd6:	68bb      	ldr	r3, [r7, #8]
 8015fd8:	835a      	strh	r2, [r3, #26]
 8015fda:	e015      	b.n	8016008 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8015fdc:	7bfb      	ldrb	r3, [r7, #15]
 8015fde:	687a      	ldr	r2, [r7, #4]
 8015fe0:	211a      	movs	r1, #26
 8015fe2:	fb01 f303 	mul.w	r3, r1, r3
 8015fe6:	4413      	add	r3, r2
 8015fe8:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8015fec:	781a      	ldrb	r2, [r3, #0]
 8015fee:	68bb      	ldr	r3, [r7, #8]
 8015ff0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8015ff2:	7bfb      	ldrb	r3, [r7, #15]
 8015ff4:	687a      	ldr	r2, [r7, #4]
 8015ff6:	211a      	movs	r1, #26
 8015ff8:	fb01 f303 	mul.w	r3, r1, r3
 8015ffc:	4413      	add	r3, r2
 8015ffe:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8016002:	881a      	ldrh	r2, [r3, #0]
 8016004:	68bb      	ldr	r3, [r7, #8]
 8016006:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8016008:	7bfb      	ldrb	r3, [r7, #15]
 801600a:	687a      	ldr	r2, [r7, #4]
 801600c:	211a      	movs	r1, #26
 801600e:	fb01 f303 	mul.w	r3, r1, r3
 8016012:	4413      	add	r3, r2
 8016014:	f203 3356 	addw	r3, r3, #854	; 0x356
 8016018:	781b      	ldrb	r3, [r3, #0]
 801601a:	b25b      	sxtb	r3, r3
 801601c:	2b00      	cmp	r3, #0
 801601e:	da16      	bge.n	801604e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8016020:	7bfb      	ldrb	r3, [r7, #15]
 8016022:	687a      	ldr	r2, [r7, #4]
 8016024:	211a      	movs	r1, #26
 8016026:	fb01 f303 	mul.w	r3, r1, r3
 801602a:	4413      	add	r3, r2
 801602c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8016030:	781a      	ldrb	r2, [r3, #0]
 8016032:	68bb      	ldr	r3, [r7, #8]
 8016034:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8016036:	7bfb      	ldrb	r3, [r7, #15]
 8016038:	687a      	ldr	r2, [r7, #4]
 801603a:	211a      	movs	r1, #26
 801603c:	fb01 f303 	mul.w	r3, r1, r3
 8016040:	4413      	add	r3, r2
 8016042:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8016046:	881a      	ldrh	r2, [r3, #0]
 8016048:	68bb      	ldr	r3, [r7, #8]
 801604a:	835a      	strh	r2, [r3, #26]
 801604c:	e015      	b.n	801607a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 801604e:	7bfb      	ldrb	r3, [r7, #15]
 8016050:	687a      	ldr	r2, [r7, #4]
 8016052:	211a      	movs	r1, #26
 8016054:	fb01 f303 	mul.w	r3, r1, r3
 8016058:	4413      	add	r3, r2
 801605a:	f203 3356 	addw	r3, r3, #854	; 0x356
 801605e:	781a      	ldrb	r2, [r3, #0]
 8016060:	68bb      	ldr	r3, [r7, #8]
 8016062:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8016064:	7bfb      	ldrb	r3, [r7, #15]
 8016066:	687a      	ldr	r2, [r7, #4]
 8016068:	211a      	movs	r1, #26
 801606a:	fb01 f303 	mul.w	r3, r1, r3
 801606e:	4413      	add	r3, r2
 8016070:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8016074:	881a      	ldrh	r2, [r3, #0]
 8016076:	68bb      	ldr	r3, [r7, #8]
 8016078:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 801607a:	68bb      	ldr	r3, [r7, #8]
 801607c:	7b9b      	ldrb	r3, [r3, #14]
 801607e:	4619      	mov	r1, r3
 8016080:	6878      	ldr	r0, [r7, #4]
 8016082:	f000 fef8 	bl	8016e76 <USBH_AllocPipe>
 8016086:	4603      	mov	r3, r0
 8016088:	461a      	mov	r2, r3
 801608a:	68bb      	ldr	r3, [r7, #8]
 801608c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 801608e:	68bb      	ldr	r3, [r7, #8]
 8016090:	7bdb      	ldrb	r3, [r3, #15]
 8016092:	4619      	mov	r1, r3
 8016094:	6878      	ldr	r0, [r7, #4]
 8016096:	f000 feee 	bl	8016e76 <USBH_AllocPipe>
 801609a:	4603      	mov	r3, r0
 801609c:	461a      	mov	r2, r3
 801609e:	68bb      	ldr	r3, [r7, #8]
 80160a0:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80160a2:	68bb      	ldr	r3, [r7, #8]
 80160a4:	7b59      	ldrb	r1, [r3, #13]
 80160a6:	68bb      	ldr	r3, [r7, #8]
 80160a8:	7b98      	ldrb	r0, [r3, #14]
 80160aa:	687b      	ldr	r3, [r7, #4]
 80160ac:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80160b0:	687b      	ldr	r3, [r7, #4]
 80160b2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80160b6:	68ba      	ldr	r2, [r7, #8]
 80160b8:	8b12      	ldrh	r2, [r2, #24]
 80160ba:	9202      	str	r2, [sp, #8]
 80160bc:	2202      	movs	r2, #2
 80160be:	9201      	str	r2, [sp, #4]
 80160c0:	9300      	str	r3, [sp, #0]
 80160c2:	4623      	mov	r3, r4
 80160c4:	4602      	mov	r2, r0
 80160c6:	6878      	ldr	r0, [r7, #4]
 80160c8:	f000 fea6 	bl	8016e18 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80160cc:	68bb      	ldr	r3, [r7, #8]
 80160ce:	7b19      	ldrb	r1, [r3, #12]
 80160d0:	68bb      	ldr	r3, [r7, #8]
 80160d2:	7bd8      	ldrb	r0, [r3, #15]
 80160d4:	687b      	ldr	r3, [r7, #4]
 80160d6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80160da:	687b      	ldr	r3, [r7, #4]
 80160dc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80160e0:	68ba      	ldr	r2, [r7, #8]
 80160e2:	8b52      	ldrh	r2, [r2, #26]
 80160e4:	9202      	str	r2, [sp, #8]
 80160e6:	2202      	movs	r2, #2
 80160e8:	9201      	str	r2, [sp, #4]
 80160ea:	9300      	str	r3, [sp, #0]
 80160ec:	4623      	mov	r3, r4
 80160ee:	4602      	mov	r2, r0
 80160f0:	6878      	ldr	r0, [r7, #4]
 80160f2:	f000 fe91 	bl	8016e18 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80160f6:	68bb      	ldr	r3, [r7, #8]
 80160f8:	2200      	movs	r2, #0
 80160fa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80160fe:	68bb      	ldr	r3, [r7, #8]
 8016100:	7b5b      	ldrb	r3, [r3, #13]
 8016102:	2200      	movs	r2, #0
 8016104:	4619      	mov	r1, r3
 8016106:	6878      	ldr	r0, [r7, #4]
 8016108:	f001 f950 	bl	80173ac <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 801610c:	68bb      	ldr	r3, [r7, #8]
 801610e:	7b1b      	ldrb	r3, [r3, #12]
 8016110:	2200      	movs	r2, #0
 8016112:	4619      	mov	r1, r3
 8016114:	6878      	ldr	r0, [r7, #4]
 8016116:	f001 f949 	bl	80173ac <USBH_LL_SetToggle>

  return USBH_OK;
 801611a:	2300      	movs	r3, #0
}
 801611c:	4618      	mov	r0, r3
 801611e:	3714      	adds	r7, #20
 8016120:	46bd      	mov	sp, r7
 8016122:	bd90      	pop	{r4, r7, pc}

08016124 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8016124:	b580      	push	{r7, lr}
 8016126:	b084      	sub	sp, #16
 8016128:	af00      	add	r7, sp, #0
 801612a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 801612c:	687b      	ldr	r3, [r7, #4]
 801612e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8016132:	69db      	ldr	r3, [r3, #28]
 8016134:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8016136:	68fb      	ldr	r3, [r7, #12]
 8016138:	781b      	ldrb	r3, [r3, #0]
 801613a:	2b00      	cmp	r3, #0
 801613c:	d00e      	beq.n	801615c <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 801613e:	68fb      	ldr	r3, [r7, #12]
 8016140:	781b      	ldrb	r3, [r3, #0]
 8016142:	4619      	mov	r1, r3
 8016144:	6878      	ldr	r0, [r7, #4]
 8016146:	f000 fe86 	bl	8016e56 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 801614a:	68fb      	ldr	r3, [r7, #12]
 801614c:	781b      	ldrb	r3, [r3, #0]
 801614e:	4619      	mov	r1, r3
 8016150:	6878      	ldr	r0, [r7, #4]
 8016152:	f000 feb1 	bl	8016eb8 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8016156:	68fb      	ldr	r3, [r7, #12]
 8016158:	2200      	movs	r2, #0
 801615a:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 801615c:	68fb      	ldr	r3, [r7, #12]
 801615e:	7b1b      	ldrb	r3, [r3, #12]
 8016160:	2b00      	cmp	r3, #0
 8016162:	d00e      	beq.n	8016182 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8016164:	68fb      	ldr	r3, [r7, #12]
 8016166:	7b1b      	ldrb	r3, [r3, #12]
 8016168:	4619      	mov	r1, r3
 801616a:	6878      	ldr	r0, [r7, #4]
 801616c:	f000 fe73 	bl	8016e56 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8016170:	68fb      	ldr	r3, [r7, #12]
 8016172:	7b1b      	ldrb	r3, [r3, #12]
 8016174:	4619      	mov	r1, r3
 8016176:	6878      	ldr	r0, [r7, #4]
 8016178:	f000 fe9e 	bl	8016eb8 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 801617c:	68fb      	ldr	r3, [r7, #12]
 801617e:	2200      	movs	r2, #0
 8016180:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8016182:	68fb      	ldr	r3, [r7, #12]
 8016184:	7b5b      	ldrb	r3, [r3, #13]
 8016186:	2b00      	cmp	r3, #0
 8016188:	d00e      	beq.n	80161a8 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 801618a:	68fb      	ldr	r3, [r7, #12]
 801618c:	7b5b      	ldrb	r3, [r3, #13]
 801618e:	4619      	mov	r1, r3
 8016190:	6878      	ldr	r0, [r7, #4]
 8016192:	f000 fe60 	bl	8016e56 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8016196:	68fb      	ldr	r3, [r7, #12]
 8016198:	7b5b      	ldrb	r3, [r3, #13]
 801619a:	4619      	mov	r1, r3
 801619c:	6878      	ldr	r0, [r7, #4]
 801619e:	f000 fe8b 	bl	8016eb8 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80161a2:	68fb      	ldr	r3, [r7, #12]
 80161a4:	2200      	movs	r2, #0
 80161a6:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 80161a8:	687b      	ldr	r3, [r7, #4]
 80161aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80161ae:	69db      	ldr	r3, [r3, #28]
 80161b0:	2b00      	cmp	r3, #0
 80161b2:	d00b      	beq.n	80161cc <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80161b4:	687b      	ldr	r3, [r7, #4]
 80161b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80161ba:	69db      	ldr	r3, [r3, #28]
 80161bc:	4618      	mov	r0, r3
 80161be:	f001 fc5f 	bl	8017a80 <free>
    phost->pActiveClass->pData = 0U;
 80161c2:	687b      	ldr	r3, [r7, #4]
 80161c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80161c8:	2200      	movs	r2, #0
 80161ca:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80161cc:	2300      	movs	r3, #0
}
 80161ce:	4618      	mov	r0, r3
 80161d0:	3710      	adds	r7, #16
 80161d2:	46bd      	mov	sp, r7
 80161d4:	bd80      	pop	{r7, pc}

080161d6 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80161d6:	b580      	push	{r7, lr}
 80161d8:	b084      	sub	sp, #16
 80161da:	af00      	add	r7, sp, #0
 80161dc:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80161de:	687b      	ldr	r3, [r7, #4]
 80161e0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80161e4:	69db      	ldr	r3, [r3, #28]
 80161e6:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80161e8:	68fb      	ldr	r3, [r7, #12]
 80161ea:	3340      	adds	r3, #64	; 0x40
 80161ec:	4619      	mov	r1, r3
 80161ee:	6878      	ldr	r0, [r7, #4]
 80161f0:	f000 f8b1 	bl	8016356 <GetLineCoding>
 80161f4:	4603      	mov	r3, r0
 80161f6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80161f8:	7afb      	ldrb	r3, [r7, #11]
 80161fa:	2b00      	cmp	r3, #0
 80161fc:	d105      	bne.n	801620a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80161fe:	687b      	ldr	r3, [r7, #4]
 8016200:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8016204:	2102      	movs	r1, #2
 8016206:	6878      	ldr	r0, [r7, #4]
 8016208:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 801620a:	7afb      	ldrb	r3, [r7, #11]
}
 801620c:	4618      	mov	r0, r3
 801620e:	3710      	adds	r7, #16
 8016210:	46bd      	mov	sp, r7
 8016212:	bd80      	pop	{r7, pc}

08016214 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8016214:	b580      	push	{r7, lr}
 8016216:	b084      	sub	sp, #16
 8016218:	af00      	add	r7, sp, #0
 801621a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 801621c:	2301      	movs	r3, #1
 801621e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8016220:	2300      	movs	r3, #0
 8016222:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8016224:	687b      	ldr	r3, [r7, #4]
 8016226:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801622a:	69db      	ldr	r3, [r3, #28]
 801622c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 801622e:	68bb      	ldr	r3, [r7, #8]
 8016230:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8016234:	2b04      	cmp	r3, #4
 8016236:	d877      	bhi.n	8016328 <USBH_CDC_Process+0x114>
 8016238:	a201      	add	r2, pc, #4	; (adr r2, 8016240 <USBH_CDC_Process+0x2c>)
 801623a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801623e:	bf00      	nop
 8016240:	08016255 	.word	0x08016255
 8016244:	0801625b 	.word	0x0801625b
 8016248:	0801628b 	.word	0x0801628b
 801624c:	080162ff 	.word	0x080162ff
 8016250:	0801630d 	.word	0x0801630d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8016254:	2300      	movs	r3, #0
 8016256:	73fb      	strb	r3, [r7, #15]
      break;
 8016258:	e06d      	b.n	8016336 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 801625a:	68bb      	ldr	r3, [r7, #8]
 801625c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801625e:	4619      	mov	r1, r3
 8016260:	6878      	ldr	r0, [r7, #4]
 8016262:	f000 f897 	bl	8016394 <SetLineCoding>
 8016266:	4603      	mov	r3, r0
 8016268:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 801626a:	7bbb      	ldrb	r3, [r7, #14]
 801626c:	2b00      	cmp	r3, #0
 801626e:	d104      	bne.n	801627a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8016270:	68bb      	ldr	r3, [r7, #8]
 8016272:	2202      	movs	r2, #2
 8016274:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8016278:	e058      	b.n	801632c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 801627a:	7bbb      	ldrb	r3, [r7, #14]
 801627c:	2b01      	cmp	r3, #1
 801627e:	d055      	beq.n	801632c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8016280:	68bb      	ldr	r3, [r7, #8]
 8016282:	2204      	movs	r2, #4
 8016284:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8016288:	e050      	b.n	801632c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 801628a:	68bb      	ldr	r3, [r7, #8]
 801628c:	3340      	adds	r3, #64	; 0x40
 801628e:	4619      	mov	r1, r3
 8016290:	6878      	ldr	r0, [r7, #4]
 8016292:	f000 f860 	bl	8016356 <GetLineCoding>
 8016296:	4603      	mov	r3, r0
 8016298:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 801629a:	7bbb      	ldrb	r3, [r7, #14]
 801629c:	2b00      	cmp	r3, #0
 801629e:	d126      	bne.n	80162ee <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80162a0:	68bb      	ldr	r3, [r7, #8]
 80162a2:	2200      	movs	r2, #0
 80162a4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80162a8:	68bb      	ldr	r3, [r7, #8]
 80162aa:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80162ae:	68bb      	ldr	r3, [r7, #8]
 80162b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80162b2:	791b      	ldrb	r3, [r3, #4]
 80162b4:	429a      	cmp	r2, r3
 80162b6:	d13b      	bne.n	8016330 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80162b8:	68bb      	ldr	r3, [r7, #8]
 80162ba:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80162be:	68bb      	ldr	r3, [r7, #8]
 80162c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80162c2:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80162c4:	429a      	cmp	r2, r3
 80162c6:	d133      	bne.n	8016330 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80162c8:	68bb      	ldr	r3, [r7, #8]
 80162ca:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80162ce:	68bb      	ldr	r3, [r7, #8]
 80162d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80162d2:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80162d4:	429a      	cmp	r2, r3
 80162d6:	d12b      	bne.n	8016330 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80162d8:	68bb      	ldr	r3, [r7, #8]
 80162da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80162dc:	68bb      	ldr	r3, [r7, #8]
 80162de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80162e0:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80162e2:	429a      	cmp	r2, r3
 80162e4:	d124      	bne.n	8016330 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80162e6:	6878      	ldr	r0, [r7, #4]
 80162e8:	f000 f95a 	bl	80165a0 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80162ec:	e020      	b.n	8016330 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80162ee:	7bbb      	ldrb	r3, [r7, #14]
 80162f0:	2b01      	cmp	r3, #1
 80162f2:	d01d      	beq.n	8016330 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80162f4:	68bb      	ldr	r3, [r7, #8]
 80162f6:	2204      	movs	r2, #4
 80162f8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80162fc:	e018      	b.n	8016330 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80162fe:	6878      	ldr	r0, [r7, #4]
 8016300:	f000 f867 	bl	80163d2 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8016304:	6878      	ldr	r0, [r7, #4]
 8016306:	f000 f8dc 	bl	80164c2 <CDC_ProcessReception>
      break;
 801630a:	e014      	b.n	8016336 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 801630c:	2100      	movs	r1, #0
 801630e:	6878      	ldr	r0, [r7, #4]
 8016310:	f000 fb0a 	bl	8016928 <USBH_ClrFeature>
 8016314:	4603      	mov	r3, r0
 8016316:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8016318:	7bbb      	ldrb	r3, [r7, #14]
 801631a:	2b00      	cmp	r3, #0
 801631c:	d10a      	bne.n	8016334 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 801631e:	68bb      	ldr	r3, [r7, #8]
 8016320:	2200      	movs	r2, #0
 8016322:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8016326:	e005      	b.n	8016334 <USBH_CDC_Process+0x120>

    default:
      break;
 8016328:	bf00      	nop
 801632a:	e004      	b.n	8016336 <USBH_CDC_Process+0x122>
      break;
 801632c:	bf00      	nop
 801632e:	e002      	b.n	8016336 <USBH_CDC_Process+0x122>
      break;
 8016330:	bf00      	nop
 8016332:	e000      	b.n	8016336 <USBH_CDC_Process+0x122>
      break;
 8016334:	bf00      	nop

  }

  return status;
 8016336:	7bfb      	ldrb	r3, [r7, #15]
}
 8016338:	4618      	mov	r0, r3
 801633a:	3710      	adds	r7, #16
 801633c:	46bd      	mov	sp, r7
 801633e:	bd80      	pop	{r7, pc}

08016340 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8016340:	b480      	push	{r7}
 8016342:	b083      	sub	sp, #12
 8016344:	af00      	add	r7, sp, #0
 8016346:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8016348:	2300      	movs	r3, #0
}
 801634a:	4618      	mov	r0, r3
 801634c:	370c      	adds	r7, #12
 801634e:	46bd      	mov	sp, r7
 8016350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016354:	4770      	bx	lr

08016356 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8016356:	b580      	push	{r7, lr}
 8016358:	b082      	sub	sp, #8
 801635a:	af00      	add	r7, sp, #0
 801635c:	6078      	str	r0, [r7, #4]
 801635e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8016360:	687b      	ldr	r3, [r7, #4]
 8016362:	22a1      	movs	r2, #161	; 0xa1
 8016364:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8016366:	687b      	ldr	r3, [r7, #4]
 8016368:	2221      	movs	r2, #33	; 0x21
 801636a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 801636c:	687b      	ldr	r3, [r7, #4]
 801636e:	2200      	movs	r2, #0
 8016370:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8016372:	687b      	ldr	r3, [r7, #4]
 8016374:	2200      	movs	r2, #0
 8016376:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8016378:	687b      	ldr	r3, [r7, #4]
 801637a:	2207      	movs	r2, #7
 801637c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 801637e:	683b      	ldr	r3, [r7, #0]
 8016380:	2207      	movs	r2, #7
 8016382:	4619      	mov	r1, r3
 8016384:	6878      	ldr	r0, [r7, #4]
 8016386:	f000 faf3 	bl	8016970 <USBH_CtlReq>
 801638a:	4603      	mov	r3, r0
}
 801638c:	4618      	mov	r0, r3
 801638e:	3708      	adds	r7, #8
 8016390:	46bd      	mov	sp, r7
 8016392:	bd80      	pop	{r7, pc}

08016394 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8016394:	b580      	push	{r7, lr}
 8016396:	b082      	sub	sp, #8
 8016398:	af00      	add	r7, sp, #0
 801639a:	6078      	str	r0, [r7, #4]
 801639c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 801639e:	687b      	ldr	r3, [r7, #4]
 80163a0:	2221      	movs	r2, #33	; 0x21
 80163a2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80163a4:	687b      	ldr	r3, [r7, #4]
 80163a6:	2220      	movs	r2, #32
 80163a8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80163aa:	687b      	ldr	r3, [r7, #4]
 80163ac:	2200      	movs	r2, #0
 80163ae:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80163b0:	687b      	ldr	r3, [r7, #4]
 80163b2:	2200      	movs	r2, #0
 80163b4:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80163b6:	687b      	ldr	r3, [r7, #4]
 80163b8:	2207      	movs	r2, #7
 80163ba:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80163bc:	683b      	ldr	r3, [r7, #0]
 80163be:	2207      	movs	r2, #7
 80163c0:	4619      	mov	r1, r3
 80163c2:	6878      	ldr	r0, [r7, #4]
 80163c4:	f000 fad4 	bl	8016970 <USBH_CtlReq>
 80163c8:	4603      	mov	r3, r0
}
 80163ca:	4618      	mov	r0, r3
 80163cc:	3708      	adds	r7, #8
 80163ce:	46bd      	mov	sp, r7
 80163d0:	bd80      	pop	{r7, pc}

080163d2 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80163d2:	b580      	push	{r7, lr}
 80163d4:	b086      	sub	sp, #24
 80163d6:	af02      	add	r7, sp, #8
 80163d8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80163da:	687b      	ldr	r3, [r7, #4]
 80163dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80163e0:	69db      	ldr	r3, [r3, #28]
 80163e2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80163e4:	2300      	movs	r3, #0
 80163e6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80163e8:	68fb      	ldr	r3, [r7, #12]
 80163ea:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80163ee:	2b01      	cmp	r3, #1
 80163f0:	d002      	beq.n	80163f8 <CDC_ProcessTransmission+0x26>
 80163f2:	2b02      	cmp	r3, #2
 80163f4:	d025      	beq.n	8016442 <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 80163f6:	e060      	b.n	80164ba <CDC_ProcessTransmission+0xe8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80163f8:	68fb      	ldr	r3, [r7, #12]
 80163fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80163fc:	68fa      	ldr	r2, [r7, #12]
 80163fe:	8b12      	ldrh	r2, [r2, #24]
 8016400:	4293      	cmp	r3, r2
 8016402:	d90c      	bls.n	801641e <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 8016404:	68fb      	ldr	r3, [r7, #12]
 8016406:	69d9      	ldr	r1, [r3, #28]
 8016408:	68fb      	ldr	r3, [r7, #12]
 801640a:	8b1a      	ldrh	r2, [r3, #24]
 801640c:	68fb      	ldr	r3, [r7, #12]
 801640e:	7b58      	ldrb	r0, [r3, #13]
 8016410:	2301      	movs	r3, #1
 8016412:	9300      	str	r3, [sp, #0]
 8016414:	4603      	mov	r3, r0
 8016416:	6878      	ldr	r0, [r7, #4]
 8016418:	f000 fcbb 	bl	8016d92 <USBH_BulkSendData>
 801641c:	e00c      	b.n	8016438 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 801641e:	68fb      	ldr	r3, [r7, #12]
 8016420:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8016422:	68fb      	ldr	r3, [r7, #12]
 8016424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8016426:	b29a      	uxth	r2, r3
 8016428:	68fb      	ldr	r3, [r7, #12]
 801642a:	7b58      	ldrb	r0, [r3, #13]
 801642c:	2301      	movs	r3, #1
 801642e:	9300      	str	r3, [sp, #0]
 8016430:	4603      	mov	r3, r0
 8016432:	6878      	ldr	r0, [r7, #4]
 8016434:	f000 fcad 	bl	8016d92 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8016438:	68fb      	ldr	r3, [r7, #12]
 801643a:	2202      	movs	r2, #2
 801643c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8016440:	e03b      	b.n	80164ba <CDC_ProcessTransmission+0xe8>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8016442:	68fb      	ldr	r3, [r7, #12]
 8016444:	7b5b      	ldrb	r3, [r3, #13]
 8016446:	4619      	mov	r1, r3
 8016448:	6878      	ldr	r0, [r7, #4]
 801644a:	f000 ff85 	bl	8017358 <USBH_LL_GetURBState>
 801644e:	4603      	mov	r3, r0
 8016450:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8016452:	7afb      	ldrb	r3, [r7, #11]
 8016454:	2b01      	cmp	r3, #1
 8016456:	d128      	bne.n	80164aa <CDC_ProcessTransmission+0xd8>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8016458:	68fb      	ldr	r3, [r7, #12]
 801645a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801645c:	68fa      	ldr	r2, [r7, #12]
 801645e:	8b12      	ldrh	r2, [r2, #24]
 8016460:	4293      	cmp	r3, r2
 8016462:	d90e      	bls.n	8016482 <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8016464:	68fb      	ldr	r3, [r7, #12]
 8016466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016468:	68fa      	ldr	r2, [r7, #12]
 801646a:	8b12      	ldrh	r2, [r2, #24]
 801646c:	1a9a      	subs	r2, r3, r2
 801646e:	68fb      	ldr	r3, [r7, #12]
 8016470:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8016472:	68fb      	ldr	r3, [r7, #12]
 8016474:	69db      	ldr	r3, [r3, #28]
 8016476:	68fa      	ldr	r2, [r7, #12]
 8016478:	8b12      	ldrh	r2, [r2, #24]
 801647a:	441a      	add	r2, r3
 801647c:	68fb      	ldr	r3, [r7, #12]
 801647e:	61da      	str	r2, [r3, #28]
 8016480:	e002      	b.n	8016488 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 8016482:	68fb      	ldr	r3, [r7, #12]
 8016484:	2200      	movs	r2, #0
 8016486:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8016488:	68fb      	ldr	r3, [r7, #12]
 801648a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801648c:	2b00      	cmp	r3, #0
 801648e:	d004      	beq.n	801649a <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8016490:	68fb      	ldr	r3, [r7, #12]
 8016492:	2201      	movs	r2, #1
 8016494:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8016498:	e00e      	b.n	80164b8 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 801649a:	68fb      	ldr	r3, [r7, #12]
 801649c:	2200      	movs	r2, #0
 801649e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80164a2:	6878      	ldr	r0, [r7, #4]
 80164a4:	f000 f868 	bl	8016578 <USBH_CDC_TransmitCallback>
      break;
 80164a8:	e006      	b.n	80164b8 <CDC_ProcessTransmission+0xe6>
        if (URB_Status == USBH_URB_NOTREADY)
 80164aa:	7afb      	ldrb	r3, [r7, #11]
 80164ac:	2b02      	cmp	r3, #2
 80164ae:	d103      	bne.n	80164b8 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80164b0:	68fb      	ldr	r3, [r7, #12]
 80164b2:	2201      	movs	r2, #1
 80164b4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80164b8:	bf00      	nop
  }
}
 80164ba:	bf00      	nop
 80164bc:	3710      	adds	r7, #16
 80164be:	46bd      	mov	sp, r7
 80164c0:	bd80      	pop	{r7, pc}

080164c2 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80164c2:	b580      	push	{r7, lr}
 80164c4:	b086      	sub	sp, #24
 80164c6:	af00      	add	r7, sp, #0
 80164c8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80164ca:	687b      	ldr	r3, [r7, #4]
 80164cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80164d0:	69db      	ldr	r3, [r3, #28]
 80164d2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80164d4:	2300      	movs	r3, #0
 80164d6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80164d8:	697b      	ldr	r3, [r7, #20]
 80164da:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80164de:	2b03      	cmp	r3, #3
 80164e0:	d002      	beq.n	80164e8 <CDC_ProcessReception+0x26>
 80164e2:	2b04      	cmp	r3, #4
 80164e4:	d00e      	beq.n	8016504 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80164e6:	e043      	b.n	8016570 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 80164e8:	697b      	ldr	r3, [r7, #20]
 80164ea:	6a19      	ldr	r1, [r3, #32]
 80164ec:	697b      	ldr	r3, [r7, #20]
 80164ee:	8b5a      	ldrh	r2, [r3, #26]
 80164f0:	697b      	ldr	r3, [r7, #20]
 80164f2:	7b1b      	ldrb	r3, [r3, #12]
 80164f4:	6878      	ldr	r0, [r7, #4]
 80164f6:	f000 fc71 	bl	8016ddc <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80164fa:	697b      	ldr	r3, [r7, #20]
 80164fc:	2204      	movs	r2, #4
 80164fe:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8016502:	e035      	b.n	8016570 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8016504:	697b      	ldr	r3, [r7, #20]
 8016506:	7b1b      	ldrb	r3, [r3, #12]
 8016508:	4619      	mov	r1, r3
 801650a:	6878      	ldr	r0, [r7, #4]
 801650c:	f000 ff24 	bl	8017358 <USBH_LL_GetURBState>
 8016510:	4603      	mov	r3, r0
 8016512:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8016514:	7cfb      	ldrb	r3, [r7, #19]
 8016516:	2b01      	cmp	r3, #1
 8016518:	d129      	bne.n	801656e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 801651a:	697b      	ldr	r3, [r7, #20]
 801651c:	7b1b      	ldrb	r3, [r3, #12]
 801651e:	4619      	mov	r1, r3
 8016520:	6878      	ldr	r0, [r7, #4]
 8016522:	f000 fe87 	bl	8017234 <USBH_LL_GetLastXferSize>
 8016526:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8016528:	697b      	ldr	r3, [r7, #20]
 801652a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801652c:	68fa      	ldr	r2, [r7, #12]
 801652e:	429a      	cmp	r2, r3
 8016530:	d016      	beq.n	8016560 <CDC_ProcessReception+0x9e>
 8016532:	697b      	ldr	r3, [r7, #20]
 8016534:	8b5b      	ldrh	r3, [r3, #26]
 8016536:	461a      	mov	r2, r3
 8016538:	68fb      	ldr	r3, [r7, #12]
 801653a:	4293      	cmp	r3, r2
 801653c:	d910      	bls.n	8016560 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 801653e:	697b      	ldr	r3, [r7, #20]
 8016540:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8016542:	68fb      	ldr	r3, [r7, #12]
 8016544:	1ad2      	subs	r2, r2, r3
 8016546:	697b      	ldr	r3, [r7, #20]
 8016548:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 801654a:	697b      	ldr	r3, [r7, #20]
 801654c:	6a1a      	ldr	r2, [r3, #32]
 801654e:	68fb      	ldr	r3, [r7, #12]
 8016550:	441a      	add	r2, r3
 8016552:	697b      	ldr	r3, [r7, #20]
 8016554:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8016556:	697b      	ldr	r3, [r7, #20]
 8016558:	2203      	movs	r2, #3
 801655a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 801655e:	e006      	b.n	801656e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8016560:	697b      	ldr	r3, [r7, #20]
 8016562:	2200      	movs	r2, #0
 8016564:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8016568:	6878      	ldr	r0, [r7, #4]
 801656a:	f000 f80f 	bl	801658c <USBH_CDC_ReceiveCallback>
      break;
 801656e:	bf00      	nop
  }
}
 8016570:	bf00      	nop
 8016572:	3718      	adds	r7, #24
 8016574:	46bd      	mov	sp, r7
 8016576:	bd80      	pop	{r7, pc}

08016578 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8016578:	b480      	push	{r7}
 801657a:	b083      	sub	sp, #12
 801657c:	af00      	add	r7, sp, #0
 801657e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8016580:	bf00      	nop
 8016582:	370c      	adds	r7, #12
 8016584:	46bd      	mov	sp, r7
 8016586:	f85d 7b04 	ldr.w	r7, [sp], #4
 801658a:	4770      	bx	lr

0801658c <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 801658c:	b480      	push	{r7}
 801658e:	b083      	sub	sp, #12
 8016590:	af00      	add	r7, sp, #0
 8016592:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8016594:	bf00      	nop
 8016596:	370c      	adds	r7, #12
 8016598:	46bd      	mov	sp, r7
 801659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801659e:	4770      	bx	lr

080165a0 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80165a0:	b480      	push	{r7}
 80165a2:	b083      	sub	sp, #12
 80165a4:	af00      	add	r7, sp, #0
 80165a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80165a8:	bf00      	nop
 80165aa:	370c      	adds	r7, #12
 80165ac:	46bd      	mov	sp, r7
 80165ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165b2:	4770      	bx	lr

080165b4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 80165b4:	b580      	push	{r7, lr}
 80165b6:	b084      	sub	sp, #16
 80165b8:	af00      	add	r7, sp, #0
 80165ba:	60f8      	str	r0, [r7, #12]
 80165bc:	60b9      	str	r1, [r7, #8]
 80165be:	4613      	mov	r3, r2
 80165c0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80165c2:	68fb      	ldr	r3, [r7, #12]
 80165c4:	2b00      	cmp	r3, #0
 80165c6:	d101      	bne.n	80165cc <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80165c8:	2302      	movs	r3, #2
 80165ca:	e029      	b.n	8016620 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80165cc:	68fb      	ldr	r3, [r7, #12]
 80165ce:	79fa      	ldrb	r2, [r7, #7]
 80165d0:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80165d4:	68fb      	ldr	r3, [r7, #12]
 80165d6:	2200      	movs	r2, #0
 80165d8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80165dc:	68fb      	ldr	r3, [r7, #12]
 80165de:	2200      	movs	r2, #0
 80165e0:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 80165e4:	68f8      	ldr	r0, [r7, #12]
 80165e6:	f000 f81f 	bl	8016628 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80165ea:	68fb      	ldr	r3, [r7, #12]
 80165ec:	2200      	movs	r2, #0
 80165ee:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80165f2:	68fb      	ldr	r3, [r7, #12]
 80165f4:	2200      	movs	r2, #0
 80165f6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80165fa:	68fb      	ldr	r3, [r7, #12]
 80165fc:	2200      	movs	r2, #0
 80165fe:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8016602:	68fb      	ldr	r3, [r7, #12]
 8016604:	2200      	movs	r2, #0
 8016606:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 801660a:	68bb      	ldr	r3, [r7, #8]
 801660c:	2b00      	cmp	r3, #0
 801660e:	d003      	beq.n	8016618 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8016610:	68fb      	ldr	r3, [r7, #12]
 8016612:	68ba      	ldr	r2, [r7, #8]
 8016614:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8016618:	68f8      	ldr	r0, [r7, #12]
 801661a:	f000 fd99 	bl	8017150 <USBH_LL_Init>

  return USBH_OK;
 801661e:	2300      	movs	r3, #0
}
 8016620:	4618      	mov	r0, r3
 8016622:	3710      	adds	r7, #16
 8016624:	46bd      	mov	sp, r7
 8016626:	bd80      	pop	{r7, pc}

08016628 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8016628:	b480      	push	{r7}
 801662a:	b085      	sub	sp, #20
 801662c:	af00      	add	r7, sp, #0
 801662e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8016630:	2300      	movs	r3, #0
 8016632:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8016634:	2300      	movs	r3, #0
 8016636:	60fb      	str	r3, [r7, #12]
 8016638:	e009      	b.n	801664e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 801663a:	687a      	ldr	r2, [r7, #4]
 801663c:	68fb      	ldr	r3, [r7, #12]
 801663e:	33e0      	adds	r3, #224	; 0xe0
 8016640:	009b      	lsls	r3, r3, #2
 8016642:	4413      	add	r3, r2
 8016644:	2200      	movs	r2, #0
 8016646:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8016648:	68fb      	ldr	r3, [r7, #12]
 801664a:	3301      	adds	r3, #1
 801664c:	60fb      	str	r3, [r7, #12]
 801664e:	68fb      	ldr	r3, [r7, #12]
 8016650:	2b0e      	cmp	r3, #14
 8016652:	d9f2      	bls.n	801663a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8016654:	2300      	movs	r3, #0
 8016656:	60fb      	str	r3, [r7, #12]
 8016658:	e009      	b.n	801666e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 801665a:	687a      	ldr	r2, [r7, #4]
 801665c:	68fb      	ldr	r3, [r7, #12]
 801665e:	4413      	add	r3, r2
 8016660:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8016664:	2200      	movs	r2, #0
 8016666:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8016668:	68fb      	ldr	r3, [r7, #12]
 801666a:	3301      	adds	r3, #1
 801666c:	60fb      	str	r3, [r7, #12]
 801666e:	68fb      	ldr	r3, [r7, #12]
 8016670:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016674:	d3f1      	bcc.n	801665a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8016676:	687b      	ldr	r3, [r7, #4]
 8016678:	2200      	movs	r2, #0
 801667a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 801667c:	687b      	ldr	r3, [r7, #4]
 801667e:	2200      	movs	r2, #0
 8016680:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8016682:	687b      	ldr	r3, [r7, #4]
 8016684:	2201      	movs	r2, #1
 8016686:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8016688:	687b      	ldr	r3, [r7, #4]
 801668a:	2200      	movs	r2, #0
 801668c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8016690:	687b      	ldr	r3, [r7, #4]
 8016692:	2201      	movs	r2, #1
 8016694:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8016696:	687b      	ldr	r3, [r7, #4]
 8016698:	2240      	movs	r2, #64	; 0x40
 801669a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 801669c:	687b      	ldr	r3, [r7, #4]
 801669e:	2200      	movs	r2, #0
 80166a0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80166a2:	687b      	ldr	r3, [r7, #4]
 80166a4:	2200      	movs	r2, #0
 80166a6:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 80166aa:	687b      	ldr	r3, [r7, #4]
 80166ac:	2201      	movs	r2, #1
 80166ae:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80166b2:	687b      	ldr	r3, [r7, #4]
 80166b4:	2200      	movs	r2, #0
 80166b6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80166ba:	687b      	ldr	r3, [r7, #4]
 80166bc:	2200      	movs	r2, #0
 80166be:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80166c2:	2300      	movs	r3, #0
}
 80166c4:	4618      	mov	r0, r3
 80166c6:	3714      	adds	r7, #20
 80166c8:	46bd      	mov	sp, r7
 80166ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166ce:	4770      	bx	lr

080166d0 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80166d0:	b480      	push	{r7}
 80166d2:	b085      	sub	sp, #20
 80166d4:	af00      	add	r7, sp, #0
 80166d6:	6078      	str	r0, [r7, #4]
 80166d8:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80166da:	2300      	movs	r3, #0
 80166dc:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80166de:	683b      	ldr	r3, [r7, #0]
 80166e0:	2b00      	cmp	r3, #0
 80166e2:	d016      	beq.n	8016712 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80166e4:	687b      	ldr	r3, [r7, #4]
 80166e6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80166ea:	2b00      	cmp	r3, #0
 80166ec:	d10e      	bne.n	801670c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80166ee:	687b      	ldr	r3, [r7, #4]
 80166f0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80166f4:	1c59      	adds	r1, r3, #1
 80166f6:	687a      	ldr	r2, [r7, #4]
 80166f8:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80166fc:	687a      	ldr	r2, [r7, #4]
 80166fe:	33de      	adds	r3, #222	; 0xde
 8016700:	6839      	ldr	r1, [r7, #0]
 8016702:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8016706:	2300      	movs	r3, #0
 8016708:	73fb      	strb	r3, [r7, #15]
 801670a:	e004      	b.n	8016716 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 801670c:	2302      	movs	r3, #2
 801670e:	73fb      	strb	r3, [r7, #15]
 8016710:	e001      	b.n	8016716 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8016712:	2302      	movs	r3, #2
 8016714:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8016716:	7bfb      	ldrb	r3, [r7, #15]
}
 8016718:	4618      	mov	r0, r3
 801671a:	3714      	adds	r7, #20
 801671c:	46bd      	mov	sp, r7
 801671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016722:	4770      	bx	lr

08016724 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8016724:	b480      	push	{r7}
 8016726:	b085      	sub	sp, #20
 8016728:	af00      	add	r7, sp, #0
 801672a:	6078      	str	r0, [r7, #4]
 801672c:	460b      	mov	r3, r1
 801672e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8016730:	2300      	movs	r3, #0
 8016732:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8016734:	687b      	ldr	r3, [r7, #4]
 8016736:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 801673a:	78fa      	ldrb	r2, [r7, #3]
 801673c:	429a      	cmp	r2, r3
 801673e:	d204      	bcs.n	801674a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8016740:	687b      	ldr	r3, [r7, #4]
 8016742:	78fa      	ldrb	r2, [r7, #3]
 8016744:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8016748:	e001      	b.n	801674e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 801674a:	2302      	movs	r3, #2
 801674c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 801674e:	7bfb      	ldrb	r3, [r7, #15]
}
 8016750:	4618      	mov	r0, r3
 8016752:	3714      	adds	r7, #20
 8016754:	46bd      	mov	sp, r7
 8016756:	f85d 7b04 	ldr.w	r7, [sp], #4
 801675a:	4770      	bx	lr

0801675c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 801675c:	b480      	push	{r7}
 801675e:	b087      	sub	sp, #28
 8016760:	af00      	add	r7, sp, #0
 8016762:	6078      	str	r0, [r7, #4]
 8016764:	4608      	mov	r0, r1
 8016766:	4611      	mov	r1, r2
 8016768:	461a      	mov	r2, r3
 801676a:	4603      	mov	r3, r0
 801676c:	70fb      	strb	r3, [r7, #3]
 801676e:	460b      	mov	r3, r1
 8016770:	70bb      	strb	r3, [r7, #2]
 8016772:	4613      	mov	r3, r2
 8016774:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8016776:	2300      	movs	r3, #0
 8016778:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 801677a:	2300      	movs	r3, #0
 801677c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 801677e:	687b      	ldr	r3, [r7, #4]
 8016780:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8016784:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8016786:	e025      	b.n	80167d4 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8016788:	7dfb      	ldrb	r3, [r7, #23]
 801678a:	221a      	movs	r2, #26
 801678c:	fb02 f303 	mul.w	r3, r2, r3
 8016790:	3308      	adds	r3, #8
 8016792:	68fa      	ldr	r2, [r7, #12]
 8016794:	4413      	add	r3, r2
 8016796:	3302      	adds	r3, #2
 8016798:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 801679a:	693b      	ldr	r3, [r7, #16]
 801679c:	795b      	ldrb	r3, [r3, #5]
 801679e:	78fa      	ldrb	r2, [r7, #3]
 80167a0:	429a      	cmp	r2, r3
 80167a2:	d002      	beq.n	80167aa <USBH_FindInterface+0x4e>
 80167a4:	78fb      	ldrb	r3, [r7, #3]
 80167a6:	2bff      	cmp	r3, #255	; 0xff
 80167a8:	d111      	bne.n	80167ce <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80167aa:	693b      	ldr	r3, [r7, #16]
 80167ac:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80167ae:	78ba      	ldrb	r2, [r7, #2]
 80167b0:	429a      	cmp	r2, r3
 80167b2:	d002      	beq.n	80167ba <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80167b4:	78bb      	ldrb	r3, [r7, #2]
 80167b6:	2bff      	cmp	r3, #255	; 0xff
 80167b8:	d109      	bne.n	80167ce <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80167ba:	693b      	ldr	r3, [r7, #16]
 80167bc:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80167be:	787a      	ldrb	r2, [r7, #1]
 80167c0:	429a      	cmp	r2, r3
 80167c2:	d002      	beq.n	80167ca <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80167c4:	787b      	ldrb	r3, [r7, #1]
 80167c6:	2bff      	cmp	r3, #255	; 0xff
 80167c8:	d101      	bne.n	80167ce <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80167ca:	7dfb      	ldrb	r3, [r7, #23]
 80167cc:	e006      	b.n	80167dc <USBH_FindInterface+0x80>
    }
    if_ix++;
 80167ce:	7dfb      	ldrb	r3, [r7, #23]
 80167d0:	3301      	adds	r3, #1
 80167d2:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80167d4:	7dfb      	ldrb	r3, [r7, #23]
 80167d6:	2b01      	cmp	r3, #1
 80167d8:	d9d6      	bls.n	8016788 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80167da:	23ff      	movs	r3, #255	; 0xff
}
 80167dc:	4618      	mov	r0, r3
 80167de:	371c      	adds	r7, #28
 80167e0:	46bd      	mov	sp, r7
 80167e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167e6:	4770      	bx	lr

080167e8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80167e8:	b580      	push	{r7, lr}
 80167ea:	b082      	sub	sp, #8
 80167ec:	af00      	add	r7, sp, #0
 80167ee:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80167f0:	6878      	ldr	r0, [r7, #4]
 80167f2:	f000 fce9 	bl	80171c8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 80167f6:	2101      	movs	r1, #1
 80167f8:	6878      	ldr	r0, [r7, #4]
 80167fa:	f000 fdc0 	bl	801737e <USBH_LL_DriverVBUS>

  return USBH_OK;
 80167fe:	2300      	movs	r3, #0
}
 8016800:	4618      	mov	r0, r3
 8016802:	3708      	adds	r7, #8
 8016804:	46bd      	mov	sp, r7
 8016806:	bd80      	pop	{r7, pc}

08016808 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8016808:	b480      	push	{r7}
 801680a:	b083      	sub	sp, #12
 801680c:	af00      	add	r7, sp, #0
 801680e:	6078      	str	r0, [r7, #4]
 8016810:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8016812:	687b      	ldr	r3, [r7, #4]
 8016814:	683a      	ldr	r2, [r7, #0]
 8016816:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 801681a:	bf00      	nop
 801681c:	370c      	adds	r7, #12
 801681e:	46bd      	mov	sp, r7
 8016820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016824:	4770      	bx	lr

08016826 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8016826:	b580      	push	{r7, lr}
 8016828:	b082      	sub	sp, #8
 801682a:	af00      	add	r7, sp, #0
 801682c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 801682e:	687b      	ldr	r3, [r7, #4]
 8016830:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8016834:	1c5a      	adds	r2, r3, #1
 8016836:	687b      	ldr	r3, [r7, #4]
 8016838:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 801683c:	6878      	ldr	r0, [r7, #4]
 801683e:	f000 f804 	bl	801684a <USBH_HandleSof>
}
 8016842:	bf00      	nop
 8016844:	3708      	adds	r7, #8
 8016846:	46bd      	mov	sp, r7
 8016848:	bd80      	pop	{r7, pc}

0801684a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 801684a:	b580      	push	{r7, lr}
 801684c:	b082      	sub	sp, #8
 801684e:	af00      	add	r7, sp, #0
 8016850:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8016852:	687b      	ldr	r3, [r7, #4]
 8016854:	781b      	ldrb	r3, [r3, #0]
 8016856:	b2db      	uxtb	r3, r3
 8016858:	2b0b      	cmp	r3, #11
 801685a:	d10a      	bne.n	8016872 <USBH_HandleSof+0x28>
 801685c:	687b      	ldr	r3, [r7, #4]
 801685e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8016862:	2b00      	cmp	r3, #0
 8016864:	d005      	beq.n	8016872 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8016866:	687b      	ldr	r3, [r7, #4]
 8016868:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801686c:	699b      	ldr	r3, [r3, #24]
 801686e:	6878      	ldr	r0, [r7, #4]
 8016870:	4798      	blx	r3
  }
}
 8016872:	bf00      	nop
 8016874:	3708      	adds	r7, #8
 8016876:	46bd      	mov	sp, r7
 8016878:	bd80      	pop	{r7, pc}

0801687a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 801687a:	b480      	push	{r7}
 801687c:	b083      	sub	sp, #12
 801687e:	af00      	add	r7, sp, #0
 8016880:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8016882:	687b      	ldr	r3, [r7, #4]
 8016884:	2201      	movs	r2, #1
 8016886:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 801688a:	bf00      	nop
}
 801688c:	370c      	adds	r7, #12
 801688e:	46bd      	mov	sp, r7
 8016890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016894:	4770      	bx	lr

08016896 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8016896:	b480      	push	{r7}
 8016898:	b083      	sub	sp, #12
 801689a:	af00      	add	r7, sp, #0
 801689c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 801689e:	687b      	ldr	r3, [r7, #4]
 80168a0:	2200      	movs	r2, #0
 80168a2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80168a6:	bf00      	nop
}
 80168a8:	370c      	adds	r7, #12
 80168aa:	46bd      	mov	sp, r7
 80168ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168b0:	4770      	bx	lr

080168b2 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80168b2:	b480      	push	{r7}
 80168b4:	b083      	sub	sp, #12
 80168b6:	af00      	add	r7, sp, #0
 80168b8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80168ba:	687b      	ldr	r3, [r7, #4]
 80168bc:	2201      	movs	r2, #1
 80168be:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80168c2:	687b      	ldr	r3, [r7, #4]
 80168c4:	2200      	movs	r2, #0
 80168c6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80168ca:	687b      	ldr	r3, [r7, #4]
 80168cc:	2200      	movs	r2, #0
 80168ce:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80168d2:	2300      	movs	r3, #0
}
 80168d4:	4618      	mov	r0, r3
 80168d6:	370c      	adds	r7, #12
 80168d8:	46bd      	mov	sp, r7
 80168da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168de:	4770      	bx	lr

080168e0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80168e0:	b580      	push	{r7, lr}
 80168e2:	b082      	sub	sp, #8
 80168e4:	af00      	add	r7, sp, #0
 80168e6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80168e8:	687b      	ldr	r3, [r7, #4]
 80168ea:	2201      	movs	r2, #1
 80168ec:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80168f0:	687b      	ldr	r3, [r7, #4]
 80168f2:	2200      	movs	r2, #0
 80168f4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80168f8:	687b      	ldr	r3, [r7, #4]
 80168fa:	2200      	movs	r2, #0
 80168fc:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8016900:	6878      	ldr	r0, [r7, #4]
 8016902:	f000 fc7c 	bl	80171fe <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8016906:	687b      	ldr	r3, [r7, #4]
 8016908:	791b      	ldrb	r3, [r3, #4]
 801690a:	4619      	mov	r1, r3
 801690c:	6878      	ldr	r0, [r7, #4]
 801690e:	f000 fad3 	bl	8016eb8 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8016912:	687b      	ldr	r3, [r7, #4]
 8016914:	795b      	ldrb	r3, [r3, #5]
 8016916:	4619      	mov	r1, r3
 8016918:	6878      	ldr	r0, [r7, #4]
 801691a:	f000 facd 	bl	8016eb8 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 801691e:	2300      	movs	r3, #0
}
 8016920:	4618      	mov	r0, r3
 8016922:	3708      	adds	r7, #8
 8016924:	46bd      	mov	sp, r7
 8016926:	bd80      	pop	{r7, pc}

08016928 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8016928:	b580      	push	{r7, lr}
 801692a:	b082      	sub	sp, #8
 801692c:	af00      	add	r7, sp, #0
 801692e:	6078      	str	r0, [r7, #4]
 8016930:	460b      	mov	r3, r1
 8016932:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8016934:	687b      	ldr	r3, [r7, #4]
 8016936:	789b      	ldrb	r3, [r3, #2]
 8016938:	2b01      	cmp	r3, #1
 801693a:	d10f      	bne.n	801695c <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 801693c:	687b      	ldr	r3, [r7, #4]
 801693e:	2202      	movs	r2, #2
 8016940:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8016942:	687b      	ldr	r3, [r7, #4]
 8016944:	2201      	movs	r2, #1
 8016946:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8016948:	687b      	ldr	r3, [r7, #4]
 801694a:	2200      	movs	r2, #0
 801694c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 801694e:	78fb      	ldrb	r3, [r7, #3]
 8016950:	b29a      	uxth	r2, r3
 8016952:	687b      	ldr	r3, [r7, #4]
 8016954:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8016956:	687b      	ldr	r3, [r7, #4]
 8016958:	2200      	movs	r2, #0
 801695a:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 801695c:	2200      	movs	r2, #0
 801695e:	2100      	movs	r1, #0
 8016960:	6878      	ldr	r0, [r7, #4]
 8016962:	f000 f805 	bl	8016970 <USBH_CtlReq>
 8016966:	4603      	mov	r3, r0
}
 8016968:	4618      	mov	r0, r3
 801696a:	3708      	adds	r7, #8
 801696c:	46bd      	mov	sp, r7
 801696e:	bd80      	pop	{r7, pc}

08016970 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8016970:	b580      	push	{r7, lr}
 8016972:	b086      	sub	sp, #24
 8016974:	af00      	add	r7, sp, #0
 8016976:	60f8      	str	r0, [r7, #12]
 8016978:	60b9      	str	r1, [r7, #8]
 801697a:	4613      	mov	r3, r2
 801697c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 801697e:	2301      	movs	r3, #1
 8016980:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8016982:	68fb      	ldr	r3, [r7, #12]
 8016984:	789b      	ldrb	r3, [r3, #2]
 8016986:	2b01      	cmp	r3, #1
 8016988:	d002      	beq.n	8016990 <USBH_CtlReq+0x20>
 801698a:	2b02      	cmp	r3, #2
 801698c:	d00f      	beq.n	80169ae <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 801698e:	e027      	b.n	80169e0 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8016990:	68fb      	ldr	r3, [r7, #12]
 8016992:	68ba      	ldr	r2, [r7, #8]
 8016994:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8016996:	68fb      	ldr	r3, [r7, #12]
 8016998:	88fa      	ldrh	r2, [r7, #6]
 801699a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 801699c:	68fb      	ldr	r3, [r7, #12]
 801699e:	2201      	movs	r2, #1
 80169a0:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80169a2:	68fb      	ldr	r3, [r7, #12]
 80169a4:	2202      	movs	r2, #2
 80169a6:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80169a8:	2301      	movs	r3, #1
 80169aa:	75fb      	strb	r3, [r7, #23]
      break;
 80169ac:	e018      	b.n	80169e0 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80169ae:	68f8      	ldr	r0, [r7, #12]
 80169b0:	f000 f81c 	bl	80169ec <USBH_HandleControl>
 80169b4:	4603      	mov	r3, r0
 80169b6:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80169b8:	7dfb      	ldrb	r3, [r7, #23]
 80169ba:	2b00      	cmp	r3, #0
 80169bc:	d002      	beq.n	80169c4 <USBH_CtlReq+0x54>
 80169be:	7dfb      	ldrb	r3, [r7, #23]
 80169c0:	2b03      	cmp	r3, #3
 80169c2:	d106      	bne.n	80169d2 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80169c4:	68fb      	ldr	r3, [r7, #12]
 80169c6:	2201      	movs	r2, #1
 80169c8:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80169ca:	68fb      	ldr	r3, [r7, #12]
 80169cc:	2200      	movs	r2, #0
 80169ce:	761a      	strb	r2, [r3, #24]
      break;
 80169d0:	e005      	b.n	80169de <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80169d2:	7dfb      	ldrb	r3, [r7, #23]
 80169d4:	2b02      	cmp	r3, #2
 80169d6:	d102      	bne.n	80169de <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80169d8:	68fb      	ldr	r3, [r7, #12]
 80169da:	2201      	movs	r2, #1
 80169dc:	709a      	strb	r2, [r3, #2]
      break;
 80169de:	bf00      	nop
  }
  return status;
 80169e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80169e2:	4618      	mov	r0, r3
 80169e4:	3718      	adds	r7, #24
 80169e6:	46bd      	mov	sp, r7
 80169e8:	bd80      	pop	{r7, pc}
	...

080169ec <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80169ec:	b580      	push	{r7, lr}
 80169ee:	b086      	sub	sp, #24
 80169f0:	af02      	add	r7, sp, #8
 80169f2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80169f4:	2301      	movs	r3, #1
 80169f6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80169f8:	2300      	movs	r3, #0
 80169fa:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80169fc:	687b      	ldr	r3, [r7, #4]
 80169fe:	7e1b      	ldrb	r3, [r3, #24]
 8016a00:	3b01      	subs	r3, #1
 8016a02:	2b0a      	cmp	r3, #10
 8016a04:	f200 8158 	bhi.w	8016cb8 <USBH_HandleControl+0x2cc>
 8016a08:	a201      	add	r2, pc, #4	; (adr r2, 8016a10 <USBH_HandleControl+0x24>)
 8016a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016a0e:	bf00      	nop
 8016a10:	08016a3d 	.word	0x08016a3d
 8016a14:	08016a57 	.word	0x08016a57
 8016a18:	08016ac1 	.word	0x08016ac1
 8016a1c:	08016ae7 	.word	0x08016ae7
 8016a20:	08016b1f 	.word	0x08016b1f
 8016a24:	08016b4b 	.word	0x08016b4b
 8016a28:	08016b9d 	.word	0x08016b9d
 8016a2c:	08016bbf 	.word	0x08016bbf
 8016a30:	08016bfb 	.word	0x08016bfb
 8016a34:	08016c23 	.word	0x08016c23
 8016a38:	08016c61 	.word	0x08016c61
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8016a3c:	687b      	ldr	r3, [r7, #4]
 8016a3e:	f103 0110 	add.w	r1, r3, #16
 8016a42:	687b      	ldr	r3, [r7, #4]
 8016a44:	795b      	ldrb	r3, [r3, #5]
 8016a46:	461a      	mov	r2, r3
 8016a48:	6878      	ldr	r0, [r7, #4]
 8016a4a:	f000 f945 	bl	8016cd8 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8016a4e:	687b      	ldr	r3, [r7, #4]
 8016a50:	2202      	movs	r2, #2
 8016a52:	761a      	strb	r2, [r3, #24]
      break;
 8016a54:	e13b      	b.n	8016cce <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8016a56:	687b      	ldr	r3, [r7, #4]
 8016a58:	795b      	ldrb	r3, [r3, #5]
 8016a5a:	4619      	mov	r1, r3
 8016a5c:	6878      	ldr	r0, [r7, #4]
 8016a5e:	f000 fc7b 	bl	8017358 <USBH_LL_GetURBState>
 8016a62:	4603      	mov	r3, r0
 8016a64:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8016a66:	7bbb      	ldrb	r3, [r7, #14]
 8016a68:	2b01      	cmp	r3, #1
 8016a6a:	d11e      	bne.n	8016aaa <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8016a6c:	687b      	ldr	r3, [r7, #4]
 8016a6e:	7c1b      	ldrb	r3, [r3, #16]
 8016a70:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8016a74:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8016a76:	687b      	ldr	r3, [r7, #4]
 8016a78:	8adb      	ldrh	r3, [r3, #22]
 8016a7a:	2b00      	cmp	r3, #0
 8016a7c:	d00a      	beq.n	8016a94 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8016a7e:	7b7b      	ldrb	r3, [r7, #13]
 8016a80:	2b80      	cmp	r3, #128	; 0x80
 8016a82:	d103      	bne.n	8016a8c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8016a84:	687b      	ldr	r3, [r7, #4]
 8016a86:	2203      	movs	r2, #3
 8016a88:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8016a8a:	e117      	b.n	8016cbc <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 8016a8c:	687b      	ldr	r3, [r7, #4]
 8016a8e:	2205      	movs	r2, #5
 8016a90:	761a      	strb	r2, [r3, #24]
      break;
 8016a92:	e113      	b.n	8016cbc <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 8016a94:	7b7b      	ldrb	r3, [r7, #13]
 8016a96:	2b80      	cmp	r3, #128	; 0x80
 8016a98:	d103      	bne.n	8016aa2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8016a9a:	687b      	ldr	r3, [r7, #4]
 8016a9c:	2209      	movs	r2, #9
 8016a9e:	761a      	strb	r2, [r3, #24]
      break;
 8016aa0:	e10c      	b.n	8016cbc <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 8016aa2:	687b      	ldr	r3, [r7, #4]
 8016aa4:	2207      	movs	r2, #7
 8016aa6:	761a      	strb	r2, [r3, #24]
      break;
 8016aa8:	e108      	b.n	8016cbc <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8016aaa:	7bbb      	ldrb	r3, [r7, #14]
 8016aac:	2b04      	cmp	r3, #4
 8016aae:	d003      	beq.n	8016ab8 <USBH_HandleControl+0xcc>
 8016ab0:	7bbb      	ldrb	r3, [r7, #14]
 8016ab2:	2b02      	cmp	r3, #2
 8016ab4:	f040 8102 	bne.w	8016cbc <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8016ab8:	687b      	ldr	r3, [r7, #4]
 8016aba:	220b      	movs	r2, #11
 8016abc:	761a      	strb	r2, [r3, #24]
      break;
 8016abe:	e0fd      	b.n	8016cbc <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8016ac0:	687b      	ldr	r3, [r7, #4]
 8016ac2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8016ac6:	b29a      	uxth	r2, r3
 8016ac8:	687b      	ldr	r3, [r7, #4]
 8016aca:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8016acc:	687b      	ldr	r3, [r7, #4]
 8016ace:	6899      	ldr	r1, [r3, #8]
 8016ad0:	687b      	ldr	r3, [r7, #4]
 8016ad2:	899a      	ldrh	r2, [r3, #12]
 8016ad4:	687b      	ldr	r3, [r7, #4]
 8016ad6:	791b      	ldrb	r3, [r3, #4]
 8016ad8:	6878      	ldr	r0, [r7, #4]
 8016ada:	f000 f93c 	bl	8016d56 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8016ade:	687b      	ldr	r3, [r7, #4]
 8016ae0:	2204      	movs	r2, #4
 8016ae2:	761a      	strb	r2, [r3, #24]
      break;
 8016ae4:	e0f3      	b.n	8016cce <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8016ae6:	687b      	ldr	r3, [r7, #4]
 8016ae8:	791b      	ldrb	r3, [r3, #4]
 8016aea:	4619      	mov	r1, r3
 8016aec:	6878      	ldr	r0, [r7, #4]
 8016aee:	f000 fc33 	bl	8017358 <USBH_LL_GetURBState>
 8016af2:	4603      	mov	r3, r0
 8016af4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8016af6:	7bbb      	ldrb	r3, [r7, #14]
 8016af8:	2b01      	cmp	r3, #1
 8016afa:	d102      	bne.n	8016b02 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8016afc:	687b      	ldr	r3, [r7, #4]
 8016afe:	2209      	movs	r2, #9
 8016b00:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8016b02:	7bbb      	ldrb	r3, [r7, #14]
 8016b04:	2b05      	cmp	r3, #5
 8016b06:	d102      	bne.n	8016b0e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8016b08:	2303      	movs	r3, #3
 8016b0a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8016b0c:	e0d8      	b.n	8016cc0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8016b0e:	7bbb      	ldrb	r3, [r7, #14]
 8016b10:	2b04      	cmp	r3, #4
 8016b12:	f040 80d5 	bne.w	8016cc0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8016b16:	687b      	ldr	r3, [r7, #4]
 8016b18:	220b      	movs	r2, #11
 8016b1a:	761a      	strb	r2, [r3, #24]
      break;
 8016b1c:	e0d0      	b.n	8016cc0 <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8016b1e:	687b      	ldr	r3, [r7, #4]
 8016b20:	6899      	ldr	r1, [r3, #8]
 8016b22:	687b      	ldr	r3, [r7, #4]
 8016b24:	899a      	ldrh	r2, [r3, #12]
 8016b26:	687b      	ldr	r3, [r7, #4]
 8016b28:	7958      	ldrb	r0, [r3, #5]
 8016b2a:	2301      	movs	r3, #1
 8016b2c:	9300      	str	r3, [sp, #0]
 8016b2e:	4603      	mov	r3, r0
 8016b30:	6878      	ldr	r0, [r7, #4]
 8016b32:	f000 f8eb 	bl	8016d0c <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8016b36:	687b      	ldr	r3, [r7, #4]
 8016b38:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8016b3c:	b29a      	uxth	r2, r3
 8016b3e:	687b      	ldr	r3, [r7, #4]
 8016b40:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8016b42:	687b      	ldr	r3, [r7, #4]
 8016b44:	2206      	movs	r2, #6
 8016b46:	761a      	strb	r2, [r3, #24]
      break;
 8016b48:	e0c1      	b.n	8016cce <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8016b4a:	687b      	ldr	r3, [r7, #4]
 8016b4c:	795b      	ldrb	r3, [r3, #5]
 8016b4e:	4619      	mov	r1, r3
 8016b50:	6878      	ldr	r0, [r7, #4]
 8016b52:	f000 fc01 	bl	8017358 <USBH_LL_GetURBState>
 8016b56:	4603      	mov	r3, r0
 8016b58:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8016b5a:	7bbb      	ldrb	r3, [r7, #14]
 8016b5c:	2b01      	cmp	r3, #1
 8016b5e:	d103      	bne.n	8016b68 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8016b60:	687b      	ldr	r3, [r7, #4]
 8016b62:	2207      	movs	r2, #7
 8016b64:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8016b66:	e0ad      	b.n	8016cc4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 8016b68:	7bbb      	ldrb	r3, [r7, #14]
 8016b6a:	2b05      	cmp	r3, #5
 8016b6c:	d105      	bne.n	8016b7a <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 8016b6e:	687b      	ldr	r3, [r7, #4]
 8016b70:	220c      	movs	r2, #12
 8016b72:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8016b74:	2303      	movs	r3, #3
 8016b76:	73fb      	strb	r3, [r7, #15]
      break;
 8016b78:	e0a4      	b.n	8016cc4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 8016b7a:	7bbb      	ldrb	r3, [r7, #14]
 8016b7c:	2b02      	cmp	r3, #2
 8016b7e:	d103      	bne.n	8016b88 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 8016b80:	687b      	ldr	r3, [r7, #4]
 8016b82:	2205      	movs	r2, #5
 8016b84:	761a      	strb	r2, [r3, #24]
      break;
 8016b86:	e09d      	b.n	8016cc4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 8016b88:	7bbb      	ldrb	r3, [r7, #14]
 8016b8a:	2b04      	cmp	r3, #4
 8016b8c:	f040 809a 	bne.w	8016cc4 <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 8016b90:	687b      	ldr	r3, [r7, #4]
 8016b92:	220b      	movs	r2, #11
 8016b94:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8016b96:	2302      	movs	r3, #2
 8016b98:	73fb      	strb	r3, [r7, #15]
      break;
 8016b9a:	e093      	b.n	8016cc4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8016b9c:	687b      	ldr	r3, [r7, #4]
 8016b9e:	791b      	ldrb	r3, [r3, #4]
 8016ba0:	2200      	movs	r2, #0
 8016ba2:	2100      	movs	r1, #0
 8016ba4:	6878      	ldr	r0, [r7, #4]
 8016ba6:	f000 f8d6 	bl	8016d56 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8016baa:	687b      	ldr	r3, [r7, #4]
 8016bac:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8016bb0:	b29a      	uxth	r2, r3
 8016bb2:	687b      	ldr	r3, [r7, #4]
 8016bb4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8016bb6:	687b      	ldr	r3, [r7, #4]
 8016bb8:	2208      	movs	r2, #8
 8016bba:	761a      	strb	r2, [r3, #24]

      break;
 8016bbc:	e087      	b.n	8016cce <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8016bbe:	687b      	ldr	r3, [r7, #4]
 8016bc0:	791b      	ldrb	r3, [r3, #4]
 8016bc2:	4619      	mov	r1, r3
 8016bc4:	6878      	ldr	r0, [r7, #4]
 8016bc6:	f000 fbc7 	bl	8017358 <USBH_LL_GetURBState>
 8016bca:	4603      	mov	r3, r0
 8016bcc:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8016bce:	7bbb      	ldrb	r3, [r7, #14]
 8016bd0:	2b01      	cmp	r3, #1
 8016bd2:	d105      	bne.n	8016be0 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8016bd4:	687b      	ldr	r3, [r7, #4]
 8016bd6:	220d      	movs	r2, #13
 8016bd8:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8016bda:	2300      	movs	r3, #0
 8016bdc:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8016bde:	e073      	b.n	8016cc8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 8016be0:	7bbb      	ldrb	r3, [r7, #14]
 8016be2:	2b04      	cmp	r3, #4
 8016be4:	d103      	bne.n	8016bee <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 8016be6:	687b      	ldr	r3, [r7, #4]
 8016be8:	220b      	movs	r2, #11
 8016bea:	761a      	strb	r2, [r3, #24]
      break;
 8016bec:	e06c      	b.n	8016cc8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 8016bee:	7bbb      	ldrb	r3, [r7, #14]
 8016bf0:	2b05      	cmp	r3, #5
 8016bf2:	d169      	bne.n	8016cc8 <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 8016bf4:	2303      	movs	r3, #3
 8016bf6:	73fb      	strb	r3, [r7, #15]
      break;
 8016bf8:	e066      	b.n	8016cc8 <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8016bfa:	687b      	ldr	r3, [r7, #4]
 8016bfc:	795a      	ldrb	r2, [r3, #5]
 8016bfe:	2301      	movs	r3, #1
 8016c00:	9300      	str	r3, [sp, #0]
 8016c02:	4613      	mov	r3, r2
 8016c04:	2200      	movs	r2, #0
 8016c06:	2100      	movs	r1, #0
 8016c08:	6878      	ldr	r0, [r7, #4]
 8016c0a:	f000 f87f 	bl	8016d0c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8016c0e:	687b      	ldr	r3, [r7, #4]
 8016c10:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8016c14:	b29a      	uxth	r2, r3
 8016c16:	687b      	ldr	r3, [r7, #4]
 8016c18:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8016c1a:	687b      	ldr	r3, [r7, #4]
 8016c1c:	220a      	movs	r2, #10
 8016c1e:	761a      	strb	r2, [r3, #24]
      break;
 8016c20:	e055      	b.n	8016cce <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8016c22:	687b      	ldr	r3, [r7, #4]
 8016c24:	795b      	ldrb	r3, [r3, #5]
 8016c26:	4619      	mov	r1, r3
 8016c28:	6878      	ldr	r0, [r7, #4]
 8016c2a:	f000 fb95 	bl	8017358 <USBH_LL_GetURBState>
 8016c2e:	4603      	mov	r3, r0
 8016c30:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8016c32:	7bbb      	ldrb	r3, [r7, #14]
 8016c34:	2b01      	cmp	r3, #1
 8016c36:	d105      	bne.n	8016c44 <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 8016c38:	2300      	movs	r3, #0
 8016c3a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8016c3c:	687b      	ldr	r3, [r7, #4]
 8016c3e:	220d      	movs	r2, #13
 8016c40:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8016c42:	e043      	b.n	8016ccc <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 8016c44:	7bbb      	ldrb	r3, [r7, #14]
 8016c46:	2b02      	cmp	r3, #2
 8016c48:	d103      	bne.n	8016c52 <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 8016c4a:	687b      	ldr	r3, [r7, #4]
 8016c4c:	2209      	movs	r2, #9
 8016c4e:	761a      	strb	r2, [r3, #24]
      break;
 8016c50:	e03c      	b.n	8016ccc <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 8016c52:	7bbb      	ldrb	r3, [r7, #14]
 8016c54:	2b04      	cmp	r3, #4
 8016c56:	d139      	bne.n	8016ccc <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 8016c58:	687b      	ldr	r3, [r7, #4]
 8016c5a:	220b      	movs	r2, #11
 8016c5c:	761a      	strb	r2, [r3, #24]
      break;
 8016c5e:	e035      	b.n	8016ccc <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8016c60:	687b      	ldr	r3, [r7, #4]
 8016c62:	7e5b      	ldrb	r3, [r3, #25]
 8016c64:	3301      	adds	r3, #1
 8016c66:	b2da      	uxtb	r2, r3
 8016c68:	687b      	ldr	r3, [r7, #4]
 8016c6a:	765a      	strb	r2, [r3, #25]
 8016c6c:	687b      	ldr	r3, [r7, #4]
 8016c6e:	7e5b      	ldrb	r3, [r3, #25]
 8016c70:	2b02      	cmp	r3, #2
 8016c72:	d806      	bhi.n	8016c82 <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8016c74:	687b      	ldr	r3, [r7, #4]
 8016c76:	2201      	movs	r2, #1
 8016c78:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8016c7a:	687b      	ldr	r3, [r7, #4]
 8016c7c:	2201      	movs	r2, #1
 8016c7e:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8016c80:	e025      	b.n	8016cce <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8016c82:	687b      	ldr	r3, [r7, #4]
 8016c84:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8016c88:	2106      	movs	r1, #6
 8016c8a:	6878      	ldr	r0, [r7, #4]
 8016c8c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8016c8e:	687b      	ldr	r3, [r7, #4]
 8016c90:	2200      	movs	r2, #0
 8016c92:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8016c94:	687b      	ldr	r3, [r7, #4]
 8016c96:	795b      	ldrb	r3, [r3, #5]
 8016c98:	4619      	mov	r1, r3
 8016c9a:	6878      	ldr	r0, [r7, #4]
 8016c9c:	f000 f90c 	bl	8016eb8 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8016ca0:	687b      	ldr	r3, [r7, #4]
 8016ca2:	791b      	ldrb	r3, [r3, #4]
 8016ca4:	4619      	mov	r1, r3
 8016ca6:	6878      	ldr	r0, [r7, #4]
 8016ca8:	f000 f906 	bl	8016eb8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8016cac:	687b      	ldr	r3, [r7, #4]
 8016cae:	2200      	movs	r2, #0
 8016cb0:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8016cb2:	2302      	movs	r3, #2
 8016cb4:	73fb      	strb	r3, [r7, #15]
      break;
 8016cb6:	e00a      	b.n	8016cce <USBH_HandleControl+0x2e2>

    default:
      break;
 8016cb8:	bf00      	nop
 8016cba:	e008      	b.n	8016cce <USBH_HandleControl+0x2e2>
      break;
 8016cbc:	bf00      	nop
 8016cbe:	e006      	b.n	8016cce <USBH_HandleControl+0x2e2>
      break;
 8016cc0:	bf00      	nop
 8016cc2:	e004      	b.n	8016cce <USBH_HandleControl+0x2e2>
      break;
 8016cc4:	bf00      	nop
 8016cc6:	e002      	b.n	8016cce <USBH_HandleControl+0x2e2>
      break;
 8016cc8:	bf00      	nop
 8016cca:	e000      	b.n	8016cce <USBH_HandleControl+0x2e2>
      break;
 8016ccc:	bf00      	nop
  }

  return status;
 8016cce:	7bfb      	ldrb	r3, [r7, #15]
}
 8016cd0:	4618      	mov	r0, r3
 8016cd2:	3710      	adds	r7, #16
 8016cd4:	46bd      	mov	sp, r7
 8016cd6:	bd80      	pop	{r7, pc}

08016cd8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8016cd8:	b580      	push	{r7, lr}
 8016cda:	b088      	sub	sp, #32
 8016cdc:	af04      	add	r7, sp, #16
 8016cde:	60f8      	str	r0, [r7, #12]
 8016ce0:	60b9      	str	r1, [r7, #8]
 8016ce2:	4613      	mov	r3, r2
 8016ce4:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8016ce6:	79f9      	ldrb	r1, [r7, #7]
 8016ce8:	2300      	movs	r3, #0
 8016cea:	9303      	str	r3, [sp, #12]
 8016cec:	2308      	movs	r3, #8
 8016cee:	9302      	str	r3, [sp, #8]
 8016cf0:	68bb      	ldr	r3, [r7, #8]
 8016cf2:	9301      	str	r3, [sp, #4]
 8016cf4:	2300      	movs	r3, #0
 8016cf6:	9300      	str	r3, [sp, #0]
 8016cf8:	2300      	movs	r3, #0
 8016cfa:	2200      	movs	r2, #0
 8016cfc:	68f8      	ldr	r0, [r7, #12]
 8016cfe:	f000 fafa 	bl	80172f6 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8016d02:	2300      	movs	r3, #0
}
 8016d04:	4618      	mov	r0, r3
 8016d06:	3710      	adds	r7, #16
 8016d08:	46bd      	mov	sp, r7
 8016d0a:	bd80      	pop	{r7, pc}

08016d0c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8016d0c:	b580      	push	{r7, lr}
 8016d0e:	b088      	sub	sp, #32
 8016d10:	af04      	add	r7, sp, #16
 8016d12:	60f8      	str	r0, [r7, #12]
 8016d14:	60b9      	str	r1, [r7, #8]
 8016d16:	4611      	mov	r1, r2
 8016d18:	461a      	mov	r2, r3
 8016d1a:	460b      	mov	r3, r1
 8016d1c:	80fb      	strh	r3, [r7, #6]
 8016d1e:	4613      	mov	r3, r2
 8016d20:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8016d22:	68fb      	ldr	r3, [r7, #12]
 8016d24:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8016d28:	2b00      	cmp	r3, #0
 8016d2a:	d001      	beq.n	8016d30 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8016d2c:	2300      	movs	r3, #0
 8016d2e:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8016d30:	7979      	ldrb	r1, [r7, #5]
 8016d32:	7e3b      	ldrb	r3, [r7, #24]
 8016d34:	9303      	str	r3, [sp, #12]
 8016d36:	88fb      	ldrh	r3, [r7, #6]
 8016d38:	9302      	str	r3, [sp, #8]
 8016d3a:	68bb      	ldr	r3, [r7, #8]
 8016d3c:	9301      	str	r3, [sp, #4]
 8016d3e:	2301      	movs	r3, #1
 8016d40:	9300      	str	r3, [sp, #0]
 8016d42:	2300      	movs	r3, #0
 8016d44:	2200      	movs	r2, #0
 8016d46:	68f8      	ldr	r0, [r7, #12]
 8016d48:	f000 fad5 	bl	80172f6 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8016d4c:	2300      	movs	r3, #0
}
 8016d4e:	4618      	mov	r0, r3
 8016d50:	3710      	adds	r7, #16
 8016d52:	46bd      	mov	sp, r7
 8016d54:	bd80      	pop	{r7, pc}

08016d56 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8016d56:	b580      	push	{r7, lr}
 8016d58:	b088      	sub	sp, #32
 8016d5a:	af04      	add	r7, sp, #16
 8016d5c:	60f8      	str	r0, [r7, #12]
 8016d5e:	60b9      	str	r1, [r7, #8]
 8016d60:	4611      	mov	r1, r2
 8016d62:	461a      	mov	r2, r3
 8016d64:	460b      	mov	r3, r1
 8016d66:	80fb      	strh	r3, [r7, #6]
 8016d68:	4613      	mov	r3, r2
 8016d6a:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8016d6c:	7979      	ldrb	r1, [r7, #5]
 8016d6e:	2300      	movs	r3, #0
 8016d70:	9303      	str	r3, [sp, #12]
 8016d72:	88fb      	ldrh	r3, [r7, #6]
 8016d74:	9302      	str	r3, [sp, #8]
 8016d76:	68bb      	ldr	r3, [r7, #8]
 8016d78:	9301      	str	r3, [sp, #4]
 8016d7a:	2301      	movs	r3, #1
 8016d7c:	9300      	str	r3, [sp, #0]
 8016d7e:	2300      	movs	r3, #0
 8016d80:	2201      	movs	r2, #1
 8016d82:	68f8      	ldr	r0, [r7, #12]
 8016d84:	f000 fab7 	bl	80172f6 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8016d88:	2300      	movs	r3, #0

}
 8016d8a:	4618      	mov	r0, r3
 8016d8c:	3710      	adds	r7, #16
 8016d8e:	46bd      	mov	sp, r7
 8016d90:	bd80      	pop	{r7, pc}

08016d92 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8016d92:	b580      	push	{r7, lr}
 8016d94:	b088      	sub	sp, #32
 8016d96:	af04      	add	r7, sp, #16
 8016d98:	60f8      	str	r0, [r7, #12]
 8016d9a:	60b9      	str	r1, [r7, #8]
 8016d9c:	4611      	mov	r1, r2
 8016d9e:	461a      	mov	r2, r3
 8016da0:	460b      	mov	r3, r1
 8016da2:	80fb      	strh	r3, [r7, #6]
 8016da4:	4613      	mov	r3, r2
 8016da6:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8016da8:	68fb      	ldr	r3, [r7, #12]
 8016daa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8016dae:	2b00      	cmp	r3, #0
 8016db0:	d001      	beq.n	8016db6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8016db2:	2300      	movs	r3, #0
 8016db4:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8016db6:	7979      	ldrb	r1, [r7, #5]
 8016db8:	7e3b      	ldrb	r3, [r7, #24]
 8016dba:	9303      	str	r3, [sp, #12]
 8016dbc:	88fb      	ldrh	r3, [r7, #6]
 8016dbe:	9302      	str	r3, [sp, #8]
 8016dc0:	68bb      	ldr	r3, [r7, #8]
 8016dc2:	9301      	str	r3, [sp, #4]
 8016dc4:	2301      	movs	r3, #1
 8016dc6:	9300      	str	r3, [sp, #0]
 8016dc8:	2302      	movs	r3, #2
 8016dca:	2200      	movs	r2, #0
 8016dcc:	68f8      	ldr	r0, [r7, #12]
 8016dce:	f000 fa92 	bl	80172f6 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8016dd2:	2300      	movs	r3, #0
}
 8016dd4:	4618      	mov	r0, r3
 8016dd6:	3710      	adds	r7, #16
 8016dd8:	46bd      	mov	sp, r7
 8016dda:	bd80      	pop	{r7, pc}

08016ddc <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8016ddc:	b580      	push	{r7, lr}
 8016dde:	b088      	sub	sp, #32
 8016de0:	af04      	add	r7, sp, #16
 8016de2:	60f8      	str	r0, [r7, #12]
 8016de4:	60b9      	str	r1, [r7, #8]
 8016de6:	4611      	mov	r1, r2
 8016de8:	461a      	mov	r2, r3
 8016dea:	460b      	mov	r3, r1
 8016dec:	80fb      	strh	r3, [r7, #6]
 8016dee:	4613      	mov	r3, r2
 8016df0:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8016df2:	7979      	ldrb	r1, [r7, #5]
 8016df4:	2300      	movs	r3, #0
 8016df6:	9303      	str	r3, [sp, #12]
 8016df8:	88fb      	ldrh	r3, [r7, #6]
 8016dfa:	9302      	str	r3, [sp, #8]
 8016dfc:	68bb      	ldr	r3, [r7, #8]
 8016dfe:	9301      	str	r3, [sp, #4]
 8016e00:	2301      	movs	r3, #1
 8016e02:	9300      	str	r3, [sp, #0]
 8016e04:	2302      	movs	r3, #2
 8016e06:	2201      	movs	r2, #1
 8016e08:	68f8      	ldr	r0, [r7, #12]
 8016e0a:	f000 fa74 	bl	80172f6 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8016e0e:	2300      	movs	r3, #0
}
 8016e10:	4618      	mov	r0, r3
 8016e12:	3710      	adds	r7, #16
 8016e14:	46bd      	mov	sp, r7
 8016e16:	bd80      	pop	{r7, pc}

08016e18 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8016e18:	b580      	push	{r7, lr}
 8016e1a:	b086      	sub	sp, #24
 8016e1c:	af04      	add	r7, sp, #16
 8016e1e:	6078      	str	r0, [r7, #4]
 8016e20:	4608      	mov	r0, r1
 8016e22:	4611      	mov	r1, r2
 8016e24:	461a      	mov	r2, r3
 8016e26:	4603      	mov	r3, r0
 8016e28:	70fb      	strb	r3, [r7, #3]
 8016e2a:	460b      	mov	r3, r1
 8016e2c:	70bb      	strb	r3, [r7, #2]
 8016e2e:	4613      	mov	r3, r2
 8016e30:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8016e32:	7878      	ldrb	r0, [r7, #1]
 8016e34:	78ba      	ldrb	r2, [r7, #2]
 8016e36:	78f9      	ldrb	r1, [r7, #3]
 8016e38:	8b3b      	ldrh	r3, [r7, #24]
 8016e3a:	9302      	str	r3, [sp, #8]
 8016e3c:	7d3b      	ldrb	r3, [r7, #20]
 8016e3e:	9301      	str	r3, [sp, #4]
 8016e40:	7c3b      	ldrb	r3, [r7, #16]
 8016e42:	9300      	str	r3, [sp, #0]
 8016e44:	4603      	mov	r3, r0
 8016e46:	6878      	ldr	r0, [r7, #4]
 8016e48:	f000 fa07 	bl	801725a <USBH_LL_OpenPipe>

  return USBH_OK;
 8016e4c:	2300      	movs	r3, #0
}
 8016e4e:	4618      	mov	r0, r3
 8016e50:	3708      	adds	r7, #8
 8016e52:	46bd      	mov	sp, r7
 8016e54:	bd80      	pop	{r7, pc}

08016e56 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8016e56:	b580      	push	{r7, lr}
 8016e58:	b082      	sub	sp, #8
 8016e5a:	af00      	add	r7, sp, #0
 8016e5c:	6078      	str	r0, [r7, #4]
 8016e5e:	460b      	mov	r3, r1
 8016e60:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8016e62:	78fb      	ldrb	r3, [r7, #3]
 8016e64:	4619      	mov	r1, r3
 8016e66:	6878      	ldr	r0, [r7, #4]
 8016e68:	f000 fa26 	bl	80172b8 <USBH_LL_ClosePipe>

  return USBH_OK;
 8016e6c:	2300      	movs	r3, #0
}
 8016e6e:	4618      	mov	r0, r3
 8016e70:	3708      	adds	r7, #8
 8016e72:	46bd      	mov	sp, r7
 8016e74:	bd80      	pop	{r7, pc}

08016e76 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8016e76:	b580      	push	{r7, lr}
 8016e78:	b084      	sub	sp, #16
 8016e7a:	af00      	add	r7, sp, #0
 8016e7c:	6078      	str	r0, [r7, #4]
 8016e7e:	460b      	mov	r3, r1
 8016e80:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8016e82:	6878      	ldr	r0, [r7, #4]
 8016e84:	f000 f836 	bl	8016ef4 <USBH_GetFreePipe>
 8016e88:	4603      	mov	r3, r0
 8016e8a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8016e8c:	89fb      	ldrh	r3, [r7, #14]
 8016e8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016e92:	4293      	cmp	r3, r2
 8016e94:	d00a      	beq.n	8016eac <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8016e96:	78fa      	ldrb	r2, [r7, #3]
 8016e98:	89fb      	ldrh	r3, [r7, #14]
 8016e9a:	f003 030f 	and.w	r3, r3, #15
 8016e9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8016ea2:	6879      	ldr	r1, [r7, #4]
 8016ea4:	33e0      	adds	r3, #224	; 0xe0
 8016ea6:	009b      	lsls	r3, r3, #2
 8016ea8:	440b      	add	r3, r1
 8016eaa:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8016eac:	89fb      	ldrh	r3, [r7, #14]
 8016eae:	b2db      	uxtb	r3, r3
}
 8016eb0:	4618      	mov	r0, r3
 8016eb2:	3710      	adds	r7, #16
 8016eb4:	46bd      	mov	sp, r7
 8016eb6:	bd80      	pop	{r7, pc}

08016eb8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8016eb8:	b480      	push	{r7}
 8016eba:	b083      	sub	sp, #12
 8016ebc:	af00      	add	r7, sp, #0
 8016ebe:	6078      	str	r0, [r7, #4]
 8016ec0:	460b      	mov	r3, r1
 8016ec2:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8016ec4:	78fb      	ldrb	r3, [r7, #3]
 8016ec6:	2b0a      	cmp	r3, #10
 8016ec8:	d80d      	bhi.n	8016ee6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8016eca:	78fb      	ldrb	r3, [r7, #3]
 8016ecc:	687a      	ldr	r2, [r7, #4]
 8016ece:	33e0      	adds	r3, #224	; 0xe0
 8016ed0:	009b      	lsls	r3, r3, #2
 8016ed2:	4413      	add	r3, r2
 8016ed4:	685a      	ldr	r2, [r3, #4]
 8016ed6:	78fb      	ldrb	r3, [r7, #3]
 8016ed8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8016edc:	6879      	ldr	r1, [r7, #4]
 8016ede:	33e0      	adds	r3, #224	; 0xe0
 8016ee0:	009b      	lsls	r3, r3, #2
 8016ee2:	440b      	add	r3, r1
 8016ee4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8016ee6:	2300      	movs	r3, #0
}
 8016ee8:	4618      	mov	r0, r3
 8016eea:	370c      	adds	r7, #12
 8016eec:	46bd      	mov	sp, r7
 8016eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ef2:	4770      	bx	lr

08016ef4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8016ef4:	b480      	push	{r7}
 8016ef6:	b085      	sub	sp, #20
 8016ef8:	af00      	add	r7, sp, #0
 8016efa:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8016efc:	2300      	movs	r3, #0
 8016efe:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8016f00:	2300      	movs	r3, #0
 8016f02:	73fb      	strb	r3, [r7, #15]
 8016f04:	e00f      	b.n	8016f26 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8016f06:	7bfb      	ldrb	r3, [r7, #15]
 8016f08:	687a      	ldr	r2, [r7, #4]
 8016f0a:	33e0      	adds	r3, #224	; 0xe0
 8016f0c:	009b      	lsls	r3, r3, #2
 8016f0e:	4413      	add	r3, r2
 8016f10:	685b      	ldr	r3, [r3, #4]
 8016f12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8016f16:	2b00      	cmp	r3, #0
 8016f18:	d102      	bne.n	8016f20 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8016f1a:	7bfb      	ldrb	r3, [r7, #15]
 8016f1c:	b29b      	uxth	r3, r3
 8016f1e:	e007      	b.n	8016f30 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8016f20:	7bfb      	ldrb	r3, [r7, #15]
 8016f22:	3301      	adds	r3, #1
 8016f24:	73fb      	strb	r3, [r7, #15]
 8016f26:	7bfb      	ldrb	r3, [r7, #15]
 8016f28:	2b0a      	cmp	r3, #10
 8016f2a:	d9ec      	bls.n	8016f06 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8016f2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8016f30:	4618      	mov	r0, r3
 8016f32:	3714      	adds	r7, #20
 8016f34:	46bd      	mov	sp, r7
 8016f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f3a:	4770      	bx	lr

08016f3c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8016f3c:	b580      	push	{r7, lr}
 8016f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8016f40:	2201      	movs	r2, #1
 8016f42:	490e      	ldr	r1, [pc, #56]	; (8016f7c <MX_USB_HOST_Init+0x40>)
 8016f44:	480e      	ldr	r0, [pc, #56]	; (8016f80 <MX_USB_HOST_Init+0x44>)
 8016f46:	f7ff fb35 	bl	80165b4 <USBH_Init>
 8016f4a:	4603      	mov	r3, r0
 8016f4c:	2b00      	cmp	r3, #0
 8016f4e:	d001      	beq.n	8016f54 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8016f50:	f7f9 fada 	bl	8010508 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8016f54:	490b      	ldr	r1, [pc, #44]	; (8016f84 <MX_USB_HOST_Init+0x48>)
 8016f56:	480a      	ldr	r0, [pc, #40]	; (8016f80 <MX_USB_HOST_Init+0x44>)
 8016f58:	f7ff fbba 	bl	80166d0 <USBH_RegisterClass>
 8016f5c:	4603      	mov	r3, r0
 8016f5e:	2b00      	cmp	r3, #0
 8016f60:	d001      	beq.n	8016f66 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8016f62:	f7f9 fad1 	bl	8010508 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8016f66:	4806      	ldr	r0, [pc, #24]	; (8016f80 <MX_USB_HOST_Init+0x44>)
 8016f68:	f7ff fc3e 	bl	80167e8 <USBH_Start>
 8016f6c:	4603      	mov	r3, r0
 8016f6e:	2b00      	cmp	r3, #0
 8016f70:	d001      	beq.n	8016f76 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8016f72:	f7f9 fac9 	bl	8010508 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8016f76:	bf00      	nop
 8016f78:	bd80      	pop	{r7, pc}
 8016f7a:	bf00      	nop
 8016f7c:	08016f89 	.word	0x08016f89
 8016f80:	20000430 	.word	0x20000430
 8016f84:	200001f4 	.word	0x200001f4

08016f88 <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8016f88:	b480      	push	{r7}
 8016f8a:	b083      	sub	sp, #12
 8016f8c:	af00      	add	r7, sp, #0
 8016f8e:	6078      	str	r0, [r7, #4]
 8016f90:	460b      	mov	r3, r1
 8016f92:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8016f94:	78fb      	ldrb	r3, [r7, #3]
 8016f96:	3b01      	subs	r3, #1
 8016f98:	2b04      	cmp	r3, #4
 8016f9a:	d819      	bhi.n	8016fd0 <USBH_UserProcess+0x48>
 8016f9c:	a201      	add	r2, pc, #4	; (adr r2, 8016fa4 <USBH_UserProcess+0x1c>)
 8016f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016fa2:	bf00      	nop
 8016fa4:	08016fd1 	.word	0x08016fd1
 8016fa8:	08016fc1 	.word	0x08016fc1
 8016fac:	08016fd1 	.word	0x08016fd1
 8016fb0:	08016fc9 	.word	0x08016fc9
 8016fb4:	08016fb9 	.word	0x08016fb9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8016fb8:	4b09      	ldr	r3, [pc, #36]	; (8016fe0 <USBH_UserProcess+0x58>)
 8016fba:	2203      	movs	r2, #3
 8016fbc:	701a      	strb	r2, [r3, #0]
  break;
 8016fbe:	e008      	b.n	8016fd2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8016fc0:	4b07      	ldr	r3, [pc, #28]	; (8016fe0 <USBH_UserProcess+0x58>)
 8016fc2:	2202      	movs	r2, #2
 8016fc4:	701a      	strb	r2, [r3, #0]
  break;
 8016fc6:	e004      	b.n	8016fd2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8016fc8:	4b05      	ldr	r3, [pc, #20]	; (8016fe0 <USBH_UserProcess+0x58>)
 8016fca:	2201      	movs	r2, #1
 8016fcc:	701a      	strb	r2, [r3, #0]
  break;
 8016fce:	e000      	b.n	8016fd2 <USBH_UserProcess+0x4a>

  default:
  break;
 8016fd0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8016fd2:	bf00      	nop
 8016fd4:	370c      	adds	r7, #12
 8016fd6:	46bd      	mov	sp, r7
 8016fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fdc:	4770      	bx	lr
 8016fde:	bf00      	nop
 8016fe0:	200002a0 	.word	0x200002a0

08016fe4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8016fe4:	b580      	push	{r7, lr}
 8016fe6:	b08a      	sub	sp, #40	; 0x28
 8016fe8:	af00      	add	r7, sp, #0
 8016fea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8016fec:	f107 0314 	add.w	r3, r7, #20
 8016ff0:	2200      	movs	r2, #0
 8016ff2:	601a      	str	r2, [r3, #0]
 8016ff4:	605a      	str	r2, [r3, #4]
 8016ff6:	609a      	str	r2, [r3, #8]
 8016ff8:	60da      	str	r2, [r3, #12]
 8016ffa:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8016ffc:	687b      	ldr	r3, [r7, #4]
 8016ffe:	681b      	ldr	r3, [r3, #0]
 8017000:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8017004:	d147      	bne.n	8017096 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8017006:	2300      	movs	r3, #0
 8017008:	613b      	str	r3, [r7, #16]
 801700a:	4b25      	ldr	r3, [pc, #148]	; (80170a0 <HAL_HCD_MspInit+0xbc>)
 801700c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801700e:	4a24      	ldr	r2, [pc, #144]	; (80170a0 <HAL_HCD_MspInit+0xbc>)
 8017010:	f043 0301 	orr.w	r3, r3, #1
 8017014:	6313      	str	r3, [r2, #48]	; 0x30
 8017016:	4b22      	ldr	r3, [pc, #136]	; (80170a0 <HAL_HCD_MspInit+0xbc>)
 8017018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801701a:	f003 0301 	and.w	r3, r3, #1
 801701e:	613b      	str	r3, [r7, #16]
 8017020:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8017022:	f44f 7300 	mov.w	r3, #512	; 0x200
 8017026:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8017028:	2300      	movs	r3, #0
 801702a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801702c:	2300      	movs	r3, #0
 801702e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8017030:	f107 0314 	add.w	r3, r7, #20
 8017034:	4619      	mov	r1, r3
 8017036:	481b      	ldr	r0, [pc, #108]	; (80170a4 <HAL_HCD_MspInit+0xc0>)
 8017038:	f7f9 fe64 	bl	8010d04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 801703c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8017040:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017042:	2302      	movs	r3, #2
 8017044:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017046:	2300      	movs	r3, #0
 8017048:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801704a:	2303      	movs	r3, #3
 801704c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801704e:	230a      	movs	r3, #10
 8017050:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8017052:	f107 0314 	add.w	r3, r7, #20
 8017056:	4619      	mov	r1, r3
 8017058:	4812      	ldr	r0, [pc, #72]	; (80170a4 <HAL_HCD_MspInit+0xc0>)
 801705a:	f7f9 fe53 	bl	8010d04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801705e:	4b10      	ldr	r3, [pc, #64]	; (80170a0 <HAL_HCD_MspInit+0xbc>)
 8017060:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017062:	4a0f      	ldr	r2, [pc, #60]	; (80170a0 <HAL_HCD_MspInit+0xbc>)
 8017064:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017068:	6353      	str	r3, [r2, #52]	; 0x34
 801706a:	2300      	movs	r3, #0
 801706c:	60fb      	str	r3, [r7, #12]
 801706e:	4b0c      	ldr	r3, [pc, #48]	; (80170a0 <HAL_HCD_MspInit+0xbc>)
 8017070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017072:	4a0b      	ldr	r2, [pc, #44]	; (80170a0 <HAL_HCD_MspInit+0xbc>)
 8017074:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8017078:	6453      	str	r3, [r2, #68]	; 0x44
 801707a:	4b09      	ldr	r3, [pc, #36]	; (80170a0 <HAL_HCD_MspInit+0xbc>)
 801707c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801707e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8017082:	60fb      	str	r3, [r7, #12]
 8017084:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8017086:	2200      	movs	r2, #0
 8017088:	2100      	movs	r1, #0
 801708a:	2043      	movs	r0, #67	; 0x43
 801708c:	f7f9 fe03 	bl	8010c96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8017090:	2043      	movs	r0, #67	; 0x43
 8017092:	f7f9 fe1c 	bl	8010cce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8017096:	bf00      	nop
 8017098:	3728      	adds	r7, #40	; 0x28
 801709a:	46bd      	mov	sp, r7
 801709c:	bd80      	pop	{r7, pc}
 801709e:	bf00      	nop
 80170a0:	40023800 	.word	0x40023800
 80170a4:	40020000 	.word	0x40020000

080170a8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80170a8:	b580      	push	{r7, lr}
 80170aa:	b082      	sub	sp, #8
 80170ac:	af00      	add	r7, sp, #0
 80170ae:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80170b0:	687b      	ldr	r3, [r7, #4]
 80170b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80170b6:	4618      	mov	r0, r3
 80170b8:	f7ff fbb5 	bl	8016826 <USBH_LL_IncTimer>
}
 80170bc:	bf00      	nop
 80170be:	3708      	adds	r7, #8
 80170c0:	46bd      	mov	sp, r7
 80170c2:	bd80      	pop	{r7, pc}

080170c4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80170c4:	b580      	push	{r7, lr}
 80170c6:	b082      	sub	sp, #8
 80170c8:	af00      	add	r7, sp, #0
 80170ca:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80170cc:	687b      	ldr	r3, [r7, #4]
 80170ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80170d2:	4618      	mov	r0, r3
 80170d4:	f7ff fbed 	bl	80168b2 <USBH_LL_Connect>
}
 80170d8:	bf00      	nop
 80170da:	3708      	adds	r7, #8
 80170dc:	46bd      	mov	sp, r7
 80170de:	bd80      	pop	{r7, pc}

080170e0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80170e0:	b580      	push	{r7, lr}
 80170e2:	b082      	sub	sp, #8
 80170e4:	af00      	add	r7, sp, #0
 80170e6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80170e8:	687b      	ldr	r3, [r7, #4]
 80170ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80170ee:	4618      	mov	r0, r3
 80170f0:	f7ff fbf6 	bl	80168e0 <USBH_LL_Disconnect>
}
 80170f4:	bf00      	nop
 80170f6:	3708      	adds	r7, #8
 80170f8:	46bd      	mov	sp, r7
 80170fa:	bd80      	pop	{r7, pc}

080170fc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80170fc:	b480      	push	{r7}
 80170fe:	b083      	sub	sp, #12
 8017100:	af00      	add	r7, sp, #0
 8017102:	6078      	str	r0, [r7, #4]
 8017104:	460b      	mov	r3, r1
 8017106:	70fb      	strb	r3, [r7, #3]
 8017108:	4613      	mov	r3, r2
 801710a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 801710c:	bf00      	nop
 801710e:	370c      	adds	r7, #12
 8017110:	46bd      	mov	sp, r7
 8017112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017116:	4770      	bx	lr

08017118 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8017118:	b580      	push	{r7, lr}
 801711a:	b082      	sub	sp, #8
 801711c:	af00      	add	r7, sp, #0
 801711e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8017120:	687b      	ldr	r3, [r7, #4]
 8017122:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8017126:	4618      	mov	r0, r3
 8017128:	f7ff fba7 	bl	801687a <USBH_LL_PortEnabled>
}
 801712c:	bf00      	nop
 801712e:	3708      	adds	r7, #8
 8017130:	46bd      	mov	sp, r7
 8017132:	bd80      	pop	{r7, pc}

08017134 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8017134:	b580      	push	{r7, lr}
 8017136:	b082      	sub	sp, #8
 8017138:	af00      	add	r7, sp, #0
 801713a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 801713c:	687b      	ldr	r3, [r7, #4]
 801713e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8017142:	4618      	mov	r0, r3
 8017144:	f7ff fba7 	bl	8016896 <USBH_LL_PortDisabled>
}
 8017148:	bf00      	nop
 801714a:	3708      	adds	r7, #8
 801714c:	46bd      	mov	sp, r7
 801714e:	bd80      	pop	{r7, pc}

08017150 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8017150:	b580      	push	{r7, lr}
 8017152:	b082      	sub	sp, #8
 8017154:	af00      	add	r7, sp, #0
 8017156:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8017158:	687b      	ldr	r3, [r7, #4]
 801715a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 801715e:	2b01      	cmp	r3, #1
 8017160:	d12a      	bne.n	80171b8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8017162:	4a18      	ldr	r2, [pc, #96]	; (80171c4 <USBH_LL_Init+0x74>)
 8017164:	687b      	ldr	r3, [r7, #4]
 8017166:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 801716a:	687b      	ldr	r3, [r7, #4]
 801716c:	4a15      	ldr	r2, [pc, #84]	; (80171c4 <USBH_LL_Init+0x74>)
 801716e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8017172:	4b14      	ldr	r3, [pc, #80]	; (80171c4 <USBH_LL_Init+0x74>)
 8017174:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8017178:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 801717a:	4b12      	ldr	r3, [pc, #72]	; (80171c4 <USBH_LL_Init+0x74>)
 801717c:	2208      	movs	r2, #8
 801717e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8017180:	4b10      	ldr	r3, [pc, #64]	; (80171c4 <USBH_LL_Init+0x74>)
 8017182:	2201      	movs	r2, #1
 8017184:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8017186:	4b0f      	ldr	r3, [pc, #60]	; (80171c4 <USBH_LL_Init+0x74>)
 8017188:	2200      	movs	r2, #0
 801718a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 801718c:	4b0d      	ldr	r3, [pc, #52]	; (80171c4 <USBH_LL_Init+0x74>)
 801718e:	2202      	movs	r2, #2
 8017190:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8017192:	4b0c      	ldr	r3, [pc, #48]	; (80171c4 <USBH_LL_Init+0x74>)
 8017194:	2200      	movs	r2, #0
 8017196:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8017198:	480a      	ldr	r0, [pc, #40]	; (80171c4 <USBH_LL_Init+0x74>)
 801719a:	f7f9 ff8a 	bl	80110b2 <HAL_HCD_Init>
 801719e:	4603      	mov	r3, r0
 80171a0:	2b00      	cmp	r3, #0
 80171a2:	d001      	beq.n	80171a8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80171a4:	f7f9 f9b0 	bl	8010508 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80171a8:	4806      	ldr	r0, [pc, #24]	; (80171c4 <USBH_LL_Init+0x74>)
 80171aa:	f7fa fb7f 	bl	80118ac <HAL_HCD_GetCurrentFrame>
 80171ae:	4603      	mov	r3, r0
 80171b0:	4619      	mov	r1, r3
 80171b2:	6878      	ldr	r0, [r7, #4]
 80171b4:	f7ff fb28 	bl	8016808 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80171b8:	2300      	movs	r3, #0
}
 80171ba:	4618      	mov	r0, r3
 80171bc:	3708      	adds	r7, #8
 80171be:	46bd      	mov	sp, r7
 80171c0:	bd80      	pop	{r7, pc}
 80171c2:	bf00      	nop
 80171c4:	20000808 	.word	0x20000808

080171c8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80171c8:	b580      	push	{r7, lr}
 80171ca:	b084      	sub	sp, #16
 80171cc:	af00      	add	r7, sp, #0
 80171ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80171d0:	2300      	movs	r3, #0
 80171d2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80171d4:	2300      	movs	r3, #0
 80171d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80171d8:	687b      	ldr	r3, [r7, #4]
 80171da:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80171de:	4618      	mov	r0, r3
 80171e0:	f7fa fafa 	bl	80117d8 <HAL_HCD_Start>
 80171e4:	4603      	mov	r3, r0
 80171e6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80171e8:	7bfb      	ldrb	r3, [r7, #15]
 80171ea:	4618      	mov	r0, r3
 80171ec:	f000 f912 	bl	8017414 <USBH_Get_USB_Status>
 80171f0:	4603      	mov	r3, r0
 80171f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80171f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80171f6:	4618      	mov	r0, r3
 80171f8:	3710      	adds	r7, #16
 80171fa:	46bd      	mov	sp, r7
 80171fc:	bd80      	pop	{r7, pc}

080171fe <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80171fe:	b580      	push	{r7, lr}
 8017200:	b084      	sub	sp, #16
 8017202:	af00      	add	r7, sp, #0
 8017204:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017206:	2300      	movs	r3, #0
 8017208:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801720a:	2300      	movs	r3, #0
 801720c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 801720e:	687b      	ldr	r3, [r7, #4]
 8017210:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8017214:	4618      	mov	r0, r3
 8017216:	f7fa fb02 	bl	801181e <HAL_HCD_Stop>
 801721a:	4603      	mov	r3, r0
 801721c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801721e:	7bfb      	ldrb	r3, [r7, #15]
 8017220:	4618      	mov	r0, r3
 8017222:	f000 f8f7 	bl	8017414 <USBH_Get_USB_Status>
 8017226:	4603      	mov	r3, r0
 8017228:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801722a:	7bbb      	ldrb	r3, [r7, #14]
}
 801722c:	4618      	mov	r0, r3
 801722e:	3710      	adds	r7, #16
 8017230:	46bd      	mov	sp, r7
 8017232:	bd80      	pop	{r7, pc}

08017234 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8017234:	b580      	push	{r7, lr}
 8017236:	b082      	sub	sp, #8
 8017238:	af00      	add	r7, sp, #0
 801723a:	6078      	str	r0, [r7, #4]
 801723c:	460b      	mov	r3, r1
 801723e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8017240:	687b      	ldr	r3, [r7, #4]
 8017242:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8017246:	78fa      	ldrb	r2, [r7, #3]
 8017248:	4611      	mov	r1, r2
 801724a:	4618      	mov	r0, r3
 801724c:	f7fa fb19 	bl	8011882 <HAL_HCD_HC_GetXferCount>
 8017250:	4603      	mov	r3, r0
}
 8017252:	4618      	mov	r0, r3
 8017254:	3708      	adds	r7, #8
 8017256:	46bd      	mov	sp, r7
 8017258:	bd80      	pop	{r7, pc}

0801725a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 801725a:	b590      	push	{r4, r7, lr}
 801725c:	b089      	sub	sp, #36	; 0x24
 801725e:	af04      	add	r7, sp, #16
 8017260:	6078      	str	r0, [r7, #4]
 8017262:	4608      	mov	r0, r1
 8017264:	4611      	mov	r1, r2
 8017266:	461a      	mov	r2, r3
 8017268:	4603      	mov	r3, r0
 801726a:	70fb      	strb	r3, [r7, #3]
 801726c:	460b      	mov	r3, r1
 801726e:	70bb      	strb	r3, [r7, #2]
 8017270:	4613      	mov	r3, r2
 8017272:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017274:	2300      	movs	r3, #0
 8017276:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8017278:	2300      	movs	r3, #0
 801727a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 801727c:	687b      	ldr	r3, [r7, #4]
 801727e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8017282:	787c      	ldrb	r4, [r7, #1]
 8017284:	78ba      	ldrb	r2, [r7, #2]
 8017286:	78f9      	ldrb	r1, [r7, #3]
 8017288:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801728a:	9302      	str	r3, [sp, #8]
 801728c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8017290:	9301      	str	r3, [sp, #4]
 8017292:	f897 3020 	ldrb.w	r3, [r7, #32]
 8017296:	9300      	str	r3, [sp, #0]
 8017298:	4623      	mov	r3, r4
 801729a:	f7f9 ff6c 	bl	8011176 <HAL_HCD_HC_Init>
 801729e:	4603      	mov	r3, r0
 80172a0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80172a2:	7bfb      	ldrb	r3, [r7, #15]
 80172a4:	4618      	mov	r0, r3
 80172a6:	f000 f8b5 	bl	8017414 <USBH_Get_USB_Status>
 80172aa:	4603      	mov	r3, r0
 80172ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80172ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80172b0:	4618      	mov	r0, r3
 80172b2:	3714      	adds	r7, #20
 80172b4:	46bd      	mov	sp, r7
 80172b6:	bd90      	pop	{r4, r7, pc}

080172b8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80172b8:	b580      	push	{r7, lr}
 80172ba:	b084      	sub	sp, #16
 80172bc:	af00      	add	r7, sp, #0
 80172be:	6078      	str	r0, [r7, #4]
 80172c0:	460b      	mov	r3, r1
 80172c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80172c4:	2300      	movs	r3, #0
 80172c6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80172c8:	2300      	movs	r3, #0
 80172ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80172cc:	687b      	ldr	r3, [r7, #4]
 80172ce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80172d2:	78fa      	ldrb	r2, [r7, #3]
 80172d4:	4611      	mov	r1, r2
 80172d6:	4618      	mov	r0, r3
 80172d8:	f7f9 ffe5 	bl	80112a6 <HAL_HCD_HC_Halt>
 80172dc:	4603      	mov	r3, r0
 80172de:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80172e0:	7bfb      	ldrb	r3, [r7, #15]
 80172e2:	4618      	mov	r0, r3
 80172e4:	f000 f896 	bl	8017414 <USBH_Get_USB_Status>
 80172e8:	4603      	mov	r3, r0
 80172ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80172ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80172ee:	4618      	mov	r0, r3
 80172f0:	3710      	adds	r7, #16
 80172f2:	46bd      	mov	sp, r7
 80172f4:	bd80      	pop	{r7, pc}

080172f6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80172f6:	b590      	push	{r4, r7, lr}
 80172f8:	b089      	sub	sp, #36	; 0x24
 80172fa:	af04      	add	r7, sp, #16
 80172fc:	6078      	str	r0, [r7, #4]
 80172fe:	4608      	mov	r0, r1
 8017300:	4611      	mov	r1, r2
 8017302:	461a      	mov	r2, r3
 8017304:	4603      	mov	r3, r0
 8017306:	70fb      	strb	r3, [r7, #3]
 8017308:	460b      	mov	r3, r1
 801730a:	70bb      	strb	r3, [r7, #2]
 801730c:	4613      	mov	r3, r2
 801730e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017310:	2300      	movs	r3, #0
 8017312:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8017314:	2300      	movs	r3, #0
 8017316:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8017318:	687b      	ldr	r3, [r7, #4]
 801731a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 801731e:	787c      	ldrb	r4, [r7, #1]
 8017320:	78ba      	ldrb	r2, [r7, #2]
 8017322:	78f9      	ldrb	r1, [r7, #3]
 8017324:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8017328:	9303      	str	r3, [sp, #12]
 801732a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801732c:	9302      	str	r3, [sp, #8]
 801732e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017330:	9301      	str	r3, [sp, #4]
 8017332:	f897 3020 	ldrb.w	r3, [r7, #32]
 8017336:	9300      	str	r3, [sp, #0]
 8017338:	4623      	mov	r3, r4
 801733a:	f7f9 ffd7 	bl	80112ec <HAL_HCD_HC_SubmitRequest>
 801733e:	4603      	mov	r3, r0
 8017340:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8017342:	7bfb      	ldrb	r3, [r7, #15]
 8017344:	4618      	mov	r0, r3
 8017346:	f000 f865 	bl	8017414 <USBH_Get_USB_Status>
 801734a:	4603      	mov	r3, r0
 801734c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801734e:	7bbb      	ldrb	r3, [r7, #14]
}
 8017350:	4618      	mov	r0, r3
 8017352:	3714      	adds	r7, #20
 8017354:	46bd      	mov	sp, r7
 8017356:	bd90      	pop	{r4, r7, pc}

08017358 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8017358:	b580      	push	{r7, lr}
 801735a:	b082      	sub	sp, #8
 801735c:	af00      	add	r7, sp, #0
 801735e:	6078      	str	r0, [r7, #4]
 8017360:	460b      	mov	r3, r1
 8017362:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8017364:	687b      	ldr	r3, [r7, #4]
 8017366:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801736a:	78fa      	ldrb	r2, [r7, #3]
 801736c:	4611      	mov	r1, r2
 801736e:	4618      	mov	r0, r3
 8017370:	f7fa fa72 	bl	8011858 <HAL_HCD_HC_GetURBState>
 8017374:	4603      	mov	r3, r0
}
 8017376:	4618      	mov	r0, r3
 8017378:	3708      	adds	r7, #8
 801737a:	46bd      	mov	sp, r7
 801737c:	bd80      	pop	{r7, pc}

0801737e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 801737e:	b580      	push	{r7, lr}
 8017380:	b082      	sub	sp, #8
 8017382:	af00      	add	r7, sp, #0
 8017384:	6078      	str	r0, [r7, #4]
 8017386:	460b      	mov	r3, r1
 8017388:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 801738a:	687b      	ldr	r3, [r7, #4]
 801738c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8017390:	2b01      	cmp	r3, #1
 8017392:	d103      	bne.n	801739c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8017394:	78fb      	ldrb	r3, [r7, #3]
 8017396:	4618      	mov	r0, r3
 8017398:	f000 f868 	bl	801746c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 801739c:	20c8      	movs	r0, #200	; 0xc8
 801739e:	f7f9 fb7d 	bl	8010a9c <HAL_Delay>
  return USBH_OK;
 80173a2:	2300      	movs	r3, #0
}
 80173a4:	4618      	mov	r0, r3
 80173a6:	3708      	adds	r7, #8
 80173a8:	46bd      	mov	sp, r7
 80173aa:	bd80      	pop	{r7, pc}

080173ac <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80173ac:	b480      	push	{r7}
 80173ae:	b085      	sub	sp, #20
 80173b0:	af00      	add	r7, sp, #0
 80173b2:	6078      	str	r0, [r7, #4]
 80173b4:	460b      	mov	r3, r1
 80173b6:	70fb      	strb	r3, [r7, #3]
 80173b8:	4613      	mov	r3, r2
 80173ba:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80173bc:	687b      	ldr	r3, [r7, #4]
 80173be:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80173c2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80173c4:	78fa      	ldrb	r2, [r7, #3]
 80173c6:	68f9      	ldr	r1, [r7, #12]
 80173c8:	4613      	mov	r3, r2
 80173ca:	009b      	lsls	r3, r3, #2
 80173cc:	4413      	add	r3, r2
 80173ce:	00db      	lsls	r3, r3, #3
 80173d0:	440b      	add	r3, r1
 80173d2:	333b      	adds	r3, #59	; 0x3b
 80173d4:	781b      	ldrb	r3, [r3, #0]
 80173d6:	2b00      	cmp	r3, #0
 80173d8:	d00a      	beq.n	80173f0 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80173da:	78fa      	ldrb	r2, [r7, #3]
 80173dc:	68f9      	ldr	r1, [r7, #12]
 80173de:	4613      	mov	r3, r2
 80173e0:	009b      	lsls	r3, r3, #2
 80173e2:	4413      	add	r3, r2
 80173e4:	00db      	lsls	r3, r3, #3
 80173e6:	440b      	add	r3, r1
 80173e8:	3350      	adds	r3, #80	; 0x50
 80173ea:	78ba      	ldrb	r2, [r7, #2]
 80173ec:	701a      	strb	r2, [r3, #0]
 80173ee:	e009      	b.n	8017404 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80173f0:	78fa      	ldrb	r2, [r7, #3]
 80173f2:	68f9      	ldr	r1, [r7, #12]
 80173f4:	4613      	mov	r3, r2
 80173f6:	009b      	lsls	r3, r3, #2
 80173f8:	4413      	add	r3, r2
 80173fa:	00db      	lsls	r3, r3, #3
 80173fc:	440b      	add	r3, r1
 80173fe:	3351      	adds	r3, #81	; 0x51
 8017400:	78ba      	ldrb	r2, [r7, #2]
 8017402:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8017404:	2300      	movs	r3, #0
}
 8017406:	4618      	mov	r0, r3
 8017408:	3714      	adds	r7, #20
 801740a:	46bd      	mov	sp, r7
 801740c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017410:	4770      	bx	lr
	...

08017414 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8017414:	b480      	push	{r7}
 8017416:	b085      	sub	sp, #20
 8017418:	af00      	add	r7, sp, #0
 801741a:	4603      	mov	r3, r0
 801741c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801741e:	2300      	movs	r3, #0
 8017420:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8017422:	79fb      	ldrb	r3, [r7, #7]
 8017424:	2b03      	cmp	r3, #3
 8017426:	d817      	bhi.n	8017458 <USBH_Get_USB_Status+0x44>
 8017428:	a201      	add	r2, pc, #4	; (adr r2, 8017430 <USBH_Get_USB_Status+0x1c>)
 801742a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801742e:	bf00      	nop
 8017430:	08017441 	.word	0x08017441
 8017434:	08017447 	.word	0x08017447
 8017438:	0801744d 	.word	0x0801744d
 801743c:	08017453 	.word	0x08017453
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8017440:	2300      	movs	r3, #0
 8017442:	73fb      	strb	r3, [r7, #15]
    break;
 8017444:	e00b      	b.n	801745e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8017446:	2302      	movs	r3, #2
 8017448:	73fb      	strb	r3, [r7, #15]
    break;
 801744a:	e008      	b.n	801745e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 801744c:	2301      	movs	r3, #1
 801744e:	73fb      	strb	r3, [r7, #15]
    break;
 8017450:	e005      	b.n	801745e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8017452:	2302      	movs	r3, #2
 8017454:	73fb      	strb	r3, [r7, #15]
    break;
 8017456:	e002      	b.n	801745e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8017458:	2302      	movs	r3, #2
 801745a:	73fb      	strb	r3, [r7, #15]
    break;
 801745c:	bf00      	nop
  }
  return usb_status;
 801745e:	7bfb      	ldrb	r3, [r7, #15]
}
 8017460:	4618      	mov	r0, r3
 8017462:	3714      	adds	r7, #20
 8017464:	46bd      	mov	sp, r7
 8017466:	f85d 7b04 	ldr.w	r7, [sp], #4
 801746a:	4770      	bx	lr

0801746c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 801746c:	b580      	push	{r7, lr}
 801746e:	b084      	sub	sp, #16
 8017470:	af00      	add	r7, sp, #0
 8017472:	4603      	mov	r3, r0
 8017474:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8017476:	79fb      	ldrb	r3, [r7, #7]
 8017478:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 801747a:	79fb      	ldrb	r3, [r7, #7]
 801747c:	2b00      	cmp	r3, #0
 801747e:	d102      	bne.n	8017486 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8017480:	2301      	movs	r3, #1
 8017482:	73fb      	strb	r3, [r7, #15]
 8017484:	e001      	b.n	801748a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8017486:	2300      	movs	r3, #0
 8017488:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 801748a:	7bfb      	ldrb	r3, [r7, #15]
 801748c:	461a      	mov	r2, r3
 801748e:	2101      	movs	r1, #1
 8017490:	4803      	ldr	r0, [pc, #12]	; (80174a0 <MX_DriverVbusFS+0x34>)
 8017492:	f7f9 fdd1 	bl	8011038 <HAL_GPIO_WritePin>
}
 8017496:	bf00      	nop
 8017498:	3710      	adds	r7, #16
 801749a:	46bd      	mov	sp, r7
 801749c:	bd80      	pop	{r7, pc}
 801749e:	bf00      	nop
 80174a0:	40020800 	.word	0x40020800

080174a4 <_ZdaPv>:
 80174a4:	f000 b820 	b.w	80174e8 <_ZdlPv>

080174a8 <__cxa_pure_virtual>:
 80174a8:	b508      	push	{r3, lr}
 80174aa:	f000 f82b 	bl	8017504 <_ZSt9terminatev>

080174ae <_Znaj>:
 80174ae:	f000 b802 	b.w	80174b6 <_Znwj>

080174b2 <_ZdlPvj>:
 80174b2:	f000 b819 	b.w	80174e8 <_ZdlPv>

080174b6 <_Znwj>:
 80174b6:	b510      	push	{r4, lr}
 80174b8:	2800      	cmp	r0, #0
 80174ba:	bf14      	ite	ne
 80174bc:	4604      	movne	r4, r0
 80174be:	2401      	moveq	r4, #1
 80174c0:	4620      	mov	r0, r4
 80174c2:	f000 fad5 	bl	8017a70 <malloc>
 80174c6:	b930      	cbnz	r0, 80174d6 <_Znwj+0x20>
 80174c8:	f000 f806 	bl	80174d8 <_ZSt15get_new_handlerv>
 80174cc:	b908      	cbnz	r0, 80174d2 <_Znwj+0x1c>
 80174ce:	f000 fa9d 	bl	8017a0c <abort>
 80174d2:	4780      	blx	r0
 80174d4:	e7f4      	b.n	80174c0 <_Znwj+0xa>
 80174d6:	bd10      	pop	{r4, pc}

080174d8 <_ZSt15get_new_handlerv>:
 80174d8:	4b02      	ldr	r3, [pc, #8]	; (80174e4 <_ZSt15get_new_handlerv+0xc>)
 80174da:	6818      	ldr	r0, [r3, #0]
 80174dc:	f3bf 8f5b 	dmb	ish
 80174e0:	4770      	bx	lr
 80174e2:	bf00      	nop
 80174e4:	200002a4 	.word	0x200002a4

080174e8 <_ZdlPv>:
 80174e8:	f000 baca 	b.w	8017a80 <free>

080174ec <_ZN10__cxxabiv111__terminateEPFvvE>:
 80174ec:	b508      	push	{r3, lr}
 80174ee:	4780      	blx	r0
 80174f0:	f000 fa8c 	bl	8017a0c <abort>

080174f4 <_ZSt13get_terminatev>:
 80174f4:	4b02      	ldr	r3, [pc, #8]	; (8017500 <_ZSt13get_terminatev+0xc>)
 80174f6:	6818      	ldr	r0, [r3, #0]
 80174f8:	f3bf 8f5b 	dmb	ish
 80174fc:	4770      	bx	lr
 80174fe:	bf00      	nop
 8017500:	20000214 	.word	0x20000214

08017504 <_ZSt9terminatev>:
 8017504:	b508      	push	{r3, lr}
 8017506:	f7ff fff5 	bl	80174f4 <_ZSt13get_terminatev>
 801750a:	f7ff ffef 	bl	80174ec <_ZN10__cxxabiv111__terminateEPFvvE>

0801750e <_ZNSaIcEC1Ev>:
 801750e:	4770      	bx	lr

08017510 <_ZNSaIcED1Ev>:
 8017510:	4770      	bx	lr

08017512 <_ZSt17__throw_bad_allocv>:
 8017512:	b508      	push	{r3, lr}
 8017514:	f000 fa7a 	bl	8017a0c <abort>

08017518 <_ZSt19__throw_logic_errorPKc>:
 8017518:	b508      	push	{r3, lr}
 801751a:	f000 fa77 	bl	8017a0c <abort>

0801751e <_ZSt20__throw_length_errorPKc>:
 801751e:	b508      	push	{r3, lr}
 8017520:	f000 fa74 	bl	8017a0c <abort>

08017524 <_ZSt24__throw_out_of_range_fmtPKcz>:
 8017524:	b40f      	push	{r0, r1, r2, r3}
 8017526:	b580      	push	{r7, lr}
 8017528:	b082      	sub	sp, #8
 801752a:	af00      	add	r7, sp, #0
 801752c:	f107 0410 	add.w	r4, r7, #16
 8017530:	f854 5b04 	ldr.w	r5, [r4], #4
 8017534:	4628      	mov	r0, r5
 8017536:	f7e8 fe4f 	bl	80001d8 <strlen>
 801753a:	f200 230e 	addw	r3, r0, #526	; 0x20e
 801753e:	f023 0307 	bic.w	r3, r3, #7
 8017542:	ebad 0d03 	sub.w	sp, sp, r3
 8017546:	f500 7100 	add.w	r1, r0, #512	; 0x200
 801754a:	4623      	mov	r3, r4
 801754c:	462a      	mov	r2, r5
 801754e:	4668      	mov	r0, sp
 8017550:	607c      	str	r4, [r7, #4]
 8017552:	f000 fa1b 	bl	801798c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
 8017556:	f000 fa59 	bl	8017a0c <abort>

0801755a <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 801755a:	b10a      	cbz	r2, 8017560 <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 801755c:	f000 ba98 	b.w	8017a90 <memcpy>
 8017560:	4770      	bx	lr
	...

08017564 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8017564:	b508      	push	{r3, lr}
 8017566:	680b      	ldr	r3, [r1, #0]
 8017568:	2b00      	cmp	r3, #0
 801756a:	da02      	bge.n	8017572 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0xe>
 801756c:	4809      	ldr	r0, [pc, #36]	; (8017594 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x30>)
 801756e:	f7ff ffd6 	bl	801751e <_ZSt20__throw_length_errorPKc>
 8017572:	4293      	cmp	r3, r2
 8017574:	d908      	bls.n	8017588 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 8017576:	0052      	lsls	r2, r2, #1
 8017578:	4293      	cmp	r3, r2
 801757a:	d205      	bcs.n	8017588 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 801757c:	2a00      	cmp	r2, #0
 801757e:	bfb6      	itet	lt
 8017580:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 8017584:	600a      	strge	r2, [r1, #0]
 8017586:	600b      	strlt	r3, [r1, #0]
 8017588:	6808      	ldr	r0, [r1, #0]
 801758a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801758e:	3001      	adds	r0, #1
 8017590:	f7ff bf91 	b.w	80174b6 <_Znwj>
 8017594:	0801b1ef 	.word	0x0801b1ef

08017598 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8017598:	4603      	mov	r3, r0
 801759a:	f853 0b08 	ldr.w	r0, [r3], #8
 801759e:	4298      	cmp	r0, r3
 80175a0:	d001      	beq.n	80175a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 80175a2:	f7ff bfa1 	b.w	80174e8 <_ZdlPv>
 80175a6:	4770      	bx	lr

080175a8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 80175a8:	b508      	push	{r3, lr}
 80175aa:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80175ae:	6840      	ldr	r0, [r0, #4]
 80175b0:	3901      	subs	r1, #1
 80175b2:	1a09      	subs	r1, r1, r0
 80175b4:	4291      	cmp	r1, r2
 80175b6:	d202      	bcs.n	80175be <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 80175b8:	4618      	mov	r0, r3
 80175ba:	f7ff ffb0 	bl	801751e <_ZSt20__throw_length_errorPKc>
 80175be:	bd08      	pop	{r3, pc}

080175c0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
 80175c0:	6803      	ldr	r3, [r0, #0]
 80175c2:	428b      	cmp	r3, r1
 80175c4:	d806      	bhi.n	80175d4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x14>
 80175c6:	6840      	ldr	r0, [r0, #4]
 80175c8:	4418      	add	r0, r3
 80175ca:	4281      	cmp	r1, r0
 80175cc:	bf94      	ite	ls
 80175ce:	2000      	movls	r0, #0
 80175d0:	2001      	movhi	r0, #1
 80175d2:	4770      	bx	lr
 80175d4:	2001      	movs	r0, #1
 80175d6:	4770      	bx	lr

080175d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 80175d8:	2a01      	cmp	r2, #1
 80175da:	b510      	push	{r4, lr}
 80175dc:	d102      	bne.n	80175e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 80175de:	780a      	ldrb	r2, [r1, #0]
 80175e0:	7002      	strb	r2, [r0, #0]
 80175e2:	bd10      	pop	{r4, pc}
 80175e4:	f7ff ffb9 	bl	801755a <_ZNSt11char_traitsIcE4copyEPcPKcj>
 80175e8:	e7fb      	b.n	80175e2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

080175ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 80175ea:	2a01      	cmp	r2, #1
 80175ec:	b430      	push	{r4, r5}
 80175ee:	d103      	bne.n	80175f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 80175f0:	780b      	ldrb	r3, [r1, #0]
 80175f2:	7003      	strb	r3, [r0, #0]
 80175f4:	bc30      	pop	{r4, r5}
 80175f6:	4770      	bx	lr
 80175f8:	2a00      	cmp	r2, #0
 80175fa:	d0fb      	beq.n	80175f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 80175fc:	bc30      	pop	{r4, r5}
 80175fe:	f000 ba52 	b.w	8017aa6 <memmove>

08017602 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 8017602:	b508      	push	{r3, lr}
 8017604:	1a52      	subs	r2, r2, r1
 8017606:	f7ff ffe7 	bl	80175d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801760a:	bd08      	pop	{r3, pc}

0801760c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
 801760c:	4288      	cmp	r0, r1
 801760e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017610:	4604      	mov	r4, r0
 8017612:	460e      	mov	r6, r1
 8017614:	d01f      	beq.n	8017656 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x4a>
 8017616:	6802      	ldr	r2, [r0, #0]
 8017618:	684d      	ldr	r5, [r1, #4]
 801761a:	f100 0308 	add.w	r3, r0, #8
 801761e:	429a      	cmp	r2, r3
 8017620:	bf14      	ite	ne
 8017622:	6882      	ldrne	r2, [r0, #8]
 8017624:	220f      	moveq	r2, #15
 8017626:	42aa      	cmp	r2, r5
 8017628:	d20b      	bcs.n	8017642 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x36>
 801762a:	a902      	add	r1, sp, #8
 801762c:	f841 5d04 	str.w	r5, [r1, #-4]!
 8017630:	f7ff ff98 	bl	8017564 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8017634:	4607      	mov	r7, r0
 8017636:	4620      	mov	r0, r4
 8017638:	f7ff ffae 	bl	8017598 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 801763c:	9b01      	ldr	r3, [sp, #4]
 801763e:	6027      	str	r7, [r4, #0]
 8017640:	60a3      	str	r3, [r4, #8]
 8017642:	b125      	cbz	r5, 801764e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x42>
 8017644:	462a      	mov	r2, r5
 8017646:	6831      	ldr	r1, [r6, #0]
 8017648:	6820      	ldr	r0, [r4, #0]
 801764a:	f7ff ffc5 	bl	80175d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801764e:	6823      	ldr	r3, [r4, #0]
 8017650:	6065      	str	r5, [r4, #4]
 8017652:	2200      	movs	r2, #0
 8017654:	555a      	strb	r2, [r3, r5]
 8017656:	b003      	add	sp, #12
 8017658:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801765a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 801765a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801765e:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8017662:	4616      	mov	r6, r2
 8017664:	6842      	ldr	r2, [r0, #4]
 8017666:	469a      	mov	sl, r3
 8017668:	eba8 0306 	sub.w	r3, r8, r6
 801766c:	1a57      	subs	r7, r2, r1
 801766e:	4413      	add	r3, r2
 8017670:	6802      	ldr	r2, [r0, #0]
 8017672:	9301      	str	r3, [sp, #4]
 8017674:	f100 0308 	add.w	r3, r0, #8
 8017678:	429a      	cmp	r2, r3
 801767a:	460d      	mov	r5, r1
 801767c:	bf14      	ite	ne
 801767e:	6882      	ldrne	r2, [r0, #8]
 8017680:	220f      	moveq	r2, #15
 8017682:	a901      	add	r1, sp, #4
 8017684:	4604      	mov	r4, r0
 8017686:	f7ff ff6d 	bl	8017564 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 801768a:	1bbf      	subs	r7, r7, r6
 801768c:	4681      	mov	r9, r0
 801768e:	b11d      	cbz	r5, 8017698 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 8017690:	462a      	mov	r2, r5
 8017692:	6821      	ldr	r1, [r4, #0]
 8017694:	f7ff ffa0 	bl	80175d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8017698:	f1ba 0f00 	cmp.w	sl, #0
 801769c:	d008      	beq.n	80176b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x56>
 801769e:	f1b8 0f00 	cmp.w	r8, #0
 80176a2:	d005      	beq.n	80176b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x56>
 80176a4:	4642      	mov	r2, r8
 80176a6:	4651      	mov	r1, sl
 80176a8:	eb09 0005 	add.w	r0, r9, r5
 80176ac:	f7ff ff94 	bl	80175d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80176b0:	b147      	cbz	r7, 80176c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x6a>
 80176b2:	6821      	ldr	r1, [r4, #0]
 80176b4:	442e      	add	r6, r5
 80176b6:	eb05 0008 	add.w	r0, r5, r8
 80176ba:	463a      	mov	r2, r7
 80176bc:	4431      	add	r1, r6
 80176be:	4448      	add	r0, r9
 80176c0:	f7ff ff8a 	bl	80175d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80176c4:	4620      	mov	r0, r4
 80176c6:	f7ff ff67 	bl	8017598 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80176ca:	9b01      	ldr	r3, [sp, #4]
 80176cc:	f8c4 9000 	str.w	r9, [r4]
 80176d0:	60a3      	str	r3, [r4, #8]
 80176d2:	b002      	add	sp, #8
 80176d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080176d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 80176d8:	f100 0208 	add.w	r2, r0, #8
 80176dc:	6002      	str	r2, [r0, #0]
 80176de:	2200      	movs	r2, #0
 80176e0:	6042      	str	r2, [r0, #4]
 80176e2:	7202      	strb	r2, [r0, #8]
 80176e4:	4770      	bx	lr

080176e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 80176e6:	b510      	push	{r4, lr}
 80176e8:	4604      	mov	r4, r0
 80176ea:	f7ff ff55 	bl	8017598 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80176ee:	4620      	mov	r0, r4
 80176f0:	bd10      	pop	{r4, pc}

080176f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>:
 80176f2:	b510      	push	{r4, lr}
 80176f4:	4604      	mov	r4, r0
 80176f6:	f7ff ff89 	bl	801760c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
 80176fa:	4620      	mov	r0, r4
 80176fc:	bd10      	pop	{r4, pc}

080176fe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>:
 80176fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017700:	460b      	mov	r3, r1
 8017702:	4606      	mov	r6, r0
 8017704:	f853 7b08 	ldr.w	r7, [r3], #8
 8017708:	f856 2b08 	ldr.w	r2, [r6], #8
 801770c:	42bb      	cmp	r3, r7
 801770e:	4605      	mov	r5, r0
 8017710:	460c      	mov	r4, r1
 8017712:	d016      	beq.n	8017742 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x44>
 8017714:	6007      	str	r7, [r0, #0]
 8017716:	6849      	ldr	r1, [r1, #4]
 8017718:	6041      	str	r1, [r0, #4]
 801771a:	4296      	cmp	r6, r2
 801771c:	68a1      	ldr	r1, [r4, #8]
 801771e:	bf18      	it	ne
 8017720:	f8d0 c008 	ldrne.w	ip, [r0, #8]
 8017724:	6081      	str	r1, [r0, #8]
 8017726:	bf08      	it	eq
 8017728:	2200      	moveq	r2, #0
 801772a:	b142      	cbz	r2, 801773e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x40>
 801772c:	6022      	str	r2, [r4, #0]
 801772e:	f8c4 c008 	str.w	ip, [r4, #8]
 8017732:	6822      	ldr	r2, [r4, #0]
 8017734:	2300      	movs	r3, #0
 8017736:	6063      	str	r3, [r4, #4]
 8017738:	7013      	strb	r3, [r2, #0]
 801773a:	4628      	mov	r0, r5
 801773c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801773e:	6023      	str	r3, [r4, #0]
 8017740:	e7f7      	b.n	8017732 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x34>
 8017742:	f7ff ff63 	bl	801760c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
 8017746:	e7f4      	b.n	8017732 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x34>

08017748 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5beginEv>:
 8017748:	6800      	ldr	r0, [r0, #0]
 801774a:	4770      	bx	lr

0801774c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE3endEv>:
 801774c:	e9d0 2000 	ldrd	r2, r0, [r0]
 8017750:	4410      	add	r0, r2
 8017752:	4770      	bx	lr

08017754 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>:
 8017754:	6840      	ldr	r0, [r0, #4]
 8017756:	4770      	bx	lr

08017758 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
 8017758:	6800      	ldr	r0, [r0, #0]
 801775a:	4408      	add	r0, r1
 801775c:	4770      	bx	lr
	...

08017760 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>:
 8017760:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017764:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8017766:	4614      	mov	r4, r2
 8017768:	4681      	mov	r9, r0
 801776a:	462a      	mov	r2, r5
 801776c:	460f      	mov	r7, r1
 801776e:	4698      	mov	r8, r3
 8017770:	4621      	mov	r1, r4
 8017772:	4b37      	ldr	r3, [pc, #220]	; (8017850 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xf0>)
 8017774:	f7ff ff18 	bl	80175a8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 8017778:	464a      	mov	r2, r9
 801777a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801777e:	f852 6b08 	ldr.w	r6, [r2], #8
 8017782:	4296      	cmp	r6, r2
 8017784:	eba5 0b04 	sub.w	fp, r5, r4
 8017788:	bf18      	it	ne
 801778a:	f8d9 2008 	ldrne.w	r2, [r9, #8]
 801778e:	eb03 0a0b 	add.w	sl, r3, fp
 8017792:	bf08      	it	eq
 8017794:	220f      	moveq	r2, #15
 8017796:	4552      	cmp	r2, sl
 8017798:	d34e      	bcc.n	8017838 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xd8>
 801779a:	443e      	add	r6, r7
 801779c:	4641      	mov	r1, r8
 801779e:	1bdf      	subs	r7, r3, r7
 80177a0:	4648      	mov	r0, r9
 80177a2:	1b3f      	subs	r7, r7, r4
 80177a4:	f7ff ff0c 	bl	80175c0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
 80177a8:	b170      	cbz	r0, 80177c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x68>
 80177aa:	b137      	cbz	r7, 80177ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x5a>
 80177ac:	42ac      	cmp	r4, r5
 80177ae:	d004      	beq.n	80177ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x5a>
 80177b0:	463a      	mov	r2, r7
 80177b2:	1931      	adds	r1, r6, r4
 80177b4:	1970      	adds	r0, r6, r5
 80177b6:	f7ff ff18 	bl	80175ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80177ba:	b30d      	cbz	r5, 8017800 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 80177bc:	462a      	mov	r2, r5
 80177be:	4641      	mov	r1, r8
 80177c0:	4630      	mov	r0, r6
 80177c2:	f7ff ff09 	bl	80175d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80177c6:	e01b      	b.n	8017800 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 80177c8:	b135      	cbz	r5, 80177d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x78>
 80177ca:	42ac      	cmp	r4, r5
 80177cc:	d33c      	bcc.n	8017848 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xe8>
 80177ce:	462a      	mov	r2, r5
 80177d0:	4641      	mov	r1, r8
 80177d2:	4630      	mov	r0, r6
 80177d4:	f7ff ff09 	bl	80175ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80177d8:	b197      	cbz	r7, 8017800 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 80177da:	42ac      	cmp	r4, r5
 80177dc:	d010      	beq.n	8017800 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 80177de:	463a      	mov	r2, r7
 80177e0:	1931      	adds	r1, r6, r4
 80177e2:	1970      	adds	r0, r6, r5
 80177e4:	f7ff ff01 	bl	80175ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80177e8:	42ac      	cmp	r4, r5
 80177ea:	d209      	bcs.n	8017800 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 80177ec:	4434      	add	r4, r6
 80177ee:	eb08 0305 	add.w	r3, r8, r5
 80177f2:	429c      	cmp	r4, r3
 80177f4:	d30f      	bcc.n	8017816 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xb6>
 80177f6:	462a      	mov	r2, r5
 80177f8:	4641      	mov	r1, r8
 80177fa:	4630      	mov	r0, r6
 80177fc:	f7ff fef5 	bl	80175ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8017800:	f8d9 3000 	ldr.w	r3, [r9]
 8017804:	f8c9 a004 	str.w	sl, [r9, #4]
 8017808:	2200      	movs	r2, #0
 801780a:	4648      	mov	r0, r9
 801780c:	f803 200a 	strb.w	r2, [r3, sl]
 8017810:	b003      	add	sp, #12
 8017812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017816:	4544      	cmp	r4, r8
 8017818:	d803      	bhi.n	8017822 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xc2>
 801781a:	462a      	mov	r2, r5
 801781c:	eb08 010b 	add.w	r1, r8, fp
 8017820:	e7ce      	b.n	80177c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 8017822:	eba4 0408 	sub.w	r4, r4, r8
 8017826:	4622      	mov	r2, r4
 8017828:	4641      	mov	r1, r8
 801782a:	4630      	mov	r0, r6
 801782c:	f7ff fedd 	bl	80175ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8017830:	1b2a      	subs	r2, r5, r4
 8017832:	1971      	adds	r1, r6, r5
 8017834:	1930      	adds	r0, r6, r4
 8017836:	e7c4      	b.n	80177c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x62>
 8017838:	9500      	str	r5, [sp, #0]
 801783a:	4643      	mov	r3, r8
 801783c:	4622      	mov	r2, r4
 801783e:	4639      	mov	r1, r7
 8017840:	4648      	mov	r0, r9
 8017842:	f7ff ff0a 	bl	801765a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8017846:	e7db      	b.n	8017800 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 8017848:	2f00      	cmp	r7, #0
 801784a:	d0cf      	beq.n	80177ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x8c>
 801784c:	e7c7      	b.n	80177de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x7e>
 801784e:	bf00      	nop
 8017850:	0801b1ac 	.word	0x0801b1ac

08017854 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>:
 8017854:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017856:	4604      	mov	r4, r0
 8017858:	4608      	mov	r0, r1
 801785a:	460d      	mov	r5, r1
 801785c:	f7e8 fcbc 	bl	80001d8 <strlen>
 8017860:	462b      	mov	r3, r5
 8017862:	9000      	str	r0, [sp, #0]
 8017864:	6862      	ldr	r2, [r4, #4]
 8017866:	2100      	movs	r1, #0
 8017868:	4620      	mov	r0, r4
 801786a:	f7ff ff79 	bl	8017760 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 801786e:	b003      	add	sp, #12
 8017870:	bd30      	pop	{r4, r5, pc}

08017872 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>:
 8017872:	b508      	push	{r3, lr}
 8017874:	f7ff ffee 	bl	8017854 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>
 8017878:	bd08      	pop	{r3, pc}
	...

0801787c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 801787c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801787e:	4604      	mov	r4, r0
 8017880:	4616      	mov	r6, r2
 8017882:	460d      	mov	r5, r1
 8017884:	b919      	cbnz	r1, 801788e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8017886:	b112      	cbz	r2, 801788e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8017888:	480d      	ldr	r0, [pc, #52]	; (80178c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 801788a:	f7ff fe45 	bl	8017518 <_ZSt19__throw_logic_errorPKc>
 801788e:	1b73      	subs	r3, r6, r5
 8017890:	2b0f      	cmp	r3, #15
 8017892:	9301      	str	r3, [sp, #4]
 8017894:	d907      	bls.n	80178a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 8017896:	2200      	movs	r2, #0
 8017898:	a901      	add	r1, sp, #4
 801789a:	4620      	mov	r0, r4
 801789c:	f7ff fe62 	bl	8017564 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80178a0:	9b01      	ldr	r3, [sp, #4]
 80178a2:	6020      	str	r0, [r4, #0]
 80178a4:	60a3      	str	r3, [r4, #8]
 80178a6:	4632      	mov	r2, r6
 80178a8:	4629      	mov	r1, r5
 80178aa:	6820      	ldr	r0, [r4, #0]
 80178ac:	f7ff fea9 	bl	8017602 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 80178b0:	9b01      	ldr	r3, [sp, #4]
 80178b2:	6822      	ldr	r2, [r4, #0]
 80178b4:	6063      	str	r3, [r4, #4]
 80178b6:	2100      	movs	r1, #0
 80178b8:	54d1      	strb	r1, [r2, r3]
 80178ba:	b002      	add	sp, #8
 80178bc:	bd70      	pop	{r4, r5, r6, pc}
 80178be:	bf00      	nop
 80178c0:	0801b1c5 	.word	0x0801b1c5

080178c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 80178c4:	b538      	push	{r3, r4, r5, lr}
 80178c6:	f100 0308 	add.w	r3, r0, #8
 80178ca:	4604      	mov	r4, r0
 80178cc:	6003      	str	r3, [r0, #0]
 80178ce:	460d      	mov	r5, r1
 80178d0:	b159      	cbz	r1, 80178ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 80178d2:	4608      	mov	r0, r1
 80178d4:	f7e8 fc80 	bl	80001d8 <strlen>
 80178d8:	182a      	adds	r2, r5, r0
 80178da:	4620      	mov	r0, r4
 80178dc:	f04f 0300 	mov.w	r3, #0
 80178e0:	4629      	mov	r1, r5
 80178e2:	f7ff ffcb 	bl	801787c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 80178e6:	4620      	mov	r0, r4
 80178e8:	bd38      	pop	{r3, r4, r5, pc}
 80178ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80178ee:	e7f4      	b.n	80178da <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

080178f0 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
 80178f0:	b580      	push	{r7, lr}
 80178f2:	b09c      	sub	sp, #112	; 0x70
 80178f4:	af00      	add	r7, sp, #0
 80178f6:	1a0e      	subs	r6, r1, r0
 80178f8:	4680      	mov	r8, r0
 80178fa:	2269      	movs	r2, #105	; 0x69
 80178fc:	490e      	ldr	r1, [pc, #56]	; (8017938 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
 80178fe:	1d38      	adds	r0, r7, #4
 8017900:	f000 f8c6 	bl	8017a90 <memcpy>
 8017904:	f106 0377 	add.w	r3, r6, #119	; 0x77
 8017908:	f023 0307 	bic.w	r3, r3, #7
 801790c:	ebad 0d03 	sub.w	sp, sp, r3
 8017910:	466c      	mov	r4, sp
 8017912:	2268      	movs	r2, #104	; 0x68
 8017914:	1d39      	adds	r1, r7, #4
 8017916:	1c75      	adds	r5, r6, #1
 8017918:	4620      	mov	r0, r4
 801791a:	f000 f8b9 	bl	8017a90 <memcpy>
 801791e:	4425      	add	r5, r4
 8017920:	4632      	mov	r2, r6
 8017922:	4641      	mov	r1, r8
 8017924:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8017928:	f000 f8b2 	bl	8017a90 <memcpy>
 801792c:	2300      	movs	r3, #0
 801792e:	f885 3067 	strb.w	r3, [r5, #103]	; 0x67
 8017932:	4620      	mov	r0, r4
 8017934:	f7ff fdf0 	bl	8017518 <_ZSt19__throw_logic_errorPKc>
 8017938:	0801b212 	.word	0x0801b212

0801793c <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
 801793c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801793e:	af00      	add	r7, sp, #0
 8017940:	b086      	sub	sp, #24
 8017942:	466d      	mov	r5, sp
 8017944:	f105 040c 	add.w	r4, r5, #12
 8017948:	f8df e03c 	ldr.w	lr, [pc, #60]	; 8017988 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
 801794c:	4623      	mov	r3, r4
 801794e:	f04f 0c0a 	mov.w	ip, #10
 8017952:	fbb2 f6fc 	udiv	r6, r2, ip
 8017956:	fb0c 2216 	mls	r2, ip, r6, r2
 801795a:	f81e 2002 	ldrb.w	r2, [lr, r2]
 801795e:	f803 2d01 	strb.w	r2, [r3, #-1]!
 8017962:	4632      	mov	r2, r6
 8017964:	2e00      	cmp	r6, #0
 8017966:	d1f4      	bne.n	8017952 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x16>
 8017968:	1ae4      	subs	r4, r4, r3
 801796a:	428c      	cmp	r4, r1
 801796c:	d808      	bhi.n	8017980 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
 801796e:	f1c4 010c 	rsb	r1, r4, #12
 8017972:	4622      	mov	r2, r4
 8017974:	4429      	add	r1, r5
 8017976:	f000 f88b 	bl	8017a90 <memcpy>
 801797a:	4620      	mov	r0, r4
 801797c:	46bd      	mov	sp, r7
 801797e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017980:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8017984:	e7f9      	b.n	801797a <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x3e>
 8017986:	bf00      	nop
 8017988:	0801b207 	.word	0x0801b207

0801798c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
 801798c:	3901      	subs	r1, #1
 801798e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017992:	4606      	mov	r6, r0
 8017994:	4615      	mov	r5, r2
 8017996:	1847      	adds	r7, r0, r1
 8017998:	4604      	mov	r4, r0
 801799a:	782a      	ldrb	r2, [r5, #0]
 801799c:	b392      	cbz	r2, 8017a04 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x78>
 801799e:	42bc      	cmp	r4, r7
 80179a0:	d22c      	bcs.n	80179fc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x70>
 80179a2:	2a25      	cmp	r2, #37	; 0x25
 80179a4:	d107      	bne.n	80179b6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 80179a6:	786a      	ldrb	r2, [r5, #1]
 80179a8:	2a73      	cmp	r2, #115	; 0x73
 80179aa:	d009      	beq.n	80179c0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x34>
 80179ac:	2a7a      	cmp	r2, #122	; 0x7a
 80179ae:	d012      	beq.n	80179d6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4a>
 80179b0:	2a25      	cmp	r2, #37	; 0x25
 80179b2:	d100      	bne.n	80179b6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 80179b4:	3501      	adds	r5, #1
 80179b6:	782a      	ldrb	r2, [r5, #0]
 80179b8:	7022      	strb	r2, [r4, #0]
 80179ba:	3501      	adds	r5, #1
 80179bc:	3401      	adds	r4, #1
 80179be:	e7ec      	b.n	801799a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 80179c0:	1d19      	adds	r1, r3, #4
 80179c2:	681b      	ldr	r3, [r3, #0]
 80179c4:	3b01      	subs	r3, #1
 80179c6:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 80179ca:	b1a2      	cbz	r2, 80179f6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6a>
 80179cc:	42bc      	cmp	r4, r7
 80179ce:	d015      	beq.n	80179fc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x70>
 80179d0:	f804 2b01 	strb.w	r2, [r4], #1
 80179d4:	e7f7      	b.n	80179c6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3a>
 80179d6:	78aa      	ldrb	r2, [r5, #2]
 80179d8:	2a75      	cmp	r2, #117	; 0x75
 80179da:	d1ec      	bne.n	80179b6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 80179dc:	681a      	ldr	r2, [r3, #0]
 80179de:	1b39      	subs	r1, r7, r4
 80179e0:	4620      	mov	r0, r4
 80179e2:	f103 0804 	add.w	r8, r3, #4
 80179e6:	f7ff ffa9 	bl	801793c <_ZN9__gnu_cxx15__concat_size_tEPcjj>
 80179ea:	2800      	cmp	r0, #0
 80179ec:	dd06      	ble.n	80179fc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x70>
 80179ee:	4404      	add	r4, r0
 80179f0:	3503      	adds	r5, #3
 80179f2:	4643      	mov	r3, r8
 80179f4:	e7d1      	b.n	801799a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 80179f6:	3502      	adds	r5, #2
 80179f8:	460b      	mov	r3, r1
 80179fa:	e7ce      	b.n	801799a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 80179fc:	4621      	mov	r1, r4
 80179fe:	4630      	mov	r0, r6
 8017a00:	f7ff ff76 	bl	80178f0 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 8017a04:	7022      	strb	r2, [r4, #0]
 8017a06:	1ba0      	subs	r0, r4, r6
 8017a08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017a0c <abort>:
 8017a0c:	b508      	push	{r3, lr}
 8017a0e:	2006      	movs	r0, #6
 8017a10:	f000 f94a 	bl	8017ca8 <raise>
 8017a14:	2001      	movs	r0, #1
 8017a16:	f7f8 fe7d 	bl	8010714 <_exit>
	...

08017a1c <__errno>:
 8017a1c:	4b01      	ldr	r3, [pc, #4]	; (8017a24 <__errno+0x8>)
 8017a1e:	6818      	ldr	r0, [r3, #0]
 8017a20:	4770      	bx	lr
 8017a22:	bf00      	nop
 8017a24:	20000218 	.word	0x20000218

08017a28 <__libc_init_array>:
 8017a28:	b570      	push	{r4, r5, r6, lr}
 8017a2a:	4e0d      	ldr	r6, [pc, #52]	; (8017a60 <__libc_init_array+0x38>)
 8017a2c:	4c0d      	ldr	r4, [pc, #52]	; (8017a64 <__libc_init_array+0x3c>)
 8017a2e:	1ba4      	subs	r4, r4, r6
 8017a30:	10a4      	asrs	r4, r4, #2
 8017a32:	2500      	movs	r5, #0
 8017a34:	42a5      	cmp	r5, r4
 8017a36:	d109      	bne.n	8017a4c <__libc_init_array+0x24>
 8017a38:	4e0b      	ldr	r6, [pc, #44]	; (8017a68 <__libc_init_array+0x40>)
 8017a3a:	4c0c      	ldr	r4, [pc, #48]	; (8017a6c <__libc_init_array+0x44>)
 8017a3c:	f000 f952 	bl	8017ce4 <_init>
 8017a40:	1ba4      	subs	r4, r4, r6
 8017a42:	10a4      	asrs	r4, r4, #2
 8017a44:	2500      	movs	r5, #0
 8017a46:	42a5      	cmp	r5, r4
 8017a48:	d105      	bne.n	8017a56 <__libc_init_array+0x2e>
 8017a4a:	bd70      	pop	{r4, r5, r6, pc}
 8017a4c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8017a50:	4798      	blx	r3
 8017a52:	3501      	adds	r5, #1
 8017a54:	e7ee      	b.n	8017a34 <__libc_init_array+0xc>
 8017a56:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8017a5a:	4798      	blx	r3
 8017a5c:	3501      	adds	r5, #1
 8017a5e:	e7f2      	b.n	8017a46 <__libc_init_array+0x1e>
 8017a60:	0801b284 	.word	0x0801b284
 8017a64:	0801b284 	.word	0x0801b284
 8017a68:	0801b284 	.word	0x0801b284
 8017a6c:	0801b28c 	.word	0x0801b28c

08017a70 <malloc>:
 8017a70:	4b02      	ldr	r3, [pc, #8]	; (8017a7c <malloc+0xc>)
 8017a72:	4601      	mov	r1, r0
 8017a74:	6818      	ldr	r0, [r3, #0]
 8017a76:	f000 b885 	b.w	8017b84 <_malloc_r>
 8017a7a:	bf00      	nop
 8017a7c:	20000218 	.word	0x20000218

08017a80 <free>:
 8017a80:	4b02      	ldr	r3, [pc, #8]	; (8017a8c <free+0xc>)
 8017a82:	4601      	mov	r1, r0
 8017a84:	6818      	ldr	r0, [r3, #0]
 8017a86:	f000 b82f 	b.w	8017ae8 <_free_r>
 8017a8a:	bf00      	nop
 8017a8c:	20000218 	.word	0x20000218

08017a90 <memcpy>:
 8017a90:	b510      	push	{r4, lr}
 8017a92:	1e43      	subs	r3, r0, #1
 8017a94:	440a      	add	r2, r1
 8017a96:	4291      	cmp	r1, r2
 8017a98:	d100      	bne.n	8017a9c <memcpy+0xc>
 8017a9a:	bd10      	pop	{r4, pc}
 8017a9c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017aa0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017aa4:	e7f7      	b.n	8017a96 <memcpy+0x6>

08017aa6 <memmove>:
 8017aa6:	4288      	cmp	r0, r1
 8017aa8:	b510      	push	{r4, lr}
 8017aaa:	eb01 0302 	add.w	r3, r1, r2
 8017aae:	d807      	bhi.n	8017ac0 <memmove+0x1a>
 8017ab0:	1e42      	subs	r2, r0, #1
 8017ab2:	4299      	cmp	r1, r3
 8017ab4:	d00a      	beq.n	8017acc <memmove+0x26>
 8017ab6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017aba:	f802 4f01 	strb.w	r4, [r2, #1]!
 8017abe:	e7f8      	b.n	8017ab2 <memmove+0xc>
 8017ac0:	4283      	cmp	r3, r0
 8017ac2:	d9f5      	bls.n	8017ab0 <memmove+0xa>
 8017ac4:	1881      	adds	r1, r0, r2
 8017ac6:	1ad2      	subs	r2, r2, r3
 8017ac8:	42d3      	cmn	r3, r2
 8017aca:	d100      	bne.n	8017ace <memmove+0x28>
 8017acc:	bd10      	pop	{r4, pc}
 8017ace:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017ad2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8017ad6:	e7f7      	b.n	8017ac8 <memmove+0x22>

08017ad8 <memset>:
 8017ad8:	4402      	add	r2, r0
 8017ada:	4603      	mov	r3, r0
 8017adc:	4293      	cmp	r3, r2
 8017ade:	d100      	bne.n	8017ae2 <memset+0xa>
 8017ae0:	4770      	bx	lr
 8017ae2:	f803 1b01 	strb.w	r1, [r3], #1
 8017ae6:	e7f9      	b.n	8017adc <memset+0x4>

08017ae8 <_free_r>:
 8017ae8:	b538      	push	{r3, r4, r5, lr}
 8017aea:	4605      	mov	r5, r0
 8017aec:	2900      	cmp	r1, #0
 8017aee:	d045      	beq.n	8017b7c <_free_r+0x94>
 8017af0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017af4:	1f0c      	subs	r4, r1, #4
 8017af6:	2b00      	cmp	r3, #0
 8017af8:	bfb8      	it	lt
 8017afa:	18e4      	addlt	r4, r4, r3
 8017afc:	f000 f8f0 	bl	8017ce0 <__malloc_lock>
 8017b00:	4a1f      	ldr	r2, [pc, #124]	; (8017b80 <_free_r+0x98>)
 8017b02:	6813      	ldr	r3, [r2, #0]
 8017b04:	4610      	mov	r0, r2
 8017b06:	b933      	cbnz	r3, 8017b16 <_free_r+0x2e>
 8017b08:	6063      	str	r3, [r4, #4]
 8017b0a:	6014      	str	r4, [r2, #0]
 8017b0c:	4628      	mov	r0, r5
 8017b0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017b12:	f000 b8e6 	b.w	8017ce2 <__malloc_unlock>
 8017b16:	42a3      	cmp	r3, r4
 8017b18:	d90c      	bls.n	8017b34 <_free_r+0x4c>
 8017b1a:	6821      	ldr	r1, [r4, #0]
 8017b1c:	1862      	adds	r2, r4, r1
 8017b1e:	4293      	cmp	r3, r2
 8017b20:	bf04      	itt	eq
 8017b22:	681a      	ldreq	r2, [r3, #0]
 8017b24:	685b      	ldreq	r3, [r3, #4]
 8017b26:	6063      	str	r3, [r4, #4]
 8017b28:	bf04      	itt	eq
 8017b2a:	1852      	addeq	r2, r2, r1
 8017b2c:	6022      	streq	r2, [r4, #0]
 8017b2e:	6004      	str	r4, [r0, #0]
 8017b30:	e7ec      	b.n	8017b0c <_free_r+0x24>
 8017b32:	4613      	mov	r3, r2
 8017b34:	685a      	ldr	r2, [r3, #4]
 8017b36:	b10a      	cbz	r2, 8017b3c <_free_r+0x54>
 8017b38:	42a2      	cmp	r2, r4
 8017b3a:	d9fa      	bls.n	8017b32 <_free_r+0x4a>
 8017b3c:	6819      	ldr	r1, [r3, #0]
 8017b3e:	1858      	adds	r0, r3, r1
 8017b40:	42a0      	cmp	r0, r4
 8017b42:	d10b      	bne.n	8017b5c <_free_r+0x74>
 8017b44:	6820      	ldr	r0, [r4, #0]
 8017b46:	4401      	add	r1, r0
 8017b48:	1858      	adds	r0, r3, r1
 8017b4a:	4282      	cmp	r2, r0
 8017b4c:	6019      	str	r1, [r3, #0]
 8017b4e:	d1dd      	bne.n	8017b0c <_free_r+0x24>
 8017b50:	6810      	ldr	r0, [r2, #0]
 8017b52:	6852      	ldr	r2, [r2, #4]
 8017b54:	605a      	str	r2, [r3, #4]
 8017b56:	4401      	add	r1, r0
 8017b58:	6019      	str	r1, [r3, #0]
 8017b5a:	e7d7      	b.n	8017b0c <_free_r+0x24>
 8017b5c:	d902      	bls.n	8017b64 <_free_r+0x7c>
 8017b5e:	230c      	movs	r3, #12
 8017b60:	602b      	str	r3, [r5, #0]
 8017b62:	e7d3      	b.n	8017b0c <_free_r+0x24>
 8017b64:	6820      	ldr	r0, [r4, #0]
 8017b66:	1821      	adds	r1, r4, r0
 8017b68:	428a      	cmp	r2, r1
 8017b6a:	bf04      	itt	eq
 8017b6c:	6811      	ldreq	r1, [r2, #0]
 8017b6e:	6852      	ldreq	r2, [r2, #4]
 8017b70:	6062      	str	r2, [r4, #4]
 8017b72:	bf04      	itt	eq
 8017b74:	1809      	addeq	r1, r1, r0
 8017b76:	6021      	streq	r1, [r4, #0]
 8017b78:	605c      	str	r4, [r3, #4]
 8017b7a:	e7c7      	b.n	8017b0c <_free_r+0x24>
 8017b7c:	bd38      	pop	{r3, r4, r5, pc}
 8017b7e:	bf00      	nop
 8017b80:	200002a8 	.word	0x200002a8

08017b84 <_malloc_r>:
 8017b84:	b570      	push	{r4, r5, r6, lr}
 8017b86:	1ccd      	adds	r5, r1, #3
 8017b88:	f025 0503 	bic.w	r5, r5, #3
 8017b8c:	3508      	adds	r5, #8
 8017b8e:	2d0c      	cmp	r5, #12
 8017b90:	bf38      	it	cc
 8017b92:	250c      	movcc	r5, #12
 8017b94:	2d00      	cmp	r5, #0
 8017b96:	4606      	mov	r6, r0
 8017b98:	db01      	blt.n	8017b9e <_malloc_r+0x1a>
 8017b9a:	42a9      	cmp	r1, r5
 8017b9c:	d903      	bls.n	8017ba6 <_malloc_r+0x22>
 8017b9e:	230c      	movs	r3, #12
 8017ba0:	6033      	str	r3, [r6, #0]
 8017ba2:	2000      	movs	r0, #0
 8017ba4:	bd70      	pop	{r4, r5, r6, pc}
 8017ba6:	f000 f89b 	bl	8017ce0 <__malloc_lock>
 8017baa:	4a21      	ldr	r2, [pc, #132]	; (8017c30 <_malloc_r+0xac>)
 8017bac:	6814      	ldr	r4, [r2, #0]
 8017bae:	4621      	mov	r1, r4
 8017bb0:	b991      	cbnz	r1, 8017bd8 <_malloc_r+0x54>
 8017bb2:	4c20      	ldr	r4, [pc, #128]	; (8017c34 <_malloc_r+0xb0>)
 8017bb4:	6823      	ldr	r3, [r4, #0]
 8017bb6:	b91b      	cbnz	r3, 8017bc0 <_malloc_r+0x3c>
 8017bb8:	4630      	mov	r0, r6
 8017bba:	f000 f83d 	bl	8017c38 <_sbrk_r>
 8017bbe:	6020      	str	r0, [r4, #0]
 8017bc0:	4629      	mov	r1, r5
 8017bc2:	4630      	mov	r0, r6
 8017bc4:	f000 f838 	bl	8017c38 <_sbrk_r>
 8017bc8:	1c43      	adds	r3, r0, #1
 8017bca:	d124      	bne.n	8017c16 <_malloc_r+0x92>
 8017bcc:	230c      	movs	r3, #12
 8017bce:	6033      	str	r3, [r6, #0]
 8017bd0:	4630      	mov	r0, r6
 8017bd2:	f000 f886 	bl	8017ce2 <__malloc_unlock>
 8017bd6:	e7e4      	b.n	8017ba2 <_malloc_r+0x1e>
 8017bd8:	680b      	ldr	r3, [r1, #0]
 8017bda:	1b5b      	subs	r3, r3, r5
 8017bdc:	d418      	bmi.n	8017c10 <_malloc_r+0x8c>
 8017bde:	2b0b      	cmp	r3, #11
 8017be0:	d90f      	bls.n	8017c02 <_malloc_r+0x7e>
 8017be2:	600b      	str	r3, [r1, #0]
 8017be4:	50cd      	str	r5, [r1, r3]
 8017be6:	18cc      	adds	r4, r1, r3
 8017be8:	4630      	mov	r0, r6
 8017bea:	f000 f87a 	bl	8017ce2 <__malloc_unlock>
 8017bee:	f104 000b 	add.w	r0, r4, #11
 8017bf2:	1d23      	adds	r3, r4, #4
 8017bf4:	f020 0007 	bic.w	r0, r0, #7
 8017bf8:	1ac3      	subs	r3, r0, r3
 8017bfa:	d0d3      	beq.n	8017ba4 <_malloc_r+0x20>
 8017bfc:	425a      	negs	r2, r3
 8017bfe:	50e2      	str	r2, [r4, r3]
 8017c00:	e7d0      	b.n	8017ba4 <_malloc_r+0x20>
 8017c02:	428c      	cmp	r4, r1
 8017c04:	684b      	ldr	r3, [r1, #4]
 8017c06:	bf16      	itet	ne
 8017c08:	6063      	strne	r3, [r4, #4]
 8017c0a:	6013      	streq	r3, [r2, #0]
 8017c0c:	460c      	movne	r4, r1
 8017c0e:	e7eb      	b.n	8017be8 <_malloc_r+0x64>
 8017c10:	460c      	mov	r4, r1
 8017c12:	6849      	ldr	r1, [r1, #4]
 8017c14:	e7cc      	b.n	8017bb0 <_malloc_r+0x2c>
 8017c16:	1cc4      	adds	r4, r0, #3
 8017c18:	f024 0403 	bic.w	r4, r4, #3
 8017c1c:	42a0      	cmp	r0, r4
 8017c1e:	d005      	beq.n	8017c2c <_malloc_r+0xa8>
 8017c20:	1a21      	subs	r1, r4, r0
 8017c22:	4630      	mov	r0, r6
 8017c24:	f000 f808 	bl	8017c38 <_sbrk_r>
 8017c28:	3001      	adds	r0, #1
 8017c2a:	d0cf      	beq.n	8017bcc <_malloc_r+0x48>
 8017c2c:	6025      	str	r5, [r4, #0]
 8017c2e:	e7db      	b.n	8017be8 <_malloc_r+0x64>
 8017c30:	200002a8 	.word	0x200002a8
 8017c34:	200002ac 	.word	0x200002ac

08017c38 <_sbrk_r>:
 8017c38:	b538      	push	{r3, r4, r5, lr}
 8017c3a:	4c06      	ldr	r4, [pc, #24]	; (8017c54 <_sbrk_r+0x1c>)
 8017c3c:	2300      	movs	r3, #0
 8017c3e:	4605      	mov	r5, r0
 8017c40:	4608      	mov	r0, r1
 8017c42:	6023      	str	r3, [r4, #0]
 8017c44:	f7f8 fd70 	bl	8010728 <_sbrk>
 8017c48:	1c43      	adds	r3, r0, #1
 8017c4a:	d102      	bne.n	8017c52 <_sbrk_r+0x1a>
 8017c4c:	6823      	ldr	r3, [r4, #0]
 8017c4e:	b103      	cbz	r3, 8017c52 <_sbrk_r+0x1a>
 8017c50:	602b      	str	r3, [r5, #0]
 8017c52:	bd38      	pop	{r3, r4, r5, pc}
 8017c54:	20000acc 	.word	0x20000acc

08017c58 <_raise_r>:
 8017c58:	291f      	cmp	r1, #31
 8017c5a:	b538      	push	{r3, r4, r5, lr}
 8017c5c:	4604      	mov	r4, r0
 8017c5e:	460d      	mov	r5, r1
 8017c60:	d904      	bls.n	8017c6c <_raise_r+0x14>
 8017c62:	2316      	movs	r3, #22
 8017c64:	6003      	str	r3, [r0, #0]
 8017c66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017c6a:	bd38      	pop	{r3, r4, r5, pc}
 8017c6c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8017c6e:	b112      	cbz	r2, 8017c76 <_raise_r+0x1e>
 8017c70:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017c74:	b94b      	cbnz	r3, 8017c8a <_raise_r+0x32>
 8017c76:	4620      	mov	r0, r4
 8017c78:	f000 f830 	bl	8017cdc <_getpid_r>
 8017c7c:	462a      	mov	r2, r5
 8017c7e:	4601      	mov	r1, r0
 8017c80:	4620      	mov	r0, r4
 8017c82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017c86:	f000 b817 	b.w	8017cb8 <_kill_r>
 8017c8a:	2b01      	cmp	r3, #1
 8017c8c:	d00a      	beq.n	8017ca4 <_raise_r+0x4c>
 8017c8e:	1c59      	adds	r1, r3, #1
 8017c90:	d103      	bne.n	8017c9a <_raise_r+0x42>
 8017c92:	2316      	movs	r3, #22
 8017c94:	6003      	str	r3, [r0, #0]
 8017c96:	2001      	movs	r0, #1
 8017c98:	e7e7      	b.n	8017c6a <_raise_r+0x12>
 8017c9a:	2400      	movs	r4, #0
 8017c9c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8017ca0:	4628      	mov	r0, r5
 8017ca2:	4798      	blx	r3
 8017ca4:	2000      	movs	r0, #0
 8017ca6:	e7e0      	b.n	8017c6a <_raise_r+0x12>

08017ca8 <raise>:
 8017ca8:	4b02      	ldr	r3, [pc, #8]	; (8017cb4 <raise+0xc>)
 8017caa:	4601      	mov	r1, r0
 8017cac:	6818      	ldr	r0, [r3, #0]
 8017cae:	f7ff bfd3 	b.w	8017c58 <_raise_r>
 8017cb2:	bf00      	nop
 8017cb4:	20000218 	.word	0x20000218

08017cb8 <_kill_r>:
 8017cb8:	b538      	push	{r3, r4, r5, lr}
 8017cba:	4c07      	ldr	r4, [pc, #28]	; (8017cd8 <_kill_r+0x20>)
 8017cbc:	2300      	movs	r3, #0
 8017cbe:	4605      	mov	r5, r0
 8017cc0:	4608      	mov	r0, r1
 8017cc2:	4611      	mov	r1, r2
 8017cc4:	6023      	str	r3, [r4, #0]
 8017cc6:	f7f8 fd15 	bl	80106f4 <_kill>
 8017cca:	1c43      	adds	r3, r0, #1
 8017ccc:	d102      	bne.n	8017cd4 <_kill_r+0x1c>
 8017cce:	6823      	ldr	r3, [r4, #0]
 8017cd0:	b103      	cbz	r3, 8017cd4 <_kill_r+0x1c>
 8017cd2:	602b      	str	r3, [r5, #0]
 8017cd4:	bd38      	pop	{r3, r4, r5, pc}
 8017cd6:	bf00      	nop
 8017cd8:	20000acc 	.word	0x20000acc

08017cdc <_getpid_r>:
 8017cdc:	f7f8 bd02 	b.w	80106e4 <_getpid>

08017ce0 <__malloc_lock>:
 8017ce0:	4770      	bx	lr

08017ce2 <__malloc_unlock>:
 8017ce2:	4770      	bx	lr

08017ce4 <_init>:
 8017ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017ce6:	bf00      	nop
 8017ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017cea:	bc08      	pop	{r3}
 8017cec:	469e      	mov	lr, r3
 8017cee:	4770      	bx	lr

08017cf0 <_fini>:
 8017cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017cf2:	bf00      	nop
 8017cf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017cf6:	bc08      	pop	{r3}
 8017cf8:	469e      	mov	lr, r3
 8017cfa:	4770      	bx	lr
