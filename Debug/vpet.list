
vpet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010934  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ff0  08010acc  08010acc  00020acc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011abc  08011abc  000301f8  2**0
                  CONTENTS
  4 .ARM          00000008  08011abc  08011abc  00021abc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011ac4  08011ac4  000301f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08011ac4  08011ac4  00021ac4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011acc  08011acc  00021acc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  08011ad0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000814  200001f8  08011cc8  000301f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a0c  08011cc8  00030a0c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0006a820  00000000  00000000  00030228  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00008f47  00000000  00000000  0009aa48  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00003888  00000000  00000000  000a3990  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00003648  00000000  00000000  000a7218  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021b4d  00000000  00000000  000aa860  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000258d7  00000000  00000000  000cc3ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cbce7  00000000  00000000  000f1c84  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001bd96b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00011318  00000000  00000000  001bd9e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200001f8 	.word	0x200001f8
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08010ab4 	.word	0x08010ab4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200001fc 	.word	0x200001fc
 80001d4:	08010ab4 	.word	0x08010ab4

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001fc:	f000 b972 	b.w	80004e4 <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9e08      	ldr	r6, [sp, #32]
 800021e:	4604      	mov	r4, r0
 8000220:	4688      	mov	r8, r1
 8000222:	2b00      	cmp	r3, #0
 8000224:	d14b      	bne.n	80002be <__udivmoddi4+0xa6>
 8000226:	428a      	cmp	r2, r1
 8000228:	4615      	mov	r5, r2
 800022a:	d967      	bls.n	80002fc <__udivmoddi4+0xe4>
 800022c:	fab2 f282 	clz	r2, r2
 8000230:	b14a      	cbz	r2, 8000246 <__udivmoddi4+0x2e>
 8000232:	f1c2 0720 	rsb	r7, r2, #32
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	fa20 f707 	lsr.w	r7, r0, r7
 800023e:	4095      	lsls	r5, r2
 8000240:	ea47 0803 	orr.w	r8, r7, r3
 8000244:	4094      	lsls	r4, r2
 8000246:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800024a:	0c23      	lsrs	r3, r4, #16
 800024c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000250:	fa1f fc85 	uxth.w	ip, r5
 8000254:	fb0e 8817 	mls	r8, lr, r7, r8
 8000258:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800025c:	fb07 f10c 	mul.w	r1, r7, ip
 8000260:	4299      	cmp	r1, r3
 8000262:	d909      	bls.n	8000278 <__udivmoddi4+0x60>
 8000264:	18eb      	adds	r3, r5, r3
 8000266:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800026a:	f080 811b 	bcs.w	80004a4 <__udivmoddi4+0x28c>
 800026e:	4299      	cmp	r1, r3
 8000270:	f240 8118 	bls.w	80004a4 <__udivmoddi4+0x28c>
 8000274:	3f02      	subs	r7, #2
 8000276:	442b      	add	r3, r5
 8000278:	1a5b      	subs	r3, r3, r1
 800027a:	b2a4      	uxth	r4, r4
 800027c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000280:	fb0e 3310 	mls	r3, lr, r0, r3
 8000284:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000288:	fb00 fc0c 	mul.w	ip, r0, ip
 800028c:	45a4      	cmp	ip, r4
 800028e:	d909      	bls.n	80002a4 <__udivmoddi4+0x8c>
 8000290:	192c      	adds	r4, r5, r4
 8000292:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000296:	f080 8107 	bcs.w	80004a8 <__udivmoddi4+0x290>
 800029a:	45a4      	cmp	ip, r4
 800029c:	f240 8104 	bls.w	80004a8 <__udivmoddi4+0x290>
 80002a0:	3802      	subs	r0, #2
 80002a2:	442c      	add	r4, r5
 80002a4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a8:	eba4 040c 	sub.w	r4, r4, ip
 80002ac:	2700      	movs	r7, #0
 80002ae:	b11e      	cbz	r6, 80002b8 <__udivmoddi4+0xa0>
 80002b0:	40d4      	lsrs	r4, r2
 80002b2:	2300      	movs	r3, #0
 80002b4:	e9c6 4300 	strd	r4, r3, [r6]
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	428b      	cmp	r3, r1
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0xbe>
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	f000 80eb 	beq.w	800049e <__udivmoddi4+0x286>
 80002c8:	2700      	movs	r7, #0
 80002ca:	e9c6 0100 	strd	r0, r1, [r6]
 80002ce:	4638      	mov	r0, r7
 80002d0:	4639      	mov	r1, r7
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	fab3 f783 	clz	r7, r3
 80002da:	2f00      	cmp	r7, #0
 80002dc:	d147      	bne.n	800036e <__udivmoddi4+0x156>
 80002de:	428b      	cmp	r3, r1
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xd0>
 80002e2:	4282      	cmp	r2, r0
 80002e4:	f200 80fa 	bhi.w	80004dc <__udivmoddi4+0x2c4>
 80002e8:	1a84      	subs	r4, r0, r2
 80002ea:	eb61 0303 	sbc.w	r3, r1, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	4698      	mov	r8, r3
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d0e0      	beq.n	80002b8 <__udivmoddi4+0xa0>
 80002f6:	e9c6 4800 	strd	r4, r8, [r6]
 80002fa:	e7dd      	b.n	80002b8 <__udivmoddi4+0xa0>
 80002fc:	b902      	cbnz	r2, 8000300 <__udivmoddi4+0xe8>
 80002fe:	deff      	udf	#255	; 0xff
 8000300:	fab2 f282 	clz	r2, r2
 8000304:	2a00      	cmp	r2, #0
 8000306:	f040 808f 	bne.w	8000428 <__udivmoddi4+0x210>
 800030a:	1b49      	subs	r1, r1, r5
 800030c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000310:	fa1f f885 	uxth.w	r8, r5
 8000314:	2701      	movs	r7, #1
 8000316:	fbb1 fcfe 	udiv	ip, r1, lr
 800031a:	0c23      	lsrs	r3, r4, #16
 800031c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb08 f10c 	mul.w	r1, r8, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x124>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x122>
 8000334:	4299      	cmp	r1, r3
 8000336:	f200 80cd 	bhi.w	80004d4 <__udivmoddi4+0x2bc>
 800033a:	4684      	mov	ip, r0
 800033c:	1a59      	subs	r1, r3, r1
 800033e:	b2a3      	uxth	r3, r4
 8000340:	fbb1 f0fe 	udiv	r0, r1, lr
 8000344:	fb0e 1410 	mls	r4, lr, r0, r1
 8000348:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800034c:	fb08 f800 	mul.w	r8, r8, r0
 8000350:	45a0      	cmp	r8, r4
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x14c>
 8000354:	192c      	adds	r4, r5, r4
 8000356:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x14a>
 800035c:	45a0      	cmp	r8, r4
 800035e:	f200 80b6 	bhi.w	80004ce <__udivmoddi4+0x2b6>
 8000362:	4618      	mov	r0, r3
 8000364:	eba4 0408 	sub.w	r4, r4, r8
 8000368:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800036c:	e79f      	b.n	80002ae <__udivmoddi4+0x96>
 800036e:	f1c7 0c20 	rsb	ip, r7, #32
 8000372:	40bb      	lsls	r3, r7
 8000374:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000378:	ea4e 0e03 	orr.w	lr, lr, r3
 800037c:	fa01 f407 	lsl.w	r4, r1, r7
 8000380:	fa20 f50c 	lsr.w	r5, r0, ip
 8000384:	fa21 f30c 	lsr.w	r3, r1, ip
 8000388:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800038c:	4325      	orrs	r5, r4
 800038e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000392:	0c2c      	lsrs	r4, r5, #16
 8000394:	fb08 3319 	mls	r3, r8, r9, r3
 8000398:	fa1f fa8e 	uxth.w	sl, lr
 800039c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a0:	fb09 f40a 	mul.w	r4, r9, sl
 80003a4:	429c      	cmp	r4, r3
 80003a6:	fa02 f207 	lsl.w	r2, r2, r7
 80003aa:	fa00 f107 	lsl.w	r1, r0, r7
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b0>
 80003b0:	eb1e 0303 	adds.w	r3, lr, r3
 80003b4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003b8:	f080 8087 	bcs.w	80004ca <__udivmoddi4+0x2b2>
 80003bc:	429c      	cmp	r4, r3
 80003be:	f240 8084 	bls.w	80004ca <__udivmoddi4+0x2b2>
 80003c2:	f1a9 0902 	sub.w	r9, r9, #2
 80003c6:	4473      	add	r3, lr
 80003c8:	1b1b      	subs	r3, r3, r4
 80003ca:	b2ad      	uxth	r5, r5
 80003cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d0:	fb08 3310 	mls	r3, r8, r0, r3
 80003d4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003dc:	45a2      	cmp	sl, r4
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1da>
 80003e0:	eb1e 0404 	adds.w	r4, lr, r4
 80003e4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003e8:	d26b      	bcs.n	80004c2 <__udivmoddi4+0x2aa>
 80003ea:	45a2      	cmp	sl, r4
 80003ec:	d969      	bls.n	80004c2 <__udivmoddi4+0x2aa>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4474      	add	r4, lr
 80003f2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003f6:	fba0 8902 	umull	r8, r9, r0, r2
 80003fa:	eba4 040a 	sub.w	r4, r4, sl
 80003fe:	454c      	cmp	r4, r9
 8000400:	46c2      	mov	sl, r8
 8000402:	464b      	mov	r3, r9
 8000404:	d354      	bcc.n	80004b0 <__udivmoddi4+0x298>
 8000406:	d051      	beq.n	80004ac <__udivmoddi4+0x294>
 8000408:	2e00      	cmp	r6, #0
 800040a:	d069      	beq.n	80004e0 <__udivmoddi4+0x2c8>
 800040c:	ebb1 050a 	subs.w	r5, r1, sl
 8000410:	eb64 0403 	sbc.w	r4, r4, r3
 8000414:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000418:	40fd      	lsrs	r5, r7
 800041a:	40fc      	lsrs	r4, r7
 800041c:	ea4c 0505 	orr.w	r5, ip, r5
 8000420:	e9c6 5400 	strd	r5, r4, [r6]
 8000424:	2700      	movs	r7, #0
 8000426:	e747      	b.n	80002b8 <__udivmoddi4+0xa0>
 8000428:	f1c2 0320 	rsb	r3, r2, #32
 800042c:	fa20 f703 	lsr.w	r7, r0, r3
 8000430:	4095      	lsls	r5, r2
 8000432:	fa01 f002 	lsl.w	r0, r1, r2
 8000436:	fa21 f303 	lsr.w	r3, r1, r3
 800043a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800043e:	4338      	orrs	r0, r7
 8000440:	0c01      	lsrs	r1, r0, #16
 8000442:	fbb3 f7fe 	udiv	r7, r3, lr
 8000446:	fa1f f885 	uxth.w	r8, r5
 800044a:	fb0e 3317 	mls	r3, lr, r7, r3
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb07 f308 	mul.w	r3, r7, r8
 8000456:	428b      	cmp	r3, r1
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d907      	bls.n	800046e <__udivmoddi4+0x256>
 800045e:	1869      	adds	r1, r5, r1
 8000460:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000464:	d22f      	bcs.n	80004c6 <__udivmoddi4+0x2ae>
 8000466:	428b      	cmp	r3, r1
 8000468:	d92d      	bls.n	80004c6 <__udivmoddi4+0x2ae>
 800046a:	3f02      	subs	r7, #2
 800046c:	4429      	add	r1, r5
 800046e:	1acb      	subs	r3, r1, r3
 8000470:	b281      	uxth	r1, r0
 8000472:	fbb3 f0fe 	udiv	r0, r3, lr
 8000476:	fb0e 3310 	mls	r3, lr, r0, r3
 800047a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047e:	fb00 f308 	mul.w	r3, r0, r8
 8000482:	428b      	cmp	r3, r1
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x27e>
 8000486:	1869      	adds	r1, r5, r1
 8000488:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800048c:	d217      	bcs.n	80004be <__udivmoddi4+0x2a6>
 800048e:	428b      	cmp	r3, r1
 8000490:	d915      	bls.n	80004be <__udivmoddi4+0x2a6>
 8000492:	3802      	subs	r0, #2
 8000494:	4429      	add	r1, r5
 8000496:	1ac9      	subs	r1, r1, r3
 8000498:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800049c:	e73b      	b.n	8000316 <__udivmoddi4+0xfe>
 800049e:	4637      	mov	r7, r6
 80004a0:	4630      	mov	r0, r6
 80004a2:	e709      	b.n	80002b8 <__udivmoddi4+0xa0>
 80004a4:	4607      	mov	r7, r0
 80004a6:	e6e7      	b.n	8000278 <__udivmoddi4+0x60>
 80004a8:	4618      	mov	r0, r3
 80004aa:	e6fb      	b.n	80002a4 <__udivmoddi4+0x8c>
 80004ac:	4541      	cmp	r1, r8
 80004ae:	d2ab      	bcs.n	8000408 <__udivmoddi4+0x1f0>
 80004b0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004b4:	eb69 020e 	sbc.w	r2, r9, lr
 80004b8:	3801      	subs	r0, #1
 80004ba:	4613      	mov	r3, r2
 80004bc:	e7a4      	b.n	8000408 <__udivmoddi4+0x1f0>
 80004be:	4660      	mov	r0, ip
 80004c0:	e7e9      	b.n	8000496 <__udivmoddi4+0x27e>
 80004c2:	4618      	mov	r0, r3
 80004c4:	e795      	b.n	80003f2 <__udivmoddi4+0x1da>
 80004c6:	4667      	mov	r7, ip
 80004c8:	e7d1      	b.n	800046e <__udivmoddi4+0x256>
 80004ca:	4681      	mov	r9, r0
 80004cc:	e77c      	b.n	80003c8 <__udivmoddi4+0x1b0>
 80004ce:	3802      	subs	r0, #2
 80004d0:	442c      	add	r4, r5
 80004d2:	e747      	b.n	8000364 <__udivmoddi4+0x14c>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	442b      	add	r3, r5
 80004da:	e72f      	b.n	800033c <__udivmoddi4+0x124>
 80004dc:	4638      	mov	r0, r7
 80004de:	e708      	b.n	80002f2 <__udivmoddi4+0xda>
 80004e0:	4637      	mov	r7, r6
 80004e2:	e6e9      	b.n	80002b8 <__udivmoddi4+0xa0>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <_ZN4tama5Vec2dplES0_>:
//

#include "Vec2d.h"

tama::Vec2d tama::Vec2d::operator+(tama::Vec2d delta)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b084      	sub	sp, #16
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	60f8      	str	r0, [r7, #12]
 80004f0:	60b9      	str	r1, [r7, #8]
 80004f2:	4639      	mov	r1, r7
 80004f4:	e881 000c 	stmia.w	r1, {r2, r3}
    return Vec2d(this->x + delta.x, this->y + delta.y);
 80004f8:	68bb      	ldr	r3, [r7, #8]
 80004fa:	681a      	ldr	r2, [r3, #0]
 80004fc:	683b      	ldr	r3, [r7, #0]
 80004fe:	18d1      	adds	r1, r2, r3
 8000500:	68bb      	ldr	r3, [r7, #8]
 8000502:	685a      	ldr	r2, [r3, #4]
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	4413      	add	r3, r2
 8000508:	461a      	mov	r2, r3
 800050a:	68f8      	ldr	r0, [r7, #12]
 800050c:	f000 f804 	bl	8000518 <_ZN4tama5Vec2dC1Eii>
}
 8000510:	68f8      	ldr	r0, [r7, #12]
 8000512:	3710      	adds	r7, #16
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}

08000518 <_ZN4tama5Vec2dC1Eii>:

tama::Vec2d::Vec2d(int i, int j)
 8000518:	b480      	push	{r7}
 800051a:	b085      	sub	sp, #20
 800051c:	af00      	add	r7, sp, #0
 800051e:	60f8      	str	r0, [r7, #12]
 8000520:	60b9      	str	r1, [r7, #8]
 8000522:	607a      	str	r2, [r7, #4]
{
    x = i;
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	68ba      	ldr	r2, [r7, #8]
 8000528:	601a      	str	r2, [r3, #0]
    y = j;
 800052a:	68fb      	ldr	r3, [r7, #12]
 800052c:	687a      	ldr	r2, [r7, #4]
 800052e:	605a      	str	r2, [r3, #4]
}
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	4618      	mov	r0, r3
 8000534:	3714      	adds	r7, #20
 8000536:	46bd      	mov	sp, r7
 8000538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053c:	4770      	bx	lr

0800053e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_add_ref_copyEv>:
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 800053e:	b480      	push	{r7}
 8000540:	b083      	sub	sp, #12
 8000542:	af00      	add	r7, sp, #0
 8000544:	6078      	str	r0, [r7, #4]
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	685b      	ldr	r3, [r3, #4]
 800054a:	1c5a      	adds	r2, r3, #1
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	605a      	str	r2, [r3, #4]
 8000550:	bf00      	nop
 8000552:	370c      	adds	r7, #12
 8000554:	46bd      	mov	sp, r7
 8000556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055a:	4770      	bx	lr

0800055c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
 8000564:	6039      	str	r1, [r7, #0]
      : _M_pi(__r._M_pi)
 8000566:	683b      	ldr	r3, [r7, #0]
 8000568:	681a      	ldr	r2, [r3, #0]
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	601a      	str	r2, [r3, #0]
      {
	if (_M_pi != 0)
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	2b00      	cmp	r3, #0
 8000574:	d004      	beq.n	8000580 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0x24>
	  _M_pi->_M_add_ref_copy();
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4618      	mov	r0, r3
 800057c:	f7ff ffdf 	bl	800053e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_add_ref_copyEv>
      }
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	4618      	mov	r0, r3
 8000584:	3708      	adds	r7, #8
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}

0800058a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
 800058a:	b580      	push	{r7, lr}
 800058c:	b082      	sub	sp, #8
 800058e:	af00      	add	r7, sp, #0
 8000590:	6078      	str	r0, [r7, #4]
      if (--_M_use_count == 0)
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	685b      	ldr	r3, [r3, #4]
 8000596:	1e5a      	subs	r2, r3, #1
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	605a      	str	r2, [r3, #4]
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	685b      	ldr	r3, [r3, #4]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	bf0c      	ite	eq
 80005a4:	2301      	moveq	r3, #1
 80005a6:	2300      	movne	r3, #0
 80005a8:	b2db      	uxtb	r3, r3
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d019      	beq.n	80005e2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x58>
          _M_dispose();
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	3308      	adds	r3, #8
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	6878      	ldr	r0, [r7, #4]
 80005b8:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	689b      	ldr	r3, [r3, #8]
 80005be:	1e5a      	subs	r2, r3, #1
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	609a      	str	r2, [r3, #8]
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	689b      	ldr	r3, [r3, #8]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	bf0c      	ite	eq
 80005cc:	2301      	moveq	r3, #1
 80005ce:	2300      	movne	r3, #0
 80005d0:	b2db      	uxtb	r3, r3
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d005      	beq.n	80005e2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x58>
            _M_destroy();
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	330c      	adds	r3, #12
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	6878      	ldr	r0, [r7, #4]
 80005e0:	4798      	blx	r3
    }
 80005e2:	bf00      	nop
 80005e4:	3708      	adds	r7, #8
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}

080005ea <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EEaSERKS4_>:
      _M_get() const noexcept
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
    };

  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
 80005ea:	b580      	push	{r7, lr}
 80005ec:	b082      	sub	sp, #8
 80005ee:	af00      	add	r7, sp, #0
 80005f0:	6078      	str	r0, [r7, #4]
 80005f2:	6039      	str	r1, [r7, #0]
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	681a      	ldr	r2, [r3, #0]
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	1d1a      	adds	r2, r3, #4
 8000600:	683b      	ldr	r3, [r7, #0]
 8000602:	3304      	adds	r3, #4
 8000604:	4619      	mov	r1, r3
 8000606:	4610      	mov	r0, r2
 8000608:	f000 f982 	bl	8000910 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	4618      	mov	r0, r3
 8000610:	3708      	adds	r7, #8
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}

08000616 <_ZNSt10shared_ptrIN4tama7TextureEEaSERKS2_>:
   *
   *  The object pointed to is deleted when the last shared_ptr pointing to
   *  it is destroyed or reset.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
 8000616:	b580      	push	{r7, lr}
 8000618:	b082      	sub	sp, #8
 800061a:	af00      	add	r7, sp, #0
 800061c:	6078      	str	r0, [r7, #4]
 800061e:	6039      	str	r1, [r7, #0]
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	683a      	ldr	r2, [r7, #0]
 8000624:	4611      	mov	r1, r2
 8000626:	4618      	mov	r0, r3
 8000628:	f7ff ffdf 	bl	80005ea <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EEaSERKS4_>
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	4618      	mov	r0, r3
 8000630:	3708      	adds	r7, #8
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}

08000636 <_ZN4tama6Sprite10setTextureESt10shared_ptrINS_7TextureEE>:
//

#include "Sprite.h"

void tama::Sprite::setTexture(std::shared_ptr<tama::Texture> texture)
{
 8000636:	b580      	push	{r7, lr}
 8000638:	b082      	sub	sp, #8
 800063a:	af00      	add	r7, sp, #0
 800063c:	6078      	str	r0, [r7, #4]
 800063e:	6039      	str	r1, [r7, #0]
    this->texture = texture;
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	3304      	adds	r3, #4
 8000644:	6839      	ldr	r1, [r7, #0]
 8000646:	4618      	mov	r0, r3
 8000648:	f7ff ffe5 	bl	8000616 <_ZNSt10shared_ptrIN4tama7TextureEEaSERKS2_>
}
 800064c:	bf00      	nop
 800064e:	3708      	adds	r7, #8
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}

08000654 <_ZN4tama6Sprite11setPositionENS_5Vec2dE>:

void tama::Sprite::setPosition(tama::Vec2d position)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b084      	sub	sp, #16
 8000658:	af00      	add	r7, sp, #0
 800065a:	60f8      	str	r0, [r7, #12]
 800065c:	1d3b      	adds	r3, r7, #4
 800065e:	e883 0006 	stmia.w	r3, {r1, r2}
    this->position = position;
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	330c      	adds	r3, #12
 8000666:	1d3a      	adds	r2, r7, #4
 8000668:	e892 0003 	ldmia.w	r2, {r0, r1}
 800066c:	e883 0003 	stmia.w	r3, {r0, r1}
    notifyObserver();
 8000670:	68f8      	ldr	r0, [r7, #12]
 8000672:	f000 f8c8 	bl	8000806 <_ZN4tama6Sprite14notifyObserverEv>
}
 8000676:	bf00      	nop
 8000678:	3710      	adds	r7, #16
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}

0800067e <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 800067e:	b580      	push	{r7, lr}
 8000680:	b082      	sub	sp, #8
 8000682:	af00      	add	r7, sp, #0
 8000684:	6078      	str	r0, [r7, #4]
 8000686:	6039      	str	r1, [r7, #0]
 8000688:	683b      	ldr	r3, [r7, #0]
 800068a:	681a      	ldr	r2, [r3, #0]
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	1d1a      	adds	r2, r3, #4
 8000694:	683b      	ldr	r3, [r7, #0]
 8000696:	3304      	adds	r3, #4
 8000698:	4619      	mov	r1, r3
 800069a:	4610      	mov	r0, r2
 800069c:	f7ff ff5e 	bl	800055c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	4618      	mov	r0, r3
 80006a4:	3708      	adds	r7, #8
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}

080006aa <_ZNSt10shared_ptrIN4tama7TextureEEC1ERKS2_>:
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;
 80006aa:	b580      	push	{r7, lr}
 80006ac:	b082      	sub	sp, #8
 80006ae:	af00      	add	r7, sp, #0
 80006b0:	6078      	str	r0, [r7, #4]
 80006b2:	6039      	str	r1, [r7, #0]
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	683a      	ldr	r2, [r7, #0]
 80006b8:	4611      	mov	r1, r2
 80006ba:	4618      	mov	r0, r3
 80006bc:	f7ff ffdf 	bl	800067e <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	4618      	mov	r0, r3
 80006c4:	3708      	adds	r7, #8
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}

080006ca <_ZN4tama6Sprite10getTextureEv>:

std::shared_ptr<tama::Texture> tama::Sprite::getTexture()
{
 80006ca:	b580      	push	{r7, lr}
 80006cc:	b082      	sub	sp, #8
 80006ce:	af00      	add	r7, sp, #0
 80006d0:	6078      	str	r0, [r7, #4]
 80006d2:	6039      	str	r1, [r7, #0]
    return texture;
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	3304      	adds	r3, #4
 80006d8:	4619      	mov	r1, r3
 80006da:	6878      	ldr	r0, [r7, #4]
 80006dc:	f7ff ffe5 	bl	80006aa <_ZNSt10shared_ptrIN4tama7TextureEEC1ERKS2_>
}
 80006e0:	6878      	ldr	r0, [r7, #4]
 80006e2:	3708      	adds	r7, #8
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}

080006e8 <_ZN4tama6Sprite11getPositionEv>:

tama::Vec2d tama::Sprite::getPosition()
{
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
 80006f0:	6039      	str	r1, [r7, #0]
    return position;
 80006f2:	687a      	ldr	r2, [r7, #4]
 80006f4:	683b      	ldr	r3, [r7, #0]
 80006f6:	330c      	adds	r3, #12
 80006f8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80006fc:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8000700:	6878      	ldr	r0, [r7, #4]
 8000702:	370c      	adds	r7, #12
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr

0800070c <_ZN4tama6Sprite4moveENS_5Vec2dE>:

void tama::Sprite::move(tama::Vec2d delta)
{
 800070c:	b590      	push	{r4, r7, lr}
 800070e:	b087      	sub	sp, #28
 8000710:	af00      	add	r7, sp, #0
 8000712:	6178      	str	r0, [r7, #20]
 8000714:	f107 030c 	add.w	r3, r7, #12
 8000718:	e883 0006 	stmia.w	r3, {r1, r2}
    position = position + delta;
 800071c:	697b      	ldr	r3, [r7, #20]
 800071e:	f103 010c 	add.w	r1, r3, #12
 8000722:	697c      	ldr	r4, [r7, #20]
 8000724:	4638      	mov	r0, r7
 8000726:	f107 030c 	add.w	r3, r7, #12
 800072a:	cb0c      	ldmia	r3, {r2, r3}
 800072c:	f7ff fedc 	bl	80004e8 <_ZN4tama5Vec2dplES0_>
 8000730:	f104 030c 	add.w	r3, r4, #12
 8000734:	463a      	mov	r2, r7
 8000736:	e892 0003 	ldmia.w	r2, {r0, r1}
 800073a:	e883 0003 	stmia.w	r3, {r0, r1}
    notifyObserver();
 800073e:	6978      	ldr	r0, [r7, #20]
 8000740:	f000 f861 	bl	8000806 <_ZN4tama6Sprite14notifyObserverEv>
}
 8000744:	bf00      	nop
 8000746:	371c      	adds	r7, #28
 8000748:	46bd      	mov	sp, r7
 800074a:	bd90      	pop	{r4, r7, pc}

0800074c <_ZN4tama6Sprite4hideEv>:

void tama::Sprite::hide()
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
    visible = false;
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	2200      	movs	r2, #0
 8000758:	751a      	strb	r2, [r3, #20]
    notifyObserver();
 800075a:	6878      	ldr	r0, [r7, #4]
 800075c:	f000 f853 	bl	8000806 <_ZN4tama6Sprite14notifyObserverEv>
}
 8000760:	bf00      	nop
 8000762:	3708      	adds	r7, #8
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}

08000768 <_ZN4tama6Sprite4showEv>:

void tama::Sprite::show()
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
    visible = true;
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	2201      	movs	r2, #1
 8000774:	751a      	strb	r2, [r3, #20]
    notifyObserver();
 8000776:	6878      	ldr	r0, [r7, #4]
 8000778:	f000 f845 	bl	8000806 <_ZN4tama6Sprite14notifyObserverEv>
}
 800077c:	bf00      	nop
 800077e:	3708      	adds	r7, #8
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}

08000784 <_ZNSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EEaSERKS4_>:
    class __shared_ptr
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
 800078c:	6039      	str	r1, [r7, #0]
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	681a      	ldr	r2, [r3, #0]
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	1d1a      	adds	r2, r3, #4
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	3304      	adds	r3, #4
 800079e:	4619      	mov	r1, r3
 80007a0:	4610      	mov	r0, r2
 80007a2:	f000 f8b5 	bl	8000910 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	4618      	mov	r0, r3
 80007aa:	3708      	adds	r7, #8
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}

080007b0 <_ZNSt10shared_ptrIN4tama14ChangeObserverEEaSERKS2_>:
    class shared_ptr : public __shared_ptr<_Tp>
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
 80007b8:	6039      	str	r1, [r7, #0]
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	683a      	ldr	r2, [r7, #0]
 80007be:	4611      	mov	r1, r2
 80007c0:	4618      	mov	r0, r3
 80007c2:	f7ff ffdf 	bl	8000784 <_ZNSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EEaSERKS4_>
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	4618      	mov	r0, r3
 80007ca:	3708      	adds	r7, #8
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}

080007d0 <_ZN4tama6Sprite17setChangeObserverESt10shared_ptrINS_14ChangeObserverEE>:

void tama::Sprite::setChangeObserver(std::shared_ptr<tama::ChangeObserver> observer)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
 80007d8:	6039      	str	r1, [r7, #0]
    this->observer = observer;
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	3318      	adds	r3, #24
 80007de:	6839      	ldr	r1, [r7, #0]
 80007e0:	4618      	mov	r0, r3
 80007e2:	f7ff ffe5 	bl	80007b0 <_ZNSt10shared_ptrIN4tama14ChangeObserverEEaSERKS2_>
}
 80007e6:	bf00      	nop
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}

080007ee <_ZN4tama6Sprite9isVisibleEv>:

bool tama::Sprite::isVisible()
{
 80007ee:	b480      	push	{r7}
 80007f0:	b083      	sub	sp, #12
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	6078      	str	r0, [r7, #4]
    return visible;
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	7d1b      	ldrb	r3, [r3, #20]
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	370c      	adds	r7, #12
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr

08000806 <_ZN4tama6Sprite14notifyObserverEv>:

void tama::Sprite::notifyObserver()
{
 8000806:	b580      	push	{r7, lr}
 8000808:	b082      	sub	sp, #8
 800080a:	af00      	add	r7, sp, #0
 800080c:	6078      	str	r0, [r7, #4]
    if (observer != nullptr)
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	3318      	adds	r3, #24
 8000812:	2100      	movs	r1, #0
 8000814:	4618      	mov	r0, r3
 8000816:	f000 f8b1 	bl	800097c <_ZStneIN4tama14ChangeObserverEEbRKSt10shared_ptrIT_EDn>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d009      	beq.n	8000834 <_ZN4tama6Sprite14notifyObserverEv+0x2e>
    {
        observer->onChange();
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	3318      	adds	r3, #24
 8000824:	4618      	mov	r0, r3
 8000826:	f000 f8b7 	bl	8000998 <_ZNKSt19__shared_ptr_accessIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800082a:	4602      	mov	r2, r0
 800082c:	6813      	ldr	r3, [r2, #0]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4610      	mov	r0, r2
 8000832:	4798      	blx	r3
    }
}
 8000834:	bf00      	nop
 8000836:	3708      	adds	r7, #8
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}

0800083c <_ZN4tama8DrawableC1Ev>:
#include "../../../common/observers/ChangeObserver.h"
#include "texture.h"

namespace tama
{
    class Drawable
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
 8000844:	4a04      	ldr	r2, [pc, #16]	; (8000858 <_ZN4tama8DrawableC1Ev+0x1c>)
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	4618      	mov	r0, r3
 800084e:	370c      	adds	r7, #12
 8000850:	46bd      	mov	sp, r7
 8000852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000856:	4770      	bx	lr
 8000858:	08010b44 	.word	0x08010b44

0800085c <_ZNSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	3304      	adds	r3, #4
 8000868:	4618      	mov	r0, r3
 800086a:	f000 f875 	bl	8000958 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	4618      	mov	r0, r3
 8000872:	3708      	adds	r7, #8
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}

08000878 <_ZNSt10shared_ptrIN4tama14ChangeObserverEED1Ev>:
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	4618      	mov	r0, r3
 8000884:	f7ff ffea 	bl	800085c <_ZNSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	4618      	mov	r0, r3
 800088c:	3708      	adds	r7, #8
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
	...

08000894 <_ZN4tama6SpriteC1ERKSt10shared_ptrINS_7TextureEERKNS_5Vec2dE>:

tama::Sprite::Sprite(const std::shared_ptr<Texture> &texture, const tama::Vec2d &position) : texture(texture),
 8000894:	b590      	push	{r4, r7, lr}
 8000896:	b087      	sub	sp, #28
 8000898:	af00      	add	r7, sp, #0
 800089a:	60f8      	str	r0, [r7, #12]
 800089c:	60b9      	str	r1, [r7, #8]
 800089e:	607a      	str	r2, [r7, #4]
                                                                                             position(position)
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	4618      	mov	r0, r3
 80008a4:	f7ff ffca 	bl	800083c <_ZN4tama8DrawableC1Ev>
 80008a8:	4a18      	ldr	r2, [pc, #96]	; (800090c <_ZN4tama6SpriteC1ERKSt10shared_ptrINS_7TextureEERKNS_5Vec2dE+0x78>)
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	3304      	adds	r3, #4
 80008b2:	68b9      	ldr	r1, [r7, #8]
 80008b4:	4618      	mov	r0, r3
 80008b6:	f7ff fef8 	bl	80006aa <_ZNSt10shared_ptrIN4tama7TextureEEC1ERKS2_>
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	687a      	ldr	r2, [r7, #4]
 80008be:	330c      	adds	r3, #12
 80008c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008c4:	e883 0003 	stmia.w	r3, {r0, r1}
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	3318      	adds	r3, #24
 80008cc:	4618      	mov	r0, r3
 80008ce:	f000 f86f 	bl	80009b0 <_ZNSt10shared_ptrIN4tama14ChangeObserverEEC1Ev>
{
    observer = nullptr;
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	f103 0418 	add.w	r4, r3, #24
 80008d8:	f107 0310 	add.w	r3, r7, #16
 80008dc:	2100      	movs	r1, #0
 80008de:	4618      	mov	r0, r3
 80008e0:	f000 f873 	bl	80009ca <_ZNSt10shared_ptrIN4tama14ChangeObserverEEC1EDn>
 80008e4:	f107 0310 	add.w	r3, r7, #16
 80008e8:	4619      	mov	r1, r3
 80008ea:	4620      	mov	r0, r4
 80008ec:	f000 f885 	bl	80009fa <_ZNSt10shared_ptrIN4tama14ChangeObserverEEaSEOS2_>
 80008f0:	f107 0310 	add.w	r3, r7, #16
 80008f4:	4618      	mov	r0, r3
 80008f6:	f7ff ffbf 	bl	8000878 <_ZNSt10shared_ptrIN4tama14ChangeObserverEED1Ev>
    visible = true;
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	2201      	movs	r2, #1
 80008fe:	751a      	strb	r2, [r3, #20]
}
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	4618      	mov	r0, r3
 8000904:	371c      	adds	r7, #28
 8000906:	46bd      	mov	sp, r7
 8000908:	bd90      	pop	{r4, r7, pc}
 800090a:	bf00      	nop
 800090c:	08010b18 	.word	0x08010b18

08000910 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>:
      operator=(const __shared_count& __r) noexcept
 8000910:	b580      	push	{r7, lr}
 8000912:	b084      	sub	sp, #16
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
 8000918:	6039      	str	r1, [r7, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	60fb      	str	r3, [r7, #12]
	if (__tmp != _M_pi)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	68fa      	ldr	r2, [r7, #12]
 8000926:	429a      	cmp	r2, r3
 8000928:	d011      	beq.n	800094e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x3e>
	    if (__tmp != 0)
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d002      	beq.n	8000936 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x26>
	      __tmp->_M_add_ref_copy();
 8000930:	68f8      	ldr	r0, [r7, #12]
 8000932:	f7ff fe04 	bl	800053e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_add_ref_copyEv>
	    if (_M_pi != 0)
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	2b00      	cmp	r3, #0
 800093c:	d004      	beq.n	8000948 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x38>
	      _M_pi->_M_release();
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	4618      	mov	r0, r3
 8000944:	f7ff fe21 	bl	800058a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	68fa      	ldr	r2, [r7, #12]
 800094c:	601a      	str	r2, [r3, #0]
	return *this;
 800094e:	687b      	ldr	r3, [r7, #4]
      }
 8000950:	4618      	mov	r0, r3
 8000952:	3710      	adds	r7, #16
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}

08000958 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
	if (_M_pi != nullptr)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d004      	beq.n	8000972 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x1a>
	  _M_pi->_M_release();
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4618      	mov	r0, r3
 800096e:	f7ff fe0c 	bl	800058a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	4618      	mov	r0, r3
 8000976:	3708      	adds	r7, #8
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}

0800097c <_ZStneIN4tama14ChangeObserverEEbRKSt10shared_ptrIT_EDn>:
    operator!=(const shared_ptr<_Tp>& __a, const shared_ptr<_Up>& __b) noexcept
    { return __a.get() != __b.get(); }

  template<typename _Tp>
    inline bool
    operator!=(const shared_ptr<_Tp>& __a, nullptr_t) noexcept
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
 8000984:	6039      	str	r1, [r7, #0]
    { return (bool)__a; }
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	4618      	mov	r0, r3
 800098a:	f000 f849 	bl	8000a20 <_ZNKSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EEcvbEv>
 800098e:	4603      	mov	r3, r0
 8000990:	4618      	mov	r0, r3
 8000992:	3708      	adds	r7, #8
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}

08000998 <_ZNKSt19__shared_ptr_accessIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
	return _M_get();
 80009a0:	6878      	ldr	r0, [r7, #4]
 80009a2:	f000 f84e 	bl	8000a42 <_ZNKSt19__shared_ptr_accessIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 80009a6:	4603      	mov	r3, r0
      }
 80009a8:	4618      	mov	r0, r3
 80009aa:	3708      	adds	r7, #8
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}

080009b0 <_ZNSt10shared_ptrIN4tama14ChangeObserverEEC1Ev>:
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	4618      	mov	r0, r3
 80009bc:	f000 f84d 	bl	8000a5a <_ZNSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	4618      	mov	r0, r3
 80009c4:	3708      	adds	r7, #8
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}

080009ca <_ZNSt10shared_ptrIN4tama14ChangeObserverEEC1EDn>:
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }
 80009ca:	b580      	push	{r7, lr}
 80009cc:	b082      	sub	sp, #8
 80009ce:	af00      	add	r7, sp, #0
 80009d0:	6078      	str	r0, [r7, #4]
 80009d2:	6039      	str	r1, [r7, #0]
 80009d4:	6878      	ldr	r0, [r7, #4]
 80009d6:	f7ff ffeb 	bl	80009b0 <_ZNSt10shared_ptrIN4tama14ChangeObserverEEC1Ev>
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	4618      	mov	r0, r3
 80009de:	3708      	adds	r7, #8
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}

080009e4 <_ZSt4moveIRSt10shared_ptrIN4tama14ChangeObserverEEEONSt16remove_referenceIT_E4typeEOS6_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	4618      	mov	r0, r3
 80009f0:	370c      	adds	r7, #12
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr

080009fa <_ZNSt10shared_ptrIN4tama14ChangeObserverEEaSEOS2_>:
      operator=(shared_ptr&& __r) noexcept
 80009fa:	b590      	push	{r4, r7, lr}
 80009fc:	b083      	sub	sp, #12
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	6078      	str	r0, [r7, #4]
 8000a02:	6039      	str	r1, [r7, #0]
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
 8000a04:	687c      	ldr	r4, [r7, #4]
 8000a06:	6838      	ldr	r0, [r7, #0]
 8000a08:	f7ff ffec 	bl	80009e4 <_ZSt4moveIRSt10shared_ptrIN4tama14ChangeObserverEEEONSt16remove_referenceIT_E4typeEOS6_>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4620      	mov	r0, r4
 8000a12:	f000 f83e 	bl	8000a92 <_ZNSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_>
	return *this;
 8000a16:	687b      	ldr	r3, [r7, #4]
      }
 8000a18:	4618      	mov	r0, r3
 8000a1a:	370c      	adds	r7, #12
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd90      	pop	{r4, r7, pc}

08000a20 <_ZNKSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EEcvbEv>:

      element_type*
      get() const noexcept
      { return _M_ptr; }

      explicit operator bool() const // never throws
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
      { return _M_ptr == 0 ? false : true; }
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	bf14      	ite	ne
 8000a30:	2301      	movne	r3, #1
 8000a32:	2300      	moveq	r3, #0
 8000a34:	b2db      	uxtb	r3, r3
 8000a36:	4618      	mov	r0, r3
 8000a38:	370c      	adds	r7, #12
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr

08000a42 <_ZNKSt19__shared_ptr_accessIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 8000a42:	b580      	push	{r7, lr}
 8000a44:	b082      	sub	sp, #8
 8000a46:	af00      	add	r7, sp, #0
 8000a48:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 8000a4a:	6878      	ldr	r0, [r7, #4]
 8000a4c:	f000 f840 	bl	8000ad0 <_ZNKSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EE3getEv>
 8000a50:	4603      	mov	r3, r0
 8000a52:	4618      	mov	r0, r3
 8000a54:	3708      	adds	r7, #8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}

08000a5a <_ZNSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      constexpr __shared_ptr() noexcept
 8000a5a:	b580      	push	{r7, lr}
 8000a5c:	b082      	sub	sp, #8
 8000a5e:	af00      	add	r7, sp, #0
 8000a60:	6078      	str	r0, [r7, #4]
      : _M_ptr(0), _M_refcount()
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	3304      	adds	r3, #4
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f000 f83b 	bl	8000ae8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
      { }
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	4618      	mov	r0, r3
 8000a76:	3708      	adds	r7, #8
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}

08000a7c <_ZSt4moveIRSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4618      	mov	r0, r3
 8000a88:	370c      	adds	r7, #12
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr

08000a92 <_ZNSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_>:
      operator=(__shared_ptr&& __r) noexcept
 8000a92:	b580      	push	{r7, lr}
 8000a94:	b084      	sub	sp, #16
 8000a96:	af00      	add	r7, sp, #0
 8000a98:	6078      	str	r0, [r7, #4]
 8000a9a:	6039      	str	r1, [r7, #0]
	__shared_ptr(std::move(__r)).swap(*this);
 8000a9c:	6838      	ldr	r0, [r7, #0]
 8000a9e:	f7ff ffed 	bl	8000a7c <_ZSt4moveIRSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EEEONSt16remove_referenceIT_E4typeEOS8_>
 8000aa2:	4602      	mov	r2, r0
 8000aa4:	f107 0308 	add.w	r3, r7, #8
 8000aa8:	4611      	mov	r1, r2
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f000 f82a 	bl	8000b04 <_ZNSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EEC1EOS4_>
 8000ab0:	f107 0308 	add.w	r3, r7, #8
 8000ab4:	6879      	ldr	r1, [r7, #4]
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f000 f842 	bl	8000b40 <_ZNSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EE4swapERS4_>
 8000abc:	f107 0308 	add.w	r3, r7, #8
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f7ff fecb 	bl	800085c <_ZNSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EED1Ev>
	return *this;
 8000ac6:	687b      	ldr	r3, [r7, #4]
      }
 8000ac8:	4618      	mov	r0, r3
 8000aca:	3710      	adds	r7, #16
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}

08000ad0 <_ZNKSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EE3getEv>:
      get() const noexcept
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4618      	mov	r0, r3
 8000ade:	370c      	adds	r7, #12
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr

08000ae8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      constexpr __shared_count() noexcept : _M_pi(0)
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	2200      	movs	r2, #0
 8000af4:	601a      	str	r2, [r3, #0]
      { }
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	4618      	mov	r0, r3
 8000afa:	370c      	adds	r7, #12
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr

08000b04 <_ZNSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EEC1EOS4_>:
      __shared_ptr(__shared_ptr&& __r) noexcept
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
 8000b0c:	6039      	str	r1, [r7, #0]
      : _M_ptr(__r._M_ptr), _M_refcount()
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	681a      	ldr	r2, [r3, #0]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	601a      	str	r2, [r3, #0]
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	3304      	adds	r3, #4
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f7ff ffe4 	bl	8000ae8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	_M_refcount._M_swap(__r._M_refcount);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	1d1a      	adds	r2, r3, #4
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	3304      	adds	r3, #4
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4610      	mov	r0, r2
 8000b2c:	f000 f81f 	bl	8000b6e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	__r._M_ptr = 0;
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	2200      	movs	r2, #0
 8000b34:	601a      	str	r2, [r3, #0]
      }
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3708      	adds	r7, #8
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <_ZNSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EE4swapERS4_>:
      long
      use_count() const noexcept
      { return _M_refcount._M_get_use_count(); }

      void
      swap(__shared_ptr<_Tp, _Lp>& __other) noexcept
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
 8000b48:	6039      	str	r1, [r7, #0]
      {
	std::swap(_M_ptr, __other._M_ptr);
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	683a      	ldr	r2, [r7, #0]
 8000b4e:	4611      	mov	r1, r2
 8000b50:	4618      	mov	r0, r3
 8000b52:	f000 f82c 	bl	8000bae <_ZSt4swapIPN4tama14ChangeObserverEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS7_ESt18is_move_assignableIS7_EEE5valueEvE4typeERS7_SH_>
	_M_refcount._M_swap(__other._M_refcount);
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	1d1a      	adds	r2, r3, #4
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	3304      	adds	r3, #4
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4610      	mov	r0, r2
 8000b62:	f000 f804 	bl	8000b6e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
      }
 8000b66:	bf00      	nop
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>:
      _M_swap(__shared_count& __r) noexcept
 8000b6e:	b480      	push	{r7}
 8000b70:	b085      	sub	sp, #20
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	6078      	str	r0, [r7, #4]
 8000b76:	6039      	str	r1, [r7, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	60fb      	str	r3, [r7, #12]
	__r._M_pi = _M_pi;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681a      	ldr	r2, [r3, #0]
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	601a      	str	r2, [r3, #0]
	_M_pi = __tmp;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	68fa      	ldr	r2, [r7, #12]
 8000b8a:	601a      	str	r2, [r3, #0]
      }
 8000b8c:	bf00      	nop
 8000b8e:	3714      	adds	r7, #20
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr

08000b98 <_ZSt4moveIRPN4tama14ChangeObserverEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	370c      	adds	r7, #12
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr

08000bae <_ZSt4swapIPN4tama14ChangeObserverEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS7_ESt18is_move_assignableIS7_EEE5valueEvE4typeERS7_SH_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
 8000bae:	b580      	push	{r7, lr}
 8000bb0:	b084      	sub	sp, #16
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	6078      	str	r0, [r7, #4]
 8000bb6:	6039      	str	r1, [r7, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8000bb8:	6878      	ldr	r0, [r7, #4]
 8000bba:	f7ff ffed 	bl	8000b98 <_ZSt4moveIRPN4tama14ChangeObserverEEONSt16remove_referenceIT_E4typeEOS5_>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8000bc4:	6838      	ldr	r0, [r7, #0]
 8000bc6:	f7ff ffe7 	bl	8000b98 <_ZSt4moveIRPN4tama14ChangeObserverEEONSt16remove_referenceIT_E4typeEOS5_>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	681a      	ldr	r2, [r3, #0]
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8000bd2:	f107 030c 	add.w	r3, r7, #12
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f7ff ffde 	bl	8000b98 <_ZSt4moveIRPN4tama14ChangeObserverEEONSt16remove_referenceIT_E4typeEOS5_>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	601a      	str	r2, [r3, #0]
    }
 8000be4:	bf00      	nop
 8000be6:	3710      	adds	r7, #16
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}

08000bec <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
 8000bf4:	6039      	str	r1, [r7, #0]
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	370c      	adds	r7, #12
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr

08000c04 <_ZN4tama7TextureC1Ejj>:
    {
        unsigned width;
        unsigned height;
        PixelColor ** data;

        Texture(unsigned int width, unsigned int height) : width(width), height(height)
 8000c04:	b590      	push	{r4, r7, lr}
 8000c06:	b087      	sub	sp, #28
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	60f8      	str	r0, [r7, #12]
 8000c0c:	60b9      	str	r1, [r7, #8]
 8000c0e:	607a      	str	r2, [r7, #4]
 8000c10:	4a22      	ldr	r2, [pc, #136]	; (8000c9c <_ZN4tama7TextureC1Ejj+0x98>)
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	601a      	str	r2, [r3, #0]
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	68ba      	ldr	r2, [r7, #8]
 8000c1a:	605a      	str	r2, [r3, #4]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	687a      	ldr	r2, [r7, #4]
 8000c20:	609a      	str	r2, [r3, #8]
        {
            data = new PixelColor*[height];
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	4a1e      	ldr	r2, [pc, #120]	; (8000ca0 <_ZN4tama7TextureC1Ejj+0x9c>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d801      	bhi.n	8000c2e <_ZN4tama7TextureC1Ejj+0x2a>
 8000c2a:	009b      	lsls	r3, r3, #2
 8000c2c:	e001      	b.n	8000c32 <_ZN4tama7TextureC1Ejj+0x2e>
 8000c2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c32:	4618      	mov	r0, r3
 8000c34:	f00f fbf3 	bl	801041e <_Znaj>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	60da      	str	r2, [r3, #12]
            for (unsigned i = 0; i < height; ++i)
 8000c40:	2300      	movs	r3, #0
 8000c42:	617b      	str	r3, [r7, #20]
 8000c44:	697a      	ldr	r2, [r7, #20]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	d222      	bcs.n	8000c92 <_ZN4tama7TextureC1Ejj+0x8e>
            {
                data[i] = new PixelColor[width];
 8000c4c:	68b9      	ldr	r1, [r7, #8]
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	68da      	ldr	r2, [r3, #12]
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	009b      	lsls	r3, r3, #2
 8000c56:	18d4      	adds	r4, r2, r3
 8000c58:	4608      	mov	r0, r1
 8000c5a:	f00f fbe0 	bl	801041e <_Znaj>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	6023      	str	r3, [r4, #0]
                for (unsigned j = 0; j < width; ++j)
 8000c62:	2300      	movs	r3, #0
 8000c64:	613b      	str	r3, [r7, #16]
 8000c66:	693a      	ldr	r2, [r7, #16]
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	429a      	cmp	r2, r3
 8000c6c:	d20d      	bcs.n	8000c8a <_ZN4tama7TextureC1Ejj+0x86>
                {
                    data[i][j] = PixelColor::WHITE;
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	68da      	ldr	r2, [r3, #12]
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	009b      	lsls	r3, r3, #2
 8000c76:	4413      	add	r3, r2
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	693b      	ldr	r3, [r7, #16]
 8000c7c:	4413      	add	r3, r2
 8000c7e:	2200      	movs	r2, #0
 8000c80:	701a      	strb	r2, [r3, #0]
                for (unsigned j = 0; j < width; ++j)
 8000c82:	693b      	ldr	r3, [r7, #16]
 8000c84:	3301      	adds	r3, #1
 8000c86:	613b      	str	r3, [r7, #16]
 8000c88:	e7ed      	b.n	8000c66 <_ZN4tama7TextureC1Ejj+0x62>
            for (unsigned i = 0; i < height; ++i)
 8000c8a:	697b      	ldr	r3, [r7, #20]
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	617b      	str	r3, [r7, #20]
 8000c90:	e7d8      	b.n	8000c44 <_ZN4tama7TextureC1Ejj+0x40>
                }
            }
        }
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	4618      	mov	r0, r3
 8000c96:	371c      	adds	r7, #28
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd90      	pop	{r4, r7, pc}
 8000c9c:	08011650 	.word	0x08011650
 8000ca0:	1ffffffe 	.word	0x1ffffffe

08000ca4 <_ZN4tama7Texture8insertAtENS_5Vec2dESt10shared_ptrIS0_E>:

        Texture(unsigned int width, unsigned int height, PixelColor **data) : width(width), height(height), data(data)
        {}

        void insertAt(Vec2d position, std::shared_ptr<Texture> texture)
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b08a      	sub	sp, #40	; 0x28
 8000ca8:	af02      	add	r7, sp, #8
 8000caa:	60f8      	str	r0, [r7, #12]
 8000cac:	1d38      	adds	r0, r7, #4
 8000cae:	e880 0006 	stmia.w	r0, {r1, r2}
 8000cb2:	603b      	str	r3, [r7, #0]
        {
            for (unsigned i = 0; i < texture->height; ++i)
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	61fb      	str	r3, [r7, #28]
 8000cb8:	6838      	ldr	r0, [r7, #0]
 8000cba:	f000 fcb6 	bl	800162a <_ZNKSt19__shared_ptr_accessIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	689b      	ldr	r3, [r3, #8]
 8000cc2:	69fa      	ldr	r2, [r7, #28]
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	bf34      	ite	cc
 8000cc8:	2301      	movcc	r3, #1
 8000cca:	2300      	movcs	r3, #0
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d042      	beq.n	8000d58 <_ZN4tama7Texture8insertAtENS_5Vec2dESt10shared_ptrIS0_E+0xb4>
            {
                for (unsigned j = 0; j < texture->width; ++j)
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	61bb      	str	r3, [r7, #24]
 8000cd6:	6838      	ldr	r0, [r7, #0]
 8000cd8:	f000 fca7 	bl	800162a <_ZNKSt19__shared_ptr_accessIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	69ba      	ldr	r2, [r7, #24]
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	bf34      	ite	cc
 8000ce6:	2301      	movcc	r3, #1
 8000ce8:	2300      	movcs	r3, #0
 8000cea:	b2db      	uxtb	r3, r3
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d02f      	beq.n	8000d50 <_ZN4tama7Texture8insertAtENS_5Vec2dESt10shared_ptrIS0_E+0xac>
                {
                    unsigned newY = i + position.y;
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	69fb      	ldr	r3, [r7, #28]
 8000cf6:	4413      	add	r3, r2
 8000cf8:	617b      	str	r3, [r7, #20]
                    unsigned newX = j + position.x;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	461a      	mov	r2, r3
 8000cfe:	69bb      	ldr	r3, [r7, #24]
 8000d00:	4413      	add	r3, r2
 8000d02:	613b      	str	r3, [r7, #16]
                    if (shouldDrawPixel(texture, i, j, newY, newX))
 8000d04:	693b      	ldr	r3, [r7, #16]
 8000d06:	9301      	str	r3, [sp, #4]
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	9300      	str	r3, [sp, #0]
 8000d0c:	69bb      	ldr	r3, [r7, #24]
 8000d0e:	69fa      	ldr	r2, [r7, #28]
 8000d10:	6839      	ldr	r1, [r7, #0]
 8000d12:	68f8      	ldr	r0, [r7, #12]
 8000d14:	f000 f824 	bl	8000d60 <_ZNK4tama7Texture15shouldDrawPixelERKSt10shared_ptrIS0_Ejjjj>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d014      	beq.n	8000d48 <_ZN4tama7Texture8insertAtENS_5Vec2dESt10shared_ptrIS0_E+0xa4>
                    {
                        this->data[newY][newX] = texture->data[i][j];
 8000d1e:	6838      	ldr	r0, [r7, #0]
 8000d20:	f000 fc83 	bl	800162a <_ZNKSt19__shared_ptr_accessIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8000d24:	4603      	mov	r3, r0
 8000d26:	68da      	ldr	r2, [r3, #12]
 8000d28:	69fb      	ldr	r3, [r7, #28]
 8000d2a:	009b      	lsls	r3, r3, #2
 8000d2c:	4413      	add	r3, r2
 8000d2e:	681a      	ldr	r2, [r3, #0]
 8000d30:	69bb      	ldr	r3, [r7, #24]
 8000d32:	441a      	add	r2, r3
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	68d9      	ldr	r1, [r3, #12]
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	009b      	lsls	r3, r3, #2
 8000d3c:	440b      	add	r3, r1
 8000d3e:	6819      	ldr	r1, [r3, #0]
 8000d40:	693b      	ldr	r3, [r7, #16]
 8000d42:	440b      	add	r3, r1
 8000d44:	7812      	ldrb	r2, [r2, #0]
 8000d46:	701a      	strb	r2, [r3, #0]
                for (unsigned j = 0; j < texture->width; ++j)
 8000d48:	69bb      	ldr	r3, [r7, #24]
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	61bb      	str	r3, [r7, #24]
 8000d4e:	e7c2      	b.n	8000cd6 <_ZN4tama7Texture8insertAtENS_5Vec2dESt10shared_ptrIS0_E+0x32>
            for (unsigned i = 0; i < texture->height; ++i)
 8000d50:	69fb      	ldr	r3, [r7, #28]
 8000d52:	3301      	adds	r3, #1
 8000d54:	61fb      	str	r3, [r7, #28]
 8000d56:	e7af      	b.n	8000cb8 <_ZN4tama7Texture8insertAtENS_5Vec2dESt10shared_ptrIS0_E+0x14>
                    }
                }
            }
        }
 8000d58:	bf00      	nop
 8000d5a:	3720      	adds	r7, #32
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}

08000d60 <_ZNK4tama7Texture15shouldDrawPixelERKSt10shared_ptrIS0_Ejjjj>:

        bool shouldDrawPixel(const std::shared_ptr<Texture> &texture, unsigned int i, unsigned int j, unsigned int newY,
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	60f8      	str	r0, [r7, #12]
 8000d68:	60b9      	str	r1, [r7, #8]
 8000d6a:	607a      	str	r2, [r7, #4]
 8000d6c:	603b      	str	r3, [r7, #0]
                             unsigned int newX) const
        { return newX < width && newY < height && texture->data[i][j] != PixelColor::TRANSPARENT; }
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	69fa      	ldr	r2, [r7, #28]
 8000d74:	429a      	cmp	r2, r3
 8000d76:	d214      	bcs.n	8000da2 <_ZNK4tama7Texture15shouldDrawPixelERKSt10shared_ptrIS0_Ejjjj+0x42>
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	689b      	ldr	r3, [r3, #8]
 8000d7c:	69ba      	ldr	r2, [r7, #24]
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	d20f      	bcs.n	8000da2 <_ZNK4tama7Texture15shouldDrawPixelERKSt10shared_ptrIS0_Ejjjj+0x42>
 8000d82:	68b8      	ldr	r0, [r7, #8]
 8000d84:	f000 fc51 	bl	800162a <_ZNKSt19__shared_ptr_accessIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	68da      	ldr	r2, [r3, #12]
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	009b      	lsls	r3, r3, #2
 8000d90:	4413      	add	r3, r2
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	4413      	add	r3, r2
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	2b02      	cmp	r3, #2
 8000d9c:	d001      	beq.n	8000da2 <_ZNK4tama7Texture15shouldDrawPixelERKSt10shared_ptrIS0_Ejjjj+0x42>
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e000      	b.n	8000da4 <_ZNK4tama7Texture15shouldDrawPixelERKSt10shared_ptrIS0_Ejjjj+0x44>
 8000da2:	2300      	movs	r3, #0
 8000da4:	4618      	mov	r0, r3
 8000da6:	3710      	adds	r7, #16
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}

08000dac <_ZN4tama7TextureD1Ev>:

        virtual ~Texture()
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
        {
 8000db4:	4a16      	ldr	r2, [pc, #88]	; (8000e10 <_ZN4tama7TextureD1Ev+0x64>)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	601a      	str	r2, [r3, #0]
            for (unsigned i = 0; i < height; ++i)
 8000dba:	2300      	movs	r3, #0
 8000dbc:	60fb      	str	r3, [r7, #12]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	689b      	ldr	r3, [r3, #8]
 8000dc2:	68fa      	ldr	r2, [r7, #12]
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	d214      	bcs.n	8000df2 <_ZN4tama7TextureD1Ev+0x46>
            {
                delete[] data[i];
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	68da      	ldr	r2, [r3, #12]
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	009b      	lsls	r3, r3, #2
 8000dd0:	4413      	add	r3, r2
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d008      	beq.n	8000dea <_ZN4tama7TextureD1Ev+0x3e>
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	68da      	ldr	r2, [r3, #12]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	009b      	lsls	r3, r3, #2
 8000de0:	4413      	add	r3, r2
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4618      	mov	r0, r3
 8000de6:	f00f fb15 	bl	8010414 <_ZdaPv>
            for (unsigned i = 0; i < height; ++i)
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	3301      	adds	r3, #1
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	e7e5      	b.n	8000dbe <_ZN4tama7TextureD1Ev+0x12>
            }
            delete[] data;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	68db      	ldr	r3, [r3, #12]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d004      	beq.n	8000e04 <_ZN4tama7TextureD1Ev+0x58>
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	68db      	ldr	r3, [r3, #12]
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f00f fb08 	bl	8010414 <_ZdaPv>
        }
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	4618      	mov	r0, r3
 8000e08:	3710      	adds	r7, #16
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	08011650 	.word	0x08011650

08000e14 <_ZN4tama7TextureD0Ev>:
        virtual ~Texture()
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
        }
 8000e1c:	6878      	ldr	r0, [r7, #4]
 8000e1e:	f7ff ffc5 	bl	8000dac <_ZN4tama7TextureD1Ev>
 8000e22:	2110      	movs	r1, #16
 8000e24:	6878      	ldr	r0, [r7, #4]
 8000e26:	f00f fafc 	bl	8010422 <_ZdlPvj>
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	3708      	adds	r7, #8
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}

08000e34 <_ZN4tama4Text10setTextureESt10shared_ptrINS_7TextureEE>:
#include "Text.h"
#include "../../../../../STM32F411Disco-drivers/texture-loader/Stm32TextureLoader.h"
#include "../../../../assets/text/standard-font.texture.h"

void tama::Text::setTexture(std::shared_ptr<Texture> ptr)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
 8000e3c:	6039      	str	r1, [r7, #0]

}
 8000e3e:	bf00      	nop
 8000e40:	370c      	adds	r7, #12
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr

08000e4a <_ZN4tama4Text11setPositionENS_5Vec2dE>:

void tama::Text::setPosition(tama::Vec2d d)
{
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	b084      	sub	sp, #16
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	60f8      	str	r0, [r7, #12]
 8000e52:	1d3b      	adds	r3, r7, #4
 8000e54:	e883 0006 	stmia.w	r3, {r1, r2}
    this->position = position;
    notifyObserver();
 8000e58:	68f8      	ldr	r0, [r7, #12]
 8000e5a:	f000 f945 	bl	80010e8 <_ZN4tama4Text14notifyObserverEv>
}
 8000e5e:	bf00      	nop
 8000e60:	3710      	adds	r7, #16
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}

08000e66 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_ptr() = default;
 8000e66:	b580      	push	{r7, lr}
 8000e68:	b082      	sub	sp, #8
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	6078      	str	r0, [r7, #4]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	3304      	adds	r3, #4
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff fd70 	bl	8000958 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}

08000e82 <_ZNSt10shared_ptrIN4tama7TextureEED1Ev>:
    class shared_ptr : public __shared_ptr<_Tp>
 8000e82:	b580      	push	{r7, lr}
 8000e84:	b082      	sub	sp, #8
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	6078      	str	r0, [r7, #4]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f7ff ffea 	bl	8000e66 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4618      	mov	r0, r3
 8000e96:	3708      	adds	r7, #8
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <_ZN4tama4Text10getTextureEv>:

std::shared_ptr<tama::Texture> tama::Text::getTexture()
{
 8000e9c:	b5b0      	push	{r4, r5, r7, lr}
 8000e9e:	b08e      	sub	sp, #56	; 0x38
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	6039      	str	r1, [r7, #0]
    unsigned width = (size + 1) * text.size();
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	1c5c      	adds	r4, r3, #1
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	3310      	adds	r3, #16
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f00f fbc6 	bl	8010642 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	fb03 f304 	mul.w	r3, r3, r4
 8000ebc:	617b      	str	r3, [r7, #20]
    unsigned height = (size + 1) * (std::count(text.begin(), text.end(), '\n') + 1) ;
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec2:	1c5c      	adds	r4, r3, #1
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	3310      	adds	r3, #16
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f00f fbb4 	bl	8010636 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5beginEv>
 8000ece:	4605      	mov	r5, r0
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	3310      	adds	r3, #16
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f00f fbb0 	bl	801063a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE3endEv>
 8000eda:	4601      	mov	r1, r0
 8000edc:	230a      	movs	r3, #10
 8000ede:	76fb      	strb	r3, [r7, #27]
 8000ee0:	f107 031b 	add.w	r3, r7, #27
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	4628      	mov	r0, r5
 8000ee8:	f000 fbab 	bl	8001642 <_ZSt5countIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEcENSt15iterator_traitsIT_E15difference_typeESB_SB_RKT0_>
 8000eec:	4603      	mov	r3, r0
 8000eee:	3301      	adds	r3, #1
 8000ef0:	fb03 f304 	mul.w	r3, r3, r4
 8000ef4:	613b      	str	r3, [r7, #16]
    auto texture = std::make_shared<Texture>(width, height);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	f107 0210 	add.w	r2, r7, #16
 8000efc:	f107 0114 	add.w	r1, r7, #20
 8000f00:	4618      	mov	r0, r3
 8000f02:	f000 fbbd 	bl	8001680 <_ZSt11make_sharedIN4tama7TextureEJRjS2_EESt10shared_ptrIT_EDpOT0_>

    unsigned line = 0;
 8000f06:	2300      	movs	r3, #0
 8000f08:	637b      	str	r3, [r7, #52]	; 0x34
    unsigned letterInLine = 0;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	633b      	str	r3, [r7, #48]	; 0x30

    for (unsigned i = 0; i < text.size(); ++i)
 8000f0e:	2300      	movs	r3, #0
 8000f10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	3310      	adds	r3, #16
 8000f16:	4618      	mov	r0, r3
 8000f18:	f00f fb93 	bl	8010642 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f20:	4293      	cmp	r3, r2
 8000f22:	bf34      	ite	cc
 8000f24:	2301      	movcc	r3, #1
 8000f26:	2300      	movcs	r3, #0
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d059      	beq.n	8000fe2 <_ZN4tama4Text10getTextureEv+0x146>
    {
        if (text[i] == '\n')
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	3310      	adds	r3, #16
 8000f32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000f34:	4618      	mov	r0, r3
 8000f36:	f00f fb86 	bl	8010646 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	2b0a      	cmp	r3, #10
 8000f40:	bf0c      	ite	eq
 8000f42:	2301      	moveq	r3, #1
 8000f44:	2300      	movne	r3, #0
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d005      	beq.n	8000f58 <_ZN4tama4Text10getTextureEv+0xbc>
        {
            line++;
 8000f4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f4e:	3301      	adds	r3, #1
 8000f50:	637b      	str	r3, [r7, #52]	; 0x34
            letterInLine = 0;
 8000f52:	2300      	movs	r3, #0
 8000f54:	633b      	str	r3, [r7, #48]	; 0x30
 8000f56:	e040      	b.n	8000fda <_ZN4tama4Text10getTextureEv+0x13e>
            continue;
        }

        auto letter = getTextureForLetter(text[i]);
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	3310      	adds	r3, #16
 8000f5c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f00f fb71 	bl	8010646 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8000f64:	4603      	mov	r3, r0
 8000f66:	781a      	ldrb	r2, [r3, #0]
 8000f68:	f107 0308 	add.w	r3, r7, #8
 8000f6c:	6839      	ldr	r1, [r7, #0]
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f000 f93a 	bl	80011e8 <_ZN4tama4Text19getTextureForLetterEc>
        texture->insertAt(Vec2d(letterInLine++ * (size + 1), line * (size + 1)), letter);
 8000f74:	6878      	ldr	r0, [r7, #4]
 8000f76:	f000 fb58 	bl	800162a <_ZNKSt19__shared_ptr_accessIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8000f7a:	4604      	mov	r4, r0
 8000f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f7e:	1c5a      	adds	r2, r3, #1
 8000f80:	633a      	str	r2, [r7, #48]	; 0x30
 8000f82:	683a      	ldr	r2, [r7, #0]
 8000f84:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000f86:	3201      	adds	r2, #1
 8000f88:	fb02 f303 	mul.w	r3, r2, r3
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	3301      	adds	r3, #1
 8000f94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000f96:	fb02 f303 	mul.w	r3, r2, r3
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	f107 031c 	add.w	r3, r7, #28
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff fab9 	bl	8000518 <_ZN4tama5Vec2dC1Eii>
 8000fa6:	f107 0208 	add.w	r2, r7, #8
 8000faa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fae:	4611      	mov	r1, r2
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f7ff fb7a 	bl	80006aa <_ZNSt10shared_ptrIN4tama7TextureEEC1ERKS2_>
 8000fb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fba:	f107 021c 	add.w	r2, r7, #28
 8000fbe:	ca06      	ldmia	r2, {r1, r2}
 8000fc0:	4620      	mov	r0, r4
 8000fc2:	f7ff fe6f 	bl	8000ca4 <_ZN4tama7Texture8insertAtENS_5Vec2dESt10shared_ptrIS0_E>
 8000fc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f7ff ff59 	bl	8000e82 <_ZNSt10shared_ptrIN4tama7TextureEED1Ev>
        auto letter = getTextureForLetter(text[i]);
 8000fd0:	f107 0308 	add.w	r3, r7, #8
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff ff54 	bl	8000e82 <_ZNSt10shared_ptrIN4tama7TextureEED1Ev>
    for (unsigned i = 0; i < text.size(); ++i)
 8000fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fdc:	3301      	adds	r3, #1
 8000fde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000fe0:	e797      	b.n	8000f12 <_ZN4tama4Text10getTextureEv+0x76>
    }

    return texture;
 8000fe2:	bf00      	nop
}
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	3738      	adds	r7, #56	; 0x38
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bdb0      	pop	{r4, r5, r7, pc}

08000fec <_ZN4tama4Text11getPositionEv>:

tama::Vec2d tama::Text::getPosition()
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	6039      	str	r1, [r7, #0]
    return position;
 8000ff6:	687a      	ldr	r2, [r7, #4]
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	3338      	adds	r3, #56	; 0x38
 8000ffc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001000:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8001004:	6878      	ldr	r0, [r7, #4]
 8001006:	370c      	adds	r7, #12
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr

08001010 <_ZN4tama4Text4moveENS_5Vec2dE>:

void tama::Text::move(tama::Vec2d delta)
{
 8001010:	b590      	push	{r4, r7, lr}
 8001012:	b087      	sub	sp, #28
 8001014:	af00      	add	r7, sp, #0
 8001016:	6178      	str	r0, [r7, #20]
 8001018:	f107 030c 	add.w	r3, r7, #12
 800101c:	e883 0006 	stmia.w	r3, {r1, r2}
    position = position + delta;
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8001026:	697c      	ldr	r4, [r7, #20]
 8001028:	4638      	mov	r0, r7
 800102a:	f107 030c 	add.w	r3, r7, #12
 800102e:	cb0c      	ldmia	r3, {r2, r3}
 8001030:	f7ff fa5a 	bl	80004e8 <_ZN4tama5Vec2dplES0_>
 8001034:	f104 0338 	add.w	r3, r4, #56	; 0x38
 8001038:	463a      	mov	r2, r7
 800103a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800103e:	e883 0003 	stmia.w	r3, {r0, r1}
    notifyObserver();
 8001042:	6978      	ldr	r0, [r7, #20]
 8001044:	f000 f850 	bl	80010e8 <_ZN4tama4Text14notifyObserverEv>
}
 8001048:	bf00      	nop
 800104a:	371c      	adds	r7, #28
 800104c:	46bd      	mov	sp, r7
 800104e:	bd90      	pop	{r4, r7, pc}

08001050 <_ZN4tama4Text4hideEv>:

void tama::Text::hide()
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
    visible = false;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2200      	movs	r2, #0
 800105c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    notifyObserver();
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f000 f841 	bl	80010e8 <_ZN4tama4Text14notifyObserverEv>
}
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <_ZN4tama4Text4showEv>:

void tama::Text::show()
{
 800106e:	b580      	push	{r7, lr}
 8001070:	b082      	sub	sp, #8
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
    visible = true;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2201      	movs	r2, #1
 800107a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    notifyObserver();
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f000 f832 	bl	80010e8 <_ZN4tama4Text14notifyObserverEv>
}
 8001084:	bf00      	nop
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <_ZN4tama4Text17setChangeObserverESt10shared_ptrINS_14ChangeObserverEE>:

void tama::Text::setChangeObserver(std::shared_ptr<ChangeObserver> ptr)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	6039      	str	r1, [r7, #0]
    this->observer = observer;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	f103 0208 	add.w	r2, r3, #8
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	3308      	adds	r3, #8
 80010a0:	4619      	mov	r1, r3
 80010a2:	4610      	mov	r0, r2
 80010a4:	f7ff fb84 	bl	80007b0 <_ZNSt10shared_ptrIN4tama14ChangeObserverEEaSERKS2_>
}
 80010a8:	bf00      	nop
 80010aa:	3708      	adds	r7, #8
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <_ZN4tama4Text9isVisibleEv>:

bool tama::Text::isVisible()
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
    return visible;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
}
 80010be:	4618      	mov	r0, r3
 80010c0:	370c      	adds	r7, #12
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr

080010ca <_ZN4tama4Text7setTextENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void tama::Text::setText(std::string text)
{
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b082      	sub	sp, #8
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	6078      	str	r0, [r7, #4]
 80010d2:	6039      	str	r1, [r7, #0]
    this->text = text;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	3310      	adds	r3, #16
 80010d8:	6839      	ldr	r1, [r7, #0]
 80010da:	4618      	mov	r0, r3
 80010dc:	f00f faa5 	bl	801062a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
}
 80010e0:	bf00      	nop
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <_ZN4tama4Text14notifyObserverEv>:

void tama::Text::notifyObserver()
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
    if (observer != nullptr)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	3308      	adds	r3, #8
 80010f4:	2100      	movs	r1, #0
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff fc40 	bl	800097c <_ZStneIN4tama14ChangeObserverEEbRKSt10shared_ptrIT_EDn>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d009      	beq.n	8001116 <_ZN4tama4Text14notifyObserverEv+0x2e>
    {
        observer->onChange();
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	3308      	adds	r3, #8
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff fc46 	bl	8000998 <_ZNKSt19__shared_ptr_accessIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800110c:	4602      	mov	r2, r0
 800110e:	6813      	ldr	r3, [r2, #0]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4610      	mov	r0, r2
 8001114:	4798      	blx	r3
    }
}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
	...

08001120 <_ZN4tama4TextC1ERKNS_5Vec2dE>:

tama::Text::Text(const tama::Vec2d &position) :
 8001120:	b590      	push	{r4, r7, lr}
 8001122:	b087      	sub	sp, #28
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	6039      	str	r1, [r7, #0]
                                                position(position)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff fb85 	bl	800083c <_ZN4tama8DrawableC1Ev>
 8001132:	4a2b      	ldr	r2, [pc, #172]	; (80011e0 <_ZN4tama4TextC1ERKNS_5Vec2dE+0xc0>)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	3304      	adds	r3, #4
 800113c:	4618      	mov	r0, r3
 800113e:	f000 fadb 	bl	80016f8 <_ZNSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEC1IS3_vEEv>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	3308      	adds	r3, #8
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff fc32 	bl	80009b0 <_ZNSt10shared_ptrIN4tama14ChangeObserverEEC1Ev>
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	3310      	adds	r3, #16
 8001150:	4618      	mov	r0, r3
 8001152:	f00f fa5d 	bl	8010610 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	3328      	adds	r3, #40	; 0x28
 800115a:	4618      	mov	r0, r3
 800115c:	f000 fadc 	bl	8001718 <_ZNSt10shared_ptrIN4tama7TextureEEC1Ev>
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2207      	movs	r2, #7
 8001164:	631a      	str	r2, [r3, #48]	; 0x30
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	683a      	ldr	r2, [r7, #0]
 800116a:	3338      	adds	r3, #56	; 0x38
 800116c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001170:	e883 0003 	stmia.w	r3, {r0, r1}
{
    textureLoader = std::make_unique<tama::Stm32TextureLoader>();
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	1d1c      	adds	r4, r3, #4
 8001178:	f107 030c 	add.w	r3, r7, #12
 800117c:	4618      	mov	r0, r3
 800117e:	f000 fafb 	bl	8001778 <_ZSt11make_uniqueIN4tama18Stm32TextureLoaderEJEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
 8001182:	f107 030c 	add.w	r3, r7, #12
 8001186:	4619      	mov	r1, r3
 8001188:	4620      	mov	r0, r4
 800118a:	f000 fb2a 	bl	80017e2 <_ZNSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEaSINS0_18Stm32TextureLoaderES2_IS6_EEENSt9enable_ifIXsrSt6__and_IJS9_IJSt14is_convertibleINS_IT_T0_E7pointerEPS1_ESt6__not_ISt8is_arrayISB_EESt5__or_IJS9_IJSt12is_referenceIS3_ESt7is_sameIS3_SC_EEES9_IJSH_ISN_ESA_ISC_S3_EEEEEEESt13is_assignableIRS3_OSC_EEE5valueERS4_E4typeEOSD_>
 800118e:	f107 030c 	add.w	r3, r7, #12
 8001192:	4618      	mov	r0, r3
 8001194:	f000 fb06 	bl	80017a4 <_ZNSt10unique_ptrIN4tama18Stm32TextureLoaderESt14default_deleteIS1_EED1Ev>
    observer = nullptr;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	f103 0408 	add.w	r4, r3, #8
 800119e:	f107 0310 	add.w	r3, r7, #16
 80011a2:	2100      	movs	r1, #0
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff fc10 	bl	80009ca <_ZNSt10shared_ptrIN4tama14ChangeObserverEEC1EDn>
 80011aa:	f107 0310 	add.w	r3, r7, #16
 80011ae:	4619      	mov	r1, r3
 80011b0:	4620      	mov	r0, r4
 80011b2:	f7ff fc22 	bl	80009fa <_ZNSt10shared_ptrIN4tama14ChangeObserverEEaSEOS2_>
 80011b6:	f107 0310 	add.w	r3, r7, #16
 80011ba:	4618      	mov	r0, r3
 80011bc:	f7ff fb5c 	bl	8000878 <_ZNSt10shared_ptrIN4tama14ChangeObserverEED1Ev>
    visible = true;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2201      	movs	r2, #1
 80011c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    text = "";
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	3310      	adds	r3, #16
 80011cc:	4905      	ldr	r1, [pc, #20]	; (80011e4 <_ZN4tama4TextC1ERKNS_5Vec2dE+0xc4>)
 80011ce:	4618      	mov	r0, r3
 80011d0:	f00f fac5 	bl	801075e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
}
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	4618      	mov	r0, r3
 80011d8:	371c      	adds	r7, #28
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd90      	pop	{r4, r7, pc}
 80011de:	bf00      	nop
 80011e0:	08011618 	.word	0x08011618
 80011e4:	08010acc 	.word	0x08010acc

080011e8 <_ZN4tama4Text19getTextureForLetterEc>:

std::shared_ptr<tama::Texture> tama::Text::getTextureForLetter(char letter)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b086      	sub	sp, #24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	60f8      	str	r0, [r7, #12]
 80011f0:	60b9      	str	r1, [r7, #8]
 80011f2:	4613      	mov	r3, r2
 80011f4:	71fb      	strb	r3, [r7, #7]
    switch (letter)
 80011f6:	79fb      	ldrb	r3, [r7, #7]
 80011f8:	3b20      	subs	r3, #32
 80011fa:	2b3a      	cmp	r3, #58	; 0x3a
 80011fc:	f200 81f4 	bhi.w	80015e8 <_ZN4tama4Text19getTextureForLetterEc+0x400>
 8001200:	a201      	add	r2, pc, #4	; (adr r2, 8001208 <_ZN4tama4Text19getTextureForLetterEc+0x20>)
 8001202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001206:	bf00      	nop
 8001208:	08001565 	.word	0x08001565
 800120c:	080015e9 	.word	0x080015e9
 8001210:	080015e9 	.word	0x080015e9
 8001214:	080015e9 	.word	0x080015e9
 8001218:	080015e9 	.word	0x080015e9
 800121c:	080015e9 	.word	0x080015e9
 8001220:	080015e9 	.word	0x080015e9
 8001224:	080015e9 	.word	0x080015e9
 8001228:	080015e9 	.word	0x080015e9
 800122c:	080015e9 	.word	0x080015e9
 8001230:	080015e9 	.word	0x080015e9
 8001234:	080015e9 	.word	0x080015e9
 8001238:	080015e9 	.word	0x080015e9
 800123c:	080015e9 	.word	0x080015e9
 8001240:	080015e9 	.word	0x080015e9
 8001244:	080015e9 	.word	0x080015e9
 8001248:	080015e9 	.word	0x080015e9
 800124c:	080015e9 	.word	0x080015e9
 8001250:	080015e9 	.word	0x080015e9
 8001254:	080015e9 	.word	0x080015e9
 8001258:	080015e9 	.word	0x080015e9
 800125c:	080015e9 	.word	0x080015e9
 8001260:	080015e9 	.word	0x080015e9
 8001264:	080015e9 	.word	0x080015e9
 8001268:	080015e9 	.word	0x080015e9
 800126c:	080015e9 	.word	0x080015e9
 8001270:	080015e9 	.word	0x080015e9
 8001274:	080015e9 	.word	0x080015e9
 8001278:	080015e9 	.word	0x080015e9
 800127c:	080015e9 	.word	0x080015e9
 8001280:	080015e9 	.word	0x080015e9
 8001284:	080015e9 	.word	0x080015e9
 8001288:	080015e9 	.word	0x080015e9
 800128c:	08001385 	.word	0x08001385
 8001290:	0800139d 	.word	0x0800139d
 8001294:	080013b5 	.word	0x080013b5
 8001298:	08001325 	.word	0x08001325
 800129c:	080013cd 	.word	0x080013cd
 80012a0:	080013e5 	.word	0x080013e5
 80012a4:	080013fd 	.word	0x080013fd
 80012a8:	08001415 	.word	0x08001415
 80012ac:	0800136d 	.word	0x0800136d
 80012b0:	080012f5 	.word	0x080012f5
 80012b4:	0800142d 	.word	0x0800142d
 80012b8:	08001445 	.word	0x08001445
 80012bc:	0800145d 	.word	0x0800145d
 80012c0:	08001475 	.word	0x08001475
 80012c4:	0800148d 	.word	0x0800148d
 80012c8:	080014a5 	.word	0x080014a5
 80012cc:	080014bd 	.word	0x080014bd
 80012d0:	080014d5 	.word	0x080014d5
 80012d4:	0800133d 	.word	0x0800133d
 80012d8:	08001355 	.word	0x08001355
 80012dc:	0800130d 	.word	0x0800130d
 80012e0:	0800151d 	.word	0x0800151d
 80012e4:	080014ed 	.word	0x080014ed
 80012e8:	08001505 	.word	0x08001505
 80012ec:	08001535 	.word	0x08001535
 80012f0:	0800154d 	.word	0x0800154d
    {
        case 'J': return textureLoader->load(tama::asset::font::standard::J);
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	3304      	adds	r3, #4
 80012f8:	4618      	mov	r0, r3
 80012fa:	f000 fa95 	bl	8001828 <_ZNKSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEptEv>
 80012fe:	4601      	mov	r1, r0
 8001300:	680b      	ldr	r3, [r1, #0]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	68f8      	ldr	r0, [r7, #12]
 8001306:	4a9d      	ldr	r2, [pc, #628]	; (800157c <_ZN4tama4Text19getTextureForLetterEc+0x394>)
 8001308:	4798      	blx	r3
 800130a:	e179      	b.n	8001600 <_ZN4tama4Text19getTextureForLetterEc+0x418>
        case 'U': return textureLoader->load(tama::asset::font::standard::U);
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	3304      	adds	r3, #4
 8001310:	4618      	mov	r0, r3
 8001312:	f000 fa89 	bl	8001828 <_ZNKSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEptEv>
 8001316:	4601      	mov	r1, r0
 8001318:	680b      	ldr	r3, [r1, #0]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	68f8      	ldr	r0, [r7, #12]
 800131e:	4a98      	ldr	r2, [pc, #608]	; (8001580 <_ZN4tama4Text19getTextureForLetterEc+0x398>)
 8001320:	4798      	blx	r3
 8001322:	e16d      	b.n	8001600 <_ZN4tama4Text19getTextureForLetterEc+0x418>
        case 'D': return textureLoader->load(tama::asset::font::standard::D);
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	3304      	adds	r3, #4
 8001328:	4618      	mov	r0, r3
 800132a:	f000 fa7d 	bl	8001828 <_ZNKSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEptEv>
 800132e:	4601      	mov	r1, r0
 8001330:	680b      	ldr	r3, [r1, #0]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	68f8      	ldr	r0, [r7, #12]
 8001336:	4a93      	ldr	r2, [pc, #588]	; (8001584 <_ZN4tama4Text19getTextureForLetterEc+0x39c>)
 8001338:	4798      	blx	r3
 800133a:	e161      	b.n	8001600 <_ZN4tama4Text19getTextureForLetterEc+0x418>
        case 'S': return textureLoader->load(tama::asset::font::standard::S);
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	3304      	adds	r3, #4
 8001340:	4618      	mov	r0, r3
 8001342:	f000 fa71 	bl	8001828 <_ZNKSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEptEv>
 8001346:	4601      	mov	r1, r0
 8001348:	680b      	ldr	r3, [r1, #0]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	68f8      	ldr	r0, [r7, #12]
 800134e:	4a8e      	ldr	r2, [pc, #568]	; (8001588 <_ZN4tama4Text19getTextureForLetterEc+0x3a0>)
 8001350:	4798      	blx	r3
 8001352:	e155      	b.n	8001600 <_ZN4tama4Text19getTextureForLetterEc+0x418>
        case 'T': return textureLoader->load(tama::asset::font::standard::T);
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	3304      	adds	r3, #4
 8001358:	4618      	mov	r0, r3
 800135a:	f000 fa65 	bl	8001828 <_ZNKSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEptEv>
 800135e:	4601      	mov	r1, r0
 8001360:	680b      	ldr	r3, [r1, #0]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	68f8      	ldr	r0, [r7, #12]
 8001366:	4a89      	ldr	r2, [pc, #548]	; (800158c <_ZN4tama4Text19getTextureForLetterEc+0x3a4>)
 8001368:	4798      	blx	r3
 800136a:	e149      	b.n	8001600 <_ZN4tama4Text19getTextureForLetterEc+0x418>
        case 'I': return textureLoader->load(tama::asset::font::standard::I);
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	3304      	adds	r3, #4
 8001370:	4618      	mov	r0, r3
 8001372:	f000 fa59 	bl	8001828 <_ZNKSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEptEv>
 8001376:	4601      	mov	r1, r0
 8001378:	680b      	ldr	r3, [r1, #0]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	68f8      	ldr	r0, [r7, #12]
 800137e:	4a84      	ldr	r2, [pc, #528]	; (8001590 <_ZN4tama4Text19getTextureForLetterEc+0x3a8>)
 8001380:	4798      	blx	r3
 8001382:	e13d      	b.n	8001600 <_ZN4tama4Text19getTextureForLetterEc+0x418>
        case 'A': return textureLoader->load(tama::asset::font::standard::A);
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	3304      	adds	r3, #4
 8001388:	4618      	mov	r0, r3
 800138a:	f000 fa4d 	bl	8001828 <_ZNKSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEptEv>
 800138e:	4601      	mov	r1, r0
 8001390:	680b      	ldr	r3, [r1, #0]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	68f8      	ldr	r0, [r7, #12]
 8001396:	4a7f      	ldr	r2, [pc, #508]	; (8001594 <_ZN4tama4Text19getTextureForLetterEc+0x3ac>)
 8001398:	4798      	blx	r3
 800139a:	e131      	b.n	8001600 <_ZN4tama4Text19getTextureForLetterEc+0x418>
        case 'B': return textureLoader->load(tama::asset::font::standard::B);
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	3304      	adds	r3, #4
 80013a0:	4618      	mov	r0, r3
 80013a2:	f000 fa41 	bl	8001828 <_ZNKSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEptEv>
 80013a6:	4601      	mov	r1, r0
 80013a8:	680b      	ldr	r3, [r1, #0]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	68f8      	ldr	r0, [r7, #12]
 80013ae:	4a7a      	ldr	r2, [pc, #488]	; (8001598 <_ZN4tama4Text19getTextureForLetterEc+0x3b0>)
 80013b0:	4798      	blx	r3
 80013b2:	e125      	b.n	8001600 <_ZN4tama4Text19getTextureForLetterEc+0x418>
        case 'C': return textureLoader->load(tama::asset::font::standard::C);
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	3304      	adds	r3, #4
 80013b8:	4618      	mov	r0, r3
 80013ba:	f000 fa35 	bl	8001828 <_ZNKSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEptEv>
 80013be:	4601      	mov	r1, r0
 80013c0:	680b      	ldr	r3, [r1, #0]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	68f8      	ldr	r0, [r7, #12]
 80013c6:	4a75      	ldr	r2, [pc, #468]	; (800159c <_ZN4tama4Text19getTextureForLetterEc+0x3b4>)
 80013c8:	4798      	blx	r3
 80013ca:	e119      	b.n	8001600 <_ZN4tama4Text19getTextureForLetterEc+0x418>
        case 'E': return textureLoader->load(tama::asset::font::standard::E);
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	3304      	adds	r3, #4
 80013d0:	4618      	mov	r0, r3
 80013d2:	f000 fa29 	bl	8001828 <_ZNKSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEptEv>
 80013d6:	4601      	mov	r1, r0
 80013d8:	680b      	ldr	r3, [r1, #0]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	68f8      	ldr	r0, [r7, #12]
 80013de:	4a70      	ldr	r2, [pc, #448]	; (80015a0 <_ZN4tama4Text19getTextureForLetterEc+0x3b8>)
 80013e0:	4798      	blx	r3
 80013e2:	e10d      	b.n	8001600 <_ZN4tama4Text19getTextureForLetterEc+0x418>
        case 'F': return textureLoader->load(tama::asset::font::standard::F);
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	3304      	adds	r3, #4
 80013e8:	4618      	mov	r0, r3
 80013ea:	f000 fa1d 	bl	8001828 <_ZNKSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEptEv>
 80013ee:	4601      	mov	r1, r0
 80013f0:	680b      	ldr	r3, [r1, #0]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	68f8      	ldr	r0, [r7, #12]
 80013f6:	4a6b      	ldr	r2, [pc, #428]	; (80015a4 <_ZN4tama4Text19getTextureForLetterEc+0x3bc>)
 80013f8:	4798      	blx	r3
 80013fa:	e101      	b.n	8001600 <_ZN4tama4Text19getTextureForLetterEc+0x418>
        case 'G': return textureLoader->load(tama::asset::font::standard::G);
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	3304      	adds	r3, #4
 8001400:	4618      	mov	r0, r3
 8001402:	f000 fa11 	bl	8001828 <_ZNKSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEptEv>
 8001406:	4601      	mov	r1, r0
 8001408:	680b      	ldr	r3, [r1, #0]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	68f8      	ldr	r0, [r7, #12]
 800140e:	4a66      	ldr	r2, [pc, #408]	; (80015a8 <_ZN4tama4Text19getTextureForLetterEc+0x3c0>)
 8001410:	4798      	blx	r3
 8001412:	e0f5      	b.n	8001600 <_ZN4tama4Text19getTextureForLetterEc+0x418>
        case 'H': return textureLoader->load(tama::asset::font::standard::H);
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	3304      	adds	r3, #4
 8001418:	4618      	mov	r0, r3
 800141a:	f000 fa05 	bl	8001828 <_ZNKSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEptEv>
 800141e:	4601      	mov	r1, r0
 8001420:	680b      	ldr	r3, [r1, #0]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	68f8      	ldr	r0, [r7, #12]
 8001426:	4a61      	ldr	r2, [pc, #388]	; (80015ac <_ZN4tama4Text19getTextureForLetterEc+0x3c4>)
 8001428:	4798      	blx	r3
 800142a:	e0e9      	b.n	8001600 <_ZN4tama4Text19getTextureForLetterEc+0x418>
        case 'K': return textureLoader->load(tama::asset::font::standard::K);
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	3304      	adds	r3, #4
 8001430:	4618      	mov	r0, r3
 8001432:	f000 f9f9 	bl	8001828 <_ZNKSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEptEv>
 8001436:	4601      	mov	r1, r0
 8001438:	680b      	ldr	r3, [r1, #0]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	68f8      	ldr	r0, [r7, #12]
 800143e:	4a5c      	ldr	r2, [pc, #368]	; (80015b0 <_ZN4tama4Text19getTextureForLetterEc+0x3c8>)
 8001440:	4798      	blx	r3
 8001442:	e0dd      	b.n	8001600 <_ZN4tama4Text19getTextureForLetterEc+0x418>
        case 'L': return textureLoader->load(tama::asset::font::standard::L);
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	3304      	adds	r3, #4
 8001448:	4618      	mov	r0, r3
 800144a:	f000 f9ed 	bl	8001828 <_ZNKSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEptEv>
 800144e:	4601      	mov	r1, r0
 8001450:	680b      	ldr	r3, [r1, #0]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	68f8      	ldr	r0, [r7, #12]
 8001456:	4a57      	ldr	r2, [pc, #348]	; (80015b4 <_ZN4tama4Text19getTextureForLetterEc+0x3cc>)
 8001458:	4798      	blx	r3
 800145a:	e0d1      	b.n	8001600 <_ZN4tama4Text19getTextureForLetterEc+0x418>
        case 'M': return textureLoader->load(tama::asset::font::standard::M);
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	3304      	adds	r3, #4
 8001460:	4618      	mov	r0, r3
 8001462:	f000 f9e1 	bl	8001828 <_ZNKSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEptEv>
 8001466:	4601      	mov	r1, r0
 8001468:	680b      	ldr	r3, [r1, #0]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	68f8      	ldr	r0, [r7, #12]
 800146e:	4a52      	ldr	r2, [pc, #328]	; (80015b8 <_ZN4tama4Text19getTextureForLetterEc+0x3d0>)
 8001470:	4798      	blx	r3
 8001472:	e0c5      	b.n	8001600 <_ZN4tama4Text19getTextureForLetterEc+0x418>
        case 'N': return textureLoader->load(tama::asset::font::standard::N);
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	3304      	adds	r3, #4
 8001478:	4618      	mov	r0, r3
 800147a:	f000 f9d5 	bl	8001828 <_ZNKSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEptEv>
 800147e:	4601      	mov	r1, r0
 8001480:	680b      	ldr	r3, [r1, #0]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	68f8      	ldr	r0, [r7, #12]
 8001486:	4a4d      	ldr	r2, [pc, #308]	; (80015bc <_ZN4tama4Text19getTextureForLetterEc+0x3d4>)
 8001488:	4798      	blx	r3
 800148a:	e0b9      	b.n	8001600 <_ZN4tama4Text19getTextureForLetterEc+0x418>
        case 'O': return textureLoader->load(tama::asset::font::standard::O);
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	3304      	adds	r3, #4
 8001490:	4618      	mov	r0, r3
 8001492:	f000 f9c9 	bl	8001828 <_ZNKSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEptEv>
 8001496:	4601      	mov	r1, r0
 8001498:	680b      	ldr	r3, [r1, #0]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	68f8      	ldr	r0, [r7, #12]
 800149e:	4a48      	ldr	r2, [pc, #288]	; (80015c0 <_ZN4tama4Text19getTextureForLetterEc+0x3d8>)
 80014a0:	4798      	blx	r3
 80014a2:	e0ad      	b.n	8001600 <_ZN4tama4Text19getTextureForLetterEc+0x418>
        case 'P': return textureLoader->load(tama::asset::font::standard::P);
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	3304      	adds	r3, #4
 80014a8:	4618      	mov	r0, r3
 80014aa:	f000 f9bd 	bl	8001828 <_ZNKSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEptEv>
 80014ae:	4601      	mov	r1, r0
 80014b0:	680b      	ldr	r3, [r1, #0]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	68f8      	ldr	r0, [r7, #12]
 80014b6:	4a43      	ldr	r2, [pc, #268]	; (80015c4 <_ZN4tama4Text19getTextureForLetterEc+0x3dc>)
 80014b8:	4798      	blx	r3
 80014ba:	e0a1      	b.n	8001600 <_ZN4tama4Text19getTextureForLetterEc+0x418>
        case 'Q': return textureLoader->load(tama::asset::font::standard::Q);
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	3304      	adds	r3, #4
 80014c0:	4618      	mov	r0, r3
 80014c2:	f000 f9b1 	bl	8001828 <_ZNKSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEptEv>
 80014c6:	4601      	mov	r1, r0
 80014c8:	680b      	ldr	r3, [r1, #0]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	68f8      	ldr	r0, [r7, #12]
 80014ce:	4a3e      	ldr	r2, [pc, #248]	; (80015c8 <_ZN4tama4Text19getTextureForLetterEc+0x3e0>)
 80014d0:	4798      	blx	r3
 80014d2:	e095      	b.n	8001600 <_ZN4tama4Text19getTextureForLetterEc+0x418>
        case 'R': return textureLoader->load(tama::asset::font::standard::R);
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	3304      	adds	r3, #4
 80014d8:	4618      	mov	r0, r3
 80014da:	f000 f9a5 	bl	8001828 <_ZNKSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEptEv>
 80014de:	4601      	mov	r1, r0
 80014e0:	680b      	ldr	r3, [r1, #0]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	68f8      	ldr	r0, [r7, #12]
 80014e6:	4a39      	ldr	r2, [pc, #228]	; (80015cc <_ZN4tama4Text19getTextureForLetterEc+0x3e4>)
 80014e8:	4798      	blx	r3
 80014ea:	e089      	b.n	8001600 <_ZN4tama4Text19getTextureForLetterEc+0x418>
        case 'W': return textureLoader->load(tama::asset::font::standard::W);
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	3304      	adds	r3, #4
 80014f0:	4618      	mov	r0, r3
 80014f2:	f000 f999 	bl	8001828 <_ZNKSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEptEv>
 80014f6:	4601      	mov	r1, r0
 80014f8:	680b      	ldr	r3, [r1, #0]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	68f8      	ldr	r0, [r7, #12]
 80014fe:	4a34      	ldr	r2, [pc, #208]	; (80015d0 <_ZN4tama4Text19getTextureForLetterEc+0x3e8>)
 8001500:	4798      	blx	r3
 8001502:	e07d      	b.n	8001600 <_ZN4tama4Text19getTextureForLetterEc+0x418>
        case 'X': return textureLoader->load(tama::asset::font::standard::X);
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	3304      	adds	r3, #4
 8001508:	4618      	mov	r0, r3
 800150a:	f000 f98d 	bl	8001828 <_ZNKSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEptEv>
 800150e:	4601      	mov	r1, r0
 8001510:	680b      	ldr	r3, [r1, #0]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	68f8      	ldr	r0, [r7, #12]
 8001516:	4a2f      	ldr	r2, [pc, #188]	; (80015d4 <_ZN4tama4Text19getTextureForLetterEc+0x3ec>)
 8001518:	4798      	blx	r3
 800151a:	e071      	b.n	8001600 <_ZN4tama4Text19getTextureForLetterEc+0x418>
        case 'V': return textureLoader->load(tama::asset::font::standard::V);
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	3304      	adds	r3, #4
 8001520:	4618      	mov	r0, r3
 8001522:	f000 f981 	bl	8001828 <_ZNKSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEptEv>
 8001526:	4601      	mov	r1, r0
 8001528:	680b      	ldr	r3, [r1, #0]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	68f8      	ldr	r0, [r7, #12]
 800152e:	4a2a      	ldr	r2, [pc, #168]	; (80015d8 <_ZN4tama4Text19getTextureForLetterEc+0x3f0>)
 8001530:	4798      	blx	r3
 8001532:	e065      	b.n	8001600 <_ZN4tama4Text19getTextureForLetterEc+0x418>
        case 'Y': return textureLoader->load(tama::asset::font::standard::Y);
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	3304      	adds	r3, #4
 8001538:	4618      	mov	r0, r3
 800153a:	f000 f975 	bl	8001828 <_ZNKSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEptEv>
 800153e:	4601      	mov	r1, r0
 8001540:	680b      	ldr	r3, [r1, #0]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	68f8      	ldr	r0, [r7, #12]
 8001546:	4a25      	ldr	r2, [pc, #148]	; (80015dc <_ZN4tama4Text19getTextureForLetterEc+0x3f4>)
 8001548:	4798      	blx	r3
 800154a:	e059      	b.n	8001600 <_ZN4tama4Text19getTextureForLetterEc+0x418>
        case 'Z': return textureLoader->load(tama::asset::font::standard::Z);
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	3304      	adds	r3, #4
 8001550:	4618      	mov	r0, r3
 8001552:	f000 f969 	bl	8001828 <_ZNKSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEptEv>
 8001556:	4601      	mov	r1, r0
 8001558:	680b      	ldr	r3, [r1, #0]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	68f8      	ldr	r0, [r7, #12]
 800155e:	4a20      	ldr	r2, [pc, #128]	; (80015e0 <_ZN4tama4Text19getTextureForLetterEc+0x3f8>)
 8001560:	4798      	blx	r3
 8001562:	e04d      	b.n	8001600 <_ZN4tama4Text19getTextureForLetterEc+0x418>
        case ' ': return textureLoader->load(tama::asset::font::standard::SPC);
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	3304      	adds	r3, #4
 8001568:	4618      	mov	r0, r3
 800156a:	f000 f95d 	bl	8001828 <_ZNKSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEptEv>
 800156e:	4601      	mov	r1, r0
 8001570:	680b      	ldr	r3, [r1, #0]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	68f8      	ldr	r0, [r7, #12]
 8001576:	4a1b      	ldr	r2, [pc, #108]	; (80015e4 <_ZN4tama4Text19getTextureForLetterEc+0x3fc>)
 8001578:	4798      	blx	r3
 800157a:	e041      	b.n	8001600 <_ZN4tama4Text19getTextureForLetterEc+0x418>
 800157c:	20000008 	.word	0x20000008
 8001580:	20000014 	.word	0x20000014
 8001584:	20000020 	.word	0x20000020
 8001588:	2000002c 	.word	0x2000002c
 800158c:	20000038 	.word	0x20000038
 8001590:	20000044 	.word	0x20000044
 8001594:	20000050 	.word	0x20000050
 8001598:	2000005c 	.word	0x2000005c
 800159c:	20000068 	.word	0x20000068
 80015a0:	20000074 	.word	0x20000074
 80015a4:	20000080 	.word	0x20000080
 80015a8:	2000008c 	.word	0x2000008c
 80015ac:	20000098 	.word	0x20000098
 80015b0:	200000a4 	.word	0x200000a4
 80015b4:	200000b0 	.word	0x200000b0
 80015b8:	200000bc 	.word	0x200000bc
 80015bc:	200000c8 	.word	0x200000c8
 80015c0:	200000d4 	.word	0x200000d4
 80015c4:	200000e0 	.word	0x200000e0
 80015c8:	200000ec 	.word	0x200000ec
 80015cc:	200000f8 	.word	0x200000f8
 80015d0:	20000104 	.word	0x20000104
 80015d4:	2000011c 	.word	0x2000011c
 80015d8:	20000110 	.word	0x20000110
 80015dc:	20000128 	.word	0x20000128
 80015e0:	20000134 	.word	0x20000134
 80015e4:	20000140 	.word	0x20000140
    }
    return std::make_shared<tama::Texture>(0, 0);
 80015e8:	2300      	movs	r3, #0
 80015ea:	613b      	str	r3, [r7, #16]
 80015ec:	2300      	movs	r3, #0
 80015ee:	617b      	str	r3, [r7, #20]
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	f107 0214 	add.w	r2, r7, #20
 80015f6:	f107 0110 	add.w	r1, r7, #16
 80015fa:	4618      	mov	r0, r3
 80015fc:	f000 f92b 	bl	8001856 <_ZSt11make_sharedIN4tama7TextureEJiiEESt10shared_ptrIT_EDpOT0_>
}
 8001600:	68f8      	ldr	r0, [r7, #12]
 8001602:	3718      	adds	r7, #24
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}

08001608 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
      { delete this; }
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d005      	beq.n	8001622 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x1a>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	3304      	adds	r3, #4
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	4798      	blx	r3
 8001622:	bf00      	nop
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}

0800162a <_ZNKSt19__shared_ptr_accessIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 800162a:	b580      	push	{r7, lr}
 800162c:	b082      	sub	sp, #8
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
	return _M_get();
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f000 f952 	bl	80018dc <_ZNKSt19__shared_ptr_accessIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 8001638:	4603      	mov	r3, r0
      }
 800163a:	4618      	mov	r0, r3
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}

08001642 <_ZSt5countIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEcENSt15iterator_traitsIT_E15difference_typeESB_SB_RKT0_>:
   *  @return   The number of iterators @c i in the range @p [__first,__last)
   *  for which @c *i == @p __value
  */
  template<typename _InputIterator, typename _Tp>
    inline typename iterator_traits<_InputIterator>::difference_type
    count(_InputIterator __first, _InputIterator __last, const _Tp& __value)
 8001642:	b580      	push	{r7, lr}
 8001644:	b084      	sub	sp, #16
 8001646:	af00      	add	r7, sp, #0
 8001648:	60f8      	str	r0, [r7, #12]
 800164a:	60b9      	str	r1, [r7, #8]
 800164c:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
      __glibcxx_function_requires(_EqualOpConcept<
	    typename iterator_traits<_InputIterator>::value_type, _Tp>)
      __glibcxx_requires_valid_range(__first, __last);

      return std::__count_if(__first, __last,
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f000 f950 	bl	80018f4 <_ZN9__gnu_cxx5__ops17__iter_equals_valIKcEENS0_16_Iter_equals_valIT_EERS4_>
 8001654:	4603      	mov	r3, r0
			     __gnu_cxx::__ops::__iter_equals_val(__value));
 8001656:	461a      	mov	r2, r3
 8001658:	68b9      	ldr	r1, [r7, #8]
 800165a:	68f8      	ldr	r0, [r7, #12]
 800165c:	f000 f959 	bl	8001912 <_ZSt10__count_ifIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS0_5__ops16_Iter_equals_valIKcEEENSt15iterator_traitsIT_E15difference_typeESF_SF_T0_>
 8001660:	4603      	mov	r3, r0
    }
 8001662:	4618      	mov	r0, r3
 8001664:	3710      	adds	r7, #16
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}

0800166a <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800166a:	b480      	push	{r7}
 800166c:	b083      	sub	sp, #12
 800166e:	af00      	add	r7, sp, #0
 8001670:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4618      	mov	r0, r3
 8001676:	370c      	adds	r7, #12
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr

08001680 <_ZSt11make_sharedIN4tama7TextureEJRjS2_EESt10shared_ptrIT_EDpOT0_>:
   *  @throw  std::bad_alloc, or an exception thrown from the
   *          constructor of @a _Tp.
   */
  template<typename _Tp, typename... _Args>
    inline shared_ptr<_Tp>
    make_shared(_Args&&... __args)
 8001680:	b590      	push	{r4, r7, lr}
 8001682:	b087      	sub	sp, #28
 8001684:	af00      	add	r7, sp, #0
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	60b9      	str	r1, [r7, #8]
 800168a:	607a      	str	r2, [r7, #4]
    {
      typedef typename std::remove_const<_Tp>::type _Tp_nc;
      return std::allocate_shared<_Tp>(std::allocator<_Tp_nc>(),
				       std::forward<_Args>(__args)...);
 800168c:	f107 0314 	add.w	r3, r7, #20
 8001690:	4618      	mov	r0, r3
 8001692:	f000 f967 	bl	8001964 <_ZNSaIN4tama7TextureEEC1Ev>
 8001696:	68b8      	ldr	r0, [r7, #8]
 8001698:	f7ff ffe7 	bl	800166a <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>
 800169c:	4604      	mov	r4, r0
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f7ff ffe3 	bl	800166a <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>
 80016a4:	4603      	mov	r3, r0
 80016a6:	68f8      	ldr	r0, [r7, #12]
 80016a8:	f107 0114 	add.w	r1, r7, #20
 80016ac:	4622      	mov	r2, r4
 80016ae:	f000 f971 	bl	8001994 <_ZSt15allocate_sharedIN4tama7TextureESaIS1_EJRjS3_EESt10shared_ptrIT_ERKT0_DpOT1_>
 80016b2:	f107 0314 	add.w	r3, r7, #20
 80016b6:	4618      	mov	r0, r3
 80016b8:	f000 f960 	bl	800197c <_ZNSaIN4tama7TextureEED1Ev>
    }
 80016bc:	68f8      	ldr	r0, [r7, #12]
 80016be:	371c      	adds	r7, #28
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd90      	pop	{r4, r7, pc}

080016c4 <_ZNSt5tupleIJPN4tama13TextureLoaderESt14default_deleteIS1_EEEC1IS2_S4_Lb1EEEv>:
                typename enable_if<__and_<
                                     __is_implicitly_default_constructible<_U1>,
                                     __is_implicitly_default_constructible<_U2>>
                                   ::value, bool>::type = true>

      constexpr tuple()
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
      : _Inherited() { }
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	4618      	mov	r0, r3
 80016d0:	f000 f97a 	bl	80019c8 <_ZNSt11_Tuple_implILj0EJPN4tama13TextureLoaderESt14default_deleteIS1_EEEC1Ev>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	4618      	mov	r0, r3
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}

080016de <_ZNSt15__uniq_ptr_implIN4tama13TextureLoaderESt14default_deleteIS1_EEC1Ev>:
        __and_<__not_<is_pointer<_Dp>>,
	       is_default_constructible<_Dp>>::value>;

      using pointer = typename _Ptr<_Tp, _Dp>::type;

      __uniq_ptr_impl() = default;
 80016de:	b580      	push	{r7, lr}
 80016e0:	b082      	sub	sp, #8
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff ffeb 	bl	80016c4 <_ZNSt5tupleIJPN4tama13TextureLoaderESt14default_deleteIS1_EEEC1IS2_S4_Lb1EEEv>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4618      	mov	r0, r3
 80016f2:	3708      	adds	r7, #8
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <_ZNSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEC1IS3_vEEv>:
      // Constructors.

      /// Default constructor, creates a unique_ptr that owns nothing.
      template <typename _Up = _Dp,
		typename = _DeleterConstraint<_Up>>
	constexpr unique_ptr() noexcept
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
	: _M_t()
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2200      	movs	r2, #0
 8001704:	601a      	str	r2, [r3, #0]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4618      	mov	r0, r3
 800170a:	f7ff ffe8 	bl	80016de <_ZNSt15__uniq_ptr_implIN4tama13TextureLoaderESt14default_deleteIS1_EEC1Ev>
        { }
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4618      	mov	r0, r3
 8001712:	3708      	adds	r7, #8
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}

08001718 <_ZNSt10shared_ptrIN4tama7TextureEEC1Ev>:
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	4618      	mov	r0, r3
 8001724:	f000 f987 	bl	8001a36 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	4618      	mov	r0, r3
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
	...

08001734 <_ZN4tama13TextureLoaderC1Ev>:
#include "../../../../assets/texture-asset.h"
#include <memory>

namespace tama
{
    class TextureLoader
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	4a04      	ldr	r2, [pc, #16]	; (8001750 <_ZN4tama13TextureLoaderC1Ev+0x1c>)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	601a      	str	r2, [r3, #0]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4618      	mov	r0, r3
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr
 8001750:	08011644 	.word	0x08011644

08001754 <_ZN4tama18Stm32TextureLoaderC1Ev>:
#include "../../Core/ui/display/drawable/texture-loader/TextureLoader.h"
#include "../nokia5110-display-data-manager/Nokia5110DisplayDataManager.h"

namespace tama
{
    class Stm32TextureLoader : public TextureLoader
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	4618      	mov	r0, r3
 8001760:	f7ff ffe8 	bl	8001734 <_ZN4tama13TextureLoaderC1Ev>
 8001764:	4a03      	ldr	r2, [pc, #12]	; (8001774 <_ZN4tama18Stm32TextureLoaderC1Ev+0x20>)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	601a      	str	r2, [r3, #0]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4618      	mov	r0, r3
 800176e:	3708      	adds	r7, #8
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	08011a44 	.word	0x08011a44

08001778 <_ZSt11make_uniqueIN4tama18Stm32TextureLoaderEJEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>:
    { struct __invalid_type { }; };

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
 8001778:	b590      	push	{r4, r7, lr}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 8001780:	2004      	movs	r0, #4
 8001782:	f00e fe50 	bl	8010426 <_Znwj>
 8001786:	4603      	mov	r3, r0
 8001788:	461c      	mov	r4, r3
 800178a:	2300      	movs	r3, #0
 800178c:	6023      	str	r3, [r4, #0]
 800178e:	4620      	mov	r0, r4
 8001790:	f7ff ffe0 	bl	8001754 <_ZN4tama18Stm32TextureLoaderC1Ev>
 8001794:	4621      	mov	r1, r4
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f000 f95e 	bl	8001a58 <_ZNSt10unique_ptrIN4tama18Stm32TextureLoaderESt14default_deleteIS1_EEC1IS3_vEEPS1_>
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd90      	pop	{r4, r7, pc}

080017a4 <_ZNSt10unique_ptrIN4tama18Stm32TextureLoaderESt14default_deleteIS1_EED1Ev>:
      ~unique_ptr() noexcept
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	4618      	mov	r0, r3
 80017b0:	f000 f961 	bl	8001a76 <_ZNSt15__uniq_ptr_implIN4tama18Stm32TextureLoaderESt14default_deleteIS1_EE6_M_ptrEv>
 80017b4:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d009      	beq.n	80017d2 <_ZNSt10unique_ptrIN4tama18Stm32TextureLoaderESt14default_deleteIS1_EED1Ev+0x2e>
	  get_deleter()(__ptr);
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f000 f966 	bl	8001a90 <_ZNSt10unique_ptrIN4tama18Stm32TextureLoaderESt14default_deleteIS1_EE11get_deleterEv>
 80017c4:	4602      	mov	r2, r0
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4619      	mov	r1, r3
 80017cc:	4610      	mov	r0, r2
 80017ce:	f000 f96c 	bl	8001aaa <_ZNKSt14default_deleteIN4tama18Stm32TextureLoaderEEclEPS1_>
	__ptr = pointer();
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
      }
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	4618      	mov	r0, r3
 80017dc:	3710      	adds	r7, #16
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <_ZNSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEaSINS0_18Stm32TextureLoaderES2_IS6_EEENSt9enable_ifIXsrSt6__and_IJS9_IJSt14is_convertibleINS_IT_T0_E7pointerEPS1_ESt6__not_ISt8is_arrayISB_EESt5__or_IJS9_IJSt12is_referenceIS3_ESt7is_sameIS3_SC_EEES9_IJSH_ISN_ESA_ISC_S3_EEEEEEESt13is_assignableIRS3_OSC_EEE5valueERS4_E4typeEOSD_>:
	operator=(unique_ptr<_Up, _Ep>&& __u) noexcept
 80017e2:	b580      	push	{r7, lr}
 80017e4:	b084      	sub	sp, #16
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	6078      	str	r0, [r7, #4]
 80017ea:	6039      	str	r1, [r7, #0]
	  reset(__u.release());
 80017ec:	6838      	ldr	r0, [r7, #0]
 80017ee:	f000 f988 	bl	8001b02 <_ZNSt10unique_ptrIN4tama18Stm32TextureLoaderESt14default_deleteIS1_EE7releaseEv>
 80017f2:	4603      	mov	r3, r0
 80017f4:	4619      	mov	r1, r3
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f000 f964 	bl	8001ac4 <_ZNSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EE5resetEPS1_>
	  get_deleter() = std::forward<_Ep>(__u.get_deleter());
 80017fc:	6838      	ldr	r0, [r7, #0]
 80017fe:	f000 f947 	bl	8001a90 <_ZNSt10unique_ptrIN4tama18Stm32TextureLoaderESt14default_deleteIS1_EE11get_deleterEv>
 8001802:	4603      	mov	r3, r0
 8001804:	4618      	mov	r0, r3
 8001806:	f000 f990 	bl	8001b2a <_ZSt7forwardISt14default_deleteIN4tama18Stm32TextureLoaderEEEOT_RNSt16remove_referenceIS4_E4typeE>
 800180a:	4602      	mov	r2, r0
 800180c:	f107 030c 	add.w	r3, r7, #12
 8001810:	4611      	mov	r1, r2
 8001812:	4618      	mov	r0, r3
 8001814:	f000 f994 	bl	8001b40 <_ZNSt14default_deleteIN4tama13TextureLoaderEEC1INS0_18Stm32TextureLoaderEvEERKS_IT_E>
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f000 f8f2 	bl	8001a02 <_ZNSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EE11get_deleterEv>
	  return *this;
 800181e:	687b      	ldr	r3, [r7, #4]
	}
 8001820:	4618      	mov	r0, r3
 8001822:	3710      	adds	r7, #16
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}

08001828 <_ZNKSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EEptEv>:
      operator->() const noexcept
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
	return get();
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f000 f991 	bl	8001b58 <_ZNKSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EE3getEv>
 8001836:	4603      	mov	r3, r0
      }
 8001838:	4618      	mov	r0, r3
 800183a:	3708      	adds	r7, #8
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}

08001840 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	4618      	mov	r0, r3
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr

08001856 <_ZSt11make_sharedIN4tama7TextureEJiiEESt10shared_ptrIT_EDpOT0_>:
    make_shared(_Args&&... __args)
 8001856:	b590      	push	{r4, r7, lr}
 8001858:	b087      	sub	sp, #28
 800185a:	af00      	add	r7, sp, #0
 800185c:	60f8      	str	r0, [r7, #12]
 800185e:	60b9      	str	r1, [r7, #8]
 8001860:	607a      	str	r2, [r7, #4]
				       std::forward<_Args>(__args)...);
 8001862:	f107 0314 	add.w	r3, r7, #20
 8001866:	4618      	mov	r0, r3
 8001868:	f000 f87c 	bl	8001964 <_ZNSaIN4tama7TextureEEC1Ev>
 800186c:	68b8      	ldr	r0, [r7, #8]
 800186e:	f7ff ffe7 	bl	8001840 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 8001872:	4604      	mov	r4, r0
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	f7ff ffe3 	bl	8001840 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 800187a:	4603      	mov	r3, r0
 800187c:	68f8      	ldr	r0, [r7, #12]
 800187e:	f107 0114 	add.w	r1, r7, #20
 8001882:	4622      	mov	r2, r4
 8001884:	f000 f975 	bl	8001b72 <_ZSt15allocate_sharedIN4tama7TextureESaIS1_EJiiEESt10shared_ptrIT_ERKT0_DpOT1_>
 8001888:	f107 0314 	add.w	r3, r7, #20
 800188c:	4618      	mov	r0, r3
 800188e:	f000 f875 	bl	800197c <_ZNSaIN4tama7TextureEED1Ev>
    }
 8001892:	68f8      	ldr	r0, [r7, #12]
 8001894:	371c      	adds	r7, #28
 8001896:	46bd      	mov	sp, r7
 8001898:	bd90      	pop	{r4, r7, pc}
	...

0800189c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_base() noexcept
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
      { }
 80018a4:	4a04      	ldr	r2, [pc, #16]	; (80018b8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x1c>)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	601a      	str	r2, [r3, #0]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4618      	mov	r0, r3
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr
 80018b8:	08011660 	.word	0x08011660

080018bc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_base() noexcept
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
      { }
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f7ff ffe9 	bl	800189c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80018ca:	210c      	movs	r1, #12
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	f00e fda8 	bl	8010422 <_ZdlPvj>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4618      	mov	r0, r3
 80018d6:	3708      	adds	r7, #8
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}

080018dc <_ZNKSt19__shared_ptr_accessIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	f000 f95e 	bl	8001ba6 <_ZNKSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE3getEv>
 80018ea:	4603      	mov	r3, r0
 80018ec:	4618      	mov	r0, r3
 80018ee:	3708      	adds	r7, #8
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <_ZN9__gnu_cxx5__ops17__iter_equals_valIKcEENS0_16_Iter_equals_valIT_EERS4_>:
	{ return *__it == _M_value; }
    };

  template<typename _Value>
    inline _Iter_equals_val<_Value>
    __iter_equals_val(_Value& __val)
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
    { return _Iter_equals_val<_Value>(__val); }
 80018fc:	f107 030c 	add.w	r3, r7, #12
 8001900:	6879      	ldr	r1, [r7, #4]
 8001902:	4618      	mov	r0, r3
 8001904:	f000 f95b 	bl	8001bbe <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEC1ERS2_>
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	4618      	mov	r0, r3
 800190c:	3710      	adds	r7, #16
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}

08001912 <_ZSt10__count_ifIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS0_5__ops16_Iter_equals_valIKcEEENSt15iterator_traitsIT_E15difference_typeESF_SF_T0_>:
    __count_if(_InputIterator __first, _InputIterator __last, _Predicate __pred)
 8001912:	b580      	push	{r7, lr}
 8001914:	b086      	sub	sp, #24
 8001916:	af00      	add	r7, sp, #0
 8001918:	60f8      	str	r0, [r7, #12]
 800191a:	60b9      	str	r1, [r7, #8]
 800191c:	607a      	str	r2, [r7, #4]
      typename iterator_traits<_InputIterator>::difference_type __n = 0;
 800191e:	2300      	movs	r3, #0
 8001920:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first)
 8001922:	f107 0208 	add.w	r2, r7, #8
 8001926:	f107 030c 	add.w	r3, r7, #12
 800192a:	4611      	mov	r1, r2
 800192c:	4618      	mov	r0, r3
 800192e:	f000 f955 	bl	8001bdc <_ZN9__gnu_cxxneIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d010      	beq.n	800195a <_ZSt10__count_ifIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS0_5__ops16_Iter_equals_valIKcEEENSt15iterator_traitsIT_E15difference_typeESF_SF_T0_+0x48>
	if (__pred(__first))
 8001938:	1d3b      	adds	r3, r7, #4
 800193a:	68f9      	ldr	r1, [r7, #12]
 800193c:	4618      	mov	r0, r3
 800193e:	f000 f975 	bl	8001c2c <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclINS_17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEEbT_>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d002      	beq.n	800194e <_ZSt10__count_ifIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS0_5__ops16_Iter_equals_valIKcEEENSt15iterator_traitsIT_E15difference_typeESF_SF_T0_+0x3c>
	  ++__n;
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	3301      	adds	r3, #1
 800194c:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first)
 800194e:	f107 030c 	add.w	r3, r7, #12
 8001952:	4618      	mov	r0, r3
 8001954:	f000 f95a 	bl	8001c0c <_ZN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv>
 8001958:	e7e3      	b.n	8001922 <_ZSt10__count_ifIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS0_5__ops16_Iter_equals_valIKcEEENSt15iterator_traitsIT_E15difference_typeESF_SF_T0_+0x10>
      return __n;
 800195a:	697b      	ldr	r3, [r7, #20]
    }
 800195c:	4618      	mov	r0, r3
 800195e:	3718      	adds	r7, #24
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}

08001964 <_ZNSaIN4tama7TextureEEC1Ev>:
      typedef true_type propagate_on_container_move_assignment;

      typedef true_type is_always_equal;
#endif

      allocator() throw() { }
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f000 f974 	bl	8001c5a <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEEC1Ev>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4618      	mov	r0, r3
 8001976:	3708      	adds	r7, #8
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}

0800197c <_ZNSaIN4tama7TextureEED1Ev>:
      : __allocator_base<_Tp>(__a) { }

      template<typename _Tp1>
	allocator(const allocator<_Tp1>&) throw() { }

      ~allocator() throw() { }
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f000 f973 	bl	8001c70 <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEED1Ev>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4618      	mov	r0, r3
 800198e:	3708      	adds	r7, #8
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}

08001994 <_ZSt15allocate_sharedIN4tama7TextureESaIS1_EJRjS3_EESt10shared_ptrIT_ERKT0_DpOT1_>:
    allocate_shared(const _Alloc& __a, _Args&&... __args)
 8001994:	b5b0      	push	{r4, r5, r7, lr}
 8001996:	b088      	sub	sp, #32
 8001998:	af02      	add	r7, sp, #8
 800199a:	60f8      	str	r0, [r7, #12]
 800199c:	60b9      	str	r1, [r7, #8]
 800199e:	607a      	str	r2, [r7, #4]
 80019a0:	603b      	str	r3, [r7, #0]
			     std::forward<_Args>(__args)...);
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f7ff fe61 	bl	800166a <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>
 80019a8:	4604      	mov	r4, r0
 80019aa:	6838      	ldr	r0, [r7, #0]
 80019ac:	f7ff fe5d 	bl	800166a <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>
 80019b0:	4603      	mov	r3, r0
 80019b2:	9300      	str	r3, [sp, #0]
 80019b4:	4623      	mov	r3, r4
 80019b6:	68ba      	ldr	r2, [r7, #8]
 80019b8:	4629      	mov	r1, r5
 80019ba:	68f8      	ldr	r0, [r7, #12]
 80019bc:	f000 f963 	bl	8001c86 <_ZNSt10shared_ptrIN4tama7TextureEEC1ISaIS1_EJRjS5_EEESt19_Sp_make_shared_tagRKT_DpOT0_>
    }
 80019c0:	68f8      	ldr	r0, [r7, #12]
 80019c2:	3718      	adds	r7, #24
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bdb0      	pop	{r4, r5, r7, pc}

080019c8 <_ZNSt11_Tuple_implILj0EJPN4tama13TextureLoaderESt14default_deleteIS1_EEEC1Ev>:
      constexpr _Tuple_impl()
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f000 f974 	bl	8001cbe <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN4tama13TextureLoaderEEEEC1Ev>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4618      	mov	r0, r3
 80019da:	f000 f97c 	bl	8001cd6 <_ZNSt10_Head_baseILj0EPN4tama13TextureLoaderELb0EEC1Ev>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4618      	mov	r0, r3
 80019e2:	3708      	adds	r7, #8
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <_ZNSt15__uniq_ptr_implIN4tama13TextureLoaderESt14default_deleteIS1_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f000 f97d 	bl	8001cf2 <_ZSt3getILj0EJPN4tama13TextureLoaderESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>
 80019f8:	4603      	mov	r3, r0
 80019fa:	4618      	mov	r0, r3
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}

08001a02 <_ZNSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EE11get_deleterEv>:
      get_deleter() noexcept
 8001a02:	b580      	push	{r7, lr}
 8001a04:	b082      	sub	sp, #8
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f000 f97d 	bl	8001d0c <_ZNSt15__uniq_ptr_implIN4tama13TextureLoaderESt14default_deleteIS1_EE10_M_deleterEv>
 8001a12:	4603      	mov	r3, r0
 8001a14:	4618      	mov	r0, r3
 8001a16:	3708      	adds	r7, #8
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}

08001a1c <_ZNKSt14default_deleteIN4tama13TextureLoaderEEclEPS1_>:
      operator()(_Tp* __ptr) const
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	6039      	str	r1, [r7, #0]
	delete __ptr;
 8001a26:	2104      	movs	r1, #4
 8001a28:	6838      	ldr	r0, [r7, #0]
 8001a2a:	f00e fcfa 	bl	8010422 <_ZdlPvj>
      }
 8001a2e:	bf00      	nop
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      constexpr __shared_ptr() noexcept
 8001a36:	b580      	push	{r7, lr}
 8001a38:	b082      	sub	sp, #8
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]
      : _M_ptr(0), _M_refcount()
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2200      	movs	r2, #0
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	3304      	adds	r3, #4
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff f84d 	bl	8000ae8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
      { }
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4618      	mov	r0, r3
 8001a52:	3708      	adds	r7, #8
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <_ZNSt10unique_ptrIN4tama18Stm32TextureLoaderESt14default_deleteIS1_EEC1IS3_vEEPS1_>:
	unique_ptr(pointer __p) noexcept
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6839      	ldr	r1, [r7, #0]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f000 f95d 	bl	8001d26 <_ZNSt15__uniq_ptr_implIN4tama18Stm32TextureLoaderESt14default_deleteIS1_EEC1EPS1_>
        { }
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}

08001a76 <_ZNSt15__uniq_ptr_implIN4tama18Stm32TextureLoaderESt14default_deleteIS1_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8001a76:	b580      	push	{r7, lr}
 8001a78:	b082      	sub	sp, #8
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	6078      	str	r0, [r7, #4]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f000 f964 	bl	8001d4e <_ZSt3getILj0EJPN4tama18Stm32TextureLoaderESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>
 8001a86:	4603      	mov	r3, r0
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3708      	adds	r7, #8
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}

08001a90 <_ZNSt10unique_ptrIN4tama18Stm32TextureLoaderESt14default_deleteIS1_EE11get_deleterEv>:
      get_deleter() noexcept
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f000 f964 	bl	8001d68 <_ZNSt15__uniq_ptr_implIN4tama18Stm32TextureLoaderESt14default_deleteIS1_EE10_M_deleterEv>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}

08001aaa <_ZNKSt14default_deleteIN4tama18Stm32TextureLoaderEEclEPS1_>:
      operator()(_Tp* __ptr) const
 8001aaa:	b580      	push	{r7, lr}
 8001aac:	b082      	sub	sp, #8
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]
 8001ab2:	6039      	str	r1, [r7, #0]
	delete __ptr;
 8001ab4:	2104      	movs	r1, #4
 8001ab6:	6838      	ldr	r0, [r7, #0]
 8001ab8:	f00e fcb3 	bl	8010422 <_ZdlPvj>
      }
 8001abc:	bf00      	nop
 8001abe:	3708      	adds	r7, #8
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <_ZNSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EE5resetEPS1_>:
      reset(pointer __p = pointer()) noexcept
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	6039      	str	r1, [r7, #0]
	swap(_M_t._M_ptr(), __p);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7ff ff89 	bl	80019e8 <_ZNSt15__uniq_ptr_implIN4tama13TextureLoaderESt14default_deleteIS1_EE6_M_ptrEv>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	463b      	mov	r3, r7
 8001ada:	4619      	mov	r1, r3
 8001adc:	4610      	mov	r0, r2
 8001ade:	f000 f95b 	bl	8001d98 <_ZSt4swapIPN4tama13TextureLoaderEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS7_ESt18is_move_assignableIS7_EEE5valueEvE4typeERS7_SH_>
	if (__p != pointer())
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d008      	beq.n	8001afa <_ZNSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EE5resetEPS1_+0x36>
	  get_deleter()(__p);
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f7ff ff8a 	bl	8001a02 <_ZNSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EE11get_deleterEv>
 8001aee:	4602      	mov	r2, r0
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	4619      	mov	r1, r3
 8001af4:	4610      	mov	r0, r2
 8001af6:	f7ff ff91 	bl	8001a1c <_ZNKSt14default_deleteIN4tama13TextureLoaderEEclEPS1_>
      }
 8001afa:	bf00      	nop
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <_ZNSt10unique_ptrIN4tama18Stm32TextureLoaderESt14default_deleteIS1_EE7releaseEv>:
      release() noexcept
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b084      	sub	sp, #16
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f000 f963 	bl	8001dd6 <_ZNKSt10unique_ptrIN4tama18Stm32TextureLoaderESt14default_deleteIS1_EE3getEv>
 8001b10:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7ff ffae 	bl	8001a76 <_ZNSt15__uniq_ptr_implIN4tama18Stm32TextureLoaderESt14default_deleteIS1_EE6_M_ptrEv>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	6013      	str	r3, [r2, #0]
	return __p;
 8001b20:	68fb      	ldr	r3, [r7, #12]
      }
 8001b22:	4618      	mov	r0, r3
 8001b24:	3710      	adds	r7, #16
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}

08001b2a <_ZSt7forwardISt14default_deleteIN4tama18Stm32TextureLoaderEEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001b2a:	b480      	push	{r7}
 8001b2c:	b083      	sub	sp, #12
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4618      	mov	r0, r3
 8001b36:	370c      	adds	r7, #12
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <_ZNSt14default_deleteIN4tama13TextureLoaderEEC1INS0_18Stm32TextureLoaderEvEERKS_IT_E>:
        default_delete(const default_delete<_Up>&) noexcept { }
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	6039      	str	r1, [r7, #0]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <_ZNKSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EE3getEv>:
      get() const noexcept
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f000 f944 	bl	8001df0 <_ZNKSt15__uniq_ptr_implIN4tama13TextureLoaderESt14default_deleteIS1_EE6_M_ptrEv>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <_ZSt15allocate_sharedIN4tama7TextureESaIS1_EJiiEESt10shared_ptrIT_ERKT0_DpOT1_>:
    allocate_shared(const _Alloc& __a, _Args&&... __args)
 8001b72:	b5b0      	push	{r4, r5, r7, lr}
 8001b74:	b088      	sub	sp, #32
 8001b76:	af02      	add	r7, sp, #8
 8001b78:	60f8      	str	r0, [r7, #12]
 8001b7a:	60b9      	str	r1, [r7, #8]
 8001b7c:	607a      	str	r2, [r7, #4]
 8001b7e:	603b      	str	r3, [r7, #0]
			     std::forward<_Args>(__args)...);
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f7ff fe5d 	bl	8001840 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 8001b86:	4604      	mov	r4, r0
 8001b88:	6838      	ldr	r0, [r7, #0]
 8001b8a:	f7ff fe59 	bl	8001840 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	9300      	str	r3, [sp, #0]
 8001b92:	4623      	mov	r3, r4
 8001b94:	68ba      	ldr	r2, [r7, #8]
 8001b96:	4629      	mov	r1, r5
 8001b98:	68f8      	ldr	r0, [r7, #12]
 8001b9a:	f000 f937 	bl	8001e0c <_ZNSt10shared_ptrIN4tama7TextureEEC1ISaIS1_EJiiEEESt19_Sp_make_shared_tagRKT_DpOT0_>
    }
 8001b9e:	68f8      	ldr	r0, [r7, #12]
 8001ba0:	3718      	adds	r7, #24
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bdb0      	pop	{r4, r5, r7, pc}

08001ba6 <_ZNKSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE3getEv>:
      get() const noexcept
 8001ba6:	b480      	push	{r7}
 8001ba8:	b083      	sub	sp, #12
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr

08001bbe <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEC1ERS2_>:
      _Iter_equals_val(_Value& __value)
 8001bbe:	b480      	push	{r7}
 8001bc0:	b083      	sub	sp, #12
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
 8001bc6:	6039      	str	r1, [r7, #0]
	: _M_value(__value)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	683a      	ldr	r2, [r7, #0]
 8001bcc:	601a      	str	r2, [r3, #0]
      { }
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	370c      	adds	r7, #12
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <_ZN9__gnu_cxxneIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKNS_17__normal_iteratorIT_T0_EESD_>:
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8001bdc:	b590      	push	{r4, r7, lr}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f000 f92c 	bl	8001e44 <_ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>
 8001bec:	4603      	mov	r3, r0
 8001bee:	681c      	ldr	r4, [r3, #0]
 8001bf0:	6838      	ldr	r0, [r7, #0]
 8001bf2:	f000 f927 	bl	8001e44 <_ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	429c      	cmp	r4, r3
 8001bfc:	bf14      	ite	ne
 8001bfe:	2301      	movne	r3, #1
 8001c00:	2300      	moveq	r3, #0
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	4618      	mov	r0, r3
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd90      	pop	{r4, r7, pc}

08001c0c <_ZN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
	++_M_current;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	1c5a      	adds	r2, r3, #1
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	601a      	str	r2, [r3, #0]
	return *this;
 8001c1e:	687b      	ldr	r3, [r7, #4]
      }
 8001c20:	4618      	mov	r0, r3
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr

08001c2c <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclINS_17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEEbT_>:
	operator()(_Iterator __it)
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	6039      	str	r1, [r7, #0]
	{ return *__it == _M_value; }
 8001c36:	463b      	mov	r3, r7
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f000 f90e 	bl	8001e5a <_ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	781a      	ldrb	r2, [r3, #0]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	bf0c      	ite	eq
 8001c4c:	2301      	moveq	r3, #1
 8001c4e:	2300      	movne	r3, #0
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	4618      	mov	r0, r3
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEEC1Ev>:
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001c5a:	b480      	push	{r7}
 8001c5c:	b083      	sub	sp, #12
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4618      	mov	r0, r3
 8001c66:	370c      	adds	r7, #12
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr

08001c70 <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEED1Ev>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }

      template<typename _Tp1>
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	370c      	adds	r7, #12
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr

08001c86 <_ZNSt10shared_ptrIN4tama7TextureEEC1ISaIS1_EJRjS5_EEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 8001c86:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c88:	b087      	sub	sp, #28
 8001c8a:	af02      	add	r7, sp, #8
 8001c8c:	60f8      	str	r0, [r7, #12]
 8001c8e:	7239      	strb	r1, [r7, #8]
 8001c90:	607a      	str	r2, [r7, #4]
 8001c92:	603b      	str	r3, [r7, #0]
	: __shared_ptr<_Tp>(__tag, __a, std::forward<_Args>(__args)...)
 8001c94:	68fc      	ldr	r4, [r7, #12]
 8001c96:	6838      	ldr	r0, [r7, #0]
 8001c98:	f7ff fce7 	bl	800166a <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>
 8001c9c:	4605      	mov	r5, r0
 8001c9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001ca0:	f7ff fce3 	bl	800166a <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	9300      	str	r3, [sp, #0]
 8001ca8:	462b      	mov	r3, r5
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	4631      	mov	r1, r6
 8001cae:	4620      	mov	r0, r4
 8001cb0:	f000 f8fc 	bl	8001eac <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJRjS7_EEESt19_Sp_make_shared_tagRKT_DpOT0_>
	{ }
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3714      	adds	r7, #20
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001cbe <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN4tama13TextureLoaderEEEEC1Ev>:
      constexpr _Tuple_impl()
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	b082      	sub	sp, #8
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f000 f96f 	bl	8001faa <_ZNSt10_Head_baseILj1ESt14default_deleteIN4tama13TextureLoaderEELb1EEC1Ev>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3708      	adds	r7, #8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}

08001cd6 <_ZNSt10_Head_baseILj0EPN4tama13TextureLoaderELb0EEC1Ev>:
      constexpr _Head_base()
 8001cd6:	b480      	push	{r7}
 8001cd8:	b083      	sub	sp, #12
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr

08001cf2 <_ZSt3getILj0EJPN4tama13TextureLoaderESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>:
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }

  /// Return a reference to the ith element of a tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b082      	sub	sp, #8
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f000 f95f 	bl	8001fc0 <_ZSt12__get_helperILj0EPN4tama13TextureLoaderEJSt14default_deleteIS1_EEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>
 8001d02:	4603      	mov	r3, r0
 8001d04:	4618      	mov	r0, r3
 8001d06:	3708      	adds	r7, #8
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <_ZNSt15__uniq_ptr_implIN4tama13TextureLoaderESt14default_deleteIS1_EE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f000 f95e 	bl	8001fd8 <_ZSt3getILj1EJPN4tama13TextureLoaderESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <_ZNSt15__uniq_ptr_implIN4tama18Stm32TextureLoaderESt14default_deleteIS1_EEC1EPS1_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b082      	sub	sp, #8
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
 8001d2e:	6039      	str	r1, [r7, #0]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	4618      	mov	r0, r3
 8001d34:	f000 f95c 	bl	8001ff0 <_ZNSt5tupleIJPN4tama18Stm32TextureLoaderESt14default_deleteIS1_EEEC1IS2_S4_Lb1EEEv>
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f7ff fe9c 	bl	8001a76 <_ZNSt15__uniq_ptr_implIN4tama18Stm32TextureLoaderESt14default_deleteIS1_EE6_M_ptrEv>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	6013      	str	r3, [r2, #0]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	4618      	mov	r0, r3
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <_ZSt3getILj0EJPN4tama18Stm32TextureLoaderESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>:
    get(tuple<_Elements...>& __t) noexcept
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b082      	sub	sp, #8
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f000 f956 	bl	800200a <_ZSt12__get_helperILj0EPN4tama18Stm32TextureLoaderEJSt14default_deleteIS1_EEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	4618      	mov	r0, r3
 8001d62:	3708      	adds	r7, #8
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <_ZNSt15__uniq_ptr_implIN4tama18Stm32TextureLoaderESt14default_deleteIS1_EE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	4618      	mov	r0, r3
 8001d74:	f000 f955 	bl	8002022 <_ZSt3getILj1EJPN4tama18Stm32TextureLoaderESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3708      	adds	r7, #8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <_ZSt4moveIRPN4tama13TextureLoaderEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8001d82:	b480      	push	{r7}
 8001d84:	b083      	sub	sp, #12
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <_ZSt4swapIPN4tama13TextureLoaderEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS7_ESt18is_move_assignableIS7_EEE5valueEvE4typeERS7_SH_>:
    swap(_Tp& __a, _Tp& __b)
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b084      	sub	sp, #16
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f7ff ffed 	bl	8001d82 <_ZSt4moveIRPN4tama13TextureLoaderEEONSt16remove_referenceIT_E4typeEOS5_>
 8001da8:	4603      	mov	r3, r0
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8001dae:	6838      	ldr	r0, [r7, #0]
 8001db0:	f7ff ffe7 	bl	8001d82 <_ZSt4moveIRPN4tama13TextureLoaderEEONSt16remove_referenceIT_E4typeEOS5_>
 8001db4:	4603      	mov	r3, r0
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8001dbc:	f107 030c 	add.w	r3, r7, #12
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7ff ffde 	bl	8001d82 <_ZSt4moveIRPN4tama13TextureLoaderEEONSt16remove_referenceIT_E4typeEOS5_>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	601a      	str	r2, [r3, #0]
    }
 8001dce:	bf00      	nop
 8001dd0:	3710      	adds	r7, #16
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}

08001dd6 <_ZNKSt10unique_ptrIN4tama18Stm32TextureLoaderESt14default_deleteIS1_EE3getEv>:
      get() const noexcept
 8001dd6:	b580      	push	{r7, lr}
 8001dd8:	b082      	sub	sp, #8
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4618      	mov	r0, r3
 8001de2:	f000 f92a 	bl	800203a <_ZNKSt15__uniq_ptr_implIN4tama18Stm32TextureLoaderESt14default_deleteIS1_EE6_M_ptrEv>
 8001de6:	4603      	mov	r3, r0
 8001de8:	4618      	mov	r0, r3
 8001dea:	3708      	adds	r7, #8
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <_ZNKSt15__uniq_ptr_implIN4tama13TextureLoaderESt14default_deleteIS1_EE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f000 f92b 	bl	8002056 <_ZSt3getILj0EJPN4tama13TextureLoaderESt14default_deleteIS1_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_>
 8001e00:	4603      	mov	r3, r0
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4618      	mov	r0, r3
 8001e06:	3708      	adds	r7, #8
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <_ZNSt10shared_ptrIN4tama7TextureEEC1ISaIS1_EJiiEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 8001e0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e0e:	b087      	sub	sp, #28
 8001e10:	af02      	add	r7, sp, #8
 8001e12:	60f8      	str	r0, [r7, #12]
 8001e14:	7239      	strb	r1, [r7, #8]
 8001e16:	607a      	str	r2, [r7, #4]
 8001e18:	603b      	str	r3, [r7, #0]
	: __shared_ptr<_Tp>(__tag, __a, std::forward<_Args>(__args)...)
 8001e1a:	68fc      	ldr	r4, [r7, #12]
 8001e1c:	6838      	ldr	r0, [r7, #0]
 8001e1e:	f7ff fd0f 	bl	8001840 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 8001e22:	4605      	mov	r5, r0
 8001e24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001e26:	f7ff fd0b 	bl	8001840 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	9300      	str	r3, [sp, #0]
 8001e2e:	462b      	mov	r3, r5
 8001e30:	687a      	ldr	r2, [r7, #4]
 8001e32:	4631      	mov	r1, r6
 8001e34:	4620      	mov	r0, r4
 8001e36:	f000 f91b 	bl	8002070 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJiiEEESt19_Sp_make_shared_tagRKT_DpOT0_>
	{ }
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3714      	adds	r7, #20
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e44 <_ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	370c      	adds	r7, #12
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr

08001e5a <_ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8001e5a:	b480      	push	{r7}
 8001e5c:	b083      	sub	sp, #12
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4618      	mov	r0, r3
 8001e68:	370c      	adds	r7, #12
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr

08001e72 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>:
	  _M_ptr = static_cast<_Tp*>(__p);
	  _M_enable_shared_from_this_with(_M_ptr);
	}
#else
      template<typename _Alloc>
        struct _Deleter
 8001e72:	b580      	push	{r7, lr}
 8001e74:	b082      	sub	sp, #8
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7ff fd7d 	bl	800197c <_ZNSaIN4tama7TextureEED1Ev>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4618      	mov	r0, r3
 8001e86:	3708      	adds	r7, #8
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>:
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	6039      	str	r1, [r7, #0]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	683a      	ldr	r2, [r7, #0]
 8001e9a:	4611      	mov	r1, r2
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f000 f966 	bl	800216e <_ZNSaIN4tama7TextureEEC1ERKS1_>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3708      	adds	r7, #8
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJRjS7_EEESt19_Sp_make_shared_tagRKT_DpOT0_>:
          }
          _Alloc _M_alloc;
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 8001eac:	b590      	push	{r4, r7, lr}
 8001eae:	b08d      	sub	sp, #52	; 0x34
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	60f8      	str	r0, [r7, #12]
 8001eb4:	7239      	strb	r1, [r7, #8]
 8001eb6:	607a      	str	r2, [r7, #4]
 8001eb8:	603b      	str	r3, [r7, #0]
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	601a      	str	r2, [r3, #0]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	3304      	adds	r3, #4
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7fe fe0f 	bl	8000ae8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	{
	  typedef typename allocator_traits<_Alloc>::template
	    rebind_traits<typename std::remove_cv<_Tp>::type> __traits;
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 8001eca:	f107 0320 	add.w	r3, r7, #32
 8001ece:	6879      	ldr	r1, [r7, #4]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f000 f94c 	bl	800216e <_ZNSaIN4tama7TextureEEC1ERKS1_>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 8001ed6:	f107 0318 	add.w	r3, r7, #24
 8001eda:	f107 0220 	add.w	r2, r7, #32
 8001ede:	4611      	mov	r1, r2
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f000 f952 	bl	800218a <_ZSt18__allocate_guardedISaIN4tama7TextureEEESt15__allocated_ptrIT_ERS4_>
	  auto __ptr = __guard.get();
 8001ee6:	f107 0318 	add.w	r3, r7, #24
 8001eea:	4618      	mov	r0, r3
 8001eec:	f000 f975 	bl	80021da <_ZNSt15__allocated_ptrISaIN4tama7TextureEEE3getEv>
 8001ef0:	62f8      	str	r0, [r7, #44]	; 0x2c
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
 8001ef2:	6838      	ldr	r0, [r7, #0]
 8001ef4:	f7ff fbb9 	bl	800166a <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>
 8001ef8:	4604      	mov	r4, r0
 8001efa:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001efc:	f7ff fbb5 	bl	800166a <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>
 8001f00:	4603      	mov	r3, r0
 8001f02:	f107 0020 	add.w	r0, r7, #32
 8001f06:	4622      	mov	r2, r4
 8001f08:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001f0a:	f000 f974 	bl	80021f6 <_ZNSt16allocator_traitsISaIN4tama7TextureEEE9constructIS1_JRjS5_EEEvRS2_PT_DpOT0_>
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
 8001f0e:	f107 0318 	add.w	r3, r7, #24
 8001f12:	2100      	movs	r1, #0
 8001f14:	4618      	mov	r0, r3
 8001f16:	f000 f986 	bl	8002226 <_ZNSt15__allocated_ptrISaIN4tama7TextureEEEaSEDn>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 8001f1a:	f107 0220 	add.w	r2, r7, #32
 8001f1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f22:	4611      	mov	r1, r2
 8001f24:	4618      	mov	r0, r3
 8001f26:	f7ff ffb1 	bl	8001e8c <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>
 8001f2a:	f107 0220 	add.w	r2, r7, #32
 8001f2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f32:	4611      	mov	r1, r2
 8001f34:	4618      	mov	r0, r3
 8001f36:	f000 f91a 	bl	800216e <_ZNSaIN4tama7TextureEEC1ERKS1_>
 8001f3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f3e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001f42:	f107 0014 	add.w	r0, r7, #20
 8001f46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001f48:	f000 f9a2 	bl	8002290 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama7TextureENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
 8001f4c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7ff fd13 	bl	800197c <_ZNSaIN4tama7TextureEED1Ev>
 8001f56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f7ff ff89 	bl	8001e72 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	  _M_refcount._M_swap(__count);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	3304      	adds	r3, #4
 8001f64:	f107 0214 	add.w	r2, r7, #20
 8001f68:	4611      	mov	r1, r2
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f7fe fdff 	bl	8000b6e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  _M_ptr = __ptr;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f74:	601a      	str	r2, [r3, #0]
	  _M_enable_shared_from_this_with(_M_ptr);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	68f8      	ldr	r0, [r7, #12]
 8001f7e:	f000 f9de 	bl	800233e <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 8001f82:	f107 0314 	add.w	r3, r7, #20
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7fe fce6 	bl	8000958 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 8001f8c:	f107 0318 	add.w	r3, r7, #24
 8001f90:	4618      	mov	r0, r3
 8001f92:	f000 f90d 	bl	80021b0 <_ZNSt15__allocated_ptrISaIN4tama7TextureEEED1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 8001f96:	f107 0320 	add.w	r3, r7, #32
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7ff ff69 	bl	8001e72 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	}
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3734      	adds	r7, #52	; 0x34
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd90      	pop	{r4, r7, pc}

08001faa <_ZNSt10_Head_baseILj1ESt14default_deleteIN4tama13TextureLoaderEELb1EEC1Ev>:
      constexpr _Head_base()
 8001faa:	b480      	push	{r7}
 8001fac:	b083      	sub	sp, #12
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
      : _Head() { }
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	370c      	adds	r7, #12
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <_ZSt12__get_helperILj0EPN4tama13TextureLoaderEJSt14default_deleteIS1_EEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f000 f9c3 	bl	8002354 <_ZNSt11_Tuple_implILj0EJPN4tama13TextureLoaderESt14default_deleteIS1_EEE7_M_headERS5_>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3708      	adds	r7, #8
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <_ZSt3getILj1EJPN4tama13TextureLoaderESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>:
    get(tuple<_Elements...>& __t) noexcept
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f000 f9c4 	bl	800236e <_ZSt12__get_helperILj1ESt14default_deleteIN4tama13TextureLoaderEEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3708      	adds	r7, #8
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}

08001ff0 <_ZNSt5tupleIJPN4tama18Stm32TextureLoaderESt14default_deleteIS1_EEEC1IS2_S4_Lb1EEEv>:
      constexpr tuple()
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
      : _Inherited() { }
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f000 f9c3 	bl	8002386 <_ZNSt11_Tuple_implILj0EJPN4tama18Stm32TextureLoaderESt14default_deleteIS1_EEEC1Ev>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	4618      	mov	r0, r3
 8002004:	3708      	adds	r7, #8
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}

0800200a <_ZSt12__get_helperILj0EPN4tama18Stm32TextureLoaderEJSt14default_deleteIS1_EEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800200a:	b580      	push	{r7, lr}
 800200c:	b082      	sub	sp, #8
 800200e:	af00      	add	r7, sp, #0
 8002010:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f000 f9c7 	bl	80023a6 <_ZNSt11_Tuple_implILj0EJPN4tama18Stm32TextureLoaderESt14default_deleteIS1_EEE7_M_headERS5_>
 8002018:	4603      	mov	r3, r0
 800201a:	4618      	mov	r0, r3
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}

08002022 <_ZSt3getILj1EJPN4tama18Stm32TextureLoaderESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>:
    get(tuple<_Elements...>& __t) noexcept
 8002022:	b580      	push	{r7, lr}
 8002024:	b082      	sub	sp, #8
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f000 f9c8 	bl	80023c0 <_ZSt12__get_helperILj1ESt14default_deleteIN4tama18Stm32TextureLoaderEEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8002030:	4603      	mov	r3, r0
 8002032:	4618      	mov	r0, r3
 8002034:	3708      	adds	r7, #8
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}

0800203a <_ZNKSt15__uniq_ptr_implIN4tama18Stm32TextureLoaderESt14default_deleteIS1_EE6_M_ptrEv>:
 800203a:	b580      	push	{r7, lr}
 800203c:	b082      	sub	sp, #8
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4618      	mov	r0, r3
 8002046:	f000 f9c7 	bl	80023d8 <_ZSt3getILj0EJPN4tama18Stm32TextureLoaderESt14default_deleteIS1_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_>
 800204a:	4603      	mov	r3, r0
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4618      	mov	r0, r3
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}

08002056 <_ZSt3getILj0EJPN4tama13TextureLoaderESt14default_deleteIS1_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_>:

  /// Return a const reference to the ith element of a const tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 8002056:	b580      	push	{r7, lr}
 8002058:	b082      	sub	sp, #8
 800205a:	af00      	add	r7, sp, #0
 800205c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4618      	mov	r0, r3
 8002062:	f000 f9c6 	bl	80023f2 <_ZSt12__get_helperILj0EPN4tama13TextureLoaderEJSt14default_deleteIS1_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE>
 8002066:	4603      	mov	r3, r0
 8002068:	4618      	mov	r0, r3
 800206a:	3708      	adds	r7, #8
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}

08002070 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJiiEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 8002070:	b590      	push	{r4, r7, lr}
 8002072:	b08d      	sub	sp, #52	; 0x34
 8002074:	af00      	add	r7, sp, #0
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	7239      	strb	r1, [r7, #8]
 800207a:	607a      	str	r2, [r7, #4]
 800207c:	603b      	str	r3, [r7, #0]
	: _M_ptr(), _M_refcount()
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	3304      	adds	r3, #4
 8002088:	4618      	mov	r0, r3
 800208a:	f7fe fd2d 	bl	8000ae8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 800208e:	f107 0320 	add.w	r3, r7, #32
 8002092:	6879      	ldr	r1, [r7, #4]
 8002094:	4618      	mov	r0, r3
 8002096:	f000 f86a 	bl	800216e <_ZNSaIN4tama7TextureEEC1ERKS1_>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 800209a:	f107 0318 	add.w	r3, r7, #24
 800209e:	f107 0220 	add.w	r2, r7, #32
 80020a2:	4611      	mov	r1, r2
 80020a4:	4618      	mov	r0, r3
 80020a6:	f000 f870 	bl	800218a <_ZSt18__allocate_guardedISaIN4tama7TextureEEESt15__allocated_ptrIT_ERS4_>
	  auto __ptr = __guard.get();
 80020aa:	f107 0318 	add.w	r3, r7, #24
 80020ae:	4618      	mov	r0, r3
 80020b0:	f000 f893 	bl	80021da <_ZNSt15__allocated_ptrISaIN4tama7TextureEEE3getEv>
 80020b4:	62f8      	str	r0, [r7, #44]	; 0x2c
	  __traits::construct(__del._M_alloc, __ptr,
 80020b6:	6838      	ldr	r0, [r7, #0]
 80020b8:	f7ff fbc2 	bl	8001840 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 80020bc:	4604      	mov	r4, r0
 80020be:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80020c0:	f7ff fbbe 	bl	8001840 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 80020c4:	4603      	mov	r3, r0
 80020c6:	f107 0020 	add.w	r0, r7, #32
 80020ca:	4622      	mov	r2, r4
 80020cc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80020ce:	f000 f99c 	bl	800240a <_ZNSt16allocator_traitsISaIN4tama7TextureEEE9constructIS1_JiiEEEvRS2_PT_DpOT0_>
	  __guard = nullptr;
 80020d2:	f107 0318 	add.w	r3, r7, #24
 80020d6:	2100      	movs	r1, #0
 80020d8:	4618      	mov	r0, r3
 80020da:	f000 f8a4 	bl	8002226 <_ZNSt15__allocated_ptrISaIN4tama7TextureEEEaSEDn>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 80020de:	f107 0220 	add.w	r2, r7, #32
 80020e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020e6:	4611      	mov	r1, r2
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7ff fecf 	bl	8001e8c <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>
 80020ee:	f107 0220 	add.w	r2, r7, #32
 80020f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020f6:	4611      	mov	r1, r2
 80020f8:	4618      	mov	r0, r3
 80020fa:	f000 f838 	bl	800216e <_ZNSaIN4tama7TextureEEC1ERKS1_>
 80020fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002102:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002106:	f107 0014 	add.w	r0, r7, #20
 800210a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800210c:	f000 f8c0 	bl	8002290 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama7TextureENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
 8002110:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002114:	4618      	mov	r0, r3
 8002116:	f7ff fc31 	bl	800197c <_ZNSaIN4tama7TextureEED1Ev>
 800211a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800211e:	4618      	mov	r0, r3
 8002120:	f7ff fea7 	bl	8001e72 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	  _M_refcount._M_swap(__count);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	3304      	adds	r3, #4
 8002128:	f107 0214 	add.w	r2, r7, #20
 800212c:	4611      	mov	r1, r2
 800212e:	4618      	mov	r0, r3
 8002130:	f7fe fd1d 	bl	8000b6e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  _M_ptr = __ptr;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002138:	601a      	str	r2, [r3, #0]
	  _M_enable_shared_from_this_with(_M_ptr);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4619      	mov	r1, r3
 8002140:	68f8      	ldr	r0, [r7, #12]
 8002142:	f000 f8fc 	bl	800233e <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 8002146:	f107 0314 	add.w	r3, r7, #20
 800214a:	4618      	mov	r0, r3
 800214c:	f7fe fc04 	bl	8000958 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 8002150:	f107 0318 	add.w	r3, r7, #24
 8002154:	4618      	mov	r0, r3
 8002156:	f000 f82b 	bl	80021b0 <_ZNSt15__allocated_ptrISaIN4tama7TextureEEED1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 800215a:	f107 0320 	add.w	r3, r7, #32
 800215e:	4618      	mov	r0, r3
 8002160:	f7ff fe87 	bl	8001e72 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	}
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	4618      	mov	r0, r3
 8002168:	3734      	adds	r7, #52	; 0x34
 800216a:	46bd      	mov	sp, r7
 800216c:	bd90      	pop	{r4, r7, pc}

0800216e <_ZNSaIN4tama7TextureEEC1ERKS1_>:
      allocator(const allocator& __a) throw()
 800216e:	b580      	push	{r7, lr}
 8002170:	b082      	sub	sp, #8
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
 8002176:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8002178:	6839      	ldr	r1, [r7, #0]
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f000 f95d 	bl	800243a <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEEC1ERKS3_>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	4618      	mov	r0, r3
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}

0800218a <_ZSt18__allocate_guardedISaIN4tama7TextureEEESt15__allocated_ptrIT_ERS4_>:
    };

  /// Allocate space for a single object using __a
  template<typename _Alloc>
    __allocated_ptr<_Alloc>
    __allocate_guarded(_Alloc& __a)
 800218a:	b580      	push	{r7, lr}
 800218c:	b082      	sub	sp, #8
 800218e:	af00      	add	r7, sp, #0
 8002190:	6078      	str	r0, [r7, #4]
 8002192:	6039      	str	r1, [r7, #0]
    {
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 8002194:	2101      	movs	r1, #1
 8002196:	6838      	ldr	r0, [r7, #0]
 8002198:	f000 f95b 	bl	8002452 <_ZNSt16allocator_traitsISaIN4tama7TextureEEE8allocateERS2_j>
 800219c:	4603      	mov	r3, r0
 800219e:	461a      	mov	r2, r3
 80021a0:	6839      	ldr	r1, [r7, #0]
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f000 f964 	bl	8002470 <_ZNSt15__allocated_ptrISaIN4tama7TextureEEEC1ERS2_PS1_>
    }
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	3708      	adds	r7, #8
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <_ZNSt15__allocated_ptrISaIN4tama7TextureEEED1Ev>:
      ~__allocated_ptr()
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d007      	beq.n	80021d0 <_ZNSt15__allocated_ptrISaIN4tama7TextureEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6818      	ldr	r0, [r3, #0]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	2201      	movs	r2, #1
 80021ca:	4619      	mov	r1, r3
 80021cc:	f000 f964 	bl	8002498 <_ZNSt16allocator_traitsISaIN4tama7TextureEEE10deallocateERS2_PS1_j>
      }
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	4618      	mov	r0, r3
 80021d4:	3708      	adds	r7, #8
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}

080021da <_ZNSt15__allocated_ptrISaIN4tama7TextureEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 80021da:	b580      	push	{r7, lr}
 80021dc:	b082      	sub	sp, #8
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f000 f965 	bl	80024b6 <_ZNSt15__allocated_ptrISaIN4tama7TextureEEE10_S_raw_ptrEPS1_>
 80021ec:	4603      	mov	r3, r0
 80021ee:	4618      	mov	r0, r3
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <_ZNSt16allocator_traitsISaIN4tama7TextureEEE9constructIS1_JRjS5_EEEvRS2_PT_DpOT0_>:
       *
       *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
      */
      template<typename _Up, typename... _Args>
	static void
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 80021f6:	b590      	push	{r4, r7, lr}
 80021f8:	b085      	sub	sp, #20
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	60f8      	str	r0, [r7, #12]
 80021fe:	60b9      	str	r1, [r7, #8]
 8002200:	607a      	str	r2, [r7, #4]
 8002202:	603b      	str	r3, [r7, #0]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f7ff fa30 	bl	800166a <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>
 800220a:	4604      	mov	r4, r0
 800220c:	6838      	ldr	r0, [r7, #0]
 800220e:	f7ff fa2c 	bl	800166a <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>
 8002212:	4603      	mov	r3, r0
 8002214:	4622      	mov	r2, r4
 8002216:	68b9      	ldr	r1, [r7, #8]
 8002218:	68f8      	ldr	r0, [r7, #12]
 800221a:	f000 f957 	bl	80024cc <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEE9constructIS2_JRjS5_EEEvPT_DpOT0_>
 800221e:	bf00      	nop
 8002220:	3714      	adds	r7, #20
 8002222:	46bd      	mov	sp, r7
 8002224:	bd90      	pop	{r4, r7, pc}

08002226 <_ZNSt15__allocated_ptrISaIN4tama7TextureEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 8002226:	b480      	push	{r7}
 8002228:	b083      	sub	sp, #12
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
 800222e:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2200      	movs	r2, #0
 8002234:	605a      	str	r2, [r3, #4]
	return *this;
 8002236:	687b      	ldr	r3, [r7, #4]
      }
 8002238:	4618      	mov	r0, r3
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <_ZSt4moveIRNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	4618      	mov	r0, r3
 8002250:	370c      	adds	r7, #12
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr

0800225a <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>:
        struct _Deleter
 800225a:	b580      	push	{r7, lr}
 800225c:	b082      	sub	sp, #8
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
 8002262:	6039      	str	r1, [r7, #0]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	683a      	ldr	r2, [r7, #0]
 8002268:	4611      	mov	r1, r2
 800226a:	4618      	mov	r0, r3
 800226c:	f7ff ff7f 	bl	800216e <_ZNSaIN4tama7TextureEEC1ERKS1_>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	4618      	mov	r0, r3
 8002274:	3708      	adds	r7, #8
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}

0800227a <_ZSt4moveIRSaIN4tama7TextureEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800227a:	b480      	push	{r7}
 800227c:	b083      	sub	sp, #12
 800227e:	af00      	add	r7, sp, #0
 8002280:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4618      	mov	r0, r3
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama7TextureENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
 8002290:	b5b0      	push	{r4, r5, r7, lr}
 8002292:	b08a      	sub	sp, #40	; 0x28
 8002294:	af00      	add	r7, sp, #0
 8002296:	60f8      	str	r0, [r7, #12]
 8002298:	60b9      	str	r1, [r7, #8]
 800229a:	607a      	str	r2, [r7, #4]
 800229c:	603b      	str	r3, [r7, #0]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2200      	movs	r2, #0
 80022a2:	601a      	str	r2, [r3, #0]
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 80022a4:	f107 031c 	add.w	r3, r7, #28
 80022a8:	6839      	ldr	r1, [r7, #0]
 80022aa:	4618      	mov	r0, r3
 80022ac:	f000 f930 	bl	8002510 <_ZNSaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	      auto __guard = std::__allocate_guarded(__a2);
 80022b0:	f107 0314 	add.w	r3, r7, #20
 80022b4:	f107 021c 	add.w	r2, r7, #28
 80022b8:	4611      	mov	r1, r2
 80022ba:	4618      	mov	r0, r3
 80022bc:	f000 f941 	bl	8002542 <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>
	      _Sp_cd_type* __mem = __guard.get();
 80022c0:	f107 0314 	add.w	r3, r7, #20
 80022c4:	4618      	mov	r0, r3
 80022c6:	f000 f964 	bl	8002592 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>
 80022ca:	6278      	str	r0, [r7, #36]	; 0x24
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	f7ff ffb9 	bl	8002244 <_ZSt4moveIRNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 80022d2:	4602      	mov	r2, r0
 80022d4:	f107 0320 	add.w	r3, r7, #32
 80022d8:	4611      	mov	r1, r2
 80022da:	4618      	mov	r0, r3
 80022dc:	f7ff ffbd 	bl	800225a <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 80022e0:	f107 0420 	add.w	r4, r7, #32
 80022e4:	6838      	ldr	r0, [r7, #0]
 80022e6:	f7ff ffc8 	bl	800227a <_ZSt4moveIRSaIN4tama7TextureEEEONSt16remove_referenceIT_E4typeEOS5_>
 80022ea:	4605      	mov	r5, r0
 80022ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ee:	4619      	mov	r1, r3
 80022f0:	2014      	movs	r0, #20
 80022f2:	f7fe fc7b 	bl	8000bec <_ZnwjPv>
 80022f6:	2800      	cmp	r0, #0
 80022f8:	d004      	beq.n	8002304 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama7TextureENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x74>
 80022fa:	462b      	mov	r3, r5
 80022fc:	4622      	mov	r2, r4
 80022fe:	68b9      	ldr	r1, [r7, #8]
 8002300:	f000 f980 	bl	8002604 <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>
 8002304:	f107 0320 	add.w	r3, r7, #32
 8002308:	4618      	mov	r0, r3
 800230a:	f7ff fdb2 	bl	8001e72 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	      _M_pi = __mem;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002312:	601a      	str	r2, [r3, #0]
	      __guard = nullptr;
 8002314:	f107 0314 	add.w	r3, r7, #20
 8002318:	2100      	movs	r1, #0
 800231a:	4618      	mov	r0, r3
 800231c:	f000 f9a0 	bl	8002660 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>
	      auto __guard = std::__allocate_guarded(__a2);
 8002320:	f107 0314 	add.w	r3, r7, #20
 8002324:	4618      	mov	r0, r3
 8002326:	f000 f91f 	bl	8002568 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 800232a:	f107 031c 	add.w	r3, r7, #28
 800232e:	4618      	mov	r0, r3
 8002330:	f000 f8fb 	bl	800252a <_ZNSaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
	}
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	4618      	mov	r0, r3
 8002338:	3728      	adds	r7, #40	; 0x28
 800233a:	46bd      	mov	sp, r7
 800233c:	bdb0      	pop	{r4, r5, r7, pc}

0800233e <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	    __base->_M_weak_assign(const_cast<_Yp2*>(__p), _M_refcount);
	}

      template<typename _Yp, typename _Yp2 = typename remove_cv<_Yp>::type>
	typename enable_if<!__has_esft_base<_Yp2>::value>::type
	_M_enable_shared_from_this_with(_Yp*) noexcept
 800233e:	b480      	push	{r7}
 8002340:	b083      	sub	sp, #12
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]
 8002346:	6039      	str	r1, [r7, #0]
	{ }
 8002348:	bf00      	nop
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <_ZNSt11_Tuple_implILj0EJPN4tama13TextureLoaderESt14default_deleteIS1_EEE7_M_headERS5_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	4618      	mov	r0, r3
 8002360:	f000 f9ad 	bl	80026be <_ZNSt10_Head_baseILj0EPN4tama13TextureLoaderELb0EE7_M_headERS3_>
 8002364:	4603      	mov	r3, r0
 8002366:	4618      	mov	r0, r3
 8002368:	3708      	adds	r7, #8
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}

0800236e <_ZSt12__get_helperILj1ESt14default_deleteIN4tama13TextureLoaderEEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800236e:	b580      	push	{r7, lr}
 8002370:	b082      	sub	sp, #8
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f000 f9ac 	bl	80026d4 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN4tama13TextureLoaderEEEE7_M_headERS4_>
 800237c:	4603      	mov	r3, r0
 800237e:	4618      	mov	r0, r3
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}

08002386 <_ZNSt11_Tuple_implILj0EJPN4tama18Stm32TextureLoaderESt14default_deleteIS1_EEEC1Ev>:
      constexpr _Tuple_impl()
 8002386:	b580      	push	{r7, lr}
 8002388:	b082      	sub	sp, #8
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f000 f9ac 	bl	80026ec <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN4tama18Stm32TextureLoaderEEEEC1Ev>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	4618      	mov	r0, r3
 8002398:	f000 f9b4 	bl	8002704 <_ZNSt10_Head_baseILj0EPN4tama18Stm32TextureLoaderELb0EEC1Ev>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	4618      	mov	r0, r3
 80023a0:	3708      	adds	r7, #8
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}

080023a6 <_ZNSt11_Tuple_implILj0EJPN4tama18Stm32TextureLoaderESt14default_deleteIS1_EEE7_M_headERS5_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80023a6:	b580      	push	{r7, lr}
 80023a8:	b082      	sub	sp, #8
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	6078      	str	r0, [r7, #4]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4618      	mov	r0, r3
 80023b2:	f000 f9b5 	bl	8002720 <_ZNSt10_Head_baseILj0EPN4tama18Stm32TextureLoaderELb0EE7_M_headERS3_>
 80023b6:	4603      	mov	r3, r0
 80023b8:	4618      	mov	r0, r3
 80023ba:	3708      	adds	r7, #8
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}

080023c0 <_ZSt12__get_helperILj1ESt14default_deleteIN4tama18Stm32TextureLoaderEEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f000 f9b4 	bl	8002736 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN4tama18Stm32TextureLoaderEEEE7_M_headERS4_>
 80023ce:	4603      	mov	r3, r0
 80023d0:	4618      	mov	r0, r3
 80023d2:	3708      	adds	r7, #8
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <_ZSt3getILj0EJPN4tama18Stm32TextureLoaderESt14default_deleteIS1_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_>:
    get(const tuple<_Elements...>& __t) noexcept
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	4618      	mov	r0, r3
 80023e4:	f000 f9b3 	bl	800274e <_ZSt12__get_helperILj0EPN4tama18Stm32TextureLoaderEJSt14default_deleteIS1_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE>
 80023e8:	4603      	mov	r3, r0
 80023ea:	4618      	mov	r0, r3
 80023ec:	3708      	adds	r7, #8
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}

080023f2 <_ZSt12__get_helperILj0EPN4tama13TextureLoaderEJSt14default_deleteIS1_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80023f2:	b580      	push	{r7, lr}
 80023f4:	b082      	sub	sp, #8
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f000 f9b3 	bl	8002766 <_ZNSt11_Tuple_implILj0EJPN4tama13TextureLoaderESt14default_deleteIS1_EEE7_M_headERKS5_>
 8002400:	4603      	mov	r3, r0
 8002402:	4618      	mov	r0, r3
 8002404:	3708      	adds	r7, #8
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}

0800240a <_ZNSt16allocator_traitsISaIN4tama7TextureEEE9constructIS1_JiiEEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 800240a:	b590      	push	{r4, r7, lr}
 800240c:	b085      	sub	sp, #20
 800240e:	af00      	add	r7, sp, #0
 8002410:	60f8      	str	r0, [r7, #12]
 8002412:	60b9      	str	r1, [r7, #8]
 8002414:	607a      	str	r2, [r7, #4]
 8002416:	603b      	str	r3, [r7, #0]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f7ff fa11 	bl	8001840 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 800241e:	4604      	mov	r4, r0
 8002420:	6838      	ldr	r0, [r7, #0]
 8002422:	f7ff fa0d 	bl	8001840 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 8002426:	4603      	mov	r3, r0
 8002428:	4622      	mov	r2, r4
 800242a:	68b9      	ldr	r1, [r7, #8]
 800242c:	68f8      	ldr	r0, [r7, #12]
 800242e:	f000 f9a7 	bl	8002780 <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEE9constructIS2_JiiEEEvPT_DpOT0_>
 8002432:	bf00      	nop
 8002434:	3714      	adds	r7, #20
 8002436:	46bd      	mov	sp, r7
 8002438:	bd90      	pop	{r4, r7, pc}

0800243a <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEEC1ERKS3_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 800243a:	b480      	push	{r7}
 800243c:	b083      	sub	sp, #12
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
 8002442:	6039      	str	r1, [r7, #0]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	4618      	mov	r0, r3
 8002448:	370c      	adds	r7, #12
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr

08002452 <_ZNSt16allocator_traitsISaIN4tama7TextureEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8002452:	b580      	push	{r7, lr}
 8002454:	b082      	sub	sp, #8
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
 800245a:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800245c:	2200      	movs	r2, #0
 800245e:	6839      	ldr	r1, [r7, #0]
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f000 f9b1 	bl	80027c8 <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEE8allocateEjPKv>
 8002466:	4603      	mov	r3, r0
 8002468:	4618      	mov	r0, r3
 800246a:	3708      	adds	r7, #8
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}

08002470 <_ZNSt15__allocated_ptrISaIN4tama7TextureEEEC1ERS2_PS1_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	60b9      	str	r1, [r7, #8]
 800247a:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 800247c:	68b8      	ldr	r0, [r7, #8]
 800247e:	f000 f9c1 	bl	8002804 <_ZSt11__addressofISaIN4tama7TextureEEEPT_RS3_>
 8002482:	4602      	mov	r2, r0
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	601a      	str	r2, [r3, #0]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	605a      	str	r2, [r3, #4]
      { }
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	4618      	mov	r0, r3
 8002492:	3710      	adds	r7, #16
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}

08002498 <_ZNSt16allocator_traitsISaIN4tama7TextureEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8002498:	b580      	push	{r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0
 800249e:	60f8      	str	r0, [r7, #12]
 80024a0:	60b9      	str	r1, [r7, #8]
 80024a2:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80024a4:	687a      	ldr	r2, [r7, #4]
 80024a6:	68b9      	ldr	r1, [r7, #8]
 80024a8:	68f8      	ldr	r0, [r7, #12]
 80024aa:	f000 f9b6 	bl	800281a <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEE10deallocateEPS2_j>
 80024ae:	bf00      	nop
 80024b0:	3710      	adds	r7, #16
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}

080024b6 <_ZNSt15__allocated_ptrISaIN4tama7TextureEEE10_S_raw_ptrEPS1_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 80024b6:	b480      	push	{r7}
 80024b8:	b083      	sub	sp, #12
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	6078      	str	r0, [r7, #4]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4618      	mov	r0, r3
 80024c2:	370c      	adds	r7, #12
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr

080024cc <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEE9constructIS2_JRjS5_EEEvPT_DpOT0_>:
      { return size_t(-1) / sizeof(_Tp); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 80024cc:	b5b0      	push	{r4, r5, r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	60b9      	str	r1, [r7, #8]
 80024d6:	607a      	str	r2, [r7, #4]
 80024d8:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f7ff f8c5 	bl	800166a <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>
 80024e0:	4603      	mov	r3, r0
 80024e2:	681c      	ldr	r4, [r3, #0]
 80024e4:	6838      	ldr	r0, [r7, #0]
 80024e6:	f7ff f8c0 	bl	800166a <_ZSt7forwardIRjEOT_RNSt16remove_referenceIS1_E4typeE>
 80024ea:	4603      	mov	r3, r0
 80024ec:	681d      	ldr	r5, [r3, #0]
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	4619      	mov	r1, r3
 80024f2:	2010      	movs	r0, #16
 80024f4:	f7fe fb7a 	bl	8000bec <_ZnwjPv>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d004      	beq.n	8002508 <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEE9constructIS2_JRjS5_EEEvPT_DpOT0_+0x3c>
 80024fe:	462a      	mov	r2, r5
 8002500:	4621      	mov	r1, r4
 8002502:	4618      	mov	r0, r3
 8002504:	f7fe fb7e 	bl	8000c04 <_ZN4tama7TextureC1Ejj>
 8002508:	bf00      	nop
 800250a:	3710      	adds	r7, #16
 800250c:	46bd      	mov	sp, r7
 800250e:	bdb0      	pop	{r4, r5, r7, pc}

08002510 <_ZNSaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) throw() { }
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	6039      	str	r1, [r7, #0]
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f000 f98a 	bl	8002834 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	4618      	mov	r0, r3
 8002524:	3708      	adds	r7, #8
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}

0800252a <_ZNSaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>:
      ~allocator() throw() { }
 800252a:	b580      	push	{r7, lr}
 800252c:	b082      	sub	sp, #8
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f000 f989 	bl	800284a <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	4618      	mov	r0, r3
 800253c:	3708      	adds	r7, #8
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}

08002542 <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>:
    __allocate_guarded(_Alloc& __a)
 8002542:	b580      	push	{r7, lr}
 8002544:	b082      	sub	sp, #8
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]
 800254a:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 800254c:	2101      	movs	r1, #1
 800254e:	6838      	ldr	r0, [r7, #0]
 8002550:	f000 f986 	bl	8002860 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>
 8002554:	4603      	mov	r3, r0
 8002556:	461a      	mov	r2, r3
 8002558:	6839      	ldr	r1, [r7, #0]
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f000 f98f 	bl	800287e <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
    }
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	3708      	adds	r7, #8
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}

08002568 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>:
      ~__allocated_ptr()
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d007      	beq.n	8002588 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6818      	ldr	r0, [r3, #0]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	2201      	movs	r2, #1
 8002582:	4619      	mov	r1, r3
 8002584:	f000 f98f 	bl	80028a6 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>
      }
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	4618      	mov	r0, r3
 800258c:	3708      	adds	r7, #8
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}

08002592 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 8002592:	b580      	push	{r7, lr}
 8002594:	b082      	sub	sp, #8
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	4618      	mov	r0, r3
 80025a0:	f000 f990 	bl	80028c4 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>
 80025a4:	4603      	mov	r3, r0
 80025a6:	4618      	mov	r0, r3
 80025a8:	3708      	adds	r7, #8
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}

080025ae <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, false>
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b082      	sub	sp, #8
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	6078      	str	r0, [r7, #4]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7ff fc5a 	bl	8001e72 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4618      	mov	r0, r3
 80025c2:	3708      	adds	r7, #8
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama7TextureEELb1EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, true> : private _Tp
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f7ff f9d3 	bl	800197c <_ZNSaIN4tama7TextureEED1Ev>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4618      	mov	r0, r3
 80025da:	3708      	adds	r7, #8
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}

080025e0 <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>:
      class _Impl : _Sp_ebo_helper<0, _Deleter>, _Sp_ebo_helper<1, _Alloc>
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	3301      	adds	r3, #1
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7ff ffeb 	bl	80025c8 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama7TextureEELb1EED1Ev>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7ff ffda 	bl	80025ae <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4618      	mov	r0, r3
 80025fe:	3708      	adds	r7, #8
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}

08002604 <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>:
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 8002604:	b590      	push	{r4, r7, lr}
 8002606:	b087      	sub	sp, #28
 8002608:	af00      	add	r7, sp, #0
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	60b9      	str	r1, [r7, #8]
 800260e:	607a      	str	r2, [r7, #4]
 8002610:	603b      	str	r3, [r7, #0]
      : _M_impl(__p, std::move(__d), __a) { }
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	4618      	mov	r0, r3
 8002616:	f000 f961 	bl	80028dc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 800261a:	4a10      	ldr	r2, [pc, #64]	; (800265c <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_+0x58>)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	601a      	str	r2, [r3, #0]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f103 040c 	add.w	r4, r3, #12
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f7ff fe0c 	bl	8002244 <_ZSt4moveIRNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 800262c:	4602      	mov	r2, r0
 800262e:	f107 0314 	add.w	r3, r7, #20
 8002632:	4611      	mov	r1, r2
 8002634:	4618      	mov	r0, r3
 8002636:	f7ff fe10 	bl	800225a <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 800263a:	f107 0214 	add.w	r2, r7, #20
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	68b9      	ldr	r1, [r7, #8]
 8002642:	4620      	mov	r0, r4
 8002644:	f000 f960 	bl	8002908 <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>
 8002648:	f107 0314 	add.w	r3, r7, #20
 800264c:	4618      	mov	r0, r3
 800264e:	f7ff fc10 	bl	8001e72 <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	4618      	mov	r0, r3
 8002656:	371c      	adds	r7, #28
 8002658:	46bd      	mov	sp, r7
 800265a:	bd90      	pop	{r4, r7, pc}
 800265c:	080115fc 	.word	0x080115fc

08002660 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	605a      	str	r2, [r3, #4]
	return *this;
 8002670:	687b      	ldr	r3, [r7, #4]
      }
 8002672:	4618      	mov	r0, r3
 8002674:	370c      	adds	r7, #12
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr

0800267e <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>:
          void operator()(typename _Alloc::value_type* __ptr)
 800267e:	b590      	push	{r4, r7, lr}
 8002680:	b085      	sub	sp, #20
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
 8002686:	6039      	str	r1, [r7, #0]
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 8002688:	6879      	ldr	r1, [r7, #4]
 800268a:	f107 0308 	add.w	r3, r7, #8
 800268e:	683a      	ldr	r2, [r7, #0]
 8002690:	4618      	mov	r0, r3
 8002692:	f7ff feed 	bl	8002470 <_ZNSt15__allocated_ptrISaIN4tama7TextureEEEC1ERS2_PS1_>
	    allocator_traits<_Alloc>::destroy(_M_alloc, __guard.get());
 8002696:	687c      	ldr	r4, [r7, #4]
 8002698:	f107 0308 	add.w	r3, r7, #8
 800269c:	4618      	mov	r0, r3
 800269e:	f7ff fd9c 	bl	80021da <_ZNSt15__allocated_ptrISaIN4tama7TextureEEE3getEv>
 80026a2:	4603      	mov	r3, r0
 80026a4:	4619      	mov	r1, r3
 80026a6:	4620      	mov	r0, r4
 80026a8:	f000 f94c 	bl	8002944 <_ZNSt16allocator_traitsISaIN4tama7TextureEEE7destroyIS1_EEvRS2_PT_>
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 80026ac:	f107 0308 	add.w	r3, r7, #8
 80026b0:	4618      	mov	r0, r3
 80026b2:	f7ff fd7d 	bl	80021b0 <_ZNSt15__allocated_ptrISaIN4tama7TextureEEED1Ev>
          }
 80026b6:	bf00      	nop
 80026b8:	3714      	adds	r7, #20
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd90      	pop	{r4, r7, pc}

080026be <_ZNSt10_Head_baseILj0EPN4tama13TextureLoaderELb0EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80026be:	b480      	push	{r7}
 80026c0:	b083      	sub	sp, #12
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4618      	mov	r0, r3
 80026ca:	370c      	adds	r7, #12
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr

080026d4 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN4tama13TextureLoaderEEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f000 f93e 	bl	800295e <_ZNSt10_Head_baseILj1ESt14default_deleteIN4tama13TextureLoaderEELb1EE7_M_headERS4_>
 80026e2:	4603      	mov	r3, r0
 80026e4:	4618      	mov	r0, r3
 80026e6:	3708      	adds	r7, #8
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}

080026ec <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN4tama18Stm32TextureLoaderEEEEC1Ev>:
      constexpr _Tuple_impl()
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
      : _Base() { }
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f000 f93d 	bl	8002974 <_ZNSt10_Head_baseILj1ESt14default_deleteIN4tama18Stm32TextureLoaderEELb1EEC1Ev>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4618      	mov	r0, r3
 80026fe:	3708      	adds	r7, #8
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <_ZNSt10_Head_baseILj0EPN4tama18Stm32TextureLoaderELb0EEC1Ev>:
      constexpr _Head_base()
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2200      	movs	r2, #0
 8002710:	601a      	str	r2, [r3, #0]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4618      	mov	r0, r3
 8002716:	370c      	adds	r7, #12
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr

08002720 <_ZNSt10_Head_baseILj0EPN4tama18Stm32TextureLoaderELb0EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	4618      	mov	r0, r3
 800272c:	370c      	adds	r7, #12
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr

08002736 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN4tama18Stm32TextureLoaderEEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8002736:	b580      	push	{r7, lr}
 8002738:	b082      	sub	sp, #8
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f000 f923 	bl	800298a <_ZNSt10_Head_baseILj1ESt14default_deleteIN4tama18Stm32TextureLoaderEELb1EE7_M_headERS4_>
 8002744:	4603      	mov	r3, r0
 8002746:	4618      	mov	r0, r3
 8002748:	3708      	adds	r7, #8
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}

0800274e <_ZSt12__get_helperILj0EPN4tama18Stm32TextureLoaderEJSt14default_deleteIS1_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800274e:	b580      	push	{r7, lr}
 8002750:	b082      	sub	sp, #8
 8002752:	af00      	add	r7, sp, #0
 8002754:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f000 f922 	bl	80029a0 <_ZNSt11_Tuple_implILj0EJPN4tama18Stm32TextureLoaderESt14default_deleteIS1_EEE7_M_headERKS5_>
 800275c:	4603      	mov	r3, r0
 800275e:	4618      	mov	r0, r3
 8002760:	3708      	adds	r7, #8
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}

08002766 <_ZNSt11_Tuple_implILj0EJPN4tama13TextureLoaderESt14default_deleteIS1_EEE7_M_headERKS5_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8002766:	b580      	push	{r7, lr}
 8002768:	b082      	sub	sp, #8
 800276a:	af00      	add	r7, sp, #0
 800276c:	6078      	str	r0, [r7, #4]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4618      	mov	r0, r3
 8002772:	f000 f922 	bl	80029ba <_ZNSt10_Head_baseILj0EPN4tama13TextureLoaderELb0EE7_M_headERKS3_>
 8002776:	4603      	mov	r3, r0
 8002778:	4618      	mov	r0, r3
 800277a:	3708      	adds	r7, #8
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}

08002780 <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEE9constructIS2_JiiEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8002780:	b5b0      	push	{r4, r5, r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	60f8      	str	r0, [r7, #12]
 8002788:	60b9      	str	r1, [r7, #8]
 800278a:	607a      	str	r2, [r7, #4]
 800278c:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f7ff f856 	bl	8001840 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 8002794:	4603      	mov	r3, r0
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	461c      	mov	r4, r3
 800279a:	6838      	ldr	r0, [r7, #0]
 800279c:	f7ff f850 	bl	8001840 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 80027a0:	4603      	mov	r3, r0
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	461d      	mov	r5, r3
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	4619      	mov	r1, r3
 80027aa:	2010      	movs	r0, #16
 80027ac:	f7fe fa1e 	bl	8000bec <_ZnwjPv>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d004      	beq.n	80027c0 <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEE9constructIS2_JiiEEEvPT_DpOT0_+0x40>
 80027b6:	462a      	mov	r2, r5
 80027b8:	4621      	mov	r1, r4
 80027ba:	4618      	mov	r0, r3
 80027bc:	f7fe fa22 	bl	8000c04 <_ZN4tama7TextureC1Ejj>
 80027c0:	bf00      	nop
 80027c2:	3710      	adds	r7, #16
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bdb0      	pop	{r4, r5, r7, pc}

080027c8 <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	60b9      	str	r1, [r7, #8]
 80027d2:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 80027d4:	68f8      	ldr	r0, [r7, #12]
 80027d6:	f000 f8fb 	bl	80029d0 <_ZNK9__gnu_cxx13new_allocatorIN4tama7TextureEE8max_sizeEv>
 80027da:	4602      	mov	r2, r0
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	4293      	cmp	r3, r2
 80027e0:	bf8c      	ite	hi
 80027e2:	2301      	movhi	r3, #1
 80027e4:	2300      	movls	r3, #0
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d001      	beq.n	80027f0 <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80027ec:	f00d fe49 	bl	8010482 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	011b      	lsls	r3, r3, #4
 80027f4:	4618      	mov	r0, r3
 80027f6:	f00d fe16 	bl	8010426 <_Znwj>
 80027fa:	4603      	mov	r3, r0
      }
 80027fc:	4618      	mov	r0, r3
 80027fe:	3710      	adds	r7, #16
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}

08002804 <_ZSt11__addressofISaIN4tama7TextureEEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	4618      	mov	r0, r3
 8002810:	370c      	adds	r7, #12
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr

0800281a <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 800281a:	b580      	push	{r7, lr}
 800281c:	b084      	sub	sp, #16
 800281e:	af00      	add	r7, sp, #0
 8002820:	60f8      	str	r0, [r7, #12]
 8002822:	60b9      	str	r1, [r7, #8]
 8002824:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8002826:	68b8      	ldr	r0, [r7, #8]
 8002828:	f00d fe16 	bl	8010458 <_ZdlPv>
      }
 800282c:	bf00      	nop
 800282e:	3710      	adds	r7, #16
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}

08002834 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	4618      	mov	r0, r3
 8002840:	370c      	adds	r7, #12
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr

0800284a <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800284a:	b480      	push	{r7}
 800284c:	b083      	sub	sp, #12
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4618      	mov	r0, r3
 8002856:	370c      	adds	r7, #12
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr

08002860 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>:
      allocate(allocator_type& __a, size_type __n)
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800286a:	2200      	movs	r2, #0
 800286c:	6839      	ldr	r1, [r7, #0]
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f000 f8ba 	bl	80029e8 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>
 8002874:	4603      	mov	r3, r0
 8002876:	4618      	mov	r0, r3
 8002878:	3708      	adds	r7, #8
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}

0800287e <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 800287e:	b580      	push	{r7, lr}
 8002880:	b084      	sub	sp, #16
 8002882:	af00      	add	r7, sp, #0
 8002884:	60f8      	str	r0, [r7, #12]
 8002886:	60b9      	str	r1, [r7, #8]
 8002888:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 800288a:	68b8      	ldr	r0, [r7, #8]
 800288c:	f000 f8cd 	bl	8002a2a <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>
 8002890:	4602      	mov	r2, r0
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	601a      	str	r2, [r3, #0]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	605a      	str	r2, [r3, #4]
      { }
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	4618      	mov	r0, r3
 80028a0:	3710      	adds	r7, #16
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}

080028a6 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80028a6:	b580      	push	{r7, lr}
 80028a8:	b084      	sub	sp, #16
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	60f8      	str	r0, [r7, #12]
 80028ae:	60b9      	str	r1, [r7, #8]
 80028b0:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	68b9      	ldr	r1, [r7, #8]
 80028b6:	68f8      	ldr	r0, [r7, #12]
 80028b8:	f000 f8c2 	bl	8002a40 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>
 80028bc:	bf00      	nop
 80028be:	3710      	adds	r7, #16
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	4618      	mov	r0, r3
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
	...

080028dc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      _Sp_counted_base() noexcept
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
      : _M_use_count(1), _M_weak_count(1) { }
 80028e4:	4a07      	ldr	r2, [pc, #28]	; (8002904 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev+0x28>)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	601a      	str	r2, [r3, #0]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2201      	movs	r2, #1
 80028ee:	605a      	str	r2, [r3, #4]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	609a      	str	r2, [r3, #8]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4618      	mov	r0, r3
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr
 8002904:	08011660 	.word	0x08011660

08002908 <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 8002908:	b590      	push	{r4, r7, lr}
 800290a:	b085      	sub	sp, #20
 800290c:	af00      	add	r7, sp, #0
 800290e:	60f8      	str	r0, [r7, #12]
 8002910:	60b9      	str	r1, [r7, #8]
 8002912:	607a      	str	r2, [r7, #4]
 8002914:	603b      	str	r3, [r7, #0]
	: _M_ptr(__p), _Del_base(std::move(__d)), _Alloc_base(__a)
 8002916:	68fc      	ldr	r4, [r7, #12]
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	f7ff fc93 	bl	8002244 <_ZSt4moveIRNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 800291e:	4603      	mov	r3, r0
 8002920:	4619      	mov	r1, r3
 8002922:	4620      	mov	r0, r4
 8002924:	f000 f899 	bl	8002a5a <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	3301      	adds	r3, #1
 800292c:	6839      	ldr	r1, [r7, #0]
 800292e:	4618      	mov	r0, r3
 8002930:	f000 f8a6 	bl	8002a80 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama7TextureEELb1EEC1ERKS2_>
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	68ba      	ldr	r2, [r7, #8]
 8002938:	605a      	str	r2, [r3, #4]
	{ }
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	4618      	mov	r0, r3
 800293e:	3714      	adds	r7, #20
 8002940:	46bd      	mov	sp, r7
 8002942:	bd90      	pop	{r4, r7, pc}

08002944 <_ZNSt16allocator_traitsISaIN4tama7TextureEEE7destroyIS1_EEvRS2_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static void
	destroy(allocator_type& __a, _Up* __p)
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 800294e:	6839      	ldr	r1, [r7, #0]
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f000 f8a3 	bl	8002a9c <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEE7destroyIS2_EEvPT_>
 8002956:	bf00      	nop
 8002958:	3708      	adds	r7, #8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}

0800295e <_ZNSt10_Head_baseILj1ESt14default_deleteIN4tama13TextureLoaderEELb1EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b; }
 800295e:	b480      	push	{r7}
 8002960:	b083      	sub	sp, #12
 8002962:	af00      	add	r7, sp, #0
 8002964:	6078      	str	r0, [r7, #4]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4618      	mov	r0, r3
 800296a:	370c      	adds	r7, #12
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <_ZNSt10_Head_baseILj1ESt14default_deleteIN4tama18Stm32TextureLoaderEELb1EEC1Ev>:
      constexpr _Head_base()
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
      : _Head() { }
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	4618      	mov	r0, r3
 8002980:	370c      	adds	r7, #12
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr

0800298a <_ZNSt10_Head_baseILj1ESt14default_deleteIN4tama18Stm32TextureLoaderEELb1EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b; }
 800298a:	b480      	push	{r7}
 800298c:	b083      	sub	sp, #12
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4618      	mov	r0, r3
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr

080029a0 <_ZNSt11_Tuple_implILj0EJPN4tama18Stm32TextureLoaderESt14default_deleteIS1_EEE7_M_headERKS5_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	4618      	mov	r0, r3
 80029ac:	f000 f884 	bl	8002ab8 <_ZNSt10_Head_baseILj0EPN4tama18Stm32TextureLoaderELb0EE7_M_headERKS3_>
 80029b0:	4603      	mov	r3, r0
 80029b2:	4618      	mov	r0, r3
 80029b4:	3708      	adds	r7, #8
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}

080029ba <_ZNSt10_Head_baseILj0EPN4tama13TextureLoaderELb0EE7_M_headERKS3_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 80029ba:	b480      	push	{r7}
 80029bc:	b083      	sub	sp, #12
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4618      	mov	r0, r3
 80029c6:	370c      	adds	r7, #12
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr

080029d0 <_ZNK9__gnu_cxx13new_allocatorIN4tama7TextureEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 80029d8:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 80029dc:	4618      	mov	r0, r3
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr

080029e8 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 80029f4:	68f8      	ldr	r0, [r7, #12]
 80029f6:	f000 f86b 	bl	8002ad0 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>
 80029fa:	4602      	mov	r2, r0
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	4293      	cmp	r3, r2
 8002a00:	bf8c      	ite	hi
 8002a02:	2301      	movhi	r3, #1
 8002a04:	2300      	movls	r3, #0
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d001      	beq.n	8002a10 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8002a0c:	f00d fd39 	bl	8010482 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8002a10:	68ba      	ldr	r2, [r7, #8]
 8002a12:	4613      	mov	r3, r2
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	4413      	add	r3, r2
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f00d fd03 	bl	8010426 <_Znwj>
 8002a20:	4603      	mov	r3, r0
      }
 8002a22:	4618      	mov	r0, r3
 8002a24:	3710      	adds	r7, #16
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}

08002a2a <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8002a2a:	b480      	push	{r7}
 8002a2c:	b083      	sub	sp, #12
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4618      	mov	r0, r3
 8002a36:	370c      	adds	r7, #12
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr

08002a40 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>:
      deallocate(pointer __p, size_type)
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8002a4c:	68b8      	ldr	r0, [r7, #8]
 8002a4e:	f00d fd03 	bl	8010458 <_ZdlPv>
      }
 8002a52:	bf00      	nop
 8002a54:	3710      	adds	r7, #16
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}

08002a5a <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>:
      explicit _Sp_ebo_helper(_Tp&& __tp) : _M_tp(std::move(__tp)) { }
 8002a5a:	b590      	push	{r4, r7, lr}
 8002a5c:	b083      	sub	sp, #12
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]
 8002a62:	6039      	str	r1, [r7, #0]
 8002a64:	687c      	ldr	r4, [r7, #4]
 8002a66:	6838      	ldr	r0, [r7, #0]
 8002a68:	f7ff fbec 	bl	8002244 <_ZSt4moveIRNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	4619      	mov	r1, r3
 8002a70:	4620      	mov	r0, r4
 8002a72:	f7ff fbf2 	bl	800225a <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4618      	mov	r0, r3
 8002a7a:	370c      	adds	r7, #12
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd90      	pop	{r4, r7, pc}

08002a80 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama7TextureEELb1EEC1ERKS2_>:
      explicit _Sp_ebo_helper(const _Tp& __tp) : _Tp(__tp) { }
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
 8002a8a:	6839      	ldr	r1, [r7, #0]
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f7ff fb6e 	bl	800216e <_ZNSaIN4tama7TextureEEC1ERKS1_>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4618      	mov	r0, r3
 8002a96:	3708      	adds	r7, #8
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}

08002a9c <_ZN9__gnu_cxx13new_allocatorIN4tama7TextureEE7destroyIS2_EEvPT_>:

      template<typename _Up>
	void
	destroy(_Up* __p) { __p->~_Up(); }
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	6039      	str	r1, [r7, #0]
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	6838      	ldr	r0, [r7, #0]
 8002aae:	4798      	blx	r3
 8002ab0:	bf00      	nop
 8002ab2:	3708      	adds	r7, #8
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <_ZNSt10_Head_baseILj0EPN4tama18Stm32TextureLoaderELb0EE7_M_headERKS3_>:
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	370c      	adds	r7, #12
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
	...

08002ad0 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8002ad8:	4b03      	ldr	r3, [pc, #12]	; (8002ae8 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv+0x18>)
 8002ada:	4618      	mov	r0, r3
 8002adc:	370c      	adds	r7, #12
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop
 8002ae8:	0ccccccc 	.word	0x0ccccccc

08002aec <_Z41__static_initialization_and_destruction_0ii>:
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	6039      	str	r1, [r7, #0]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	f040 80de 	bne.w	8002cba <_Z41__static_initialization_and_destruction_0ii+0x1ce>
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b04:	4293      	cmp	r3, r2
 8002b06:	f040 80d8 	bne.w	8002cba <_Z41__static_initialization_and_destruction_0ii+0x1ce>
                const short X_data[] = {0x00,0x05,0x05,0x05,0x05,0x05,0x00,0x05,0x00,0x05,0x05,0x05,0x00,0x05,0x05,0x05,0x00,0x05,0x00,0x05,0x05,0x05,0x05,0x05,0x00,0x05,0x05,0x05,0x05,0x05,0x00,0x05,0x00,0x05,0x05,0x05,0x00,0x05,0x05,0x05,0x00,0x05,0x00,0x05,0x05,0x05,0x05,0x05,0x00};
                const short Y_data[] = {0x00,0x05,0x05,0x05,0x05,0x05,0x00,0x05,0x00,0x05,0x05,0x05,0x00,0x05,0x05,0x05,0x00,0x05,0x00,0x05,0x05,0x05,0x05,0x05,0x00,0x05,0x05,0x05,0x05,0x05,0x05,0x00,0x05,0x05,0x05,0x05,0x05,0x05,0x00,0x05,0x05,0x05,0x05,0x05,0x05,0x00,0x05,0x05,0x05};
                const short Z_data[] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x05,0x05,0x05,0x05,0x00,0x05,0x05,0x05,0x05,0x05,0x00,0x05,0x05,0x05,0x05,0x05,0x00,0x05,0x05,0x05,0x05,0x05,0x00,0x05,0x05,0x05,0x05,0x05,0x00,0x05,0x05,0x05,0x05,0x05,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
                const short SPC_data[] = {0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05};

                TextureAsset J {const_cast<short *>(J_data), width, height};
 8002b0a:	4b6f      	ldr	r3, [pc, #444]	; (8002cc8 <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a6f      	ldr	r2, [pc, #444]	; (8002ccc <_Z41__static_initialization_and_destruction_0ii+0x1e0>)
 8002b10:	6053      	str	r3, [r2, #4]
 8002b12:	4b6f      	ldr	r3, [pc, #444]	; (8002cd0 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a6d      	ldr	r2, [pc, #436]	; (8002ccc <_Z41__static_initialization_and_destruction_0ii+0x1e0>)
 8002b18:	6093      	str	r3, [r2, #8]
                TextureAsset U {const_cast<short *>(U_data), width, height};
 8002b1a:	4b6b      	ldr	r3, [pc, #428]	; (8002cc8 <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a6d      	ldr	r2, [pc, #436]	; (8002cd4 <_Z41__static_initialization_and_destruction_0ii+0x1e8>)
 8002b20:	6053      	str	r3, [r2, #4]
 8002b22:	4b6b      	ldr	r3, [pc, #428]	; (8002cd0 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a6b      	ldr	r2, [pc, #428]	; (8002cd4 <_Z41__static_initialization_and_destruction_0ii+0x1e8>)
 8002b28:	6093      	str	r3, [r2, #8]
                TextureAsset D {const_cast<short *>(D_data), width, height};
 8002b2a:	4b67      	ldr	r3, [pc, #412]	; (8002cc8 <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a6a      	ldr	r2, [pc, #424]	; (8002cd8 <_Z41__static_initialization_and_destruction_0ii+0x1ec>)
 8002b30:	6053      	str	r3, [r2, #4]
 8002b32:	4b67      	ldr	r3, [pc, #412]	; (8002cd0 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a68      	ldr	r2, [pc, #416]	; (8002cd8 <_Z41__static_initialization_and_destruction_0ii+0x1ec>)
 8002b38:	6093      	str	r3, [r2, #8]
                TextureAsset S {const_cast<short *>(S_data), width, height};
 8002b3a:	4b63      	ldr	r3, [pc, #396]	; (8002cc8 <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a67      	ldr	r2, [pc, #412]	; (8002cdc <_Z41__static_initialization_and_destruction_0ii+0x1f0>)
 8002b40:	6053      	str	r3, [r2, #4]
 8002b42:	4b63      	ldr	r3, [pc, #396]	; (8002cd0 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a65      	ldr	r2, [pc, #404]	; (8002cdc <_Z41__static_initialization_and_destruction_0ii+0x1f0>)
 8002b48:	6093      	str	r3, [r2, #8]
                TextureAsset T {const_cast<short *>(T_data), width, height};
 8002b4a:	4b5f      	ldr	r3, [pc, #380]	; (8002cc8 <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a64      	ldr	r2, [pc, #400]	; (8002ce0 <_Z41__static_initialization_and_destruction_0ii+0x1f4>)
 8002b50:	6053      	str	r3, [r2, #4]
 8002b52:	4b5f      	ldr	r3, [pc, #380]	; (8002cd0 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a62      	ldr	r2, [pc, #392]	; (8002ce0 <_Z41__static_initialization_and_destruction_0ii+0x1f4>)
 8002b58:	6093      	str	r3, [r2, #8]
                TextureAsset I {const_cast<short *>(I_data), width, height};
 8002b5a:	4b5b      	ldr	r3, [pc, #364]	; (8002cc8 <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a61      	ldr	r2, [pc, #388]	; (8002ce4 <_Z41__static_initialization_and_destruction_0ii+0x1f8>)
 8002b60:	6053      	str	r3, [r2, #4]
 8002b62:	4b5b      	ldr	r3, [pc, #364]	; (8002cd0 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a5f      	ldr	r2, [pc, #380]	; (8002ce4 <_Z41__static_initialization_and_destruction_0ii+0x1f8>)
 8002b68:	6093      	str	r3, [r2, #8]
                TextureAsset A {const_cast<short *>(A_data), width, height};
 8002b6a:	4b57      	ldr	r3, [pc, #348]	; (8002cc8 <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a5e      	ldr	r2, [pc, #376]	; (8002ce8 <_Z41__static_initialization_and_destruction_0ii+0x1fc>)
 8002b70:	6053      	str	r3, [r2, #4]
 8002b72:	4b57      	ldr	r3, [pc, #348]	; (8002cd0 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a5c      	ldr	r2, [pc, #368]	; (8002ce8 <_Z41__static_initialization_and_destruction_0ii+0x1fc>)
 8002b78:	6093      	str	r3, [r2, #8]
                TextureAsset B {const_cast<short *>(B_data), width, height};
 8002b7a:	4b53      	ldr	r3, [pc, #332]	; (8002cc8 <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a5b      	ldr	r2, [pc, #364]	; (8002cec <_Z41__static_initialization_and_destruction_0ii+0x200>)
 8002b80:	6053      	str	r3, [r2, #4]
 8002b82:	4b53      	ldr	r3, [pc, #332]	; (8002cd0 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a59      	ldr	r2, [pc, #356]	; (8002cec <_Z41__static_initialization_and_destruction_0ii+0x200>)
 8002b88:	6093      	str	r3, [r2, #8]
                TextureAsset C {const_cast<short *>(C_data), width, height};
 8002b8a:	4b4f      	ldr	r3, [pc, #316]	; (8002cc8 <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a58      	ldr	r2, [pc, #352]	; (8002cf0 <_Z41__static_initialization_and_destruction_0ii+0x204>)
 8002b90:	6053      	str	r3, [r2, #4]
 8002b92:	4b4f      	ldr	r3, [pc, #316]	; (8002cd0 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a56      	ldr	r2, [pc, #344]	; (8002cf0 <_Z41__static_initialization_and_destruction_0ii+0x204>)
 8002b98:	6093      	str	r3, [r2, #8]
                TextureAsset E {const_cast<short *>(E_data), width, height};
 8002b9a:	4b4b      	ldr	r3, [pc, #300]	; (8002cc8 <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a55      	ldr	r2, [pc, #340]	; (8002cf4 <_Z41__static_initialization_and_destruction_0ii+0x208>)
 8002ba0:	6053      	str	r3, [r2, #4]
 8002ba2:	4b4b      	ldr	r3, [pc, #300]	; (8002cd0 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a53      	ldr	r2, [pc, #332]	; (8002cf4 <_Z41__static_initialization_and_destruction_0ii+0x208>)
 8002ba8:	6093      	str	r3, [r2, #8]
                TextureAsset F {const_cast<short *>(F_data), width, height};
 8002baa:	4b47      	ldr	r3, [pc, #284]	; (8002cc8 <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a52      	ldr	r2, [pc, #328]	; (8002cf8 <_Z41__static_initialization_and_destruction_0ii+0x20c>)
 8002bb0:	6053      	str	r3, [r2, #4]
 8002bb2:	4b47      	ldr	r3, [pc, #284]	; (8002cd0 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a50      	ldr	r2, [pc, #320]	; (8002cf8 <_Z41__static_initialization_and_destruction_0ii+0x20c>)
 8002bb8:	6093      	str	r3, [r2, #8]
                TextureAsset G {const_cast<short *>(G_data), width, height};
 8002bba:	4b43      	ldr	r3, [pc, #268]	; (8002cc8 <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a4f      	ldr	r2, [pc, #316]	; (8002cfc <_Z41__static_initialization_and_destruction_0ii+0x210>)
 8002bc0:	6053      	str	r3, [r2, #4]
 8002bc2:	4b43      	ldr	r3, [pc, #268]	; (8002cd0 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a4d      	ldr	r2, [pc, #308]	; (8002cfc <_Z41__static_initialization_and_destruction_0ii+0x210>)
 8002bc8:	6093      	str	r3, [r2, #8]
                TextureAsset H {const_cast<short *>(H_data), width, height};
 8002bca:	4b3f      	ldr	r3, [pc, #252]	; (8002cc8 <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a4c      	ldr	r2, [pc, #304]	; (8002d00 <_Z41__static_initialization_and_destruction_0ii+0x214>)
 8002bd0:	6053      	str	r3, [r2, #4]
 8002bd2:	4b3f      	ldr	r3, [pc, #252]	; (8002cd0 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a4a      	ldr	r2, [pc, #296]	; (8002d00 <_Z41__static_initialization_and_destruction_0ii+0x214>)
 8002bd8:	6093      	str	r3, [r2, #8]
                TextureAsset K {const_cast<short *>(K_data), width, height};
 8002bda:	4b3b      	ldr	r3, [pc, #236]	; (8002cc8 <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a49      	ldr	r2, [pc, #292]	; (8002d04 <_Z41__static_initialization_and_destruction_0ii+0x218>)
 8002be0:	6053      	str	r3, [r2, #4]
 8002be2:	4b3b      	ldr	r3, [pc, #236]	; (8002cd0 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a47      	ldr	r2, [pc, #284]	; (8002d04 <_Z41__static_initialization_and_destruction_0ii+0x218>)
 8002be8:	6093      	str	r3, [r2, #8]
                TextureAsset L {const_cast<short *>(L_data), width, height};
 8002bea:	4b37      	ldr	r3, [pc, #220]	; (8002cc8 <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a46      	ldr	r2, [pc, #280]	; (8002d08 <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 8002bf0:	6053      	str	r3, [r2, #4]
 8002bf2:	4b37      	ldr	r3, [pc, #220]	; (8002cd0 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a44      	ldr	r2, [pc, #272]	; (8002d08 <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 8002bf8:	6093      	str	r3, [r2, #8]
                TextureAsset M {const_cast<short *>(M_data), width, height};
 8002bfa:	4b33      	ldr	r3, [pc, #204]	; (8002cc8 <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a43      	ldr	r2, [pc, #268]	; (8002d0c <_Z41__static_initialization_and_destruction_0ii+0x220>)
 8002c00:	6053      	str	r3, [r2, #4]
 8002c02:	4b33      	ldr	r3, [pc, #204]	; (8002cd0 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a41      	ldr	r2, [pc, #260]	; (8002d0c <_Z41__static_initialization_and_destruction_0ii+0x220>)
 8002c08:	6093      	str	r3, [r2, #8]
                TextureAsset N {const_cast<short *>(N_data), width, height};
 8002c0a:	4b2f      	ldr	r3, [pc, #188]	; (8002cc8 <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a40      	ldr	r2, [pc, #256]	; (8002d10 <_Z41__static_initialization_and_destruction_0ii+0x224>)
 8002c10:	6053      	str	r3, [r2, #4]
 8002c12:	4b2f      	ldr	r3, [pc, #188]	; (8002cd0 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a3e      	ldr	r2, [pc, #248]	; (8002d10 <_Z41__static_initialization_and_destruction_0ii+0x224>)
 8002c18:	6093      	str	r3, [r2, #8]
                TextureAsset O {const_cast<short *>(O_data), width, height};
 8002c1a:	4b2b      	ldr	r3, [pc, #172]	; (8002cc8 <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a3d      	ldr	r2, [pc, #244]	; (8002d14 <_Z41__static_initialization_and_destruction_0ii+0x228>)
 8002c20:	6053      	str	r3, [r2, #4]
 8002c22:	4b2b      	ldr	r3, [pc, #172]	; (8002cd0 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a3b      	ldr	r2, [pc, #236]	; (8002d14 <_Z41__static_initialization_and_destruction_0ii+0x228>)
 8002c28:	6093      	str	r3, [r2, #8]
                TextureAsset P {const_cast<short *>(P_data), width, height};
 8002c2a:	4b27      	ldr	r3, [pc, #156]	; (8002cc8 <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a3a      	ldr	r2, [pc, #232]	; (8002d18 <_Z41__static_initialization_and_destruction_0ii+0x22c>)
 8002c30:	6053      	str	r3, [r2, #4]
 8002c32:	4b27      	ldr	r3, [pc, #156]	; (8002cd0 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a38      	ldr	r2, [pc, #224]	; (8002d18 <_Z41__static_initialization_and_destruction_0ii+0x22c>)
 8002c38:	6093      	str	r3, [r2, #8]
                TextureAsset Q {const_cast<short *>(Q_data), width, height};
 8002c3a:	4b23      	ldr	r3, [pc, #140]	; (8002cc8 <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a37      	ldr	r2, [pc, #220]	; (8002d1c <_Z41__static_initialization_and_destruction_0ii+0x230>)
 8002c40:	6053      	str	r3, [r2, #4]
 8002c42:	4b23      	ldr	r3, [pc, #140]	; (8002cd0 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a35      	ldr	r2, [pc, #212]	; (8002d1c <_Z41__static_initialization_and_destruction_0ii+0x230>)
 8002c48:	6093      	str	r3, [r2, #8]
                TextureAsset R {const_cast<short *>(R_data), width, height};
 8002c4a:	4b1f      	ldr	r3, [pc, #124]	; (8002cc8 <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a34      	ldr	r2, [pc, #208]	; (8002d20 <_Z41__static_initialization_and_destruction_0ii+0x234>)
 8002c50:	6053      	str	r3, [r2, #4]
 8002c52:	4b1f      	ldr	r3, [pc, #124]	; (8002cd0 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a32      	ldr	r2, [pc, #200]	; (8002d20 <_Z41__static_initialization_and_destruction_0ii+0x234>)
 8002c58:	6093      	str	r3, [r2, #8]
                TextureAsset W {const_cast<short *>(W_data), width, height};
 8002c5a:	4b1b      	ldr	r3, [pc, #108]	; (8002cc8 <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a31      	ldr	r2, [pc, #196]	; (8002d24 <_Z41__static_initialization_and_destruction_0ii+0x238>)
 8002c60:	6053      	str	r3, [r2, #4]
 8002c62:	4b1b      	ldr	r3, [pc, #108]	; (8002cd0 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a2f      	ldr	r2, [pc, #188]	; (8002d24 <_Z41__static_initialization_and_destruction_0ii+0x238>)
 8002c68:	6093      	str	r3, [r2, #8]
                TextureAsset V {const_cast<short *>(V_data), width, height};
 8002c6a:	4b17      	ldr	r3, [pc, #92]	; (8002cc8 <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a2e      	ldr	r2, [pc, #184]	; (8002d28 <_Z41__static_initialization_and_destruction_0ii+0x23c>)
 8002c70:	6053      	str	r3, [r2, #4]
 8002c72:	4b17      	ldr	r3, [pc, #92]	; (8002cd0 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a2c      	ldr	r2, [pc, #176]	; (8002d28 <_Z41__static_initialization_and_destruction_0ii+0x23c>)
 8002c78:	6093      	str	r3, [r2, #8]
                TextureAsset X {const_cast<short *>(X_data), width, height};
 8002c7a:	4b13      	ldr	r3, [pc, #76]	; (8002cc8 <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a2b      	ldr	r2, [pc, #172]	; (8002d2c <_Z41__static_initialization_and_destruction_0ii+0x240>)
 8002c80:	6053      	str	r3, [r2, #4]
 8002c82:	4b13      	ldr	r3, [pc, #76]	; (8002cd0 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a29      	ldr	r2, [pc, #164]	; (8002d2c <_Z41__static_initialization_and_destruction_0ii+0x240>)
 8002c88:	6093      	str	r3, [r2, #8]
                TextureAsset Y {const_cast<short *>(Y_data), width, height};
 8002c8a:	4b0f      	ldr	r3, [pc, #60]	; (8002cc8 <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a28      	ldr	r2, [pc, #160]	; (8002d30 <_Z41__static_initialization_and_destruction_0ii+0x244>)
 8002c90:	6053      	str	r3, [r2, #4]
 8002c92:	4b0f      	ldr	r3, [pc, #60]	; (8002cd0 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a26      	ldr	r2, [pc, #152]	; (8002d30 <_Z41__static_initialization_and_destruction_0ii+0x244>)
 8002c98:	6093      	str	r3, [r2, #8]
                TextureAsset Z {const_cast<short *>(Z_data), width, height};
 8002c9a:	4b0b      	ldr	r3, [pc, #44]	; (8002cc8 <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a25      	ldr	r2, [pc, #148]	; (8002d34 <_Z41__static_initialization_and_destruction_0ii+0x248>)
 8002ca0:	6053      	str	r3, [r2, #4]
 8002ca2:	4b0b      	ldr	r3, [pc, #44]	; (8002cd0 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a23      	ldr	r2, [pc, #140]	; (8002d34 <_Z41__static_initialization_and_destruction_0ii+0x248>)
 8002ca8:	6093      	str	r3, [r2, #8]
                TextureAsset SPC {const_cast<short *>(SPC_data), width, height};
 8002caa:	4b07      	ldr	r3, [pc, #28]	; (8002cc8 <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a22      	ldr	r2, [pc, #136]	; (8002d38 <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 8002cb0:	6053      	str	r3, [r2, #4]
 8002cb2:	4b07      	ldr	r3, [pc, #28]	; (8002cd0 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a20      	ldr	r2, [pc, #128]	; (8002d38 <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 8002cb8:	6093      	str	r3, [r2, #8]
 8002cba:	bf00      	nop
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop
 8002cc8:	20000000 	.word	0x20000000
 8002ccc:	20000008 	.word	0x20000008
 8002cd0:	20000004 	.word	0x20000004
 8002cd4:	20000014 	.word	0x20000014
 8002cd8:	20000020 	.word	0x20000020
 8002cdc:	2000002c 	.word	0x2000002c
 8002ce0:	20000038 	.word	0x20000038
 8002ce4:	20000044 	.word	0x20000044
 8002ce8:	20000050 	.word	0x20000050
 8002cec:	2000005c 	.word	0x2000005c
 8002cf0:	20000068 	.word	0x20000068
 8002cf4:	20000074 	.word	0x20000074
 8002cf8:	20000080 	.word	0x20000080
 8002cfc:	2000008c 	.word	0x2000008c
 8002d00:	20000098 	.word	0x20000098
 8002d04:	200000a4 	.word	0x200000a4
 8002d08:	200000b0 	.word	0x200000b0
 8002d0c:	200000bc 	.word	0x200000bc
 8002d10:	200000c8 	.word	0x200000c8
 8002d14:	200000d4 	.word	0x200000d4
 8002d18:	200000e0 	.word	0x200000e0
 8002d1c:	200000ec 	.word	0x200000ec
 8002d20:	200000f8 	.word	0x200000f8
 8002d24:	20000104 	.word	0x20000104
 8002d28:	20000110 	.word	0x20000110
 8002d2c:	2000011c 	.word	0x2000011c
 8002d30:	20000128 	.word	0x20000128
 8002d34:	20000134 	.word	0x20000134
 8002d38:	20000140 	.word	0x20000140

08002d3c <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:
      ~_Sp_counted_deleter() noexcept { }
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	4a08      	ldr	r2, [pc, #32]	; (8002d68 <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev+0x2c>)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	601a      	str	r2, [r3, #0]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	330c      	adds	r3, #12
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f7ff fc46 	bl	80025e0 <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	4618      	mov	r0, r3
 8002d58:	f7fe fda0 	bl	800189c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3708      	adds	r7, #8
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	080115fc 	.word	0x080115fc

08002d6c <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b082      	sub	sp, #8
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f7ff ffe1 	bl	8002d3c <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
 8002d7a:	2114      	movs	r1, #20
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f00d fb50 	bl	8010422 <_ZdlPvj>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4618      	mov	r0, r3
 8002d86:	3708      	adds	r7, #8
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      _M_dispose() noexcept
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
      { _M_impl._M_del()(_M_impl._M_ptr); }
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	330c      	adds	r3, #12
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f000 f840 	bl	8002e1e <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	691b      	ldr	r3, [r3, #16]
 8002da4:	4619      	mov	r1, r3
 8002da6:	4610      	mov	r0, r2
 8002da8:	f7ff fc69 	bl	800267e <_ZNSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>
 8002dac:	bf00      	nop
 8002dae:	3708      	adds	r7, #8
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}

08002db4 <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b086      	sub	sp, #24
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	330c      	adds	r3, #12
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f000 f839 	bl	8002e38 <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	f107 0314 	add.w	r3, r7, #20
 8002dcc:	4611      	mov	r1, r2
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7ff fb9e 	bl	8002510 <_ZNSaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 8002dd4:	f107 0114 	add.w	r1, r7, #20
 8002dd8:	f107 030c 	add.w	r3, r7, #12
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7ff fd4d 	bl	800287e <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
	this->~_Sp_counted_deleter();
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f7ff ffa9 	bl	8002d3c <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 8002dea:	f107 030c 	add.w	r3, r7, #12
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7ff fbba 	bl	8002568 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	__allocator_type __a(_M_impl._M_alloc());
 8002df4:	f107 0314 	add.w	r3, r7, #20
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f7ff fb96 	bl	800252a <_ZNSaISt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
      }
 8002dfe:	bf00      	nop
 8002e00:	3718      	adds	r7, #24
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}

08002e06 <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept
 8002e06:	b480      	push	{r7}
 8002e08:	b083      	sub	sp, #12
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
 8002e0e:	6039      	str	r1, [r7, #0]
        return nullptr;
 8002e10:	2300      	movs	r3, #0
      }
 8002e12:	4618      	mov	r0, r3
 8002e14:	370c      	adds	r7, #12
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr

08002e1e <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>:
	_Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }
 8002e1e:	b580      	push	{r7, lr}
 8002e20:	b082      	sub	sp, #8
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	6078      	str	r0, [r7, #4]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f000 f813 	bl	8002e54 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	4618      	mov	r0, r3
 8002e32:	3708      	adds	r7, #8
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <_ZNSt19_Sp_counted_deleterIPN4tama7TextureENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	3301      	adds	r3, #1
 8002e44:	4618      	mov	r0, r3
 8002e46:	f000 f810 	bl	8002e6a <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama7TextureEELb1EE6_S_getERS3_>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3708      	adds	r7, #8
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}

08002e54 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>:
      _S_get(_Sp_ebo_helper& __eboh)
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
      { return __eboh._M_tp; }
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	4618      	mov	r0, r3
 8002e60:	370c      	adds	r7, #12
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr

08002e6a <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama7TextureEELb1EE6_S_getERS3_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 8002e6a:	b480      	push	{r7}
 8002e6c:	b083      	sub	sp, #12
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4618      	mov	r0, r3
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <_GLOBAL__sub_I__ZN4tama5asset4font8standard5widthE>:
 8002e80:	b580      	push	{r7, lr}
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002e88:	2001      	movs	r0, #1
 8002e8a:	f7ff fe2f 	bl	8002aec <_Z41__static_initialization_and_destruction_0ii>
 8002e8e:	bd80      	pop	{r7, pc}

08002e90 <_ZN4tama14ChangeObserverC1Ev>:
#ifndef VPET_CHANGEOBSERVER_H
#define VPET_CHANGEOBSERVER_H

namespace tama
{
    class ChangeObserver
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	4a04      	ldr	r2, [pc, #16]	; (8002eac <_ZN4tama14ChangeObserverC1Ev+0x1c>)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	601a      	str	r2, [r3, #0]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr
 8002eac:	080116a4 	.word	0x080116a4

08002eb0 <_ZN4tama5SceneC1Ev>:
// Created by grzegorz on 3/28/21.
//

#include "Scene.h"

tama::Scene::Scene()
 8002eb0:	b590      	push	{r4, r7, lr}
 8002eb2:	b085      	sub	sp, #20
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f7ff ffe8 	bl	8002e90 <_ZN4tama14ChangeObserverC1Ev>
 8002ec0:	4a15      	ldr	r2, [pc, #84]	; (8002f18 <_ZN4tama5SceneC1Ev+0x68>)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	601a      	str	r2, [r3, #0]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	3304      	adds	r3, #4
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f7fd fd70 	bl	80009b0 <_ZNSt10shared_ptrIN4tama14ChangeObserverEEC1Ev>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	330c      	adds	r3, #12
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f000 f936 	bl	8003146 <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EEC1Ev>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2254      	movs	r2, #84	; 0x54
 8002ede:	619a      	str	r2, [r3, #24]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2230      	movs	r2, #48	; 0x30
 8002ee4:	61da      	str	r2, [r3, #28]
{
    observer = nullptr;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	1d1c      	adds	r4, r3, #4
 8002eea:	f107 0308 	add.w	r3, r7, #8
 8002eee:	2100      	movs	r1, #0
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f7fd fd6a 	bl	80009ca <_ZNSt10shared_ptrIN4tama14ChangeObserverEEC1EDn>
 8002ef6:	f107 0308 	add.w	r3, r7, #8
 8002efa:	4619      	mov	r1, r3
 8002efc:	4620      	mov	r0, r4
 8002efe:	f7fd fd7c 	bl	80009fa <_ZNSt10shared_ptrIN4tama14ChangeObserverEEaSEOS2_>
 8002f02:	f107 0308 	add.w	r3, r7, #8
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7fd fcb6 	bl	8000878 <_ZNSt10shared_ptrIN4tama14ChangeObserverEED1Ev>
}
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3714      	adds	r7, #20
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd90      	pop	{r4, r7, pc}
 8002f16:	bf00      	nop
 8002f18:	08011698 	.word	0x08011698

08002f1c <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_ptr() = default;
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	3304      	adds	r3, #4
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7fd fd15 	bl	8000958 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4618      	mov	r0, r3
 8002f32:	3708      	adds	r7, #8
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <_ZNSt10shared_ptrIN4tama5SceneEED1Ev>:
    class shared_ptr : public __shared_ptr<_Tp>
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	4618      	mov	r0, r3
 8002f44:	f7ff ffea 	bl	8002f1c <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3708      	adds	r7, #8
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <_ZN4tama5Scene11addDrawableESt10shared_ptrINS_8DrawableEE>:
{
    this->observer = observer;
}

void tama::Scene::addDrawable(std::shared_ptr<Drawable> drawable)
{
 8002f52:	b5b0      	push	{r4, r5, r7, lr}
 8002f54:	b086      	sub	sp, #24
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
 8002f5a:	6039      	str	r1, [r7, #0]
    this->drawables.push_back(drawable);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	330c      	adds	r3, #12
 8002f60:	6839      	ldr	r1, [r7, #0]
 8002f62:	4618      	mov	r0, r3
 8002f64:	f000 f917 	bl	8003196 <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE9push_backERKS3_>
    drawable->setChangeObserver(std::make_shared<Scene>(*this));
 8002f68:	6838      	ldr	r0, [r7, #0]
 8002f6a:	f000 f93a 	bl	80031e2 <_ZNKSt19__shared_ptr_accessIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8002f6e:	4605      	mov	r5, r0
 8002f70:	682b      	ldr	r3, [r5, #0]
 8002f72:	331c      	adds	r3, #28
 8002f74:	681c      	ldr	r4, [r3, #0]
 8002f76:	f107 0310 	add.w	r3, r7, #16
 8002f7a:	6879      	ldr	r1, [r7, #4]
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f000 f947 	bl	8003210 <_ZSt11make_sharedIN4tama5SceneEJRS1_EESt10shared_ptrIT_EDpOT0_>
 8002f82:	f107 0210 	add.w	r2, r7, #16
 8002f86:	f107 0308 	add.w	r3, r7, #8
 8002f8a:	4611      	mov	r1, r2
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f000 f967 	bl	8003260 <_ZNSt10shared_ptrIN4tama14ChangeObserverEEC1INS0_5SceneEvEEOS_IT_E>
 8002f92:	f107 0308 	add.w	r3, r7, #8
 8002f96:	4619      	mov	r1, r3
 8002f98:	4628      	mov	r0, r5
 8002f9a:	47a0      	blx	r4
 8002f9c:	f107 0308 	add.w	r3, r7, #8
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f7fd fc69 	bl	8000878 <_ZNSt10shared_ptrIN4tama14ChangeObserverEED1Ev>
 8002fa6:	f107 0310 	add.w	r3, r7, #16
 8002faa:	4618      	mov	r0, r3
 8002fac:	f7ff ffc4 	bl	8002f38 <_ZNSt10shared_ptrIN4tama5SceneEED1Ev>
}
 8002fb0:	bf00      	nop
 8002fb2:	3718      	adds	r7, #24
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bdb0      	pop	{r4, r5, r7, pc}

08002fb8 <_ZNSt12__shared_ptrIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	6039      	str	r1, [r7, #0]
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	601a      	str	r2, [r3, #0]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	1d1a      	adds	r2, r3, #4
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	3304      	adds	r3, #4
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	4610      	mov	r0, r2
 8002fd6:	f7fd fac1 	bl	800055c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3708      	adds	r7, #8
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <_ZNSt12__shared_ptrIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_ptr() = default;
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	3304      	adds	r3, #4
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f7fd fcb1 	bl	8000958 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3708      	adds	r7, #8
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <_ZNSt10shared_ptrIN4tama8DrawableEEC1ERKS2_>:
      shared_ptr(const shared_ptr&) noexcept = default;
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	6039      	str	r1, [r7, #0]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	683a      	ldr	r2, [r7, #0]
 800300e:	4611      	mov	r1, r2
 8003010:	4618      	mov	r0, r3
 8003012:	f7ff ffd1 	bl	8002fb8 <_ZNSt12__shared_ptrIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4618      	mov	r0, r3
 800301a:	3708      	adds	r7, #8
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}

08003020 <_ZNSt10shared_ptrIN4tama8DrawableEED1Ev>:
    class shared_ptr : public __shared_ptr<_Tp>
 8003020:	b580      	push	{r7, lr}
 8003022:	b082      	sub	sp, #8
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	4618      	mov	r0, r3
 800302c:	f7ff ffda 	bl	8002fe4 <_ZNSt12__shared_ptrIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	4618      	mov	r0, r3
 8003034:	3708      	adds	r7, #8
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}

0800303a <_ZN4tama5Scene12getSceneDataEv>:
{

}

std::shared_ptr<tama::Texture> tama::Scene::getSceneData()
{
 800303a:	b590      	push	{r4, r7, lr}
 800303c:	b08d      	sub	sp, #52	; 0x34
 800303e:	af00      	add	r7, sp, #0
 8003040:	6078      	str	r0, [r7, #4]
 8003042:	6039      	str	r1, [r7, #0]
    std::shared_ptr<tama::Texture> texture = std::make_shared<tama::Texture>(width, height);
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	f103 0118 	add.w	r1, r3, #24
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	f103 021c 	add.w	r2, r3, #28
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	4618      	mov	r0, r3
 8003054:	f7fe fb14 	bl	8001680 <_ZSt11make_sharedIN4tama7TextureEJRjS2_EESt10shared_ptrIT_EDpOT0_>

    for (auto drawable : drawables)
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	330c      	adds	r3, #12
 800305c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800305e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003060:	f000 f911 	bl	8003286 <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE5beginEv>
 8003064:	4603      	mov	r3, r0
 8003066:	613b      	str	r3, [r7, #16]
 8003068:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800306a:	f000 f91c 	bl	80032a6 <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE3endEv>
 800306e:	4603      	mov	r3, r0
 8003070:	60fb      	str	r3, [r7, #12]
 8003072:	f107 020c 	add.w	r2, r7, #12
 8003076:	f107 0310 	add.w	r3, r7, #16
 800307a:	4611      	mov	r1, r2
 800307c:	4618      	mov	r0, r3
 800307e:	f000 f923 	bl	80032c8 <_ZN9__gnu_cxxneIPSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEEEbRKNS_17__normal_iteratorIT_T0_EESE_>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d04f      	beq.n	8003128 <_ZN4tama5Scene12getSceneDataEv+0xee>
 8003088:	f107 0310 	add.w	r3, r7, #16
 800308c:	4618      	mov	r0, r3
 800308e:	f000 f944 	bl	800331a <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEEdeEv>
 8003092:	4602      	mov	r2, r0
 8003094:	f107 0314 	add.w	r3, r7, #20
 8003098:	4611      	mov	r1, r2
 800309a:	4618      	mov	r0, r3
 800309c:	f7ff ffb0 	bl	8003000 <_ZNSt10shared_ptrIN4tama8DrawableEEC1ERKS2_>
    {
        if (drawable->isVisible())
 80030a0:	f107 0314 	add.w	r3, r7, #20
 80030a4:	4618      	mov	r0, r3
 80030a6:	f000 f89c 	bl	80031e2 <_ZNKSt19__shared_ptr_accessIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 80030aa:	4602      	mov	r2, r0
 80030ac:	6813      	ldr	r3, [r2, #0]
 80030ae:	3320      	adds	r3, #32
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4610      	mov	r0, r2
 80030b4:	4798      	blx	r3
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d02a      	beq.n	8003112 <_ZN4tama5Scene12getSceneDataEv+0xd8>
        {
            texture->insertAt(drawable->getPosition(), drawable->getTexture());
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f7fe fab4 	bl	800162a <_ZNKSt19__shared_ptr_accessIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 80030c2:	4604      	mov	r4, r0
 80030c4:	f107 0314 	add.w	r3, r7, #20
 80030c8:	4618      	mov	r0, r3
 80030ca:	f000 f88a 	bl	80031e2 <_ZNKSt19__shared_ptr_accessIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 80030ce:	4602      	mov	r2, r0
 80030d0:	6813      	ldr	r3, [r2, #0]
 80030d2:	330c      	adds	r3, #12
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f107 001c 	add.w	r0, r7, #28
 80030da:	4611      	mov	r1, r2
 80030dc:	4798      	blx	r3
 80030de:	f107 0314 	add.w	r3, r7, #20
 80030e2:	4618      	mov	r0, r3
 80030e4:	f000 f87d 	bl	80031e2 <_ZNKSt19__shared_ptr_accessIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 80030e8:	4602      	mov	r2, r0
 80030ea:	6813      	ldr	r3, [r2, #0]
 80030ec:	3308      	adds	r3, #8
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80030f4:	4611      	mov	r1, r2
 80030f6:	4798      	blx	r3
 80030f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030fc:	f107 021c 	add.w	r2, r7, #28
 8003100:	ca06      	ldmia	r2, {r1, r2}
 8003102:	4620      	mov	r0, r4
 8003104:	f7fd fdce 	bl	8000ca4 <_ZN4tama7Texture8insertAtENS_5Vec2dESt10shared_ptrIS0_E>
 8003108:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800310c:	4618      	mov	r0, r3
 800310e:	f7fd feb8 	bl	8000e82 <_ZNSt10shared_ptrIN4tama7TextureEED1Ev>
    for (auto drawable : drawables)
 8003112:	f107 0314 	add.w	r3, r7, #20
 8003116:	4618      	mov	r0, r3
 8003118:	f7ff ff82 	bl	8003020 <_ZNSt10shared_ptrIN4tama8DrawableEED1Ev>
 800311c:	f107 0310 	add.w	r3, r7, #16
 8003120:	4618      	mov	r0, r3
 8003122:	f000 f8e9 	bl	80032f8 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEEppEv>
 8003126:	e7a4      	b.n	8003072 <_ZN4tama5Scene12getSceneDataEv+0x38>
        }
    }
    return texture;
 8003128:	bf00      	nop
}
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	3734      	adds	r7, #52	; 0x34
 800312e:	46bd      	mov	sp, r7
 8003130:	bd90      	pop	{r4, r7, pc}

08003132 <_ZN4tama5Scene8onChangeEv>:

void tama::Scene::onChange()
{
 8003132:	b480      	push	{r7}
 8003134:	b083      	sub	sp, #12
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]

}
 800313a:	bf00      	nop
 800313c:	370c      	adds	r7, #12
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr

08003146 <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EEC1Ev>:
      // (assign() and get_allocator() are also listed in this section)

      /**
       *  @brief  Creates a %vector with no elements.
       */
      vector()
 8003146:	b580      	push	{r7, lr}
 8003148:	b082      	sub	sp, #8
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]
#if __cplusplus >= 201103L
      noexcept(is_nothrow_default_constructible<_Alloc>::value)
#endif
      : _Base() { }
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4618      	mov	r0, r3
 8003152:	f000 f8fa 	bl	800334a <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EEC1Ev>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4618      	mov	r0, r3
 800315a:	3708      	adds	r7, #8
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}

08003160 <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 8003160:	b5b0      	push	{r4, r5, r7, lr}
 8003162:	b082      	sub	sp, #8
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681c      	ldr	r4, [r3, #0]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator()); }
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	4618      	mov	r0, r3
 8003174:	f000 f910 	bl	8003398 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE19_M_get_Tp_allocatorEv>
 8003178:	4603      	mov	r3, r0
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800317a:	461a      	mov	r2, r3
 800317c:	4629      	mov	r1, r5
 800317e:	4620      	mov	r0, r4
 8003180:	f000 f915 	bl	80033ae <_ZSt8_DestroyIPSt10shared_ptrIN4tama8DrawableEES3_EvT_S5_RSaIT0_E>
		      _M_get_Tp_allocator()); }
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	4618      	mov	r0, r3
 8003188:	f000 f8ec 	bl	8003364 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EED1Ev>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	4618      	mov	r0, r3
 8003190:	3708      	adds	r7, #8
 8003192:	46bd      	mov	sp, r7
 8003194:	bdb0      	pop	{r4, r5, r7, pc}

08003196 <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE9push_backERKS3_>:
       *  to it.  Due to the nature of a %vector this operation can be
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      void
      push_back(const value_type& __x)
 8003196:	b580      	push	{r7, lr}
 8003198:	b082      	sub	sp, #8
 800319a:	af00      	add	r7, sp, #0
 800319c:	6078      	str	r0, [r7, #4]
 800319e:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	685a      	ldr	r2, [r3, #4]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d00d      	beq.n	80031c8 <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE9push_backERKS3_+0x32>
	  {
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	683a      	ldr	r2, [r7, #0]
 80031b4:	4619      	mov	r1, r3
 80031b6:	f000 f913 	bl	80033e0 <_ZNSt16allocator_traitsISaISt10shared_ptrIN4tama8DrawableEEEE9constructIS3_JRKS3_EEEvRS4_PT_DpOT0_>
				     __x);
	    ++this->_M_impl._M_finish;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	f103 0208 	add.w	r2, r3, #8
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	605a      	str	r2, [r3, #4]
	  }
	else
	  _M_realloc_insert(end(), __x);
      }
 80031c6:	e008      	b.n	80031da <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE9push_backERKS3_+0x44>
	  _M_realloc_insert(end(), __x);
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f000 f86c 	bl	80032a6 <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE3endEv>
 80031ce:	4603      	mov	r3, r0
 80031d0:	683a      	ldr	r2, [r7, #0]
 80031d2:	4619      	mov	r1, r3
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f000 f917 	bl	8003408 <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_>
      }
 80031da:	bf00      	nop
 80031dc:	3708      	adds	r7, #8
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}

080031e2 <_ZNKSt19__shared_ptr_accessIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 80031e2:	b580      	push	{r7, lr}
 80031e4:	b082      	sub	sp, #8
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	6078      	str	r0, [r7, #4]
	return _M_get();
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f000 f998 	bl	8003520 <_ZNKSt19__shared_ptr_accessIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 80031f0:	4603      	mov	r3, r0
      }
 80031f2:	4618      	mov	r0, r3
 80031f4:	3708      	adds	r7, #8
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}

080031fa <_ZSt7forwardIRN4tama5SceneEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80031fa:	b480      	push	{r7}
 80031fc:	b083      	sub	sp, #12
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4618      	mov	r0, r3
 8003206:	370c      	adds	r7, #12
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr

08003210 <_ZSt11make_sharedIN4tama5SceneEJRS1_EESt10shared_ptrIT_EDpOT0_>:
    make_shared(_Args&&... __args)
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	6039      	str	r1, [r7, #0]
				       std::forward<_Args>(__args)...);
 800321a:	f107 030c 	add.w	r3, r7, #12
 800321e:	4618      	mov	r0, r3
 8003220:	f000 f98a 	bl	8003538 <_ZNSaIN4tama5SceneEEC1Ev>
 8003224:	6838      	ldr	r0, [r7, #0]
 8003226:	f7ff ffe8 	bl	80031fa <_ZSt7forwardIRN4tama5SceneEEOT_RNSt16remove_referenceIS3_E4typeE>
 800322a:	4602      	mov	r2, r0
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f107 010c 	add.w	r1, r7, #12
 8003232:	4618      	mov	r0, r3
 8003234:	f000 f998 	bl	8003568 <_ZSt15allocate_sharedIN4tama5SceneESaIS1_EJRS1_EESt10shared_ptrIT_ERKT0_DpOT1_>
 8003238:	f107 030c 	add.w	r3, r7, #12
 800323c:	4618      	mov	r0, r3
 800323e:	f000 f987 	bl	8003550 <_ZNSaIN4tama5SceneEED1Ev>
    }
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	3710      	adds	r7, #16
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}

0800324a <_ZSt4moveIRSt10shared_ptrIN4tama5SceneEEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 800324a:	b480      	push	{r7}
 800324c:	b083      	sub	sp, #12
 800324e:	af00      	add	r7, sp, #0
 8003250:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4618      	mov	r0, r3
 8003256:	370c      	adds	r7, #12
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr

08003260 <_ZNSt10shared_ptrIN4tama14ChangeObserverEEC1INS0_5SceneEvEEOS_IT_E>:
	shared_ptr(shared_ptr<_Yp>&& __r) noexcept
 8003260:	b590      	push	{r4, r7, lr}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(std::move(__r)) { }
 800326a:	687c      	ldr	r4, [r7, #4]
 800326c:	6838      	ldr	r0, [r7, #0]
 800326e:	f7ff ffec 	bl	800324a <_ZSt4moveIRSt10shared_ptrIN4tama5SceneEEEONSt16remove_referenceIT_E4typeEOS6_>
 8003272:	4603      	mov	r3, r0
 8003274:	4619      	mov	r1, r3
 8003276:	4620      	mov	r0, r4
 8003278:	f000 f989 	bl	800358e <_ZNSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EEC1INS0_5SceneEvEEOS_IT_LS3_0EE>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	4618      	mov	r0, r3
 8003280:	370c      	adds	r7, #12
 8003282:	46bd      	mov	sp, r7
 8003284:	bd90      	pop	{r4, r7, pc}

08003286 <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8003286:	b580      	push	{r7, lr}
 8003288:	b084      	sub	sp, #16
 800328a:	af00      	add	r7, sp, #0
 800328c:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	f107 030c 	add.w	r3, r7, #12
 8003294:	4611      	mov	r1, r2
 8003296:	4618      	mov	r0, r3
 8003298:	f000 f997 	bl	80035ca <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEEC1ERKS5_>
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	4618      	mov	r0, r3
 80032a0:	3710      	adds	r7, #16
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}

080032a6 <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80032a6:	b580      	push	{r7, lr}
 80032a8:	b084      	sub	sp, #16
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	1d1a      	adds	r2, r3, #4
 80032b2:	f107 030c 	add.w	r3, r7, #12
 80032b6:	4611      	mov	r1, r2
 80032b8:	4618      	mov	r0, r3
 80032ba:	f000 f986 	bl	80035ca <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEEC1ERKS5_>
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	4618      	mov	r0, r3
 80032c2:	3710      	adds	r7, #16
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <_ZN9__gnu_cxxneIPSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEEEbRKNS_17__normal_iteratorIT_T0_EESE_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 80032c8:	b590      	push	{r4, r7, lr}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 f989 	bl	80035ea <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEE4baseEv>
 80032d8:	4603      	mov	r3, r0
 80032da:	681c      	ldr	r4, [r3, #0]
 80032dc:	6838      	ldr	r0, [r7, #0]
 80032de:	f000 f984 	bl	80035ea <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEE4baseEv>
 80032e2:	4603      	mov	r3, r0
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	429c      	cmp	r4, r3
 80032e8:	bf14      	ite	ne
 80032ea:	2301      	movne	r3, #1
 80032ec:	2300      	moveq	r3, #0
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	4618      	mov	r0, r3
 80032f2:	370c      	adds	r7, #12
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd90      	pop	{r4, r7, pc}

080032f8 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
	++_M_current;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f103 0208 	add.w	r2, r3, #8
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	601a      	str	r2, [r3, #0]
	return *this;
 800330c:	687b      	ldr	r3, [r7, #4]
      }
 800330e:	4618      	mov	r0, r3
 8003310:	370c      	adds	r7, #12
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr

0800331a <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800331a:	b480      	push	{r7}
 800331c:	b083      	sub	sp, #12
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4618      	mov	r0, r3
 8003328:	370c      	adds	r7, #12
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr

08003332 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8003332:	b580      	push	{r7, lr}
 8003334:	b082      	sub	sp, #8
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f000 f975 	bl	800362a <_ZNSaISt10shared_ptrIN4tama8DrawableEEED1Ev>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	4618      	mov	r0, r3
 8003344:	3708      	adds	r7, #8
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}

0800334a <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EEC1Ev>:
      _Vector_base()
 800334a:	b580      	push	{r7, lr}
 800334c:	b082      	sub	sp, #8
 800334e:	af00      	add	r7, sp, #0
 8003350:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4618      	mov	r0, r3
 8003356:	f000 f953 	bl	8003600 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE12_Vector_implC1Ev>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4618      	mov	r0, r3
 800335e:	3708      	adds	r7, #8
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}

08003364 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8003364:	b580      	push	{r7, lr}
 8003366:	b082      	sub	sp, #8
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6819      	ldr	r1, [r3, #0]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	689b      	ldr	r3, [r3, #8]
		      - this->_M_impl._M_start); }
 8003374:	461a      	mov	r2, r3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	10db      	asrs	r3, r3, #3
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 800337e:	461a      	mov	r2, r3
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f000 f95e 	bl	8003642 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE13_M_deallocateEPS3_j>
		      - this->_M_impl._M_start); }
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4618      	mov	r0, r3
 800338a:	f7ff ffd2 	bl	8003332 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE12_Vector_implD1Ev>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4618      	mov	r0, r3
 8003392:	3708      	adds	r7, #8
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}

08003398 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	4618      	mov	r0, r3
 80033a4:	370c      	adds	r7, #12
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr

080033ae <_ZSt8_DestroyIPSt10shared_ptrIN4tama8DrawableEES3_EvT_S5_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80033ae:	b580      	push	{r7, lr}
 80033b0:	b084      	sub	sp, #16
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	60f8      	str	r0, [r7, #12]
 80033b6:	60b9      	str	r1, [r7, #8]
 80033b8:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 80033ba:	68b9      	ldr	r1, [r7, #8]
 80033bc:	68f8      	ldr	r0, [r7, #12]
 80033be:	f000 f953 	bl	8003668 <_ZSt8_DestroyIPSt10shared_ptrIN4tama8DrawableEEEvT_S5_>
    }
 80033c2:	bf00      	nop
 80033c4:	3710      	adds	r7, #16
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}

080033ca <_ZSt7forwardIRKSt10shared_ptrIN4tama8DrawableEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80033ca:	b480      	push	{r7}
 80033cc:	b083      	sub	sp, #12
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4618      	mov	r0, r3
 80033d6:	370c      	adds	r7, #12
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr

080033e0 <_ZNSt16allocator_traitsISaISt10shared_ptrIN4tama8DrawableEEEE9constructIS3_JRKS3_EEEvRS4_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b084      	sub	sp, #16
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	60f8      	str	r0, [r7, #12]
 80033e8:	60b9      	str	r1, [r7, #8]
 80033ea:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f7ff ffec 	bl	80033ca <_ZSt7forwardIRKSt10shared_ptrIN4tama8DrawableEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80033f2:	4603      	mov	r3, r0
 80033f4:	461a      	mov	r2, r3
 80033f6:	68b9      	ldr	r1, [r7, #8]
 80033f8:	68f8      	ldr	r0, [r7, #12]
 80033fa:	f000 f942 	bl	8003682 <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama8DrawableEEE9constructIS4_JRKS4_EEEvPT_DpOT0_>
 80033fe:	bf00      	nop
 8003400:	3710      	adds	r7, #16
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
	...

08003408 <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 8003408:	b5b0      	push	{r4, r5, r7, lr}
 800340a:	b08a      	sub	sp, #40	; 0x28
 800340c:	af00      	add	r7, sp, #0
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	60b9      	str	r1, [r7, #8]
 8003412:	607a      	str	r2, [r7, #4]
    void
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
 8003414:	4a41      	ldr	r2, [pc, #260]	; (800351c <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0x114>)
 8003416:	2101      	movs	r1, #1
 8003418:	68f8      	ldr	r0, [r7, #12]
 800341a:	f000 f94c 	bl	80036b6 <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE12_M_check_lenEjPKc>
 800341e:	6278      	str	r0, [r7, #36]	; 0x24
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
      const size_type __elems_before = __position - begin();
 8003420:	68f8      	ldr	r0, [r7, #12]
 8003422:	f7ff ff30 	bl	8003286 <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE5beginEv>
 8003426:	4603      	mov	r3, r0
 8003428:	617b      	str	r3, [r7, #20]
 800342a:	f107 0214 	add.w	r2, r7, #20
 800342e:	f107 0308 	add.w	r3, r7, #8
 8003432:	4611      	mov	r1, r2
 8003434:	4618      	mov	r0, r3
 8003436:	f000 f986 	bl	8003746 <_ZN9__gnu_cxxmiIPSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_>
 800343a:	4603      	mov	r3, r0
 800343c:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003442:	4618      	mov	r0, r3
 8003444:	f000 f995 	bl	8003772 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE11_M_allocateEj>
 8003448:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	61bb      	str	r3, [r7, #24]
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 800344e:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8003450:	6a3b      	ldr	r3, [r7, #32]
 8003452:	00db      	lsls	r3, r3, #3
	  _Alloc_traits::construct(this->_M_impl,
 8003454:	69fa      	ldr	r2, [r7, #28]
 8003456:	18d5      	adds	r5, r2, r3
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f7ff ffb6 	bl	80033ca <_ZSt7forwardIRKSt10shared_ptrIN4tama8DrawableEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800345e:	4603      	mov	r3, r0
 8003460:	461a      	mov	r2, r3
 8003462:	4629      	mov	r1, r5
 8003464:	4620      	mov	r0, r4
 8003466:	f7ff ffbb 	bl	80033e0 <_ZNSt16allocator_traitsISaISt10shared_ptrIN4tama8DrawableEEEE9constructIS3_JRKS3_EEEvRS4_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 800346a:	2300      	movs	r3, #0
 800346c:	61bb      	str	r3, [r7, #24]

	  __new_finish
	    = std::__uninitialized_move_if_noexcept_a
	    (this->_M_impl._M_start, __position.base(),
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681c      	ldr	r4, [r3, #0]
 8003472:	f107 0308 	add.w	r3, r7, #8
 8003476:	4618      	mov	r0, r3
 8003478:	f000 f8b7 	bl	80035ea <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEE4baseEv>
 800347c:	4603      	mov	r3, r0
 800347e:	681d      	ldr	r5, [r3, #0]
	     __new_start, _M_get_Tp_allocator());
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	4618      	mov	r0, r3
 8003484:	f7ff ff88 	bl	8003398 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE19_M_get_Tp_allocatorEv>
 8003488:	4603      	mov	r3, r0
	  __new_finish
 800348a:	69fa      	ldr	r2, [r7, #28]
 800348c:	4629      	mov	r1, r5
 800348e:	4620      	mov	r0, r4
 8003490:	f000 f983 	bl	800379a <_ZSt34__uninitialized_move_if_noexcept_aIPSt10shared_ptrIN4tama8DrawableEES4_SaIS3_EET0_T_S7_S6_RT1_>
 8003494:	61b8      	str	r0, [r7, #24]

	  ++__new_finish;
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	3308      	adds	r3, #8
 800349a:	61bb      	str	r3, [r7, #24]

	  __new_finish
	    = std::__uninitialized_move_if_noexcept_a
	    (__position.base(), this->_M_impl._M_finish,
 800349c:	f107 0308 	add.w	r3, r7, #8
 80034a0:	4618      	mov	r0, r3
 80034a2:	f000 f8a2 	bl	80035ea <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEE4baseEv>
 80034a6:	4603      	mov	r3, r0
 80034a8:	681c      	ldr	r4, [r3, #0]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	685d      	ldr	r5, [r3, #4]
	     __new_finish, _M_get_Tp_allocator());
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	4618      	mov	r0, r3
 80034b2:	f7ff ff71 	bl	8003398 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE19_M_get_Tp_allocatorEv>
 80034b6:	4603      	mov	r3, r0
	  __new_finish
 80034b8:	69ba      	ldr	r2, [r7, #24]
 80034ba:	4629      	mov	r1, r5
 80034bc:	4620      	mov	r0, r4
 80034be:	f000 f96c 	bl	800379a <_ZSt34__uninitialized_move_if_noexcept_aIPSt10shared_ptrIN4tama8DrawableEES4_SaIS3_EET0_T_S7_S6_RT1_>
 80034c2:	61b8      	str	r0, [r7, #24]
	  else
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681c      	ldr	r4, [r3, #0]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	685d      	ldr	r5, [r3, #4]
		    _M_get_Tp_allocator());
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	4618      	mov	r0, r3
 80034d0:	f7ff ff62 	bl	8003398 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE19_M_get_Tp_allocatorEv>
 80034d4:	4603      	mov	r3, r0
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80034d6:	461a      	mov	r2, r3
 80034d8:	4629      	mov	r1, r5
 80034da:	4620      	mov	r0, r4
 80034dc:	f7ff ff67 	bl	80033ae <_ZSt8_DestroyIPSt10shared_ptrIN4tama8DrawableEES3_EvT_S5_RSaIT0_E>
      _M_deallocate(this->_M_impl._M_start,
 80034e0:	68f8      	ldr	r0, [r7, #12]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	6819      	ldr	r1, [r3, #0]
		    this->_M_impl._M_end_of_storage
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	689b      	ldr	r3, [r3, #8]
		    - this->_M_impl._M_start);
 80034ea:	461a      	mov	r2, r3
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	10db      	asrs	r3, r3, #3
      _M_deallocate(this->_M_impl._M_start,
 80034f4:	461a      	mov	r2, r3
 80034f6:	f000 f8a4 	bl	8003642 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE13_M_deallocateEPS3_j>
      this->_M_impl._M_start = __new_start;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	69fa      	ldr	r2, [r7, #28]
 80034fe:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	69ba      	ldr	r2, [r7, #24]
 8003504:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8003506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003508:	00db      	lsls	r3, r3, #3
 800350a:	69fa      	ldr	r2, [r7, #28]
 800350c:	441a      	add	r2, r3
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	609a      	str	r2, [r3, #8]
    }
 8003512:	bf00      	nop
 8003514:	3728      	adds	r7, #40	; 0x28
 8003516:	46bd      	mov	sp, r7
 8003518:	bdb0      	pop	{r4, r5, r7, pc}
 800351a:	bf00      	nop
 800351c:	08010ad0 	.word	0x08010ad0

08003520 <_ZNKSt19__shared_ptr_accessIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 8003520:	b580      	push	{r7, lr}
 8003522:	b082      	sub	sp, #8
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f000 f94f 	bl	80037cc <_ZNKSt12__shared_ptrIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0EE3getEv>
 800352e:	4603      	mov	r3, r0
 8003530:	4618      	mov	r0, r3
 8003532:	3708      	adds	r7, #8
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}

08003538 <_ZNSaIN4tama5SceneEEC1Ev>:
      allocator() throw() { }
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f000 f94f 	bl	80037e4 <_ZN9__gnu_cxx13new_allocatorIN4tama5SceneEEC1Ev>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4618      	mov	r0, r3
 800354a:	3708      	adds	r7, #8
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}

08003550 <_ZNSaIN4tama5SceneEED1Ev>:
      ~allocator() throw() { }
 8003550:	b580      	push	{r7, lr}
 8003552:	b082      	sub	sp, #8
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f000 f94e 	bl	80037fa <_ZN9__gnu_cxx13new_allocatorIN4tama5SceneEED1Ev>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4618      	mov	r0, r3
 8003562:	3708      	adds	r7, #8
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}

08003568 <_ZSt15allocate_sharedIN4tama5SceneESaIS1_EJRS1_EESt10shared_ptrIT_ERKT0_DpOT1_>:
    allocate_shared(const _Alloc& __a, _Args&&... __args)
 8003568:	b590      	push	{r4, r7, lr}
 800356a:	b087      	sub	sp, #28
 800356c:	af00      	add	r7, sp, #0
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	60b9      	str	r1, [r7, #8]
 8003572:	607a      	str	r2, [r7, #4]
			     std::forward<_Args>(__args)...);
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f7ff fe40 	bl	80031fa <_ZSt7forwardIRN4tama5SceneEEOT_RNSt16remove_referenceIS3_E4typeE>
 800357a:	4603      	mov	r3, r0
 800357c:	68ba      	ldr	r2, [r7, #8]
 800357e:	4621      	mov	r1, r4
 8003580:	68f8      	ldr	r0, [r7, #12]
 8003582:	f000 f945 	bl	8003810 <_ZNSt10shared_ptrIN4tama5SceneEEC1ISaIS1_EJRS1_EEESt19_Sp_make_shared_tagRKT_DpOT0_>
    }
 8003586:	68f8      	ldr	r0, [r7, #12]
 8003588:	371c      	adds	r7, #28
 800358a:	46bd      	mov	sp, r7
 800358c:	bd90      	pop	{r4, r7, pc}

0800358e <_ZNSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EEC1INS0_5SceneEvEEOS_IT_LS3_0EE>:
	__shared_ptr(__shared_ptr<_Yp, _Lp>&& __r) noexcept
 800358e:	b580      	push	{r7, lr}
 8003590:	b082      	sub	sp, #8
 8003592:	af00      	add	r7, sp, #0
 8003594:	6078      	str	r0, [r7, #4]
 8003596:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r._M_ptr), _M_refcount()
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	601a      	str	r2, [r3, #0]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	3304      	adds	r3, #4
 80035a4:	4618      	mov	r0, r3
 80035a6:	f7fd fa9f 	bl	8000ae8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _M_refcount._M_swap(__r._M_refcount);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	1d1a      	adds	r2, r3, #4
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	3304      	adds	r3, #4
 80035b2:	4619      	mov	r1, r3
 80035b4:	4610      	mov	r0, r2
 80035b6:	f7fd fada 	bl	8000b6e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  __r._M_ptr = 0;
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	2200      	movs	r2, #0
 80035be:	601a      	str	r2, [r3, #0]
	}
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	4618      	mov	r0, r3
 80035c4:	3708      	adds	r7, #8
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}

080035ca <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEEC1ERKS5_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80035ca:	b480      	push	{r7}
 80035cc:	b083      	sub	sp, #12
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	6078      	str	r0, [r7, #4]
 80035d2:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	601a      	str	r2, [r3, #0]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	4618      	mov	r0, r3
 80035e0:	370c      	adds	r7, #12
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr

080035ea <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80035ea:	b480      	push	{r7}
 80035ec:	b083      	sub	sp, #12
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4618      	mov	r0, r3
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr

08003600 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE12_Vector_implC1Ev>:
	_Vector_impl()
 8003600:	b580      	push	{r7, lr}
 8003602:	b082      	sub	sp, #8
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f000 f917 	bl	800383c <_ZNSaISt10shared_ptrIN4tama8DrawableEEEC1Ev>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	601a      	str	r2, [r3, #0]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	605a      	str	r2, [r3, #4]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	609a      	str	r2, [r3, #8]
	{ }
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	4618      	mov	r0, r3
 8003624:	3708      	adds	r7, #8
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}

0800362a <_ZNSaISt10shared_ptrIN4tama8DrawableEEED1Ev>:
 800362a:	b580      	push	{r7, lr}
 800362c:	b082      	sub	sp, #8
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f000 f90e 	bl	8003854 <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama8DrawableEEED1Ev>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	4618      	mov	r0, r3
 800363c:	3708      	adds	r7, #8
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}

08003642 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE13_M_deallocateEPS3_j>:
      _M_deallocate(pointer __p, size_t __n)
 8003642:	b580      	push	{r7, lr}
 8003644:	b084      	sub	sp, #16
 8003646:	af00      	add	r7, sp, #0
 8003648:	60f8      	str	r0, [r7, #12]
 800364a:	60b9      	str	r1, [r7, #8]
 800364c:	607a      	str	r2, [r7, #4]
	if (__p)
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d005      	beq.n	8003660 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE13_M_deallocateEPS3_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	68b9      	ldr	r1, [r7, #8]
 800365a:	4618      	mov	r0, r3
 800365c:	f000 f905 	bl	800386a <_ZNSt16allocator_traitsISaISt10shared_ptrIN4tama8DrawableEEEE10deallocateERS4_PS3_j>
      }
 8003660:	bf00      	nop
 8003662:	3710      	adds	r7, #16
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <_ZSt8_DestroyIPSt10shared_ptrIN4tama8DrawableEEEvT_S5_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8003668:	b580      	push	{r7, lr}
 800366a:	b082      	sub	sp, #8
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8003672:	6839      	ldr	r1, [r7, #0]
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f000 f912 	bl	800389e <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt10shared_ptrIN4tama8DrawableEEEEvT_S7_>
    }
 800367a:	bf00      	nop
 800367c:	3708      	adds	r7, #8
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}

08003682 <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama8DrawableEEE9constructIS4_JRKS4_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8003682:	b590      	push	{r4, r7, lr}
 8003684:	b085      	sub	sp, #20
 8003686:	af00      	add	r7, sp, #0
 8003688:	60f8      	str	r0, [r7, #12]
 800368a:	60b9      	str	r1, [r7, #8]
 800368c:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f7ff fe9b 	bl	80033ca <_ZSt7forwardIRKSt10shared_ptrIN4tama8DrawableEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8003694:	4604      	mov	r4, r0
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	4619      	mov	r1, r3
 800369a:	2008      	movs	r0, #8
 800369c:	f7fd faa6 	bl	8000bec <_ZnwjPv>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d003      	beq.n	80036ae <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama8DrawableEEE9constructIS4_JRKS4_EEEvPT_DpOT0_+0x2c>
 80036a6:	4621      	mov	r1, r4
 80036a8:	4618      	mov	r0, r3
 80036aa:	f7ff fca9 	bl	8003000 <_ZNSt10shared_ptrIN4tama8DrawableEEC1ERKS2_>
 80036ae:	bf00      	nop
 80036b0:	3714      	adds	r7, #20
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd90      	pop	{r4, r7, pc}

080036b6 <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE12_M_check_lenEjPKc>:
      { return _M_insert_rval(__position, std::move(__v)); }
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
 80036b6:	b590      	push	{r4, r7, lr}
 80036b8:	b087      	sub	sp, #28
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	60f8      	str	r0, [r7, #12]
 80036be:	60b9      	str	r1, [r7, #8]
 80036c0:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 80036c2:	68f8      	ldr	r0, [r7, #12]
 80036c4:	f000 f903 	bl	80038ce <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE8max_sizeEv>
 80036c8:	4604      	mov	r4, r0
 80036ca:	68f8      	ldr	r0, [r7, #12]
 80036cc:	f000 f910 	bl	80038f0 <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE4sizeEv>
 80036d0:	4603      	mov	r3, r0
 80036d2:	1ae2      	subs	r2, r4, r3
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	429a      	cmp	r2, r3
 80036d8:	bf34      	ite	cc
 80036da:	2301      	movcc	r3, #1
 80036dc:	2300      	movcs	r3, #0
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d003      	beq.n	80036ec <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE12_M_check_lenEjPKc+0x36>
	  __throw_length_error(__N(__s));
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	4618      	mov	r0, r3
 80036e8:	f00c fed1 	bl	801048e <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + std::max(size(), __n);
 80036ec:	68f8      	ldr	r0, [r7, #12]
 80036ee:	f000 f8ff 	bl	80038f0 <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE4sizeEv>
 80036f2:	4604      	mov	r4, r0
 80036f4:	68f8      	ldr	r0, [r7, #12]
 80036f6:	f000 f8fb 	bl	80038f0 <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE4sizeEv>
 80036fa:	4603      	mov	r3, r0
 80036fc:	613b      	str	r3, [r7, #16]
 80036fe:	f107 0208 	add.w	r2, r7, #8
 8003702:	f107 0310 	add.w	r3, r7, #16
 8003706:	4611      	mov	r1, r2
 8003708:	4618      	mov	r0, r3
 800370a:	f000 f902 	bl	8003912 <_ZSt3maxIjERKT_S2_S2_>
 800370e:	4603      	mov	r3, r0
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4423      	add	r3, r4
 8003714:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8003716:	68f8      	ldr	r0, [r7, #12]
 8003718:	f000 f8ea 	bl	80038f0 <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE4sizeEv>
 800371c:	4602      	mov	r2, r0
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	4293      	cmp	r3, r2
 8003722:	d306      	bcc.n	8003732 <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE12_M_check_lenEjPKc+0x7c>
 8003724:	68f8      	ldr	r0, [r7, #12]
 8003726:	f000 f8d2 	bl	80038ce <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE8max_sizeEv>
 800372a:	4602      	mov	r2, r0
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	4293      	cmp	r3, r2
 8003730:	d904      	bls.n	800373c <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE12_M_check_lenEjPKc+0x86>
 8003732:	68f8      	ldr	r0, [r7, #12]
 8003734:	f000 f8cb 	bl	80038ce <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE8max_sizeEv>
 8003738:	4603      	mov	r3, r0
 800373a:	e000      	b.n	800373e <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE12_M_check_lenEjPKc+0x88>
 800373c:	697b      	ldr	r3, [r7, #20]
      }
 800373e:	4618      	mov	r0, r3
 8003740:	371c      	adds	r7, #28
 8003742:	46bd      	mov	sp, r7
 8003744:	bd90      	pop	{r4, r7, pc}

08003746 <_ZN9__gnu_cxxmiIPSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_>:
#endif
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8003746:	b590      	push	{r4, r7, lr}
 8003748:	b083      	sub	sp, #12
 800374a:	af00      	add	r7, sp, #0
 800374c:	6078      	str	r0, [r7, #4]
 800374e:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f7ff ff4a 	bl	80035ea <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEE4baseEv>
 8003756:	4603      	mov	r3, r0
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	461c      	mov	r4, r3
 800375c:	6838      	ldr	r0, [r7, #0]
 800375e:	f7ff ff44 	bl	80035ea <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEE4baseEv>
 8003762:	4603      	mov	r3, r0
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	1ae3      	subs	r3, r4, r3
 8003768:	10db      	asrs	r3, r3, #3
 800376a:	4618      	mov	r0, r3
 800376c:	370c      	adds	r7, #12
 800376e:	46bd      	mov	sp, r7
 8003770:	bd90      	pop	{r4, r7, pc}

08003772 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8003772:	b580      	push	{r7, lr}
 8003774:	b082      	sub	sp, #8
 8003776:	af00      	add	r7, sp, #0
 8003778:	6078      	str	r0, [r7, #4]
 800377a:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d006      	beq.n	8003790 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE11_M_allocateEj+0x1e>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6839      	ldr	r1, [r7, #0]
 8003786:	4618      	mov	r0, r3
 8003788:	f000 f8d7 	bl	800393a <_ZNSt16allocator_traitsISaISt10shared_ptrIN4tama8DrawableEEEE8allocateERS4_j>
 800378c:	4603      	mov	r3, r0
 800378e:	e000      	b.n	8003792 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE11_M_allocateEj+0x20>
 8003790:	2300      	movs	r3, #0
      }
 8003792:	4618      	mov	r0, r3
 8003794:	3708      	adds	r7, #8
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}

0800379a <_ZSt34__uninitialized_move_if_noexcept_aIPSt10shared_ptrIN4tama8DrawableEES4_SaIS3_EET0_T_S7_S6_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 800379a:	b590      	push	{r4, r7, lr}
 800379c:	b085      	sub	sp, #20
 800379e:	af00      	add	r7, sp, #0
 80037a0:	60f8      	str	r0, [r7, #12]
 80037a2:	60b9      	str	r1, [r7, #8]
 80037a4:	607a      	str	r2, [r7, #4]
 80037a6:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 80037a8:	68f8      	ldr	r0, [r7, #12]
 80037aa:	f000 f8d5 	bl	8003958 <_ZSt32__make_move_if_noexcept_iteratorISt10shared_ptrIN4tama8DrawableEESt13move_iteratorIPS3_EET0_PT_>
 80037ae:	4604      	mov	r4, r0
 80037b0:	68b8      	ldr	r0, [r7, #8]
 80037b2:	f000 f8d1 	bl	8003958 <_ZSt32__make_move_if_noexcept_iteratorISt10shared_ptrIN4tama8DrawableEESt13move_iteratorIPS3_EET0_PT_>
 80037b6:	4601      	mov	r1, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	4620      	mov	r0, r4
 80037be:	f000 f8da 	bl	8003976 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPSt10shared_ptrIN4tama8DrawableEEES5_S4_ET0_T_S8_S7_RSaIT1_E>
 80037c2:	4603      	mov	r3, r0
    }
 80037c4:	4618      	mov	r0, r3
 80037c6:	3714      	adds	r7, #20
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd90      	pop	{r4, r7, pc}

080037cc <_ZNKSt12__shared_ptrIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0EE3getEv>:
      get() const noexcept
 80037cc:	b480      	push	{r7}
 80037ce:	b083      	sub	sp, #12
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4618      	mov	r0, r3
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr

080037e4 <_ZN9__gnu_cxx13new_allocatorIN4tama5SceneEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	4618      	mov	r0, r3
 80037f0:	370c      	adds	r7, #12
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr

080037fa <_ZN9__gnu_cxx13new_allocatorIN4tama5SceneEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80037fa:	b480      	push	{r7}
 80037fc:	b083      	sub	sp, #12
 80037fe:	af00      	add	r7, sp, #0
 8003800:	6078      	str	r0, [r7, #4]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4618      	mov	r0, r3
 8003806:	370c      	adds	r7, #12
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr

08003810 <_ZNSt10shared_ptrIN4tama5SceneEEC1ISaIS1_EJRS1_EEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 8003810:	b5b0      	push	{r4, r5, r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	7239      	strb	r1, [r7, #8]
 800381a:	607a      	str	r2, [r7, #4]
 800381c:	603b      	str	r3, [r7, #0]
	: __shared_ptr<_Tp>(__tag, __a, std::forward<_Args>(__args)...)
 800381e:	68fc      	ldr	r4, [r7, #12]
 8003820:	6838      	ldr	r0, [r7, #0]
 8003822:	f7ff fcea 	bl	80031fa <_ZSt7forwardIRN4tama5SceneEEOT_RNSt16remove_referenceIS3_E4typeE>
 8003826:	4603      	mov	r3, r0
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	4629      	mov	r1, r5
 800382c:	4620      	mov	r0, r4
 800382e:	f000 f8d0 	bl	80039d2 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJRS1_EEESt19_Sp_make_shared_tagRKT_DpOT0_>
	{ }
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	4618      	mov	r0, r3
 8003836:	3710      	adds	r7, #16
 8003838:	46bd      	mov	sp, r7
 800383a:	bdb0      	pop	{r4, r5, r7, pc}

0800383c <_ZNSaISt10shared_ptrIN4tama8DrawableEEEC1Ev>:
      allocator() throw() { }
 800383c:	b580      	push	{r7, lr}
 800383e:	b082      	sub	sp, #8
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f000 f93f 	bl	8003ac8 <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama8DrawableEEEC1Ev>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4618      	mov	r0, r3
 800384e:	3708      	adds	r7, #8
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama8DrawableEEED1Ev>:
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	4618      	mov	r0, r3
 8003860:	370c      	adds	r7, #12
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr

0800386a <_ZNSt16allocator_traitsISaISt10shared_ptrIN4tama8DrawableEEEE10deallocateERS4_PS3_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800386a:	b580      	push	{r7, lr}
 800386c:	b084      	sub	sp, #16
 800386e:	af00      	add	r7, sp, #0
 8003870:	60f8      	str	r0, [r7, #12]
 8003872:	60b9      	str	r1, [r7, #8]
 8003874:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	68b9      	ldr	r1, [r7, #8]
 800387a:	68f8      	ldr	r0, [r7, #12]
 800387c:	f000 f92f 	bl	8003ade <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama8DrawableEEE10deallocateEPS4_j>
 8003880:	bf00      	nop
 8003882:	3710      	adds	r7, #16
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <_ZSt11__addressofISt10shared_ptrIN4tama8DrawableEEEPT_RS4_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	4618      	mov	r0, r3
 8003894:	370c      	adds	r7, #12
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr

0800389e <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt10shared_ptrIN4tama8DrawableEEEEvT_S7_>:
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
 800389e:	b580      	push	{r7, lr}
 80038a0:	b082      	sub	sp, #8
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	6078      	str	r0, [r7, #4]
 80038a6:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d00a      	beq.n	80038c6 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt10shared_ptrIN4tama8DrawableEEEEvT_S7_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f7ff ffe9 	bl	8003888 <_ZSt11__addressofISt10shared_ptrIN4tama8DrawableEEEPT_RS4_>
 80038b6:	4603      	mov	r3, r0
 80038b8:	4618      	mov	r0, r3
 80038ba:	f000 f91d 	bl	8003af8 <_ZSt8_DestroyISt10shared_ptrIN4tama8DrawableEEEvPT_>
	  for (; __first != __last; ++__first)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	3308      	adds	r3, #8
 80038c2:	607b      	str	r3, [r7, #4]
 80038c4:	e7f0      	b.n	80038a8 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt10shared_ptrIN4tama8DrawableEEEEvT_S7_+0xa>
	}
 80038c6:	bf00      	nop
 80038c8:	3708      	adds	r7, #8
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}

080038ce <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80038ce:	b580      	push	{r7, lr}
 80038d0:	b082      	sub	sp, #8
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4618      	mov	r0, r3
 80038da:	f000 f924 	bl	8003b26 <_ZNKSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE19_M_get_Tp_allocatorEv>
 80038de:	4603      	mov	r3, r0
 80038e0:	4618      	mov	r0, r3
 80038e2:	f000 f914 	bl	8003b0e <_ZNSt16allocator_traitsISaISt10shared_ptrIN4tama8DrawableEEEE8max_sizeERKS4_>
 80038e6:	4603      	mov	r3, r0
 80038e8:	4618      	mov	r0, r3
 80038ea:	3708      	adds	r7, #8
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	461a      	mov	r2, r3
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	10db      	asrs	r3, r3, #3
 8003906:	4618      	mov	r0, r3
 8003908:	370c      	adds	r7, #12
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr

08003912 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8003912:	b480      	push	{r7}
 8003914:	b083      	sub	sp, #12
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
 800391a:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	429a      	cmp	r2, r3
 8003926:	d201      	bcs.n	800392c <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	e000      	b.n	800392e <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 800392c:	687b      	ldr	r3, [r7, #4]
    }
 800392e:	4618      	mov	r0, r3
 8003930:	370c      	adds	r7, #12
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr

0800393a <_ZNSt16allocator_traitsISaISt10shared_ptrIN4tama8DrawableEEEE8allocateERS4_j>:
      allocate(allocator_type& __a, size_type __n)
 800393a:	b580      	push	{r7, lr}
 800393c:	b082      	sub	sp, #8
 800393e:	af00      	add	r7, sp, #0
 8003940:	6078      	str	r0, [r7, #4]
 8003942:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8003944:	2200      	movs	r2, #0
 8003946:	6839      	ldr	r1, [r7, #0]
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f000 f8f7 	bl	8003b3c <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama8DrawableEEE8allocateEjPKv>
 800394e:	4603      	mov	r3, r0
 8003950:	4618      	mov	r0, r3
 8003952:	3708      	adds	r7, #8
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}

08003958 <_ZSt32__make_move_if_noexcept_iteratorISt10shared_ptrIN4tama8DrawableEESt13move_iteratorIPS3_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8003960:	f107 030c 	add.w	r3, r7, #12
 8003964:	6879      	ldr	r1, [r7, #4]
 8003966:	4618      	mov	r0, r3
 8003968:	f000 f906 	bl	8003b78 <_ZNSt13move_iteratorIPSt10shared_ptrIN4tama8DrawableEEEC1ES4_>
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	4618      	mov	r0, r3
 8003970:	3710      	adds	r7, #16
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}

08003976 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPSt10shared_ptrIN4tama8DrawableEEES5_S4_ET0_T_S8_S7_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8003976:	b580      	push	{r7, lr}
 8003978:	b084      	sub	sp, #16
 800397a:	af00      	add	r7, sp, #0
 800397c:	60f8      	str	r0, [r7, #12]
 800397e:	60b9      	str	r1, [r7, #8]
 8003980:	607a      	str	r2, [r7, #4]
 8003982:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	68b9      	ldr	r1, [r7, #8]
 8003988:	68f8      	ldr	r0, [r7, #12]
 800398a:	f000 f904 	bl	8003b96 <_ZSt18uninitialized_copyISt13move_iteratorIPSt10shared_ptrIN4tama8DrawableEEES5_ET0_T_S8_S7_>
 800398e:	4603      	mov	r3, r0
 8003990:	4618      	mov	r0, r3
 8003992:	3710      	adds	r7, #16
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}

08003998 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>:
        struct _Deleter
 8003998:	b580      	push	{r7, lr}
 800399a:	b082      	sub	sp, #8
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	4618      	mov	r0, r3
 80039a4:	f7ff fdd4 	bl	8003550 <_ZNSaIN4tama5SceneEED1Ev>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	4618      	mov	r0, r3
 80039ac:	3708      	adds	r7, #8
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}

080039b2 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>:
 80039b2:	b580      	push	{r7, lr}
 80039b4:	b082      	sub	sp, #8
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
 80039ba:	6039      	str	r1, [r7, #0]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	683a      	ldr	r2, [r7, #0]
 80039c0:	4611      	mov	r1, r2
 80039c2:	4618      	mov	r0, r3
 80039c4:	f000 f8f9 	bl	8003bba <_ZNSaIN4tama5SceneEEC1ERKS1_>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	4618      	mov	r0, r3
 80039cc:	3708      	adds	r7, #8
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}

080039d2 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJRS1_EEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 80039d2:	b580      	push	{r7, lr}
 80039d4:	b08c      	sub	sp, #48	; 0x30
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	60f8      	str	r0, [r7, #12]
 80039da:	7239      	strb	r1, [r7, #8]
 80039dc:	607a      	str	r2, [r7, #4]
 80039de:	603b      	str	r3, [r7, #0]
	: _M_ptr(), _M_refcount()
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2200      	movs	r2, #0
 80039e4:	601a      	str	r2, [r3, #0]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	3304      	adds	r3, #4
 80039ea:	4618      	mov	r0, r3
 80039ec:	f7fd f87c 	bl	8000ae8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 80039f0:	f107 0320 	add.w	r3, r7, #32
 80039f4:	6879      	ldr	r1, [r7, #4]
 80039f6:	4618      	mov	r0, r3
 80039f8:	f000 f8df 	bl	8003bba <_ZNSaIN4tama5SceneEEC1ERKS1_>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 80039fc:	f107 0318 	add.w	r3, r7, #24
 8003a00:	f107 0220 	add.w	r2, r7, #32
 8003a04:	4611      	mov	r1, r2
 8003a06:	4618      	mov	r0, r3
 8003a08:	f000 f8e5 	bl	8003bd6 <_ZSt18__allocate_guardedISaIN4tama5SceneEEESt15__allocated_ptrIT_ERS4_>
	  auto __ptr = __guard.get();
 8003a0c:	f107 0318 	add.w	r3, r7, #24
 8003a10:	4618      	mov	r0, r3
 8003a12:	f000 f908 	bl	8003c26 <_ZNSt15__allocated_ptrISaIN4tama5SceneEEE3getEv>
 8003a16:	62f8      	str	r0, [r7, #44]	; 0x2c
	  __traits::construct(__del._M_alloc, __ptr,
 8003a18:	6838      	ldr	r0, [r7, #0]
 8003a1a:	f7ff fbee 	bl	80031fa <_ZSt7forwardIRN4tama5SceneEEOT_RNSt16remove_referenceIS3_E4typeE>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	f107 0320 	add.w	r3, r7, #32
 8003a24:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a26:	4618      	mov	r0, r3
 8003a28:	f000 f90b 	bl	8003c42 <_ZNSt16allocator_traitsISaIN4tama5SceneEEE9constructIS1_JRS1_EEEvRS2_PT_DpOT0_>
	  __guard = nullptr;
 8003a2c:	f107 0318 	add.w	r3, r7, #24
 8003a30:	2100      	movs	r1, #0
 8003a32:	4618      	mov	r0, r3
 8003a34:	f000 f918 	bl	8003c68 <_ZNSt15__allocated_ptrISaIN4tama5SceneEEEaSEDn>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 8003a38:	f107 0220 	add.w	r2, r7, #32
 8003a3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a40:	4611      	mov	r1, r2
 8003a42:	4618      	mov	r0, r3
 8003a44:	f7ff ffb5 	bl	80039b2 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>
 8003a48:	f107 0220 	add.w	r2, r7, #32
 8003a4c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a50:	4611      	mov	r1, r2
 8003a52:	4618      	mov	r0, r3
 8003a54:	f000 f8b1 	bl	8003bba <_ZNSaIN4tama5SceneEEC1ERKS1_>
 8003a58:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a5c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8003a60:	f107 0014 	add.w	r0, r7, #20
 8003a64:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a66:	f000 f934 	bl	8003cd2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama5SceneENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
 8003a6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f7ff fd6e 	bl	8003550 <_ZNSaIN4tama5SceneEED1Ev>
 8003a74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f7ff ff8d 	bl	8003998 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	  _M_refcount._M_swap(__count);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	3304      	adds	r3, #4
 8003a82:	f107 0214 	add.w	r2, r7, #20
 8003a86:	4611      	mov	r1, r2
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f7fd f870 	bl	8000b6e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  _M_ptr = __ptr;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a92:	601a      	str	r2, [r3, #0]
	  _M_enable_shared_from_this_with(_M_ptr);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4619      	mov	r1, r3
 8003a9a:	68f8      	ldr	r0, [r7, #12]
 8003a9c:	f000 f970 	bl	8003d80 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 8003aa0:	f107 0314 	add.w	r3, r7, #20
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f7fc ff57 	bl	8000958 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 8003aaa:	f107 0318 	add.w	r3, r7, #24
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f000 f8a4 	bl	8003bfc <_ZNSt15__allocated_ptrISaIN4tama5SceneEEED1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 8003ab4:	f107 0320 	add.w	r3, r7, #32
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f7ff ff6d 	bl	8003998 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	}
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3730      	adds	r7, #48	; 0x30
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama8DrawableEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	370c      	adds	r7, #12
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr

08003ade <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama8DrawableEEE10deallocateEPS4_j>:
      deallocate(pointer __p, size_type)
 8003ade:	b580      	push	{r7, lr}
 8003ae0:	b084      	sub	sp, #16
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	60f8      	str	r0, [r7, #12]
 8003ae6:	60b9      	str	r1, [r7, #8]
 8003ae8:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8003aea:	68b8      	ldr	r0, [r7, #8]
 8003aec:	f00c fcb4 	bl	8010458 <_ZdlPv>
      }
 8003af0:	bf00      	nop
 8003af2:	3710      	adds	r7, #16
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <_ZSt8_DestroyISt10shared_ptrIN4tama8DrawableEEEvPT_>:
    _Destroy(_Tp* __pointer)
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b082      	sub	sp, #8
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
    { __pointer->~_Tp(); }
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f7ff fa8d 	bl	8003020 <_ZNSt10shared_ptrIN4tama8DrawableEED1Ev>
 8003b06:	bf00      	nop
 8003b08:	3708      	adds	r7, #8
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}

08003b0e <_ZNSt16allocator_traitsISaISt10shared_ptrIN4tama8DrawableEEEE8max_sizeERKS4_>:
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */
      static size_type
      max_size(const allocator_type& __a) noexcept
 8003b0e:	b580      	push	{r7, lr}
 8003b10:	b082      	sub	sp, #8
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f000 f93d 	bl	8003d96 <_ZNK9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama8DrawableEEE8max_sizeEv>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3708      	adds	r7, #8
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}

08003b26 <_ZNKSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8003b26:	b480      	push	{r7}
 8003b28:	b083      	sub	sp, #12
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4618      	mov	r0, r3
 8003b32:	370c      	adds	r7, #12
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr

08003b3c <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama8DrawableEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b084      	sub	sp, #16
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	60b9      	str	r1, [r7, #8]
 8003b46:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8003b48:	68f8      	ldr	r0, [r7, #12]
 8003b4a:	f000 f924 	bl	8003d96 <_ZNK9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama8DrawableEEE8max_sizeEv>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	4293      	cmp	r3, r2
 8003b54:	bf8c      	ite	hi
 8003b56:	2301      	movhi	r3, #1
 8003b58:	2300      	movls	r3, #0
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d001      	beq.n	8003b64 <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama8DrawableEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8003b60:	f00c fc8f 	bl	8010482 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	00db      	lsls	r3, r3, #3
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f00c fc5c 	bl	8010426 <_Znwj>
 8003b6e:	4603      	mov	r3, r0
      }
 8003b70:	4618      	mov	r0, r3
 8003b72:	3710      	adds	r7, #16
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}

08003b78 <_ZNSt13move_iteratorIPSt10shared_ptrIN4tama8DrawableEEEC1ES4_>:
      move_iterator(iterator_type __i)
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	683a      	ldr	r2, [r7, #0]
 8003b86:	601a      	str	r2, [r3, #0]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	370c      	adds	r7, #12
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr

08003b96 <_ZSt18uninitialized_copyISt13move_iteratorIPSt10shared_ptrIN4tama8DrawableEEES5_ET0_T_S8_S7_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8003b96:	b580      	push	{r7, lr}
 8003b98:	b086      	sub	sp, #24
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	60f8      	str	r0, [r7, #12]
 8003b9e:	60b9      	str	r1, [r7, #8]
 8003ba0:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	68b9      	ldr	r1, [r7, #8]
 8003baa:	68f8      	ldr	r0, [r7, #12]
 8003bac:	f000 f8ff 	bl	8003dae <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPSt10shared_ptrIN4tama8DrawableEEES7_EET0_T_SA_S9_>
 8003bb0:	4603      	mov	r3, r0
    }
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3718      	adds	r7, #24
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}

08003bba <_ZNSaIN4tama5SceneEEC1ERKS1_>:
      allocator(const allocator& __a) throw()
 8003bba:	b580      	push	{r7, lr}
 8003bbc:	b082      	sub	sp, #8
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	6078      	str	r0, [r7, #4]
 8003bc2:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8003bc4:	6839      	ldr	r1, [r7, #0]
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f000 f920 	bl	8003e0c <_ZN9__gnu_cxx13new_allocatorIN4tama5SceneEEC1ERKS3_>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3708      	adds	r7, #8
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}

08003bd6 <_ZSt18__allocate_guardedISaIN4tama5SceneEEESt15__allocated_ptrIT_ERS4_>:
    __allocate_guarded(_Alloc& __a)
 8003bd6:	b580      	push	{r7, lr}
 8003bd8:	b082      	sub	sp, #8
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	6078      	str	r0, [r7, #4]
 8003bde:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 8003be0:	2101      	movs	r1, #1
 8003be2:	6838      	ldr	r0, [r7, #0]
 8003be4:	f000 f91e 	bl	8003e24 <_ZNSt16allocator_traitsISaIN4tama5SceneEEE8allocateERS2_j>
 8003be8:	4603      	mov	r3, r0
 8003bea:	461a      	mov	r2, r3
 8003bec:	6839      	ldr	r1, [r7, #0]
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f000 f927 	bl	8003e42 <_ZNSt15__allocated_ptrISaIN4tama5SceneEEEC1ERS2_PS1_>
    }
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	3708      	adds	r7, #8
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}

08003bfc <_ZNSt15__allocated_ptrISaIN4tama5SceneEEED1Ev>:
      ~__allocated_ptr()
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b082      	sub	sp, #8
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d007      	beq.n	8003c1c <_ZNSt15__allocated_ptrISaIN4tama5SceneEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6818      	ldr	r0, [r3, #0]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	2201      	movs	r2, #1
 8003c16:	4619      	mov	r1, r3
 8003c18:	f000 f927 	bl	8003e6a <_ZNSt16allocator_traitsISaIN4tama5SceneEEE10deallocateERS2_PS1_j>
      }
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3708      	adds	r7, #8
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}

08003c26 <_ZNSt15__allocated_ptrISaIN4tama5SceneEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 8003c26:	b580      	push	{r7, lr}
 8003c28:	b082      	sub	sp, #8
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	6078      	str	r0, [r7, #4]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	4618      	mov	r0, r3
 8003c34:	f000 f928 	bl	8003e88 <_ZNSt15__allocated_ptrISaIN4tama5SceneEEE10_S_raw_ptrEPS1_>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3708      	adds	r7, #8
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}

08003c42 <_ZNSt16allocator_traitsISaIN4tama5SceneEEE9constructIS1_JRS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8003c42:	b580      	push	{r7, lr}
 8003c44:	b084      	sub	sp, #16
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	60f8      	str	r0, [r7, #12]
 8003c4a:	60b9      	str	r1, [r7, #8]
 8003c4c:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f7ff fad3 	bl	80031fa <_ZSt7forwardIRN4tama5SceneEEOT_RNSt16remove_referenceIS3_E4typeE>
 8003c54:	4603      	mov	r3, r0
 8003c56:	461a      	mov	r2, r3
 8003c58:	68b9      	ldr	r1, [r7, #8]
 8003c5a:	68f8      	ldr	r0, [r7, #12]
 8003c5c:	f000 f986 	bl	8003f6c <_ZN9__gnu_cxx13new_allocatorIN4tama5SceneEE9constructIS2_JRS2_EEEvPT_DpOT0_>
 8003c60:	bf00      	nop
 8003c62:	3710      	adds	r7, #16
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}

08003c68 <_ZNSt15__allocated_ptrISaIN4tama5SceneEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	605a      	str	r2, [r3, #4]
	return *this;
 8003c78:	687b      	ldr	r3, [r7, #4]
      }
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	370c      	adds	r7, #12
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr

08003c86 <_ZSt4moveIRNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
 8003c86:	b480      	push	{r7}
 8003c88:	b083      	sub	sp, #12
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4618      	mov	r0, r3
 8003c92:	370c      	adds	r7, #12
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr

08003c9c <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>:
        struct _Deleter
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b082      	sub	sp, #8
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	6039      	str	r1, [r7, #0]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	683a      	ldr	r2, [r7, #0]
 8003caa:	4611      	mov	r1, r2
 8003cac:	4618      	mov	r0, r3
 8003cae:	f7ff ff84 	bl	8003bba <_ZNSaIN4tama5SceneEEC1ERKS1_>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3708      	adds	r7, #8
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <_ZSt4moveIRSaIN4tama5SceneEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	370c      	adds	r7, #12
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr

08003cd2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama5SceneENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
 8003cd2:	b5b0      	push	{r4, r5, r7, lr}
 8003cd4:	b08a      	sub	sp, #40	; 0x28
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	60f8      	str	r0, [r7, #12]
 8003cda:	60b9      	str	r1, [r7, #8]
 8003cdc:	607a      	str	r2, [r7, #4]
 8003cde:	603b      	str	r3, [r7, #0]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	601a      	str	r2, [r3, #0]
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 8003ce6:	f107 031c 	add.w	r3, r7, #28
 8003cea:	6839      	ldr	r1, [r7, #0]
 8003cec:	4618      	mov	r0, r3
 8003cee:	f000 f957 	bl	8003fa0 <_ZNSaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	      auto __guard = std::__allocate_guarded(__a2);
 8003cf2:	f107 0314 	add.w	r3, r7, #20
 8003cf6:	f107 021c 	add.w	r2, r7, #28
 8003cfa:	4611      	mov	r1, r2
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f000 f968 	bl	8003fd2 <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>
	      _Sp_cd_type* __mem = __guard.get();
 8003d02:	f107 0314 	add.w	r3, r7, #20
 8003d06:	4618      	mov	r0, r3
 8003d08:	f000 f98b 	bl	8004022 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>
 8003d0c:	6278      	str	r0, [r7, #36]	; 0x24
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f7ff ffb9 	bl	8003c86 <_ZSt4moveIRNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 8003d14:	4602      	mov	r2, r0
 8003d16:	f107 0320 	add.w	r3, r7, #32
 8003d1a:	4611      	mov	r1, r2
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f7ff ffbd 	bl	8003c9c <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 8003d22:	f107 0420 	add.w	r4, r7, #32
 8003d26:	6838      	ldr	r0, [r7, #0]
 8003d28:	f7ff ffc8 	bl	8003cbc <_ZSt4moveIRSaIN4tama5SceneEEEONSt16remove_referenceIT_E4typeEOS5_>
 8003d2c:	4605      	mov	r5, r0
 8003d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d30:	4619      	mov	r1, r3
 8003d32:	2014      	movs	r0, #20
 8003d34:	f7fc ff5a 	bl	8000bec <_ZnwjPv>
 8003d38:	2800      	cmp	r0, #0
 8003d3a:	d004      	beq.n	8003d46 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama5SceneENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x74>
 8003d3c:	462b      	mov	r3, r5
 8003d3e:	4622      	mov	r2, r4
 8003d40:	68b9      	ldr	r1, [r7, #8]
 8003d42:	f000 f9a7 	bl	8004094 <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>
 8003d46:	f107 0320 	add.w	r3, r7, #32
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f7ff fe24 	bl	8003998 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	      _M_pi = __mem;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d54:	601a      	str	r2, [r3, #0]
	      __guard = nullptr;
 8003d56:	f107 0314 	add.w	r3, r7, #20
 8003d5a:	2100      	movs	r1, #0
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f000 f9c7 	bl	80040f0 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>
	      auto __guard = std::__allocate_guarded(__a2);
 8003d62:	f107 0314 	add.w	r3, r7, #20
 8003d66:	4618      	mov	r0, r3
 8003d68:	f000 f946 	bl	8003ff8 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 8003d6c:	f107 031c 	add.w	r3, r7, #28
 8003d70:	4618      	mov	r0, r3
 8003d72:	f000 f922 	bl	8003fba <_ZNSaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
	}
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3728      	adds	r7, #40	; 0x28
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bdb0      	pop	{r4, r5, r7, pc}

08003d80 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp*) noexcept
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	6039      	str	r1, [r7, #0]
	{ }
 8003d8a:	bf00      	nop
 8003d8c:	370c      	adds	r7, #12
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr

08003d96 <_ZNK9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama8DrawableEEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8003d96:	b480      	push	{r7}
 8003d98:	b083      	sub	sp, #12
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8003d9e:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8003da2:	4618      	mov	r0, r3
 8003da4:	370c      	adds	r7, #12
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr

08003dae <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPSt10shared_ptrIN4tama8DrawableEEES7_EET0_T_SA_S9_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8003dae:	b590      	push	{r4, r7, lr}
 8003db0:	b087      	sub	sp, #28
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	60f8      	str	r0, [r7, #12]
 8003db6:	60b9      	str	r1, [r7, #8]
 8003db8:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 8003dbe:	f107 0208 	add.w	r2, r7, #8
 8003dc2:	f107 030c 	add.w	r3, r7, #12
 8003dc6:	4611      	mov	r1, r2
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f000 f9c0 	bl	800414e <_ZStneIPSt10shared_ptrIN4tama8DrawableEEEbRKSt13move_iteratorIT_ES9_>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d016      	beq.n	8003e02 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPSt10shared_ptrIN4tama8DrawableEEES7_EET0_T_SA_S9_+0x54>
		std::_Construct(std::__addressof(*__cur), *__first);
 8003dd4:	6978      	ldr	r0, [r7, #20]
 8003dd6:	f7ff fd57 	bl	8003888 <_ZSt11__addressofISt10shared_ptrIN4tama8DrawableEEEPT_RS4_>
 8003dda:	4604      	mov	r4, r0
 8003ddc:	f107 030c 	add.w	r3, r7, #12
 8003de0:	4618      	mov	r0, r3
 8003de2:	f000 f9d6 	bl	8004192 <_ZNKSt13move_iteratorIPSt10shared_ptrIN4tama8DrawableEEEdeEv>
 8003de6:	4603      	mov	r3, r0
 8003de8:	4619      	mov	r1, r3
 8003dea:	4620      	mov	r0, r4
 8003dec:	f000 f9e8 	bl	80041c0 <_ZSt10_ConstructISt10shared_ptrIN4tama8DrawableEEJS3_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 8003df0:	f107 030c 	add.w	r3, r7, #12
 8003df4:	4618      	mov	r0, r3
 8003df6:	f000 f9bb 	bl	8004170 <_ZNSt13move_iteratorIPSt10shared_ptrIN4tama8DrawableEEEppEv>
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	3308      	adds	r3, #8
 8003dfe:	617b      	str	r3, [r7, #20]
 8003e00:	e7dd      	b.n	8003dbe <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPSt10shared_ptrIN4tama8DrawableEEES7_EET0_T_SA_S9_+0x10>
	      return __cur;
 8003e02:	697b      	ldr	r3, [r7, #20]
	}
 8003e04:	4618      	mov	r0, r3
 8003e06:	371c      	adds	r7, #28
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd90      	pop	{r4, r7, pc}

08003e0c <_ZN9__gnu_cxx13new_allocatorIN4tama5SceneEEC1ERKS3_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	6039      	str	r1, [r7, #0]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4618      	mov	r0, r3
 8003e1a:	370c      	adds	r7, #12
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr

08003e24 <_ZNSt16allocator_traitsISaIN4tama5SceneEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b082      	sub	sp, #8
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8003e2e:	2200      	movs	r2, #0
 8003e30:	6839      	ldr	r1, [r7, #0]
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 f9dd 	bl	80041f2 <_ZN9__gnu_cxx13new_allocatorIN4tama5SceneEE8allocateEjPKv>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3708      	adds	r7, #8
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}

08003e42 <_ZNSt15__allocated_ptrISaIN4tama5SceneEEEC1ERS2_PS1_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 8003e42:	b580      	push	{r7, lr}
 8003e44:	b084      	sub	sp, #16
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	60f8      	str	r0, [r7, #12]
 8003e4a:	60b9      	str	r1, [r7, #8]
 8003e4c:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 8003e4e:	68b8      	ldr	r0, [r7, #8]
 8003e50:	f000 f9ed 	bl	800422e <_ZSt11__addressofISaIN4tama5SceneEEEPT_RS3_>
 8003e54:	4602      	mov	r2, r0
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	601a      	str	r2, [r3, #0]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	687a      	ldr	r2, [r7, #4]
 8003e5e:	605a      	str	r2, [r3, #4]
      { }
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	4618      	mov	r0, r3
 8003e64:	3710      	adds	r7, #16
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}

08003e6a <_ZNSt16allocator_traitsISaIN4tama5SceneEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8003e6a:	b580      	push	{r7, lr}
 8003e6c:	b084      	sub	sp, #16
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	60f8      	str	r0, [r7, #12]
 8003e72:	60b9      	str	r1, [r7, #8]
 8003e74:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	68b9      	ldr	r1, [r7, #8]
 8003e7a:	68f8      	ldr	r0, [r7, #12]
 8003e7c:	f000 f9e2 	bl	8004244 <_ZN9__gnu_cxx13new_allocatorIN4tama5SceneEE10deallocateEPS2_j>
 8003e80:	bf00      	nop
 8003e82:	3710      	adds	r7, #16
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}

08003e88 <_ZNSt15__allocated_ptrISaIN4tama5SceneEEE10_S_raw_ptrEPS1_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 8003e88:	b480      	push	{r7}
 8003e8a:	b083      	sub	sp, #12
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	4618      	mov	r0, r3
 8003e94:	370c      	adds	r7, #12
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr
	...

08003ea0 <_ZN4tama14ChangeObserverC1ERKS0_>:
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]
 8003eaa:	4a05      	ldr	r2, [pc, #20]	; (8003ec0 <_ZN4tama14ChangeObserverC1ERKS0_+0x20>)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	601a      	str	r2, [r3, #0]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	370c      	adds	r7, #12
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr
 8003ebe:	bf00      	nop
 8003ec0:	080116a4 	.word	0x080116a4

08003ec4 <_ZNSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b082      	sub	sp, #8
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	6039      	str	r1, [r7, #0]
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	601a      	str	r2, [r3, #0]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	1d1a      	adds	r2, r3, #4
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	3304      	adds	r3, #4
 8003ede:	4619      	mov	r1, r3
 8003ee0:	4610      	mov	r0, r2
 8003ee2:	f7fc fb3b 	bl	800055c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3708      	adds	r7, #8
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <_ZNSt10shared_ptrIN4tama14ChangeObserverEEC1ERKS2_>:
      shared_ptr(const shared_ptr&) noexcept = default;
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b082      	sub	sp, #8
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	6039      	str	r1, [r7, #0]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	683a      	ldr	r2, [r7, #0]
 8003efe:	4611      	mov	r1, r2
 8003f00:	4618      	mov	r0, r3
 8003f02:	f7ff ffdf 	bl	8003ec4 <_ZNSt12__shared_ptrIN4tama14ChangeObserverELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3708      	adds	r7, #8
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}

08003f10 <_ZN4tama5SceneC1ERKS0_>:
#include "../drawable/Drawable.h"
#include "../../../../Configuration/display.config.h"

namespace tama
{
    class Scene : public ChangeObserver
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b082      	sub	sp, #8
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	6039      	str	r1, [r7, #0]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	683a      	ldr	r2, [r7, #0]
 8003f1e:	4611      	mov	r1, r2
 8003f20:	4618      	mov	r0, r3
 8003f22:	f7ff ffbd 	bl	8003ea0 <_ZN4tama14ChangeObserverC1ERKS0_>
 8003f26:	4a10      	ldr	r2, [pc, #64]	; (8003f68 <_ZN4tama5SceneC1ERKS0_+0x58>)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	601a      	str	r2, [r3, #0]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	1d1a      	adds	r2, r3, #4
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	3304      	adds	r3, #4
 8003f34:	4619      	mov	r1, r3
 8003f36:	4610      	mov	r0, r2
 8003f38:	f7ff ffda 	bl	8003ef0 <_ZNSt10shared_ptrIN4tama14ChangeObserverEEC1ERKS2_>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f103 020c 	add.w	r2, r3, #12
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	330c      	adds	r3, #12
 8003f46:	4619      	mov	r1, r3
 8003f48:	4610      	mov	r0, r2
 8003f4a:	f000 f988 	bl	800425e <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EEC1ERKS5_>
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	699a      	ldr	r2, [r3, #24]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	619a      	str	r2, [r3, #24]
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	69da      	ldr	r2, [r3, #28]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	61da      	str	r2, [r3, #28]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	4618      	mov	r0, r3
 8003f62:	3708      	adds	r7, #8
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}
 8003f68:	08011698 	.word	0x08011698

08003f6c <_ZN9__gnu_cxx13new_allocatorIN4tama5SceneEE9constructIS2_JRS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8003f6c:	b590      	push	{r4, r7, lr}
 8003f6e:	b085      	sub	sp, #20
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	60f8      	str	r0, [r7, #12]
 8003f74:	60b9      	str	r1, [r7, #8]
 8003f76:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f7ff f93e 	bl	80031fa <_ZSt7forwardIRN4tama5SceneEEOT_RNSt16remove_referenceIS3_E4typeE>
 8003f7e:	4604      	mov	r4, r0
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	4619      	mov	r1, r3
 8003f84:	2020      	movs	r0, #32
 8003f86:	f7fc fe31 	bl	8000bec <_ZnwjPv>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d003      	beq.n	8003f98 <_ZN9__gnu_cxx13new_allocatorIN4tama5SceneEE9constructIS2_JRS2_EEEvPT_DpOT0_+0x2c>
 8003f90:	4621      	mov	r1, r4
 8003f92:	4618      	mov	r0, r3
 8003f94:	f7ff ffbc 	bl	8003f10 <_ZN4tama5SceneC1ERKS0_>
 8003f98:	bf00      	nop
 8003f9a:	3714      	adds	r7, #20
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd90      	pop	{r4, r7, pc}

08003fa0 <_ZNSaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) throw() { }
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b082      	sub	sp, #8
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	6039      	str	r1, [r7, #0]
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f000 f994 	bl	80042d8 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3708      	adds	r7, #8
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}

08003fba <_ZNSaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>:
      ~allocator() throw() { }
 8003fba:	b580      	push	{r7, lr}
 8003fbc:	b082      	sub	sp, #8
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	6078      	str	r0, [r7, #4]
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f000 f993 	bl	80042ee <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3708      	adds	r7, #8
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}

08003fd2 <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>:
    __allocate_guarded(_Alloc& __a)
 8003fd2:	b580      	push	{r7, lr}
 8003fd4:	b082      	sub	sp, #8
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	6078      	str	r0, [r7, #4]
 8003fda:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 8003fdc:	2101      	movs	r1, #1
 8003fde:	6838      	ldr	r0, [r7, #0]
 8003fe0:	f000 f990 	bl	8004304 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	6839      	ldr	r1, [r7, #0]
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f000 f999 	bl	8004322 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
    }
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	3708      	adds	r7, #8
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}

08003ff8 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>:
      ~__allocated_ptr()
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b082      	sub	sp, #8
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d007      	beq.n	8004018 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6818      	ldr	r0, [r3, #0]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	2201      	movs	r2, #1
 8004012:	4619      	mov	r1, r3
 8004014:	f000 f999 	bl	800434a <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>
      }
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	4618      	mov	r0, r3
 800401c:	3708      	adds	r7, #8
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}

08004022 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 8004022:	b580      	push	{r7, lr}
 8004024:	b082      	sub	sp, #8
 8004026:	af00      	add	r7, sp, #0
 8004028:	6078      	str	r0, [r7, #4]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	4618      	mov	r0, r3
 8004030:	f000 f99a 	bl	8004368 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>
 8004034:	4603      	mov	r3, r0
 8004036:	4618      	mov	r0, r3
 8004038:	3708      	adds	r7, #8
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}

0800403e <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, false>
 800403e:	b580      	push	{r7, lr}
 8004040:	b082      	sub	sp, #8
 8004042:	af00      	add	r7, sp, #0
 8004044:	6078      	str	r0, [r7, #4]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4618      	mov	r0, r3
 800404a:	f7ff fca5 	bl	8003998 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4618      	mov	r0, r3
 8004052:	3708      	adds	r7, #8
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}

08004058 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama5SceneEELb1EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, true> : private _Tp
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	f7ff fa75 	bl	8003550 <_ZNSaIN4tama5SceneEED1Ev>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4618      	mov	r0, r3
 800406a:	3708      	adds	r7, #8
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}

08004070 <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>:
      class _Impl : _Sp_ebo_helper<0, _Deleter>, _Sp_ebo_helper<1, _Alloc>
 8004070:	b580      	push	{r7, lr}
 8004072:	b082      	sub	sp, #8
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	3301      	adds	r3, #1
 800407c:	4618      	mov	r0, r3
 800407e:	f7ff ffeb 	bl	8004058 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama5SceneEELb1EED1Ev>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4618      	mov	r0, r3
 8004086:	f7ff ffda 	bl	800403e <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4618      	mov	r0, r3
 800408e:	3708      	adds	r7, #8
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}

08004094 <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>:
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 8004094:	b590      	push	{r4, r7, lr}
 8004096:	b087      	sub	sp, #28
 8004098:	af00      	add	r7, sp, #0
 800409a:	60f8      	str	r0, [r7, #12]
 800409c:	60b9      	str	r1, [r7, #8]
 800409e:	607a      	str	r2, [r7, #4]
 80040a0:	603b      	str	r3, [r7, #0]
      : _M_impl(__p, std::move(__d), __a) { }
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	4618      	mov	r0, r3
 80040a6:	f7fe fc19 	bl	80028dc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 80040aa:	4a10      	ldr	r2, [pc, #64]	; (80040ec <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_+0x58>)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	601a      	str	r2, [r3, #0]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f103 040c 	add.w	r4, r3, #12
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f7ff fde5 	bl	8003c86 <_ZSt4moveIRNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 80040bc:	4602      	mov	r2, r0
 80040be:	f107 0314 	add.w	r3, r7, #20
 80040c2:	4611      	mov	r1, r2
 80040c4:	4618      	mov	r0, r3
 80040c6:	f7ff fde9 	bl	8003c9c <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 80040ca:	f107 0214 	add.w	r2, r7, #20
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	68b9      	ldr	r1, [r7, #8]
 80040d2:	4620      	mov	r0, r4
 80040d4:	f000 f953 	bl	800437e <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>
 80040d8:	f107 0314 	add.w	r3, r7, #20
 80040dc:	4618      	mov	r0, r3
 80040de:	f7ff fc5b 	bl	8003998 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	4618      	mov	r0, r3
 80040e6:	371c      	adds	r7, #28
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd90      	pop	{r4, r7, pc}
 80040ec:	0801167c 	.word	0x0801167c

080040f0 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 80040f0:	b480      	push	{r7}
 80040f2:	b083      	sub	sp, #12
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	605a      	str	r2, [r3, #4]
	return *this;
 8004100:	687b      	ldr	r3, [r7, #4]
      }
 8004102:	4618      	mov	r0, r3
 8004104:	370c      	adds	r7, #12
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr

0800410e <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>:
          void operator()(typename _Alloc::value_type* __ptr)
 800410e:	b590      	push	{r4, r7, lr}
 8004110:	b085      	sub	sp, #20
 8004112:	af00      	add	r7, sp, #0
 8004114:	6078      	str	r0, [r7, #4]
 8004116:	6039      	str	r1, [r7, #0]
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 8004118:	6879      	ldr	r1, [r7, #4]
 800411a:	f107 0308 	add.w	r3, r7, #8
 800411e:	683a      	ldr	r2, [r7, #0]
 8004120:	4618      	mov	r0, r3
 8004122:	f7ff fe8e 	bl	8003e42 <_ZNSt15__allocated_ptrISaIN4tama5SceneEEEC1ERS2_PS1_>
	    allocator_traits<_Alloc>::destroy(_M_alloc, __guard.get());
 8004126:	687c      	ldr	r4, [r7, #4]
 8004128:	f107 0308 	add.w	r3, r7, #8
 800412c:	4618      	mov	r0, r3
 800412e:	f7ff fd7a 	bl	8003c26 <_ZNSt15__allocated_ptrISaIN4tama5SceneEEE3getEv>
 8004132:	4603      	mov	r3, r0
 8004134:	4619      	mov	r1, r3
 8004136:	4620      	mov	r0, r4
 8004138:	f000 f93f 	bl	80043ba <_ZNSt16allocator_traitsISaIN4tama5SceneEEE7destroyIS1_EEvRS2_PT_>
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 800413c:	f107 0308 	add.w	r3, r7, #8
 8004140:	4618      	mov	r0, r3
 8004142:	f7ff fd5b 	bl	8003bfc <_ZNSt15__allocated_ptrISaIN4tama5SceneEEED1Ev>
          }
 8004146:	bf00      	nop
 8004148:	3714      	adds	r7, #20
 800414a:	46bd      	mov	sp, r7
 800414c:	bd90      	pop	{r4, r7, pc}

0800414e <_ZStneIPSt10shared_ptrIN4tama8DrawableEEEbRKSt13move_iteratorIT_ES9_>:
    operator!=(const move_iterator<_Iterator>& __x,
 800414e:	b580      	push	{r7, lr}
 8004150:	b082      	sub	sp, #8
 8004152:	af00      	add	r7, sp, #0
 8004154:	6078      	str	r0, [r7, #4]
 8004156:	6039      	str	r1, [r7, #0]
    { return !(__x == __y); }
 8004158:	6839      	ldr	r1, [r7, #0]
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f000 f93a 	bl	80043d4 <_ZSteqIPSt10shared_ptrIN4tama8DrawableEEEbRKSt13move_iteratorIT_ES9_>
 8004160:	4603      	mov	r3, r0
 8004162:	f083 0301 	eor.w	r3, r3, #1
 8004166:	b2db      	uxtb	r3, r3
 8004168:	4618      	mov	r0, r3
 800416a:	3708      	adds	r7, #8
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}

08004170 <_ZNSt13move_iteratorIPSt10shared_ptrIN4tama8DrawableEEEppEv>:
      operator++()
 8004170:	b480      	push	{r7}
 8004172:	b083      	sub	sp, #12
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
	++_M_current;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f103 0208 	add.w	r2, r3, #8
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	601a      	str	r2, [r3, #0]
	return *this;
 8004184:	687b      	ldr	r3, [r7, #4]
      }
 8004186:	4618      	mov	r0, r3
 8004188:	370c      	adds	r7, #12
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr

08004192 <_ZNKSt13move_iteratorIPSt10shared_ptrIN4tama8DrawableEEEdeEv>:
      operator*() const
 8004192:	b480      	push	{r7}
 8004194:	b083      	sub	sp, #12
 8004196:	af00      	add	r7, sp, #0
 8004198:	6078      	str	r0, [r7, #4]
      { return static_cast<reference>(*_M_current); }
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4618      	mov	r0, r3
 80041a0:	370c      	adds	r7, #12
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr

080041aa <_ZSt7forwardISt10shared_ptrIN4tama8DrawableEEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80041aa:	b480      	push	{r7}
 80041ac:	b083      	sub	sp, #12
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4618      	mov	r0, r3
 80041b6:	370c      	adds	r7, #12
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr

080041c0 <_ZSt10_ConstructISt10shared_ptrIN4tama8DrawableEEJS3_EEvPT_DpOT0_>:
    _Construct(_T1* __p, _Args&&... __args)
 80041c0:	b590      	push	{r4, r7, lr}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	6039      	str	r1, [r7, #0]
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
 80041ca:	6838      	ldr	r0, [r7, #0]
 80041cc:	f7ff ffed 	bl	80041aa <_ZSt7forwardISt10shared_ptrIN4tama8DrawableEEEOT_RNSt16remove_referenceIS4_E4typeE>
 80041d0:	4604      	mov	r4, r0
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4619      	mov	r1, r3
 80041d6:	2008      	movs	r0, #8
 80041d8:	f7fc fd08 	bl	8000bec <_ZnwjPv>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d003      	beq.n	80041ea <_ZSt10_ConstructISt10shared_ptrIN4tama8DrawableEEJS3_EEvPT_DpOT0_+0x2a>
 80041e2:	4621      	mov	r1, r4
 80041e4:	4618      	mov	r0, r3
 80041e6:	f000 f916 	bl	8004416 <_ZNSt10shared_ptrIN4tama8DrawableEEC1EOS2_>
 80041ea:	bf00      	nop
 80041ec:	370c      	adds	r7, #12
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd90      	pop	{r4, r7, pc}

080041f2 <_ZN9__gnu_cxx13new_allocatorIN4tama5SceneEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80041f2:	b580      	push	{r7, lr}
 80041f4:	b084      	sub	sp, #16
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	60f8      	str	r0, [r7, #12]
 80041fa:	60b9      	str	r1, [r7, #8]
 80041fc:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 80041fe:	68f8      	ldr	r0, [r7, #12]
 8004200:	f000 f91c 	bl	800443c <_ZNK9__gnu_cxx13new_allocatorIN4tama5SceneEE8max_sizeEv>
 8004204:	4602      	mov	r2, r0
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	4293      	cmp	r3, r2
 800420a:	bf8c      	ite	hi
 800420c:	2301      	movhi	r3, #1
 800420e:	2300      	movls	r3, #0
 8004210:	b2db      	uxtb	r3, r3
 8004212:	2b00      	cmp	r3, #0
 8004214:	d001      	beq.n	800421a <_ZN9__gnu_cxx13new_allocatorIN4tama5SceneEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8004216:	f00c f934 	bl	8010482 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	015b      	lsls	r3, r3, #5
 800421e:	4618      	mov	r0, r3
 8004220:	f00c f901 	bl	8010426 <_Znwj>
 8004224:	4603      	mov	r3, r0
      }
 8004226:	4618      	mov	r0, r3
 8004228:	3710      	adds	r7, #16
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}

0800422e <_ZSt11__addressofISaIN4tama5SceneEEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800422e:	b480      	push	{r7}
 8004230:	b083      	sub	sp, #12
 8004232:	af00      	add	r7, sp, #0
 8004234:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4618      	mov	r0, r3
 800423a:	370c      	adds	r7, #12
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr

08004244 <_ZN9__gnu_cxx13new_allocatorIN4tama5SceneEE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 8004244:	b580      	push	{r7, lr}
 8004246:	b084      	sub	sp, #16
 8004248:	af00      	add	r7, sp, #0
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	60b9      	str	r1, [r7, #8]
 800424e:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8004250:	68b8      	ldr	r0, [r7, #8]
 8004252:	f00c f901 	bl	8010458 <_ZdlPv>
      }
 8004256:	bf00      	nop
 8004258:	3710      	adds	r7, #16
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}

0800425e <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EEC1ERKS5_>:
      vector(const vector& __x)
 800425e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004260:	b085      	sub	sp, #20
 8004262:	af00      	add	r7, sp, #0
 8004264:	6078      	str	r0, [r7, #4]
 8004266:	6039      	str	r1, [r7, #0]
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 8004268:	687c      	ldr	r4, [r7, #4]
 800426a:	6838      	ldr	r0, [r7, #0]
 800426c:	f7ff fb40 	bl	80038f0 <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE4sizeEv>
 8004270:	4605      	mov	r5, r0
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	4618      	mov	r0, r3
 8004276:	f7ff fc56 	bl	8003b26 <_ZNKSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE19_M_get_Tp_allocatorEv>
 800427a:	4602      	mov	r2, r0
 800427c:	f107 030c 	add.w	r3, r7, #12
 8004280:	4611      	mov	r1, r2
 8004282:	4618      	mov	r0, r3
 8004284:	f000 f8e6 	bl	8004454 <_ZN9__gnu_cxx14__alloc_traitsISaISt10shared_ptrIN4tama8DrawableEEEE17_S_select_on_copyERKS5_>
 8004288:	f107 030c 	add.w	r3, r7, #12
 800428c:	461a      	mov	r2, r3
 800428e:	4629      	mov	r1, r5
 8004290:	4620      	mov	r0, r4
 8004292:	f000 f8ed 	bl	8004470 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EEC1EjRKS4_>
 8004296:	f107 030c 	add.w	r3, r7, #12
 800429a:	4618      	mov	r0, r3
 800429c:	f7ff f9c5 	bl	800362a <_ZNSaISt10shared_ptrIN4tama8DrawableEEED1Ev>
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 80042a0:	6838      	ldr	r0, [r7, #0]
 80042a2:	f000 f8f9 	bl	8004498 <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE5beginEv>
 80042a6:	4605      	mov	r5, r0
 80042a8:	6838      	ldr	r0, [r7, #0]
 80042aa:	f000 f909 	bl	80044c0 <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE3endEv>
 80042ae:	4606      	mov	r6, r0
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681c      	ldr	r4, [r3, #0]
				      _M_get_Tp_allocator());
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	4618      	mov	r0, r3
 80042b8:	f7ff f86e 	bl	8003398 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE19_M_get_Tp_allocatorEv>
 80042bc:	4603      	mov	r3, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 80042be:	4622      	mov	r2, r4
 80042c0:	4631      	mov	r1, r6
 80042c2:	4628      	mov	r0, r5
 80042c4:	f000 f910 	bl	80044e8 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrIN4tama8DrawableEESt6vectorIS5_SaIS5_EEEEPS5_S5_ET0_T_SE_SD_RSaIT1_E>
 80042c8:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	605a      	str	r2, [r3, #4]
      }
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4618      	mov	r0, r3
 80042d2:	3714      	adds	r7, #20
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080042d8 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80042d8:	b480      	push	{r7}
 80042da:	b083      	sub	sp, #12
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	4618      	mov	r0, r3
 80042e4:	370c      	adds	r7, #12
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr

080042ee <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80042ee:	b480      	push	{r7}
 80042f0:	b083      	sub	sp, #12
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	6078      	str	r0, [r7, #4]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	4618      	mov	r0, r3
 80042fa:	370c      	adds	r7, #12
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr

08004304 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>:
      allocate(allocator_type& __a, size_type __n)
 8004304:	b580      	push	{r7, lr}
 8004306:	b082      	sub	sp, #8
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
 800430c:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800430e:	2200      	movs	r2, #0
 8004310:	6839      	ldr	r1, [r7, #0]
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f000 f8f9 	bl	800450a <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>
 8004318:	4603      	mov	r3, r0
 800431a:	4618      	mov	r0, r3
 800431c:	3708      	adds	r7, #8
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}

08004322 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 8004322:	b580      	push	{r7, lr}
 8004324:	b084      	sub	sp, #16
 8004326:	af00      	add	r7, sp, #0
 8004328:	60f8      	str	r0, [r7, #12]
 800432a:	60b9      	str	r1, [r7, #8]
 800432c:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 800432e:	68b8      	ldr	r0, [r7, #8]
 8004330:	f000 f90c 	bl	800454c <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>
 8004334:	4602      	mov	r2, r0
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	601a      	str	r2, [r3, #0]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	605a      	str	r2, [r3, #4]
      { }
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	4618      	mov	r0, r3
 8004344:	3710      	adds	r7, #16
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}

0800434a <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800434a:	b580      	push	{r7, lr}
 800434c:	b084      	sub	sp, #16
 800434e:	af00      	add	r7, sp, #0
 8004350:	60f8      	str	r0, [r7, #12]
 8004352:	60b9      	str	r1, [r7, #8]
 8004354:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	68b9      	ldr	r1, [r7, #8]
 800435a:	68f8      	ldr	r0, [r7, #12]
 800435c:	f000 f901 	bl	8004562 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>
 8004360:	bf00      	nop
 8004362:	3710      	adds	r7, #16
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}

08004368 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 8004368:	b480      	push	{r7}
 800436a:	b083      	sub	sp, #12
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	4618      	mov	r0, r3
 8004374:	370c      	adds	r7, #12
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr

0800437e <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 800437e:	b590      	push	{r4, r7, lr}
 8004380:	b085      	sub	sp, #20
 8004382:	af00      	add	r7, sp, #0
 8004384:	60f8      	str	r0, [r7, #12]
 8004386:	60b9      	str	r1, [r7, #8]
 8004388:	607a      	str	r2, [r7, #4]
 800438a:	603b      	str	r3, [r7, #0]
	: _M_ptr(__p), _Del_base(std::move(__d)), _Alloc_base(__a)
 800438c:	68fc      	ldr	r4, [r7, #12]
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f7ff fc79 	bl	8003c86 <_ZSt4moveIRNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 8004394:	4603      	mov	r3, r0
 8004396:	4619      	mov	r1, r3
 8004398:	4620      	mov	r0, r4
 800439a:	f000 f8ef 	bl	800457c <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	3301      	adds	r3, #1
 80043a2:	6839      	ldr	r1, [r7, #0]
 80043a4:	4618      	mov	r0, r3
 80043a6:	f000 f8fc 	bl	80045a2 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama5SceneEELb1EEC1ERKS2_>
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	68ba      	ldr	r2, [r7, #8]
 80043ae:	605a      	str	r2, [r3, #4]
	{ }
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	4618      	mov	r0, r3
 80043b4:	3714      	adds	r7, #20
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd90      	pop	{r4, r7, pc}

080043ba <_ZNSt16allocator_traitsISaIN4tama5SceneEEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 80043ba:	b580      	push	{r7, lr}
 80043bc:	b082      	sub	sp, #8
 80043be:	af00      	add	r7, sp, #0
 80043c0:	6078      	str	r0, [r7, #4]
 80043c2:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 80043c4:	6839      	ldr	r1, [r7, #0]
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f000 f912 	bl	80045f0 <_ZN9__gnu_cxx13new_allocatorIN4tama5SceneEE7destroyIS2_EEvPT_>
 80043cc:	bf00      	nop
 80043ce:	3708      	adds	r7, #8
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}

080043d4 <_ZSteqIPSt10shared_ptrIN4tama8DrawableEEEbRKSt13move_iteratorIT_ES9_>:
    operator==(const move_iterator<_Iterator>& __x,
 80043d4:	b590      	push	{r4, r7, lr}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	6039      	str	r1, [r7, #0]
    { return __x.base() == __y.base(); }
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f000 f912 	bl	8004608 <_ZNKSt13move_iteratorIPSt10shared_ptrIN4tama8DrawableEEE4baseEv>
 80043e4:	4604      	mov	r4, r0
 80043e6:	6838      	ldr	r0, [r7, #0]
 80043e8:	f000 f90e 	bl	8004608 <_ZNKSt13move_iteratorIPSt10shared_ptrIN4tama8DrawableEEE4baseEv>
 80043ec:	4603      	mov	r3, r0
 80043ee:	429c      	cmp	r4, r3
 80043f0:	bf0c      	ite	eq
 80043f2:	2301      	moveq	r3, #1
 80043f4:	2300      	movne	r3, #0
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	4618      	mov	r0, r3
 80043fa:	370c      	adds	r7, #12
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd90      	pop	{r4, r7, pc}

08004400 <_ZSt4moveIRSt10shared_ptrIN4tama8DrawableEEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 8004400:	b480      	push	{r7}
 8004402:	b083      	sub	sp, #12
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	4618      	mov	r0, r3
 800440c:	370c      	adds	r7, #12
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr

08004416 <_ZNSt10shared_ptrIN4tama8DrawableEEC1EOS2_>:
      shared_ptr(shared_ptr&& __r) noexcept
 8004416:	b590      	push	{r4, r7, lr}
 8004418:	b083      	sub	sp, #12
 800441a:	af00      	add	r7, sp, #0
 800441c:	6078      	str	r0, [r7, #4]
 800441e:	6039      	str	r1, [r7, #0]
      : __shared_ptr<_Tp>(std::move(__r)) { }
 8004420:	687c      	ldr	r4, [r7, #4]
 8004422:	6838      	ldr	r0, [r7, #0]
 8004424:	f7ff ffec 	bl	8004400 <_ZSt4moveIRSt10shared_ptrIN4tama8DrawableEEEONSt16remove_referenceIT_E4typeEOS6_>
 8004428:	4603      	mov	r3, r0
 800442a:	4619      	mov	r1, r3
 800442c:	4620      	mov	r0, r4
 800442e:	f000 f8f7 	bl	8004620 <_ZNSt12__shared_ptrIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0EEC1EOS4_>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4618      	mov	r0, r3
 8004436:	370c      	adds	r7, #12
 8004438:	46bd      	mov	sp, r7
 800443a:	bd90      	pop	{r4, r7, pc}

0800443c <_ZNK9__gnu_cxx13new_allocatorIN4tama5SceneEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800443c:	b480      	push	{r7}
 800443e:	b083      	sub	sp, #12
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8004444:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
 8004448:	4618      	mov	r0, r3
 800444a:	370c      	adds	r7, #12
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr

08004454 <_ZN9__gnu_cxx14__alloc_traitsISaISt10shared_ptrIN4tama8DrawableEEEE17_S_select_on_copyERKS5_>:
    template<typename _Ptr>
      static typename std::enable_if<__is_custom_pointer<_Ptr>::value>::type
      destroy(_Alloc& __a, _Ptr __p)
      { _Base_type::destroy(__a, std::addressof(*__p)); }

    static _Alloc _S_select_on_copy(const _Alloc& __a)
 8004454:	b580      	push	{r7, lr}
 8004456:	b082      	sub	sp, #8
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6839      	ldr	r1, [r7, #0]
 8004462:	4618      	mov	r0, r3
 8004464:	f000 f8fa 	bl	800465c <_ZNSt16allocator_traitsISaISt10shared_ptrIN4tama8DrawableEEEE37select_on_container_copy_constructionERKS4_>
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	3708      	adds	r7, #8
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}

08004470 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EEC1EjRKS4_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 8004470:	b580      	push	{r7, lr}
 8004472:	b084      	sub	sp, #16
 8004474:	af00      	add	r7, sp, #0
 8004476:	60f8      	str	r0, [r7, #12]
 8004478:	60b9      	str	r1, [r7, #8]
 800447a:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	6879      	ldr	r1, [r7, #4]
 8004480:	4618      	mov	r0, r3
 8004482:	f000 f906 	bl	8004692 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE12_Vector_implC1ERKS4_>
      { _M_create_storage(__n); }
 8004486:	68b9      	ldr	r1, [r7, #8]
 8004488:	68f8      	ldr	r0, [r7, #12]
 800448a:	f000 f919 	bl	80046c0 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE17_M_create_storageEj>
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	4618      	mov	r0, r3
 8004492:	3710      	adds	r7, #16
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}

08004498 <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 8004498:	b580      	push	{r7, lr}
 800449a:	b084      	sub	sp, #16
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	60fb      	str	r3, [r7, #12]
 80044a6:	f107 020c 	add.w	r2, r7, #12
 80044aa:	f107 0308 	add.w	r3, r7, #8
 80044ae:	4611      	mov	r1, r2
 80044b0:	4618      	mov	r0, r3
 80044b2:	f000 f920 	bl	80046f6 <_ZN9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEEC1ERKS6_>
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	4618      	mov	r0, r3
 80044ba:	3710      	adds	r7, #16
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}

080044c0 <_ZNKSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b084      	sub	sp, #16
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	60fb      	str	r3, [r7, #12]
 80044ce:	f107 020c 	add.w	r2, r7, #12
 80044d2:	f107 0308 	add.w	r3, r7, #8
 80044d6:	4611      	mov	r1, r2
 80044d8:	4618      	mov	r0, r3
 80044da:	f000 f90c 	bl	80046f6 <_ZN9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEEC1ERKS6_>
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	4618      	mov	r0, r3
 80044e2:	3710      	adds	r7, #16
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrIN4tama8DrawableEESt6vectorIS5_SaIS5_EEEEPS5_S5_ET0_T_SE_SD_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b084      	sub	sp, #16
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	60f8      	str	r0, [r7, #12]
 80044f0:	60b9      	str	r1, [r7, #8]
 80044f2:	607a      	str	r2, [r7, #4]
 80044f4:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	68b9      	ldr	r1, [r7, #8]
 80044fa:	68f8      	ldr	r0, [r7, #12]
 80044fc:	f000 f90b 	bl	8004716 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrIN4tama8DrawableEESt6vectorIS5_SaIS5_EEEEPS5_ET0_T_SE_SD_>
 8004500:	4603      	mov	r3, r0
 8004502:	4618      	mov	r0, r3
 8004504:	3710      	adds	r7, #16
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}

0800450a <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800450a:	b580      	push	{r7, lr}
 800450c:	b084      	sub	sp, #16
 800450e:	af00      	add	r7, sp, #0
 8004510:	60f8      	str	r0, [r7, #12]
 8004512:	60b9      	str	r1, [r7, #8]
 8004514:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8004516:	68f8      	ldr	r0, [r7, #12]
 8004518:	f000 f910 	bl	800473c <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>
 800451c:	4602      	mov	r2, r0
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	4293      	cmp	r3, r2
 8004522:	bf8c      	ite	hi
 8004524:	2301      	movhi	r3, #1
 8004526:	2300      	movls	r3, #0
 8004528:	b2db      	uxtb	r3, r3
 800452a:	2b00      	cmp	r3, #0
 800452c:	d001      	beq.n	8004532 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800452e:	f00b ffa8 	bl	8010482 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8004532:	68ba      	ldr	r2, [r7, #8]
 8004534:	4613      	mov	r3, r2
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	4413      	add	r3, r2
 800453a:	009b      	lsls	r3, r3, #2
 800453c:	4618      	mov	r0, r3
 800453e:	f00b ff72 	bl	8010426 <_Znwj>
 8004542:	4603      	mov	r3, r0
      }
 8004544:	4618      	mov	r0, r3
 8004546:	3710      	adds	r7, #16
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}

0800454c <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800454c:	b480      	push	{r7}
 800454e:	b083      	sub	sp, #12
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	4618      	mov	r0, r3
 8004558:	370c      	adds	r7, #12
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr

08004562 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>:
      deallocate(pointer __p, size_type)
 8004562:	b580      	push	{r7, lr}
 8004564:	b084      	sub	sp, #16
 8004566:	af00      	add	r7, sp, #0
 8004568:	60f8      	str	r0, [r7, #12]
 800456a:	60b9      	str	r1, [r7, #8]
 800456c:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800456e:	68b8      	ldr	r0, [r7, #8]
 8004570:	f00b ff72 	bl	8010458 <_ZdlPv>
      }
 8004574:	bf00      	nop
 8004576:	3710      	adds	r7, #16
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}

0800457c <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>:
      explicit _Sp_ebo_helper(_Tp&& __tp) : _M_tp(std::move(__tp)) { }
 800457c:	b590      	push	{r4, r7, lr}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	6039      	str	r1, [r7, #0]
 8004586:	687c      	ldr	r4, [r7, #4]
 8004588:	6838      	ldr	r0, [r7, #0]
 800458a:	f7ff fb7c 	bl	8003c86 <_ZSt4moveIRNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 800458e:	4603      	mov	r3, r0
 8004590:	4619      	mov	r1, r3
 8004592:	4620      	mov	r0, r4
 8004594:	f7ff fb82 	bl	8003c9c <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	4618      	mov	r0, r3
 800459c:	370c      	adds	r7, #12
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd90      	pop	{r4, r7, pc}

080045a2 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama5SceneEELb1EEC1ERKS2_>:
      explicit _Sp_ebo_helper(const _Tp& __tp) : _Tp(__tp) { }
 80045a2:	b580      	push	{r7, lr}
 80045a4:	b082      	sub	sp, #8
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	6078      	str	r0, [r7, #4]
 80045aa:	6039      	str	r1, [r7, #0]
 80045ac:	6839      	ldr	r1, [r7, #0]
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f7ff fb03 	bl	8003bba <_ZNSaIN4tama5SceneEEC1ERKS1_>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	4618      	mov	r0, r3
 80045b8:	3708      	adds	r7, #8
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
	...

080045c0 <_ZN4tama5SceneD1Ev>:
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b082      	sub	sp, #8
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
 80045c8:	4a08      	ldr	r2, [pc, #32]	; (80045ec <_ZN4tama5SceneD1Ev+0x2c>)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	601a      	str	r2, [r3, #0]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	330c      	adds	r3, #12
 80045d2:	4618      	mov	r0, r3
 80045d4:	f7fe fdc4 	bl	8003160 <_ZNSt6vectorISt10shared_ptrIN4tama8DrawableEESaIS3_EED1Ev>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	3304      	adds	r3, #4
 80045dc:	4618      	mov	r0, r3
 80045de:	f7fc f94b 	bl	8000878 <_ZNSt10shared_ptrIN4tama14ChangeObserverEED1Ev>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4618      	mov	r0, r3
 80045e6:	3708      	adds	r7, #8
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}
 80045ec:	08011698 	.word	0x08011698

080045f0 <_ZN9__gnu_cxx13new_allocatorIN4tama5SceneEE7destroyIS2_EEvPT_>:
	destroy(_Up* __p) { __p->~_Up(); }
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b082      	sub	sp, #8
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	6039      	str	r1, [r7, #0]
 80045fa:	6838      	ldr	r0, [r7, #0]
 80045fc:	f7ff ffe0 	bl	80045c0 <_ZN4tama5SceneD1Ev>
 8004600:	bf00      	nop
 8004602:	3708      	adds	r7, #8
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}

08004608 <_ZNKSt13move_iteratorIPSt10shared_ptrIN4tama8DrawableEEE4baseEv>:
      base() const
 8004608:	b480      	push	{r7}
 800460a:	b083      	sub	sp, #12
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4618      	mov	r0, r3
 8004616:	370c      	adds	r7, #12
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr

08004620 <_ZNSt12__shared_ptrIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0EEC1EOS4_>:
      __shared_ptr(__shared_ptr&& __r) noexcept
 8004620:	b580      	push	{r7, lr}
 8004622:	b082      	sub	sp, #8
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	6039      	str	r1, [r7, #0]
      : _M_ptr(__r._M_ptr), _M_refcount()
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	601a      	str	r2, [r3, #0]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	3304      	adds	r3, #4
 8004636:	4618      	mov	r0, r3
 8004638:	f7fc fa56 	bl	8000ae8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	_M_refcount._M_swap(__r._M_refcount);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	1d1a      	adds	r2, r3, #4
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	3304      	adds	r3, #4
 8004644:	4619      	mov	r1, r3
 8004646:	4610      	mov	r0, r2
 8004648:	f7fc fa91 	bl	8000b6e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	__r._M_ptr = 0;
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	2200      	movs	r2, #0
 8004650:	601a      	str	r2, [r3, #0]
      }
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	4618      	mov	r0, r3
 8004656:	3708      	adds	r7, #8
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}

0800465c <_ZNSt16allocator_traitsISaISt10shared_ptrIN4tama8DrawableEEEE37select_on_container_copy_constructionERKS4_>:
       *  @brief  Obtain an allocator to use when copying a container.
       *  @param  __rhs  An allocator.
       *  @return @c __rhs
      */
      static allocator_type
      select_on_container_copy_construction(const allocator_type& __rhs)
 800465c:	b580      	push	{r7, lr}
 800465e:	b082      	sub	sp, #8
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 8004666:	6839      	ldr	r1, [r7, #0]
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f000 f804 	bl	8004676 <_ZNSaISt10shared_ptrIN4tama8DrawableEEEC1ERKS3_>
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	3708      	adds	r7, #8
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}

08004676 <_ZNSaISt10shared_ptrIN4tama8DrawableEEEC1ERKS3_>:
      allocator(const allocator& __a) throw()
 8004676:	b580      	push	{r7, lr}
 8004678:	b082      	sub	sp, #8
 800467a:	af00      	add	r7, sp, #0
 800467c:	6078      	str	r0, [r7, #4]
 800467e:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8004680:	6839      	ldr	r1, [r7, #0]
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f000 f868 	bl	8004758 <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama8DrawableEEEC1ERKS5_>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	4618      	mov	r0, r3
 800468c:	3708      	adds	r7, #8
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}

08004692 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE12_Vector_implC1ERKS4_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 8004692:	b580      	push	{r7, lr}
 8004694:	b082      	sub	sp, #8
 8004696:	af00      	add	r7, sp, #0
 8004698:	6078      	str	r0, [r7, #4]
 800469a:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
 800469c:	6839      	ldr	r1, [r7, #0]
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f7ff ffe9 	bl	8004676 <_ZNSaISt10shared_ptrIN4tama8DrawableEEEC1ERKS3_>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2200      	movs	r2, #0
 80046a8:	601a      	str	r2, [r3, #0]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	605a      	str	r2, [r3, #4]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2200      	movs	r2, #0
 80046b4:	609a      	str	r2, [r3, #8]
	{ }
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4618      	mov	r0, r3
 80046ba:	3708      	adds	r7, #8
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}

080046c0 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b082      	sub	sp, #8
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 80046ca:	6839      	ldr	r1, [r7, #0]
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f7ff f850 	bl	8003772 <_ZNSt12_Vector_baseISt10shared_ptrIN4tama8DrawableEESaIS3_EE11_M_allocateEj>
 80046d2:	4602      	mov	r2, r0
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	00db      	lsls	r3, r3, #3
 80046e8:	441a      	add	r2, r3
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	609a      	str	r2, [r3, #8]
      }
 80046ee:	bf00      	nop
 80046f0:	3708      	adds	r7, #8
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}

080046f6 <_ZN9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEEC1ERKS6_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80046f6:	b480      	push	{r7}
 80046f8:	b083      	sub	sp, #12
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	6078      	str	r0, [r7, #4]
 80046fe:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	601a      	str	r2, [r3, #0]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	4618      	mov	r0, r3
 800470c:	370c      	adds	r7, #12
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr

08004716 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrIN4tama8DrawableEESt6vectorIS5_SaIS5_EEEEPS5_ET0_T_SE_SD_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8004716:	b580      	push	{r7, lr}
 8004718:	b086      	sub	sp, #24
 800471a:	af00      	add	r7, sp, #0
 800471c:	60f8      	str	r0, [r7, #12]
 800471e:	60b9      	str	r1, [r7, #8]
 8004720:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8004722:	2301      	movs	r3, #1
 8004724:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	68b9      	ldr	r1, [r7, #8]
 800472a:	68f8      	ldr	r0, [r7, #12]
 800472c:	f000 f820 	bl	8004770 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrIN4tama8DrawableEESt6vectorIS7_SaIS7_EEEEPS7_EET0_T_SG_SF_>
 8004730:	4603      	mov	r3, r0
    }
 8004732:	4618      	mov	r0, r3
 8004734:	3718      	adds	r7, #24
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
	...

0800473c <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800473c:	b480      	push	{r7}
 800473e:	b083      	sub	sp, #12
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8004744:	4b03      	ldr	r3, [pc, #12]	; (8004754 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv+0x18>)
 8004746:	4618      	mov	r0, r3
 8004748:	370c      	adds	r7, #12
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr
 8004752:	bf00      	nop
 8004754:	0ccccccc 	.word	0x0ccccccc

08004758 <_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN4tama8DrawableEEEC1ERKS5_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8004758:	b480      	push	{r7}
 800475a:	b083      	sub	sp, #12
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
 8004760:	6039      	str	r1, [r7, #0]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4618      	mov	r0, r3
 8004766:	370c      	adds	r7, #12
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr

08004770 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrIN4tama8DrawableEESt6vectorIS7_SaIS7_EEEEPS7_EET0_T_SG_SF_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8004770:	b590      	push	{r4, r7, lr}
 8004772:	b087      	sub	sp, #28
 8004774:	af00      	add	r7, sp, #0
 8004776:	60f8      	str	r0, [r7, #12]
 8004778:	60b9      	str	r1, [r7, #8]
 800477a:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 8004780:	f107 0208 	add.w	r2, r7, #8
 8004784:	f107 030c 	add.w	r3, r7, #12
 8004788:	4611      	mov	r1, r2
 800478a:	4618      	mov	r0, r3
 800478c:	f000 f81f 	bl	80047ce <_ZN9__gnu_cxxneIPKSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEEEbRKNS_17__normal_iteratorIT_T0_EESF_>
 8004790:	4603      	mov	r3, r0
 8004792:	2b00      	cmp	r3, #0
 8004794:	d016      	beq.n	80047c4 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrIN4tama8DrawableEESt6vectorIS7_SaIS7_EEEEPS7_EET0_T_SG_SF_+0x54>
		std::_Construct(std::__addressof(*__cur), *__first);
 8004796:	6978      	ldr	r0, [r7, #20]
 8004798:	f7ff f876 	bl	8003888 <_ZSt11__addressofISt10shared_ptrIN4tama8DrawableEEEPT_RS4_>
 800479c:	4604      	mov	r4, r0
 800479e:	f107 030c 	add.w	r3, r7, #12
 80047a2:	4618      	mov	r0, r3
 80047a4:	f000 f83c 	bl	8004820 <_ZNK9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEEdeEv>
 80047a8:	4603      	mov	r3, r0
 80047aa:	4619      	mov	r1, r3
 80047ac:	4620      	mov	r0, r4
 80047ae:	f000 f843 	bl	8004838 <_ZSt10_ConstructISt10shared_ptrIN4tama8DrawableEEJRKS3_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 80047b2:	f107 030c 	add.w	r3, r7, #12
 80047b6:	4618      	mov	r0, r3
 80047b8:	f000 f821 	bl	80047fe <_ZN9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEEppEv>
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	3308      	adds	r3, #8
 80047c0:	617b      	str	r3, [r7, #20]
 80047c2:	e7dd      	b.n	8004780 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrIN4tama8DrawableEESt6vectorIS7_SaIS7_EEEEPS7_EET0_T_SG_SF_+0x10>
	      return __cur;
 80047c4:	697b      	ldr	r3, [r7, #20]
	}
 80047c6:	4618      	mov	r0, r3
 80047c8:	371c      	adds	r7, #28
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd90      	pop	{r4, r7, pc}

080047ce <_ZN9__gnu_cxxneIPKSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEEEbRKNS_17__normal_iteratorIT_T0_EESF_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 80047ce:	b590      	push	{r4, r7, lr}
 80047d0:	b083      	sub	sp, #12
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	6078      	str	r0, [r7, #4]
 80047d6:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f000 f846 	bl	800486a <_ZNK9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEE4baseEv>
 80047de:	4603      	mov	r3, r0
 80047e0:	681c      	ldr	r4, [r3, #0]
 80047e2:	6838      	ldr	r0, [r7, #0]
 80047e4:	f000 f841 	bl	800486a <_ZNK9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEE4baseEv>
 80047e8:	4603      	mov	r3, r0
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	429c      	cmp	r4, r3
 80047ee:	bf14      	ite	ne
 80047f0:	2301      	movne	r3, #1
 80047f2:	2300      	moveq	r3, #0
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	4618      	mov	r0, r3
 80047f8:	370c      	adds	r7, #12
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd90      	pop	{r4, r7, pc}

080047fe <_ZN9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 80047fe:	b480      	push	{r7}
 8004800:	b083      	sub	sp, #12
 8004802:	af00      	add	r7, sp, #0
 8004804:	6078      	str	r0, [r7, #4]
	++_M_current;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f103 0208 	add.w	r2, r3, #8
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	601a      	str	r2, [r3, #0]
	return *this;
 8004812:	687b      	ldr	r3, [r7, #4]
      }
 8004814:	4618      	mov	r0, r3
 8004816:	370c      	adds	r7, #12
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr

08004820 <_ZNK9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8004820:	b480      	push	{r7}
 8004822:	b083      	sub	sp, #12
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4618      	mov	r0, r3
 800482e:	370c      	adds	r7, #12
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr

08004838 <_ZSt10_ConstructISt10shared_ptrIN4tama8DrawableEEJRKS3_EEvPT_DpOT0_>:
    _Construct(_T1* __p, _Args&&... __args)
 8004838:	b590      	push	{r4, r7, lr}
 800483a:	b083      	sub	sp, #12
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	6039      	str	r1, [r7, #0]
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
 8004842:	6838      	ldr	r0, [r7, #0]
 8004844:	f7fe fdc1 	bl	80033ca <_ZSt7forwardIRKSt10shared_ptrIN4tama8DrawableEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8004848:	4604      	mov	r4, r0
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4619      	mov	r1, r3
 800484e:	2008      	movs	r0, #8
 8004850:	f7fc f9cc 	bl	8000bec <_ZnwjPv>
 8004854:	4603      	mov	r3, r0
 8004856:	2b00      	cmp	r3, #0
 8004858:	d003      	beq.n	8004862 <_ZSt10_ConstructISt10shared_ptrIN4tama8DrawableEEJRKS3_EEvPT_DpOT0_+0x2a>
 800485a:	4621      	mov	r1, r4
 800485c:	4618      	mov	r0, r3
 800485e:	f7fe fbcf 	bl	8003000 <_ZNSt10shared_ptrIN4tama8DrawableEEC1ERKS2_>
 8004862:	bf00      	nop
 8004864:	370c      	adds	r7, #12
 8004866:	46bd      	mov	sp, r7
 8004868:	bd90      	pop	{r4, r7, pc}

0800486a <_ZNK9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrIN4tama8DrawableEESt6vectorIS4_SaIS4_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800486a:	b480      	push	{r7}
 800486c:	b083      	sub	sp, #12
 800486e:	af00      	add	r7, sp, #0
 8004870:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4618      	mov	r0, r3
 8004876:	370c      	adds	r7, #12
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr

08004880 <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:
      ~_Sp_counted_deleter() noexcept { }
 8004880:	b580      	push	{r7, lr}
 8004882:	b082      	sub	sp, #8
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	4a08      	ldr	r2, [pc, #32]	; (80048ac <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev+0x2c>)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	601a      	str	r2, [r3, #0]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	330c      	adds	r3, #12
 8004892:	4618      	mov	r0, r3
 8004894:	f7ff fbec 	bl	8004070 <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	4618      	mov	r0, r3
 800489c:	f7fc fffe 	bl	800189c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	4618      	mov	r0, r3
 80048a4:	3708      	adds	r7, #8
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	0801167c 	.word	0x0801167c

080048b0 <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b082      	sub	sp, #8
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f7ff ffe1 	bl	8004880 <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
 80048be:	2114      	movs	r1, #20
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f00b fdae 	bl	8010422 <_ZdlPvj>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4618      	mov	r0, r3
 80048ca:	3708      	adds	r7, #8
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}

080048d0 <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      _M_dispose() noexcept
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b082      	sub	sp, #8
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
      { _M_impl._M_del()(_M_impl._M_ptr); }
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	330c      	adds	r3, #12
 80048dc:	4618      	mov	r0, r3
 80048de:	f000 f840 	bl	8004962 <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>
 80048e2:	4602      	mov	r2, r0
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	691b      	ldr	r3, [r3, #16]
 80048e8:	4619      	mov	r1, r3
 80048ea:	4610      	mov	r0, r2
 80048ec:	f7ff fc0f 	bl	800410e <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>
 80048f0:	bf00      	nop
 80048f2:	3708      	adds	r7, #8
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}

080048f8 <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      _M_destroy() noexcept
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b086      	sub	sp, #24
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	330c      	adds	r3, #12
 8004904:	4618      	mov	r0, r3
 8004906:	f000 f839 	bl	800497c <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>
 800490a:	4602      	mov	r2, r0
 800490c:	f107 0314 	add.w	r3, r7, #20
 8004910:	4611      	mov	r1, r2
 8004912:	4618      	mov	r0, r3
 8004914:	f7ff fb44 	bl	8003fa0 <_ZNSaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 8004918:	f107 0114 	add.w	r1, r7, #20
 800491c:	f107 030c 	add.w	r3, r7, #12
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	4618      	mov	r0, r3
 8004924:	f7ff fcfd 	bl	8004322 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
	this->~_Sp_counted_deleter();
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	f7ff ffa9 	bl	8004880 <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 800492e:	f107 030c 	add.w	r3, r7, #12
 8004932:	4618      	mov	r0, r3
 8004934:	f7ff fb60 	bl	8003ff8 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	__allocator_type __a(_M_impl._M_alloc());
 8004938:	f107 0314 	add.w	r3, r7, #20
 800493c:	4618      	mov	r0, r3
 800493e:	f7ff fb3c 	bl	8003fba <_ZNSaISt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
      }
 8004942:	bf00      	nop
 8004944:	3718      	adds	r7, #24
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}

0800494a <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept
 800494a:	b480      	push	{r7}
 800494c:	b083      	sub	sp, #12
 800494e:	af00      	add	r7, sp, #0
 8004950:	6078      	str	r0, [r7, #4]
 8004952:	6039      	str	r1, [r7, #0]
        return nullptr;
 8004954:	2300      	movs	r3, #0
      }
 8004956:	4618      	mov	r0, r3
 8004958:	370c      	adds	r7, #12
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr

08004962 <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>:
	_Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }
 8004962:	b580      	push	{r7, lr}
 8004964:	b082      	sub	sp, #8
 8004966:	af00      	add	r7, sp, #0
 8004968:	6078      	str	r0, [r7, #4]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	4618      	mov	r0, r3
 800496e:	f000 f813 	bl	8004998 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>
 8004972:	4603      	mov	r3, r0
 8004974:	4618      	mov	r0, r3
 8004976:	3708      	adds	r7, #8
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}

0800497c <_ZNSt19_Sp_counted_deleterIPN4tama5SceneENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }
 800497c:	b580      	push	{r7, lr}
 800497e:	b082      	sub	sp, #8
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	3301      	adds	r3, #1
 8004988:	4618      	mov	r0, r3
 800498a:	f000 f810 	bl	80049ae <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama5SceneEELb1EE6_S_getERS3_>
 800498e:	4603      	mov	r3, r0
 8004990:	4618      	mov	r0, r3
 8004992:	3708      	adds	r7, #8
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}

08004998 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>:
      _S_get(_Sp_ebo_helper& __eboh)
 8004998:	b480      	push	{r7}
 800499a:	b083      	sub	sp, #12
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
      { return __eboh._M_tp; }
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	4618      	mov	r0, r3
 80049a4:	370c      	adds	r7, #12
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr

080049ae <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama5SceneEELb1EE6_S_getERS3_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 80049ae:	b480      	push	{r7}
 80049b0:	b083      	sub	sp, #12
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4618      	mov	r0, r3
 80049ba:	370c      	adds	r7, #12
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr

080049c4 <_ZNSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_ptr() = default;
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b082      	sub	sp, #8
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	3304      	adds	r3, #4
 80049d0:	4618      	mov	r0, r3
 80049d2:	f7fb ffc1 	bl	8000958 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	4618      	mov	r0, r3
 80049da:	3708      	adds	r7, #8
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}

080049e0 <_ZNSt10shared_ptrIN4tama16Nokia5510DisplayEED1Ev>:
    class shared_ptr : public __shared_ptr<_Tp>
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b082      	sub	sp, #8
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	4618      	mov	r0, r3
 80049ec:	f7ff ffea 	bl	80049c4 <_ZNSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	4618      	mov	r0, r3
 80049f4:	3708      	adds	r7, #8
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}

080049fa <_ZNSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
 80049fa:	b580      	push	{r7, lr}
 80049fc:	b082      	sub	sp, #8
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	6078      	str	r0, [r7, #4]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	3304      	adds	r3, #4
 8004a06:	4618      	mov	r0, r3
 8004a08:	f7fb ffa6 	bl	8000958 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3708      	adds	r7, #8
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}

08004a16 <_ZNSt10shared_ptrIN4tama18Stm32TextureLoaderEED1Ev>:
 8004a16:	b580      	push	{r7, lr}
 8004a18:	b082      	sub	sp, #8
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	6078      	str	r0, [r7, #4]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	4618      	mov	r0, r3
 8004a22:	f7ff ffea 	bl	80049fa <_ZNSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3708      	adds	r7, #8
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}

08004a30 <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b082      	sub	sp, #8
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	3304      	adds	r3, #4
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f7fb ff8b 	bl	8000958 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4618      	mov	r0, r3
 8004a46:	3708      	adds	r7, #8
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}

08004a4c <_ZNSt10shared_ptrIN4tama27Nokia5110DisplayDataManagerEED1Ev>:
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b082      	sub	sp, #8
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	4618      	mov	r0, r3
 8004a58:	f7ff ffea 	bl	8004a30 <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3708      	adds	r7, #8
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
	...

08004a68 <_ZN4tama4Main3runEv>:
#include "../STM32F411Disco-drivers/texture-loader/Stm32TextureLoader.h"
#include "../Core/assets/egg.texture.h"
#include "../Core/ui/display/drawable/text/Text.h"

void tama::Main::run()
{
 8004a68:	b5b0      	push	{r4, r5, r7, lr}
 8004a6a:	b0c2      	sub	sp, #264	; 0x108
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	1d3b      	adds	r3, r7, #4
 8004a70:	6018      	str	r0, [r3, #0]
    DisplayConfig displayConfig = getDefaultNokia5110DisplayConfig();
 8004a72:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8004a76:	1d3b      	adds	r3, r7, #4
 8004a78:	6819      	ldr	r1, [r3, #0]
 8004a7a:	4610      	mov	r0, r2
 8004a7c:	f000 f9a0 	bl	8004dc0 <_ZN4tama4Main32getDefaultNokia5110DisplayConfigEv>
    std::shared_ptr<Display> display = std::make_shared<Nokia5510Display>(displayConfig);
 8004a80:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004a84:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8004a88:	4611      	mov	r1, r2
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f000 f9d3 	bl	8004e36 <_ZSt11make_sharedIN4tama16Nokia5510DisplayEJRNS0_13DisplayConfigEEESt10shared_ptrIT_EDpOT0_>
 8004a90:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8004a94:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004a98:	4611      	mov	r1, r2
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f000 f9f3 	bl	8004e86 <_ZNSt10shared_ptrIN4tama7DisplayEEC1INS0_16Nokia5510DisplayEvEEOS_IT_E>
 8004aa0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f7ff ff9b 	bl	80049e0 <_ZNSt10shared_ptrIN4tama16Nokia5510DisplayEED1Ev>
    std::shared_ptr<TextureLoader> textureLoader = std::make_shared<Stm32TextureLoader>();
 8004aaa:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f000 f9fc 	bl	8004eac <_ZSt11make_sharedIN4tama18Stm32TextureLoaderEJEESt10shared_ptrIT_EDpOT0_>
 8004ab4:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004ab8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004abc:	4611      	mov	r1, r2
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f000 fa18 	bl	8004ef4 <_ZNSt10shared_ptrIN4tama13TextureLoaderEEC1INS0_18Stm32TextureLoaderEvEEOS_IT_E>
 8004ac4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f7ff ffa4 	bl	8004a16 <_ZNSt10shared_ptrIN4tama18Stm32TextureLoaderEED1Ev>
    std::shared_ptr<DisplayDataManager> dataManager = std::make_shared<Nokia5110DisplayDataManager>();
 8004ace:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f000 fa21 	bl	8004f1a <_ZSt11make_sharedIN4tama27Nokia5110DisplayDataManagerEJEESt10shared_ptrIT_EDpOT0_>
 8004ad8:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8004adc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004ae0:	4611      	mov	r1, r2
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f000 fa3d 	bl	8004f62 <_ZNSt10shared_ptrIN4tama18DisplayDataManagerEEC1INS0_27Nokia5110DisplayDataManagerEvEEOS_IT_E>
 8004ae8:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004aec:	4618      	mov	r0, r3
 8004aee:	f7ff ffad 	bl	8004a4c <_ZNSt10shared_ptrIN4tama27Nokia5110DisplayDataManagerEED1Ev>
    std::shared_ptr<Scene> scene = std::make_shared<Scene>();
 8004af2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004af6:	4618      	mov	r0, r3
 8004af8:	f000 fa46 	bl	8004f88 <_ZSt11make_sharedIN4tama5SceneEJEESt10shared_ptrIT_EDpOT0_>

    auto textureData1 = textureLoader->load(tama::asset::egg1);
 8004afc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004b00:	4618      	mov	r0, r3
 8004b02:	f000 fa5a 	bl	8004fba <_ZNKSt19__shared_ptr_accessIN4tama13TextureLoaderELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8004b06:	4601      	mov	r1, r0
 8004b08:	680b      	ldr	r3, [r1, #0]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8004b10:	4aa8      	ldr	r2, [pc, #672]	; (8004db4 <_ZN4tama4Main3runEv+0x34c>)
 8004b12:	4798      	blx	r3
    auto textureData2 = textureLoader->load(tama::asset::egg2);
 8004b14:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f000 fa4e 	bl	8004fba <_ZNKSt19__shared_ptr_accessIN4tama13TextureLoaderELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8004b1e:	4601      	mov	r1, r0
 8004b20:	680b      	ldr	r3, [r1, #0]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8004b28:	4aa3      	ldr	r2, [pc, #652]	; (8004db8 <_ZN4tama4Main3runEv+0x350>)
 8004b2a:	4798      	blx	r3

    std::shared_ptr<Sprite> sprite = std::make_shared<Sprite>(textureData1, Vec2d(1, 37));
 8004b2c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004b30:	2225      	movs	r2, #37	; 0x25
 8004b32:	2101      	movs	r1, #1
 8004b34:	4618      	mov	r0, r3
 8004b36:	f7fb fcef 	bl	8000518 <_ZN4tama5Vec2dC1Eii>
 8004b3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b3e:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8004b42:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8004b46:	4618      	mov	r0, r3
 8004b48:	f000 fa59 	bl	8004ffe <_ZSt11make_sharedIN4tama6SpriteEJRSt10shared_ptrINS0_7TextureEENS0_5Vec2dEEES2_IT_EDpOT0_>
    std::shared_ptr<Sprite> sprite2 = std::make_shared<Sprite>(textureData2, Vec2d(64, 37));
 8004b4c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004b50:	2225      	movs	r2, #37	; 0x25
 8004b52:	2140      	movs	r1, #64	; 0x40
 8004b54:	4618      	mov	r0, r3
 8004b56:	f7fb fcdf 	bl	8000518 <_ZN4tama5Vec2dC1Eii>
 8004b5a:	f107 031c 	add.w	r3, r7, #28
 8004b5e:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8004b62:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8004b66:	4618      	mov	r0, r3
 8004b68:	f000 fa49 	bl	8004ffe <_ZSt11make_sharedIN4tama6SpriteEJRSt10shared_ptrINS0_7TextureEENS0_5Vec2dEEES2_IT_EDpOT0_>
    std::shared_ptr<Text> text = std::make_shared<Text>(Vec2d(1, 2));
 8004b6c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8004b70:	2202      	movs	r2, #2
 8004b72:	2101      	movs	r1, #1
 8004b74:	4618      	mov	r0, r3
 8004b76:	f7fb fccf 	bl	8000518 <_ZN4tama5Vec2dC1Eii>
 8004b7a:	f107 0314 	add.w	r3, r7, #20
 8004b7e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8004b82:	4611      	mov	r1, r2
 8004b84:	4618      	mov	r0, r3
 8004b86:	f000 fa5c 	bl	8005042 <_ZSt11make_sharedIN4tama4TextEJNS0_5Vec2dEEESt10shared_ptrIT_EDpOT0_>

    text->setText("LOOKS LIKE\nIT WORKS\nPERFECTLY");
 8004b8a:	f107 0314 	add.w	r3, r7, #20
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f000 fa74 	bl	800507c <_ZNKSt19__shared_ptr_accessIN4tama4TextELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8004b94:	4604      	mov	r4, r0
 8004b96:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f00b fc6f 	bl	801047e <_ZNSaIcEC1Ev>
 8004ba0:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8004ba4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004ba8:	4984      	ldr	r1, [pc, #528]	; (8004dbc <_ZN4tama4Main3runEv+0x354>)
 8004baa:	4618      	mov	r0, r3
 8004bac:	f00b fe00 	bl	80107b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8004bb0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004bb4:	4619      	mov	r1, r3
 8004bb6:	4620      	mov	r0, r4
 8004bb8:	f7fc fa87 	bl	80010ca <_ZN4tama4Text7setTextENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8004bbc:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f00b fd2c 	bl	801061e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8004bc6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f00b fc58 	bl	8010480 <_ZNSaIcED1Ev>

    scene->addDrawable(sprite);
 8004bd0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f000 fa5d 	bl	8005094 <_ZNKSt19__shared_ptr_accessIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8004bda:	4604      	mov	r4, r0
 8004bdc:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8004be0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004be4:	4611      	mov	r1, r2
 8004be6:	4618      	mov	r0, r3
 8004be8:	f000 fa60 	bl	80050ac <_ZNSt10shared_ptrIN4tama8DrawableEEC1INS0_6SpriteEvEERKS_IT_E>
 8004bec:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004bf0:	4619      	mov	r1, r3
 8004bf2:	4620      	mov	r0, r4
 8004bf4:	f7fe f9ad 	bl	8002f52 <_ZN4tama5Scene11addDrawableESt10shared_ptrINS_8DrawableEE>
 8004bf8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f7fe fa0f 	bl	8003020 <_ZNSt10shared_ptrIN4tama8DrawableEED1Ev>
    scene->addDrawable(sprite2);
 8004c02:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004c06:	4618      	mov	r0, r3
 8004c08:	f000 fa44 	bl	8005094 <_ZNKSt19__shared_ptr_accessIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8004c0c:	4604      	mov	r4, r0
 8004c0e:	f107 021c 	add.w	r2, r7, #28
 8004c12:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004c16:	4611      	mov	r1, r2
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f000 fa47 	bl	80050ac <_ZNSt10shared_ptrIN4tama8DrawableEEC1INS0_6SpriteEvEERKS_IT_E>
 8004c1e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004c22:	4619      	mov	r1, r3
 8004c24:	4620      	mov	r0, r4
 8004c26:	f7fe f994 	bl	8002f52 <_ZN4tama5Scene11addDrawableESt10shared_ptrINS_8DrawableEE>
 8004c2a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f7fe f9f6 	bl	8003020 <_ZNSt10shared_ptrIN4tama8DrawableEED1Ev>
    scene->addDrawable(text);
 8004c34:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f000 fa2b 	bl	8005094 <_ZNKSt19__shared_ptr_accessIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8004c3e:	4604      	mov	r4, r0
 8004c40:	f107 0214 	add.w	r2, r7, #20
 8004c44:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004c48:	4611      	mov	r1, r2
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f000 fa3e 	bl	80050cc <_ZNSt10shared_ptrIN4tama8DrawableEEC1INS0_4TextEvEERKS_IT_E>
 8004c50:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004c54:	4619      	mov	r1, r3
 8004c56:	4620      	mov	r0, r4
 8004c58:	f7fe f97b 	bl	8002f52 <_ZN4tama5Scene11addDrawableESt10shared_ptrINS_8DrawableEE>
 8004c5c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004c60:	4618      	mov	r0, r3
 8004c62:	f7fe f9dd 	bl	8003020 <_ZNSt10shared_ptrIN4tama8DrawableEED1Ev>

    for (unsigned i = 0; i < 3000; ++i)
 8004c66:	2300      	movs	r3, #0
 8004c68:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004c6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c70:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8004c74:	4293      	cmp	r3, r2
 8004c76:	f200 809b 	bhi.w	8004db0 <_ZN4tama4Main3runEv+0x348>
    {
        HAL_Delay(100);
 8004c7a:	2064      	movs	r0, #100	; 0x64
 8004c7c:	f004 fcea 	bl	8009654 <HAL_Delay>
        sprite->setTexture(i % 2 ? textureData2 : textureData1);
 8004c80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c84:	4618      	mov	r0, r3
 8004c86:	f000 fa31 	bl	80050ec <_ZNKSt19__shared_ptr_accessIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8004c8a:	4605      	mov	r5, r0
 8004c8c:	682b      	ldr	r3, [r5, #0]
 8004c8e:	681c      	ldr	r4, [r3, #0]
 8004c90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c94:	f003 0301 	and.w	r3, r3, #1
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d002      	beq.n	8004ca2 <_ZN4tama4Main3runEv+0x23a>
 8004c9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004ca0:	e001      	b.n	8004ca6 <_ZN4tama4Main3runEv+0x23e>
 8004ca2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004ca6:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 8004caa:	4619      	mov	r1, r3
 8004cac:	4610      	mov	r0, r2
 8004cae:	f7fb fcfc 	bl	80006aa <_ZNSt10shared_ptrIN4tama7TextureEEC1ERKS2_>
 8004cb2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004cb6:	4619      	mov	r1, r3
 8004cb8:	4628      	mov	r0, r5
 8004cba:	47a0      	blx	r4
 8004cbc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f7fc f8de 	bl	8000e82 <_ZNSt10shared_ptrIN4tama7TextureEED1Ev>
        sprite2->setTexture(i % 2 ? textureData1 : textureData2);
 8004cc6:	f107 031c 	add.w	r3, r7, #28
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f000 fa0e 	bl	80050ec <_ZNKSt19__shared_ptr_accessIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8004cd0:	4605      	mov	r5, r0
 8004cd2:	682b      	ldr	r3, [r5, #0]
 8004cd4:	681c      	ldr	r4, [r3, #0]
 8004cd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004cda:	f003 0301 	and.w	r3, r3, #1
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d002      	beq.n	8004ce8 <_ZN4tama4Main3runEv+0x280>
 8004ce2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004ce6:	e001      	b.n	8004cec <_ZN4tama4Main3runEv+0x284>
 8004ce8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004cec:	f107 02ec 	add.w	r2, r7, #236	; 0xec
 8004cf0:	4619      	mov	r1, r3
 8004cf2:	4610      	mov	r0, r2
 8004cf4:	f7fb fcd9 	bl	80006aa <_ZNSt10shared_ptrIN4tama7TextureEEC1ERKS2_>
 8004cf8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004cfc:	4619      	mov	r1, r3
 8004cfe:	4628      	mov	r0, r5
 8004d00:	47a0      	blx	r4
 8004d02:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004d06:	4618      	mov	r0, r3
 8004d08:	f7fc f8bb 	bl	8000e82 <_ZNSt10shared_ptrIN4tama7TextureEED1Ev>
        text->move(Vec2d(0, i % 4 > 1 ? 1 : -1));
 8004d0c:	f107 0314 	add.w	r3, r7, #20
 8004d10:	4618      	mov	r0, r3
 8004d12:	f000 f9b3 	bl	800507c <_ZNKSt19__shared_ptr_accessIN4tama4TextELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8004d16:	4605      	mov	r5, r0
 8004d18:	682b      	ldr	r3, [r5, #0]
 8004d1a:	3310      	adds	r3, #16
 8004d1c:	681c      	ldr	r4, [r3, #0]
 8004d1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d22:	f003 0303 	and.w	r3, r3, #3
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d901      	bls.n	8004d2e <_ZN4tama4Main3runEv+0x2c6>
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	e001      	b.n	8004d32 <_ZN4tama4Main3runEv+0x2ca>
 8004d2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004d32:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8004d36:	2100      	movs	r1, #0
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f7fb fbed 	bl	8000518 <_ZN4tama5Vec2dC1Eii>
 8004d3e:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8004d42:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004d46:	4628      	mov	r0, r5
 8004d48:	47a0      	blx	r4
        auto sceneData = dataManager->getActiveSceneDisplayData(scene->getSceneData());
 8004d4a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f000 f9d8 	bl	8005104 <_ZNKSt19__shared_ptr_accessIN4tama18DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8004d54:	4605      	mov	r5, r0
 8004d56:	682b      	ldr	r3, [r5, #0]
 8004d58:	681c      	ldr	r4, [r3, #0]
 8004d5a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f000 f998 	bl	8005094 <_ZNKSt19__shared_ptr_accessIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8004d64:	4602      	mov	r2, r0
 8004d66:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8004d6a:	4611      	mov	r1, r2
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f7fe f964 	bl	800303a <_ZN4tama5Scene12getSceneDataEv>
 8004d72:	f107 0308 	add.w	r3, r7, #8
 8004d76:	f107 02fc 	add.w	r2, r7, #252	; 0xfc
 8004d7a:	4629      	mov	r1, r5
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	47a0      	blx	r4
 8004d80:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8004d84:	4618      	mov	r0, r3
 8004d86:	f7fc f87c 	bl	8000e82 <_ZNSt10shared_ptrIN4tama7TextureEED1Ev>
        display->setData(sceneData);
 8004d8a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f000 f9c4 	bl	800511c <_ZNKSt19__shared_ptr_accessIN4tama7DisplayELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8004d94:	4602      	mov	r2, r0
 8004d96:	6813      	ldr	r3, [r2, #0]
 8004d98:	3304      	adds	r3, #4
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f107 0108 	add.w	r1, r7, #8
 8004da0:	4610      	mov	r0, r2
 8004da2:	4798      	blx	r3
    for (unsigned i = 0; i < 3000; ++i)
 8004da4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004da8:	3301      	adds	r3, #1
 8004daa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004dae:	e75d      	b.n	8004c6c <_ZN4tama4Main3runEv+0x204>
    }

    while (true)
 8004db0:	e7fe      	b.n	8004db0 <_ZN4tama4Main3runEv+0x348>
 8004db2:	bf00      	nop
 8004db4:	2000014c 	.word	0x2000014c
 8004db8:	20000158 	.word	0x20000158
 8004dbc:	08010aec 	.word	0x08010aec

08004dc0 <_ZN4tama4Main32getDefaultNokia5110DisplayConfigEv>:
    {}

}

tama::DisplayConfig tama::Main::getDefaultNokia5110DisplayConfig()
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b083      	sub	sp, #12
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	6039      	str	r1, [r7, #0]
    DisplayConfig cfg;
    cfg.spi = &hspi1;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4a10      	ldr	r2, [pc, #64]	; (8004e10 <_ZN4tama4Main32getDefaultNokia5110DisplayConfigEv+0x50>)
 8004dce:	601a      	str	r2, [r3, #0]
    cfg.reset_port = RST_GPIO_Port;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	4a10      	ldr	r2, [pc, #64]	; (8004e14 <_ZN4tama4Main32getDefaultNokia5110DisplayConfigEv+0x54>)
 8004dd4:	605a      	str	r2, [r3, #4]
    cfg.reset_pin = RST_Pin;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2280      	movs	r2, #128	; 0x80
 8004dda:	811a      	strh	r2, [r3, #8]
    cfg.bl_port = BL_GPIO_Port;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	4a0d      	ldr	r2, [pc, #52]	; (8004e14 <_ZN4tama4Main32getDefaultNokia5110DisplayConfigEv+0x54>)
 8004de0:	60da      	str	r2, [r3, #12]
    cfg.bl_pin = BL_Pin;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004de8:	821a      	strh	r2, [r3, #16]
    cfg.dc_port = DC_GPIO_Port;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	4a0a      	ldr	r2, [pc, #40]	; (8004e18 <_ZN4tama4Main32getDefaultNokia5110DisplayConfigEv+0x58>)
 8004dee:	615a      	str	r2, [r3, #20]
    cfg.dc_pin = DC_Pin;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2220      	movs	r2, #32
 8004df4:	841a      	strh	r2, [r3, #32]
    cfg.ce_port = CE_GPIO_Port;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	4a08      	ldr	r2, [pc, #32]	; (8004e1c <_ZN4tama4Main32getDefaultNokia5110DisplayConfigEv+0x5c>)
 8004dfa:	61da      	str	r2, [r3, #28]
    cfg.ce_pin = CE_Pin;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2202      	movs	r2, #2
 8004e00:	831a      	strh	r2, [r3, #24]
    return cfg;
 8004e02:	bf00      	nop
}
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	370c      	adds	r7, #12
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0e:	4770      	bx	lr
 8004e10:	20000310 	.word	0x20000310
 8004e14:	40021000 	.word	0x40021000
 8004e18:	40020800 	.word	0x40020800
 8004e1c:	40020400 	.word	0x40020400

08004e20 <_ZSt7forwardIRN4tama13DisplayConfigEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004e20:	b480      	push	{r7}
 8004e22:	b083      	sub	sp, #12
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	370c      	adds	r7, #12
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr

08004e36 <_ZSt11make_sharedIN4tama16Nokia5510DisplayEJRNS0_13DisplayConfigEEESt10shared_ptrIT_EDpOT0_>:
    make_shared(_Args&&... __args)
 8004e36:	b580      	push	{r7, lr}
 8004e38:	b084      	sub	sp, #16
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	6078      	str	r0, [r7, #4]
 8004e3e:	6039      	str	r1, [r7, #0]
				       std::forward<_Args>(__args)...);
 8004e40:	f107 030c 	add.w	r3, r7, #12
 8004e44:	4618      	mov	r0, r3
 8004e46:	f000 f975 	bl	8005134 <_ZNSaIN4tama16Nokia5510DisplayEEC1Ev>
 8004e4a:	6838      	ldr	r0, [r7, #0]
 8004e4c:	f7ff ffe8 	bl	8004e20 <_ZSt7forwardIRN4tama13DisplayConfigEEOT_RNSt16remove_referenceIS3_E4typeE>
 8004e50:	4602      	mov	r2, r0
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f107 010c 	add.w	r1, r7, #12
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f000 f983 	bl	8005164 <_ZSt15allocate_sharedIN4tama16Nokia5510DisplayESaIS1_EJRNS0_13DisplayConfigEEESt10shared_ptrIT_ERKT0_DpOT1_>
 8004e5e:	f107 030c 	add.w	r3, r7, #12
 8004e62:	4618      	mov	r0, r3
 8004e64:	f000 f972 	bl	800514c <_ZNSaIN4tama16Nokia5510DisplayEED1Ev>
    }
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	3710      	adds	r7, #16
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}

08004e70 <_ZSt4moveIRSt10shared_ptrIN4tama16Nokia5510DisplayEEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 8004e70:	b480      	push	{r7}
 8004e72:	b083      	sub	sp, #12
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	370c      	adds	r7, #12
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e84:	4770      	bx	lr

08004e86 <_ZNSt10shared_ptrIN4tama7DisplayEEC1INS0_16Nokia5510DisplayEvEEOS_IT_E>:
	shared_ptr(shared_ptr<_Yp>&& __r) noexcept
 8004e86:	b590      	push	{r4, r7, lr}
 8004e88:	b083      	sub	sp, #12
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	6078      	str	r0, [r7, #4]
 8004e8e:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(std::move(__r)) { }
 8004e90:	687c      	ldr	r4, [r7, #4]
 8004e92:	6838      	ldr	r0, [r7, #0]
 8004e94:	f7ff ffec 	bl	8004e70 <_ZSt4moveIRSt10shared_ptrIN4tama16Nokia5510DisplayEEEONSt16remove_referenceIT_E4typeEOS6_>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	4619      	mov	r1, r3
 8004e9c:	4620      	mov	r0, r4
 8004e9e:	f000 f974 	bl	800518a <_ZNSt12__shared_ptrIN4tama7DisplayELN9__gnu_cxx12_Lock_policyE0EEC1INS0_16Nokia5510DisplayEvEEOS_IT_LS3_0EE>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	370c      	adds	r7, #12
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd90      	pop	{r4, r7, pc}

08004eac <_ZSt11make_sharedIN4tama18Stm32TextureLoaderEJEESt10shared_ptrIT_EDpOT0_>:
    make_shared(_Args&&... __args)
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b084      	sub	sp, #16
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
				       std::forward<_Args>(__args)...);
 8004eb4:	f107 030c 	add.w	r3, r7, #12
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f000 f984 	bl	80051c6 <_ZNSaIN4tama18Stm32TextureLoaderEEC1Ev>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f107 020c 	add.w	r2, r7, #12
 8004ec4:	4611      	mov	r1, r2
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f000 f995 	bl	80051f6 <_ZSt15allocate_sharedIN4tama18Stm32TextureLoaderESaIS1_EJEESt10shared_ptrIT_ERKT0_DpOT1_>
 8004ecc:	f107 030c 	add.w	r3, r7, #12
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f000 f984 	bl	80051de <_ZNSaIN4tama18Stm32TextureLoaderEED1Ev>
    }
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	3710      	adds	r7, #16
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}

08004ede <_ZSt4moveIRSt10shared_ptrIN4tama18Stm32TextureLoaderEEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 8004ede:	b480      	push	{r7}
 8004ee0:	b083      	sub	sp, #12
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	4618      	mov	r0, r3
 8004eea:	370c      	adds	r7, #12
 8004eec:	46bd      	mov	sp, r7
 8004eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef2:	4770      	bx	lr

08004ef4 <_ZNSt10shared_ptrIN4tama13TextureLoaderEEC1INS0_18Stm32TextureLoaderEvEEOS_IT_E>:
	shared_ptr(shared_ptr<_Yp>&& __r) noexcept
 8004ef4:	b590      	push	{r4, r7, lr}
 8004ef6:	b083      	sub	sp, #12
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(std::move(__r)) { }
 8004efe:	687c      	ldr	r4, [r7, #4]
 8004f00:	6838      	ldr	r0, [r7, #0]
 8004f02:	f7ff ffec 	bl	8004ede <_ZSt4moveIRSt10shared_ptrIN4tama18Stm32TextureLoaderEEEONSt16remove_referenceIT_E4typeEOS6_>
 8004f06:	4603      	mov	r3, r0
 8004f08:	4619      	mov	r1, r3
 8004f0a:	4620      	mov	r0, r4
 8004f0c:	f000 f981 	bl	8005212 <_ZNSt12__shared_ptrIN4tama13TextureLoaderELN9__gnu_cxx12_Lock_policyE0EEC1INS0_18Stm32TextureLoaderEvEEOS_IT_LS3_0EE>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	4618      	mov	r0, r3
 8004f14:	370c      	adds	r7, #12
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd90      	pop	{r4, r7, pc}

08004f1a <_ZSt11make_sharedIN4tama27Nokia5110DisplayDataManagerEJEESt10shared_ptrIT_EDpOT0_>:
    make_shared(_Args&&... __args)
 8004f1a:	b580      	push	{r7, lr}
 8004f1c:	b084      	sub	sp, #16
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	6078      	str	r0, [r7, #4]
				       std::forward<_Args>(__args)...);
 8004f22:	f107 030c 	add.w	r3, r7, #12
 8004f26:	4618      	mov	r0, r3
 8004f28:	f000 f991 	bl	800524e <_ZNSaIN4tama27Nokia5110DisplayDataManagerEEC1Ev>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f107 020c 	add.w	r2, r7, #12
 8004f32:	4611      	mov	r1, r2
 8004f34:	4618      	mov	r0, r3
 8004f36:	f000 f9a2 	bl	800527e <_ZSt15allocate_sharedIN4tama27Nokia5110DisplayDataManagerESaIS1_EJEESt10shared_ptrIT_ERKT0_DpOT1_>
 8004f3a:	f107 030c 	add.w	r3, r7, #12
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f000 f991 	bl	8005266 <_ZNSaIN4tama27Nokia5110DisplayDataManagerEED1Ev>
    }
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	3710      	adds	r7, #16
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}

08004f4c <_ZSt4moveIRSt10shared_ptrIN4tama27Nokia5110DisplayDataManagerEEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 8004f4c:	b480      	push	{r7}
 8004f4e:	b083      	sub	sp, #12
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	4618      	mov	r0, r3
 8004f58:	370c      	adds	r7, #12
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr

08004f62 <_ZNSt10shared_ptrIN4tama18DisplayDataManagerEEC1INS0_27Nokia5110DisplayDataManagerEvEEOS_IT_E>:
	shared_ptr(shared_ptr<_Yp>&& __r) noexcept
 8004f62:	b590      	push	{r4, r7, lr}
 8004f64:	b083      	sub	sp, #12
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	6078      	str	r0, [r7, #4]
 8004f6a:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(std::move(__r)) { }
 8004f6c:	687c      	ldr	r4, [r7, #4]
 8004f6e:	6838      	ldr	r0, [r7, #0]
 8004f70:	f7ff ffec 	bl	8004f4c <_ZSt4moveIRSt10shared_ptrIN4tama27Nokia5110DisplayDataManagerEEEONSt16remove_referenceIT_E4typeEOS6_>
 8004f74:	4603      	mov	r3, r0
 8004f76:	4619      	mov	r1, r3
 8004f78:	4620      	mov	r0, r4
 8004f7a:	f000 f98e 	bl	800529a <_ZNSt12__shared_ptrIN4tama18DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EEC1INS0_27Nokia5110DisplayDataManagerEvEEOS_IT_LS3_0EE>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	4618      	mov	r0, r3
 8004f82:	370c      	adds	r7, #12
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd90      	pop	{r4, r7, pc}

08004f88 <_ZSt11make_sharedIN4tama5SceneEJEESt10shared_ptrIT_EDpOT0_>:
    make_shared(_Args&&... __args)
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b084      	sub	sp, #16
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
				       std::forward<_Args>(__args)...);
 8004f90:	f107 030c 	add.w	r3, r7, #12
 8004f94:	4618      	mov	r0, r3
 8004f96:	f7fe facf 	bl	8003538 <_ZNSaIN4tama5SceneEEC1Ev>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f107 020c 	add.w	r2, r7, #12
 8004fa0:	4611      	mov	r1, r2
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f000 f997 	bl	80052d6 <_ZSt15allocate_sharedIN4tama5SceneESaIS1_EJEESt10shared_ptrIT_ERKT0_DpOT1_>
 8004fa8:	f107 030c 	add.w	r3, r7, #12
 8004fac:	4618      	mov	r0, r3
 8004fae:	f7fe facf 	bl	8003550 <_ZNSaIN4tama5SceneEED1Ev>
    }
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	3710      	adds	r7, #16
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}

08004fba <_ZNKSt19__shared_ptr_accessIN4tama13TextureLoaderELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 8004fba:	b580      	push	{r7, lr}
 8004fbc:	b082      	sub	sp, #8
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	6078      	str	r0, [r7, #4]
	return _M_get();
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f000 f995 	bl	80052f2 <_ZNKSt19__shared_ptr_accessIN4tama13TextureLoaderELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 8004fc8:	4603      	mov	r3, r0
      }
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3708      	adds	r7, #8
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}

08004fd2 <_ZSt7forwardIRSt10shared_ptrIN4tama7TextureEEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004fd2:	b480      	push	{r7}
 8004fd4:	b083      	sub	sp, #12
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4618      	mov	r0, r3
 8004fde:	370c      	adds	r7, #12
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr

08004fe8 <_ZSt7forwardIN4tama5Vec2dEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004fe8:	b480      	push	{r7}
 8004fea:	b083      	sub	sp, #12
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	370c      	adds	r7, #12
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr

08004ffe <_ZSt11make_sharedIN4tama6SpriteEJRSt10shared_ptrINS0_7TextureEENS0_5Vec2dEEES2_IT_EDpOT0_>:
    make_shared(_Args&&... __args)
 8004ffe:	b590      	push	{r4, r7, lr}
 8005000:	b087      	sub	sp, #28
 8005002:	af00      	add	r7, sp, #0
 8005004:	60f8      	str	r0, [r7, #12]
 8005006:	60b9      	str	r1, [r7, #8]
 8005008:	607a      	str	r2, [r7, #4]
				       std::forward<_Args>(__args)...);
 800500a:	f107 0314 	add.w	r3, r7, #20
 800500e:	4618      	mov	r0, r3
 8005010:	f000 f97b 	bl	800530a <_ZNSaIN4tama6SpriteEEC1Ev>
 8005014:	68b8      	ldr	r0, [r7, #8]
 8005016:	f7ff ffdc 	bl	8004fd2 <_ZSt7forwardIRSt10shared_ptrIN4tama7TextureEEEOT_RNSt16remove_referenceIS5_E4typeE>
 800501a:	4604      	mov	r4, r0
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f7ff ffe3 	bl	8004fe8 <_ZSt7forwardIN4tama5Vec2dEEOT_RNSt16remove_referenceIS2_E4typeE>
 8005022:	4603      	mov	r3, r0
 8005024:	68f8      	ldr	r0, [r7, #12]
 8005026:	f107 0114 	add.w	r1, r7, #20
 800502a:	4622      	mov	r2, r4
 800502c:	f000 f985 	bl	800533a <_ZSt15allocate_sharedIN4tama6SpriteESaIS1_EJRSt10shared_ptrINS0_7TextureEENS0_5Vec2dEEES3_IT_ERKT0_DpOT1_>
 8005030:	f107 0314 	add.w	r3, r7, #20
 8005034:	4618      	mov	r0, r3
 8005036:	f000 f974 	bl	8005322 <_ZNSaIN4tama6SpriteEED1Ev>
    }
 800503a:	68f8      	ldr	r0, [r7, #12]
 800503c:	371c      	adds	r7, #28
 800503e:	46bd      	mov	sp, r7
 8005040:	bd90      	pop	{r4, r7, pc}

08005042 <_ZSt11make_sharedIN4tama4TextEJNS0_5Vec2dEEESt10shared_ptrIT_EDpOT0_>:
    make_shared(_Args&&... __args)
 8005042:	b580      	push	{r7, lr}
 8005044:	b084      	sub	sp, #16
 8005046:	af00      	add	r7, sp, #0
 8005048:	6078      	str	r0, [r7, #4]
 800504a:	6039      	str	r1, [r7, #0]
				       std::forward<_Args>(__args)...);
 800504c:	f107 030c 	add.w	r3, r7, #12
 8005050:	4618      	mov	r0, r3
 8005052:	f000 f98c 	bl	800536e <_ZNSaIN4tama4TextEEC1Ev>
 8005056:	6838      	ldr	r0, [r7, #0]
 8005058:	f7ff ffc6 	bl	8004fe8 <_ZSt7forwardIN4tama5Vec2dEEOT_RNSt16remove_referenceIS2_E4typeE>
 800505c:	4602      	mov	r2, r0
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f107 010c 	add.w	r1, r7, #12
 8005064:	4618      	mov	r0, r3
 8005066:	f000 f99a 	bl	800539e <_ZSt15allocate_sharedIN4tama4TextESaIS1_EJNS0_5Vec2dEEESt10shared_ptrIT_ERKT0_DpOT1_>
 800506a:	f107 030c 	add.w	r3, r7, #12
 800506e:	4618      	mov	r0, r3
 8005070:	f000 f989 	bl	8005386 <_ZNSaIN4tama4TextEED1Ev>
    }
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	3710      	adds	r7, #16
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}

0800507c <_ZNKSt19__shared_ptr_accessIN4tama4TextELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 800507c:	b580      	push	{r7, lr}
 800507e:	b082      	sub	sp, #8
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
	return _M_get();
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f000 f99d 	bl	80053c4 <_ZNKSt19__shared_ptr_accessIN4tama4TextELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 800508a:	4603      	mov	r3, r0
      }
 800508c:	4618      	mov	r0, r3
 800508e:	3708      	adds	r7, #8
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}

08005094 <_ZNKSt19__shared_ptr_accessIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 8005094:	b580      	push	{r7, lr}
 8005096:	b082      	sub	sp, #8
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
	return _M_get();
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f000 f99d 	bl	80053dc <_ZNKSt19__shared_ptr_accessIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 80050a2:	4603      	mov	r3, r0
      }
 80050a4:	4618      	mov	r0, r3
 80050a6:	3708      	adds	r7, #8
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}

080050ac <_ZNSt10shared_ptrIN4tama8DrawableEEC1INS0_6SpriteEvEERKS_IT_E>:
	shared_ptr(const shared_ptr<_Yp>& __r) noexcept
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b082      	sub	sp, #8
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	6039      	str	r1, [r7, #0]
        : __shared_ptr<_Tp>(__r) { }
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	683a      	ldr	r2, [r7, #0]
 80050ba:	4611      	mov	r1, r2
 80050bc:	4618      	mov	r0, r3
 80050be:	f000 f999 	bl	80053f4 <_ZNSt12__shared_ptrIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0EEC1INS0_6SpriteEvEERKS_IT_LS3_0EE>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	4618      	mov	r0, r3
 80050c6:	3708      	adds	r7, #8
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}

080050cc <_ZNSt10shared_ptrIN4tama8DrawableEEC1INS0_4TextEvEERKS_IT_E>:
	shared_ptr(const shared_ptr<_Yp>& __r) noexcept
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b082      	sub	sp, #8
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	6039      	str	r1, [r7, #0]
        : __shared_ptr<_Tp>(__r) { }
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	683a      	ldr	r2, [r7, #0]
 80050da:	4611      	mov	r1, r2
 80050dc:	4618      	mov	r0, r3
 80050de:	f000 f99f 	bl	8005420 <_ZNSt12__shared_ptrIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0EEC1INS0_4TextEvEERKS_IT_LS3_0EE>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4618      	mov	r0, r3
 80050e6:	3708      	adds	r7, #8
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}

080050ec <_ZNKSt19__shared_ptr_accessIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b082      	sub	sp, #8
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
	return _M_get();
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f000 f9a9 	bl	800544c <_ZNKSt19__shared_ptr_accessIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 80050fa:	4603      	mov	r3, r0
      }
 80050fc:	4618      	mov	r0, r3
 80050fe:	3708      	adds	r7, #8
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}

08005104 <_ZNKSt19__shared_ptr_accessIN4tama18DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 8005104:	b580      	push	{r7, lr}
 8005106:	b082      	sub	sp, #8
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
	return _M_get();
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f000 f9a9 	bl	8005464 <_ZNKSt19__shared_ptr_accessIN4tama18DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 8005112:	4603      	mov	r3, r0
      }
 8005114:	4618      	mov	r0, r3
 8005116:	3708      	adds	r7, #8
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}

0800511c <_ZNKSt19__shared_ptr_accessIN4tama7DisplayELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 800511c:	b580      	push	{r7, lr}
 800511e:	b082      	sub	sp, #8
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
	return _M_get();
 8005124:	6878      	ldr	r0, [r7, #4]
 8005126:	f000 f9a9 	bl	800547c <_ZNKSt19__shared_ptr_accessIN4tama7DisplayELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 800512a:	4603      	mov	r3, r0
      }
 800512c:	4618      	mov	r0, r3
 800512e:	3708      	adds	r7, #8
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}

08005134 <_ZNSaIN4tama16Nokia5510DisplayEEC1Ev>:
      allocator() throw() { }
 8005134:	b580      	push	{r7, lr}
 8005136:	b082      	sub	sp, #8
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f000 f9a9 	bl	8005494 <_ZN9__gnu_cxx13new_allocatorIN4tama16Nokia5510DisplayEEC1Ev>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	4618      	mov	r0, r3
 8005146:	3708      	adds	r7, #8
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}

0800514c <_ZNSaIN4tama16Nokia5510DisplayEED1Ev>:
      ~allocator() throw() { }
 800514c:	b580      	push	{r7, lr}
 800514e:	b082      	sub	sp, #8
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f000 f9a8 	bl	80054aa <_ZN9__gnu_cxx13new_allocatorIN4tama16Nokia5510DisplayEED1Ev>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4618      	mov	r0, r3
 800515e:	3708      	adds	r7, #8
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}

08005164 <_ZSt15allocate_sharedIN4tama16Nokia5510DisplayESaIS1_EJRNS0_13DisplayConfigEEESt10shared_ptrIT_ERKT0_DpOT1_>:
    allocate_shared(const _Alloc& __a, _Args&&... __args)
 8005164:	b590      	push	{r4, r7, lr}
 8005166:	b087      	sub	sp, #28
 8005168:	af00      	add	r7, sp, #0
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	60b9      	str	r1, [r7, #8]
 800516e:	607a      	str	r2, [r7, #4]
			     std::forward<_Args>(__args)...);
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f7ff fe55 	bl	8004e20 <_ZSt7forwardIRN4tama13DisplayConfigEEOT_RNSt16remove_referenceIS3_E4typeE>
 8005176:	4603      	mov	r3, r0
 8005178:	68ba      	ldr	r2, [r7, #8]
 800517a:	4621      	mov	r1, r4
 800517c:	68f8      	ldr	r0, [r7, #12]
 800517e:	f000 f99f 	bl	80054c0 <_ZNSt10shared_ptrIN4tama16Nokia5510DisplayEEC1ISaIS1_EJRNS0_13DisplayConfigEEEESt19_Sp_make_shared_tagRKT_DpOT0_>
    }
 8005182:	68f8      	ldr	r0, [r7, #12]
 8005184:	371c      	adds	r7, #28
 8005186:	46bd      	mov	sp, r7
 8005188:	bd90      	pop	{r4, r7, pc}

0800518a <_ZNSt12__shared_ptrIN4tama7DisplayELN9__gnu_cxx12_Lock_policyE0EEC1INS0_16Nokia5510DisplayEvEEOS_IT_LS3_0EE>:
	__shared_ptr(__shared_ptr<_Yp, _Lp>&& __r) noexcept
 800518a:	b580      	push	{r7, lr}
 800518c:	b082      	sub	sp, #8
 800518e:	af00      	add	r7, sp, #0
 8005190:	6078      	str	r0, [r7, #4]
 8005192:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r._M_ptr), _M_refcount()
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	601a      	str	r2, [r3, #0]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	3304      	adds	r3, #4
 80051a0:	4618      	mov	r0, r3
 80051a2:	f7fb fca1 	bl	8000ae8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _M_refcount._M_swap(__r._M_refcount);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	1d1a      	adds	r2, r3, #4
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	3304      	adds	r3, #4
 80051ae:	4619      	mov	r1, r3
 80051b0:	4610      	mov	r0, r2
 80051b2:	f7fb fcdc 	bl	8000b6e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  __r._M_ptr = 0;
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	2200      	movs	r2, #0
 80051ba:	601a      	str	r2, [r3, #0]
	}
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	4618      	mov	r0, r3
 80051c0:	3708      	adds	r7, #8
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}

080051c6 <_ZNSaIN4tama18Stm32TextureLoaderEEC1Ev>:
      allocator() throw() { }
 80051c6:	b580      	push	{r7, lr}
 80051c8:	b082      	sub	sp, #8
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	6078      	str	r0, [r7, #4]
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f000 f98c 	bl	80054ec <_ZN9__gnu_cxx13new_allocatorIN4tama18Stm32TextureLoaderEEC1Ev>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	4618      	mov	r0, r3
 80051d8:	3708      	adds	r7, #8
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}

080051de <_ZNSaIN4tama18Stm32TextureLoaderEED1Ev>:
      ~allocator() throw() { }
 80051de:	b580      	push	{r7, lr}
 80051e0:	b082      	sub	sp, #8
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	6078      	str	r0, [r7, #4]
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f000 f98b 	bl	8005502 <_ZN9__gnu_cxx13new_allocatorIN4tama18Stm32TextureLoaderEED1Ev>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	4618      	mov	r0, r3
 80051f0:	3708      	adds	r7, #8
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}

080051f6 <_ZSt15allocate_sharedIN4tama18Stm32TextureLoaderESaIS1_EJEESt10shared_ptrIT_ERKT0_DpOT1_>:
    allocate_shared(const _Alloc& __a, _Args&&... __args)
 80051f6:	b580      	push	{r7, lr}
 80051f8:	b084      	sub	sp, #16
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	6078      	str	r0, [r7, #4]
 80051fe:	6039      	str	r1, [r7, #0]
			     std::forward<_Args>(__args)...);
 8005200:	683a      	ldr	r2, [r7, #0]
 8005202:	4619      	mov	r1, r3
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f000 f987 	bl	8005518 <_ZNSt10shared_ptrIN4tama18Stm32TextureLoaderEEC1ISaIS1_EJEEESt19_Sp_make_shared_tagRKT_DpOT0_>
    }
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	3710      	adds	r7, #16
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}

08005212 <_ZNSt12__shared_ptrIN4tama13TextureLoaderELN9__gnu_cxx12_Lock_policyE0EEC1INS0_18Stm32TextureLoaderEvEEOS_IT_LS3_0EE>:
	__shared_ptr(__shared_ptr<_Yp, _Lp>&& __r) noexcept
 8005212:	b580      	push	{r7, lr}
 8005214:	b082      	sub	sp, #8
 8005216:	af00      	add	r7, sp, #0
 8005218:	6078      	str	r0, [r7, #4]
 800521a:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r._M_ptr), _M_refcount()
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	601a      	str	r2, [r3, #0]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	3304      	adds	r3, #4
 8005228:	4618      	mov	r0, r3
 800522a:	f7fb fc5d 	bl	8000ae8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _M_refcount._M_swap(__r._M_refcount);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	1d1a      	adds	r2, r3, #4
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	3304      	adds	r3, #4
 8005236:	4619      	mov	r1, r3
 8005238:	4610      	mov	r0, r2
 800523a:	f7fb fc98 	bl	8000b6e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  __r._M_ptr = 0;
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	2200      	movs	r2, #0
 8005242:	601a      	str	r2, [r3, #0]
	}
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	4618      	mov	r0, r3
 8005248:	3708      	adds	r7, #8
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}

0800524e <_ZNSaIN4tama27Nokia5110DisplayDataManagerEEC1Ev>:
      allocator() throw() { }
 800524e:	b580      	push	{r7, lr}
 8005250:	b082      	sub	sp, #8
 8005252:	af00      	add	r7, sp, #0
 8005254:	6078      	str	r0, [r7, #4]
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f000 f96f 	bl	800553a <_ZN9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEEC1Ev>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	4618      	mov	r0, r3
 8005260:	3708      	adds	r7, #8
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}

08005266 <_ZNSaIN4tama27Nokia5110DisplayDataManagerEED1Ev>:
      ~allocator() throw() { }
 8005266:	b580      	push	{r7, lr}
 8005268:	b082      	sub	sp, #8
 800526a:	af00      	add	r7, sp, #0
 800526c:	6078      	str	r0, [r7, #4]
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f000 f96e 	bl	8005550 <_ZN9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEED1Ev>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	4618      	mov	r0, r3
 8005278:	3708      	adds	r7, #8
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}

0800527e <_ZSt15allocate_sharedIN4tama27Nokia5110DisplayDataManagerESaIS1_EJEESt10shared_ptrIT_ERKT0_DpOT1_>:
    allocate_shared(const _Alloc& __a, _Args&&... __args)
 800527e:	b580      	push	{r7, lr}
 8005280:	b084      	sub	sp, #16
 8005282:	af00      	add	r7, sp, #0
 8005284:	6078      	str	r0, [r7, #4]
 8005286:	6039      	str	r1, [r7, #0]
			     std::forward<_Args>(__args)...);
 8005288:	683a      	ldr	r2, [r7, #0]
 800528a:	4619      	mov	r1, r3
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f000 f96a 	bl	8005566 <_ZNSt10shared_ptrIN4tama27Nokia5110DisplayDataManagerEEC1ISaIS1_EJEEESt19_Sp_make_shared_tagRKT_DpOT0_>
    }
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	3710      	adds	r7, #16
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}

0800529a <_ZNSt12__shared_ptrIN4tama18DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EEC1INS0_27Nokia5110DisplayDataManagerEvEEOS_IT_LS3_0EE>:
	__shared_ptr(__shared_ptr<_Yp, _Lp>&& __r) noexcept
 800529a:	b580      	push	{r7, lr}
 800529c:	b082      	sub	sp, #8
 800529e:	af00      	add	r7, sp, #0
 80052a0:	6078      	str	r0, [r7, #4]
 80052a2:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r._M_ptr), _M_refcount()
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	601a      	str	r2, [r3, #0]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	3304      	adds	r3, #4
 80052b0:	4618      	mov	r0, r3
 80052b2:	f7fb fc19 	bl	8000ae8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _M_refcount._M_swap(__r._M_refcount);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	1d1a      	adds	r2, r3, #4
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	3304      	adds	r3, #4
 80052be:	4619      	mov	r1, r3
 80052c0:	4610      	mov	r0, r2
 80052c2:	f7fb fc54 	bl	8000b6e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  __r._M_ptr = 0;
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	2200      	movs	r2, #0
 80052ca:	601a      	str	r2, [r3, #0]
	}
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	4618      	mov	r0, r3
 80052d0:	3708      	adds	r7, #8
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}

080052d6 <_ZSt15allocate_sharedIN4tama5SceneESaIS1_EJEESt10shared_ptrIT_ERKT0_DpOT1_>:
    allocate_shared(const _Alloc& __a, _Args&&... __args)
 80052d6:	b580      	push	{r7, lr}
 80052d8:	b084      	sub	sp, #16
 80052da:	af00      	add	r7, sp, #0
 80052dc:	6078      	str	r0, [r7, #4]
 80052de:	6039      	str	r1, [r7, #0]
			     std::forward<_Args>(__args)...);
 80052e0:	683a      	ldr	r2, [r7, #0]
 80052e2:	4619      	mov	r1, r3
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f000 f94f 	bl	8005588 <_ZNSt10shared_ptrIN4tama5SceneEEC1ISaIS1_EJEEESt19_Sp_make_shared_tagRKT_DpOT0_>
    }
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	3710      	adds	r7, #16
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}

080052f2 <_ZNKSt19__shared_ptr_accessIN4tama13TextureLoaderELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 80052f2:	b580      	push	{r7, lr}
 80052f4:	b082      	sub	sp, #8
 80052f6:	af00      	add	r7, sp, #0
 80052f8:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f000 f955 	bl	80055aa <_ZNKSt12__shared_ptrIN4tama13TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE3getEv>
 8005300:	4603      	mov	r3, r0
 8005302:	4618      	mov	r0, r3
 8005304:	3708      	adds	r7, #8
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}

0800530a <_ZNSaIN4tama6SpriteEEC1Ev>:
      allocator() throw() { }
 800530a:	b580      	push	{r7, lr}
 800530c:	b082      	sub	sp, #8
 800530e:	af00      	add	r7, sp, #0
 8005310:	6078      	str	r0, [r7, #4]
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f000 f955 	bl	80055c2 <_ZN9__gnu_cxx13new_allocatorIN4tama6SpriteEEC1Ev>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	4618      	mov	r0, r3
 800531c:	3708      	adds	r7, #8
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}

08005322 <_ZNSaIN4tama6SpriteEED1Ev>:
      ~allocator() throw() { }
 8005322:	b580      	push	{r7, lr}
 8005324:	b082      	sub	sp, #8
 8005326:	af00      	add	r7, sp, #0
 8005328:	6078      	str	r0, [r7, #4]
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f000 f954 	bl	80055d8 <_ZN9__gnu_cxx13new_allocatorIN4tama6SpriteEED1Ev>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	4618      	mov	r0, r3
 8005334:	3708      	adds	r7, #8
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}

0800533a <_ZSt15allocate_sharedIN4tama6SpriteESaIS1_EJRSt10shared_ptrINS0_7TextureEENS0_5Vec2dEEES3_IT_ERKT0_DpOT1_>:
    allocate_shared(const _Alloc& __a, _Args&&... __args)
 800533a:	b5b0      	push	{r4, r5, r7, lr}
 800533c:	b088      	sub	sp, #32
 800533e:	af02      	add	r7, sp, #8
 8005340:	60f8      	str	r0, [r7, #12]
 8005342:	60b9      	str	r1, [r7, #8]
 8005344:	607a      	str	r2, [r7, #4]
 8005346:	603b      	str	r3, [r7, #0]
			     std::forward<_Args>(__args)...);
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	f7ff fe42 	bl	8004fd2 <_ZSt7forwardIRSt10shared_ptrIN4tama7TextureEEEOT_RNSt16remove_referenceIS5_E4typeE>
 800534e:	4604      	mov	r4, r0
 8005350:	6838      	ldr	r0, [r7, #0]
 8005352:	f7ff fe49 	bl	8004fe8 <_ZSt7forwardIN4tama5Vec2dEEOT_RNSt16remove_referenceIS2_E4typeE>
 8005356:	4603      	mov	r3, r0
 8005358:	9300      	str	r3, [sp, #0]
 800535a:	4623      	mov	r3, r4
 800535c:	68ba      	ldr	r2, [r7, #8]
 800535e:	4629      	mov	r1, r5
 8005360:	68f8      	ldr	r0, [r7, #12]
 8005362:	f000 f944 	bl	80055ee <_ZNSt10shared_ptrIN4tama6SpriteEEC1ISaIS1_EJRS_INS0_7TextureEENS0_5Vec2dEEEESt19_Sp_make_shared_tagRKT_DpOT0_>
    }
 8005366:	68f8      	ldr	r0, [r7, #12]
 8005368:	3718      	adds	r7, #24
 800536a:	46bd      	mov	sp, r7
 800536c:	bdb0      	pop	{r4, r5, r7, pc}

0800536e <_ZNSaIN4tama4TextEEC1Ev>:
      allocator() throw() { }
 800536e:	b580      	push	{r7, lr}
 8005370:	b082      	sub	sp, #8
 8005372:	af00      	add	r7, sp, #0
 8005374:	6078      	str	r0, [r7, #4]
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f000 f955 	bl	8005626 <_ZN9__gnu_cxx13new_allocatorIN4tama4TextEEC1Ev>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	4618      	mov	r0, r3
 8005380:	3708      	adds	r7, #8
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}

08005386 <_ZNSaIN4tama4TextEED1Ev>:
      ~allocator() throw() { }
 8005386:	b580      	push	{r7, lr}
 8005388:	b082      	sub	sp, #8
 800538a:	af00      	add	r7, sp, #0
 800538c:	6078      	str	r0, [r7, #4]
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f000 f954 	bl	800563c <_ZN9__gnu_cxx13new_allocatorIN4tama4TextEED1Ev>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	4618      	mov	r0, r3
 8005398:	3708      	adds	r7, #8
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}

0800539e <_ZSt15allocate_sharedIN4tama4TextESaIS1_EJNS0_5Vec2dEEESt10shared_ptrIT_ERKT0_DpOT1_>:
    allocate_shared(const _Alloc& __a, _Args&&... __args)
 800539e:	b590      	push	{r4, r7, lr}
 80053a0:	b087      	sub	sp, #28
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	60f8      	str	r0, [r7, #12]
 80053a6:	60b9      	str	r1, [r7, #8]
 80053a8:	607a      	str	r2, [r7, #4]
			     std::forward<_Args>(__args)...);
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f7ff fe1c 	bl	8004fe8 <_ZSt7forwardIN4tama5Vec2dEEOT_RNSt16remove_referenceIS2_E4typeE>
 80053b0:	4603      	mov	r3, r0
 80053b2:	68ba      	ldr	r2, [r7, #8]
 80053b4:	4621      	mov	r1, r4
 80053b6:	68f8      	ldr	r0, [r7, #12]
 80053b8:	f000 f94b 	bl	8005652 <_ZNSt10shared_ptrIN4tama4TextEEC1ISaIS1_EJNS0_5Vec2dEEEESt19_Sp_make_shared_tagRKT_DpOT0_>
    }
 80053bc:	68f8      	ldr	r0, [r7, #12]
 80053be:	371c      	adds	r7, #28
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd90      	pop	{r4, r7, pc}

080053c4 <_ZNKSt19__shared_ptr_accessIN4tama4TextELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b082      	sub	sp, #8
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	f000 f956 	bl	800567e <_ZNKSt12__shared_ptrIN4tama4TextELN9__gnu_cxx12_Lock_policyE0EE3getEv>
 80053d2:	4603      	mov	r3, r0
 80053d4:	4618      	mov	r0, r3
 80053d6:	3708      	adds	r7, #8
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}

080053dc <_ZNKSt19__shared_ptr_accessIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 80053dc:	b580      	push	{r7, lr}
 80053de:	b082      	sub	sp, #8
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f000 f956 	bl	8005696 <_ZNKSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE3getEv>
 80053ea:	4603      	mov	r3, r0
 80053ec:	4618      	mov	r0, r3
 80053ee:	3708      	adds	r7, #8
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}

080053f4 <_ZNSt12__shared_ptrIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0EEC1INS0_6SpriteEvEERKS_IT_LS3_0EE>:
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b082      	sub	sp, #8
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	681a      	ldr	r2, [r3, #0]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	601a      	str	r2, [r3, #0]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	1d1a      	adds	r2, r3, #4
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	3304      	adds	r3, #4
 800540e:	4619      	mov	r1, r3
 8005410:	4610      	mov	r0, r2
 8005412:	f7fb f8a3 	bl	800055c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	{ }
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	4618      	mov	r0, r3
 800541a:	3708      	adds	r7, #8
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}

08005420 <_ZNSt12__shared_ptrIN4tama8DrawableELN9__gnu_cxx12_Lock_policyE0EEC1INS0_4TextEvEERKS_IT_LS3_0EE>:
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
 8005420:	b580      	push	{r7, lr}
 8005422:	b082      	sub	sp, #8
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
 8005428:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	601a      	str	r2, [r3, #0]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	1d1a      	adds	r2, r3, #4
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	3304      	adds	r3, #4
 800543a:	4619      	mov	r1, r3
 800543c:	4610      	mov	r0, r2
 800543e:	f7fb f88d 	bl	800055c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	{ }
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4618      	mov	r0, r3
 8005446:	3708      	adds	r7, #8
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}

0800544c <_ZNKSt19__shared_ptr_accessIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 800544c:	b580      	push	{r7, lr}
 800544e:	b082      	sub	sp, #8
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f000 f92a 	bl	80056ae <_ZNKSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE3getEv>
 800545a:	4603      	mov	r3, r0
 800545c:	4618      	mov	r0, r3
 800545e:	3708      	adds	r7, #8
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}

08005464 <_ZNKSt19__shared_ptr_accessIN4tama18DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 8005464:	b580      	push	{r7, lr}
 8005466:	b082      	sub	sp, #8
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	f000 f92a 	bl	80056c6 <_ZNKSt12__shared_ptrIN4tama18DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE3getEv>
 8005472:	4603      	mov	r3, r0
 8005474:	4618      	mov	r0, r3
 8005476:	3708      	adds	r7, #8
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}

0800547c <_ZNKSt19__shared_ptr_accessIN4tama7DisplayELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 800547c:	b580      	push	{r7, lr}
 800547e:	b082      	sub	sp, #8
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	f000 f92a 	bl	80056de <_ZNKSt12__shared_ptrIN4tama7DisplayELN9__gnu_cxx12_Lock_policyE0EE3getEv>
 800548a:	4603      	mov	r3, r0
 800548c:	4618      	mov	r0, r3
 800548e:	3708      	adds	r7, #8
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}

08005494 <_ZN9__gnu_cxx13new_allocatorIN4tama16Nokia5510DisplayEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8005494:	b480      	push	{r7}
 8005496:	b083      	sub	sp, #12
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	4618      	mov	r0, r3
 80054a0:	370c      	adds	r7, #12
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr

080054aa <_ZN9__gnu_cxx13new_allocatorIN4tama16Nokia5510DisplayEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80054aa:	b480      	push	{r7}
 80054ac:	b083      	sub	sp, #12
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	6078      	str	r0, [r7, #4]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	4618      	mov	r0, r3
 80054b6:	370c      	adds	r7, #12
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr

080054c0 <_ZNSt10shared_ptrIN4tama16Nokia5510DisplayEEC1ISaIS1_EJRNS0_13DisplayConfigEEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 80054c0:	b5b0      	push	{r4, r5, r7, lr}
 80054c2:	b084      	sub	sp, #16
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	60f8      	str	r0, [r7, #12]
 80054c8:	7239      	strb	r1, [r7, #8]
 80054ca:	607a      	str	r2, [r7, #4]
 80054cc:	603b      	str	r3, [r7, #0]
	: __shared_ptr<_Tp>(__tag, __a, std::forward<_Args>(__args)...)
 80054ce:	68fc      	ldr	r4, [r7, #12]
 80054d0:	6838      	ldr	r0, [r7, #0]
 80054d2:	f7ff fca5 	bl	8004e20 <_ZSt7forwardIRN4tama13DisplayConfigEEOT_RNSt16remove_referenceIS3_E4typeE>
 80054d6:	4603      	mov	r3, r0
 80054d8:	687a      	ldr	r2, [r7, #4]
 80054da:	4629      	mov	r1, r5
 80054dc:	4620      	mov	r0, r4
 80054de:	f000 f927 	bl	8005730 <_ZNSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJRNS0_13DisplayConfigEEEESt19_Sp_make_shared_tagRKT_DpOT0_>
	{ }
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	4618      	mov	r0, r3
 80054e6:	3710      	adds	r7, #16
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bdb0      	pop	{r4, r5, r7, pc}

080054ec <_ZN9__gnu_cxx13new_allocatorIN4tama18Stm32TextureLoaderEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80054ec:	b480      	push	{r7}
 80054ee:	b083      	sub	sp, #12
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	4618      	mov	r0, r3
 80054f8:	370c      	adds	r7, #12
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr

08005502 <_ZN9__gnu_cxx13new_allocatorIN4tama18Stm32TextureLoaderEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8005502:	b480      	push	{r7}
 8005504:	b083      	sub	sp, #12
 8005506:	af00      	add	r7, sp, #0
 8005508:	6078      	str	r0, [r7, #4]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	4618      	mov	r0, r3
 800550e:	370c      	adds	r7, #12
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr

08005518 <_ZNSt10shared_ptrIN4tama18Stm32TextureLoaderEEC1ISaIS1_EJEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 8005518:	b590      	push	{r4, r7, lr}
 800551a:	b085      	sub	sp, #20
 800551c:	af00      	add	r7, sp, #0
 800551e:	60f8      	str	r0, [r7, #12]
 8005520:	7239      	strb	r1, [r7, #8]
 8005522:	607a      	str	r2, [r7, #4]
	: __shared_ptr<_Tp>(__tag, __a, std::forward<_Args>(__args)...)
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	4621      	mov	r1, r4
 800552a:	4618      	mov	r0, r3
 800552c:	f000 f998 	bl	8005860 <_ZNSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJEEESt19_Sp_make_shared_tagRKT_DpOT0_>
	{ }
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	4618      	mov	r0, r3
 8005534:	3714      	adds	r7, #20
 8005536:	46bd      	mov	sp, r7
 8005538:	bd90      	pop	{r4, r7, pc}

0800553a <_ZN9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800553a:	b480      	push	{r7}
 800553c:	b083      	sub	sp, #12
 800553e:	af00      	add	r7, sp, #0
 8005540:	6078      	str	r0, [r7, #4]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	4618      	mov	r0, r3
 8005546:	370c      	adds	r7, #12
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr

08005550 <_ZN9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8005550:	b480      	push	{r7}
 8005552:	b083      	sub	sp, #12
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	4618      	mov	r0, r3
 800555c:	370c      	adds	r7, #12
 800555e:	46bd      	mov	sp, r7
 8005560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005564:	4770      	bx	lr

08005566 <_ZNSt10shared_ptrIN4tama27Nokia5110DisplayDataManagerEEC1ISaIS1_EJEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 8005566:	b590      	push	{r4, r7, lr}
 8005568:	b085      	sub	sp, #20
 800556a:	af00      	add	r7, sp, #0
 800556c:	60f8      	str	r0, [r7, #12]
 800556e:	7239      	strb	r1, [r7, #8]
 8005570:	607a      	str	r2, [r7, #4]
	: __shared_ptr<_Tp>(__tag, __a, std::forward<_Args>(__args)...)
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	687a      	ldr	r2, [r7, #4]
 8005576:	4621      	mov	r1, r4
 8005578:	4618      	mov	r0, r3
 800557a:	f000 fa04 	bl	8005986 <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJEEESt19_Sp_make_shared_tagRKT_DpOT0_>
	{ }
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	4618      	mov	r0, r3
 8005582:	3714      	adds	r7, #20
 8005584:	46bd      	mov	sp, r7
 8005586:	bd90      	pop	{r4, r7, pc}

08005588 <_ZNSt10shared_ptrIN4tama5SceneEEC1ISaIS1_EJEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 8005588:	b590      	push	{r4, r7, lr}
 800558a:	b085      	sub	sp, #20
 800558c:	af00      	add	r7, sp, #0
 800558e:	60f8      	str	r0, [r7, #12]
 8005590:	7239      	strb	r1, [r7, #8]
 8005592:	607a      	str	r2, [r7, #4]
	: __shared_ptr<_Tp>(__tag, __a, std::forward<_Args>(__args)...)
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	687a      	ldr	r2, [r7, #4]
 8005598:	4621      	mov	r1, r4
 800559a:	4618      	mov	r0, r3
 800559c:	f000 fa69 	bl	8005a72 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJEEESt19_Sp_make_shared_tagRKT_DpOT0_>
	{ }
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	4618      	mov	r0, r3
 80055a4:	3714      	adds	r7, #20
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd90      	pop	{r4, r7, pc}

080055aa <_ZNKSt12__shared_ptrIN4tama13TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE3getEv>:
      get() const noexcept
 80055aa:	b480      	push	{r7}
 80055ac:	b083      	sub	sp, #12
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4618      	mov	r0, r3
 80055b8:	370c      	adds	r7, #12
 80055ba:	46bd      	mov	sp, r7
 80055bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c0:	4770      	bx	lr

080055c2 <_ZN9__gnu_cxx13new_allocatorIN4tama6SpriteEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80055c2:	b480      	push	{r7}
 80055c4:	b083      	sub	sp, #12
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	6078      	str	r0, [r7, #4]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	4618      	mov	r0, r3
 80055ce:	370c      	adds	r7, #12
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr

080055d8 <_ZN9__gnu_cxx13new_allocatorIN4tama6SpriteEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80055d8:	b480      	push	{r7}
 80055da:	b083      	sub	sp, #12
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	4618      	mov	r0, r3
 80055e4:	370c      	adds	r7, #12
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr

080055ee <_ZNSt10shared_ptrIN4tama6SpriteEEC1ISaIS1_EJRS_INS0_7TextureEENS0_5Vec2dEEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 80055ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055f0:	b087      	sub	sp, #28
 80055f2:	af02      	add	r7, sp, #8
 80055f4:	60f8      	str	r0, [r7, #12]
 80055f6:	7239      	strb	r1, [r7, #8]
 80055f8:	607a      	str	r2, [r7, #4]
 80055fa:	603b      	str	r3, [r7, #0]
	: __shared_ptr<_Tp>(__tag, __a, std::forward<_Args>(__args)...)
 80055fc:	68fc      	ldr	r4, [r7, #12]
 80055fe:	6838      	ldr	r0, [r7, #0]
 8005600:	f7ff fce7 	bl	8004fd2 <_ZSt7forwardIRSt10shared_ptrIN4tama7TextureEEEOT_RNSt16remove_referenceIS5_E4typeE>
 8005604:	4605      	mov	r5, r0
 8005606:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005608:	f7ff fcee 	bl	8004fe8 <_ZSt7forwardIN4tama5Vec2dEEOT_RNSt16remove_referenceIS2_E4typeE>
 800560c:	4603      	mov	r3, r0
 800560e:	9300      	str	r3, [sp, #0]
 8005610:	462b      	mov	r3, r5
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	4631      	mov	r1, r6
 8005616:	4620      	mov	r0, r4
 8005618:	f000 fabe 	bl	8005b98 <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJRSt10shared_ptrINS0_7TextureEENS0_5Vec2dEEEESt19_Sp_make_shared_tagRKT_DpOT0_>
	{ }
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	4618      	mov	r0, r3
 8005620:	3714      	adds	r7, #20
 8005622:	46bd      	mov	sp, r7
 8005624:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005626 <_ZN9__gnu_cxx13new_allocatorIN4tama4TextEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8005626:	b480      	push	{r7}
 8005628:	b083      	sub	sp, #12
 800562a:	af00      	add	r7, sp, #0
 800562c:	6078      	str	r0, [r7, #4]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	4618      	mov	r0, r3
 8005632:	370c      	adds	r7, #12
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr

0800563c <_ZN9__gnu_cxx13new_allocatorIN4tama4TextEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800563c:	b480      	push	{r7}
 800563e:	b083      	sub	sp, #12
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	4618      	mov	r0, r3
 8005648:	370c      	adds	r7, #12
 800564a:	46bd      	mov	sp, r7
 800564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005650:	4770      	bx	lr

08005652 <_ZNSt10shared_ptrIN4tama4TextEEC1ISaIS1_EJNS0_5Vec2dEEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 8005652:	b5b0      	push	{r4, r5, r7, lr}
 8005654:	b084      	sub	sp, #16
 8005656:	af00      	add	r7, sp, #0
 8005658:	60f8      	str	r0, [r7, #12]
 800565a:	7239      	strb	r1, [r7, #8]
 800565c:	607a      	str	r2, [r7, #4]
 800565e:	603b      	str	r3, [r7, #0]
	: __shared_ptr<_Tp>(__tag, __a, std::forward<_Args>(__args)...)
 8005660:	68fc      	ldr	r4, [r7, #12]
 8005662:	6838      	ldr	r0, [r7, #0]
 8005664:	f7ff fcc0 	bl	8004fe8 <_ZSt7forwardIN4tama5Vec2dEEOT_RNSt16remove_referenceIS2_E4typeE>
 8005668:	4603      	mov	r3, r0
 800566a:	687a      	ldr	r2, [r7, #4]
 800566c:	4629      	mov	r1, r5
 800566e:	4620      	mov	r0, r4
 8005670:	f000 fb2e 	bl	8005cd0 <_ZNSt12__shared_ptrIN4tama4TextELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJNS0_5Vec2dEEEESt19_Sp_make_shared_tagRKT_DpOT0_>
	{ }
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	4618      	mov	r0, r3
 8005678:	3710      	adds	r7, #16
 800567a:	46bd      	mov	sp, r7
 800567c:	bdb0      	pop	{r4, r5, r7, pc}

0800567e <_ZNKSt12__shared_ptrIN4tama4TextELN9__gnu_cxx12_Lock_policyE0EE3getEv>:
      get() const noexcept
 800567e:	b480      	push	{r7}
 8005680:	b083      	sub	sp, #12
 8005682:	af00      	add	r7, sp, #0
 8005684:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4618      	mov	r0, r3
 800568c:	370c      	adds	r7, #12
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr

08005696 <_ZNKSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE3getEv>:
      get() const noexcept
 8005696:	b480      	push	{r7}
 8005698:	b083      	sub	sp, #12
 800569a:	af00      	add	r7, sp, #0
 800569c:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4618      	mov	r0, r3
 80056a4:	370c      	adds	r7, #12
 80056a6:	46bd      	mov	sp, r7
 80056a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ac:	4770      	bx	lr

080056ae <_ZNKSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE3getEv>:
      get() const noexcept
 80056ae:	b480      	push	{r7}
 80056b0:	b083      	sub	sp, #12
 80056b2:	af00      	add	r7, sp, #0
 80056b4:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4618      	mov	r0, r3
 80056bc:	370c      	adds	r7, #12
 80056be:	46bd      	mov	sp, r7
 80056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c4:	4770      	bx	lr

080056c6 <_ZNKSt12__shared_ptrIN4tama18DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE3getEv>:
      get() const noexcept
 80056c6:	b480      	push	{r7}
 80056c8:	b083      	sub	sp, #12
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4618      	mov	r0, r3
 80056d4:	370c      	adds	r7, #12
 80056d6:	46bd      	mov	sp, r7
 80056d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056dc:	4770      	bx	lr

080056de <_ZNKSt12__shared_ptrIN4tama7DisplayELN9__gnu_cxx12_Lock_policyE0EE3getEv>:
      get() const noexcept
 80056de:	b480      	push	{r7}
 80056e0:	b083      	sub	sp, #12
 80056e2:	af00      	add	r7, sp, #0
 80056e4:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4618      	mov	r0, r3
 80056ec:	370c      	adds	r7, #12
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr

080056f6 <_ZNSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>:
        struct _Deleter
 80056f6:	b580      	push	{r7, lr}
 80056f8:	b082      	sub	sp, #8
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	6078      	str	r0, [r7, #4]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4618      	mov	r0, r3
 8005702:	f7ff fd23 	bl	800514c <_ZNSaIN4tama16Nokia5510DisplayEED1Ev>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4618      	mov	r0, r3
 800570a:	3708      	adds	r7, #8
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}

08005710 <_ZNSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>:
 8005710:	b580      	push	{r7, lr}
 8005712:	b082      	sub	sp, #8
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	6039      	str	r1, [r7, #0]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	683a      	ldr	r2, [r7, #0]
 800571e:	4611      	mov	r1, r2
 8005720:	4618      	mov	r0, r3
 8005722:	f000 fb50 	bl	8005dc6 <_ZNSaIN4tama16Nokia5510DisplayEEC1ERKS1_>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4618      	mov	r0, r3
 800572a:	3708      	adds	r7, #8
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}

08005730 <_ZNSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJRNS0_13DisplayConfigEEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 8005730:	b580      	push	{r7, lr}
 8005732:	b08c      	sub	sp, #48	; 0x30
 8005734:	af00      	add	r7, sp, #0
 8005736:	60f8      	str	r0, [r7, #12]
 8005738:	7239      	strb	r1, [r7, #8]
 800573a:	607a      	str	r2, [r7, #4]
 800573c:	603b      	str	r3, [r7, #0]
	: _M_ptr(), _M_refcount()
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2200      	movs	r2, #0
 8005742:	601a      	str	r2, [r3, #0]
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	3304      	adds	r3, #4
 8005748:	4618      	mov	r0, r3
 800574a:	f7fb f9cd 	bl	8000ae8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 800574e:	f107 0320 	add.w	r3, r7, #32
 8005752:	6879      	ldr	r1, [r7, #4]
 8005754:	4618      	mov	r0, r3
 8005756:	f000 fb36 	bl	8005dc6 <_ZNSaIN4tama16Nokia5510DisplayEEC1ERKS1_>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 800575a:	f107 0318 	add.w	r3, r7, #24
 800575e:	f107 0220 	add.w	r2, r7, #32
 8005762:	4611      	mov	r1, r2
 8005764:	4618      	mov	r0, r3
 8005766:	f000 fb3c 	bl	8005de2 <_ZSt18__allocate_guardedISaIN4tama16Nokia5510DisplayEEESt15__allocated_ptrIT_ERS4_>
	  auto __ptr = __guard.get();
 800576a:	f107 0318 	add.w	r3, r7, #24
 800576e:	4618      	mov	r0, r3
 8005770:	f000 fb5f 	bl	8005e32 <_ZNSt15__allocated_ptrISaIN4tama16Nokia5510DisplayEEE3getEv>
 8005774:	62f8      	str	r0, [r7, #44]	; 0x2c
	  __traits::construct(__del._M_alloc, __ptr,
 8005776:	6838      	ldr	r0, [r7, #0]
 8005778:	f7ff fb52 	bl	8004e20 <_ZSt7forwardIRN4tama13DisplayConfigEEOT_RNSt16remove_referenceIS3_E4typeE>
 800577c:	4602      	mov	r2, r0
 800577e:	f107 0320 	add.w	r3, r7, #32
 8005782:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005784:	4618      	mov	r0, r3
 8005786:	f000 fb62 	bl	8005e4e <_ZNSt16allocator_traitsISaIN4tama16Nokia5510DisplayEEE9constructIS1_JRNS0_13DisplayConfigEEEEvRS2_PT_DpOT0_>
	  __guard = nullptr;
 800578a:	f107 0318 	add.w	r3, r7, #24
 800578e:	2100      	movs	r1, #0
 8005790:	4618      	mov	r0, r3
 8005792:	f000 fb6f 	bl	8005e74 <_ZNSt15__allocated_ptrISaIN4tama16Nokia5510DisplayEEEaSEDn>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 8005796:	f107 0220 	add.w	r2, r7, #32
 800579a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800579e:	4611      	mov	r1, r2
 80057a0:	4618      	mov	r0, r3
 80057a2:	f7ff ffb5 	bl	8005710 <_ZNSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>
 80057a6:	f107 0220 	add.w	r2, r7, #32
 80057aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80057ae:	4611      	mov	r1, r2
 80057b0:	4618      	mov	r0, r3
 80057b2:	f000 fb08 	bl	8005dc6 <_ZNSaIN4tama16Nokia5510DisplayEEC1ERKS1_>
 80057b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80057ba:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80057be:	f107 0014 	add.w	r0, r7, #20
 80057c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80057c4:	f000 fb8b 	bl	8005ede <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama16Nokia5510DisplayENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
 80057c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80057cc:	4618      	mov	r0, r3
 80057ce:	f7ff fcbd 	bl	800514c <_ZNSaIN4tama16Nokia5510DisplayEED1Ev>
 80057d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057d6:	4618      	mov	r0, r3
 80057d8:	f7ff ff8d 	bl	80056f6 <_ZNSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	  _M_refcount._M_swap(__count);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	3304      	adds	r3, #4
 80057e0:	f107 0214 	add.w	r2, r7, #20
 80057e4:	4611      	mov	r1, r2
 80057e6:	4618      	mov	r0, r3
 80057e8:	f7fb f9c1 	bl	8000b6e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  _M_ptr = __ptr;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057f0:	601a      	str	r2, [r3, #0]
	  _M_enable_shared_from_this_with(_M_ptr);
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4619      	mov	r1, r3
 80057f8:	68f8      	ldr	r0, [r7, #12]
 80057fa:	f000 fbc7 	bl	8005f8c <_ZNSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 80057fe:	f107 0314 	add.w	r3, r7, #20
 8005802:	4618      	mov	r0, r3
 8005804:	f7fb f8a8 	bl	8000958 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 8005808:	f107 0318 	add.w	r3, r7, #24
 800580c:	4618      	mov	r0, r3
 800580e:	f000 fafb 	bl	8005e08 <_ZNSt15__allocated_ptrISaIN4tama16Nokia5510DisplayEEED1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 8005812:	f107 0320 	add.w	r3, r7, #32
 8005816:	4618      	mov	r0, r3
 8005818:	f7ff ff6d 	bl	80056f6 <_ZNSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	}
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	4618      	mov	r0, r3
 8005820:	3730      	adds	r7, #48	; 0x30
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}

08005826 <_ZNSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>:
        struct _Deleter
 8005826:	b580      	push	{r7, lr}
 8005828:	b082      	sub	sp, #8
 800582a:	af00      	add	r7, sp, #0
 800582c:	6078      	str	r0, [r7, #4]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	4618      	mov	r0, r3
 8005832:	f7ff fcd4 	bl	80051de <_ZNSaIN4tama18Stm32TextureLoaderEED1Ev>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	4618      	mov	r0, r3
 800583a:	3708      	adds	r7, #8
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}

08005840 <_ZNSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>:
 8005840:	b580      	push	{r7, lr}
 8005842:	b082      	sub	sp, #8
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	6039      	str	r1, [r7, #0]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	683a      	ldr	r2, [r7, #0]
 800584e:	4611      	mov	r1, r2
 8005850:	4618      	mov	r0, r3
 8005852:	f000 fba6 	bl	8005fa2 <_ZNSaIN4tama18Stm32TextureLoaderEEC1ERKS1_>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	4618      	mov	r0, r3
 800585a:	3708      	adds	r7, #8
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}

08005860 <_ZNSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 8005860:	b580      	push	{r7, lr}
 8005862:	b08c      	sub	sp, #48	; 0x30
 8005864:	af00      	add	r7, sp, #0
 8005866:	60f8      	str	r0, [r7, #12]
 8005868:	7239      	strb	r1, [r7, #8]
 800586a:	607a      	str	r2, [r7, #4]
	: _M_ptr(), _M_refcount()
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2200      	movs	r2, #0
 8005870:	601a      	str	r2, [r3, #0]
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	3304      	adds	r3, #4
 8005876:	4618      	mov	r0, r3
 8005878:	f7fb f936 	bl	8000ae8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 800587c:	f107 0320 	add.w	r3, r7, #32
 8005880:	6879      	ldr	r1, [r7, #4]
 8005882:	4618      	mov	r0, r3
 8005884:	f000 fb8d 	bl	8005fa2 <_ZNSaIN4tama18Stm32TextureLoaderEEC1ERKS1_>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 8005888:	f107 0318 	add.w	r3, r7, #24
 800588c:	f107 0220 	add.w	r2, r7, #32
 8005890:	4611      	mov	r1, r2
 8005892:	4618      	mov	r0, r3
 8005894:	f000 fb93 	bl	8005fbe <_ZSt18__allocate_guardedISaIN4tama18Stm32TextureLoaderEEESt15__allocated_ptrIT_ERS4_>
	  auto __ptr = __guard.get();
 8005898:	f107 0318 	add.w	r3, r7, #24
 800589c:	4618      	mov	r0, r3
 800589e:	f000 fbb6 	bl	800600e <_ZNSt15__allocated_ptrISaIN4tama18Stm32TextureLoaderEEE3getEv>
 80058a2:	62f8      	str	r0, [r7, #44]	; 0x2c
	  __traits::construct(__del._M_alloc, __ptr,
 80058a4:	f107 0320 	add.w	r3, r7, #32
 80058a8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80058aa:	4618      	mov	r0, r3
 80058ac:	f000 fbbd 	bl	800602a <_ZNSt16allocator_traitsISaIN4tama18Stm32TextureLoaderEEE9constructIS1_JEEEvRS2_PT_DpOT0_>
	  __guard = nullptr;
 80058b0:	f107 0318 	add.w	r3, r7, #24
 80058b4:	2100      	movs	r1, #0
 80058b6:	4618      	mov	r0, r3
 80058b8:	f000 fbc4 	bl	8006044 <_ZNSt15__allocated_ptrISaIN4tama18Stm32TextureLoaderEEEaSEDn>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 80058bc:	f107 0220 	add.w	r2, r7, #32
 80058c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80058c4:	4611      	mov	r1, r2
 80058c6:	4618      	mov	r0, r3
 80058c8:	f7ff ffba 	bl	8005840 <_ZNSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>
 80058cc:	f107 0220 	add.w	r2, r7, #32
 80058d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80058d4:	4611      	mov	r1, r2
 80058d6:	4618      	mov	r0, r3
 80058d8:	f000 fb63 	bl	8005fa2 <_ZNSaIN4tama18Stm32TextureLoaderEEC1ERKS1_>
 80058dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80058e0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80058e4:	f107 0014 	add.w	r0, r7, #20
 80058e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80058ea:	f000 fbe0 	bl	80060ae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
 80058ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80058f2:	4618      	mov	r0, r3
 80058f4:	f7ff fc73 	bl	80051de <_ZNSaIN4tama18Stm32TextureLoaderEED1Ev>
 80058f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80058fc:	4618      	mov	r0, r3
 80058fe:	f7ff ff92 	bl	8005826 <_ZNSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	  _M_refcount._M_swap(__count);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	3304      	adds	r3, #4
 8005906:	f107 0214 	add.w	r2, r7, #20
 800590a:	4611      	mov	r1, r2
 800590c:	4618      	mov	r0, r3
 800590e:	f7fb f92e 	bl	8000b6e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  _M_ptr = __ptr;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005916:	601a      	str	r2, [r3, #0]
	  _M_enable_shared_from_this_with(_M_ptr);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4619      	mov	r1, r3
 800591e:	68f8      	ldr	r0, [r7, #12]
 8005920:	f000 fc1c 	bl	800615c <_ZNSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 8005924:	f107 0314 	add.w	r3, r7, #20
 8005928:	4618      	mov	r0, r3
 800592a:	f7fb f815 	bl	8000958 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 800592e:	f107 0318 	add.w	r3, r7, #24
 8005932:	4618      	mov	r0, r3
 8005934:	f000 fb56 	bl	8005fe4 <_ZNSt15__allocated_ptrISaIN4tama18Stm32TextureLoaderEEED1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 8005938:	f107 0320 	add.w	r3, r7, #32
 800593c:	4618      	mov	r0, r3
 800593e:	f7ff ff72 	bl	8005826 <_ZNSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	}
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	4618      	mov	r0, r3
 8005946:	3730      	adds	r7, #48	; 0x30
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}

0800594c <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>:
        struct _Deleter
 800594c:	b580      	push	{r7, lr}
 800594e:	b082      	sub	sp, #8
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	4618      	mov	r0, r3
 8005958:	f7ff fc85 	bl	8005266 <_ZNSaIN4tama27Nokia5110DisplayDataManagerEED1Ev>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	4618      	mov	r0, r3
 8005960:	3708      	adds	r7, #8
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}

08005966 <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>:
 8005966:	b580      	push	{r7, lr}
 8005968:	b082      	sub	sp, #8
 800596a:	af00      	add	r7, sp, #0
 800596c:	6078      	str	r0, [r7, #4]
 800596e:	6039      	str	r1, [r7, #0]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	683a      	ldr	r2, [r7, #0]
 8005974:	4611      	mov	r1, r2
 8005976:	4618      	mov	r0, r3
 8005978:	f000 fbfb 	bl	8006172 <_ZNSaIN4tama27Nokia5110DisplayDataManagerEEC1ERKS1_>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	4618      	mov	r0, r3
 8005980:	3708      	adds	r7, #8
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}

08005986 <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 8005986:	b580      	push	{r7, lr}
 8005988:	b08c      	sub	sp, #48	; 0x30
 800598a:	af00      	add	r7, sp, #0
 800598c:	60f8      	str	r0, [r7, #12]
 800598e:	7239      	strb	r1, [r7, #8]
 8005990:	607a      	str	r2, [r7, #4]
	: _M_ptr(), _M_refcount()
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2200      	movs	r2, #0
 8005996:	601a      	str	r2, [r3, #0]
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	3304      	adds	r3, #4
 800599c:	4618      	mov	r0, r3
 800599e:	f7fb f8a3 	bl	8000ae8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 80059a2:	f107 0320 	add.w	r3, r7, #32
 80059a6:	6879      	ldr	r1, [r7, #4]
 80059a8:	4618      	mov	r0, r3
 80059aa:	f000 fbe2 	bl	8006172 <_ZNSaIN4tama27Nokia5110DisplayDataManagerEEC1ERKS1_>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 80059ae:	f107 0318 	add.w	r3, r7, #24
 80059b2:	f107 0220 	add.w	r2, r7, #32
 80059b6:	4611      	mov	r1, r2
 80059b8:	4618      	mov	r0, r3
 80059ba:	f000 fbe8 	bl	800618e <_ZSt18__allocate_guardedISaIN4tama27Nokia5110DisplayDataManagerEEESt15__allocated_ptrIT_ERS4_>
	  auto __ptr = __guard.get();
 80059be:	f107 0318 	add.w	r3, r7, #24
 80059c2:	4618      	mov	r0, r3
 80059c4:	f000 fc0b 	bl	80061de <_ZNSt15__allocated_ptrISaIN4tama27Nokia5110DisplayDataManagerEEE3getEv>
 80059c8:	62f8      	str	r0, [r7, #44]	; 0x2c
	  __traits::construct(__del._M_alloc, __ptr,
 80059ca:	f107 0320 	add.w	r3, r7, #32
 80059ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80059d0:	4618      	mov	r0, r3
 80059d2:	f000 fc12 	bl	80061fa <_ZNSt16allocator_traitsISaIN4tama27Nokia5110DisplayDataManagerEEE9constructIS1_JEEEvRS2_PT_DpOT0_>
	  __guard = nullptr;
 80059d6:	f107 0318 	add.w	r3, r7, #24
 80059da:	2100      	movs	r1, #0
 80059dc:	4618      	mov	r0, r3
 80059de:	f000 fc19 	bl	8006214 <_ZNSt15__allocated_ptrISaIN4tama27Nokia5110DisplayDataManagerEEEaSEDn>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 80059e2:	f107 0220 	add.w	r2, r7, #32
 80059e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80059ea:	4611      	mov	r1, r2
 80059ec:	4618      	mov	r0, r3
 80059ee:	f7ff ffba 	bl	8005966 <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>
 80059f2:	f107 0220 	add.w	r2, r7, #32
 80059f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80059fa:	4611      	mov	r1, r2
 80059fc:	4618      	mov	r0, r3
 80059fe:	f000 fbb8 	bl	8006172 <_ZNSaIN4tama27Nokia5110DisplayDataManagerEEC1ERKS1_>
 8005a02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005a06:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8005a0a:	f107 0014 	add.w	r0, r7, #20
 8005a0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005a10:	f000 fc35 	bl	800627e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
 8005a14:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f7ff fc24 	bl	8005266 <_ZNSaIN4tama27Nokia5110DisplayDataManagerEED1Ev>
 8005a1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a22:	4618      	mov	r0, r3
 8005a24:	f7ff ff92 	bl	800594c <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	  _M_refcount._M_swap(__count);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	3304      	adds	r3, #4
 8005a2c:	f107 0214 	add.w	r2, r7, #20
 8005a30:	4611      	mov	r1, r2
 8005a32:	4618      	mov	r0, r3
 8005a34:	f7fb f89b 	bl	8000b6e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  _M_ptr = __ptr;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a3c:	601a      	str	r2, [r3, #0]
	  _M_enable_shared_from_this_with(_M_ptr);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4619      	mov	r1, r3
 8005a44:	68f8      	ldr	r0, [r7, #12]
 8005a46:	f000 fc71 	bl	800632c <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 8005a4a:	f107 0314 	add.w	r3, r7, #20
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f7fa ff82 	bl	8000958 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 8005a54:	f107 0318 	add.w	r3, r7, #24
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f000 fbab 	bl	80061b4 <_ZNSt15__allocated_ptrISaIN4tama27Nokia5110DisplayDataManagerEEED1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 8005a5e:	f107 0320 	add.w	r3, r7, #32
 8005a62:	4618      	mov	r0, r3
 8005a64:	f7ff ff72 	bl	800594c <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	}
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3730      	adds	r7, #48	; 0x30
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}

08005a72 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 8005a72:	b580      	push	{r7, lr}
 8005a74:	b08c      	sub	sp, #48	; 0x30
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	60f8      	str	r0, [r7, #12]
 8005a7a:	7239      	strb	r1, [r7, #8]
 8005a7c:	607a      	str	r2, [r7, #4]
	: _M_ptr(), _M_refcount()
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2200      	movs	r2, #0
 8005a82:	601a      	str	r2, [r3, #0]
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	3304      	adds	r3, #4
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f7fb f82d 	bl	8000ae8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 8005a8e:	f107 0320 	add.w	r3, r7, #32
 8005a92:	6879      	ldr	r1, [r7, #4]
 8005a94:	4618      	mov	r0, r3
 8005a96:	f7fe f890 	bl	8003bba <_ZNSaIN4tama5SceneEEC1ERKS1_>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 8005a9a:	f107 0318 	add.w	r3, r7, #24
 8005a9e:	f107 0220 	add.w	r2, r7, #32
 8005aa2:	4611      	mov	r1, r2
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	f7fe f896 	bl	8003bd6 <_ZSt18__allocate_guardedISaIN4tama5SceneEEESt15__allocated_ptrIT_ERS4_>
	  auto __ptr = __guard.get();
 8005aaa:	f107 0318 	add.w	r3, r7, #24
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f7fe f8b9 	bl	8003c26 <_ZNSt15__allocated_ptrISaIN4tama5SceneEEE3getEv>
 8005ab4:	62f8      	str	r0, [r7, #44]	; 0x2c
	  __traits::construct(__del._M_alloc, __ptr,
 8005ab6:	f107 0320 	add.w	r3, r7, #32
 8005aba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005abc:	4618      	mov	r0, r3
 8005abe:	f000 fc40 	bl	8006342 <_ZNSt16allocator_traitsISaIN4tama5SceneEEE9constructIS1_JEEEvRS2_PT_DpOT0_>
	  __guard = nullptr;
 8005ac2:	f107 0318 	add.w	r3, r7, #24
 8005ac6:	2100      	movs	r1, #0
 8005ac8:	4618      	mov	r0, r3
 8005aca:	f7fe f8cd 	bl	8003c68 <_ZNSt15__allocated_ptrISaIN4tama5SceneEEEaSEDn>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 8005ace:	f107 0220 	add.w	r2, r7, #32
 8005ad2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ad6:	4611      	mov	r1, r2
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f7fd ff6a 	bl	80039b2 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>
 8005ade:	f107 0220 	add.w	r2, r7, #32
 8005ae2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005ae6:	4611      	mov	r1, r2
 8005ae8:	4618      	mov	r0, r3
 8005aea:	f7fe f866 	bl	8003bba <_ZNSaIN4tama5SceneEEC1ERKS1_>
 8005aee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005af2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8005af6:	f107 0014 	add.w	r0, r7, #20
 8005afa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005afc:	f7fe f8e9 	bl	8003cd2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama5SceneENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
 8005b00:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005b04:	4618      	mov	r0, r3
 8005b06:	f7fd fd23 	bl	8003550 <_ZNSaIN4tama5SceneEED1Ev>
 8005b0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f7fd ff42 	bl	8003998 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	  _M_refcount._M_swap(__count);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	3304      	adds	r3, #4
 8005b18:	f107 0214 	add.w	r2, r7, #20
 8005b1c:	4611      	mov	r1, r2
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f7fb f825 	bl	8000b6e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  _M_ptr = __ptr;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b28:	601a      	str	r2, [r3, #0]
	  _M_enable_shared_from_this_with(_M_ptr);
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4619      	mov	r1, r3
 8005b30:	68f8      	ldr	r0, [r7, #12]
 8005b32:	f7fe f925 	bl	8003d80 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 8005b36:	f107 0314 	add.w	r3, r7, #20
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f7fa ff0c 	bl	8000958 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 8005b40:	f107 0318 	add.w	r3, r7, #24
 8005b44:	4618      	mov	r0, r3
 8005b46:	f7fe f859 	bl	8003bfc <_ZNSt15__allocated_ptrISaIN4tama5SceneEEED1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 8005b4a:	f107 0320 	add.w	r3, r7, #32
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f7fd ff22 	bl	8003998 <_ZNSt12__shared_ptrIN4tama5SceneELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	}
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	4618      	mov	r0, r3
 8005b58:	3730      	adds	r7, #48	; 0x30
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}

08005b5e <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>:
        struct _Deleter
 8005b5e:	b580      	push	{r7, lr}
 8005b60:	b082      	sub	sp, #8
 8005b62:	af00      	add	r7, sp, #0
 8005b64:	6078      	str	r0, [r7, #4]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f7ff fbda 	bl	8005322 <_ZNSaIN4tama6SpriteEED1Ev>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	4618      	mov	r0, r3
 8005b72:	3708      	adds	r7, #8
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}

08005b78 <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>:
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b082      	sub	sp, #8
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
 8005b80:	6039      	str	r1, [r7, #0]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	683a      	ldr	r2, [r7, #0]
 8005b86:	4611      	mov	r1, r2
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f000 fbe7 	bl	800635c <_ZNSaIN4tama6SpriteEEC1ERKS1_>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	4618      	mov	r0, r3
 8005b92:	3708      	adds	r7, #8
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}

08005b98 <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJRSt10shared_ptrINS0_7TextureEENS0_5Vec2dEEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 8005b98:	b590      	push	{r4, r7, lr}
 8005b9a:	b08d      	sub	sp, #52	; 0x34
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	60f8      	str	r0, [r7, #12]
 8005ba0:	7239      	strb	r1, [r7, #8]
 8005ba2:	607a      	str	r2, [r7, #4]
 8005ba4:	603b      	str	r3, [r7, #0]
	: _M_ptr(), _M_refcount()
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	601a      	str	r2, [r3, #0]
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	3304      	adds	r3, #4
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f7fa ff99 	bl	8000ae8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 8005bb6:	f107 0320 	add.w	r3, r7, #32
 8005bba:	6879      	ldr	r1, [r7, #4]
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f000 fbcd 	bl	800635c <_ZNSaIN4tama6SpriteEEC1ERKS1_>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 8005bc2:	f107 0318 	add.w	r3, r7, #24
 8005bc6:	f107 0220 	add.w	r2, r7, #32
 8005bca:	4611      	mov	r1, r2
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f000 fbd3 	bl	8006378 <_ZSt18__allocate_guardedISaIN4tama6SpriteEEESt15__allocated_ptrIT_ERS4_>
	  auto __ptr = __guard.get();
 8005bd2:	f107 0318 	add.w	r3, r7, #24
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f000 fbf6 	bl	80063c8 <_ZNSt15__allocated_ptrISaIN4tama6SpriteEEE3getEv>
 8005bdc:	62f8      	str	r0, [r7, #44]	; 0x2c
	  __traits::construct(__del._M_alloc, __ptr,
 8005bde:	6838      	ldr	r0, [r7, #0]
 8005be0:	f7ff f9f7 	bl	8004fd2 <_ZSt7forwardIRSt10shared_ptrIN4tama7TextureEEEOT_RNSt16remove_referenceIS5_E4typeE>
 8005be4:	4604      	mov	r4, r0
 8005be6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8005be8:	f7ff f9fe 	bl	8004fe8 <_ZSt7forwardIN4tama5Vec2dEEOT_RNSt16remove_referenceIS2_E4typeE>
 8005bec:	4603      	mov	r3, r0
 8005bee:	f107 0020 	add.w	r0, r7, #32
 8005bf2:	4622      	mov	r2, r4
 8005bf4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005bf6:	f000 fbf5 	bl	80063e4 <_ZNSt16allocator_traitsISaIN4tama6SpriteEEE9constructIS1_JRSt10shared_ptrINS0_7TextureEENS0_5Vec2dEEEEvRS2_PT_DpOT0_>
	  __guard = nullptr;
 8005bfa:	f107 0318 	add.w	r3, r7, #24
 8005bfe:	2100      	movs	r1, #0
 8005c00:	4618      	mov	r0, r3
 8005c02:	f000 fc07 	bl	8006414 <_ZNSt15__allocated_ptrISaIN4tama6SpriteEEEaSEDn>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 8005c06:	f107 0220 	add.w	r2, r7, #32
 8005c0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c0e:	4611      	mov	r1, r2
 8005c10:	4618      	mov	r0, r3
 8005c12:	f7ff ffb1 	bl	8005b78 <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>
 8005c16:	f107 0220 	add.w	r2, r7, #32
 8005c1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005c1e:	4611      	mov	r1, r2
 8005c20:	4618      	mov	r0, r3
 8005c22:	f000 fb9b 	bl	800635c <_ZNSaIN4tama6SpriteEEC1ERKS1_>
 8005c26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005c2a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8005c2e:	f107 0014 	add.w	r0, r7, #20
 8005c32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c34:	f000 fc23 	bl	800647e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama6SpriteENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
 8005c38:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	f7ff fb70 	bl	8005322 <_ZNSaIN4tama6SpriteEED1Ev>
 8005c42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c46:	4618      	mov	r0, r3
 8005c48:	f7ff ff89 	bl	8005b5e <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	  _M_refcount._M_swap(__count);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	3304      	adds	r3, #4
 8005c50:	f107 0214 	add.w	r2, r7, #20
 8005c54:	4611      	mov	r1, r2
 8005c56:	4618      	mov	r0, r3
 8005c58:	f7fa ff89 	bl	8000b6e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  _M_ptr = __ptr;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c60:	601a      	str	r2, [r3, #0]
	  _M_enable_shared_from_this_with(_M_ptr);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4619      	mov	r1, r3
 8005c68:	68f8      	ldr	r0, [r7, #12]
 8005c6a:	f000 fc5f 	bl	800652c <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 8005c6e:	f107 0314 	add.w	r3, r7, #20
 8005c72:	4618      	mov	r0, r3
 8005c74:	f7fa fe70 	bl	8000958 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 8005c78:	f107 0318 	add.w	r3, r7, #24
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f000 fb8e 	bl	800639e <_ZNSt15__allocated_ptrISaIN4tama6SpriteEEED1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 8005c82:	f107 0320 	add.w	r3, r7, #32
 8005c86:	4618      	mov	r0, r3
 8005c88:	f7ff ff69 	bl	8005b5e <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	}
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3734      	adds	r7, #52	; 0x34
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd90      	pop	{r4, r7, pc}

08005c96 <_ZNSt12__shared_ptrIN4tama4TextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>:
        struct _Deleter
 8005c96:	b580      	push	{r7, lr}
 8005c98:	b082      	sub	sp, #8
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	6078      	str	r0, [r7, #4]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	f7ff fb70 	bl	8005386 <_ZNSaIN4tama4TextEED1Ev>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3708      	adds	r7, #8
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}

08005cb0 <_ZNSt12__shared_ptrIN4tama4TextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>:
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b082      	sub	sp, #8
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
 8005cb8:	6039      	str	r1, [r7, #0]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	683a      	ldr	r2, [r7, #0]
 8005cbe:	4611      	mov	r1, r2
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	f000 fc3e 	bl	8006542 <_ZNSaIN4tama4TextEEC1ERKS1_>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3708      	adds	r7, #8
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}

08005cd0 <_ZNSt12__shared_ptrIN4tama4TextELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EJNS0_5Vec2dEEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b08c      	sub	sp, #48	; 0x30
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	60f8      	str	r0, [r7, #12]
 8005cd8:	7239      	strb	r1, [r7, #8]
 8005cda:	607a      	str	r2, [r7, #4]
 8005cdc:	603b      	str	r3, [r7, #0]
	: _M_ptr(), _M_refcount()
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	601a      	str	r2, [r3, #0]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	3304      	adds	r3, #4
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f7fa fefd 	bl	8000ae8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 8005cee:	f107 0320 	add.w	r3, r7, #32
 8005cf2:	6879      	ldr	r1, [r7, #4]
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f000 fc24 	bl	8006542 <_ZNSaIN4tama4TextEEC1ERKS1_>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 8005cfa:	f107 0318 	add.w	r3, r7, #24
 8005cfe:	f107 0220 	add.w	r2, r7, #32
 8005d02:	4611      	mov	r1, r2
 8005d04:	4618      	mov	r0, r3
 8005d06:	f000 fc2a 	bl	800655e <_ZSt18__allocate_guardedISaIN4tama4TextEEESt15__allocated_ptrIT_ERS4_>
	  auto __ptr = __guard.get();
 8005d0a:	f107 0318 	add.w	r3, r7, #24
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f000 fc4d 	bl	80065ae <_ZNSt15__allocated_ptrISaIN4tama4TextEEE3getEv>
 8005d14:	62f8      	str	r0, [r7, #44]	; 0x2c
	  __traits::construct(__del._M_alloc, __ptr,
 8005d16:	6838      	ldr	r0, [r7, #0]
 8005d18:	f7ff f966 	bl	8004fe8 <_ZSt7forwardIN4tama5Vec2dEEOT_RNSt16remove_referenceIS2_E4typeE>
 8005d1c:	4602      	mov	r2, r0
 8005d1e:	f107 0320 	add.w	r3, r7, #32
 8005d22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d24:	4618      	mov	r0, r3
 8005d26:	f000 fc50 	bl	80065ca <_ZNSt16allocator_traitsISaIN4tama4TextEEE9constructIS1_JNS0_5Vec2dEEEEvRS2_PT_DpOT0_>
	  __guard = nullptr;
 8005d2a:	f107 0318 	add.w	r3, r7, #24
 8005d2e:	2100      	movs	r1, #0
 8005d30:	4618      	mov	r0, r3
 8005d32:	f000 fc5d 	bl	80065f0 <_ZNSt15__allocated_ptrISaIN4tama4TextEEEaSEDn>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 8005d36:	f107 0220 	add.w	r2, r7, #32
 8005d3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d3e:	4611      	mov	r1, r2
 8005d40:	4618      	mov	r0, r3
 8005d42:	f7ff ffb5 	bl	8005cb0 <_ZNSt12__shared_ptrIN4tama4TextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1ERKS7_>
 8005d46:	f107 0220 	add.w	r2, r7, #32
 8005d4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005d4e:	4611      	mov	r1, r2
 8005d50:	4618      	mov	r0, r3
 8005d52:	f000 fbf6 	bl	8006542 <_ZNSaIN4tama4TextEEC1ERKS1_>
 8005d56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005d5a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8005d5e:	f107 0014 	add.w	r0, r7, #20
 8005d62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d64:	f000 fc79 	bl	800665a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama4TextENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
 8005d68:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f7ff fb0a 	bl	8005386 <_ZNSaIN4tama4TextEED1Ev>
 8005d72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d76:	4618      	mov	r0, r3
 8005d78:	f7ff ff8d 	bl	8005c96 <_ZNSt12__shared_ptrIN4tama4TextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	  _M_refcount._M_swap(__count);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	3304      	adds	r3, #4
 8005d80:	f107 0214 	add.w	r2, r7, #20
 8005d84:	4611      	mov	r1, r2
 8005d86:	4618      	mov	r0, r3
 8005d88:	f7fa fef1 	bl	8000b6e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  _M_ptr = __ptr;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d90:	601a      	str	r2, [r3, #0]
	  _M_enable_shared_from_this_with(_M_ptr);
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4619      	mov	r1, r3
 8005d98:	68f8      	ldr	r0, [r7, #12]
 8005d9a:	f000 fcb5 	bl	8006708 <_ZNSt12__shared_ptrIN4tama4TextELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
 8005d9e:	f107 0314 	add.w	r3, r7, #20
 8005da2:	4618      	mov	r0, r3
 8005da4:	f7fa fdd8 	bl	8000958 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
 8005da8:	f107 0318 	add.w	r3, r7, #24
 8005dac:	4618      	mov	r0, r3
 8005dae:	f000 fbe9 	bl	8006584 <_ZNSt15__allocated_ptrISaIN4tama4TextEEED1Ev>
	  _Deleter<typename __traits::allocator_type> __del = { __a };
 8005db2:	f107 0320 	add.w	r3, r7, #32
 8005db6:	4618      	mov	r0, r3
 8005db8:	f7ff ff6d 	bl	8005c96 <_ZNSt12__shared_ptrIN4tama4TextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	}
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3730      	adds	r7, #48	; 0x30
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}

08005dc6 <_ZNSaIN4tama16Nokia5510DisplayEEC1ERKS1_>:
      allocator(const allocator& __a) throw()
 8005dc6:	b580      	push	{r7, lr}
 8005dc8:	b082      	sub	sp, #8
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	6078      	str	r0, [r7, #4]
 8005dce:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8005dd0:	6839      	ldr	r1, [r7, #0]
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f000 fca3 	bl	800671e <_ZN9__gnu_cxx13new_allocatorIN4tama16Nokia5510DisplayEEC1ERKS3_>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3708      	adds	r7, #8
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}

08005de2 <_ZSt18__allocate_guardedISaIN4tama16Nokia5510DisplayEEESt15__allocated_ptrIT_ERS4_>:
    __allocate_guarded(_Alloc& __a)
 8005de2:	b580      	push	{r7, lr}
 8005de4:	b082      	sub	sp, #8
 8005de6:	af00      	add	r7, sp, #0
 8005de8:	6078      	str	r0, [r7, #4]
 8005dea:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 8005dec:	2101      	movs	r1, #1
 8005dee:	6838      	ldr	r0, [r7, #0]
 8005df0:	f000 fca1 	bl	8006736 <_ZNSt16allocator_traitsISaIN4tama16Nokia5510DisplayEEE8allocateERS2_j>
 8005df4:	4603      	mov	r3, r0
 8005df6:	461a      	mov	r2, r3
 8005df8:	6839      	ldr	r1, [r7, #0]
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f000 fcaa 	bl	8006754 <_ZNSt15__allocated_ptrISaIN4tama16Nokia5510DisplayEEEC1ERS2_PS1_>
    }
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	3708      	adds	r7, #8
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}

08005e08 <_ZNSt15__allocated_ptrISaIN4tama16Nokia5510DisplayEEED1Ev>:
      ~__allocated_ptr()
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b082      	sub	sp, #8
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d007      	beq.n	8005e28 <_ZNSt15__allocated_ptrISaIN4tama16Nokia5510DisplayEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6818      	ldr	r0, [r3, #0]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	2201      	movs	r2, #1
 8005e22:	4619      	mov	r1, r3
 8005e24:	f000 fcaa 	bl	800677c <_ZNSt16allocator_traitsISaIN4tama16Nokia5510DisplayEEE10deallocateERS2_PS1_j>
      }
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3708      	adds	r7, #8
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}

08005e32 <_ZNSt15__allocated_ptrISaIN4tama16Nokia5510DisplayEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 8005e32:	b580      	push	{r7, lr}
 8005e34:	b082      	sub	sp, #8
 8005e36:	af00      	add	r7, sp, #0
 8005e38:	6078      	str	r0, [r7, #4]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f000 fcab 	bl	800679a <_ZNSt15__allocated_ptrISaIN4tama16Nokia5510DisplayEEE10_S_raw_ptrEPS1_>
 8005e44:	4603      	mov	r3, r0
 8005e46:	4618      	mov	r0, r3
 8005e48:	3708      	adds	r7, #8
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}

08005e4e <_ZNSt16allocator_traitsISaIN4tama16Nokia5510DisplayEEE9constructIS1_JRNS0_13DisplayConfigEEEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8005e4e:	b580      	push	{r7, lr}
 8005e50:	b084      	sub	sp, #16
 8005e52:	af00      	add	r7, sp, #0
 8005e54:	60f8      	str	r0, [r7, #12]
 8005e56:	60b9      	str	r1, [r7, #8]
 8005e58:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f7fe ffe0 	bl	8004e20 <_ZSt7forwardIRN4tama13DisplayConfigEEOT_RNSt16remove_referenceIS3_E4typeE>
 8005e60:	4603      	mov	r3, r0
 8005e62:	461a      	mov	r2, r3
 8005e64:	68b9      	ldr	r1, [r7, #8]
 8005e66:	68f8      	ldr	r0, [r7, #12]
 8005e68:	f000 fca2 	bl	80067b0 <_ZN9__gnu_cxx13new_allocatorIN4tama16Nokia5510DisplayEE9constructIS2_JRNS1_13DisplayConfigEEEEvPT_DpOT0_>
 8005e6c:	bf00      	nop
 8005e6e:	3710      	adds	r7, #16
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}

08005e74 <_ZNSt15__allocated_ptrISaIN4tama16Nokia5510DisplayEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 8005e74:	b480      	push	{r7}
 8005e76:	b083      	sub	sp, #12
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
 8005e7c:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2200      	movs	r2, #0
 8005e82:	605a      	str	r2, [r3, #4]
	return *this;
 8005e84:	687b      	ldr	r3, [r7, #4]
      }
 8005e86:	4618      	mov	r0, r3
 8005e88:	370c      	adds	r7, #12
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr

08005e92 <_ZSt4moveIRNSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
 8005e92:	b480      	push	{r7}
 8005e94:	b083      	sub	sp, #12
 8005e96:	af00      	add	r7, sp, #0
 8005e98:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	370c      	adds	r7, #12
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea6:	4770      	bx	lr

08005ea8 <_ZNSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>:
        struct _Deleter
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b082      	sub	sp, #8
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
 8005eb0:	6039      	str	r1, [r7, #0]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	683a      	ldr	r2, [r7, #0]
 8005eb6:	4611      	mov	r1, r2
 8005eb8:	4618      	mov	r0, r3
 8005eba:	f7ff ff84 	bl	8005dc6 <_ZNSaIN4tama16Nokia5510DisplayEEC1ERKS1_>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	3708      	adds	r7, #8
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}

08005ec8 <_ZSt4moveIRSaIN4tama16Nokia5510DisplayEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8005ec8:	b480      	push	{r7}
 8005eca:	b083      	sub	sp, #12
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	370c      	adds	r7, #12
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005edc:	4770      	bx	lr

08005ede <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama16Nokia5510DisplayENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
 8005ede:	b5b0      	push	{r4, r5, r7, lr}
 8005ee0:	b08a      	sub	sp, #40	; 0x28
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	60f8      	str	r0, [r7, #12]
 8005ee6:	60b9      	str	r1, [r7, #8]
 8005ee8:	607a      	str	r2, [r7, #4]
 8005eea:	603b      	str	r3, [r7, #0]
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	601a      	str	r2, [r3, #0]
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 8005ef2:	f107 031c 	add.w	r3, r7, #28
 8005ef6:	6839      	ldr	r1, [r7, #0]
 8005ef8:	4618      	mov	r0, r3
 8005efa:	f000 fc73 	bl	80067e4 <_ZNSaISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	      auto __guard = std::__allocate_guarded(__a2);
 8005efe:	f107 0314 	add.w	r3, r7, #20
 8005f02:	f107 021c 	add.w	r2, r7, #28
 8005f06:	4611      	mov	r1, r2
 8005f08:	4618      	mov	r0, r3
 8005f0a:	f000 fc84 	bl	8006816 <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>
	      _Sp_cd_type* __mem = __guard.get();
 8005f0e:	f107 0314 	add.w	r3, r7, #20
 8005f12:	4618      	mov	r0, r3
 8005f14:	f000 fca7 	bl	8006866 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>
 8005f18:	6278      	str	r0, [r7, #36]	; 0x24
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f7ff ffb9 	bl	8005e92 <_ZSt4moveIRNSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 8005f20:	4602      	mov	r2, r0
 8005f22:	f107 0320 	add.w	r3, r7, #32
 8005f26:	4611      	mov	r1, r2
 8005f28:	4618      	mov	r0, r3
 8005f2a:	f7ff ffbd 	bl	8005ea8 <_ZNSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 8005f2e:	f107 0420 	add.w	r4, r7, #32
 8005f32:	6838      	ldr	r0, [r7, #0]
 8005f34:	f7ff ffc8 	bl	8005ec8 <_ZSt4moveIRSaIN4tama16Nokia5510DisplayEEEONSt16remove_referenceIT_E4typeEOS5_>
 8005f38:	4605      	mov	r5, r0
 8005f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f3c:	4619      	mov	r1, r3
 8005f3e:	2014      	movs	r0, #20
 8005f40:	f7fa fe54 	bl	8000bec <_ZnwjPv>
 8005f44:	2800      	cmp	r0, #0
 8005f46:	d004      	beq.n	8005f52 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama16Nokia5510DisplayENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x74>
 8005f48:	462b      	mov	r3, r5
 8005f4a:	4622      	mov	r2, r4
 8005f4c:	68b9      	ldr	r1, [r7, #8]
 8005f4e:	f000 fcc3 	bl	80068d8 <_ZNSt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>
 8005f52:	f107 0320 	add.w	r3, r7, #32
 8005f56:	4618      	mov	r0, r3
 8005f58:	f7ff fbcd 	bl	80056f6 <_ZNSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	      _M_pi = __mem;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f60:	601a      	str	r2, [r3, #0]
	      __guard = nullptr;
 8005f62:	f107 0314 	add.w	r3, r7, #20
 8005f66:	2100      	movs	r1, #0
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f000 fce3 	bl	8006934 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>
	      auto __guard = std::__allocate_guarded(__a2);
 8005f6e:	f107 0314 	add.w	r3, r7, #20
 8005f72:	4618      	mov	r0, r3
 8005f74:	f000 fc62 	bl	800683c <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 8005f78:	f107 031c 	add.w	r3, r7, #28
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f000 fc3e 	bl	80067fe <_ZNSaISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
	}
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	4618      	mov	r0, r3
 8005f86:	3728      	adds	r7, #40	; 0x28
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bdb0      	pop	{r4, r5, r7, pc}

08005f8c <_ZNSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp*) noexcept
 8005f8c:	b480      	push	{r7}
 8005f8e:	b083      	sub	sp, #12
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
 8005f94:	6039      	str	r1, [r7, #0]
	{ }
 8005f96:	bf00      	nop
 8005f98:	370c      	adds	r7, #12
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa0:	4770      	bx	lr

08005fa2 <_ZNSaIN4tama18Stm32TextureLoaderEEC1ERKS1_>:
      allocator(const allocator& __a) throw()
 8005fa2:	b580      	push	{r7, lr}
 8005fa4:	b082      	sub	sp, #8
 8005fa6:	af00      	add	r7, sp, #0
 8005fa8:	6078      	str	r0, [r7, #4]
 8005faa:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8005fac:	6839      	ldr	r1, [r7, #0]
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f000 fcef 	bl	8006992 <_ZN9__gnu_cxx13new_allocatorIN4tama18Stm32TextureLoaderEEC1ERKS3_>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3708      	adds	r7, #8
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}

08005fbe <_ZSt18__allocate_guardedISaIN4tama18Stm32TextureLoaderEEESt15__allocated_ptrIT_ERS4_>:
    __allocate_guarded(_Alloc& __a)
 8005fbe:	b580      	push	{r7, lr}
 8005fc0:	b082      	sub	sp, #8
 8005fc2:	af00      	add	r7, sp, #0
 8005fc4:	6078      	str	r0, [r7, #4]
 8005fc6:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 8005fc8:	2101      	movs	r1, #1
 8005fca:	6838      	ldr	r0, [r7, #0]
 8005fcc:	f000 fced 	bl	80069aa <_ZNSt16allocator_traitsISaIN4tama18Stm32TextureLoaderEEE8allocateERS2_j>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	6839      	ldr	r1, [r7, #0]
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f000 fcf6 	bl	80069c8 <_ZNSt15__allocated_ptrISaIN4tama18Stm32TextureLoaderEEEC1ERS2_PS1_>
    }
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	3708      	adds	r7, #8
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}

08005fe4 <_ZNSt15__allocated_ptrISaIN4tama18Stm32TextureLoaderEEED1Ev>:
      ~__allocated_ptr()
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b082      	sub	sp, #8
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d007      	beq.n	8006004 <_ZNSt15__allocated_ptrISaIN4tama18Stm32TextureLoaderEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6818      	ldr	r0, [r3, #0]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	4619      	mov	r1, r3
 8006000:	f000 fcf6 	bl	80069f0 <_ZNSt16allocator_traitsISaIN4tama18Stm32TextureLoaderEEE10deallocateERS2_PS1_j>
      }
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	4618      	mov	r0, r3
 8006008:	3708      	adds	r7, #8
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}

0800600e <_ZNSt15__allocated_ptrISaIN4tama18Stm32TextureLoaderEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 800600e:	b580      	push	{r7, lr}
 8006010:	b082      	sub	sp, #8
 8006012:	af00      	add	r7, sp, #0
 8006014:	6078      	str	r0, [r7, #4]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	4618      	mov	r0, r3
 800601c:	f000 fcf7 	bl	8006a0e <_ZNSt15__allocated_ptrISaIN4tama18Stm32TextureLoaderEEE10_S_raw_ptrEPS1_>
 8006020:	4603      	mov	r3, r0
 8006022:	4618      	mov	r0, r3
 8006024:	3708      	adds	r7, #8
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}

0800602a <_ZNSt16allocator_traitsISaIN4tama18Stm32TextureLoaderEEE9constructIS1_JEEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 800602a:	b580      	push	{r7, lr}
 800602c:	b082      	sub	sp, #8
 800602e:	af00      	add	r7, sp, #0
 8006030:	6078      	str	r0, [r7, #4]
 8006032:	6039      	str	r1, [r7, #0]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8006034:	6839      	ldr	r1, [r7, #0]
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f000 fcf4 	bl	8006a24 <_ZN9__gnu_cxx13new_allocatorIN4tama18Stm32TextureLoaderEE9constructIS2_JEEEvPT_DpOT0_>
 800603c:	bf00      	nop
 800603e:	3708      	adds	r7, #8
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}

08006044 <_ZNSt15__allocated_ptrISaIN4tama18Stm32TextureLoaderEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 8006044:	b480      	push	{r7}
 8006046:	b083      	sub	sp, #12
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2200      	movs	r2, #0
 8006052:	605a      	str	r2, [r3, #4]
	return *this;
 8006054:	687b      	ldr	r3, [r7, #4]
      }
 8006056:	4618      	mov	r0, r3
 8006058:	370c      	adds	r7, #12
 800605a:	46bd      	mov	sp, r7
 800605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006060:	4770      	bx	lr

08006062 <_ZSt4moveIRNSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
 8006062:	b480      	push	{r7}
 8006064:	b083      	sub	sp, #12
 8006066:	af00      	add	r7, sp, #0
 8006068:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	4618      	mov	r0, r3
 800606e:	370c      	adds	r7, #12
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr

08006078 <_ZNSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>:
        struct _Deleter
 8006078:	b580      	push	{r7, lr}
 800607a:	b082      	sub	sp, #8
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
 8006080:	6039      	str	r1, [r7, #0]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	683a      	ldr	r2, [r7, #0]
 8006086:	4611      	mov	r1, r2
 8006088:	4618      	mov	r0, r3
 800608a:	f7ff ff8a 	bl	8005fa2 <_ZNSaIN4tama18Stm32TextureLoaderEEC1ERKS1_>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	4618      	mov	r0, r3
 8006092:	3708      	adds	r7, #8
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}

08006098 <_ZSt4moveIRSaIN4tama18Stm32TextureLoaderEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8006098:	b480      	push	{r7}
 800609a:	b083      	sub	sp, #12
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	4618      	mov	r0, r3
 80060a4:	370c      	adds	r7, #12
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr

080060ae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
 80060ae:	b5b0      	push	{r4, r5, r7, lr}
 80060b0:	b08a      	sub	sp, #40	; 0x28
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	60f8      	str	r0, [r7, #12]
 80060b6:	60b9      	str	r1, [r7, #8]
 80060b8:	607a      	str	r2, [r7, #4]
 80060ba:	603b      	str	r3, [r7, #0]
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2200      	movs	r2, #0
 80060c0:	601a      	str	r2, [r3, #0]
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 80060c2:	f107 031c 	add.w	r3, r7, #28
 80060c6:	6839      	ldr	r1, [r7, #0]
 80060c8:	4618      	mov	r0, r3
 80060ca:	f000 fcc1 	bl	8006a50 <_ZNSaISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	      auto __guard = std::__allocate_guarded(__a2);
 80060ce:	f107 0314 	add.w	r3, r7, #20
 80060d2:	f107 021c 	add.w	r2, r7, #28
 80060d6:	4611      	mov	r1, r2
 80060d8:	4618      	mov	r0, r3
 80060da:	f000 fcd2 	bl	8006a82 <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>
	      _Sp_cd_type* __mem = __guard.get();
 80060de:	f107 0314 	add.w	r3, r7, #20
 80060e2:	4618      	mov	r0, r3
 80060e4:	f000 fcf5 	bl	8006ad2 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>
 80060e8:	6278      	str	r0, [r7, #36]	; 0x24
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f7ff ffb9 	bl	8006062 <_ZSt4moveIRNSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 80060f0:	4602      	mov	r2, r0
 80060f2:	f107 0320 	add.w	r3, r7, #32
 80060f6:	4611      	mov	r1, r2
 80060f8:	4618      	mov	r0, r3
 80060fa:	f7ff ffbd 	bl	8006078 <_ZNSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 80060fe:	f107 0420 	add.w	r4, r7, #32
 8006102:	6838      	ldr	r0, [r7, #0]
 8006104:	f7ff ffc8 	bl	8006098 <_ZSt4moveIRSaIN4tama18Stm32TextureLoaderEEEONSt16remove_referenceIT_E4typeEOS5_>
 8006108:	4605      	mov	r5, r0
 800610a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800610c:	4619      	mov	r1, r3
 800610e:	2014      	movs	r0, #20
 8006110:	f7fa fd6c 	bl	8000bec <_ZnwjPv>
 8006114:	2800      	cmp	r0, #0
 8006116:	d004      	beq.n	8006122 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x74>
 8006118:	462b      	mov	r3, r5
 800611a:	4622      	mov	r2, r4
 800611c:	68b9      	ldr	r1, [r7, #8]
 800611e:	f000 fd11 	bl	8006b44 <_ZNSt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>
 8006122:	f107 0320 	add.w	r3, r7, #32
 8006126:	4618      	mov	r0, r3
 8006128:	f7ff fb7d 	bl	8005826 <_ZNSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	      _M_pi = __mem;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006130:	601a      	str	r2, [r3, #0]
	      __guard = nullptr;
 8006132:	f107 0314 	add.w	r3, r7, #20
 8006136:	2100      	movs	r1, #0
 8006138:	4618      	mov	r0, r3
 800613a:	f000 fd31 	bl	8006ba0 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>
	      auto __guard = std::__allocate_guarded(__a2);
 800613e:	f107 0314 	add.w	r3, r7, #20
 8006142:	4618      	mov	r0, r3
 8006144:	f000 fcb0 	bl	8006aa8 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 8006148:	f107 031c 	add.w	r3, r7, #28
 800614c:	4618      	mov	r0, r3
 800614e:	f000 fc8c 	bl	8006a6a <_ZNSaISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
	}
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	4618      	mov	r0, r3
 8006156:	3728      	adds	r7, #40	; 0x28
 8006158:	46bd      	mov	sp, r7
 800615a:	bdb0      	pop	{r4, r5, r7, pc}

0800615c <_ZNSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp*) noexcept
 800615c:	b480      	push	{r7}
 800615e:	b083      	sub	sp, #12
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	6039      	str	r1, [r7, #0]
	{ }
 8006166:	bf00      	nop
 8006168:	370c      	adds	r7, #12
 800616a:	46bd      	mov	sp, r7
 800616c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006170:	4770      	bx	lr

08006172 <_ZNSaIN4tama27Nokia5110DisplayDataManagerEEC1ERKS1_>:
      allocator(const allocator& __a) throw()
 8006172:	b580      	push	{r7, lr}
 8006174:	b082      	sub	sp, #8
 8006176:	af00      	add	r7, sp, #0
 8006178:	6078      	str	r0, [r7, #4]
 800617a:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 800617c:	6839      	ldr	r1, [r7, #0]
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f000 fd3d 	bl	8006bfe <_ZN9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEEC1ERKS3_>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	4618      	mov	r0, r3
 8006188:	3708      	adds	r7, #8
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}

0800618e <_ZSt18__allocate_guardedISaIN4tama27Nokia5110DisplayDataManagerEEESt15__allocated_ptrIT_ERS4_>:
    __allocate_guarded(_Alloc& __a)
 800618e:	b580      	push	{r7, lr}
 8006190:	b082      	sub	sp, #8
 8006192:	af00      	add	r7, sp, #0
 8006194:	6078      	str	r0, [r7, #4]
 8006196:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 8006198:	2101      	movs	r1, #1
 800619a:	6838      	ldr	r0, [r7, #0]
 800619c:	f000 fd3b 	bl	8006c16 <_ZNSt16allocator_traitsISaIN4tama27Nokia5110DisplayDataManagerEEE8allocateERS2_j>
 80061a0:	4603      	mov	r3, r0
 80061a2:	461a      	mov	r2, r3
 80061a4:	6839      	ldr	r1, [r7, #0]
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f000 fd44 	bl	8006c34 <_ZNSt15__allocated_ptrISaIN4tama27Nokia5110DisplayDataManagerEEEC1ERS2_PS1_>
    }
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	3708      	adds	r7, #8
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}

080061b4 <_ZNSt15__allocated_ptrISaIN4tama27Nokia5110DisplayDataManagerEEED1Ev>:
      ~__allocated_ptr()
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b082      	sub	sp, #8
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d007      	beq.n	80061d4 <_ZNSt15__allocated_ptrISaIN4tama27Nokia5110DisplayDataManagerEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6818      	ldr	r0, [r3, #0]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	2201      	movs	r2, #1
 80061ce:	4619      	mov	r1, r3
 80061d0:	f000 fd44 	bl	8006c5c <_ZNSt16allocator_traitsISaIN4tama27Nokia5110DisplayDataManagerEEE10deallocateERS2_PS1_j>
      }
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	4618      	mov	r0, r3
 80061d8:	3708      	adds	r7, #8
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}

080061de <_ZNSt15__allocated_ptrISaIN4tama27Nokia5110DisplayDataManagerEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 80061de:	b580      	push	{r7, lr}
 80061e0:	b082      	sub	sp, #8
 80061e2:	af00      	add	r7, sp, #0
 80061e4:	6078      	str	r0, [r7, #4]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	4618      	mov	r0, r3
 80061ec:	f000 fd45 	bl	8006c7a <_ZNSt15__allocated_ptrISaIN4tama27Nokia5110DisplayDataManagerEEE10_S_raw_ptrEPS1_>
 80061f0:	4603      	mov	r3, r0
 80061f2:	4618      	mov	r0, r3
 80061f4:	3708      	adds	r7, #8
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}

080061fa <_ZNSt16allocator_traitsISaIN4tama27Nokia5110DisplayDataManagerEEE9constructIS1_JEEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 80061fa:	b580      	push	{r7, lr}
 80061fc:	b082      	sub	sp, #8
 80061fe:	af00      	add	r7, sp, #0
 8006200:	6078      	str	r0, [r7, #4]
 8006202:	6039      	str	r1, [r7, #0]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8006204:	6839      	ldr	r1, [r7, #0]
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f000 fd7c 	bl	8006d04 <_ZN9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEE9constructIS2_JEEEvPT_DpOT0_>
 800620c:	bf00      	nop
 800620e:	3708      	adds	r7, #8
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}

08006214 <_ZNSt15__allocated_ptrISaIN4tama27Nokia5110DisplayDataManagerEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 8006214:	b480      	push	{r7}
 8006216:	b083      	sub	sp, #12
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2200      	movs	r2, #0
 8006222:	605a      	str	r2, [r3, #4]
	return *this;
 8006224:	687b      	ldr	r3, [r7, #4]
      }
 8006226:	4618      	mov	r0, r3
 8006228:	370c      	adds	r7, #12
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr

08006232 <_ZSt4moveIRNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
 8006232:	b480      	push	{r7}
 8006234:	b083      	sub	sp, #12
 8006236:	af00      	add	r7, sp, #0
 8006238:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	4618      	mov	r0, r3
 800623e:	370c      	adds	r7, #12
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr

08006248 <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>:
        struct _Deleter
 8006248:	b580      	push	{r7, lr}
 800624a:	b082      	sub	sp, #8
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	6039      	str	r1, [r7, #0]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	683a      	ldr	r2, [r7, #0]
 8006256:	4611      	mov	r1, r2
 8006258:	4618      	mov	r0, r3
 800625a:	f7ff ff8a 	bl	8006172 <_ZNSaIN4tama27Nokia5110DisplayDataManagerEEC1ERKS1_>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	4618      	mov	r0, r3
 8006262:	3708      	adds	r7, #8
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}

08006268 <_ZSt4moveIRSaIN4tama27Nokia5110DisplayDataManagerEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8006268:	b480      	push	{r7}
 800626a:	b083      	sub	sp, #12
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	4618      	mov	r0, r3
 8006274:	370c      	adds	r7, #12
 8006276:	46bd      	mov	sp, r7
 8006278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627c:	4770      	bx	lr

0800627e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
 800627e:	b5b0      	push	{r4, r5, r7, lr}
 8006280:	b08a      	sub	sp, #40	; 0x28
 8006282:	af00      	add	r7, sp, #0
 8006284:	60f8      	str	r0, [r7, #12]
 8006286:	60b9      	str	r1, [r7, #8]
 8006288:	607a      	str	r2, [r7, #4]
 800628a:	603b      	str	r3, [r7, #0]
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2200      	movs	r2, #0
 8006290:	601a      	str	r2, [r3, #0]
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 8006292:	f107 031c 	add.w	r3, r7, #28
 8006296:	6839      	ldr	r1, [r7, #0]
 8006298:	4618      	mov	r0, r3
 800629a:	f000 fd4f 	bl	8006d3c <_ZNSaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	      auto __guard = std::__allocate_guarded(__a2);
 800629e:	f107 0314 	add.w	r3, r7, #20
 80062a2:	f107 021c 	add.w	r2, r7, #28
 80062a6:	4611      	mov	r1, r2
 80062a8:	4618      	mov	r0, r3
 80062aa:	f000 fd60 	bl	8006d6e <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>
	      _Sp_cd_type* __mem = __guard.get();
 80062ae:	f107 0314 	add.w	r3, r7, #20
 80062b2:	4618      	mov	r0, r3
 80062b4:	f000 fd83 	bl	8006dbe <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>
 80062b8:	6278      	str	r0, [r7, #36]	; 0x24
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f7ff ffb9 	bl	8006232 <_ZSt4moveIRNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 80062c0:	4602      	mov	r2, r0
 80062c2:	f107 0320 	add.w	r3, r7, #32
 80062c6:	4611      	mov	r1, r2
 80062c8:	4618      	mov	r0, r3
 80062ca:	f7ff ffbd 	bl	8006248 <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 80062ce:	f107 0420 	add.w	r4, r7, #32
 80062d2:	6838      	ldr	r0, [r7, #0]
 80062d4:	f7ff ffc8 	bl	8006268 <_ZSt4moveIRSaIN4tama27Nokia5110DisplayDataManagerEEEONSt16remove_referenceIT_E4typeEOS5_>
 80062d8:	4605      	mov	r5, r0
 80062da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062dc:	4619      	mov	r1, r3
 80062de:	2014      	movs	r0, #20
 80062e0:	f7fa fc84 	bl	8000bec <_ZnwjPv>
 80062e4:	2800      	cmp	r0, #0
 80062e6:	d004      	beq.n	80062f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x74>
 80062e8:	462b      	mov	r3, r5
 80062ea:	4622      	mov	r2, r4
 80062ec:	68b9      	ldr	r1, [r7, #8]
 80062ee:	f000 fd9f 	bl	8006e30 <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>
 80062f2:	f107 0320 	add.w	r3, r7, #32
 80062f6:	4618      	mov	r0, r3
 80062f8:	f7ff fb28 	bl	800594c <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	      _M_pi = __mem;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006300:	601a      	str	r2, [r3, #0]
	      __guard = nullptr;
 8006302:	f107 0314 	add.w	r3, r7, #20
 8006306:	2100      	movs	r1, #0
 8006308:	4618      	mov	r0, r3
 800630a:	f000 fdbf 	bl	8006e8c <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>
	      auto __guard = std::__allocate_guarded(__a2);
 800630e:	f107 0314 	add.w	r3, r7, #20
 8006312:	4618      	mov	r0, r3
 8006314:	f000 fd3e 	bl	8006d94 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 8006318:	f107 031c 	add.w	r3, r7, #28
 800631c:	4618      	mov	r0, r3
 800631e:	f000 fd1a 	bl	8006d56 <_ZNSaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
	}
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	4618      	mov	r0, r3
 8006326:	3728      	adds	r7, #40	; 0x28
 8006328:	46bd      	mov	sp, r7
 800632a:	bdb0      	pop	{r4, r5, r7, pc}

0800632c <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp*) noexcept
 800632c:	b480      	push	{r7}
 800632e:	b083      	sub	sp, #12
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
 8006334:	6039      	str	r1, [r7, #0]
	{ }
 8006336:	bf00      	nop
 8006338:	370c      	adds	r7, #12
 800633a:	46bd      	mov	sp, r7
 800633c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006340:	4770      	bx	lr

08006342 <_ZNSt16allocator_traitsISaIN4tama5SceneEEE9constructIS1_JEEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8006342:	b580      	push	{r7, lr}
 8006344:	b082      	sub	sp, #8
 8006346:	af00      	add	r7, sp, #0
 8006348:	6078      	str	r0, [r7, #4]
 800634a:	6039      	str	r1, [r7, #0]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 800634c:	6839      	ldr	r1, [r7, #0]
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f000 fdcb 	bl	8006eea <_ZN9__gnu_cxx13new_allocatorIN4tama5SceneEE9constructIS2_JEEEvPT_DpOT0_>
 8006354:	bf00      	nop
 8006356:	3708      	adds	r7, #8
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}

0800635c <_ZNSaIN4tama6SpriteEEC1ERKS1_>:
      allocator(const allocator& __a) throw()
 800635c:	b580      	push	{r7, lr}
 800635e:	b082      	sub	sp, #8
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
 8006364:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8006366:	6839      	ldr	r1, [r7, #0]
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f000 fdd2 	bl	8006f12 <_ZN9__gnu_cxx13new_allocatorIN4tama6SpriteEEC1ERKS3_>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	4618      	mov	r0, r3
 8006372:	3708      	adds	r7, #8
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}

08006378 <_ZSt18__allocate_guardedISaIN4tama6SpriteEEESt15__allocated_ptrIT_ERS4_>:
    __allocate_guarded(_Alloc& __a)
 8006378:	b580      	push	{r7, lr}
 800637a:	b082      	sub	sp, #8
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
 8006380:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 8006382:	2101      	movs	r1, #1
 8006384:	6838      	ldr	r0, [r7, #0]
 8006386:	f000 fdd0 	bl	8006f2a <_ZNSt16allocator_traitsISaIN4tama6SpriteEEE8allocateERS2_j>
 800638a:	4603      	mov	r3, r0
 800638c:	461a      	mov	r2, r3
 800638e:	6839      	ldr	r1, [r7, #0]
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f000 fdd9 	bl	8006f48 <_ZNSt15__allocated_ptrISaIN4tama6SpriteEEEC1ERS2_PS1_>
    }
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	3708      	adds	r7, #8
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}

0800639e <_ZNSt15__allocated_ptrISaIN4tama6SpriteEEED1Ev>:
      ~__allocated_ptr()
 800639e:	b580      	push	{r7, lr}
 80063a0:	b082      	sub	sp, #8
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d007      	beq.n	80063be <_ZNSt15__allocated_ptrISaIN4tama6SpriteEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6818      	ldr	r0, [r3, #0]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	2201      	movs	r2, #1
 80063b8:	4619      	mov	r1, r3
 80063ba:	f000 fdd9 	bl	8006f70 <_ZNSt16allocator_traitsISaIN4tama6SpriteEEE10deallocateERS2_PS1_j>
      }
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	4618      	mov	r0, r3
 80063c2:	3708      	adds	r7, #8
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}

080063c8 <_ZNSt15__allocated_ptrISaIN4tama6SpriteEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b082      	sub	sp, #8
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	4618      	mov	r0, r3
 80063d6:	f000 fdda 	bl	8006f8e <_ZNSt15__allocated_ptrISaIN4tama6SpriteEEE10_S_raw_ptrEPS1_>
 80063da:	4603      	mov	r3, r0
 80063dc:	4618      	mov	r0, r3
 80063de:	3708      	adds	r7, #8
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}

080063e4 <_ZNSt16allocator_traitsISaIN4tama6SpriteEEE9constructIS1_JRSt10shared_ptrINS0_7TextureEENS0_5Vec2dEEEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 80063e4:	b590      	push	{r4, r7, lr}
 80063e6:	b085      	sub	sp, #20
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	60f8      	str	r0, [r7, #12]
 80063ec:	60b9      	str	r1, [r7, #8]
 80063ee:	607a      	str	r2, [r7, #4]
 80063f0:	603b      	str	r3, [r7, #0]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f7fe fded 	bl	8004fd2 <_ZSt7forwardIRSt10shared_ptrIN4tama7TextureEEEOT_RNSt16remove_referenceIS5_E4typeE>
 80063f8:	4604      	mov	r4, r0
 80063fa:	6838      	ldr	r0, [r7, #0]
 80063fc:	f7fe fdf4 	bl	8004fe8 <_ZSt7forwardIN4tama5Vec2dEEOT_RNSt16remove_referenceIS2_E4typeE>
 8006400:	4603      	mov	r3, r0
 8006402:	4622      	mov	r2, r4
 8006404:	68b9      	ldr	r1, [r7, #8]
 8006406:	68f8      	ldr	r0, [r7, #12]
 8006408:	f000 fdcc 	bl	8006fa4 <_ZN9__gnu_cxx13new_allocatorIN4tama6SpriteEE9constructIS2_JRSt10shared_ptrINS1_7TextureEENS1_5Vec2dEEEEvPT_DpOT0_>
 800640c:	bf00      	nop
 800640e:	3714      	adds	r7, #20
 8006410:	46bd      	mov	sp, r7
 8006412:	bd90      	pop	{r4, r7, pc}

08006414 <_ZNSt15__allocated_ptrISaIN4tama6SpriteEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 8006414:	b480      	push	{r7}
 8006416:	b083      	sub	sp, #12
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
 800641c:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2200      	movs	r2, #0
 8006422:	605a      	str	r2, [r3, #4]
	return *this;
 8006424:	687b      	ldr	r3, [r7, #4]
      }
 8006426:	4618      	mov	r0, r3
 8006428:	370c      	adds	r7, #12
 800642a:	46bd      	mov	sp, r7
 800642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006430:	4770      	bx	lr

08006432 <_ZSt4moveIRNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
 8006432:	b480      	push	{r7}
 8006434:	b083      	sub	sp, #12
 8006436:	af00      	add	r7, sp, #0
 8006438:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	4618      	mov	r0, r3
 800643e:	370c      	adds	r7, #12
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr

08006448 <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>:
        struct _Deleter
 8006448:	b580      	push	{r7, lr}
 800644a:	b082      	sub	sp, #8
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
 8006450:	6039      	str	r1, [r7, #0]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	683a      	ldr	r2, [r7, #0]
 8006456:	4611      	mov	r1, r2
 8006458:	4618      	mov	r0, r3
 800645a:	f7ff ff7f 	bl	800635c <_ZNSaIN4tama6SpriteEEC1ERKS1_>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	4618      	mov	r0, r3
 8006462:	3708      	adds	r7, #8
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}

08006468 <_ZSt4moveIRSaIN4tama6SpriteEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8006468:	b480      	push	{r7}
 800646a:	b083      	sub	sp, #12
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	4618      	mov	r0, r3
 8006474:	370c      	adds	r7, #12
 8006476:	46bd      	mov	sp, r7
 8006478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647c:	4770      	bx	lr

0800647e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama6SpriteENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
 800647e:	b5b0      	push	{r4, r5, r7, lr}
 8006480:	b08a      	sub	sp, #40	; 0x28
 8006482:	af00      	add	r7, sp, #0
 8006484:	60f8      	str	r0, [r7, #12]
 8006486:	60b9      	str	r1, [r7, #8]
 8006488:	607a      	str	r2, [r7, #4]
 800648a:	603b      	str	r3, [r7, #0]
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2200      	movs	r2, #0
 8006490:	601a      	str	r2, [r3, #0]
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 8006492:	f107 031c 	add.w	r3, r7, #28
 8006496:	6839      	ldr	r1, [r7, #0]
 8006498:	4618      	mov	r0, r3
 800649a:	f000 fda3 	bl	8006fe4 <_ZNSaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	      auto __guard = std::__allocate_guarded(__a2);
 800649e:	f107 0314 	add.w	r3, r7, #20
 80064a2:	f107 021c 	add.w	r2, r7, #28
 80064a6:	4611      	mov	r1, r2
 80064a8:	4618      	mov	r0, r3
 80064aa:	f000 fdb4 	bl	8007016 <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>
	      _Sp_cd_type* __mem = __guard.get();
 80064ae:	f107 0314 	add.w	r3, r7, #20
 80064b2:	4618      	mov	r0, r3
 80064b4:	f000 fdd7 	bl	8007066 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>
 80064b8:	6278      	str	r0, [r7, #36]	; 0x24
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f7ff ffb9 	bl	8006432 <_ZSt4moveIRNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 80064c0:	4602      	mov	r2, r0
 80064c2:	f107 0320 	add.w	r3, r7, #32
 80064c6:	4611      	mov	r1, r2
 80064c8:	4618      	mov	r0, r3
 80064ca:	f7ff ffbd 	bl	8006448 <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 80064ce:	f107 0420 	add.w	r4, r7, #32
 80064d2:	6838      	ldr	r0, [r7, #0]
 80064d4:	f7ff ffc8 	bl	8006468 <_ZSt4moveIRSaIN4tama6SpriteEEEONSt16remove_referenceIT_E4typeEOS5_>
 80064d8:	4605      	mov	r5, r0
 80064da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064dc:	4619      	mov	r1, r3
 80064de:	2014      	movs	r0, #20
 80064e0:	f7fa fb84 	bl	8000bec <_ZnwjPv>
 80064e4:	2800      	cmp	r0, #0
 80064e6:	d004      	beq.n	80064f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama6SpriteENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x74>
 80064e8:	462b      	mov	r3, r5
 80064ea:	4622      	mov	r2, r4
 80064ec:	68b9      	ldr	r1, [r7, #8]
 80064ee:	f000 fdf3 	bl	80070d8 <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>
 80064f2:	f107 0320 	add.w	r3, r7, #32
 80064f6:	4618      	mov	r0, r3
 80064f8:	f7ff fb31 	bl	8005b5e <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	      _M_pi = __mem;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006500:	601a      	str	r2, [r3, #0]
	      __guard = nullptr;
 8006502:	f107 0314 	add.w	r3, r7, #20
 8006506:	2100      	movs	r1, #0
 8006508:	4618      	mov	r0, r3
 800650a:	f000 fe13 	bl	8007134 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>
	      auto __guard = std::__allocate_guarded(__a2);
 800650e:	f107 0314 	add.w	r3, r7, #20
 8006512:	4618      	mov	r0, r3
 8006514:	f000 fd92 	bl	800703c <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 8006518:	f107 031c 	add.w	r3, r7, #28
 800651c:	4618      	mov	r0, r3
 800651e:	f000 fd6e 	bl	8006ffe <_ZNSaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
	}
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	4618      	mov	r0, r3
 8006526:	3728      	adds	r7, #40	; 0x28
 8006528:	46bd      	mov	sp, r7
 800652a:	bdb0      	pop	{r4, r5, r7, pc}

0800652c <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp*) noexcept
 800652c:	b480      	push	{r7}
 800652e:	b083      	sub	sp, #12
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
 8006534:	6039      	str	r1, [r7, #0]
	{ }
 8006536:	bf00      	nop
 8006538:	370c      	adds	r7, #12
 800653a:	46bd      	mov	sp, r7
 800653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006540:	4770      	bx	lr

08006542 <_ZNSaIN4tama4TextEEC1ERKS1_>:
      allocator(const allocator& __a) throw()
 8006542:	b580      	push	{r7, lr}
 8006544:	b082      	sub	sp, #8
 8006546:	af00      	add	r7, sp, #0
 8006548:	6078      	str	r0, [r7, #4]
 800654a:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 800654c:	6839      	ldr	r1, [r7, #0]
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f000 fe1f 	bl	8007192 <_ZN9__gnu_cxx13new_allocatorIN4tama4TextEEC1ERKS3_>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	4618      	mov	r0, r3
 8006558:	3708      	adds	r7, #8
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}

0800655e <_ZSt18__allocate_guardedISaIN4tama4TextEEESt15__allocated_ptrIT_ERS4_>:
    __allocate_guarded(_Alloc& __a)
 800655e:	b580      	push	{r7, lr}
 8006560:	b082      	sub	sp, #8
 8006562:	af00      	add	r7, sp, #0
 8006564:	6078      	str	r0, [r7, #4]
 8006566:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 8006568:	2101      	movs	r1, #1
 800656a:	6838      	ldr	r0, [r7, #0]
 800656c:	f000 fe1d 	bl	80071aa <_ZNSt16allocator_traitsISaIN4tama4TextEEE8allocateERS2_j>
 8006570:	4603      	mov	r3, r0
 8006572:	461a      	mov	r2, r3
 8006574:	6839      	ldr	r1, [r7, #0]
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f000 fe26 	bl	80071c8 <_ZNSt15__allocated_ptrISaIN4tama4TextEEEC1ERS2_PS1_>
    }
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	3708      	adds	r7, #8
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}

08006584 <_ZNSt15__allocated_ptrISaIN4tama4TextEEED1Ev>:
      ~__allocated_ptr()
 8006584:	b580      	push	{r7, lr}
 8006586:	b082      	sub	sp, #8
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d007      	beq.n	80065a4 <_ZNSt15__allocated_ptrISaIN4tama4TextEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6818      	ldr	r0, [r3, #0]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	2201      	movs	r2, #1
 800659e:	4619      	mov	r1, r3
 80065a0:	f000 fe26 	bl	80071f0 <_ZNSt16allocator_traitsISaIN4tama4TextEEE10deallocateERS2_PS1_j>
      }
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	4618      	mov	r0, r3
 80065a8:	3708      	adds	r7, #8
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}

080065ae <_ZNSt15__allocated_ptrISaIN4tama4TextEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 80065ae:	b580      	push	{r7, lr}
 80065b0:	b082      	sub	sp, #8
 80065b2:	af00      	add	r7, sp, #0
 80065b4:	6078      	str	r0, [r7, #4]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	4618      	mov	r0, r3
 80065bc:	f000 fe27 	bl	800720e <_ZNSt15__allocated_ptrISaIN4tama4TextEEE10_S_raw_ptrEPS1_>
 80065c0:	4603      	mov	r3, r0
 80065c2:	4618      	mov	r0, r3
 80065c4:	3708      	adds	r7, #8
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}

080065ca <_ZNSt16allocator_traitsISaIN4tama4TextEEE9constructIS1_JNS0_5Vec2dEEEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 80065ca:	b580      	push	{r7, lr}
 80065cc:	b084      	sub	sp, #16
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	60f8      	str	r0, [r7, #12]
 80065d2:	60b9      	str	r1, [r7, #8]
 80065d4:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f7fe fd06 	bl	8004fe8 <_ZSt7forwardIN4tama5Vec2dEEOT_RNSt16remove_referenceIS2_E4typeE>
 80065dc:	4603      	mov	r3, r0
 80065de:	461a      	mov	r2, r3
 80065e0:	68b9      	ldr	r1, [r7, #8]
 80065e2:	68f8      	ldr	r0, [r7, #12]
 80065e4:	f000 fe1e 	bl	8007224 <_ZN9__gnu_cxx13new_allocatorIN4tama4TextEE9constructIS2_JNS1_5Vec2dEEEEvPT_DpOT0_>
 80065e8:	bf00      	nop
 80065ea:	3710      	adds	r7, #16
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd80      	pop	{r7, pc}

080065f0 <_ZNSt15__allocated_ptrISaIN4tama4TextEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 80065f0:	b480      	push	{r7}
 80065f2:	b083      	sub	sp, #12
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
 80065f8:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2200      	movs	r2, #0
 80065fe:	605a      	str	r2, [r3, #4]
	return *this;
 8006600:	687b      	ldr	r3, [r7, #4]
      }
 8006602:	4618      	mov	r0, r3
 8006604:	370c      	adds	r7, #12
 8006606:	46bd      	mov	sp, r7
 8006608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660c:	4770      	bx	lr

0800660e <_ZSt4moveIRNSt12__shared_ptrIN4tama4TextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
 800660e:	b480      	push	{r7}
 8006610:	b083      	sub	sp, #12
 8006612:	af00      	add	r7, sp, #0
 8006614:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	4618      	mov	r0, r3
 800661a:	370c      	adds	r7, #12
 800661c:	46bd      	mov	sp, r7
 800661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006622:	4770      	bx	lr

08006624 <_ZNSt12__shared_ptrIN4tama4TextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>:
        struct _Deleter
 8006624:	b580      	push	{r7, lr}
 8006626:	b082      	sub	sp, #8
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
 800662c:	6039      	str	r1, [r7, #0]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	683a      	ldr	r2, [r7, #0]
 8006632:	4611      	mov	r1, r2
 8006634:	4618      	mov	r0, r3
 8006636:	f7ff ff84 	bl	8006542 <_ZNSaIN4tama4TextEEC1ERKS1_>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	4618      	mov	r0, r3
 800663e:	3708      	adds	r7, #8
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}

08006644 <_ZSt4moveIRSaIN4tama4TextEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8006644:	b480      	push	{r7}
 8006646:	b083      	sub	sp, #12
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	4618      	mov	r0, r3
 8006650:	370c      	adds	r7, #12
 8006652:	46bd      	mov	sp, r7
 8006654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006658:	4770      	bx	lr

0800665a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama4TextENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
 800665a:	b5b0      	push	{r4, r5, r7, lr}
 800665c:	b08a      	sub	sp, #40	; 0x28
 800665e:	af00      	add	r7, sp, #0
 8006660:	60f8      	str	r0, [r7, #12]
 8006662:	60b9      	str	r1, [r7, #8]
 8006664:	607a      	str	r2, [r7, #4]
 8006666:	603b      	str	r3, [r7, #0]
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2200      	movs	r2, #0
 800666c:	601a      	str	r2, [r3, #0]
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 800666e:	f107 031c 	add.w	r3, r7, #28
 8006672:	6839      	ldr	r1, [r7, #0]
 8006674:	4618      	mov	r0, r3
 8006676:	f000 fdef 	bl	8007258 <_ZNSaISt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	      auto __guard = std::__allocate_guarded(__a2);
 800667a:	f107 0314 	add.w	r3, r7, #20
 800667e:	f107 021c 	add.w	r2, r7, #28
 8006682:	4611      	mov	r1, r2
 8006684:	4618      	mov	r0, r3
 8006686:	f000 fe00 	bl	800728a <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>
	      _Sp_cd_type* __mem = __guard.get();
 800668a:	f107 0314 	add.w	r3, r7, #20
 800668e:	4618      	mov	r0, r3
 8006690:	f000 fe23 	bl	80072da <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>
 8006694:	6278      	str	r0, [r7, #36]	; 0x24
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f7ff ffb9 	bl	800660e <_ZSt4moveIRNSt12__shared_ptrIN4tama4TextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 800669c:	4602      	mov	r2, r0
 800669e:	f107 0320 	add.w	r3, r7, #32
 80066a2:	4611      	mov	r1, r2
 80066a4:	4618      	mov	r0, r3
 80066a6:	f7ff ffbd 	bl	8006624 <_ZNSt12__shared_ptrIN4tama4TextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 80066aa:	f107 0420 	add.w	r4, r7, #32
 80066ae:	6838      	ldr	r0, [r7, #0]
 80066b0:	f7ff ffc8 	bl	8006644 <_ZSt4moveIRSaIN4tama4TextEEEONSt16remove_referenceIT_E4typeEOS5_>
 80066b4:	4605      	mov	r5, r0
 80066b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b8:	4619      	mov	r1, r3
 80066ba:	2014      	movs	r0, #20
 80066bc:	f7fa fa96 	bl	8000bec <_ZnwjPv>
 80066c0:	2800      	cmp	r0, #0
 80066c2:	d004      	beq.n	80066ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN4tama4TextENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x74>
 80066c4:	462b      	mov	r3, r5
 80066c6:	4622      	mov	r2, r4
 80066c8:	68b9      	ldr	r1, [r7, #8]
 80066ca:	f000 fe3f 	bl	800734c <_ZNSt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>
 80066ce:	f107 0320 	add.w	r3, r7, #32
 80066d2:	4618      	mov	r0, r3
 80066d4:	f7ff fadf 	bl	8005c96 <_ZNSt12__shared_ptrIN4tama4TextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
	      _M_pi = __mem;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066dc:	601a      	str	r2, [r3, #0]
	      __guard = nullptr;
 80066de:	f107 0314 	add.w	r3, r7, #20
 80066e2:	2100      	movs	r1, #0
 80066e4:	4618      	mov	r0, r3
 80066e6:	f000 fe5f 	bl	80073a8 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>
	      auto __guard = std::__allocate_guarded(__a2);
 80066ea:	f107 0314 	add.w	r3, r7, #20
 80066ee:	4618      	mov	r0, r3
 80066f0:	f000 fdde 	bl	80072b0 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	      typename _Sp_cd_type::__allocator_type __a2(__a);
 80066f4:	f107 031c 	add.w	r3, r7, #28
 80066f8:	4618      	mov	r0, r3
 80066fa:	f000 fdba 	bl	8007272 <_ZNSaISt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
	}
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	4618      	mov	r0, r3
 8006702:	3728      	adds	r7, #40	; 0x28
 8006704:	46bd      	mov	sp, r7
 8006706:	bdb0      	pop	{r4, r5, r7, pc}

08006708 <_ZNSt12__shared_ptrIN4tama4TextELN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS1_S1_EENSt9enable_ifIXntsrNS4_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp*) noexcept
 8006708:	b480      	push	{r7}
 800670a:	b083      	sub	sp, #12
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
 8006710:	6039      	str	r1, [r7, #0]
	{ }
 8006712:	bf00      	nop
 8006714:	370c      	adds	r7, #12
 8006716:	46bd      	mov	sp, r7
 8006718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671c:	4770      	bx	lr

0800671e <_ZN9__gnu_cxx13new_allocatorIN4tama16Nokia5510DisplayEEC1ERKS3_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 800671e:	b480      	push	{r7}
 8006720:	b083      	sub	sp, #12
 8006722:	af00      	add	r7, sp, #0
 8006724:	6078      	str	r0, [r7, #4]
 8006726:	6039      	str	r1, [r7, #0]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	4618      	mov	r0, r3
 800672c:	370c      	adds	r7, #12
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr

08006736 <_ZNSt16allocator_traitsISaIN4tama16Nokia5510DisplayEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8006736:	b580      	push	{r7, lr}
 8006738:	b082      	sub	sp, #8
 800673a:	af00      	add	r7, sp, #0
 800673c:	6078      	str	r0, [r7, #4]
 800673e:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8006740:	2200      	movs	r2, #0
 8006742:	6839      	ldr	r1, [r7, #0]
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f000 fe5e 	bl	8007406 <_ZN9__gnu_cxx13new_allocatorIN4tama16Nokia5510DisplayEE8allocateEjPKv>
 800674a:	4603      	mov	r3, r0
 800674c:	4618      	mov	r0, r3
 800674e:	3708      	adds	r7, #8
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}

08006754 <_ZNSt15__allocated_ptrISaIN4tama16Nokia5510DisplayEEEC1ERS2_PS1_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 8006754:	b580      	push	{r7, lr}
 8006756:	b084      	sub	sp, #16
 8006758:	af00      	add	r7, sp, #0
 800675a:	60f8      	str	r0, [r7, #12]
 800675c:	60b9      	str	r1, [r7, #8]
 800675e:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 8006760:	68b8      	ldr	r0, [r7, #8]
 8006762:	f000 fe71 	bl	8007448 <_ZSt11__addressofISaIN4tama16Nokia5510DisplayEEEPT_RS3_>
 8006766:	4602      	mov	r2, r0
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	601a      	str	r2, [r3, #0]
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	687a      	ldr	r2, [r7, #4]
 8006770:	605a      	str	r2, [r3, #4]
      { }
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	4618      	mov	r0, r3
 8006776:	3710      	adds	r7, #16
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}

0800677c <_ZNSt16allocator_traitsISaIN4tama16Nokia5510DisplayEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800677c:	b580      	push	{r7, lr}
 800677e:	b084      	sub	sp, #16
 8006780:	af00      	add	r7, sp, #0
 8006782:	60f8      	str	r0, [r7, #12]
 8006784:	60b9      	str	r1, [r7, #8]
 8006786:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8006788:	687a      	ldr	r2, [r7, #4]
 800678a:	68b9      	ldr	r1, [r7, #8]
 800678c:	68f8      	ldr	r0, [r7, #12]
 800678e:	f000 fe66 	bl	800745e <_ZN9__gnu_cxx13new_allocatorIN4tama16Nokia5510DisplayEE10deallocateEPS2_j>
 8006792:	bf00      	nop
 8006794:	3710      	adds	r7, #16
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}

0800679a <_ZNSt15__allocated_ptrISaIN4tama16Nokia5510DisplayEEE10_S_raw_ptrEPS1_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 800679a:	b480      	push	{r7}
 800679c:	b083      	sub	sp, #12
 800679e:	af00      	add	r7, sp, #0
 80067a0:	6078      	str	r0, [r7, #4]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	4618      	mov	r0, r3
 80067a6:	370c      	adds	r7, #12
 80067a8:	46bd      	mov	sp, r7
 80067aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ae:	4770      	bx	lr

080067b0 <_ZN9__gnu_cxx13new_allocatorIN4tama16Nokia5510DisplayEE9constructIS2_JRNS1_13DisplayConfigEEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 80067b0:	b590      	push	{r4, r7, lr}
 80067b2:	b085      	sub	sp, #20
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	60f8      	str	r0, [r7, #12]
 80067b8:	60b9      	str	r1, [r7, #8]
 80067ba:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f7fe fb2f 	bl	8004e20 <_ZSt7forwardIRN4tama13DisplayConfigEEOT_RNSt16remove_referenceIS3_E4typeE>
 80067c2:	4604      	mov	r4, r0
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	4619      	mov	r1, r3
 80067c8:	2030      	movs	r0, #48	; 0x30
 80067ca:	f7fa fa0f 	bl	8000bec <_ZnwjPv>
 80067ce:	4603      	mov	r3, r0
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d003      	beq.n	80067dc <_ZN9__gnu_cxx13new_allocatorIN4tama16Nokia5510DisplayEE9constructIS2_JRNS1_13DisplayConfigEEEEvPT_DpOT0_+0x2c>
 80067d4:	4621      	mov	r1, r4
 80067d6:	4618      	mov	r0, r3
 80067d8:	f001 ffba 	bl	8008750 <_ZN4tama16Nokia5510DisplayC1ERNS_13DisplayConfigE>
 80067dc:	bf00      	nop
 80067de:	3714      	adds	r7, #20
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd90      	pop	{r4, r7, pc}

080067e4 <_ZNSaISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) throw() { }
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b082      	sub	sp, #8
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
 80067ec:	6039      	str	r1, [r7, #0]
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f000 fe42 	bl	8007478 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	4618      	mov	r0, r3
 80067f8:	3708      	adds	r7, #8
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}

080067fe <_ZNSaISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>:
      ~allocator() throw() { }
 80067fe:	b580      	push	{r7, lr}
 8006800:	b082      	sub	sp, #8
 8006802:	af00      	add	r7, sp, #0
 8006804:	6078      	str	r0, [r7, #4]
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f000 fe41 	bl	800748e <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	4618      	mov	r0, r3
 8006810:	3708      	adds	r7, #8
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}

08006816 <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>:
    __allocate_guarded(_Alloc& __a)
 8006816:	b580      	push	{r7, lr}
 8006818:	b082      	sub	sp, #8
 800681a:	af00      	add	r7, sp, #0
 800681c:	6078      	str	r0, [r7, #4]
 800681e:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 8006820:	2101      	movs	r1, #1
 8006822:	6838      	ldr	r0, [r7, #0]
 8006824:	f000 fe3e 	bl	80074a4 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>
 8006828:	4603      	mov	r3, r0
 800682a:	461a      	mov	r2, r3
 800682c:	6839      	ldr	r1, [r7, #0]
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f000 fe47 	bl	80074c2 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
    }
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	3708      	adds	r7, #8
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}

0800683c <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>:
      ~__allocated_ptr()
 800683c:	b580      	push	{r7, lr}
 800683e:	b082      	sub	sp, #8
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d007      	beq.n	800685c <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6818      	ldr	r0, [r3, #0]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	2201      	movs	r2, #1
 8006856:	4619      	mov	r1, r3
 8006858:	f000 fe47 	bl	80074ea <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>
      }
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	4618      	mov	r0, r3
 8006860:	3708      	adds	r7, #8
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}

08006866 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 8006866:	b580      	push	{r7, lr}
 8006868:	b082      	sub	sp, #8
 800686a:	af00      	add	r7, sp, #0
 800686c:	6078      	str	r0, [r7, #4]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	4618      	mov	r0, r3
 8006874:	f000 fe48 	bl	8007508 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>
 8006878:	4603      	mov	r3, r0
 800687a:	4618      	mov	r0, r3
 800687c:	3708      	adds	r7, #8
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}

08006882 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, false>
 8006882:	b580      	push	{r7, lr}
 8006884:	b082      	sub	sp, #8
 8006886:	af00      	add	r7, sp, #0
 8006888:	6078      	str	r0, [r7, #4]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	4618      	mov	r0, r3
 800688e:	f7fe ff32 	bl	80056f6 <_ZNSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	4618      	mov	r0, r3
 8006896:	3708      	adds	r7, #8
 8006898:	46bd      	mov	sp, r7
 800689a:	bd80      	pop	{r7, pc}

0800689c <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama16Nokia5510DisplayEELb1EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, true> : private _Tp
 800689c:	b580      	push	{r7, lr}
 800689e:	b082      	sub	sp, #8
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f7fe fc51 	bl	800514c <_ZNSaIN4tama16Nokia5510DisplayEED1Ev>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	4618      	mov	r0, r3
 80068ae:	3708      	adds	r7, #8
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}

080068b4 <_ZNSt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>:
      class _Impl : _Sp_ebo_helper<0, _Deleter>, _Sp_ebo_helper<1, _Alloc>
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b082      	sub	sp, #8
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	3301      	adds	r3, #1
 80068c0:	4618      	mov	r0, r3
 80068c2:	f7ff ffeb 	bl	800689c <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama16Nokia5510DisplayEELb1EED1Ev>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	4618      	mov	r0, r3
 80068ca:	f7ff ffda 	bl	8006882 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	4618      	mov	r0, r3
 80068d2:	3708      	adds	r7, #8
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}

080068d8 <_ZNSt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>:
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 80068d8:	b590      	push	{r4, r7, lr}
 80068da:	b087      	sub	sp, #28
 80068dc:	af00      	add	r7, sp, #0
 80068de:	60f8      	str	r0, [r7, #12]
 80068e0:	60b9      	str	r1, [r7, #8]
 80068e2:	607a      	str	r2, [r7, #4]
 80068e4:	603b      	str	r3, [r7, #0]
      : _M_impl(__p, std::move(__d), __a) { }
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	4618      	mov	r0, r3
 80068ea:	f7fb fff7 	bl	80028dc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 80068ee:	4a10      	ldr	r2, [pc, #64]	; (8006930 <_ZNSt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_+0x58>)
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	601a      	str	r2, [r3, #0]
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	f103 040c 	add.w	r4, r3, #12
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f7ff fac9 	bl	8005e92 <_ZSt4moveIRNSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 8006900:	4602      	mov	r2, r0
 8006902:	f107 0314 	add.w	r3, r7, #20
 8006906:	4611      	mov	r1, r2
 8006908:	4618      	mov	r0, r3
 800690a:	f7ff facd 	bl	8005ea8 <_ZNSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 800690e:	f107 0214 	add.w	r2, r7, #20
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	68b9      	ldr	r1, [r7, #8]
 8006916:	4620      	mov	r0, r4
 8006918:	f000 fe01 	bl	800751e <_ZNSt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>
 800691c:	f107 0314 	add.w	r3, r7, #20
 8006920:	4618      	mov	r0, r3
 8006922:	f7fe fee8 	bl	80056f6 <_ZNSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	4618      	mov	r0, r3
 800692a:	371c      	adds	r7, #28
 800692c:	46bd      	mov	sp, r7
 800692e:	bd90      	pop	{r4, r7, pc}
 8006930:	080119f0 	.word	0x080119f0

08006934 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 8006934:	b480      	push	{r7}
 8006936:	b083      	sub	sp, #12
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
 800693c:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2200      	movs	r2, #0
 8006942:	605a      	str	r2, [r3, #4]
	return *this;
 8006944:	687b      	ldr	r3, [r7, #4]
      }
 8006946:	4618      	mov	r0, r3
 8006948:	370c      	adds	r7, #12
 800694a:	46bd      	mov	sp, r7
 800694c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006950:	4770      	bx	lr

08006952 <_ZNSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>:
          void operator()(typename _Alloc::value_type* __ptr)
 8006952:	b590      	push	{r4, r7, lr}
 8006954:	b085      	sub	sp, #20
 8006956:	af00      	add	r7, sp, #0
 8006958:	6078      	str	r0, [r7, #4]
 800695a:	6039      	str	r1, [r7, #0]
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 800695c:	6879      	ldr	r1, [r7, #4]
 800695e:	f107 0308 	add.w	r3, r7, #8
 8006962:	683a      	ldr	r2, [r7, #0]
 8006964:	4618      	mov	r0, r3
 8006966:	f7ff fef5 	bl	8006754 <_ZNSt15__allocated_ptrISaIN4tama16Nokia5510DisplayEEEC1ERS2_PS1_>
	    allocator_traits<_Alloc>::destroy(_M_alloc, __guard.get());
 800696a:	687c      	ldr	r4, [r7, #4]
 800696c:	f107 0308 	add.w	r3, r7, #8
 8006970:	4618      	mov	r0, r3
 8006972:	f7ff fa5e 	bl	8005e32 <_ZNSt15__allocated_ptrISaIN4tama16Nokia5510DisplayEEE3getEv>
 8006976:	4603      	mov	r3, r0
 8006978:	4619      	mov	r1, r3
 800697a:	4620      	mov	r0, r4
 800697c:	f000 fded 	bl	800755a <_ZNSt16allocator_traitsISaIN4tama16Nokia5510DisplayEEE7destroyIS1_EEvRS2_PT_>
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 8006980:	f107 0308 	add.w	r3, r7, #8
 8006984:	4618      	mov	r0, r3
 8006986:	f7ff fa3f 	bl	8005e08 <_ZNSt15__allocated_ptrISaIN4tama16Nokia5510DisplayEEED1Ev>
          }
 800698a:	bf00      	nop
 800698c:	3714      	adds	r7, #20
 800698e:	46bd      	mov	sp, r7
 8006990:	bd90      	pop	{r4, r7, pc}

08006992 <_ZN9__gnu_cxx13new_allocatorIN4tama18Stm32TextureLoaderEEC1ERKS3_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8006992:	b480      	push	{r7}
 8006994:	b083      	sub	sp, #12
 8006996:	af00      	add	r7, sp, #0
 8006998:	6078      	str	r0, [r7, #4]
 800699a:	6039      	str	r1, [r7, #0]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	4618      	mov	r0, r3
 80069a0:	370c      	adds	r7, #12
 80069a2:	46bd      	mov	sp, r7
 80069a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a8:	4770      	bx	lr

080069aa <_ZNSt16allocator_traitsISaIN4tama18Stm32TextureLoaderEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 80069aa:	b580      	push	{r7, lr}
 80069ac:	b082      	sub	sp, #8
 80069ae:	af00      	add	r7, sp, #0
 80069b0:	6078      	str	r0, [r7, #4]
 80069b2:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80069b4:	2200      	movs	r2, #0
 80069b6:	6839      	ldr	r1, [r7, #0]
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f000 fddb 	bl	8007574 <_ZN9__gnu_cxx13new_allocatorIN4tama18Stm32TextureLoaderEE8allocateEjPKv>
 80069be:	4603      	mov	r3, r0
 80069c0:	4618      	mov	r0, r3
 80069c2:	3708      	adds	r7, #8
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}

080069c8 <_ZNSt15__allocated_ptrISaIN4tama18Stm32TextureLoaderEEEC1ERS2_PS1_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b084      	sub	sp, #16
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	60f8      	str	r0, [r7, #12]
 80069d0:	60b9      	str	r1, [r7, #8]
 80069d2:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 80069d4:	68b8      	ldr	r0, [r7, #8]
 80069d6:	f000 fdeb 	bl	80075b0 <_ZSt11__addressofISaIN4tama18Stm32TextureLoaderEEEPT_RS3_>
 80069da:	4602      	mov	r2, r0
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	601a      	str	r2, [r3, #0]
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	687a      	ldr	r2, [r7, #4]
 80069e4:	605a      	str	r2, [r3, #4]
      { }
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	4618      	mov	r0, r3
 80069ea:	3710      	adds	r7, #16
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}

080069f0 <_ZNSt16allocator_traitsISaIN4tama18Stm32TextureLoaderEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b084      	sub	sp, #16
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	60f8      	str	r0, [r7, #12]
 80069f8:	60b9      	str	r1, [r7, #8]
 80069fa:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80069fc:	687a      	ldr	r2, [r7, #4]
 80069fe:	68b9      	ldr	r1, [r7, #8]
 8006a00:	68f8      	ldr	r0, [r7, #12]
 8006a02:	f000 fde0 	bl	80075c6 <_ZN9__gnu_cxx13new_allocatorIN4tama18Stm32TextureLoaderEE10deallocateEPS2_j>
 8006a06:	bf00      	nop
 8006a08:	3710      	adds	r7, #16
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}

08006a0e <_ZNSt15__allocated_ptrISaIN4tama18Stm32TextureLoaderEEE10_S_raw_ptrEPS1_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 8006a0e:	b480      	push	{r7}
 8006a10:	b083      	sub	sp, #12
 8006a12:	af00      	add	r7, sp, #0
 8006a14:	6078      	str	r0, [r7, #4]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	4618      	mov	r0, r3
 8006a1a:	370c      	adds	r7, #12
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a22:	4770      	bx	lr

08006a24 <_ZN9__gnu_cxx13new_allocatorIN4tama18Stm32TextureLoaderEE9constructIS2_JEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b082      	sub	sp, #8
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
 8006a2c:	6039      	str	r1, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	4619      	mov	r1, r3
 8006a32:	2004      	movs	r0, #4
 8006a34:	f7fa f8da 	bl	8000bec <_ZnwjPv>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d004      	beq.n	8006a48 <_ZN9__gnu_cxx13new_allocatorIN4tama18Stm32TextureLoaderEE9constructIS2_JEEEvPT_DpOT0_+0x24>
 8006a3e:	2200      	movs	r2, #0
 8006a40:	601a      	str	r2, [r3, #0]
 8006a42:	4618      	mov	r0, r3
 8006a44:	f7fa fe86 	bl	8001754 <_ZN4tama18Stm32TextureLoaderC1Ev>
 8006a48:	bf00      	nop
 8006a4a:	3708      	adds	r7, #8
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bd80      	pop	{r7, pc}

08006a50 <_ZNSaISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) throw() { }
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b082      	sub	sp, #8
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
 8006a58:	6039      	str	r1, [r7, #0]
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f000 fdc0 	bl	80075e0 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	4618      	mov	r0, r3
 8006a64:	3708      	adds	r7, #8
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}

08006a6a <_ZNSaISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>:
      ~allocator() throw() { }
 8006a6a:	b580      	push	{r7, lr}
 8006a6c:	b082      	sub	sp, #8
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	6078      	str	r0, [r7, #4]
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f000 fdbf 	bl	80075f6 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3708      	adds	r7, #8
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}

08006a82 <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>:
    __allocate_guarded(_Alloc& __a)
 8006a82:	b580      	push	{r7, lr}
 8006a84:	b082      	sub	sp, #8
 8006a86:	af00      	add	r7, sp, #0
 8006a88:	6078      	str	r0, [r7, #4]
 8006a8a:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 8006a8c:	2101      	movs	r1, #1
 8006a8e:	6838      	ldr	r0, [r7, #0]
 8006a90:	f000 fdbc 	bl	800760c <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>
 8006a94:	4603      	mov	r3, r0
 8006a96:	461a      	mov	r2, r3
 8006a98:	6839      	ldr	r1, [r7, #0]
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f000 fdc5 	bl	800762a <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
    }
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	3708      	adds	r7, #8
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}

08006aa8 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>:
      ~__allocated_ptr()
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b082      	sub	sp, #8
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	685b      	ldr	r3, [r3, #4]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d007      	beq.n	8006ac8 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6818      	ldr	r0, [r3, #0]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	2201      	movs	r2, #1
 8006ac2:	4619      	mov	r1, r3
 8006ac4:	f000 fdc5 	bl	8007652 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>
      }
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	4618      	mov	r0, r3
 8006acc:	3708      	adds	r7, #8
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}

08006ad2 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 8006ad2:	b580      	push	{r7, lr}
 8006ad4:	b082      	sub	sp, #8
 8006ad6:	af00      	add	r7, sp, #0
 8006ad8:	6078      	str	r0, [r7, #4]
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	4618      	mov	r0, r3
 8006ae0:	f000 fdc6 	bl	8007670 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3708      	adds	r7, #8
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}

08006aee <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, false>
 8006aee:	b580      	push	{r7, lr}
 8006af0:	b082      	sub	sp, #8
 8006af2:	af00      	add	r7, sp, #0
 8006af4:	6078      	str	r0, [r7, #4]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	4618      	mov	r0, r3
 8006afa:	f7fe fe94 	bl	8005826 <_ZNSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	4618      	mov	r0, r3
 8006b02:	3708      	adds	r7, #8
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bd80      	pop	{r7, pc}

08006b08 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama18Stm32TextureLoaderEELb1EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, true> : private _Tp
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b082      	sub	sp, #8
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f7fe fb64 	bl	80051de <_ZNSaIN4tama18Stm32TextureLoaderEED1Ev>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3708      	adds	r7, #8
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}

08006b20 <_ZNSt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>:
      class _Impl : _Sp_ebo_helper<0, _Deleter>, _Sp_ebo_helper<1, _Alloc>
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b082      	sub	sp, #8
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	3301      	adds	r3, #1
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	f7ff ffeb 	bl	8006b08 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama18Stm32TextureLoaderEELb1EED1Ev>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	4618      	mov	r0, r3
 8006b36:	f7ff ffda 	bl	8006aee <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	3708      	adds	r7, #8
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bd80      	pop	{r7, pc}

08006b44 <_ZNSt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>:
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 8006b44:	b590      	push	{r4, r7, lr}
 8006b46:	b087      	sub	sp, #28
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	60f8      	str	r0, [r7, #12]
 8006b4c:	60b9      	str	r1, [r7, #8]
 8006b4e:	607a      	str	r2, [r7, #4]
 8006b50:	603b      	str	r3, [r7, #0]
      : _M_impl(__p, std::move(__d), __a) { }
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	4618      	mov	r0, r3
 8006b56:	f7fb fec1 	bl	80028dc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 8006b5a:	4a10      	ldr	r2, [pc, #64]	; (8006b9c <_ZNSt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_+0x58>)
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	601a      	str	r2, [r3, #0]
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	f103 040c 	add.w	r4, r3, #12
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f7ff fa7b 	bl	8006062 <_ZSt4moveIRNSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 8006b6c:	4602      	mov	r2, r0
 8006b6e:	f107 0314 	add.w	r3, r7, #20
 8006b72:	4611      	mov	r1, r2
 8006b74:	4618      	mov	r0, r3
 8006b76:	f7ff fa7f 	bl	8006078 <_ZNSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 8006b7a:	f107 0214 	add.w	r2, r7, #20
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	68b9      	ldr	r1, [r7, #8]
 8006b82:	4620      	mov	r0, r4
 8006b84:	f000 fd7f 	bl	8007686 <_ZNSt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>
 8006b88:	f107 0314 	add.w	r3, r7, #20
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f7fe fe4a 	bl	8005826 <_ZNSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	4618      	mov	r0, r3
 8006b96:	371c      	adds	r7, #28
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd90      	pop	{r4, r7, pc}
 8006b9c:	080119d4 	.word	0x080119d4

08006ba0 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 8006ba0:	b480      	push	{r7}
 8006ba2:	b083      	sub	sp, #12
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
 8006ba8:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2200      	movs	r2, #0
 8006bae:	605a      	str	r2, [r3, #4]
	return *this;
 8006bb0:	687b      	ldr	r3, [r7, #4]
      }
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	370c      	adds	r7, #12
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbc:	4770      	bx	lr

08006bbe <_ZNSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>:
          void operator()(typename _Alloc::value_type* __ptr)
 8006bbe:	b590      	push	{r4, r7, lr}
 8006bc0:	b085      	sub	sp, #20
 8006bc2:	af00      	add	r7, sp, #0
 8006bc4:	6078      	str	r0, [r7, #4]
 8006bc6:	6039      	str	r1, [r7, #0]
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 8006bc8:	6879      	ldr	r1, [r7, #4]
 8006bca:	f107 0308 	add.w	r3, r7, #8
 8006bce:	683a      	ldr	r2, [r7, #0]
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	f7ff fef9 	bl	80069c8 <_ZNSt15__allocated_ptrISaIN4tama18Stm32TextureLoaderEEEC1ERS2_PS1_>
	    allocator_traits<_Alloc>::destroy(_M_alloc, __guard.get());
 8006bd6:	687c      	ldr	r4, [r7, #4]
 8006bd8:	f107 0308 	add.w	r3, r7, #8
 8006bdc:	4618      	mov	r0, r3
 8006bde:	f7ff fa16 	bl	800600e <_ZNSt15__allocated_ptrISaIN4tama18Stm32TextureLoaderEEE3getEv>
 8006be2:	4603      	mov	r3, r0
 8006be4:	4619      	mov	r1, r3
 8006be6:	4620      	mov	r0, r4
 8006be8:	f000 fd6b 	bl	80076c2 <_ZNSt16allocator_traitsISaIN4tama18Stm32TextureLoaderEEE7destroyIS1_EEvRS2_PT_>
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 8006bec:	f107 0308 	add.w	r3, r7, #8
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	f7ff f9f7 	bl	8005fe4 <_ZNSt15__allocated_ptrISaIN4tama18Stm32TextureLoaderEEED1Ev>
          }
 8006bf6:	bf00      	nop
 8006bf8:	3714      	adds	r7, #20
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd90      	pop	{r4, r7, pc}

08006bfe <_ZN9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEEC1ERKS3_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8006bfe:	b480      	push	{r7}
 8006c00:	b083      	sub	sp, #12
 8006c02:	af00      	add	r7, sp, #0
 8006c04:	6078      	str	r0, [r7, #4]
 8006c06:	6039      	str	r1, [r7, #0]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	370c      	adds	r7, #12
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c14:	4770      	bx	lr

08006c16 <_ZNSt16allocator_traitsISaIN4tama27Nokia5110DisplayDataManagerEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8006c16:	b580      	push	{r7, lr}
 8006c18:	b082      	sub	sp, #8
 8006c1a:	af00      	add	r7, sp, #0
 8006c1c:	6078      	str	r0, [r7, #4]
 8006c1e:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8006c20:	2200      	movs	r2, #0
 8006c22:	6839      	ldr	r1, [r7, #0]
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f000 fd59 	bl	80076dc <_ZN9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEE8allocateEjPKv>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	3708      	adds	r7, #8
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}

08006c34 <_ZNSt15__allocated_ptrISaIN4tama27Nokia5110DisplayDataManagerEEEC1ERS2_PS1_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b084      	sub	sp, #16
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	60f8      	str	r0, [r7, #12]
 8006c3c:	60b9      	str	r1, [r7, #8]
 8006c3e:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 8006c40:	68b8      	ldr	r0, [r7, #8]
 8006c42:	f000 fd6c 	bl	800771e <_ZSt11__addressofISaIN4tama27Nokia5110DisplayDataManagerEEEPT_RS3_>
 8006c46:	4602      	mov	r2, r0
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	601a      	str	r2, [r3, #0]
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	687a      	ldr	r2, [r7, #4]
 8006c50:	605a      	str	r2, [r3, #4]
      { }
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	4618      	mov	r0, r3
 8006c56:	3710      	adds	r7, #16
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}

08006c5c <_ZNSt16allocator_traitsISaIN4tama27Nokia5110DisplayDataManagerEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b084      	sub	sp, #16
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	60f8      	str	r0, [r7, #12]
 8006c64:	60b9      	str	r1, [r7, #8]
 8006c66:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8006c68:	687a      	ldr	r2, [r7, #4]
 8006c6a:	68b9      	ldr	r1, [r7, #8]
 8006c6c:	68f8      	ldr	r0, [r7, #12]
 8006c6e:	f000 fd61 	bl	8007734 <_ZN9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEE10deallocateEPS2_j>
 8006c72:	bf00      	nop
 8006c74:	3710      	adds	r7, #16
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}

08006c7a <_ZNSt15__allocated_ptrISaIN4tama27Nokia5110DisplayDataManagerEEE10_S_raw_ptrEPS1_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 8006c7a:	b480      	push	{r7}
 8006c7c:	b083      	sub	sp, #12
 8006c7e:	af00      	add	r7, sp, #0
 8006c80:	6078      	str	r0, [r7, #4]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	4618      	mov	r0, r3
 8006c86:	370c      	adds	r7, #12
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8e:	4770      	bx	lr

08006c90 <_ZN4tama18DisplayDataManagerC1Ev>:

#include "../display-data/DisplayData.h"

namespace tama
{
    class DisplayDataManager
 8006c90:	b480      	push	{r7}
 8006c92:	b083      	sub	sp, #12
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
 8006c98:	4a04      	ldr	r2, [pc, #16]	; (8006cac <_ZN4tama18DisplayDataManagerC1Ev+0x1c>)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	601a      	str	r2, [r3, #0]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	370c      	adds	r7, #12
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr
 8006cac:	08011a0c 	.word	0x08011a0c

08006cb0 <_ZN4tama27Nokia5110DisplayDataManagerC1Ev>:
#include "../../Core/ui/display/display-data/DisplayData.h"
#include "../../Configuration/display.config.h"

namespace tama
{
    class Nokia5110DisplayDataManager : public DisplayDataManager
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b082      	sub	sp, #8
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f7ff ffe8 	bl	8006c90 <_ZN4tama18DisplayDataManagerC1Ev>
 8006cc0:	4a0f      	ldr	r2, [pc, #60]	; (8006d00 <_ZN4tama27Nokia5110DisplayDataManagerC1Ev+0x50>)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	601a      	str	r2, [r3, #0]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2208      	movs	r2, #8
 8006cca:	605a      	str	r2, [r3, #4]
    public:
        DisplayData getActiveSceneDisplayData(std::shared_ptr<Texture>) override;

    private:
        unsigned segmentSize = 8;
        unsigned segmentsInHeight = Config_Display_Height / segmentSize; // 6
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	685b      	ldr	r3, [r3, #4]
 8006cd0:	2230      	movs	r2, #48	; 0x30
 8006cd2:	fbb2 f2f3 	udiv	r2, r2, r3
    class Nokia5110DisplayDataManager : public DisplayDataManager
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	609a      	str	r2, [r3, #8]
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2254      	movs	r2, #84	; 0x54
 8006cde:	60da      	str	r2, [r3, #12]
        unsigned segmentsInWidth = Config_Display_Width;
        unsigned dataSize = segmentsInHeight * segmentsInWidth;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	689b      	ldr	r3, [r3, #8]
 8006ce4:	687a      	ldr	r2, [r7, #4]
 8006ce6:	68d2      	ldr	r2, [r2, #12]
 8006ce8:	fb02 f203 	mul.w	r2, r2, r3
    class Nokia5110DisplayDataManager : public DisplayDataManager
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	611a      	str	r2, [r3, #16]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	615a      	str	r2, [r3, #20]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3708      	adds	r7, #8
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}
 8006d00:	08011a38 	.word	0x08011a38

08006d04 <_ZN9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEE9constructIS2_JEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b082      	sub	sp, #8
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
 8006d0c:	6039      	str	r1, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	4619      	mov	r1, r3
 8006d12:	2018      	movs	r0, #24
 8006d14:	f7f9 ff6a 	bl	8000bec <_ZnwjPv>
 8006d18:	4601      	mov	r1, r0
 8006d1a:	2900      	cmp	r1, #0
 8006d1c:	d00a      	beq.n	8006d34 <_ZN9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEE9constructIS2_JEEEvPT_DpOT0_+0x30>
 8006d1e:	460a      	mov	r2, r1
 8006d20:	2300      	movs	r3, #0
 8006d22:	6013      	str	r3, [r2, #0]
 8006d24:	6053      	str	r3, [r2, #4]
 8006d26:	6093      	str	r3, [r2, #8]
 8006d28:	60d3      	str	r3, [r2, #12]
 8006d2a:	6113      	str	r3, [r2, #16]
 8006d2c:	6153      	str	r3, [r2, #20]
 8006d2e:	4608      	mov	r0, r1
 8006d30:	f7ff ffbe 	bl	8006cb0 <_ZN4tama27Nokia5110DisplayDataManagerC1Ev>
 8006d34:	bf00      	nop
 8006d36:	3708      	adds	r7, #8
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}

08006d3c <_ZNSaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) throw() { }
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b082      	sub	sp, #8
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
 8006d44:	6039      	str	r1, [r7, #0]
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f000 fd01 	bl	800774e <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3708      	adds	r7, #8
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}

08006d56 <_ZNSaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>:
      ~allocator() throw() { }
 8006d56:	b580      	push	{r7, lr}
 8006d58:	b082      	sub	sp, #8
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	6078      	str	r0, [r7, #4]
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f000 fd00 	bl	8007764 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	4618      	mov	r0, r3
 8006d68:	3708      	adds	r7, #8
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}

08006d6e <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>:
    __allocate_guarded(_Alloc& __a)
 8006d6e:	b580      	push	{r7, lr}
 8006d70:	b082      	sub	sp, #8
 8006d72:	af00      	add	r7, sp, #0
 8006d74:	6078      	str	r0, [r7, #4]
 8006d76:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 8006d78:	2101      	movs	r1, #1
 8006d7a:	6838      	ldr	r0, [r7, #0]
 8006d7c:	f000 fcfd 	bl	800777a <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>
 8006d80:	4603      	mov	r3, r0
 8006d82:	461a      	mov	r2, r3
 8006d84:	6839      	ldr	r1, [r7, #0]
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f000 fd06 	bl	8007798 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
    }
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	3708      	adds	r7, #8
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bd80      	pop	{r7, pc}

08006d94 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>:
      ~__allocated_ptr()
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b082      	sub	sp, #8
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d007      	beq.n	8006db4 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6818      	ldr	r0, [r3, #0]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	685b      	ldr	r3, [r3, #4]
 8006dac:	2201      	movs	r2, #1
 8006dae:	4619      	mov	r1, r3
 8006db0:	f000 fd06 	bl	80077c0 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>
      }
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	4618      	mov	r0, r3
 8006db8:	3708      	adds	r7, #8
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}

08006dbe <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 8006dbe:	b580      	push	{r7, lr}
 8006dc0:	b082      	sub	sp, #8
 8006dc2:	af00      	add	r7, sp, #0
 8006dc4:	6078      	str	r0, [r7, #4]
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f000 fd07 	bl	80077de <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3708      	adds	r7, #8
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}

08006dda <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, false>
 8006dda:	b580      	push	{r7, lr}
 8006ddc:	b082      	sub	sp, #8
 8006dde:	af00      	add	r7, sp, #0
 8006de0:	6078      	str	r0, [r7, #4]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	4618      	mov	r0, r3
 8006de6:	f7fe fdb1 	bl	800594c <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	4618      	mov	r0, r3
 8006dee:	3708      	adds	r7, #8
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}

08006df4 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama27Nokia5110DisplayDataManagerEELb1EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, true> : private _Tp
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b082      	sub	sp, #8
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f7fe fa32 	bl	8005266 <_ZNSaIN4tama27Nokia5110DisplayDataManagerEED1Ev>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	4618      	mov	r0, r3
 8006e06:	3708      	adds	r7, #8
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}

08006e0c <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>:
      class _Impl : _Sp_ebo_helper<0, _Deleter>, _Sp_ebo_helper<1, _Alloc>
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b082      	sub	sp, #8
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	3301      	adds	r3, #1
 8006e18:	4618      	mov	r0, r3
 8006e1a:	f7ff ffeb 	bl	8006df4 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama27Nokia5110DisplayDataManagerEELb1EED1Ev>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	4618      	mov	r0, r3
 8006e22:	f7ff ffda 	bl	8006dda <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	4618      	mov	r0, r3
 8006e2a:	3708      	adds	r7, #8
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}

08006e30 <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>:
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 8006e30:	b590      	push	{r4, r7, lr}
 8006e32:	b087      	sub	sp, #28
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	60f8      	str	r0, [r7, #12]
 8006e38:	60b9      	str	r1, [r7, #8]
 8006e3a:	607a      	str	r2, [r7, #4]
 8006e3c:	603b      	str	r3, [r7, #0]
      : _M_impl(__p, std::move(__d), __a) { }
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	4618      	mov	r0, r3
 8006e42:	f7fb fd4b 	bl	80028dc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 8006e46:	4a10      	ldr	r2, [pc, #64]	; (8006e88 <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_+0x58>)
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	601a      	str	r2, [r3, #0]
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	f103 040c 	add.w	r4, r3, #12
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f7ff f9ed 	bl	8006232 <_ZSt4moveIRNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 8006e58:	4602      	mov	r2, r0
 8006e5a:	f107 0314 	add.w	r3, r7, #20
 8006e5e:	4611      	mov	r1, r2
 8006e60:	4618      	mov	r0, r3
 8006e62:	f7ff f9f1 	bl	8006248 <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 8006e66:	f107 0214 	add.w	r2, r7, #20
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	68b9      	ldr	r1, [r7, #8]
 8006e6e:	4620      	mov	r0, r4
 8006e70:	f000 fcc0 	bl	80077f4 <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>
 8006e74:	f107 0314 	add.w	r3, r7, #20
 8006e78:	4618      	mov	r0, r3
 8006e7a:	f7fe fd67 	bl	800594c <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	4618      	mov	r0, r3
 8006e82:	371c      	adds	r7, #28
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd90      	pop	{r4, r7, pc}
 8006e88:	080119b8 	.word	0x080119b8

08006e8c <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 8006e8c:	b480      	push	{r7}
 8006e8e:	b083      	sub	sp, #12
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
 8006e94:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	605a      	str	r2, [r3, #4]
	return *this;
 8006e9c:	687b      	ldr	r3, [r7, #4]
      }
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	370c      	adds	r7, #12
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea8:	4770      	bx	lr

08006eaa <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>:
          void operator()(typename _Alloc::value_type* __ptr)
 8006eaa:	b590      	push	{r4, r7, lr}
 8006eac:	b085      	sub	sp, #20
 8006eae:	af00      	add	r7, sp, #0
 8006eb0:	6078      	str	r0, [r7, #4]
 8006eb2:	6039      	str	r1, [r7, #0]
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 8006eb4:	6879      	ldr	r1, [r7, #4]
 8006eb6:	f107 0308 	add.w	r3, r7, #8
 8006eba:	683a      	ldr	r2, [r7, #0]
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	f7ff feb9 	bl	8006c34 <_ZNSt15__allocated_ptrISaIN4tama27Nokia5110DisplayDataManagerEEEC1ERS2_PS1_>
	    allocator_traits<_Alloc>::destroy(_M_alloc, __guard.get());
 8006ec2:	687c      	ldr	r4, [r7, #4]
 8006ec4:	f107 0308 	add.w	r3, r7, #8
 8006ec8:	4618      	mov	r0, r3
 8006eca:	f7ff f988 	bl	80061de <_ZNSt15__allocated_ptrISaIN4tama27Nokia5110DisplayDataManagerEEE3getEv>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	4619      	mov	r1, r3
 8006ed2:	4620      	mov	r0, r4
 8006ed4:	f000 fcac 	bl	8007830 <_ZNSt16allocator_traitsISaIN4tama27Nokia5110DisplayDataManagerEEE7destroyIS1_EEvRS2_PT_>
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 8006ed8:	f107 0308 	add.w	r3, r7, #8
 8006edc:	4618      	mov	r0, r3
 8006ede:	f7ff f969 	bl	80061b4 <_ZNSt15__allocated_ptrISaIN4tama27Nokia5110DisplayDataManagerEEED1Ev>
          }
 8006ee2:	bf00      	nop
 8006ee4:	3714      	adds	r7, #20
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd90      	pop	{r4, r7, pc}

08006eea <_ZN9__gnu_cxx13new_allocatorIN4tama5SceneEE9constructIS2_JEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8006eea:	b580      	push	{r7, lr}
 8006eec:	b082      	sub	sp, #8
 8006eee:	af00      	add	r7, sp, #0
 8006ef0:	6078      	str	r0, [r7, #4]
 8006ef2:	6039      	str	r1, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	4619      	mov	r1, r3
 8006ef8:	2020      	movs	r0, #32
 8006efa:	f7f9 fe77 	bl	8000bec <_ZnwjPv>
 8006efe:	4603      	mov	r3, r0
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d002      	beq.n	8006f0a <_ZN9__gnu_cxx13new_allocatorIN4tama5SceneEE9constructIS2_JEEEvPT_DpOT0_+0x20>
 8006f04:	4618      	mov	r0, r3
 8006f06:	f7fb ffd3 	bl	8002eb0 <_ZN4tama5SceneC1Ev>
 8006f0a:	bf00      	nop
 8006f0c:	3708      	adds	r7, #8
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}

08006f12 <_ZN9__gnu_cxx13new_allocatorIN4tama6SpriteEEC1ERKS3_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8006f12:	b480      	push	{r7}
 8006f14:	b083      	sub	sp, #12
 8006f16:	af00      	add	r7, sp, #0
 8006f18:	6078      	str	r0, [r7, #4]
 8006f1a:	6039      	str	r1, [r7, #0]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	4618      	mov	r0, r3
 8006f20:	370c      	adds	r7, #12
 8006f22:	46bd      	mov	sp, r7
 8006f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f28:	4770      	bx	lr

08006f2a <_ZNSt16allocator_traitsISaIN4tama6SpriteEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8006f2a:	b580      	push	{r7, lr}
 8006f2c:	b082      	sub	sp, #8
 8006f2e:	af00      	add	r7, sp, #0
 8006f30:	6078      	str	r0, [r7, #4]
 8006f32:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8006f34:	2200      	movs	r2, #0
 8006f36:	6839      	ldr	r1, [r7, #0]
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f000 fc86 	bl	800784a <_ZN9__gnu_cxx13new_allocatorIN4tama6SpriteEE8allocateEjPKv>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	4618      	mov	r0, r3
 8006f42:	3708      	adds	r7, #8
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}

08006f48 <_ZNSt15__allocated_ptrISaIN4tama6SpriteEEEC1ERS2_PS1_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b084      	sub	sp, #16
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	60f8      	str	r0, [r7, #12]
 8006f50:	60b9      	str	r1, [r7, #8]
 8006f52:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 8006f54:	68b8      	ldr	r0, [r7, #8]
 8006f56:	f000 fc96 	bl	8007886 <_ZSt11__addressofISaIN4tama6SpriteEEEPT_RS3_>
 8006f5a:	4602      	mov	r2, r0
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	601a      	str	r2, [r3, #0]
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	687a      	ldr	r2, [r7, #4]
 8006f64:	605a      	str	r2, [r3, #4]
      { }
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	4618      	mov	r0, r3
 8006f6a:	3710      	adds	r7, #16
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}

08006f70 <_ZNSt16allocator_traitsISaIN4tama6SpriteEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b084      	sub	sp, #16
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	60f8      	str	r0, [r7, #12]
 8006f78:	60b9      	str	r1, [r7, #8]
 8006f7a:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8006f7c:	687a      	ldr	r2, [r7, #4]
 8006f7e:	68b9      	ldr	r1, [r7, #8]
 8006f80:	68f8      	ldr	r0, [r7, #12]
 8006f82:	f000 fc8b 	bl	800789c <_ZN9__gnu_cxx13new_allocatorIN4tama6SpriteEE10deallocateEPS2_j>
 8006f86:	bf00      	nop
 8006f88:	3710      	adds	r7, #16
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}

08006f8e <_ZNSt15__allocated_ptrISaIN4tama6SpriteEEE10_S_raw_ptrEPS1_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 8006f8e:	b480      	push	{r7}
 8006f90:	b083      	sub	sp, #12
 8006f92:	af00      	add	r7, sp, #0
 8006f94:	6078      	str	r0, [r7, #4]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	4618      	mov	r0, r3
 8006f9a:	370c      	adds	r7, #12
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa2:	4770      	bx	lr

08006fa4 <_ZN9__gnu_cxx13new_allocatorIN4tama6SpriteEE9constructIS2_JRSt10shared_ptrINS1_7TextureEENS1_5Vec2dEEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8006fa4:	b5b0      	push	{r4, r5, r7, lr}
 8006fa6:	b084      	sub	sp, #16
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	60f8      	str	r0, [r7, #12]
 8006fac:	60b9      	str	r1, [r7, #8]
 8006fae:	607a      	str	r2, [r7, #4]
 8006fb0:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f7fe f80d 	bl	8004fd2 <_ZSt7forwardIRSt10shared_ptrIN4tama7TextureEEEOT_RNSt16remove_referenceIS5_E4typeE>
 8006fb8:	4604      	mov	r4, r0
 8006fba:	6838      	ldr	r0, [r7, #0]
 8006fbc:	f7fe f814 	bl	8004fe8 <_ZSt7forwardIN4tama5Vec2dEEOT_RNSt16remove_referenceIS2_E4typeE>
 8006fc0:	4605      	mov	r5, r0
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	4619      	mov	r1, r3
 8006fc6:	2020      	movs	r0, #32
 8006fc8:	f7f9 fe10 	bl	8000bec <_ZnwjPv>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d004      	beq.n	8006fdc <_ZN9__gnu_cxx13new_allocatorIN4tama6SpriteEE9constructIS2_JRSt10shared_ptrINS1_7TextureEENS1_5Vec2dEEEEvPT_DpOT0_+0x38>
 8006fd2:	462a      	mov	r2, r5
 8006fd4:	4621      	mov	r1, r4
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f7f9 fc5c 	bl	8000894 <_ZN4tama6SpriteC1ERKSt10shared_ptrINS_7TextureEERKNS_5Vec2dE>
 8006fdc:	bf00      	nop
 8006fde:	3710      	adds	r7, #16
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bdb0      	pop	{r4, r5, r7, pc}

08006fe4 <_ZNSaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) throw() { }
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b082      	sub	sp, #8
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
 8006fec:	6039      	str	r1, [r7, #0]
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f000 fc61 	bl	80078b6 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	3708      	adds	r7, #8
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}

08006ffe <_ZNSaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>:
      ~allocator() throw() { }
 8006ffe:	b580      	push	{r7, lr}
 8007000:	b082      	sub	sp, #8
 8007002:	af00      	add	r7, sp, #0
 8007004:	6078      	str	r0, [r7, #4]
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f000 fc60 	bl	80078cc <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	4618      	mov	r0, r3
 8007010:	3708      	adds	r7, #8
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}

08007016 <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>:
    __allocate_guarded(_Alloc& __a)
 8007016:	b580      	push	{r7, lr}
 8007018:	b082      	sub	sp, #8
 800701a:	af00      	add	r7, sp, #0
 800701c:	6078      	str	r0, [r7, #4]
 800701e:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 8007020:	2101      	movs	r1, #1
 8007022:	6838      	ldr	r0, [r7, #0]
 8007024:	f000 fc5d 	bl	80078e2 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>
 8007028:	4603      	mov	r3, r0
 800702a:	461a      	mov	r2, r3
 800702c:	6839      	ldr	r1, [r7, #0]
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f000 fc66 	bl	8007900 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
    }
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	3708      	adds	r7, #8
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}

0800703c <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>:
      ~__allocated_ptr()
 800703c:	b580      	push	{r7, lr}
 800703e:	b082      	sub	sp, #8
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d007      	beq.n	800705c <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6818      	ldr	r0, [r3, #0]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	2201      	movs	r2, #1
 8007056:	4619      	mov	r1, r3
 8007058:	f000 fc66 	bl	8007928 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>
      }
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	4618      	mov	r0, r3
 8007060:	3708      	adds	r7, #8
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}

08007066 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 8007066:	b580      	push	{r7, lr}
 8007068:	b082      	sub	sp, #8
 800706a:	af00      	add	r7, sp, #0
 800706c:	6078      	str	r0, [r7, #4]
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	4618      	mov	r0, r3
 8007074:	f000 fc67 	bl	8007946 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>
 8007078:	4603      	mov	r3, r0
 800707a:	4618      	mov	r0, r3
 800707c:	3708      	adds	r7, #8
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}

08007082 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, false>
 8007082:	b580      	push	{r7, lr}
 8007084:	b082      	sub	sp, #8
 8007086:	af00      	add	r7, sp, #0
 8007088:	6078      	str	r0, [r7, #4]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	4618      	mov	r0, r3
 800708e:	f7fe fd66 	bl	8005b5e <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	4618      	mov	r0, r3
 8007096:	3708      	adds	r7, #8
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}

0800709c <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama6SpriteEELb1EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, true> : private _Tp
 800709c:	b580      	push	{r7, lr}
 800709e:	b082      	sub	sp, #8
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f7fe f93c 	bl	8005322 <_ZNSaIN4tama6SpriteEED1Ev>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	4618      	mov	r0, r3
 80070ae:	3708      	adds	r7, #8
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}

080070b4 <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>:
      class _Impl : _Sp_ebo_helper<0, _Deleter>, _Sp_ebo_helper<1, _Alloc>
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b082      	sub	sp, #8
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	3301      	adds	r3, #1
 80070c0:	4618      	mov	r0, r3
 80070c2:	f7ff ffeb 	bl	800709c <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama6SpriteEELb1EED1Ev>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	4618      	mov	r0, r3
 80070ca:	f7ff ffda 	bl	8007082 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	4618      	mov	r0, r3
 80070d2:	3708      	adds	r7, #8
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bd80      	pop	{r7, pc}

080070d8 <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>:
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 80070d8:	b590      	push	{r4, r7, lr}
 80070da:	b087      	sub	sp, #28
 80070dc:	af00      	add	r7, sp, #0
 80070de:	60f8      	str	r0, [r7, #12]
 80070e0:	60b9      	str	r1, [r7, #8]
 80070e2:	607a      	str	r2, [r7, #4]
 80070e4:	603b      	str	r3, [r7, #0]
      : _M_impl(__p, std::move(__d), __a) { }
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	4618      	mov	r0, r3
 80070ea:	f7fb fbf7 	bl	80028dc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 80070ee:	4a10      	ldr	r2, [pc, #64]	; (8007130 <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_+0x58>)
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	601a      	str	r2, [r3, #0]
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f103 040c 	add.w	r4, r3, #12
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f7ff f999 	bl	8006432 <_ZSt4moveIRNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 8007100:	4602      	mov	r2, r0
 8007102:	f107 0314 	add.w	r3, r7, #20
 8007106:	4611      	mov	r1, r2
 8007108:	4618      	mov	r0, r3
 800710a:	f7ff f99d 	bl	8006448 <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 800710e:	f107 0214 	add.w	r2, r7, #20
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	68b9      	ldr	r1, [r7, #8]
 8007116:	4620      	mov	r0, r4
 8007118:	f000 fc20 	bl	800795c <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>
 800711c:	f107 0314 	add.w	r3, r7, #20
 8007120:	4618      	mov	r0, r3
 8007122:	f7fe fd1c 	bl	8005b5e <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	4618      	mov	r0, r3
 800712a:	371c      	adds	r7, #28
 800712c:	46bd      	mov	sp, r7
 800712e:	bd90      	pop	{r4, r7, pc}
 8007130:	0801199c 	.word	0x0801199c

08007134 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 8007134:	b480      	push	{r7}
 8007136:	b083      	sub	sp, #12
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
 800713c:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2200      	movs	r2, #0
 8007142:	605a      	str	r2, [r3, #4]
	return *this;
 8007144:	687b      	ldr	r3, [r7, #4]
      }
 8007146:	4618      	mov	r0, r3
 8007148:	370c      	adds	r7, #12
 800714a:	46bd      	mov	sp, r7
 800714c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007150:	4770      	bx	lr

08007152 <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>:
          void operator()(typename _Alloc::value_type* __ptr)
 8007152:	b590      	push	{r4, r7, lr}
 8007154:	b085      	sub	sp, #20
 8007156:	af00      	add	r7, sp, #0
 8007158:	6078      	str	r0, [r7, #4]
 800715a:	6039      	str	r1, [r7, #0]
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 800715c:	6879      	ldr	r1, [r7, #4]
 800715e:	f107 0308 	add.w	r3, r7, #8
 8007162:	683a      	ldr	r2, [r7, #0]
 8007164:	4618      	mov	r0, r3
 8007166:	f7ff feef 	bl	8006f48 <_ZNSt15__allocated_ptrISaIN4tama6SpriteEEEC1ERS2_PS1_>
	    allocator_traits<_Alloc>::destroy(_M_alloc, __guard.get());
 800716a:	687c      	ldr	r4, [r7, #4]
 800716c:	f107 0308 	add.w	r3, r7, #8
 8007170:	4618      	mov	r0, r3
 8007172:	f7ff f929 	bl	80063c8 <_ZNSt15__allocated_ptrISaIN4tama6SpriteEEE3getEv>
 8007176:	4603      	mov	r3, r0
 8007178:	4619      	mov	r1, r3
 800717a:	4620      	mov	r0, r4
 800717c:	f000 fc0c 	bl	8007998 <_ZNSt16allocator_traitsISaIN4tama6SpriteEEE7destroyIS1_EEvRS2_PT_>
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 8007180:	f107 0308 	add.w	r3, r7, #8
 8007184:	4618      	mov	r0, r3
 8007186:	f7ff f90a 	bl	800639e <_ZNSt15__allocated_ptrISaIN4tama6SpriteEEED1Ev>
          }
 800718a:	bf00      	nop
 800718c:	3714      	adds	r7, #20
 800718e:	46bd      	mov	sp, r7
 8007190:	bd90      	pop	{r4, r7, pc}

08007192 <_ZN9__gnu_cxx13new_allocatorIN4tama4TextEEC1ERKS3_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8007192:	b480      	push	{r7}
 8007194:	b083      	sub	sp, #12
 8007196:	af00      	add	r7, sp, #0
 8007198:	6078      	str	r0, [r7, #4]
 800719a:	6039      	str	r1, [r7, #0]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	4618      	mov	r0, r3
 80071a0:	370c      	adds	r7, #12
 80071a2:	46bd      	mov	sp, r7
 80071a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a8:	4770      	bx	lr

080071aa <_ZNSt16allocator_traitsISaIN4tama4TextEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 80071aa:	b580      	push	{r7, lr}
 80071ac:	b082      	sub	sp, #8
 80071ae:	af00      	add	r7, sp, #0
 80071b0:	6078      	str	r0, [r7, #4]
 80071b2:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80071b4:	2200      	movs	r2, #0
 80071b6:	6839      	ldr	r1, [r7, #0]
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f000 fbfa 	bl	80079b2 <_ZN9__gnu_cxx13new_allocatorIN4tama4TextEE8allocateEjPKv>
 80071be:	4603      	mov	r3, r0
 80071c0:	4618      	mov	r0, r3
 80071c2:	3708      	adds	r7, #8
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}

080071c8 <_ZNSt15__allocated_ptrISaIN4tama4TextEEEC1ERS2_PS1_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b084      	sub	sp, #16
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	60f8      	str	r0, [r7, #12]
 80071d0:	60b9      	str	r1, [r7, #8]
 80071d2:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 80071d4:	68b8      	ldr	r0, [r7, #8]
 80071d6:	f000 fc0a 	bl	80079ee <_ZSt11__addressofISaIN4tama4TextEEEPT_RS3_>
 80071da:	4602      	mov	r2, r0
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	601a      	str	r2, [r3, #0]
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	687a      	ldr	r2, [r7, #4]
 80071e4:	605a      	str	r2, [r3, #4]
      { }
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	4618      	mov	r0, r3
 80071ea:	3710      	adds	r7, #16
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}

080071f0 <_ZNSt16allocator_traitsISaIN4tama4TextEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b084      	sub	sp, #16
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	60f8      	str	r0, [r7, #12]
 80071f8:	60b9      	str	r1, [r7, #8]
 80071fa:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80071fc:	687a      	ldr	r2, [r7, #4]
 80071fe:	68b9      	ldr	r1, [r7, #8]
 8007200:	68f8      	ldr	r0, [r7, #12]
 8007202:	f000 fbff 	bl	8007a04 <_ZN9__gnu_cxx13new_allocatorIN4tama4TextEE10deallocateEPS2_j>
 8007206:	bf00      	nop
 8007208:	3710      	adds	r7, #16
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}

0800720e <_ZNSt15__allocated_ptrISaIN4tama4TextEEE10_S_raw_ptrEPS1_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 800720e:	b480      	push	{r7}
 8007210:	b083      	sub	sp, #12
 8007212:	af00      	add	r7, sp, #0
 8007214:	6078      	str	r0, [r7, #4]
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	4618      	mov	r0, r3
 800721a:	370c      	adds	r7, #12
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr

08007224 <_ZN9__gnu_cxx13new_allocatorIN4tama4TextEE9constructIS2_JNS1_5Vec2dEEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8007224:	b590      	push	{r4, r7, lr}
 8007226:	b085      	sub	sp, #20
 8007228:	af00      	add	r7, sp, #0
 800722a:	60f8      	str	r0, [r7, #12]
 800722c:	60b9      	str	r1, [r7, #8]
 800722e:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f7fd fed9 	bl	8004fe8 <_ZSt7forwardIN4tama5Vec2dEEOT_RNSt16remove_referenceIS2_E4typeE>
 8007236:	4604      	mov	r4, r0
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	4619      	mov	r1, r3
 800723c:	2040      	movs	r0, #64	; 0x40
 800723e:	f7f9 fcd5 	bl	8000bec <_ZnwjPv>
 8007242:	4603      	mov	r3, r0
 8007244:	2b00      	cmp	r3, #0
 8007246:	d003      	beq.n	8007250 <_ZN9__gnu_cxx13new_allocatorIN4tama4TextEE9constructIS2_JNS1_5Vec2dEEEEvPT_DpOT0_+0x2c>
 8007248:	4621      	mov	r1, r4
 800724a:	4618      	mov	r0, r3
 800724c:	f7f9 ff68 	bl	8001120 <_ZN4tama4TextC1ERKNS_5Vec2dE>
 8007250:	bf00      	nop
 8007252:	3714      	adds	r7, #20
 8007254:	46bd      	mov	sp, r7
 8007256:	bd90      	pop	{r4, r7, pc}

08007258 <_ZNSaISt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) throw() { }
 8007258:	b580      	push	{r7, lr}
 800725a:	b082      	sub	sp, #8
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
 8007260:	6039      	str	r1, [r7, #0]
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f000 fbdb 	bl	8007a1e <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	4618      	mov	r0, r3
 800726c:	3708      	adds	r7, #8
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}

08007272 <_ZNSaISt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>:
      ~allocator() throw() { }
 8007272:	b580      	push	{r7, lr}
 8007274:	b082      	sub	sp, #8
 8007276:	af00      	add	r7, sp, #0
 8007278:	6078      	str	r0, [r7, #4]
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f000 fbda 	bl	8007a34 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	4618      	mov	r0, r3
 8007284:	3708      	adds	r7, #8
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}

0800728a <_ZSt18__allocate_guardedISaISt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEESt15__allocated_ptrIT_ERSE_>:
    __allocate_guarded(_Alloc& __a)
 800728a:	b580      	push	{r7, lr}
 800728c:	b082      	sub	sp, #8
 800728e:	af00      	add	r7, sp, #0
 8007290:	6078      	str	r0, [r7, #4]
 8007292:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 8007294:	2101      	movs	r1, #1
 8007296:	6838      	ldr	r0, [r7, #0]
 8007298:	f000 fbd7 	bl	8007a4a <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>
 800729c:	4603      	mov	r3, r0
 800729e:	461a      	mov	r2, r3
 80072a0:	6839      	ldr	r1, [r7, #0]
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f000 fbe0 	bl	8007a68 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
    }
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	3708      	adds	r7, #8
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}

080072b0 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>:
      ~__allocated_ptr()
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b082      	sub	sp, #8
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	685b      	ldr	r3, [r3, #4]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d007      	beq.n	80072d0 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6818      	ldr	r0, [r3, #0]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	685b      	ldr	r3, [r3, #4]
 80072c8:	2201      	movs	r2, #1
 80072ca:	4619      	mov	r1, r3
 80072cc:	f000 fbe0 	bl	8007a90 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>
      }
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	4618      	mov	r0, r3
 80072d4:	3708      	adds	r7, #8
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}

080072da <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE3getEv>:
      value_type* get() { return _S_raw_ptr(_M_ptr); }
 80072da:	b580      	push	{r7, lr}
 80072dc:	b082      	sub	sp, #8
 80072de:	af00      	add	r7, sp, #0
 80072e0:	6078      	str	r0, [r7, #4]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	685b      	ldr	r3, [r3, #4]
 80072e6:	4618      	mov	r0, r3
 80072e8:	f000 fbe1 	bl	8007aae <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>
 80072ec:	4603      	mov	r3, r0
 80072ee:	4618      	mov	r0, r3
 80072f0:	3708      	adds	r7, #8
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}

080072f6 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama4TextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, false>
 80072f6:	b580      	push	{r7, lr}
 80072f8:	b082      	sub	sp, #8
 80072fa:	af00      	add	r7, sp, #0
 80072fc:	6078      	str	r0, [r7, #4]
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	4618      	mov	r0, r3
 8007302:	f7fe fcc8 	bl	8005c96 <_ZNSt12__shared_ptrIN4tama4TextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	4618      	mov	r0, r3
 800730a:	3708      	adds	r7, #8
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}

08007310 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama4TextEELb1EED1Ev>:
    struct _Sp_ebo_helper<_Nm, _Tp, true> : private _Tp
 8007310:	b580      	push	{r7, lr}
 8007312:	b082      	sub	sp, #8
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f7fe f834 	bl	8005386 <_ZNSaIN4tama4TextEED1Ev>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	4618      	mov	r0, r3
 8007322:	3708      	adds	r7, #8
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}

08007328 <_ZNSt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>:
      class _Impl : _Sp_ebo_helper<0, _Deleter>, _Sp_ebo_helper<1, _Alloc>
 8007328:	b580      	push	{r7, lr}
 800732a:	b082      	sub	sp, #8
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	3301      	adds	r3, #1
 8007334:	4618      	mov	r0, r3
 8007336:	f7ff ffeb 	bl	8007310 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama4TextEELb1EED1Ev>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	4618      	mov	r0, r3
 800733e:	f7ff ffda 	bl	80072f6 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama4TextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EED1Ev>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	4618      	mov	r0, r3
 8007346:	3708      	adds	r7, #8
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}

0800734c <_ZNSt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_>:
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 800734c:	b590      	push	{r4, r7, lr}
 800734e:	b087      	sub	sp, #28
 8007350:	af00      	add	r7, sp, #0
 8007352:	60f8      	str	r0, [r7, #12]
 8007354:	60b9      	str	r1, [r7, #8]
 8007356:	607a      	str	r2, [r7, #4]
 8007358:	603b      	str	r3, [r7, #0]
      : _M_impl(__p, std::move(__d), __a) { }
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	4618      	mov	r0, r3
 800735e:	f7fb fabd 	bl	80028dc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 8007362:	4a10      	ldr	r2, [pc, #64]	; (80073a4 <_ZNSt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEC1ES2_S9_RKS8_+0x58>)
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	601a      	str	r2, [r3, #0]
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	f103 040c 	add.w	r4, r3, #12
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f7ff f94d 	bl	800660e <_ZSt4moveIRNSt12__shared_ptrIN4tama4TextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 8007374:	4602      	mov	r2, r0
 8007376:	f107 0314 	add.w	r3, r7, #20
 800737a:	4611      	mov	r1, r2
 800737c:	4618      	mov	r0, r3
 800737e:	f7ff f951 	bl	8006624 <_ZNSt12__shared_ptrIN4tama4TextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 8007382:	f107 0214 	add.w	r2, r7, #20
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	68b9      	ldr	r1, [r7, #8]
 800738a:	4620      	mov	r0, r4
 800738c:	f000 fb9a 	bl	8007ac4 <_ZNSt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>
 8007390:	f107 0314 	add.w	r3, r7, #20
 8007394:	4618      	mov	r0, r3
 8007396:	f7fe fc7e 	bl	8005c96 <_ZNSt12__shared_ptrIN4tama4TextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EED1Ev>
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	4618      	mov	r0, r3
 800739e:	371c      	adds	r7, #28
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd90      	pop	{r4, r7, pc}
 80073a4:	08011980 	.word	0x08011980

080073a8 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 80073a8:	b480      	push	{r7}
 80073aa:	b083      	sub	sp, #12
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
 80073b0:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2200      	movs	r2, #0
 80073b6:	605a      	str	r2, [r3, #4]
	return *this;
 80073b8:	687b      	ldr	r3, [r7, #4]
      }
 80073ba:	4618      	mov	r0, r3
 80073bc:	370c      	adds	r7, #12
 80073be:	46bd      	mov	sp, r7
 80073c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c4:	4770      	bx	lr

080073c6 <_ZNSt12__shared_ptrIN4tama4TextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>:
          void operator()(typename _Alloc::value_type* __ptr)
 80073c6:	b590      	push	{r4, r7, lr}
 80073c8:	b085      	sub	sp, #20
 80073ca:	af00      	add	r7, sp, #0
 80073cc:	6078      	str	r0, [r7, #4]
 80073ce:	6039      	str	r1, [r7, #0]
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 80073d0:	6879      	ldr	r1, [r7, #4]
 80073d2:	f107 0308 	add.w	r3, r7, #8
 80073d6:	683a      	ldr	r2, [r7, #0]
 80073d8:	4618      	mov	r0, r3
 80073da:	f7ff fef5 	bl	80071c8 <_ZNSt15__allocated_ptrISaIN4tama4TextEEEC1ERS2_PS1_>
	    allocator_traits<_Alloc>::destroy(_M_alloc, __guard.get());
 80073de:	687c      	ldr	r4, [r7, #4]
 80073e0:	f107 0308 	add.w	r3, r7, #8
 80073e4:	4618      	mov	r0, r3
 80073e6:	f7ff f8e2 	bl	80065ae <_ZNSt15__allocated_ptrISaIN4tama4TextEEE3getEv>
 80073ea:	4603      	mov	r3, r0
 80073ec:	4619      	mov	r1, r3
 80073ee:	4620      	mov	r0, r4
 80073f0:	f000 fb86 	bl	8007b00 <_ZNSt16allocator_traitsISaIN4tama4TextEEE7destroyIS1_EEvRS2_PT_>
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
 80073f4:	f107 0308 	add.w	r3, r7, #8
 80073f8:	4618      	mov	r0, r3
 80073fa:	f7ff f8c3 	bl	8006584 <_ZNSt15__allocated_ptrISaIN4tama4TextEEED1Ev>
          }
 80073fe:	bf00      	nop
 8007400:	3714      	adds	r7, #20
 8007402:	46bd      	mov	sp, r7
 8007404:	bd90      	pop	{r4, r7, pc}

08007406 <_ZN9__gnu_cxx13new_allocatorIN4tama16Nokia5510DisplayEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8007406:	b580      	push	{r7, lr}
 8007408:	b084      	sub	sp, #16
 800740a:	af00      	add	r7, sp, #0
 800740c:	60f8      	str	r0, [r7, #12]
 800740e:	60b9      	str	r1, [r7, #8]
 8007410:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8007412:	68f8      	ldr	r0, [r7, #12]
 8007414:	f000 fb82 	bl	8007b1c <_ZNK9__gnu_cxx13new_allocatorIN4tama16Nokia5510DisplayEE8max_sizeEv>
 8007418:	4602      	mov	r2, r0
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	4293      	cmp	r3, r2
 800741e:	bf8c      	ite	hi
 8007420:	2301      	movhi	r3, #1
 8007422:	2300      	movls	r3, #0
 8007424:	b2db      	uxtb	r3, r3
 8007426:	2b00      	cmp	r3, #0
 8007428:	d001      	beq.n	800742e <_ZN9__gnu_cxx13new_allocatorIN4tama16Nokia5510DisplayEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800742a:	f009 f82a 	bl	8010482 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800742e:	68ba      	ldr	r2, [r7, #8]
 8007430:	4613      	mov	r3, r2
 8007432:	005b      	lsls	r3, r3, #1
 8007434:	4413      	add	r3, r2
 8007436:	011b      	lsls	r3, r3, #4
 8007438:	4618      	mov	r0, r3
 800743a:	f008 fff4 	bl	8010426 <_Znwj>
 800743e:	4603      	mov	r3, r0
      }
 8007440:	4618      	mov	r0, r3
 8007442:	3710      	adds	r7, #16
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}

08007448 <_ZSt11__addressofISaIN4tama16Nokia5510DisplayEEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8007448:	b480      	push	{r7}
 800744a:	b083      	sub	sp, #12
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	4618      	mov	r0, r3
 8007454:	370c      	adds	r7, #12
 8007456:	46bd      	mov	sp, r7
 8007458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745c:	4770      	bx	lr

0800745e <_ZN9__gnu_cxx13new_allocatorIN4tama16Nokia5510DisplayEE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 800745e:	b580      	push	{r7, lr}
 8007460:	b084      	sub	sp, #16
 8007462:	af00      	add	r7, sp, #0
 8007464:	60f8      	str	r0, [r7, #12]
 8007466:	60b9      	str	r1, [r7, #8]
 8007468:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800746a:	68b8      	ldr	r0, [r7, #8]
 800746c:	f008 fff4 	bl	8010458 <_ZdlPv>
      }
 8007470:	bf00      	nop
 8007472:	3710      	adds	r7, #16
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}

08007478 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8007478:	b480      	push	{r7}
 800747a:	b083      	sub	sp, #12
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	4618      	mov	r0, r3
 8007484:	370c      	adds	r7, #12
 8007486:	46bd      	mov	sp, r7
 8007488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748c:	4770      	bx	lr

0800748e <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800748e:	b480      	push	{r7}
 8007490:	b083      	sub	sp, #12
 8007492:	af00      	add	r7, sp, #0
 8007494:	6078      	str	r0, [r7, #4]
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	4618      	mov	r0, r3
 800749a:	370c      	adds	r7, #12
 800749c:	46bd      	mov	sp, r7
 800749e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a2:	4770      	bx	lr

080074a4 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>:
      allocate(allocator_type& __a, size_type __n)
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b082      	sub	sp, #8
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
 80074ac:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80074ae:	2200      	movs	r2, #0
 80074b0:	6839      	ldr	r1, [r7, #0]
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f000 fb40 	bl	8007b38 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>
 80074b8:	4603      	mov	r3, r0
 80074ba:	4618      	mov	r0, r3
 80074bc:	3708      	adds	r7, #8
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}

080074c2 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 80074c2:	b580      	push	{r7, lr}
 80074c4:	b084      	sub	sp, #16
 80074c6:	af00      	add	r7, sp, #0
 80074c8:	60f8      	str	r0, [r7, #12]
 80074ca:	60b9      	str	r1, [r7, #8]
 80074cc:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 80074ce:	68b8      	ldr	r0, [r7, #8]
 80074d0:	f000 fb53 	bl	8007b7a <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>
 80074d4:	4602      	mov	r2, r0
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	601a      	str	r2, [r3, #0]
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	687a      	ldr	r2, [r7, #4]
 80074de:	605a      	str	r2, [r3, #4]
      { }
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	4618      	mov	r0, r3
 80074e4:	3710      	adds	r7, #16
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd80      	pop	{r7, pc}

080074ea <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80074ea:	b580      	push	{r7, lr}
 80074ec:	b084      	sub	sp, #16
 80074ee:	af00      	add	r7, sp, #0
 80074f0:	60f8      	str	r0, [r7, #12]
 80074f2:	60b9      	str	r1, [r7, #8]
 80074f4:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80074f6:	687a      	ldr	r2, [r7, #4]
 80074f8:	68b9      	ldr	r1, [r7, #8]
 80074fa:	68f8      	ldr	r0, [r7, #12]
 80074fc:	f000 fb48 	bl	8007b90 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>
 8007500:	bf00      	nop
 8007502:	3710      	adds	r7, #16
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}

08007508 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 8007508:	b480      	push	{r7}
 800750a:	b083      	sub	sp, #12
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	4618      	mov	r0, r3
 8007514:	370c      	adds	r7, #12
 8007516:	46bd      	mov	sp, r7
 8007518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751c:	4770      	bx	lr

0800751e <_ZNSt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 800751e:	b590      	push	{r4, r7, lr}
 8007520:	b085      	sub	sp, #20
 8007522:	af00      	add	r7, sp, #0
 8007524:	60f8      	str	r0, [r7, #12]
 8007526:	60b9      	str	r1, [r7, #8]
 8007528:	607a      	str	r2, [r7, #4]
 800752a:	603b      	str	r3, [r7, #0]
	: _M_ptr(__p), _Del_base(std::move(__d)), _Alloc_base(__a)
 800752c:	68fc      	ldr	r4, [r7, #12]
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f7fe fcaf 	bl	8005e92 <_ZSt4moveIRNSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 8007534:	4603      	mov	r3, r0
 8007536:	4619      	mov	r1, r3
 8007538:	4620      	mov	r0, r4
 800753a:	f000 fb36 	bl	8007baa <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	3301      	adds	r3, #1
 8007542:	6839      	ldr	r1, [r7, #0]
 8007544:	4618      	mov	r0, r3
 8007546:	f000 fb43 	bl	8007bd0 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama16Nokia5510DisplayEELb1EEC1ERKS2_>
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	68ba      	ldr	r2, [r7, #8]
 800754e:	605a      	str	r2, [r3, #4]
	{ }
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	4618      	mov	r0, r3
 8007554:	3714      	adds	r7, #20
 8007556:	46bd      	mov	sp, r7
 8007558:	bd90      	pop	{r4, r7, pc}

0800755a <_ZNSt16allocator_traitsISaIN4tama16Nokia5510DisplayEEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 800755a:	b580      	push	{r7, lr}
 800755c:	b082      	sub	sp, #8
 800755e:	af00      	add	r7, sp, #0
 8007560:	6078      	str	r0, [r7, #4]
 8007562:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 8007564:	6839      	ldr	r1, [r7, #0]
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f000 fb40 	bl	8007bec <_ZN9__gnu_cxx13new_allocatorIN4tama16Nokia5510DisplayEE7destroyIS2_EEvPT_>
 800756c:	bf00      	nop
 800756e:	3708      	adds	r7, #8
 8007570:	46bd      	mov	sp, r7
 8007572:	bd80      	pop	{r7, pc}

08007574 <_ZN9__gnu_cxx13new_allocatorIN4tama18Stm32TextureLoaderEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8007574:	b580      	push	{r7, lr}
 8007576:	b084      	sub	sp, #16
 8007578:	af00      	add	r7, sp, #0
 800757a:	60f8      	str	r0, [r7, #12]
 800757c:	60b9      	str	r1, [r7, #8]
 800757e:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8007580:	68f8      	ldr	r0, [r7, #12]
 8007582:	f000 fb3e 	bl	8007c02 <_ZNK9__gnu_cxx13new_allocatorIN4tama18Stm32TextureLoaderEE8max_sizeEv>
 8007586:	4602      	mov	r2, r0
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	4293      	cmp	r3, r2
 800758c:	bf8c      	ite	hi
 800758e:	2301      	movhi	r3, #1
 8007590:	2300      	movls	r3, #0
 8007592:	b2db      	uxtb	r3, r3
 8007594:	2b00      	cmp	r3, #0
 8007596:	d001      	beq.n	800759c <_ZN9__gnu_cxx13new_allocatorIN4tama18Stm32TextureLoaderEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8007598:	f008 ff73 	bl	8010482 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	009b      	lsls	r3, r3, #2
 80075a0:	4618      	mov	r0, r3
 80075a2:	f008 ff40 	bl	8010426 <_Znwj>
 80075a6:	4603      	mov	r3, r0
      }
 80075a8:	4618      	mov	r0, r3
 80075aa:	3710      	adds	r7, #16
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bd80      	pop	{r7, pc}

080075b0 <_ZSt11__addressofISaIN4tama18Stm32TextureLoaderEEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80075b0:	b480      	push	{r7}
 80075b2:	b083      	sub	sp, #12
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	4618      	mov	r0, r3
 80075bc:	370c      	adds	r7, #12
 80075be:	46bd      	mov	sp, r7
 80075c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c4:	4770      	bx	lr

080075c6 <_ZN9__gnu_cxx13new_allocatorIN4tama18Stm32TextureLoaderEE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 80075c6:	b580      	push	{r7, lr}
 80075c8:	b084      	sub	sp, #16
 80075ca:	af00      	add	r7, sp, #0
 80075cc:	60f8      	str	r0, [r7, #12]
 80075ce:	60b9      	str	r1, [r7, #8]
 80075d0:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 80075d2:	68b8      	ldr	r0, [r7, #8]
 80075d4:	f008 ff40 	bl	8010458 <_ZdlPv>
      }
 80075d8:	bf00      	nop
 80075da:	3710      	adds	r7, #16
 80075dc:	46bd      	mov	sp, r7
 80075de:	bd80      	pop	{r7, pc}

080075e0 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80075e0:	b480      	push	{r7}
 80075e2:	b083      	sub	sp, #12
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	4618      	mov	r0, r3
 80075ec:	370c      	adds	r7, #12
 80075ee:	46bd      	mov	sp, r7
 80075f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f4:	4770      	bx	lr

080075f6 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80075f6:	b480      	push	{r7}
 80075f8:	b083      	sub	sp, #12
 80075fa:	af00      	add	r7, sp, #0
 80075fc:	6078      	str	r0, [r7, #4]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	4618      	mov	r0, r3
 8007602:	370c      	adds	r7, #12
 8007604:	46bd      	mov	sp, r7
 8007606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760a:	4770      	bx	lr

0800760c <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>:
      allocate(allocator_type& __a, size_type __n)
 800760c:	b580      	push	{r7, lr}
 800760e:	b082      	sub	sp, #8
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
 8007614:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8007616:	2200      	movs	r2, #0
 8007618:	6839      	ldr	r1, [r7, #0]
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f000 fafd 	bl	8007c1a <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>
 8007620:	4603      	mov	r3, r0
 8007622:	4618      	mov	r0, r3
 8007624:	3708      	adds	r7, #8
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}

0800762a <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 800762a:	b580      	push	{r7, lr}
 800762c:	b084      	sub	sp, #16
 800762e:	af00      	add	r7, sp, #0
 8007630:	60f8      	str	r0, [r7, #12]
 8007632:	60b9      	str	r1, [r7, #8]
 8007634:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 8007636:	68b8      	ldr	r0, [r7, #8]
 8007638:	f000 fb10 	bl	8007c5c <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>
 800763c:	4602      	mov	r2, r0
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	601a      	str	r2, [r3, #0]
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	687a      	ldr	r2, [r7, #4]
 8007646:	605a      	str	r2, [r3, #4]
      { }
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	4618      	mov	r0, r3
 800764c:	3710      	adds	r7, #16
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}

08007652 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8007652:	b580      	push	{r7, lr}
 8007654:	b084      	sub	sp, #16
 8007656:	af00      	add	r7, sp, #0
 8007658:	60f8      	str	r0, [r7, #12]
 800765a:	60b9      	str	r1, [r7, #8]
 800765c:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800765e:	687a      	ldr	r2, [r7, #4]
 8007660:	68b9      	ldr	r1, [r7, #8]
 8007662:	68f8      	ldr	r0, [r7, #12]
 8007664:	f000 fb05 	bl	8007c72 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>
 8007668:	bf00      	nop
 800766a:	3710      	adds	r7, #16
 800766c:	46bd      	mov	sp, r7
 800766e:	bd80      	pop	{r7, pc}

08007670 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 8007670:	b480      	push	{r7}
 8007672:	b083      	sub	sp, #12
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	4618      	mov	r0, r3
 800767c:	370c      	adds	r7, #12
 800767e:	46bd      	mov	sp, r7
 8007680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007684:	4770      	bx	lr

08007686 <_ZNSt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 8007686:	b590      	push	{r4, r7, lr}
 8007688:	b085      	sub	sp, #20
 800768a:	af00      	add	r7, sp, #0
 800768c:	60f8      	str	r0, [r7, #12]
 800768e:	60b9      	str	r1, [r7, #8]
 8007690:	607a      	str	r2, [r7, #4]
 8007692:	603b      	str	r3, [r7, #0]
	: _M_ptr(__p), _Del_base(std::move(__d)), _Alloc_base(__a)
 8007694:	68fc      	ldr	r4, [r7, #12]
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f7fe fce3 	bl	8006062 <_ZSt4moveIRNSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 800769c:	4603      	mov	r3, r0
 800769e:	4619      	mov	r1, r3
 80076a0:	4620      	mov	r0, r4
 80076a2:	f000 faf3 	bl	8007c8c <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	3301      	adds	r3, #1
 80076aa:	6839      	ldr	r1, [r7, #0]
 80076ac:	4618      	mov	r0, r3
 80076ae:	f000 fb00 	bl	8007cb2 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama18Stm32TextureLoaderEELb1EEC1ERKS2_>
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	68ba      	ldr	r2, [r7, #8]
 80076b6:	605a      	str	r2, [r3, #4]
	{ }
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	4618      	mov	r0, r3
 80076bc:	3714      	adds	r7, #20
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd90      	pop	{r4, r7, pc}

080076c2 <_ZNSt16allocator_traitsISaIN4tama18Stm32TextureLoaderEEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 80076c2:	b580      	push	{r7, lr}
 80076c4:	b082      	sub	sp, #8
 80076c6:	af00      	add	r7, sp, #0
 80076c8:	6078      	str	r0, [r7, #4]
 80076ca:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 80076cc:	6839      	ldr	r1, [r7, #0]
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f000 fafd 	bl	8007cce <_ZN9__gnu_cxx13new_allocatorIN4tama18Stm32TextureLoaderEE7destroyIS2_EEvPT_>
 80076d4:	bf00      	nop
 80076d6:	3708      	adds	r7, #8
 80076d8:	46bd      	mov	sp, r7
 80076da:	bd80      	pop	{r7, pc}

080076dc <_ZN9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80076dc:	b580      	push	{r7, lr}
 80076de:	b084      	sub	sp, #16
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	60f8      	str	r0, [r7, #12]
 80076e4:	60b9      	str	r1, [r7, #8]
 80076e6:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 80076e8:	68f8      	ldr	r0, [r7, #12]
 80076ea:	f000 fafb 	bl	8007ce4 <_ZNK9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEE8max_sizeEv>
 80076ee:	4602      	mov	r2, r0
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	4293      	cmp	r3, r2
 80076f4:	bf8c      	ite	hi
 80076f6:	2301      	movhi	r3, #1
 80076f8:	2300      	movls	r3, #0
 80076fa:	b2db      	uxtb	r3, r3
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d001      	beq.n	8007704 <_ZN9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8007700:	f008 febf 	bl	8010482 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8007704:	68ba      	ldr	r2, [r7, #8]
 8007706:	4613      	mov	r3, r2
 8007708:	005b      	lsls	r3, r3, #1
 800770a:	4413      	add	r3, r2
 800770c:	00db      	lsls	r3, r3, #3
 800770e:	4618      	mov	r0, r3
 8007710:	f008 fe89 	bl	8010426 <_Znwj>
 8007714:	4603      	mov	r3, r0
      }
 8007716:	4618      	mov	r0, r3
 8007718:	3710      	adds	r7, #16
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}

0800771e <_ZSt11__addressofISaIN4tama27Nokia5110DisplayDataManagerEEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800771e:	b480      	push	{r7}
 8007720:	b083      	sub	sp, #12
 8007722:	af00      	add	r7, sp, #0
 8007724:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	4618      	mov	r0, r3
 800772a:	370c      	adds	r7, #12
 800772c:	46bd      	mov	sp, r7
 800772e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007732:	4770      	bx	lr

08007734 <_ZN9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 8007734:	b580      	push	{r7, lr}
 8007736:	b084      	sub	sp, #16
 8007738:	af00      	add	r7, sp, #0
 800773a:	60f8      	str	r0, [r7, #12]
 800773c:	60b9      	str	r1, [r7, #8]
 800773e:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8007740:	68b8      	ldr	r0, [r7, #8]
 8007742:	f008 fe89 	bl	8010458 <_ZdlPv>
      }
 8007746:	bf00      	nop
 8007748:	3710      	adds	r7, #16
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}

0800774e <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800774e:	b480      	push	{r7}
 8007750:	b083      	sub	sp, #12
 8007752:	af00      	add	r7, sp, #0
 8007754:	6078      	str	r0, [r7, #4]
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	4618      	mov	r0, r3
 800775a:	370c      	adds	r7, #12
 800775c:	46bd      	mov	sp, r7
 800775e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007762:	4770      	bx	lr

08007764 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8007764:	b480      	push	{r7}
 8007766:	b083      	sub	sp, #12
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	4618      	mov	r0, r3
 8007770:	370c      	adds	r7, #12
 8007772:	46bd      	mov	sp, r7
 8007774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007778:	4770      	bx	lr

0800777a <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>:
      allocate(allocator_type& __a, size_type __n)
 800777a:	b580      	push	{r7, lr}
 800777c:	b082      	sub	sp, #8
 800777e:	af00      	add	r7, sp, #0
 8007780:	6078      	str	r0, [r7, #4]
 8007782:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8007784:	2200      	movs	r2, #0
 8007786:	6839      	ldr	r1, [r7, #0]
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f000 fab9 	bl	8007d00 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>
 800778e:	4603      	mov	r3, r0
 8007790:	4618      	mov	r0, r3
 8007792:	3708      	adds	r7, #8
 8007794:	46bd      	mov	sp, r7
 8007796:	bd80      	pop	{r7, pc}

08007798 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 8007798:	b580      	push	{r7, lr}
 800779a:	b084      	sub	sp, #16
 800779c:	af00      	add	r7, sp, #0
 800779e:	60f8      	str	r0, [r7, #12]
 80077a0:	60b9      	str	r1, [r7, #8]
 80077a2:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 80077a4:	68b8      	ldr	r0, [r7, #8]
 80077a6:	f000 facc 	bl	8007d42 <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>
 80077aa:	4602      	mov	r2, r0
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	601a      	str	r2, [r3, #0]
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	687a      	ldr	r2, [r7, #4]
 80077b4:	605a      	str	r2, [r3, #4]
      { }
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	4618      	mov	r0, r3
 80077ba:	3710      	adds	r7, #16
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd80      	pop	{r7, pc}

080077c0 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b084      	sub	sp, #16
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	60f8      	str	r0, [r7, #12]
 80077c8:	60b9      	str	r1, [r7, #8]
 80077ca:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80077cc:	687a      	ldr	r2, [r7, #4]
 80077ce:	68b9      	ldr	r1, [r7, #8]
 80077d0:	68f8      	ldr	r0, [r7, #12]
 80077d2:	f000 fac1 	bl	8007d58 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>
 80077d6:	bf00      	nop
 80077d8:	3710      	adds	r7, #16
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}

080077de <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 80077de:	b480      	push	{r7}
 80077e0:	b083      	sub	sp, #12
 80077e2:	af00      	add	r7, sp, #0
 80077e4:	6078      	str	r0, [r7, #4]
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	4618      	mov	r0, r3
 80077ea:	370c      	adds	r7, #12
 80077ec:	46bd      	mov	sp, r7
 80077ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f2:	4770      	bx	lr

080077f4 <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 80077f4:	b590      	push	{r4, r7, lr}
 80077f6:	b085      	sub	sp, #20
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	60f8      	str	r0, [r7, #12]
 80077fc:	60b9      	str	r1, [r7, #8]
 80077fe:	607a      	str	r2, [r7, #4]
 8007800:	603b      	str	r3, [r7, #0]
	: _M_ptr(__p), _Del_base(std::move(__d)), _Alloc_base(__a)
 8007802:	68fc      	ldr	r4, [r7, #12]
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f7fe fd14 	bl	8006232 <_ZSt4moveIRNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 800780a:	4603      	mov	r3, r0
 800780c:	4619      	mov	r1, r3
 800780e:	4620      	mov	r0, r4
 8007810:	f000 faaf 	bl	8007d72 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	3301      	adds	r3, #1
 8007818:	6839      	ldr	r1, [r7, #0]
 800781a:	4618      	mov	r0, r3
 800781c:	f000 fabc 	bl	8007d98 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama27Nokia5110DisplayDataManagerEELb1EEC1ERKS2_>
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	68ba      	ldr	r2, [r7, #8]
 8007824:	605a      	str	r2, [r3, #4]
	{ }
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	4618      	mov	r0, r3
 800782a:	3714      	adds	r7, #20
 800782c:	46bd      	mov	sp, r7
 800782e:	bd90      	pop	{r4, r7, pc}

08007830 <_ZNSt16allocator_traitsISaIN4tama27Nokia5110DisplayDataManagerEEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 8007830:	b580      	push	{r7, lr}
 8007832:	b082      	sub	sp, #8
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
 8007838:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 800783a:	6839      	ldr	r1, [r7, #0]
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f000 fab9 	bl	8007db4 <_ZN9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEE7destroyIS2_EEvPT_>
 8007842:	bf00      	nop
 8007844:	3708      	adds	r7, #8
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}

0800784a <_ZN9__gnu_cxx13new_allocatorIN4tama6SpriteEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800784a:	b580      	push	{r7, lr}
 800784c:	b084      	sub	sp, #16
 800784e:	af00      	add	r7, sp, #0
 8007850:	60f8      	str	r0, [r7, #12]
 8007852:	60b9      	str	r1, [r7, #8]
 8007854:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8007856:	68f8      	ldr	r0, [r7, #12]
 8007858:	f000 fab7 	bl	8007dca <_ZNK9__gnu_cxx13new_allocatorIN4tama6SpriteEE8max_sizeEv>
 800785c:	4602      	mov	r2, r0
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	4293      	cmp	r3, r2
 8007862:	bf8c      	ite	hi
 8007864:	2301      	movhi	r3, #1
 8007866:	2300      	movls	r3, #0
 8007868:	b2db      	uxtb	r3, r3
 800786a:	2b00      	cmp	r3, #0
 800786c:	d001      	beq.n	8007872 <_ZN9__gnu_cxx13new_allocatorIN4tama6SpriteEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800786e:	f008 fe08 	bl	8010482 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	015b      	lsls	r3, r3, #5
 8007876:	4618      	mov	r0, r3
 8007878:	f008 fdd5 	bl	8010426 <_Znwj>
 800787c:	4603      	mov	r3, r0
      }
 800787e:	4618      	mov	r0, r3
 8007880:	3710      	adds	r7, #16
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}

08007886 <_ZSt11__addressofISaIN4tama6SpriteEEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8007886:	b480      	push	{r7}
 8007888:	b083      	sub	sp, #12
 800788a:	af00      	add	r7, sp, #0
 800788c:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	4618      	mov	r0, r3
 8007892:	370c      	adds	r7, #12
 8007894:	46bd      	mov	sp, r7
 8007896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789a:	4770      	bx	lr

0800789c <_ZN9__gnu_cxx13new_allocatorIN4tama6SpriteEE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 800789c:	b580      	push	{r7, lr}
 800789e:	b084      	sub	sp, #16
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	60f8      	str	r0, [r7, #12]
 80078a4:	60b9      	str	r1, [r7, #8]
 80078a6:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 80078a8:	68b8      	ldr	r0, [r7, #8]
 80078aa:	f008 fdd5 	bl	8010458 <_ZdlPv>
      }
 80078ae:	bf00      	nop
 80078b0:	3710      	adds	r7, #16
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}

080078b6 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80078b6:	b480      	push	{r7}
 80078b8:	b083      	sub	sp, #12
 80078ba:	af00      	add	r7, sp, #0
 80078bc:	6078      	str	r0, [r7, #4]
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	4618      	mov	r0, r3
 80078c2:	370c      	adds	r7, #12
 80078c4:	46bd      	mov	sp, r7
 80078c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ca:	4770      	bx	lr

080078cc <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80078cc:	b480      	push	{r7}
 80078ce:	b083      	sub	sp, #12
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	4618      	mov	r0, r3
 80078d8:	370c      	adds	r7, #12
 80078da:	46bd      	mov	sp, r7
 80078dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e0:	4770      	bx	lr

080078e2 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>:
      allocate(allocator_type& __a, size_type __n)
 80078e2:	b580      	push	{r7, lr}
 80078e4:	b082      	sub	sp, #8
 80078e6:	af00      	add	r7, sp, #0
 80078e8:	6078      	str	r0, [r7, #4]
 80078ea:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80078ec:	2200      	movs	r2, #0
 80078ee:	6839      	ldr	r1, [r7, #0]
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f000 fa76 	bl	8007de2 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>
 80078f6:	4603      	mov	r3, r0
 80078f8:	4618      	mov	r0, r3
 80078fa:	3708      	adds	r7, #8
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}

08007900 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 8007900:	b580      	push	{r7, lr}
 8007902:	b084      	sub	sp, #16
 8007904:	af00      	add	r7, sp, #0
 8007906:	60f8      	str	r0, [r7, #12]
 8007908:	60b9      	str	r1, [r7, #8]
 800790a:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 800790c:	68b8      	ldr	r0, [r7, #8]
 800790e:	f000 fa89 	bl	8007e24 <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>
 8007912:	4602      	mov	r2, r0
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	601a      	str	r2, [r3, #0]
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	687a      	ldr	r2, [r7, #4]
 800791c:	605a      	str	r2, [r3, #4]
      { }
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	4618      	mov	r0, r3
 8007922:	3710      	adds	r7, #16
 8007924:	46bd      	mov	sp, r7
 8007926:	bd80      	pop	{r7, pc}

08007928 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8007928:	b580      	push	{r7, lr}
 800792a:	b084      	sub	sp, #16
 800792c:	af00      	add	r7, sp, #0
 800792e:	60f8      	str	r0, [r7, #12]
 8007930:	60b9      	str	r1, [r7, #8]
 8007932:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8007934:	687a      	ldr	r2, [r7, #4]
 8007936:	68b9      	ldr	r1, [r7, #8]
 8007938:	68f8      	ldr	r0, [r7, #12]
 800793a:	f000 fa7e 	bl	8007e3a <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>
 800793e:	bf00      	nop
 8007940:	3710      	adds	r7, #16
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}

08007946 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 8007946:	b480      	push	{r7}
 8007948:	b083      	sub	sp, #12
 800794a:	af00      	add	r7, sp, #0
 800794c:	6078      	str	r0, [r7, #4]
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	4618      	mov	r0, r3
 8007952:	370c      	adds	r7, #12
 8007954:	46bd      	mov	sp, r7
 8007956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795a:	4770      	bx	lr

0800795c <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 800795c:	b590      	push	{r4, r7, lr}
 800795e:	b085      	sub	sp, #20
 8007960:	af00      	add	r7, sp, #0
 8007962:	60f8      	str	r0, [r7, #12]
 8007964:	60b9      	str	r1, [r7, #8]
 8007966:	607a      	str	r2, [r7, #4]
 8007968:	603b      	str	r3, [r7, #0]
	: _M_ptr(__p), _Del_base(std::move(__d)), _Alloc_base(__a)
 800796a:	68fc      	ldr	r4, [r7, #12]
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f7fe fd60 	bl	8006432 <_ZSt4moveIRNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 8007972:	4603      	mov	r3, r0
 8007974:	4619      	mov	r1, r3
 8007976:	4620      	mov	r0, r4
 8007978:	f000 fa6c 	bl	8007e54 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	3301      	adds	r3, #1
 8007980:	6839      	ldr	r1, [r7, #0]
 8007982:	4618      	mov	r0, r3
 8007984:	f000 fa79 	bl	8007e7a <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama6SpriteEELb1EEC1ERKS2_>
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	68ba      	ldr	r2, [r7, #8]
 800798c:	605a      	str	r2, [r3, #4]
	{ }
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	4618      	mov	r0, r3
 8007992:	3714      	adds	r7, #20
 8007994:	46bd      	mov	sp, r7
 8007996:	bd90      	pop	{r4, r7, pc}

08007998 <_ZNSt16allocator_traitsISaIN4tama6SpriteEEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 8007998:	b580      	push	{r7, lr}
 800799a:	b082      	sub	sp, #8
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
 80079a0:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 80079a2:	6839      	ldr	r1, [r7, #0]
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f000 fa8f 	bl	8007ec8 <_ZN9__gnu_cxx13new_allocatorIN4tama6SpriteEE7destroyIS2_EEvPT_>
 80079aa:	bf00      	nop
 80079ac:	3708      	adds	r7, #8
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}

080079b2 <_ZN9__gnu_cxx13new_allocatorIN4tama4TextEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80079b2:	b580      	push	{r7, lr}
 80079b4:	b084      	sub	sp, #16
 80079b6:	af00      	add	r7, sp, #0
 80079b8:	60f8      	str	r0, [r7, #12]
 80079ba:	60b9      	str	r1, [r7, #8]
 80079bc:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 80079be:	68f8      	ldr	r0, [r7, #12]
 80079c0:	f000 fa8e 	bl	8007ee0 <_ZNK9__gnu_cxx13new_allocatorIN4tama4TextEE8max_sizeEv>
 80079c4:	4602      	mov	r2, r0
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	4293      	cmp	r3, r2
 80079ca:	bf8c      	ite	hi
 80079cc:	2301      	movhi	r3, #1
 80079ce:	2300      	movls	r3, #0
 80079d0:	b2db      	uxtb	r3, r3
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d001      	beq.n	80079da <_ZN9__gnu_cxx13new_allocatorIN4tama4TextEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80079d6:	f008 fd54 	bl	8010482 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	019b      	lsls	r3, r3, #6
 80079de:	4618      	mov	r0, r3
 80079e0:	f008 fd21 	bl	8010426 <_Znwj>
 80079e4:	4603      	mov	r3, r0
      }
 80079e6:	4618      	mov	r0, r3
 80079e8:	3710      	adds	r7, #16
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd80      	pop	{r7, pc}

080079ee <_ZSt11__addressofISaIN4tama4TextEEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80079ee:	b480      	push	{r7}
 80079f0:	b083      	sub	sp, #12
 80079f2:	af00      	add	r7, sp, #0
 80079f4:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	4618      	mov	r0, r3
 80079fa:	370c      	adds	r7, #12
 80079fc:	46bd      	mov	sp, r7
 80079fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a02:	4770      	bx	lr

08007a04 <_ZN9__gnu_cxx13new_allocatorIN4tama4TextEE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b084      	sub	sp, #16
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	60f8      	str	r0, [r7, #12]
 8007a0c:	60b9      	str	r1, [r7, #8]
 8007a0e:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8007a10:	68b8      	ldr	r0, [r7, #8]
 8007a12:	f008 fd21 	bl	8010458 <_ZdlPv>
      }
 8007a16:	bf00      	nop
 8007a18:	3710      	adds	r7, #16
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}

08007a1e <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8007a1e:	b480      	push	{r7}
 8007a20:	b083      	sub	sp, #12
 8007a22:	af00      	add	r7, sp, #0
 8007a24:	6078      	str	r0, [r7, #4]
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	4618      	mov	r0, r3
 8007a2a:	370c      	adds	r7, #12
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a32:	4770      	bx	lr

08007a34 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8007a34:	b480      	push	{r7}
 8007a36:	b083      	sub	sp, #12
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	4618      	mov	r0, r3
 8007a40:	370c      	adds	r7, #12
 8007a42:	46bd      	mov	sp, r7
 8007a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a48:	4770      	bx	lr

08007a4a <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE8allocateERSC_j>:
      allocate(allocator_type& __a, size_type __n)
 8007a4a:	b580      	push	{r7, lr}
 8007a4c:	b082      	sub	sp, #8
 8007a4e:	af00      	add	r7, sp, #0
 8007a50:	6078      	str	r0, [r7, #4]
 8007a52:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8007a54:	2200      	movs	r2, #0
 8007a56:	6839      	ldr	r1, [r7, #0]
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f000 fa4d 	bl	8007ef8 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	4618      	mov	r0, r3
 8007a62:	3708      	adds	r7, #8
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bd80      	pop	{r7, pc}

08007a68 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b084      	sub	sp, #16
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	60f8      	str	r0, [r7, #12]
 8007a70:	60b9      	str	r1, [r7, #8]
 8007a72:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 8007a74:	68b8      	ldr	r0, [r7, #8]
 8007a76:	f000 fa60 	bl	8007f3a <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>
 8007a7a:	4602      	mov	r2, r0
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	601a      	str	r2, [r3, #0]
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	687a      	ldr	r2, [r7, #4]
 8007a84:	605a      	str	r2, [r3, #4]
      { }
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	4618      	mov	r0, r3
 8007a8a:	3710      	adds	r7, #16
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}

08007a90 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10deallocateERSC_PSB_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b084      	sub	sp, #16
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	60f8      	str	r0, [r7, #12]
 8007a98:	60b9      	str	r1, [r7, #8]
 8007a9a:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8007a9c:	687a      	ldr	r2, [r7, #4]
 8007a9e:	68b9      	ldr	r1, [r7, #8]
 8007aa0:	68f8      	ldr	r0, [r7, #12]
 8007aa2:	f000 fa55 	bl	8007f50 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>
 8007aa6:	bf00      	nop
 8007aa8:	3710      	adds	r7, #16
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	bd80      	pop	{r7, pc}

08007aae <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEE10_S_raw_ptrEPSB_>:
      static value_type* _S_raw_ptr(value_type* __ptr) { return __ptr; }
 8007aae:	b480      	push	{r7}
 8007ab0:	b083      	sub	sp, #12
 8007ab2:	af00      	add	r7, sp, #0
 8007ab4:	6078      	str	r0, [r7, #4]
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	4618      	mov	r0, r3
 8007aba:	370c      	adds	r7, #12
 8007abc:	46bd      	mov	sp, r7
 8007abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac2:	4770      	bx	lr

08007ac4 <_ZNSt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplC1ES2_S9_RKS8_>:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 8007ac4:	b590      	push	{r4, r7, lr}
 8007ac6:	b085      	sub	sp, #20
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	60f8      	str	r0, [r7, #12]
 8007acc:	60b9      	str	r1, [r7, #8]
 8007ace:	607a      	str	r2, [r7, #4]
 8007ad0:	603b      	str	r3, [r7, #0]
	: _M_ptr(__p), _Del_base(std::move(__d)), _Alloc_base(__a)
 8007ad2:	68fc      	ldr	r4, [r7, #12]
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f7fe fd9a 	bl	800660e <_ZSt4moveIRNSt12__shared_ptrIN4tama4TextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 8007ada:	4603      	mov	r3, r0
 8007adc:	4619      	mov	r1, r3
 8007ade:	4620      	mov	r0, r4
 8007ae0:	f000 fa43 	bl	8007f6a <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama4TextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	3301      	adds	r3, #1
 8007ae8:	6839      	ldr	r1, [r7, #0]
 8007aea:	4618      	mov	r0, r3
 8007aec:	f000 fa50 	bl	8007f90 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama4TextEELb1EEC1ERKS2_>
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	68ba      	ldr	r2, [r7, #8]
 8007af4:	605a      	str	r2, [r3, #4]
	{ }
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	4618      	mov	r0, r3
 8007afa:	3714      	adds	r7, #20
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bd90      	pop	{r4, r7, pc}

08007b00 <_ZNSt16allocator_traitsISaIN4tama4TextEEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b082      	sub	sp, #8
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
 8007b08:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 8007b0a:	6839      	ldr	r1, [r7, #0]
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f000 fa6f 	bl	8007ff0 <_ZN9__gnu_cxx13new_allocatorIN4tama4TextEE7destroyIS2_EEvPT_>
 8007b12:	bf00      	nop
 8007b14:	3708      	adds	r7, #8
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}
	...

08007b1c <_ZNK9__gnu_cxx13new_allocatorIN4tama16Nokia5510DisplayEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8007b1c:	b480      	push	{r7}
 8007b1e:	b083      	sub	sp, #12
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8007b24:	4b03      	ldr	r3, [pc, #12]	; (8007b34 <_ZNK9__gnu_cxx13new_allocatorIN4tama16Nokia5510DisplayEE8max_sizeEv+0x18>)
 8007b26:	4618      	mov	r0, r3
 8007b28:	370c      	adds	r7, #12
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b30:	4770      	bx	lr
 8007b32:	bf00      	nop
 8007b34:	05555555 	.word	0x05555555

08007b38 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b084      	sub	sp, #16
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	60f8      	str	r0, [r7, #12]
 8007b40:	60b9      	str	r1, [r7, #8]
 8007b42:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8007b44:	68f8      	ldr	r0, [r7, #12]
 8007b46:	f000 fa5f 	bl	8008008 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>
 8007b4a:	4602      	mov	r2, r0
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	bf8c      	ite	hi
 8007b52:	2301      	movhi	r3, #1
 8007b54:	2300      	movls	r3, #0
 8007b56:	b2db      	uxtb	r3, r3
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d001      	beq.n	8007b60 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8007b5c:	f008 fc91 	bl	8010482 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8007b60:	68ba      	ldr	r2, [r7, #8]
 8007b62:	4613      	mov	r3, r2
 8007b64:	009b      	lsls	r3, r3, #2
 8007b66:	4413      	add	r3, r2
 8007b68:	009b      	lsls	r3, r3, #2
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	f008 fc5b 	bl	8010426 <_Znwj>
 8007b70:	4603      	mov	r3, r0
      }
 8007b72:	4618      	mov	r0, r3
 8007b74:	3710      	adds	r7, #16
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}

08007b7a <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8007b7a:	b480      	push	{r7}
 8007b7c:	b083      	sub	sp, #12
 8007b7e:	af00      	add	r7, sp, #0
 8007b80:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	4618      	mov	r0, r3
 8007b86:	370c      	adds	r7, #12
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8e:	4770      	bx	lr

08007b90 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>:
      deallocate(pointer __p, size_type)
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b084      	sub	sp, #16
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	60f8      	str	r0, [r7, #12]
 8007b98:	60b9      	str	r1, [r7, #8]
 8007b9a:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8007b9c:	68b8      	ldr	r0, [r7, #8]
 8007b9e:	f008 fc5b 	bl	8010458 <_ZdlPv>
      }
 8007ba2:	bf00      	nop
 8007ba4:	3710      	adds	r7, #16
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}

08007baa <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>:
      explicit _Sp_ebo_helper(_Tp&& __tp) : _M_tp(std::move(__tp)) { }
 8007baa:	b590      	push	{r4, r7, lr}
 8007bac:	b083      	sub	sp, #12
 8007bae:	af00      	add	r7, sp, #0
 8007bb0:	6078      	str	r0, [r7, #4]
 8007bb2:	6039      	str	r1, [r7, #0]
 8007bb4:	687c      	ldr	r4, [r7, #4]
 8007bb6:	6838      	ldr	r0, [r7, #0]
 8007bb8:	f7fe f96b 	bl	8005e92 <_ZSt4moveIRNSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	4619      	mov	r1, r3
 8007bc0:	4620      	mov	r0, r4
 8007bc2:	f7fe f971 	bl	8005ea8 <_ZNSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	4618      	mov	r0, r3
 8007bca:	370c      	adds	r7, #12
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd90      	pop	{r4, r7, pc}

08007bd0 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama16Nokia5510DisplayEELb1EEC1ERKS2_>:
      explicit _Sp_ebo_helper(const _Tp& __tp) : _Tp(__tp) { }
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b082      	sub	sp, #8
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
 8007bd8:	6039      	str	r1, [r7, #0]
 8007bda:	6839      	ldr	r1, [r7, #0]
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f7fe f8f2 	bl	8005dc6 <_ZNSaIN4tama16Nokia5510DisplayEEC1ERKS1_>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	4618      	mov	r0, r3
 8007be6:	3708      	adds	r7, #8
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bd80      	pop	{r7, pc}

08007bec <_ZN9__gnu_cxx13new_allocatorIN4tama16Nokia5510DisplayEE7destroyIS2_EEvPT_>:
	destroy(_Up* __p) { __p->~_Up(); }
 8007bec:	b480      	push	{r7}
 8007bee:	b083      	sub	sp, #12
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
 8007bf4:	6039      	str	r1, [r7, #0]
 8007bf6:	bf00      	nop
 8007bf8:	370c      	adds	r7, #12
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c00:	4770      	bx	lr

08007c02 <_ZNK9__gnu_cxx13new_allocatorIN4tama18Stm32TextureLoaderEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8007c02:	b480      	push	{r7}
 8007c04:	b083      	sub	sp, #12
 8007c06:	af00      	add	r7, sp, #0
 8007c08:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8007c0a:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8007c0e:	4618      	mov	r0, r3
 8007c10:	370c      	adds	r7, #12
 8007c12:	46bd      	mov	sp, r7
 8007c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c18:	4770      	bx	lr

08007c1a <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8007c1a:	b580      	push	{r7, lr}
 8007c1c:	b084      	sub	sp, #16
 8007c1e:	af00      	add	r7, sp, #0
 8007c20:	60f8      	str	r0, [r7, #12]
 8007c22:	60b9      	str	r1, [r7, #8]
 8007c24:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8007c26:	68f8      	ldr	r0, [r7, #12]
 8007c28:	f000 f9fc 	bl	8008024 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>
 8007c2c:	4602      	mov	r2, r0
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	4293      	cmp	r3, r2
 8007c32:	bf8c      	ite	hi
 8007c34:	2301      	movhi	r3, #1
 8007c36:	2300      	movls	r3, #0
 8007c38:	b2db      	uxtb	r3, r3
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d001      	beq.n	8007c42 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8007c3e:	f008 fc20 	bl	8010482 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8007c42:	68ba      	ldr	r2, [r7, #8]
 8007c44:	4613      	mov	r3, r2
 8007c46:	009b      	lsls	r3, r3, #2
 8007c48:	4413      	add	r3, r2
 8007c4a:	009b      	lsls	r3, r3, #2
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	f008 fbea 	bl	8010426 <_Znwj>
 8007c52:	4603      	mov	r3, r0
      }
 8007c54:	4618      	mov	r0, r3
 8007c56:	3710      	adds	r7, #16
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}

08007c5c <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8007c5c:	b480      	push	{r7}
 8007c5e:	b083      	sub	sp, #12
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	4618      	mov	r0, r3
 8007c68:	370c      	adds	r7, #12
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c70:	4770      	bx	lr

08007c72 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>:
      deallocate(pointer __p, size_type)
 8007c72:	b580      	push	{r7, lr}
 8007c74:	b084      	sub	sp, #16
 8007c76:	af00      	add	r7, sp, #0
 8007c78:	60f8      	str	r0, [r7, #12]
 8007c7a:	60b9      	str	r1, [r7, #8]
 8007c7c:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8007c7e:	68b8      	ldr	r0, [r7, #8]
 8007c80:	f008 fbea 	bl	8010458 <_ZdlPv>
      }
 8007c84:	bf00      	nop
 8007c86:	3710      	adds	r7, #16
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}

08007c8c <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>:
      explicit _Sp_ebo_helper(_Tp&& __tp) : _M_tp(std::move(__tp)) { }
 8007c8c:	b590      	push	{r4, r7, lr}
 8007c8e:	b083      	sub	sp, #12
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
 8007c94:	6039      	str	r1, [r7, #0]
 8007c96:	687c      	ldr	r4, [r7, #4]
 8007c98:	6838      	ldr	r0, [r7, #0]
 8007c9a:	f7fe f9e2 	bl	8006062 <_ZSt4moveIRNSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	4619      	mov	r1, r3
 8007ca2:	4620      	mov	r0, r4
 8007ca4:	f7fe f9e8 	bl	8006078 <_ZNSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	4618      	mov	r0, r3
 8007cac:	370c      	adds	r7, #12
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd90      	pop	{r4, r7, pc}

08007cb2 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama18Stm32TextureLoaderEELb1EEC1ERKS2_>:
      explicit _Sp_ebo_helper(const _Tp& __tp) : _Tp(__tp) { }
 8007cb2:	b580      	push	{r7, lr}
 8007cb4:	b082      	sub	sp, #8
 8007cb6:	af00      	add	r7, sp, #0
 8007cb8:	6078      	str	r0, [r7, #4]
 8007cba:	6039      	str	r1, [r7, #0]
 8007cbc:	6839      	ldr	r1, [r7, #0]
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f7fe f96f 	bl	8005fa2 <_ZNSaIN4tama18Stm32TextureLoaderEEC1ERKS1_>
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	3708      	adds	r7, #8
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}

08007cce <_ZN9__gnu_cxx13new_allocatorIN4tama18Stm32TextureLoaderEE7destroyIS2_EEvPT_>:
	destroy(_Up* __p) { __p->~_Up(); }
 8007cce:	b480      	push	{r7}
 8007cd0:	b083      	sub	sp, #12
 8007cd2:	af00      	add	r7, sp, #0
 8007cd4:	6078      	str	r0, [r7, #4]
 8007cd6:	6039      	str	r1, [r7, #0]
 8007cd8:	bf00      	nop
 8007cda:	370c      	adds	r7, #12
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce2:	4770      	bx	lr

08007ce4 <_ZNK9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8007ce4:	b480      	push	{r7}
 8007ce6:	b083      	sub	sp, #12
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8007cec:	4b03      	ldr	r3, [pc, #12]	; (8007cfc <_ZNK9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEE8max_sizeEv+0x18>)
 8007cee:	4618      	mov	r0, r3
 8007cf0:	370c      	adds	r7, #12
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf8:	4770      	bx	lr
 8007cfa:	bf00      	nop
 8007cfc:	0aaaaaaa 	.word	0x0aaaaaaa

08007d00 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b084      	sub	sp, #16
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	60f8      	str	r0, [r7, #12]
 8007d08:	60b9      	str	r1, [r7, #8]
 8007d0a:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8007d0c:	68f8      	ldr	r0, [r7, #12]
 8007d0e:	f000 f997 	bl	8008040 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>
 8007d12:	4602      	mov	r2, r0
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	4293      	cmp	r3, r2
 8007d18:	bf8c      	ite	hi
 8007d1a:	2301      	movhi	r3, #1
 8007d1c:	2300      	movls	r3, #0
 8007d1e:	b2db      	uxtb	r3, r3
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d001      	beq.n	8007d28 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8007d24:	f008 fbad 	bl	8010482 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8007d28:	68ba      	ldr	r2, [r7, #8]
 8007d2a:	4613      	mov	r3, r2
 8007d2c:	009b      	lsls	r3, r3, #2
 8007d2e:	4413      	add	r3, r2
 8007d30:	009b      	lsls	r3, r3, #2
 8007d32:	4618      	mov	r0, r3
 8007d34:	f008 fb77 	bl	8010426 <_Znwj>
 8007d38:	4603      	mov	r3, r0
      }
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	3710      	adds	r7, #16
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}

08007d42 <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8007d42:	b480      	push	{r7}
 8007d44:	b083      	sub	sp, #12
 8007d46:	af00      	add	r7, sp, #0
 8007d48:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	370c      	adds	r7, #12
 8007d50:	46bd      	mov	sp, r7
 8007d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d56:	4770      	bx	lr

08007d58 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>:
      deallocate(pointer __p, size_type)
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b084      	sub	sp, #16
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	60f8      	str	r0, [r7, #12]
 8007d60:	60b9      	str	r1, [r7, #8]
 8007d62:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8007d64:	68b8      	ldr	r0, [r7, #8]
 8007d66:	f008 fb77 	bl	8010458 <_ZdlPv>
      }
 8007d6a:	bf00      	nop
 8007d6c:	3710      	adds	r7, #16
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}

08007d72 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>:
      explicit _Sp_ebo_helper(_Tp&& __tp) : _M_tp(std::move(__tp)) { }
 8007d72:	b590      	push	{r4, r7, lr}
 8007d74:	b083      	sub	sp, #12
 8007d76:	af00      	add	r7, sp, #0
 8007d78:	6078      	str	r0, [r7, #4]
 8007d7a:	6039      	str	r1, [r7, #0]
 8007d7c:	687c      	ldr	r4, [r7, #4]
 8007d7e:	6838      	ldr	r0, [r7, #0]
 8007d80:	f7fe fa57 	bl	8006232 <_ZSt4moveIRNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 8007d84:	4603      	mov	r3, r0
 8007d86:	4619      	mov	r1, r3
 8007d88:	4620      	mov	r0, r4
 8007d8a:	f7fe fa5d 	bl	8006248 <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	4618      	mov	r0, r3
 8007d92:	370c      	adds	r7, #12
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bd90      	pop	{r4, r7, pc}

08007d98 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama27Nokia5110DisplayDataManagerEELb1EEC1ERKS2_>:
      explicit _Sp_ebo_helper(const _Tp& __tp) : _Tp(__tp) { }
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b082      	sub	sp, #8
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
 8007da0:	6039      	str	r1, [r7, #0]
 8007da2:	6839      	ldr	r1, [r7, #0]
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f7fe f9e4 	bl	8006172 <_ZNSaIN4tama27Nokia5110DisplayDataManagerEEC1ERKS1_>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	4618      	mov	r0, r3
 8007dae:	3708      	adds	r7, #8
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}

08007db4 <_ZN9__gnu_cxx13new_allocatorIN4tama27Nokia5110DisplayDataManagerEE7destroyIS2_EEvPT_>:
	destroy(_Up* __p) { __p->~_Up(); }
 8007db4:	b480      	push	{r7}
 8007db6:	b083      	sub	sp, #12
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
 8007dbc:	6039      	str	r1, [r7, #0]
 8007dbe:	bf00      	nop
 8007dc0:	370c      	adds	r7, #12
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc8:	4770      	bx	lr

08007dca <_ZNK9__gnu_cxx13new_allocatorIN4tama6SpriteEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8007dca:	b480      	push	{r7}
 8007dcc:	b083      	sub	sp, #12
 8007dce:	af00      	add	r7, sp, #0
 8007dd0:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8007dd2:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	370c      	adds	r7, #12
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de0:	4770      	bx	lr

08007de2 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8007de2:	b580      	push	{r7, lr}
 8007de4:	b084      	sub	sp, #16
 8007de6:	af00      	add	r7, sp, #0
 8007de8:	60f8      	str	r0, [r7, #12]
 8007dea:	60b9      	str	r1, [r7, #8]
 8007dec:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8007dee:	68f8      	ldr	r0, [r7, #12]
 8007df0:	f000 f934 	bl	800805c <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>
 8007df4:	4602      	mov	r2, r0
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	bf8c      	ite	hi
 8007dfc:	2301      	movhi	r3, #1
 8007dfe:	2300      	movls	r3, #0
 8007e00:	b2db      	uxtb	r3, r3
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d001      	beq.n	8007e0a <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8007e06:	f008 fb3c 	bl	8010482 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8007e0a:	68ba      	ldr	r2, [r7, #8]
 8007e0c:	4613      	mov	r3, r2
 8007e0e:	009b      	lsls	r3, r3, #2
 8007e10:	4413      	add	r3, r2
 8007e12:	009b      	lsls	r3, r3, #2
 8007e14:	4618      	mov	r0, r3
 8007e16:	f008 fb06 	bl	8010426 <_Znwj>
 8007e1a:	4603      	mov	r3, r0
      }
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	3710      	adds	r7, #16
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd80      	pop	{r7, pc}

08007e24 <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8007e24:	b480      	push	{r7}
 8007e26:	b083      	sub	sp, #12
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	4618      	mov	r0, r3
 8007e30:	370c      	adds	r7, #12
 8007e32:	46bd      	mov	sp, r7
 8007e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e38:	4770      	bx	lr

08007e3a <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>:
      deallocate(pointer __p, size_type)
 8007e3a:	b580      	push	{r7, lr}
 8007e3c:	b084      	sub	sp, #16
 8007e3e:	af00      	add	r7, sp, #0
 8007e40:	60f8      	str	r0, [r7, #12]
 8007e42:	60b9      	str	r1, [r7, #8]
 8007e44:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8007e46:	68b8      	ldr	r0, [r7, #8]
 8007e48:	f008 fb06 	bl	8010458 <_ZdlPv>
      }
 8007e4c:	bf00      	nop
 8007e4e:	3710      	adds	r7, #16
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}

08007e54 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>:
      explicit _Sp_ebo_helper(_Tp&& __tp) : _M_tp(std::move(__tp)) { }
 8007e54:	b590      	push	{r4, r7, lr}
 8007e56:	b083      	sub	sp, #12
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
 8007e5c:	6039      	str	r1, [r7, #0]
 8007e5e:	687c      	ldr	r4, [r7, #4]
 8007e60:	6838      	ldr	r0, [r7, #0]
 8007e62:	f7fe fae6 	bl	8006432 <_ZSt4moveIRNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 8007e66:	4603      	mov	r3, r0
 8007e68:	4619      	mov	r1, r3
 8007e6a:	4620      	mov	r0, r4
 8007e6c:	f7fe faec 	bl	8006448 <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	4618      	mov	r0, r3
 8007e74:	370c      	adds	r7, #12
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bd90      	pop	{r4, r7, pc}

08007e7a <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama6SpriteEELb1EEC1ERKS2_>:
      explicit _Sp_ebo_helper(const _Tp& __tp) : _Tp(__tp) { }
 8007e7a:	b580      	push	{r7, lr}
 8007e7c:	b082      	sub	sp, #8
 8007e7e:	af00      	add	r7, sp, #0
 8007e80:	6078      	str	r0, [r7, #4]
 8007e82:	6039      	str	r1, [r7, #0]
 8007e84:	6839      	ldr	r1, [r7, #0]
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f7fe fa68 	bl	800635c <_ZNSaIN4tama6SpriteEEC1ERKS1_>
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	4618      	mov	r0, r3
 8007e90:	3708      	adds	r7, #8
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bd80      	pop	{r7, pc}
	...

08007e98 <_ZN4tama6SpriteD1Ev>:
#include <memory>
#include "../Drawable.h"

namespace tama
{
    class Sprite : public Drawable
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b082      	sub	sp, #8
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
 8007ea0:	4a08      	ldr	r2, [pc, #32]	; (8007ec4 <_ZN4tama6SpriteD1Ev+0x2c>)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	601a      	str	r2, [r3, #0]
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	3318      	adds	r3, #24
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f7f8 fce4 	bl	8000878 <_ZNSt10shared_ptrIN4tama14ChangeObserverEED1Ev>
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	3304      	adds	r3, #4
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	f7f8 ffe4 	bl	8000e82 <_ZNSt10shared_ptrIN4tama7TextureEED1Ev>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	3708      	adds	r7, #8
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}
 8007ec4:	08010b18 	.word	0x08010b18

08007ec8 <_ZN9__gnu_cxx13new_allocatorIN4tama6SpriteEE7destroyIS2_EEvPT_>:
	destroy(_Up* __p) { __p->~_Up(); }
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b082      	sub	sp, #8
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
 8007ed0:	6039      	str	r1, [r7, #0]
 8007ed2:	6838      	ldr	r0, [r7, #0]
 8007ed4:	f7ff ffe0 	bl	8007e98 <_ZN4tama6SpriteD1Ev>
 8007ed8:	bf00      	nop
 8007eda:	3708      	adds	r7, #8
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd80      	pop	{r7, pc}

08007ee0 <_ZNK9__gnu_cxx13new_allocatorIN4tama4TextEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8007ee0:	b480      	push	{r7}
 8007ee2:	b083      	sub	sp, #12
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8007ee8:	f06f 437c 	mvn.w	r3, #4227858432	; 0xfc000000
 8007eec:	4618      	mov	r0, r3
 8007eee:	370c      	adds	r7, #12
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef6:	4770      	bx	lr

08007ef8 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b084      	sub	sp, #16
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	60f8      	str	r0, [r7, #12]
 8007f00:	60b9      	str	r1, [r7, #8]
 8007f02:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8007f04:	68f8      	ldr	r0, [r7, #12]
 8007f06:	f000 f8b7 	bl	8008078 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>
 8007f0a:	4602      	mov	r2, r0
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	bf8c      	ite	hi
 8007f12:	2301      	movhi	r3, #1
 8007f14:	2300      	movls	r3, #0
 8007f16:	b2db      	uxtb	r3, r3
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d001      	beq.n	8007f20 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8007f1c:	f008 fab1 	bl	8010482 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8007f20:	68ba      	ldr	r2, [r7, #8]
 8007f22:	4613      	mov	r3, r2
 8007f24:	009b      	lsls	r3, r3, #2
 8007f26:	4413      	add	r3, r2
 8007f28:	009b      	lsls	r3, r3, #2
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f008 fa7b 	bl	8010426 <_Znwj>
 8007f30:	4603      	mov	r3, r0
      }
 8007f32:	4618      	mov	r0, r3
 8007f34:	3710      	adds	r7, #16
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}

08007f3a <_ZSt11__addressofISaISt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEPT_RSD_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8007f3a:	b480      	push	{r7}
 8007f3c:	b083      	sub	sp, #12
 8007f3e:	af00      	add	r7, sp, #0
 8007f40:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	4618      	mov	r0, r3
 8007f46:	370c      	adds	r7, #12
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4e:	4770      	bx	lr

08007f50 <_ZN9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE10deallocateEPSB_j>:
      deallocate(pointer __p, size_type)
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b084      	sub	sp, #16
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	60f8      	str	r0, [r7, #12]
 8007f58:	60b9      	str	r1, [r7, #8]
 8007f5a:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8007f5c:	68b8      	ldr	r0, [r7, #8]
 8007f5e:	f008 fa7b 	bl	8010458 <_ZdlPv>
      }
 8007f62:	bf00      	nop
 8007f64:	3710      	adds	r7, #16
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}

08007f6a <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama4TextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EEC1EOS8_>:
      explicit _Sp_ebo_helper(_Tp&& __tp) : _M_tp(std::move(__tp)) { }
 8007f6a:	b590      	push	{r4, r7, lr}
 8007f6c:	b083      	sub	sp, #12
 8007f6e:	af00      	add	r7, sp, #0
 8007f70:	6078      	str	r0, [r7, #4]
 8007f72:	6039      	str	r1, [r7, #0]
 8007f74:	687c      	ldr	r4, [r7, #4]
 8007f76:	6838      	ldr	r0, [r7, #0]
 8007f78:	f7fe fb49 	bl	800660e <_ZSt4moveIRNSt12__shared_ptrIN4tama4TextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEEEONSt16remove_referenceIT_E4typeEOSB_>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	4619      	mov	r1, r3
 8007f80:	4620      	mov	r0, r4
 8007f82:	f7fe fb4f 	bl	8006624 <_ZNSt12__shared_ptrIN4tama4TextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEC1EOS7_>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	4618      	mov	r0, r3
 8007f8a:	370c      	adds	r7, #12
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd90      	pop	{r4, r7, pc}

08007f90 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama4TextEELb1EEC1ERKS2_>:
      explicit _Sp_ebo_helper(const _Tp& __tp) : _Tp(__tp) { }
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b082      	sub	sp, #8
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
 8007f98:	6039      	str	r1, [r7, #0]
 8007f9a:	6839      	ldr	r1, [r7, #0]
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f7fe fad0 	bl	8006542 <_ZNSaIN4tama4TextEEC1ERKS1_>
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	3708      	adds	r7, #8
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bd80      	pop	{r7, pc}

08007fac <_ZN4tama4TextD1Ev>:
#include "../Drawable.h"
#include "../texture-loader/TextureLoader.h"

namespace tama
{
    class Text : public Drawable
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b082      	sub	sp, #8
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
 8007fb4:	4a0d      	ldr	r2, [pc, #52]	; (8007fec <_ZN4tama4TextD1Ev+0x40>)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	601a      	str	r2, [r3, #0]
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	3328      	adds	r3, #40	; 0x28
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	f7f8 ff5f 	bl	8000e82 <_ZNSt10shared_ptrIN4tama7TextureEED1Ev>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	3310      	adds	r3, #16
 8007fc8:	4618      	mov	r0, r3
 8007fca:	f008 fb28 	bl	801061e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	3308      	adds	r3, #8
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f7f8 fc50 	bl	8000878 <_ZNSt10shared_ptrIN4tama14ChangeObserverEED1Ev>
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	3304      	adds	r3, #4
 8007fdc:	4618      	mov	r0, r3
 8007fde:	f000 f859 	bl	8008094 <_ZNSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EED1Ev>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	3708      	adds	r7, #8
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}
 8007fec:	08011618 	.word	0x08011618

08007ff0 <_ZN9__gnu_cxx13new_allocatorIN4tama4TextEE7destroyIS2_EEvPT_>:
	destroy(_Up* __p) { __p->~_Up(); }
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b082      	sub	sp, #8
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
 8007ff8:	6039      	str	r1, [r7, #0]
 8007ffa:	6838      	ldr	r0, [r7, #0]
 8007ffc:	f7ff ffd6 	bl	8007fac <_ZN4tama4TextD1Ev>
 8008000:	bf00      	nop
 8008002:	3708      	adds	r7, #8
 8008004:	46bd      	mov	sp, r7
 8008006:	bd80      	pop	{r7, pc}

08008008 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8008008:	b480      	push	{r7}
 800800a:	b083      	sub	sp, #12
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8008010:	4b03      	ldr	r3, [pc, #12]	; (8008020 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv+0x18>)
 8008012:	4618      	mov	r0, r3
 8008014:	370c      	adds	r7, #12
 8008016:	46bd      	mov	sp, r7
 8008018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801c:	4770      	bx	lr
 800801e:	bf00      	nop
 8008020:	0ccccccc 	.word	0x0ccccccc

08008024 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8008024:	b480      	push	{r7}
 8008026:	b083      	sub	sp, #12
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 800802c:	4b03      	ldr	r3, [pc, #12]	; (800803c <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv+0x18>)
 800802e:	4618      	mov	r0, r3
 8008030:	370c      	adds	r7, #12
 8008032:	46bd      	mov	sp, r7
 8008034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008038:	4770      	bx	lr
 800803a:	bf00      	nop
 800803c:	0ccccccc 	.word	0x0ccccccc

08008040 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8008040:	b480      	push	{r7}
 8008042:	b083      	sub	sp, #12
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8008048:	4b03      	ldr	r3, [pc, #12]	; (8008058 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv+0x18>)
 800804a:	4618      	mov	r0, r3
 800804c:	370c      	adds	r7, #12
 800804e:	46bd      	mov	sp, r7
 8008050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008054:	4770      	bx	lr
 8008056:	bf00      	nop
 8008058:	0ccccccc 	.word	0x0ccccccc

0800805c <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800805c:	b480      	push	{r7}
 800805e:	b083      	sub	sp, #12
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8008064:	4b03      	ldr	r3, [pc, #12]	; (8008074 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv+0x18>)
 8008066:	4618      	mov	r0, r3
 8008068:	370c      	adds	r7, #12
 800806a:	46bd      	mov	sp, r7
 800806c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008070:	4770      	bx	lr
 8008072:	bf00      	nop
 8008074:	0ccccccc 	.word	0x0ccccccc

08008078 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8008078:	b480      	push	{r7}
 800807a:	b083      	sub	sp, #12
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8008080:	4b03      	ldr	r3, [pc, #12]	; (8008090 <_ZNK9__gnu_cxx13new_allocatorISt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS3_LNS_12_Lock_policyE0EE8_DeleterISaIS3_EEES9_LS6_0EEE8max_sizeEv+0x18>)
 8008082:	4618      	mov	r0, r3
 8008084:	370c      	adds	r7, #12
 8008086:	46bd      	mov	sp, r7
 8008088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808c:	4770      	bx	lr
 800808e:	bf00      	nop
 8008090:	0ccccccc 	.word	0x0ccccccc

08008094 <_ZNSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EED1Ev>:
      ~unique_ptr() noexcept
 8008094:	b580      	push	{r7, lr}
 8008096:	b084      	sub	sp, #16
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	4618      	mov	r0, r3
 80080a0:	f7f9 fca2 	bl	80019e8 <_ZNSt15__uniq_ptr_implIN4tama13TextureLoaderESt14default_deleteIS1_EE6_M_ptrEv>
 80080a4:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d009      	beq.n	80080c2 <_ZNSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EED1Ev+0x2e>
	  get_deleter()(__ptr);
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f7f9 fca7 	bl	8001a02 <_ZNSt10unique_ptrIN4tama13TextureLoaderESt14default_deleteIS1_EE11get_deleterEv>
 80080b4:	4602      	mov	r2, r0
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	4619      	mov	r1, r3
 80080bc:	4610      	mov	r0, r2
 80080be:	f7f9 fcad 	bl	8001a1c <_ZNKSt14default_deleteIN4tama13TextureLoaderEEclEPS1_>
	__ptr = pointer();
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	2200      	movs	r2, #0
 80080c6:	601a      	str	r2, [r3, #0]
      }
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	4618      	mov	r0, r3
 80080cc:	3710      	adds	r7, #16
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}
	...

080080d4 <_ZNSt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:
      ~_Sp_counted_deleter() noexcept { }
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b082      	sub	sp, #8
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
 80080dc:	4a08      	ldr	r2, [pc, #32]	; (8008100 <_ZNSt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev+0x2c>)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	601a      	str	r2, [r3, #0]
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	330c      	adds	r3, #12
 80080e6:	4618      	mov	r0, r3
 80080e8:	f7ff f91e 	bl	8007328 <_ZNSt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	4618      	mov	r0, r3
 80080f0:	f7f9 fbd4 	bl	800189c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	4618      	mov	r0, r3
 80080f8:	3708      	adds	r7, #8
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bd80      	pop	{r7, pc}
 80080fe:	bf00      	nop
 8008100:	08011980 	.word	0x08011980

08008104 <_ZNSt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
 8008104:	b580      	push	{r7, lr}
 8008106:	b082      	sub	sp, #8
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f7ff ffe1 	bl	80080d4 <_ZNSt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
 8008112:	2114      	movs	r1, #20
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f008 f984 	bl	8010422 <_ZdlPvj>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	4618      	mov	r0, r3
 800811e:	3708      	adds	r7, #8
 8008120:	46bd      	mov	sp, r7
 8008122:	bd80      	pop	{r7, pc}

08008124 <_ZNSt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      _M_dispose() noexcept
 8008124:	b580      	push	{r7, lr}
 8008126:	b082      	sub	sp, #8
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
      { _M_impl._M_del()(_M_impl._M_ptr); }
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	330c      	adds	r3, #12
 8008130:	4618      	mov	r0, r3
 8008132:	f000 fa08 	bl	8008546 <_ZNSt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>
 8008136:	4602      	mov	r2, r0
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	691b      	ldr	r3, [r3, #16]
 800813c:	4619      	mov	r1, r3
 800813e:	4610      	mov	r0, r2
 8008140:	f7ff f941 	bl	80073c6 <_ZNSt12__shared_ptrIN4tama4TextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>
 8008144:	bf00      	nop
 8008146:	3708      	adds	r7, #8
 8008148:	46bd      	mov	sp, r7
 800814a:	bd80      	pop	{r7, pc}

0800814c <_ZNSt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      _M_destroy() noexcept
 800814c:	b580      	push	{r7, lr}
 800814e:	b086      	sub	sp, #24
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	330c      	adds	r3, #12
 8008158:	4618      	mov	r0, r3
 800815a:	f000 fa01 	bl	8008560 <_ZNSt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>
 800815e:	4602      	mov	r2, r0
 8008160:	f107 0314 	add.w	r3, r7, #20
 8008164:	4611      	mov	r1, r2
 8008166:	4618      	mov	r0, r3
 8008168:	f7ff f876 	bl	8007258 <_ZNSaISt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 800816c:	f107 0114 	add.w	r1, r7, #20
 8008170:	f107 030c 	add.w	r3, r7, #12
 8008174:	687a      	ldr	r2, [r7, #4]
 8008176:	4618      	mov	r0, r3
 8008178:	f7ff fc76 	bl	8007a68 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
	this->~_Sp_counted_deleter();
 800817c:	6878      	ldr	r0, [r7, #4]
 800817e:	f7ff ffa9 	bl	80080d4 <_ZNSt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 8008182:	f107 030c 	add.w	r3, r7, #12
 8008186:	4618      	mov	r0, r3
 8008188:	f7ff f892 	bl	80072b0 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	__allocator_type __a(_M_impl._M_alloc());
 800818c:	f107 0314 	add.w	r3, r7, #20
 8008190:	4618      	mov	r0, r3
 8008192:	f7ff f86e 	bl	8007272 <_ZNSaISt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
      }
 8008196:	bf00      	nop
 8008198:	3718      	adds	r7, #24
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}

0800819e <_ZNSt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept
 800819e:	b480      	push	{r7}
 80081a0:	b083      	sub	sp, #12
 80081a2:	af00      	add	r7, sp, #0
 80081a4:	6078      	str	r0, [r7, #4]
 80081a6:	6039      	str	r1, [r7, #0]
        return nullptr;
 80081a8:	2300      	movs	r3, #0
      }
 80081aa:	4618      	mov	r0, r3
 80081ac:	370c      	adds	r7, #12
 80081ae:	46bd      	mov	sp, r7
 80081b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b4:	4770      	bx	lr
	...

080081b8 <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:
      ~_Sp_counted_deleter() noexcept { }
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b082      	sub	sp, #8
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
 80081c0:	4a08      	ldr	r2, [pc, #32]	; (80081e4 <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev+0x2c>)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	601a      	str	r2, [r3, #0]
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	330c      	adds	r3, #12
 80081ca:	4618      	mov	r0, r3
 80081cc:	f7fe ff72 	bl	80070b4 <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	4618      	mov	r0, r3
 80081d4:	f7f9 fb62 	bl	800189c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	4618      	mov	r0, r3
 80081dc:	3708      	adds	r7, #8
 80081de:	46bd      	mov	sp, r7
 80081e0:	bd80      	pop	{r7, pc}
 80081e2:	bf00      	nop
 80081e4:	0801199c 	.word	0x0801199c

080081e8 <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b082      	sub	sp, #8
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	f7ff ffe1 	bl	80081b8 <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
 80081f6:	2114      	movs	r1, #20
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	f008 f912 	bl	8010422 <_ZdlPvj>
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	4618      	mov	r0, r3
 8008202:	3708      	adds	r7, #8
 8008204:	46bd      	mov	sp, r7
 8008206:	bd80      	pop	{r7, pc}

08008208 <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      _M_dispose() noexcept
 8008208:	b580      	push	{r7, lr}
 800820a:	b082      	sub	sp, #8
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
      { _M_impl._M_del()(_M_impl._M_ptr); }
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	330c      	adds	r3, #12
 8008214:	4618      	mov	r0, r3
 8008216:	f000 f9b1 	bl	800857c <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>
 800821a:	4602      	mov	r2, r0
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	691b      	ldr	r3, [r3, #16]
 8008220:	4619      	mov	r1, r3
 8008222:	4610      	mov	r0, r2
 8008224:	f7fe ff95 	bl	8007152 <_ZNSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>
 8008228:	bf00      	nop
 800822a:	3708      	adds	r7, #8
 800822c:	46bd      	mov	sp, r7
 800822e:	bd80      	pop	{r7, pc}

08008230 <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8008230:	b580      	push	{r7, lr}
 8008232:	b086      	sub	sp, #24
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	330c      	adds	r3, #12
 800823c:	4618      	mov	r0, r3
 800823e:	f000 f9aa 	bl	8008596 <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>
 8008242:	4602      	mov	r2, r0
 8008244:	f107 0314 	add.w	r3, r7, #20
 8008248:	4611      	mov	r1, r2
 800824a:	4618      	mov	r0, r3
 800824c:	f7fe feca 	bl	8006fe4 <_ZNSaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 8008250:	f107 0114 	add.w	r1, r7, #20
 8008254:	f107 030c 	add.w	r3, r7, #12
 8008258:	687a      	ldr	r2, [r7, #4]
 800825a:	4618      	mov	r0, r3
 800825c:	f7ff fb50 	bl	8007900 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
	this->~_Sp_counted_deleter();
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	f7ff ffa9 	bl	80081b8 <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 8008266:	f107 030c 	add.w	r3, r7, #12
 800826a:	4618      	mov	r0, r3
 800826c:	f7fe fee6 	bl	800703c <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	__allocator_type __a(_M_impl._M_alloc());
 8008270:	f107 0314 	add.w	r3, r7, #20
 8008274:	4618      	mov	r0, r3
 8008276:	f7fe fec2 	bl	8006ffe <_ZNSaISt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
      }
 800827a:	bf00      	nop
 800827c:	3718      	adds	r7, #24
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}

08008282 <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept
 8008282:	b480      	push	{r7}
 8008284:	b083      	sub	sp, #12
 8008286:	af00      	add	r7, sp, #0
 8008288:	6078      	str	r0, [r7, #4]
 800828a:	6039      	str	r1, [r7, #0]
        return nullptr;
 800828c:	2300      	movs	r3, #0
      }
 800828e:	4618      	mov	r0, r3
 8008290:	370c      	adds	r7, #12
 8008292:	46bd      	mov	sp, r7
 8008294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008298:	4770      	bx	lr
	...

0800829c <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:
      ~_Sp_counted_deleter() noexcept { }
 800829c:	b580      	push	{r7, lr}
 800829e:	b082      	sub	sp, #8
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
 80082a4:	4a08      	ldr	r2, [pc, #32]	; (80082c8 <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev+0x2c>)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	601a      	str	r2, [r3, #0]
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	330c      	adds	r3, #12
 80082ae:	4618      	mov	r0, r3
 80082b0:	f7fe fdac 	bl	8006e0c <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	4618      	mov	r0, r3
 80082b8:	f7f9 faf0 	bl	800189c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	4618      	mov	r0, r3
 80082c0:	3708      	adds	r7, #8
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}
 80082c6:	bf00      	nop
 80082c8:	080119b8 	.word	0x080119b8

080082cc <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b082      	sub	sp, #8
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f7ff ffe1 	bl	800829c <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
 80082da:	2114      	movs	r1, #20
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	f008 f8a0 	bl	8010422 <_ZdlPvj>
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	4618      	mov	r0, r3
 80082e6:	3708      	adds	r7, #8
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}

080082ec <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      _M_dispose() noexcept
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b082      	sub	sp, #8
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
      { _M_impl._M_del()(_M_impl._M_ptr); }
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	330c      	adds	r3, #12
 80082f8:	4618      	mov	r0, r3
 80082fa:	f000 f95a 	bl	80085b2 <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>
 80082fe:	4602      	mov	r2, r0
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	691b      	ldr	r3, [r3, #16]
 8008304:	4619      	mov	r1, r3
 8008306:	4610      	mov	r0, r2
 8008308:	f7fe fdcf 	bl	8006eaa <_ZNSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>
 800830c:	bf00      	nop
 800830e:	3708      	adds	r7, #8
 8008310:	46bd      	mov	sp, r7
 8008312:	bd80      	pop	{r7, pc}

08008314 <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8008314:	b580      	push	{r7, lr}
 8008316:	b086      	sub	sp, #24
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	330c      	adds	r3, #12
 8008320:	4618      	mov	r0, r3
 8008322:	f000 f953 	bl	80085cc <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>
 8008326:	4602      	mov	r2, r0
 8008328:	f107 0314 	add.w	r3, r7, #20
 800832c:	4611      	mov	r1, r2
 800832e:	4618      	mov	r0, r3
 8008330:	f7fe fd04 	bl	8006d3c <_ZNSaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 8008334:	f107 0114 	add.w	r1, r7, #20
 8008338:	f107 030c 	add.w	r3, r7, #12
 800833c:	687a      	ldr	r2, [r7, #4]
 800833e:	4618      	mov	r0, r3
 8008340:	f7ff fa2a 	bl	8007798 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
	this->~_Sp_counted_deleter();
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f7ff ffa9 	bl	800829c <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 800834a:	f107 030c 	add.w	r3, r7, #12
 800834e:	4618      	mov	r0, r3
 8008350:	f7fe fd20 	bl	8006d94 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	__allocator_type __a(_M_impl._M_alloc());
 8008354:	f107 0314 	add.w	r3, r7, #20
 8008358:	4618      	mov	r0, r3
 800835a:	f7fe fcfc 	bl	8006d56 <_ZNSaISt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
      }
 800835e:	bf00      	nop
 8008360:	3718      	adds	r7, #24
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}

08008366 <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept
 8008366:	b480      	push	{r7}
 8008368:	b083      	sub	sp, #12
 800836a:	af00      	add	r7, sp, #0
 800836c:	6078      	str	r0, [r7, #4]
 800836e:	6039      	str	r1, [r7, #0]
        return nullptr;
 8008370:	2300      	movs	r3, #0
      }
 8008372:	4618      	mov	r0, r3
 8008374:	370c      	adds	r7, #12
 8008376:	46bd      	mov	sp, r7
 8008378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837c:	4770      	bx	lr
	...

08008380 <_ZNSt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:
      ~_Sp_counted_deleter() noexcept { }
 8008380:	b580      	push	{r7, lr}
 8008382:	b082      	sub	sp, #8
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
 8008388:	4a08      	ldr	r2, [pc, #32]	; (80083ac <_ZNSt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev+0x2c>)
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	601a      	str	r2, [r3, #0]
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	330c      	adds	r3, #12
 8008392:	4618      	mov	r0, r3
 8008394:	f7fe fbc4 	bl	8006b20 <_ZNSt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	4618      	mov	r0, r3
 800839c:	f7f9 fa7e 	bl	800189c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	4618      	mov	r0, r3
 80083a4:	3708      	adds	r7, #8
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}
 80083aa:	bf00      	nop
 80083ac:	080119d4 	.word	0x080119d4

080083b0 <_ZNSt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b082      	sub	sp, #8
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
 80083b8:	6878      	ldr	r0, [r7, #4]
 80083ba:	f7ff ffe1 	bl	8008380 <_ZNSt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
 80083be:	2114      	movs	r1, #20
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f008 f82e 	bl	8010422 <_ZdlPvj>
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	4618      	mov	r0, r3
 80083ca:	3708      	adds	r7, #8
 80083cc:	46bd      	mov	sp, r7
 80083ce:	bd80      	pop	{r7, pc}

080083d0 <_ZNSt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      _M_dispose() noexcept
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b082      	sub	sp, #8
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
      { _M_impl._M_del()(_M_impl._M_ptr); }
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	330c      	adds	r3, #12
 80083dc:	4618      	mov	r0, r3
 80083de:	f000 f903 	bl	80085e8 <_ZNSt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>
 80083e2:	4602      	mov	r2, r0
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	691b      	ldr	r3, [r3, #16]
 80083e8:	4619      	mov	r1, r3
 80083ea:	4610      	mov	r0, r2
 80083ec:	f7fe fbe7 	bl	8006bbe <_ZNSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>
 80083f0:	bf00      	nop
 80083f2:	3708      	adds	r7, #8
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}

080083f8 <_ZNSt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      _M_destroy() noexcept
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b086      	sub	sp, #24
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	330c      	adds	r3, #12
 8008404:	4618      	mov	r0, r3
 8008406:	f000 f8fc 	bl	8008602 <_ZNSt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>
 800840a:	4602      	mov	r2, r0
 800840c:	f107 0314 	add.w	r3, r7, #20
 8008410:	4611      	mov	r1, r2
 8008412:	4618      	mov	r0, r3
 8008414:	f7fe fb1c 	bl	8006a50 <_ZNSaISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 8008418:	f107 0114 	add.w	r1, r7, #20
 800841c:	f107 030c 	add.w	r3, r7, #12
 8008420:	687a      	ldr	r2, [r7, #4]
 8008422:	4618      	mov	r0, r3
 8008424:	f7ff f901 	bl	800762a <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
	this->~_Sp_counted_deleter();
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f7ff ffa9 	bl	8008380 <_ZNSt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 800842e:	f107 030c 	add.w	r3, r7, #12
 8008432:	4618      	mov	r0, r3
 8008434:	f7fe fb38 	bl	8006aa8 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	__allocator_type __a(_M_impl._M_alloc());
 8008438:	f107 0314 	add.w	r3, r7, #20
 800843c:	4618      	mov	r0, r3
 800843e:	f7fe fb14 	bl	8006a6a <_ZNSaISt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
      }
 8008442:	bf00      	nop
 8008444:	3718      	adds	r7, #24
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}

0800844a <_ZNSt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept
 800844a:	b480      	push	{r7}
 800844c:	b083      	sub	sp, #12
 800844e:	af00      	add	r7, sp, #0
 8008450:	6078      	str	r0, [r7, #4]
 8008452:	6039      	str	r1, [r7, #0]
        return nullptr;
 8008454:	2300      	movs	r3, #0
      }
 8008456:	4618      	mov	r0, r3
 8008458:	370c      	adds	r7, #12
 800845a:	46bd      	mov	sp, r7
 800845c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008460:	4770      	bx	lr
	...

08008464 <_ZNSt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:
      ~_Sp_counted_deleter() noexcept { }
 8008464:	b580      	push	{r7, lr}
 8008466:	b082      	sub	sp, #8
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
 800846c:	4a08      	ldr	r2, [pc, #32]	; (8008490 <_ZNSt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev+0x2c>)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	601a      	str	r2, [r3, #0]
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	330c      	adds	r3, #12
 8008476:	4618      	mov	r0, r3
 8008478:	f7fe fa1c 	bl	80068b4 <_ZNSt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_ImplD1Ev>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	4618      	mov	r0, r3
 8008480:	f7f9 fa0c 	bl	800189c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	4618      	mov	r0, r3
 8008488:	3708      	adds	r7, #8
 800848a:	46bd      	mov	sp, r7
 800848c:	bd80      	pop	{r7, pc}
 800848e:	bf00      	nop
 8008490:	080119f0 	.word	0x080119f0

08008494 <_ZNSt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
 8008494:	b580      	push	{r7, lr}
 8008496:	b082      	sub	sp, #8
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f7ff ffe1 	bl	8008464 <_ZNSt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
 80084a2:	2114      	movs	r1, #20
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f007 ffbc 	bl	8010422 <_ZdlPvj>
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	4618      	mov	r0, r3
 80084ae:	3708      	adds	r7, #8
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}

080084b4 <_ZNSt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      _M_dispose() noexcept
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b082      	sub	sp, #8
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
      { _M_impl._M_del()(_M_impl._M_ptr); }
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	330c      	adds	r3, #12
 80084c0:	4618      	mov	r0, r3
 80084c2:	f000 f8ac 	bl	800861e <_ZNSt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>
 80084c6:	4602      	mov	r2, r0
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	691b      	ldr	r3, [r3, #16]
 80084cc:	4619      	mov	r1, r3
 80084ce:	4610      	mov	r0, r2
 80084d0:	f7fe fa3f 	bl	8006952 <_ZNSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEclEPS1_>
 80084d4:	bf00      	nop
 80084d6:	3708      	adds	r7, #8
 80084d8:	46bd      	mov	sp, r7
 80084da:	bd80      	pop	{r7, pc}

080084dc <_ZNSt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      _M_destroy() noexcept
 80084dc:	b580      	push	{r7, lr}
 80084de:	b086      	sub	sp, #24
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	330c      	adds	r3, #12
 80084e8:	4618      	mov	r0, r3
 80084ea:	f000 f8a5 	bl	8008638 <_ZNSt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>
 80084ee:	4602      	mov	r2, r0
 80084f0:	f107 0314 	add.w	r3, r7, #20
 80084f4:	4611      	mov	r1, r2
 80084f6:	4618      	mov	r0, r3
 80084f8:	f7fe f974 	bl	80067e4 <_ZNSaISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEEC1IS1_EERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 80084fc:	f107 0114 	add.w	r1, r7, #20
 8008500:	f107 030c 	add.w	r3, r7, #12
 8008504:	687a      	ldr	r2, [r7, #4]
 8008506:	4618      	mov	r0, r3
 8008508:	f7fe ffdb 	bl	80074c2 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEEC1ERSC_PSB_>
	this->~_Sp_counted_deleter();
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f7ff ffa9 	bl	8008464 <_ZNSt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 8008512:	f107 030c 	add.w	r3, r7, #12
 8008516:	4618      	mov	r0, r3
 8008518:	f7fe f990 	bl	800683c <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS2_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEES9_LS6_0EEEED1Ev>
	__allocator_type __a(_M_impl._M_alloc());
 800851c:	f107 0314 	add.w	r3, r7, #20
 8008520:	4618      	mov	r0, r3
 8008522:	f7fe f96c 	bl	80067fe <_ZNSaISt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EEED1Ev>
      }
 8008526:	bf00      	nop
 8008528:	3718      	adds	r7, #24
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}

0800852e <_ZNSt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept
 800852e:	b480      	push	{r7}
 8008530:	b083      	sub	sp, #12
 8008532:	af00      	add	r7, sp, #0
 8008534:	6078      	str	r0, [r7, #4]
 8008536:	6039      	str	r1, [r7, #0]
        return nullptr;
 8008538:	2300      	movs	r3, #0
      }
 800853a:	4618      	mov	r0, r3
 800853c:	370c      	adds	r7, #12
 800853e:	46bd      	mov	sp, r7
 8008540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008544:	4770      	bx	lr

08008546 <_ZNSt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>:
	_Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }
 8008546:	b580      	push	{r7, lr}
 8008548:	b082      	sub	sp, #8
 800854a:	af00      	add	r7, sp, #0
 800854c:	6078      	str	r0, [r7, #4]
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	4618      	mov	r0, r3
 8008552:	f000 f87f 	bl	8008654 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama4TextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>
 8008556:	4603      	mov	r3, r0
 8008558:	4618      	mov	r0, r3
 800855a:	3708      	adds	r7, #8
 800855c:	46bd      	mov	sp, r7
 800855e:	bd80      	pop	{r7, pc}

08008560 <_ZNSt19_Sp_counted_deleterIPN4tama4TextENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }
 8008560:	b580      	push	{r7, lr}
 8008562:	b082      	sub	sp, #8
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	3301      	adds	r3, #1
 800856c:	4618      	mov	r0, r3
 800856e:	f000 f87c 	bl	800866a <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama4TextEELb1EE6_S_getERS3_>
 8008572:	4603      	mov	r3, r0
 8008574:	4618      	mov	r0, r3
 8008576:	3708      	adds	r7, #8
 8008578:	46bd      	mov	sp, r7
 800857a:	bd80      	pop	{r7, pc}

0800857c <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>:
	_Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }
 800857c:	b580      	push	{r7, lr}
 800857e:	b082      	sub	sp, #8
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	4618      	mov	r0, r3
 8008588:	f000 f87a 	bl	8008680 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>
 800858c:	4603      	mov	r3, r0
 800858e:	4618      	mov	r0, r3
 8008590:	3708      	adds	r7, #8
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}

08008596 <_ZNSt19_Sp_counted_deleterIPN4tama6SpriteENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }
 8008596:	b580      	push	{r7, lr}
 8008598:	b082      	sub	sp, #8
 800859a:	af00      	add	r7, sp, #0
 800859c:	6078      	str	r0, [r7, #4]
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	3301      	adds	r3, #1
 80085a2:	4618      	mov	r0, r3
 80085a4:	f000 f877 	bl	8008696 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama6SpriteEELb1EE6_S_getERS3_>
 80085a8:	4603      	mov	r3, r0
 80085aa:	4618      	mov	r0, r3
 80085ac:	3708      	adds	r7, #8
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bd80      	pop	{r7, pc}

080085b2 <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>:
	_Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }
 80085b2:	b580      	push	{r7, lr}
 80085b4:	b082      	sub	sp, #8
 80085b6:	af00      	add	r7, sp, #0
 80085b8:	6078      	str	r0, [r7, #4]
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	4618      	mov	r0, r3
 80085be:	f000 f875 	bl	80086ac <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>
 80085c2:	4603      	mov	r3, r0
 80085c4:	4618      	mov	r0, r3
 80085c6:	3708      	adds	r7, #8
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}

080085cc <_ZNSt19_Sp_counted_deleterIPN4tama27Nokia5110DisplayDataManagerENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b082      	sub	sp, #8
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	3301      	adds	r3, #1
 80085d8:	4618      	mov	r0, r3
 80085da:	f000 f872 	bl	80086c2 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama27Nokia5110DisplayDataManagerEELb1EE6_S_getERS3_>
 80085de:	4603      	mov	r3, r0
 80085e0:	4618      	mov	r0, r3
 80085e2:	3708      	adds	r7, #8
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bd80      	pop	{r7, pc}

080085e8 <_ZNSt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>:
	_Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b082      	sub	sp, #8
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	4618      	mov	r0, r3
 80085f4:	f000 f870 	bl	80086d8 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>
 80085f8:	4603      	mov	r3, r0
 80085fa:	4618      	mov	r0, r3
 80085fc:	3708      	adds	r7, #8
 80085fe:	46bd      	mov	sp, r7
 8008600:	bd80      	pop	{r7, pc}

08008602 <_ZNSt19_Sp_counted_deleterIPN4tama18Stm32TextureLoaderENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }
 8008602:	b580      	push	{r7, lr}
 8008604:	b082      	sub	sp, #8
 8008606:	af00      	add	r7, sp, #0
 8008608:	6078      	str	r0, [r7, #4]
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	3301      	adds	r3, #1
 800860e:	4618      	mov	r0, r3
 8008610:	f000 f86d 	bl	80086ee <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama18Stm32TextureLoaderEELb1EE6_S_getERS3_>
 8008614:	4603      	mov	r3, r0
 8008616:	4618      	mov	r0, r3
 8008618:	3708      	adds	r7, #8
 800861a:	46bd      	mov	sp, r7
 800861c:	bd80      	pop	{r7, pc}

0800861e <_ZNSt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl6_M_delEv>:
	_Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }
 800861e:	b580      	push	{r7, lr}
 8008620:	b082      	sub	sp, #8
 8008622:	af00      	add	r7, sp, #0
 8008624:	6078      	str	r0, [r7, #4]
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	4618      	mov	r0, r3
 800862a:	f000 f86b 	bl	8008704 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>
 800862e:	4603      	mov	r3, r0
 8008630:	4618      	mov	r0, r3
 8008632:	3708      	adds	r7, #8
 8008634:	46bd      	mov	sp, r7
 8008636:	bd80      	pop	{r7, pc}

08008638 <_ZNSt19_Sp_counted_deleterIPN4tama16Nokia5510DisplayENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }
 8008638:	b580      	push	{r7, lr}
 800863a:	b082      	sub	sp, #8
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	3301      	adds	r3, #1
 8008644:	4618      	mov	r0, r3
 8008646:	f000 f868 	bl	800871a <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama16Nokia5510DisplayEELb1EE6_S_getERS3_>
 800864a:	4603      	mov	r3, r0
 800864c:	4618      	mov	r0, r3
 800864e:	3708      	adds	r7, #8
 8008650:	46bd      	mov	sp, r7
 8008652:	bd80      	pop	{r7, pc}

08008654 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama4TextELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>:
      _S_get(_Sp_ebo_helper& __eboh)
 8008654:	b480      	push	{r7}
 8008656:	b083      	sub	sp, #12
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
      { return __eboh._M_tp; }
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	4618      	mov	r0, r3
 8008660:	370c      	adds	r7, #12
 8008662:	46bd      	mov	sp, r7
 8008664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008668:	4770      	bx	lr

0800866a <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama4TextEELb1EE6_S_getERS3_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 800866a:	b480      	push	{r7}
 800866c:	b083      	sub	sp, #12
 800866e:	af00      	add	r7, sp, #0
 8008670:	6078      	str	r0, [r7, #4]
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	4618      	mov	r0, r3
 8008676:	370c      	adds	r7, #12
 8008678:	46bd      	mov	sp, r7
 800867a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867e:	4770      	bx	lr

08008680 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama6SpriteELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>:
      _S_get(_Sp_ebo_helper& __eboh)
 8008680:	b480      	push	{r7}
 8008682:	b083      	sub	sp, #12
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
      { return __eboh._M_tp; }
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	4618      	mov	r0, r3
 800868c:	370c      	adds	r7, #12
 800868e:	46bd      	mov	sp, r7
 8008690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008694:	4770      	bx	lr

08008696 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama6SpriteEELb1EE6_S_getERS3_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 8008696:	b480      	push	{r7}
 8008698:	b083      	sub	sp, #12
 800869a:	af00      	add	r7, sp, #0
 800869c:	6078      	str	r0, [r7, #4]
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	4618      	mov	r0, r3
 80086a2:	370c      	adds	r7, #12
 80086a4:	46bd      	mov	sp, r7
 80086a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086aa:	4770      	bx	lr

080086ac <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama27Nokia5110DisplayDataManagerELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>:
      _S_get(_Sp_ebo_helper& __eboh)
 80086ac:	b480      	push	{r7}
 80086ae:	b083      	sub	sp, #12
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
      { return __eboh._M_tp; }
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	4618      	mov	r0, r3
 80086b8:	370c      	adds	r7, #12
 80086ba:	46bd      	mov	sp, r7
 80086bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c0:	4770      	bx	lr

080086c2 <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama27Nokia5110DisplayDataManagerEELb1EE6_S_getERS3_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 80086c2:	b480      	push	{r7}
 80086c4:	b083      	sub	sp, #12
 80086c6:	af00      	add	r7, sp, #0
 80086c8:	6078      	str	r0, [r7, #4]
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	4618      	mov	r0, r3
 80086ce:	370c      	adds	r7, #12
 80086d0:	46bd      	mov	sp, r7
 80086d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d6:	4770      	bx	lr

080086d8 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama18Stm32TextureLoaderELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>:
      _S_get(_Sp_ebo_helper& __eboh)
 80086d8:	b480      	push	{r7}
 80086da:	b083      	sub	sp, #12
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
      { return __eboh._M_tp; }
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	4618      	mov	r0, r3
 80086e4:	370c      	adds	r7, #12
 80086e6:	46bd      	mov	sp, r7
 80086e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ec:	4770      	bx	lr

080086ee <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama18Stm32TextureLoaderEELb1EE6_S_getERS3_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 80086ee:	b480      	push	{r7}
 80086f0:	b083      	sub	sp, #12
 80086f2:	af00      	add	r7, sp, #0
 80086f4:	6078      	str	r0, [r7, #4]
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	4618      	mov	r0, r3
 80086fa:	370c      	adds	r7, #12
 80086fc:	46bd      	mov	sp, r7
 80086fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008702:	4770      	bx	lr

08008704 <_ZNSt14_Sp_ebo_helperILi0ENSt12__shared_ptrIN4tama16Nokia5510DisplayELN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS2_EEELb0EE6_S_getERS9_>:
      _S_get(_Sp_ebo_helper& __eboh)
 8008704:	b480      	push	{r7}
 8008706:	b083      	sub	sp, #12
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
      { return __eboh._M_tp; }
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	4618      	mov	r0, r3
 8008710:	370c      	adds	r7, #12
 8008712:	46bd      	mov	sp, r7
 8008714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008718:	4770      	bx	lr

0800871a <_ZNSt14_Sp_ebo_helperILi1ESaIN4tama16Nokia5510DisplayEELb1EE6_S_getERS3_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 800871a:	b480      	push	{r7}
 800871c:	b083      	sub	sp, #12
 800871e:	af00      	add	r7, sp, #0
 8008720:	6078      	str	r0, [r7, #4]
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	4618      	mov	r0, r3
 8008726:	370c      	adds	r7, #12
 8008728:	46bd      	mov	sp, r7
 800872a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872e:	4770      	bx	lr

08008730 <_ZN4tama7DisplayC1Ev>:
#include "PixelColor.h"
#include "display-data/DisplayData.h"

namespace tama
{
    class Display
 8008730:	b480      	push	{r7}
 8008732:	b083      	sub	sp, #12
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
 8008738:	4a04      	ldr	r2, [pc, #16]	; (800874c <_ZN4tama7DisplayC1Ev+0x1c>)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	601a      	str	r2, [r3, #0]
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	4618      	mov	r0, r3
 8008742:	370c      	adds	r7, #12
 8008744:	46bd      	mov	sp, r7
 8008746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874a:	4770      	bx	lr
 800874c:	08011a28 	.word	0x08011a28

08008750 <_ZN4tama16Nokia5510DisplayC1ERNS_13DisplayConfigE>:
// Created by grzegorz on 3/25/21.
//

#include "Nokia5510Display.h"

tama::Nokia5510Display::Nokia5510Display(DisplayConfig & displayConfig)
 8008750:	b5b0      	push	{r4, r5, r7, lr}
 8008752:	b084      	sub	sp, #16
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
 8008758:	6039      	str	r1, [r7, #0]
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	4618      	mov	r0, r3
 800875e:	f7ff ffe7 	bl	8008730 <_ZN4tama7DisplayC1Ev>
 8008762:	4a32      	ldr	r2, [pc, #200]	; (800882c <_ZN4tama16Nokia5510DisplayC1ERNS_13DisplayConfigE+0xdc>)
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	601a      	str	r2, [r3, #0]
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2254      	movs	r2, #84	; 0x54
 800876c:	629a      	str	r2, [r3, #40]	; 0x28
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2230      	movs	r2, #48	; 0x30
 8008772:	62da      	str	r2, [r3, #44]	; 0x2c
{
    this->cfg = displayConfig;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	683a      	ldr	r2, [r7, #0]
 8008778:	1d1c      	adds	r4, r3, #4
 800877a:	4615      	mov	r5, r2
 800877c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800877e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008780:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008782:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008784:	682b      	ldr	r3, [r5, #0]
 8008786:	6023      	str	r3, [r4, #0]
    HAL_GPIO_WritePin(cfg.reset_port, cfg.reset_pin, GPIO_PIN_RESET);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	6898      	ldr	r0, [r3, #8]
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	899b      	ldrh	r3, [r3, #12]
 8008790:	2200      	movs	r2, #0
 8008792:	4619      	mov	r1, r3
 8008794:	f001 fa14 	bl	8009bc0 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8008798:	2064      	movs	r0, #100	; 0x64
 800879a:	f000 ff5b 	bl	8009654 <HAL_Delay>
    HAL_GPIO_WritePin(cfg.reset_port, cfg.reset_pin, GPIO_PIN_SET);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6898      	ldr	r0, [r3, #8]
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	899b      	ldrh	r3, [r3, #12]
 80087a6:	2201      	movs	r2, #1
 80087a8:	4619      	mov	r1, r3
 80087aa:	f001 fa09 	bl	8009bc0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(cfg.bl_port, cfg.bl_pin, GPIO_PIN_SET);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6918      	ldr	r0, [r3, #16]
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	8a9b      	ldrh	r3, [r3, #20]
 80087b6:	2201      	movs	r2, #1
 80087b8:	4619      	mov	r1, r3
 80087ba:	f001 fa01 	bl	8009bc0 <HAL_GPIO_WritePin>
    writeCommand(0x21);
 80087be:	2121      	movs	r1, #33	; 0x21
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	f000 f884 	bl	80088ce <_ZN4tama16Nokia5510Display12writeCommandEh>
    writeCommand(0x04);
 80087c6:	2104      	movs	r1, #4
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	f000 f880 	bl	80088ce <_ZN4tama16Nokia5510Display12writeCommandEh>
    writeCommand(0x10 | 0x04);
 80087ce:	2114      	movs	r1, #20
 80087d0:	6878      	ldr	r0, [r7, #4]
 80087d2:	f000 f87c 	bl	80088ce <_ZN4tama16Nokia5510Display12writeCommandEh>
    writeCommand(0x80 | 0x41); //contrast
 80087d6:	21c1      	movs	r1, #193	; 0xc1
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	f000 f878 	bl	80088ce <_ZN4tama16Nokia5510Display12writeCommandEh>
    writeCommand(0x20);
 80087de:	2120      	movs	r1, #32
 80087e0:	6878      	ldr	r0, [r7, #4]
 80087e2:	f000 f874 	bl	80088ce <_ZN4tama16Nokia5510Display12writeCommandEh>
    writeCommand(0x08 | 0x04);
 80087e6:	210c      	movs	r1, #12
 80087e8:	6878      	ldr	r0, [r7, #4]
 80087ea:	f000 f870 	bl	80088ce <_ZN4tama16Nokia5510Display12writeCommandEh>
    for (int i = 0; i < 504; i++)
 80087ee:	2300      	movs	r3, #0
 80087f0:	60fb      	str	r3, [r7, #12]
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 80087f8:	da07      	bge.n	800880a <_ZN4tama16Nokia5510DisplayC1ERNS_13DisplayConfigE+0xba>
        displayPixel(0x0);
 80087fa:	2100      	movs	r1, #0
 80087fc:	6878      	ldr	r0, [r7, #4]
 80087fe:	f000 f83d 	bl	800887c <_ZN4tama16Nokia5510Display12displayPixelEh>
    for (int i = 0; i < 504; i++)
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	3301      	adds	r3, #1
 8008806:	60fb      	str	r3, [r7, #12]
 8008808:	e7f3      	b.n	80087f2 <_ZN4tama16Nokia5510DisplayC1ERNS_13DisplayConfigE+0xa2>
    writeCommand(0x20 | 0x00);
 800880a:	2120      	movs	r1, #32
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	f000 f85e 	bl	80088ce <_ZN4tama16Nokia5510Display12writeCommandEh>
    writeCommand(0x80 | 0); // Wybˇr kolumny
 8008812:	2180      	movs	r1, #128	; 0x80
 8008814:	6878      	ldr	r0, [r7, #4]
 8008816:	f000 f85a 	bl	80088ce <_ZN4tama16Nokia5510Display12writeCommandEh>
    writeCommand(0x40 | 0); // Wybˇr wiersza
 800881a:	2140      	movs	r1, #64	; 0x40
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f000 f856 	bl	80088ce <_ZN4tama16Nokia5510Display12writeCommandEh>
}
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	4618      	mov	r0, r3
 8008826:	3710      	adds	r7, #16
 8008828:	46bd      	mov	sp, r7
 800882a:	bdb0      	pop	{r4, r5, r7, pc}
 800882c:	08011a18 	.word	0x08011a18

08008830 <_ZN4tama16Nokia5510Display11displayDataEv>:

void tama::Nokia5510Display::displayData()
{
 8008830:	b480      	push	{r7}
 8008832:	b083      	sub	sp, #12
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]

}
 8008838:	bf00      	nop
 800883a:	370c      	adds	r7, #12
 800883c:	46bd      	mov	sp, r7
 800883e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008842:	4770      	bx	lr

08008844 <_ZN4tama16Nokia5510Display7setDataERNS_11DisplayDataE>:

void tama::Nokia5510Display::setData(DisplayData & pixels)
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b084      	sub	sp, #16
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
 800884c:	6039      	str	r1, [r7, #0]


	for (unsigned i = 0; i <504; ++i)
 800884e:	2300      	movs	r3, #0
 8008850:	60fb      	str	r3, [r7, #12]
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 8008858:	d20c      	bcs.n	8008874 <_ZN4tama16Nokia5510Display7setDataERNS_11DisplayDataE+0x30>
	{
		displayPixel(((uint8_t *)pixels.data)[i]);
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	681a      	ldr	r2, [r3, #0]
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	4413      	add	r3, r2
 8008862:	781b      	ldrb	r3, [r3, #0]
 8008864:	4619      	mov	r1, r3
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	f000 f808 	bl	800887c <_ZN4tama16Nokia5510Display12displayPixelEh>
	for (unsigned i = 0; i <504; ++i)
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	3301      	adds	r3, #1
 8008870:	60fb      	str	r3, [r7, #12]
 8008872:	e7ee      	b.n	8008852 <_ZN4tama16Nokia5510Display7setDataERNS_11DisplayDataE+0xe>
//
//    HAL_GPIO_WritePin(cfg.dc_port, cfg.dc_pin, GPIO_PIN_SET);
//    HAL_GPIO_WritePin(cfg.ce_port, cfg.ce_pin, GPIO_PIN_RESET);
//    HAL_SPI_Transmit(cfg.spi, ((uint8_t *)pixels.data + 252), 252, 100);
//    HAL_GPIO_WritePin(cfg.ce_port, cfg.ce_pin, GPIO_PIN_SET);
}
 8008874:	bf00      	nop
 8008876:	3710      	adds	r7, #16
 8008878:	46bd      	mov	sp, r7
 800887a:	bd80      	pop	{r7, pc}

0800887c <_ZN4tama16Nokia5510Display12displayPixelEh>:


void tama::Nokia5510Display::displayPixel(uint8_t pixelData)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b082      	sub	sp, #8
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
 8008884:	460b      	mov	r3, r1
 8008886:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(cfg.dc_port, cfg.dc_pin, GPIO_PIN_SET);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	6998      	ldr	r0, [r3, #24]
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008890:	2201      	movs	r2, #1
 8008892:	4619      	mov	r1, r3
 8008894:	f001 f994 	bl	8009bc0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(cfg.ce_port, cfg.ce_pin, GPIO_PIN_RESET);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6a18      	ldr	r0, [r3, #32]
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	8b9b      	ldrh	r3, [r3, #28]
 80088a0:	2200      	movs	r2, #0
 80088a2:	4619      	mov	r1, r3
 80088a4:	f001 f98c 	bl	8009bc0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(cfg.spi, &pixelData, 1, 100);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6858      	ldr	r0, [r3, #4]
 80088ac:	1cf9      	adds	r1, r7, #3
 80088ae:	2364      	movs	r3, #100	; 0x64
 80088b0:	2201      	movs	r2, #1
 80088b2:	f004 fa81 	bl	800cdb8 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(cfg.ce_port, cfg.ce_pin, GPIO_PIN_SET);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6a18      	ldr	r0, [r3, #32]
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	8b9b      	ldrh	r3, [r3, #28]
 80088be:	2201      	movs	r2, #1
 80088c0:	4619      	mov	r1, r3
 80088c2:	f001 f97d 	bl	8009bc0 <HAL_GPIO_WritePin>
}
 80088c6:	bf00      	nop
 80088c8:	3708      	adds	r7, #8
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd80      	pop	{r7, pc}

080088ce <_ZN4tama16Nokia5510Display12writeCommandEh>:

void tama::Nokia5510Display::writeCommand(uint8_t cmd)
{
 80088ce:	b580      	push	{r7, lr}
 80088d0:	b082      	sub	sp, #8
 80088d2:	af00      	add	r7, sp, #0
 80088d4:	6078      	str	r0, [r7, #4]
 80088d6:	460b      	mov	r3, r1
 80088d8:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(cfg.dc_port, cfg.dc_pin, GPIO_PIN_RESET);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6998      	ldr	r0, [r3, #24]
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80088e2:	2200      	movs	r2, #0
 80088e4:	4619      	mov	r1, r3
 80088e6:	f001 f96b 	bl	8009bc0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(cfg.ce_port, cfg.ce_pin, GPIO_PIN_RESET);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6a18      	ldr	r0, [r3, #32]
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	8b9b      	ldrh	r3, [r3, #28]
 80088f2:	2200      	movs	r2, #0
 80088f4:	4619      	mov	r1, r3
 80088f6:	f001 f963 	bl	8009bc0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(cfg.spi, &cmd, 1, 100);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6858      	ldr	r0, [r3, #4]
 80088fe:	1cf9      	adds	r1, r7, #3
 8008900:	2364      	movs	r3, #100	; 0x64
 8008902:	2201      	movs	r2, #1
 8008904:	f004 fa58 	bl	800cdb8 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(cfg.ce_port, cfg.ce_pin, GPIO_PIN_SET);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6a18      	ldr	r0, [r3, #32]
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	8b9b      	ldrh	r3, [r3, #28]
 8008910:	2201      	movs	r2, #1
 8008912:	4619      	mov	r1, r3
 8008914:	f001 f954 	bl	8009bc0 <HAL_GPIO_WritePin>
}
 8008918:	bf00      	nop
 800891a:	3708      	adds	r7, #8
 800891c:	46bd      	mov	sp, r7
 800891e:	bd80      	pop	{r7, pc}

08008920 <_ZN4tama27Nokia5110DisplayDataManager25getActiveSceneDisplayDataESt10shared_ptrINS_7TextureEE>:
//

#include "Nokia5110DisplayDataManager.h"

tama::DisplayData tama::Nokia5110DisplayDataManager::getActiveSceneDisplayData(std::shared_ptr<Texture> texture)
{
 8008920:	b590      	push	{r4, r7, lr}
 8008922:	b08b      	sub	sp, #44	; 0x2c
 8008924:	af00      	add	r7, sp, #0
 8008926:	60f8      	str	r0, [r7, #12]
 8008928:	60b9      	str	r1, [r7, #8]
 800892a:	607a      	str	r2, [r7, #4]
    uint8_t * data = new uint8_t[dataSize];
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	691b      	ldr	r3, [r3, #16]
 8008930:	4618      	mov	r0, r3
 8008932:	f007 fd74 	bl	801041e <_Znaj>
 8008936:	4603      	mov	r3, r0
 8008938:	61fb      	str	r3, [r7, #28]
    for (unsigned i = 0; i < texture->height; ++i)
 800893a:	2300      	movs	r3, #0
 800893c:	627b      	str	r3, [r7, #36]	; 0x24
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f7f8 fe73 	bl	800162a <_ZNKSt19__shared_ptr_accessIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8008944:	4603      	mov	r3, r0
 8008946:	689b      	ldr	r3, [r3, #8]
 8008948:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800894a:	429a      	cmp	r2, r3
 800894c:	bf34      	ite	cc
 800894e:	2301      	movcc	r3, #1
 8008950:	2300      	movcs	r3, #0
 8008952:	b2db      	uxtb	r3, r3
 8008954:	2b00      	cmp	r3, #0
 8008956:	d03f      	beq.n	80089d8 <_ZN4tama27Nokia5110DisplayDataManager25getActiveSceneDisplayDataESt10shared_ptrINS_7TextureEE+0xb8>
    {
        for (unsigned j = 0; j < texture->width; ++j) //i = 32, j = 60
 8008958:	2300      	movs	r3, #0
 800895a:	623b      	str	r3, [r7, #32]
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	f7f8 fe64 	bl	800162a <_ZNKSt19__shared_ptr_accessIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8008962:	4603      	mov	r3, r0
 8008964:	685b      	ldr	r3, [r3, #4]
 8008966:	6a3a      	ldr	r2, [r7, #32]
 8008968:	429a      	cmp	r2, r3
 800896a:	bf34      	ite	cc
 800896c:	2301      	movcc	r3, #1
 800896e:	2300      	movcs	r3, #0
 8008970:	b2db      	uxtb	r3, r3
 8008972:	2b00      	cmp	r3, #0
 8008974:	d02c      	beq.n	80089d0 <_ZN4tama27Nokia5110DisplayDataManager25getActiveSceneDisplayDataESt10shared_ptrINS_7TextureEE+0xb0>
        {
            unsigned segmentHeightNumber = i / segmentSize; // 0, 1, .., 7 -> 4
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	685b      	ldr	r3, [r3, #4]
 800897a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800897c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008980:	61bb      	str	r3, [r7, #24]
            unsigned bitInSegment = i % segmentSize; // 0 ... 7 -> 0  // 504 = 7 * 48 + 47
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	685a      	ldr	r2, [r3, #4]
 8008986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008988:	fbb3 f1f2 	udiv	r1, r3, r2
 800898c:	fb02 f201 	mul.w	r2, r2, r1
 8008990:	1a9b      	subs	r3, r3, r2
 8008992:	617b      	str	r3, [r7, #20]
            setPixel(data[segmentHeightNumber * segmentsInWidth + j], bitInSegment, texture->data[i][j]);
 8008994:	68bb      	ldr	r3, [r7, #8]
 8008996:	68db      	ldr	r3, [r3, #12]
 8008998:	69ba      	ldr	r2, [r7, #24]
 800899a:	fb02 f203 	mul.w	r2, r2, r3
 800899e:	6a3b      	ldr	r3, [r7, #32]
 80089a0:	4413      	add	r3, r2
 80089a2:	69fa      	ldr	r2, [r7, #28]
 80089a4:	18d4      	adds	r4, r2, r3
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f7f8 fe3f 	bl	800162a <_ZNKSt19__shared_ptr_accessIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 80089ac:	4603      	mov	r3, r0
 80089ae:	68da      	ldr	r2, [r3, #12]
 80089b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089b2:	009b      	lsls	r3, r3, #2
 80089b4:	4413      	add	r3, r2
 80089b6:	681a      	ldr	r2, [r3, #0]
 80089b8:	6a3b      	ldr	r3, [r7, #32]
 80089ba:	4413      	add	r3, r2
 80089bc:	781b      	ldrb	r3, [r3, #0]
 80089be:	697a      	ldr	r2, [r7, #20]
 80089c0:	4621      	mov	r1, r4
 80089c2:	68b8      	ldr	r0, [r7, #8]
 80089c4:	f000 f817 	bl	80089f6 <_ZN4tama27Nokia5110DisplayDataManager8setPixelERhjNS_10PixelColorE>
        for (unsigned j = 0; j < texture->width; ++j) //i = 32, j = 60
 80089c8:	6a3b      	ldr	r3, [r7, #32]
 80089ca:	3301      	adds	r3, #1
 80089cc:	623b      	str	r3, [r7, #32]
 80089ce:	e7c5      	b.n	800895c <_ZN4tama27Nokia5110DisplayDataManager25getActiveSceneDisplayDataESt10shared_ptrINS_7TextureEE+0x3c>
    for (unsigned i = 0; i < texture->height; ++i)
 80089d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d2:	3301      	adds	r3, #1
 80089d4:	627b      	str	r3, [r7, #36]	; 0x24
 80089d6:	e7b2      	b.n	800893e <_ZN4tama27Nokia5110DisplayDataManager25getActiveSceneDisplayDataESt10shared_ptrINS_7TextureEE+0x1e>
        }
    }
    return DisplayData{data, dataSize, dataFragmentSize};
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	69fa      	ldr	r2, [r7, #28]
 80089dc:	601a      	str	r2, [r3, #0]
 80089de:	68bb      	ldr	r3, [r7, #8]
 80089e0:	691a      	ldr	r2, [r3, #16]
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	605a      	str	r2, [r3, #4]
 80089e6:	68bb      	ldr	r3, [r7, #8]
 80089e8:	695a      	ldr	r2, [r3, #20]
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	609a      	str	r2, [r3, #8]
}
 80089ee:	68f8      	ldr	r0, [r7, #12]
 80089f0:	372c      	adds	r7, #44	; 0x2c
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bd90      	pop	{r4, r7, pc}

080089f6 <_ZN4tama27Nokia5110DisplayDataManager8setPixelERhjNS_10PixelColorE>:

void tama::Nokia5110DisplayDataManager::setPixel(uint8_t & pixelSegment, unsigned position, tama::PixelColor color)
{
 80089f6:	b480      	push	{r7}
 80089f8:	b085      	sub	sp, #20
 80089fa:	af00      	add	r7, sp, #0
 80089fc:	60f8      	str	r0, [r7, #12]
 80089fe:	60b9      	str	r1, [r7, #8]
 8008a00:	607a      	str	r2, [r7, #4]
 8008a02:	70fb      	strb	r3, [r7, #3]
    if (color == PixelColor::BLACK)
 8008a04:	78fb      	ldrb	r3, [r7, #3]
 8008a06:	2b01      	cmp	r3, #1
 8008a08:	d10d      	bne.n	8008a26 <_ZN4tama27Nokia5110DisplayDataManager8setPixelERhjNS_10PixelColorE+0x30>
    {
       pixelSegment |= 1 << position;
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	781b      	ldrb	r3, [r3, #0]
 8008a0e:	b25a      	sxtb	r2, r3
 8008a10:	2101      	movs	r1, #1
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	fa01 f303 	lsl.w	r3, r1, r3
 8008a18:	b25b      	sxtb	r3, r3
 8008a1a:	4313      	orrs	r3, r2
 8008a1c:	b25b      	sxtb	r3, r3
 8008a1e:	b2da      	uxtb	r2, r3
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	701a      	strb	r2, [r3, #0]
    } else {
        pixelSegment&= ~(1 << position);
    }
}
 8008a24:	e00e      	b.n	8008a44 <_ZN4tama27Nokia5110DisplayDataManager8setPixelERhjNS_10PixelColorE+0x4e>
        pixelSegment&= ~(1 << position);
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	781b      	ldrb	r3, [r3, #0]
 8008a2a:	b25a      	sxtb	r2, r3
 8008a2c:	2101      	movs	r1, #1
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	fa01 f303 	lsl.w	r3, r1, r3
 8008a34:	b25b      	sxtb	r3, r3
 8008a36:	43db      	mvns	r3, r3
 8008a38:	b25b      	sxtb	r3, r3
 8008a3a:	4013      	ands	r3, r2
 8008a3c:	b25b      	sxtb	r3, r3
 8008a3e:	b2da      	uxtb	r2, r3
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	701a      	strb	r2, [r3, #0]
}
 8008a44:	bf00      	nop
 8008a46:	3714      	adds	r7, #20
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4e:	4770      	bx	lr

08008a50 <_ZN4tama18Stm32TextureLoader4loadERNS_12TextureAssetE>:
//

#include "Stm32TextureLoader.h"

std::shared_ptr<tama::Texture> tama::Stm32TextureLoader::load(TextureAsset & textureAsset)
{
 8008a50:	b590      	push	{r4, r7, lr}
 8008a52:	b089      	sub	sp, #36	; 0x24
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	60f8      	str	r0, [r7, #12]
 8008a58:	60b9      	str	r1, [r7, #8]
 8008a5a:	607a      	str	r2, [r7, #4]
    std::shared_ptr<Texture> texture = std::make_shared<Texture>(textureAsset.width, textureAsset.height);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	1d19      	adds	r1, r3, #4
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f103 0208 	add.w	r2, r3, #8
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	4618      	mov	r0, r3
 8008a6a:	f7f8 fe09 	bl	8001680 <_ZSt11make_sharedIN4tama7TextureEJRjS2_EESt10shared_ptrIT_EDpOT0_>
    PixelColor ** textureData = createEmptyTextureData(textureAsset.width, textureAsset.height);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6859      	ldr	r1, [r3, #4]
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	689b      	ldr	r3, [r3, #8]
 8008a76:	461a      	mov	r2, r3
 8008a78:	68b8      	ldr	r0, [r7, #8]
 8008a7a:	f000 f855 	bl	8008b28 <_ZN4tama18Stm32TextureLoader22createEmptyTextureDataEjj>
 8008a7e:	6178      	str	r0, [r7, #20]

    for (unsigned i = 0; i < textureAsset.height; ++i)
 8008a80:	2300      	movs	r3, #0
 8008a82:	61fb      	str	r3, [r7, #28]
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	689b      	ldr	r3, [r3, #8]
 8008a88:	69fa      	ldr	r2, [r7, #28]
 8008a8a:	429a      	cmp	r2, r3
 8008a8c:	d227      	bcs.n	8008ade <_ZN4tama18Stm32TextureLoader4loadERNS_12TextureAssetE+0x8e>
    {
        for (unsigned j = 0; j < textureAsset.width; ++j)
 8008a8e:	2300      	movs	r3, #0
 8008a90:	61bb      	str	r3, [r7, #24]
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	685b      	ldr	r3, [r3, #4]
 8008a96:	69ba      	ldr	r2, [r7, #24]
 8008a98:	429a      	cmp	r2, r3
 8008a9a:	d21c      	bcs.n	8008ad6 <_ZN4tama18Stm32TextureLoader4loadERNS_12TextureAssetE+0x86>
        {
            textureData[i][j] = colorFromData(textureAsset.data[i * textureAsset.width + j]);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681a      	ldr	r2, [r3, #0]
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	685b      	ldr	r3, [r3, #4]
 8008aa4:	69f9      	ldr	r1, [r7, #28]
 8008aa6:	fb01 f103 	mul.w	r1, r1, r3
 8008aaa:	69bb      	ldr	r3, [r7, #24]
 8008aac:	440b      	add	r3, r1
 8008aae:	005b      	lsls	r3, r3, #1
 8008ab0:	4413      	add	r3, r2
 8008ab2:	f9b3 1000 	ldrsh.w	r1, [r3]
 8008ab6:	69fb      	ldr	r3, [r7, #28]
 8008ab8:	009b      	lsls	r3, r3, #2
 8008aba:	697a      	ldr	r2, [r7, #20]
 8008abc:	4413      	add	r3, r2
 8008abe:	681a      	ldr	r2, [r3, #0]
 8008ac0:	69bb      	ldr	r3, [r7, #24]
 8008ac2:	18d4      	adds	r4, r2, r3
 8008ac4:	68b8      	ldr	r0, [r7, #8]
 8008ac6:	f000 f815 	bl	8008af4 <_ZN4tama18Stm32TextureLoader13colorFromDataEs>
 8008aca:	4603      	mov	r3, r0
 8008acc:	7023      	strb	r3, [r4, #0]
        for (unsigned j = 0; j < textureAsset.width; ++j)
 8008ace:	69bb      	ldr	r3, [r7, #24]
 8008ad0:	3301      	adds	r3, #1
 8008ad2:	61bb      	str	r3, [r7, #24]
 8008ad4:	e7dd      	b.n	8008a92 <_ZN4tama18Stm32TextureLoader4loadERNS_12TextureAssetE+0x42>
    for (unsigned i = 0; i < textureAsset.height; ++i)
 8008ad6:	69fb      	ldr	r3, [r7, #28]
 8008ad8:	3301      	adds	r3, #1
 8008ada:	61fb      	str	r3, [r7, #28]
 8008adc:	e7d2      	b.n	8008a84 <_ZN4tama18Stm32TextureLoader4loadERNS_12TextureAssetE+0x34>
        }
    }

    texture->data = textureData;
 8008ade:	68f8      	ldr	r0, [r7, #12]
 8008ae0:	f7f8 fda3 	bl	800162a <_ZNKSt19__shared_ptr_accessIN4tama7TextureELN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8008ae4:	4602      	mov	r2, r0
 8008ae6:	697b      	ldr	r3, [r7, #20]
 8008ae8:	60d3      	str	r3, [r2, #12]

    return texture;
 8008aea:	bf00      	nop
}
 8008aec:	68f8      	ldr	r0, [r7, #12]
 8008aee:	3724      	adds	r7, #36	; 0x24
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bd90      	pop	{r4, r7, pc}

08008af4 <_ZN4tama18Stm32TextureLoader13colorFromDataEs>:

tama::PixelColor tama::Stm32TextureLoader::colorFromData(short data)
{
 8008af4:	b480      	push	{r7}
 8008af6:	b083      	sub	sp, #12
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
 8008afc:	460b      	mov	r3, r1
 8008afe:	807b      	strh	r3, [r7, #2]
    if (data == 15)
 8008b00:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008b04:	2b0f      	cmp	r3, #15
 8008b06:	d101      	bne.n	8008b0c <_ZN4tama18Stm32TextureLoader13colorFromDataEs+0x18>
    {
        return PixelColor::WHITE;
 8008b08:	2300      	movs	r3, #0
 8008b0a:	e006      	b.n	8008b1a <_ZN4tama18Stm32TextureLoader13colorFromDataEs+0x26>
    } else if (data == 0)
 8008b0c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d101      	bne.n	8008b18 <_ZN4tama18Stm32TextureLoader13colorFromDataEs+0x24>
    {
        return PixelColor::BLACK;
 8008b14:	2301      	movs	r3, #1
 8008b16:	e000      	b.n	8008b1a <_ZN4tama18Stm32TextureLoader13colorFromDataEs+0x26>
    }
    return PixelColor::TRANSPARENT;
 8008b18:	2302      	movs	r3, #2
}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	370c      	adds	r7, #12
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b24:	4770      	bx	lr
	...

08008b28 <_ZN4tama18Stm32TextureLoader22createEmptyTextureDataEjj>:

tama::PixelColor **tama::Stm32TextureLoader::createEmptyTextureData(unsigned int width, unsigned int height)
{
 8008b28:	b590      	push	{r4, r7, lr}
 8008b2a:	b087      	sub	sp, #28
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	60f8      	str	r0, [r7, #12]
 8008b30:	60b9      	str	r1, [r7, #8]
 8008b32:	607a      	str	r2, [r7, #4]
    PixelColor ** textureData = new PixelColor*[height];
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	4a12      	ldr	r2, [pc, #72]	; (8008b80 <_ZN4tama18Stm32TextureLoader22createEmptyTextureDataEjj+0x58>)
 8008b38:	4293      	cmp	r3, r2
 8008b3a:	d801      	bhi.n	8008b40 <_ZN4tama18Stm32TextureLoader22createEmptyTextureDataEjj+0x18>
 8008b3c:	009b      	lsls	r3, r3, #2
 8008b3e:	e001      	b.n	8008b44 <_ZN4tama18Stm32TextureLoader22createEmptyTextureDataEjj+0x1c>
 8008b40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008b44:	4618      	mov	r0, r3
 8008b46:	f007 fc6a 	bl	801041e <_Znaj>
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	613b      	str	r3, [r7, #16]
    for (unsigned i = 0; i < height; ++i)
 8008b4e:	2300      	movs	r3, #0
 8008b50:	617b      	str	r3, [r7, #20]
 8008b52:	697a      	ldr	r2, [r7, #20]
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	429a      	cmp	r2, r3
 8008b58:	d20d      	bcs.n	8008b76 <_ZN4tama18Stm32TextureLoader22createEmptyTextureDataEjj+0x4e>
    {
        textureData[i] = new PixelColor[width];
 8008b5a:	68b9      	ldr	r1, [r7, #8]
 8008b5c:	697b      	ldr	r3, [r7, #20]
 8008b5e:	009b      	lsls	r3, r3, #2
 8008b60:	693a      	ldr	r2, [r7, #16]
 8008b62:	18d4      	adds	r4, r2, r3
 8008b64:	4608      	mov	r0, r1
 8008b66:	f007 fc5a 	bl	801041e <_Znaj>
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	6023      	str	r3, [r4, #0]
    for (unsigned i = 0; i < height; ++i)
 8008b6e:	697b      	ldr	r3, [r7, #20]
 8008b70:	3301      	adds	r3, #1
 8008b72:	617b      	str	r3, [r7, #20]
 8008b74:	e7ed      	b.n	8008b52 <_ZN4tama18Stm32TextureLoader22createEmptyTextureDataEjj+0x2a>
    }
    return textureData;
 8008b76:	693b      	ldr	r3, [r7, #16]
}
 8008b78:	4618      	mov	r0, r3
 8008b7a:	371c      	adds	r7, #28
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bd90      	pop	{r4, r7, pc}
 8008b80:	1ffffffe 	.word	0x1ffffffe

08008b84 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b08c      	sub	sp, #48	; 0x30
 8008b88:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008b8a:	f107 031c 	add.w	r3, r7, #28
 8008b8e:	2200      	movs	r2, #0
 8008b90:	601a      	str	r2, [r3, #0]
 8008b92:	605a      	str	r2, [r3, #4]
 8008b94:	609a      	str	r2, [r3, #8]
 8008b96:	60da      	str	r2, [r3, #12]
 8008b98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	61bb      	str	r3, [r7, #24]
 8008b9e:	4b78      	ldr	r3, [pc, #480]	; (8008d80 <MX_GPIO_Init+0x1fc>)
 8008ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ba2:	4a77      	ldr	r2, [pc, #476]	; (8008d80 <MX_GPIO_Init+0x1fc>)
 8008ba4:	f043 0310 	orr.w	r3, r3, #16
 8008ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8008baa:	4b75      	ldr	r3, [pc, #468]	; (8008d80 <MX_GPIO_Init+0x1fc>)
 8008bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bae:	f003 0310 	and.w	r3, r3, #16
 8008bb2:	61bb      	str	r3, [r7, #24]
 8008bb4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	617b      	str	r3, [r7, #20]
 8008bba:	4b71      	ldr	r3, [pc, #452]	; (8008d80 <MX_GPIO_Init+0x1fc>)
 8008bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bbe:	4a70      	ldr	r2, [pc, #448]	; (8008d80 <MX_GPIO_Init+0x1fc>)
 8008bc0:	f043 0304 	orr.w	r3, r3, #4
 8008bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8008bc6:	4b6e      	ldr	r3, [pc, #440]	; (8008d80 <MX_GPIO_Init+0x1fc>)
 8008bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bca:	f003 0304 	and.w	r3, r3, #4
 8008bce:	617b      	str	r3, [r7, #20]
 8008bd0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	613b      	str	r3, [r7, #16]
 8008bd6:	4b6a      	ldr	r3, [pc, #424]	; (8008d80 <MX_GPIO_Init+0x1fc>)
 8008bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bda:	4a69      	ldr	r2, [pc, #420]	; (8008d80 <MX_GPIO_Init+0x1fc>)
 8008bdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008be0:	6313      	str	r3, [r2, #48]	; 0x30
 8008be2:	4b67      	ldr	r3, [pc, #412]	; (8008d80 <MX_GPIO_Init+0x1fc>)
 8008be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bea:	613b      	str	r3, [r7, #16]
 8008bec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008bee:	2300      	movs	r3, #0
 8008bf0:	60fb      	str	r3, [r7, #12]
 8008bf2:	4b63      	ldr	r3, [pc, #396]	; (8008d80 <MX_GPIO_Init+0x1fc>)
 8008bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bf6:	4a62      	ldr	r2, [pc, #392]	; (8008d80 <MX_GPIO_Init+0x1fc>)
 8008bf8:	f043 0301 	orr.w	r3, r3, #1
 8008bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8008bfe:	4b60      	ldr	r3, [pc, #384]	; (8008d80 <MX_GPIO_Init+0x1fc>)
 8008c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c02:	f003 0301 	and.w	r3, r3, #1
 8008c06:	60fb      	str	r3, [r7, #12]
 8008c08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	60bb      	str	r3, [r7, #8]
 8008c0e:	4b5c      	ldr	r3, [pc, #368]	; (8008d80 <MX_GPIO_Init+0x1fc>)
 8008c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c12:	4a5b      	ldr	r2, [pc, #364]	; (8008d80 <MX_GPIO_Init+0x1fc>)
 8008c14:	f043 0302 	orr.w	r3, r3, #2
 8008c18:	6313      	str	r3, [r2, #48]	; 0x30
 8008c1a:	4b59      	ldr	r3, [pc, #356]	; (8008d80 <MX_GPIO_Init+0x1fc>)
 8008c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c1e:	f003 0302 	and.w	r3, r3, #2
 8008c22:	60bb      	str	r3, [r7, #8]
 8008c24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008c26:	2300      	movs	r3, #0
 8008c28:	607b      	str	r3, [r7, #4]
 8008c2a:	4b55      	ldr	r3, [pc, #340]	; (8008d80 <MX_GPIO_Init+0x1fc>)
 8008c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c2e:	4a54      	ldr	r2, [pc, #336]	; (8008d80 <MX_GPIO_Init+0x1fc>)
 8008c30:	f043 0308 	orr.w	r3, r3, #8
 8008c34:	6313      	str	r3, [r2, #48]	; 0x30
 8008c36:	4b52      	ldr	r3, [pc, #328]	; (8008d80 <MX_GPIO_Init+0x1fc>)
 8008c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c3a:	f003 0308 	and.w	r3, r3, #8
 8008c3e:	607b      	str	r3, [r7, #4]
 8008c40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|RST_Pin|BL_Pin, GPIO_PIN_RESET);
 8008c42:	2200      	movs	r2, #0
 8008c44:	f44f 7122 	mov.w	r1, #648	; 0x288
 8008c48:	484e      	ldr	r0, [pc, #312]	; (8008d84 <MX_GPIO_Init+0x200>)
 8008c4a:	f000 ffb9 	bl	8009bc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8008c4e:	2201      	movs	r2, #1
 8008c50:	2101      	movs	r1, #1
 8008c52:	484d      	ldr	r0, [pc, #308]	; (8008d88 <MX_GPIO_Init+0x204>)
 8008c54:	f000 ffb4 	bl	8009bc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 8008c58:	2200      	movs	r2, #0
 8008c5a:	2120      	movs	r1, #32
 8008c5c:	484a      	ldr	r0, [pc, #296]	; (8008d88 <MX_GPIO_Init+0x204>)
 8008c5e:	f000 ffaf 	bl	8009bc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_RESET);
 8008c62:	2200      	movs	r2, #0
 8008c64:	2102      	movs	r1, #2
 8008c66:	4849      	ldr	r0, [pc, #292]	; (8008d8c <MX_GPIO_Init+0x208>)
 8008c68:	f000 ffaa 	bl	8009bc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	f24f 0110 	movw	r1, #61456	; 0xf010
 8008c72:	4847      	ldr	r0, [pc, #284]	; (8008d90 <MX_GPIO_Init+0x20c>)
 8008c74:	f000 ffa4 	bl	8009bc0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8008c78:	2304      	movs	r3, #4
 8008c7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c80:	2300      	movs	r3, #0
 8008c82:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8008c84:	f107 031c 	add.w	r3, r7, #28
 8008c88:	4619      	mov	r1, r3
 8008c8a:	483e      	ldr	r0, [pc, #248]	; (8008d84 <MX_GPIO_Init+0x200>)
 8008c8c:	f000 fe16 	bl	80098bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|RST_Pin|BL_Pin;
 8008c90:	f44f 7322 	mov.w	r3, #648	; 0x288
 8008c94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008c96:	2301      	movs	r3, #1
 8008c98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008ca2:	f107 031c 	add.w	r3, r7, #28
 8008ca6:	4619      	mov	r1, r3
 8008ca8:	4836      	ldr	r0, [pc, #216]	; (8008d84 <MX_GPIO_Init+0x200>)
 8008caa:	f000 fe07 	bl	80098bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8008cae:	2332      	movs	r3, #50	; 0x32
 8008cb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8008cb2:	4b38      	ldr	r3, [pc, #224]	; (8008d94 <MX_GPIO_Init+0x210>)
 8008cb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008cba:	f107 031c 	add.w	r3, r7, #28
 8008cbe:	4619      	mov	r1, r3
 8008cc0:	4830      	ldr	r0, [pc, #192]	; (8008d84 <MX_GPIO_Init+0x200>)
 8008cc2:	f000 fdfb 	bl	80098bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|DC_Pin;
 8008cc6:	2321      	movs	r3, #33	; 0x21
 8008cc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008cca:	2301      	movs	r3, #1
 8008ccc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008cce:	2300      	movs	r3, #0
 8008cd0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008cd6:	f107 031c 	add.w	r3, r7, #28
 8008cda:	4619      	mov	r1, r3
 8008cdc:	482a      	ldr	r0, [pc, #168]	; (8008d88 <MX_GPIO_Init+0x204>)
 8008cde:	f000 fded 	bl	80098bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8008ce2:	2301      	movs	r3, #1
 8008ce4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8008ce6:	4b2b      	ldr	r3, [pc, #172]	; (8008d94 <MX_GPIO_Init+0x210>)
 8008ce8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008cea:	2300      	movs	r3, #0
 8008cec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008cee:	f107 031c 	add.w	r3, r7, #28
 8008cf2:	4619      	mov	r1, r3
 8008cf4:	4828      	ldr	r0, [pc, #160]	; (8008d98 <MX_GPIO_Init+0x214>)
 8008cf6:	f000 fde1 	bl	80098bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CE_Pin;
 8008cfa:	2302      	movs	r3, #2
 8008cfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008cfe:	2301      	movs	r3, #1
 8008d00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d02:	2300      	movs	r3, #0
 8008d04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008d06:	2300      	movs	r3, #0
 8008d08:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CE_GPIO_Port, &GPIO_InitStruct);
 8008d0a:	f107 031c 	add.w	r3, r7, #28
 8008d0e:	4619      	mov	r1, r3
 8008d10:	481e      	ldr	r0, [pc, #120]	; (8008d8c <MX_GPIO_Init+0x208>)
 8008d12:	f000 fdd3 	bl	80098bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_C_Pin;
 8008d16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8008d1c:	4b1f      	ldr	r3, [pc, #124]	; (8008d9c <MX_GPIO_Init+0x218>)
 8008d1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008d20:	2301      	movs	r3, #1
 8008d22:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUTTON_C_GPIO_Port, &GPIO_InitStruct);
 8008d24:	f107 031c 	add.w	r3, r7, #28
 8008d28:	4619      	mov	r1, r3
 8008d2a:	4819      	ldr	r0, [pc, #100]	; (8008d90 <MX_GPIO_Init+0x20c>)
 8008d2c:	f000 fdc6 	bl	80098bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8008d30:	f24f 0310 	movw	r3, #61456	; 0xf010
 8008d34:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008d36:	2301      	movs	r3, #1
 8008d38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008d3e:	2300      	movs	r3, #0
 8008d40:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008d42:	f107 031c 	add.w	r3, r7, #28
 8008d46:	4619      	mov	r1, r3
 8008d48:	4811      	ldr	r0, [pc, #68]	; (8008d90 <MX_GPIO_Init+0x20c>)
 8008d4a:	f000 fdb7 	bl	80098bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8008d4e:	2320      	movs	r3, #32
 8008d50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008d52:	2300      	movs	r3, #0
 8008d54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d56:	2300      	movs	r3, #0
 8008d58:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8008d5a:	f107 031c 	add.w	r3, r7, #28
 8008d5e:	4619      	mov	r1, r3
 8008d60:	480b      	ldr	r0, [pc, #44]	; (8008d90 <MX_GPIO_Init+0x20c>)
 8008d62:	f000 fdab 	bl	80098bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8008d66:	2200      	movs	r2, #0
 8008d68:	2100      	movs	r1, #0
 8008d6a:	2028      	movs	r0, #40	; 0x28
 8008d6c:	f000 fd6f 	bl	800984e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8008d70:	2028      	movs	r0, #40	; 0x28
 8008d72:	f000 fd88 	bl	8009886 <HAL_NVIC_EnableIRQ>

}
 8008d76:	bf00      	nop
 8008d78:	3730      	adds	r7, #48	; 0x30
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}
 8008d7e:	bf00      	nop
 8008d80:	40023800 	.word	0x40023800
 8008d84:	40021000 	.word	0x40021000
 8008d88:	40020800 	.word	0x40020800
 8008d8c:	40020400 	.word	0x40020400
 8008d90:	40020c00 	.word	0x40020c00
 8008d94:	10120000 	.word	0x10120000
 8008d98:	40020000 	.word	0x40020000
 8008d9c:	10110000 	.word	0x10110000

08008da0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8008da4:	4b12      	ldr	r3, [pc, #72]	; (8008df0 <MX_I2C1_Init+0x50>)
 8008da6:	4a13      	ldr	r2, [pc, #76]	; (8008df4 <MX_I2C1_Init+0x54>)
 8008da8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8008daa:	4b11      	ldr	r3, [pc, #68]	; (8008df0 <MX_I2C1_Init+0x50>)
 8008dac:	4a12      	ldr	r2, [pc, #72]	; (8008df8 <MX_I2C1_Init+0x58>)
 8008dae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8008db0:	4b0f      	ldr	r3, [pc, #60]	; (8008df0 <MX_I2C1_Init+0x50>)
 8008db2:	2200      	movs	r2, #0
 8008db4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8008db6:	4b0e      	ldr	r3, [pc, #56]	; (8008df0 <MX_I2C1_Init+0x50>)
 8008db8:	2200      	movs	r2, #0
 8008dba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008dbc:	4b0c      	ldr	r3, [pc, #48]	; (8008df0 <MX_I2C1_Init+0x50>)
 8008dbe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008dc2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008dc4:	4b0a      	ldr	r3, [pc, #40]	; (8008df0 <MX_I2C1_Init+0x50>)
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8008dca:	4b09      	ldr	r3, [pc, #36]	; (8008df0 <MX_I2C1_Init+0x50>)
 8008dcc:	2200      	movs	r2, #0
 8008dce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008dd0:	4b07      	ldr	r3, [pc, #28]	; (8008df0 <MX_I2C1_Init+0x50>)
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008dd6:	4b06      	ldr	r3, [pc, #24]	; (8008df0 <MX_I2C1_Init+0x50>)
 8008dd8:	2200      	movs	r2, #0
 8008dda:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8008ddc:	4804      	ldr	r0, [pc, #16]	; (8008df0 <MX_I2C1_Init+0x50>)
 8008dde:	f002 fc13 	bl	800b608 <HAL_I2C_Init>
 8008de2:	4603      	mov	r3, r0
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d001      	beq.n	8008dec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8008de8:	f000 fa3c 	bl	8009264 <Error_Handler>
  }

}
 8008dec:	bf00      	nop
 8008dee:	bd80      	pop	{r7, pc}
 8008df0:	2000022c 	.word	0x2000022c
 8008df4:	40005400 	.word	0x40005400
 8008df8:	000186a0 	.word	0x000186a0

08008dfc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b08a      	sub	sp, #40	; 0x28
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008e04:	f107 0314 	add.w	r3, r7, #20
 8008e08:	2200      	movs	r2, #0
 8008e0a:	601a      	str	r2, [r3, #0]
 8008e0c:	605a      	str	r2, [r3, #4]
 8008e0e:	609a      	str	r2, [r3, #8]
 8008e10:	60da      	str	r2, [r3, #12]
 8008e12:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	4a19      	ldr	r2, [pc, #100]	; (8008e80 <HAL_I2C_MspInit+0x84>)
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	d12c      	bne.n	8008e78 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008e1e:	2300      	movs	r3, #0
 8008e20:	613b      	str	r3, [r7, #16]
 8008e22:	4b18      	ldr	r3, [pc, #96]	; (8008e84 <HAL_I2C_MspInit+0x88>)
 8008e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e26:	4a17      	ldr	r2, [pc, #92]	; (8008e84 <HAL_I2C_MspInit+0x88>)
 8008e28:	f043 0302 	orr.w	r3, r3, #2
 8008e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8008e2e:	4b15      	ldr	r3, [pc, #84]	; (8008e84 <HAL_I2C_MspInit+0x88>)
 8008e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e32:	f003 0302 	and.w	r3, r3, #2
 8008e36:	613b      	str	r3, [r7, #16]
 8008e38:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8008e3a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8008e3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008e40:	2312      	movs	r3, #18
 8008e42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008e44:	2301      	movs	r3, #1
 8008e46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008e48:	2300      	movs	r3, #0
 8008e4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8008e4c:	2304      	movs	r3, #4
 8008e4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008e50:	f107 0314 	add.w	r3, r7, #20
 8008e54:	4619      	mov	r1, r3
 8008e56:	480c      	ldr	r0, [pc, #48]	; (8008e88 <HAL_I2C_MspInit+0x8c>)
 8008e58:	f000 fd30 	bl	80098bc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	60fb      	str	r3, [r7, #12]
 8008e60:	4b08      	ldr	r3, [pc, #32]	; (8008e84 <HAL_I2C_MspInit+0x88>)
 8008e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e64:	4a07      	ldr	r2, [pc, #28]	; (8008e84 <HAL_I2C_MspInit+0x88>)
 8008e66:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008e6a:	6413      	str	r3, [r2, #64]	; 0x40
 8008e6c:	4b05      	ldr	r3, [pc, #20]	; (8008e84 <HAL_I2C_MspInit+0x88>)
 8008e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008e74:	60fb      	str	r3, [r7, #12]
 8008e76:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8008e78:	bf00      	nop
 8008e7a:	3728      	adds	r7, #40	; 0x28
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bd80      	pop	{r7, pc}
 8008e80:	40005400 	.word	0x40005400
 8008e84:	40023800 	.word	0x40023800
 8008e88:	40020400 	.word	0x40020400

08008e8c <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
I2S_HandleTypeDef hi2s3;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	af00      	add	r7, sp, #0

  hi2s2.Instance = SPI2;
 8008e90:	4b12      	ldr	r3, [pc, #72]	; (8008edc <MX_I2S2_Init+0x50>)
 8008e92:	4a13      	ldr	r2, [pc, #76]	; (8008ee0 <MX_I2S2_Init+0x54>)
 8008e94:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8008e96:	4b11      	ldr	r3, [pc, #68]	; (8008edc <MX_I2S2_Init+0x50>)
 8008e98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008e9c:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8008e9e:	4b0f      	ldr	r3, [pc, #60]	; (8008edc <MX_I2S2_Init+0x50>)
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8008ea4:	4b0d      	ldr	r3, [pc, #52]	; (8008edc <MX_I2S2_Init+0x50>)
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8008eaa:	4b0c      	ldr	r3, [pc, #48]	; (8008edc <MX_I2S2_Init+0x50>)
 8008eac:	2200      	movs	r2, #0
 8008eae:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8008eb0:	4b0a      	ldr	r3, [pc, #40]	; (8008edc <MX_I2S2_Init+0x50>)
 8008eb2:	4a0c      	ldr	r2, [pc, #48]	; (8008ee4 <MX_I2S2_Init+0x58>)
 8008eb4:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8008eb6:	4b09      	ldr	r3, [pc, #36]	; (8008edc <MX_I2S2_Init+0x50>)
 8008eb8:	2200      	movs	r2, #0
 8008eba:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8008ebc:	4b07      	ldr	r3, [pc, #28]	; (8008edc <MX_I2S2_Init+0x50>)
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8008ec2:	4b06      	ldr	r3, [pc, #24]	; (8008edc <MX_I2S2_Init+0x50>)
 8008ec4:	2201      	movs	r2, #1
 8008ec6:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8008ec8:	4804      	ldr	r0, [pc, #16]	; (8008edc <MX_I2S2_Init+0x50>)
 8008eca:	f002 fcd5 	bl	800b878 <HAL_I2S_Init>
 8008ece:	4603      	mov	r3, r0
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d001      	beq.n	8008ed8 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 8008ed4:	f000 f9c6 	bl	8009264 <Error_Handler>
  }

}
 8008ed8:	bf00      	nop
 8008eda:	bd80      	pop	{r7, pc}
 8008edc:	20000280 	.word	0x20000280
 8008ee0:	40003800 	.word	0x40003800
 8008ee4:	00017700 	.word	0x00017700

08008ee8 <MX_I2S3_Init>:
/* I2S3 init function */
void MX_I2S3_Init(void)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	af00      	add	r7, sp, #0

  hi2s3.Instance = SPI3;
 8008eec:	4b13      	ldr	r3, [pc, #76]	; (8008f3c <MX_I2S3_Init+0x54>)
 8008eee:	4a14      	ldr	r2, [pc, #80]	; (8008f40 <MX_I2S3_Init+0x58>)
 8008ef0:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8008ef2:	4b12      	ldr	r3, [pc, #72]	; (8008f3c <MX_I2S3_Init+0x54>)
 8008ef4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008ef8:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8008efa:	4b10      	ldr	r3, [pc, #64]	; (8008f3c <MX_I2S3_Init+0x54>)
 8008efc:	2200      	movs	r2, #0
 8008efe:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8008f00:	4b0e      	ldr	r3, [pc, #56]	; (8008f3c <MX_I2S3_Init+0x54>)
 8008f02:	2200      	movs	r2, #0
 8008f04:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8008f06:	4b0d      	ldr	r3, [pc, #52]	; (8008f3c <MX_I2S3_Init+0x54>)
 8008f08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008f0c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8008f0e:	4b0b      	ldr	r3, [pc, #44]	; (8008f3c <MX_I2S3_Init+0x54>)
 8008f10:	4a0c      	ldr	r2, [pc, #48]	; (8008f44 <MX_I2S3_Init+0x5c>)
 8008f12:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8008f14:	4b09      	ldr	r3, [pc, #36]	; (8008f3c <MX_I2S3_Init+0x54>)
 8008f16:	2200      	movs	r2, #0
 8008f18:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8008f1a:	4b08      	ldr	r3, [pc, #32]	; (8008f3c <MX_I2S3_Init+0x54>)
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8008f20:	4b06      	ldr	r3, [pc, #24]	; (8008f3c <MX_I2S3_Init+0x54>)
 8008f22:	2200      	movs	r2, #0
 8008f24:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8008f26:	4805      	ldr	r0, [pc, #20]	; (8008f3c <MX_I2S3_Init+0x54>)
 8008f28:	f002 fca6 	bl	800b878 <HAL_I2S_Init>
 8008f2c:	4603      	mov	r3, r0
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d001      	beq.n	8008f36 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8008f32:	f000 f997 	bl	8009264 <Error_Handler>
  }

}
 8008f36:	bf00      	nop
 8008f38:	bd80      	pop	{r7, pc}
 8008f3a:	bf00      	nop
 8008f3c:	200002c8 	.word	0x200002c8
 8008f40:	40003c00 	.word	0x40003c00
 8008f44:	00017700 	.word	0x00017700

08008f48 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b08e      	sub	sp, #56	; 0x38
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008f50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008f54:	2200      	movs	r2, #0
 8008f56:	601a      	str	r2, [r3, #0]
 8008f58:	605a      	str	r2, [r3, #4]
 8008f5a:	609a      	str	r2, [r3, #8]
 8008f5c:	60da      	str	r2, [r3, #12]
 8008f5e:	611a      	str	r2, [r3, #16]
  if(i2sHandle->Instance==SPI2)
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	4a59      	ldr	r2, [pc, #356]	; (80090cc <HAL_I2S_MspInit+0x184>)
 8008f66:	4293      	cmp	r3, r2
 8008f68:	d15b      	bne.n	8009022 <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	623b      	str	r3, [r7, #32]
 8008f6e:	4b58      	ldr	r3, [pc, #352]	; (80090d0 <HAL_I2S_MspInit+0x188>)
 8008f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f72:	4a57      	ldr	r2, [pc, #348]	; (80090d0 <HAL_I2S_MspInit+0x188>)
 8008f74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008f78:	6413      	str	r3, [r2, #64]	; 0x40
 8008f7a:	4b55      	ldr	r3, [pc, #340]	; (80090d0 <HAL_I2S_MspInit+0x188>)
 8008f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f82:	623b      	str	r3, [r7, #32]
 8008f84:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008f86:	2300      	movs	r3, #0
 8008f88:	61fb      	str	r3, [r7, #28]
 8008f8a:	4b51      	ldr	r3, [pc, #324]	; (80090d0 <HAL_I2S_MspInit+0x188>)
 8008f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f8e:	4a50      	ldr	r2, [pc, #320]	; (80090d0 <HAL_I2S_MspInit+0x188>)
 8008f90:	f043 0304 	orr.w	r3, r3, #4
 8008f94:	6313      	str	r3, [r2, #48]	; 0x30
 8008f96:	4b4e      	ldr	r3, [pc, #312]	; (80090d0 <HAL_I2S_MspInit+0x188>)
 8008f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f9a:	f003 0304 	and.w	r3, r3, #4
 8008f9e:	61fb      	str	r3, [r7, #28]
 8008fa0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	61bb      	str	r3, [r7, #24]
 8008fa6:	4b4a      	ldr	r3, [pc, #296]	; (80090d0 <HAL_I2S_MspInit+0x188>)
 8008fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008faa:	4a49      	ldr	r2, [pc, #292]	; (80090d0 <HAL_I2S_MspInit+0x188>)
 8008fac:	f043 0302 	orr.w	r3, r3, #2
 8008fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8008fb2:	4b47      	ldr	r3, [pc, #284]	; (80090d0 <HAL_I2S_MspInit+0x188>)
 8008fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fb6:	f003 0302 	and.w	r3, r3, #2
 8008fba:	61bb      	str	r3, [r7, #24]
 8008fbc:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8008fbe:	2304      	movs	r3, #4
 8008fc0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008fc2:	2302      	movs	r3, #2
 8008fc4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008fca:	2300      	movs	r3, #0
 8008fcc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8008fce:	2306      	movs	r3, #6
 8008fd0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008fd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008fd6:	4619      	mov	r1, r3
 8008fd8:	483e      	ldr	r0, [pc, #248]	; (80090d4 <HAL_I2S_MspInit+0x18c>)
 8008fda:	f000 fc6f 	bl	80098bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8008fde:	2308      	movs	r3, #8
 8008fe0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008fe2:	2302      	movs	r3, #2
 8008fe4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008fea:	2300      	movs	r3, #0
 8008fec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8008fee:	2305      	movs	r3, #5
 8008ff0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8008ff2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008ff6:	4619      	mov	r1, r3
 8008ff8:	4836      	ldr	r0, [pc, #216]	; (80090d4 <HAL_I2S_MspInit+0x18c>)
 8008ffa:	f000 fc5f 	bl	80098bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8008ffe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8009002:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009004:	2302      	movs	r3, #2
 8009006:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009008:	2300      	movs	r3, #0
 800900a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800900c:	2300      	movs	r3, #0
 800900e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8009010:	2305      	movs	r3, #5
 8009012:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009014:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009018:	4619      	mov	r1, r3
 800901a:	482f      	ldr	r0, [pc, #188]	; (80090d8 <HAL_I2S_MspInit+0x190>)
 800901c:	f000 fc4e 	bl	80098bc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8009020:	e04f      	b.n	80090c2 <HAL_I2S_MspInit+0x17a>
  else if(i2sHandle->Instance==SPI3)
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	4a2d      	ldr	r2, [pc, #180]	; (80090dc <HAL_I2S_MspInit+0x194>)
 8009028:	4293      	cmp	r3, r2
 800902a:	d14a      	bne.n	80090c2 <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800902c:	2300      	movs	r3, #0
 800902e:	617b      	str	r3, [r7, #20]
 8009030:	4b27      	ldr	r3, [pc, #156]	; (80090d0 <HAL_I2S_MspInit+0x188>)
 8009032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009034:	4a26      	ldr	r2, [pc, #152]	; (80090d0 <HAL_I2S_MspInit+0x188>)
 8009036:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800903a:	6413      	str	r3, [r2, #64]	; 0x40
 800903c:	4b24      	ldr	r3, [pc, #144]	; (80090d0 <HAL_I2S_MspInit+0x188>)
 800903e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009040:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009044:	617b      	str	r3, [r7, #20]
 8009046:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009048:	2300      	movs	r3, #0
 800904a:	613b      	str	r3, [r7, #16]
 800904c:	4b20      	ldr	r3, [pc, #128]	; (80090d0 <HAL_I2S_MspInit+0x188>)
 800904e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009050:	4a1f      	ldr	r2, [pc, #124]	; (80090d0 <HAL_I2S_MspInit+0x188>)
 8009052:	f043 0301 	orr.w	r3, r3, #1
 8009056:	6313      	str	r3, [r2, #48]	; 0x30
 8009058:	4b1d      	ldr	r3, [pc, #116]	; (80090d0 <HAL_I2S_MspInit+0x188>)
 800905a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800905c:	f003 0301 	and.w	r3, r3, #1
 8009060:	613b      	str	r3, [r7, #16]
 8009062:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009064:	2300      	movs	r3, #0
 8009066:	60fb      	str	r3, [r7, #12]
 8009068:	4b19      	ldr	r3, [pc, #100]	; (80090d0 <HAL_I2S_MspInit+0x188>)
 800906a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800906c:	4a18      	ldr	r2, [pc, #96]	; (80090d0 <HAL_I2S_MspInit+0x188>)
 800906e:	f043 0304 	orr.w	r3, r3, #4
 8009072:	6313      	str	r3, [r2, #48]	; 0x30
 8009074:	4b16      	ldr	r3, [pc, #88]	; (80090d0 <HAL_I2S_MspInit+0x188>)
 8009076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009078:	f003 0304 	and.w	r3, r3, #4
 800907c:	60fb      	str	r3, [r7, #12]
 800907e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8009080:	2310      	movs	r3, #16
 8009082:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009084:	2302      	movs	r3, #2
 8009086:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009088:	2300      	movs	r3, #0
 800908a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800908c:	2300      	movs	r3, #0
 800908e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8009090:	2306      	movs	r3, #6
 8009092:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8009094:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009098:	4619      	mov	r1, r3
 800909a:	4811      	ldr	r0, [pc, #68]	; (80090e0 <HAL_I2S_MspInit+0x198>)
 800909c:	f000 fc0e 	bl	80098bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80090a0:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80090a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80090a6:	2302      	movs	r3, #2
 80090a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80090aa:	2300      	movs	r3, #0
 80090ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80090ae:	2300      	movs	r3, #0
 80090b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80090b2:	2306      	movs	r3, #6
 80090b4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80090b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80090ba:	4619      	mov	r1, r3
 80090bc:	4805      	ldr	r0, [pc, #20]	; (80090d4 <HAL_I2S_MspInit+0x18c>)
 80090be:	f000 fbfd 	bl	80098bc <HAL_GPIO_Init>
}
 80090c2:	bf00      	nop
 80090c4:	3738      	adds	r7, #56	; 0x38
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bd80      	pop	{r7, pc}
 80090ca:	bf00      	nop
 80090cc:	40003800 	.word	0x40003800
 80090d0:	40023800 	.word	0x40023800
 80090d4:	40020800 	.word	0x40020800
 80090d8:	40020400 	.word	0x40020400
 80090dc:	40003c00 	.word	0x40003c00
 80090e0:	40020000 	.word	0x40020000

080090e4 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80090e4:	b480      	push	{r7}
 80090e6:	b085      	sub	sp, #20
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	4603      	mov	r3, r0
 80090ec:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == BUTTON_C_Pin)
 80090ee:	88fb      	ldrh	r3, [r7, #6]
 80090f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80090f4:	d104      	bne.n	8009100 <HAL_GPIO_EXTI_Callback+0x1c>
	{
		int a = 3;
 80090f6:	2303      	movs	r3, #3
 80090f8:	60fb      	str	r3, [r7, #12]
		a = a + 3;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	3303      	adds	r3, #3
 80090fe:	60fb      	str	r3, [r7, #12]

	}
}
 8009100:	bf00      	nop
 8009102:	3714      	adds	r7, #20
 8009104:	46bd      	mov	sp, r7
 8009106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910a:	4770      	bx	lr

0800910c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b082      	sub	sp, #8
 8009110:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8009112:	f000 fa2d 	bl	8009570 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8009116:	f000 f813 	bl	8009140 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800911a:	f7ff fd33 	bl	8008b84 <MX_GPIO_Init>
  MX_I2C1_Init();
 800911e:	f7ff fe3f 	bl	8008da0 <MX_I2C1_Init>
  MX_I2S2_Init();
 8009122:	f7ff feb3 	bl	8008e8c <MX_I2S2_Init>
  MX_I2S3_Init();
 8009126:	f7ff fedf 	bl	8008ee8 <MX_I2S3_Init>
  MX_SPI1_Init();
 800912a:	f000 f8a3 	bl	8009274 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 800912e:	f006 fe69 	bl	800fe04 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */

  tama::Main tamaMain;
  tamaMain.run();
 8009132:	1d3b      	adds	r3, r7, #4
 8009134:	4618      	mov	r0, r3
 8009136:	f7fb fc97 	bl	8004a68 <_ZN4tama4Main3runEv>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800913a:	f006 fe89 	bl	800fe50 <MX_USB_HOST_Process>
 800913e:	e7fc      	b.n	800913a <main+0x2e>

08009140 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b09a      	sub	sp, #104	; 0x68
 8009144:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009146:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800914a:	2230      	movs	r2, #48	; 0x30
 800914c:	2100      	movs	r1, #0
 800914e:	4618      	mov	r0, r3
 8009150:	f007 fbaa 	bl	80108a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009154:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009158:	2200      	movs	r2, #0
 800915a:	601a      	str	r2, [r3, #0]
 800915c:	605a      	str	r2, [r3, #4]
 800915e:	609a      	str	r2, [r3, #8]
 8009160:	60da      	str	r2, [r3, #12]
 8009162:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009164:	f107 030c 	add.w	r3, r7, #12
 8009168:	2200      	movs	r2, #0
 800916a:	601a      	str	r2, [r3, #0]
 800916c:	605a      	str	r2, [r3, #4]
 800916e:	609a      	str	r2, [r3, #8]
 8009170:	60da      	str	r2, [r3, #12]
 8009172:	611a      	str	r2, [r3, #16]
 8009174:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8009176:	2300      	movs	r3, #0
 8009178:	60bb      	str	r3, [r7, #8]
 800917a:	4b38      	ldr	r3, [pc, #224]	; (800925c <_Z18SystemClock_Configv+0x11c>)
 800917c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800917e:	4a37      	ldr	r2, [pc, #220]	; (800925c <_Z18SystemClock_Configv+0x11c>)
 8009180:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009184:	6413      	str	r3, [r2, #64]	; 0x40
 8009186:	4b35      	ldr	r3, [pc, #212]	; (800925c <_Z18SystemClock_Configv+0x11c>)
 8009188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800918a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800918e:	60bb      	str	r3, [r7, #8]
 8009190:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8009192:	2300      	movs	r3, #0
 8009194:	607b      	str	r3, [r7, #4]
 8009196:	4b32      	ldr	r3, [pc, #200]	; (8009260 <_Z18SystemClock_Configv+0x120>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	4a31      	ldr	r2, [pc, #196]	; (8009260 <_Z18SystemClock_Configv+0x120>)
 800919c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80091a0:	6013      	str	r3, [r2, #0]
 80091a2:	4b2f      	ldr	r3, [pc, #188]	; (8009260 <_Z18SystemClock_Configv+0x120>)
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80091aa:	607b      	str	r3, [r7, #4]
 80091ac:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80091ae:	2301      	movs	r3, #1
 80091b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80091b2:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80091b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80091b8:	2302      	movs	r3, #2
 80091ba:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80091bc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80091c0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 80091c2:	2304      	movs	r3, #4
 80091c4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 80091c6:	23c0      	movs	r3, #192	; 0xc0
 80091c8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80091ca:	2304      	movs	r3, #4
 80091cc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80091ce:	2308      	movs	r3, #8
 80091d0:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80091d2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80091d6:	4618      	mov	r0, r3
 80091d8:	f002 ffee 	bl	800c1b8 <HAL_RCC_OscConfig>
 80091dc:	4603      	mov	r3, r0
 80091de:	2b00      	cmp	r3, #0
 80091e0:	bf14      	ite	ne
 80091e2:	2301      	movne	r3, #1
 80091e4:	2300      	moveq	r3, #0
 80091e6:	b2db      	uxtb	r3, r3
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d001      	beq.n	80091f0 <_Z18SystemClock_Configv+0xb0>
  {
    Error_Handler();
 80091ec:	f000 f83a 	bl	8009264 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80091f0:	230f      	movs	r3, #15
 80091f2:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80091f4:	2302      	movs	r3, #2
 80091f6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80091f8:	2300      	movs	r3, #0
 80091fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80091fc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8009200:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8009202:	2300      	movs	r3, #0
 8009204:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8009206:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800920a:	2103      	movs	r1, #3
 800920c:	4618      	mov	r0, r3
 800920e:	f003 fa43 	bl	800c698 <HAL_RCC_ClockConfig>
 8009212:	4603      	mov	r3, r0
 8009214:	2b00      	cmp	r3, #0
 8009216:	bf14      	ite	ne
 8009218:	2301      	movne	r3, #1
 800921a:	2300      	moveq	r3, #0
 800921c:	b2db      	uxtb	r3, r3
 800921e:	2b00      	cmp	r3, #0
 8009220:	d001      	beq.n	8009226 <_Z18SystemClock_Configv+0xe6>
  {
    Error_Handler();
 8009222:	f000 f81f 	bl	8009264 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8009226:	2301      	movs	r3, #1
 8009228:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 800922a:	23c8      	movs	r3, #200	; 0xc8
 800922c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 800922e:	2305      	movs	r3, #5
 8009230:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8009232:	2302      	movs	r3, #2
 8009234:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009236:	f107 030c 	add.w	r3, r7, #12
 800923a:	4618      	mov	r0, r3
 800923c:	f003 fc0a 	bl	800ca54 <HAL_RCCEx_PeriphCLKConfig>
 8009240:	4603      	mov	r3, r0
 8009242:	2b00      	cmp	r3, #0
 8009244:	bf14      	ite	ne
 8009246:	2301      	movne	r3, #1
 8009248:	2300      	moveq	r3, #0
 800924a:	b2db      	uxtb	r3, r3
 800924c:	2b00      	cmp	r3, #0
 800924e:	d001      	beq.n	8009254 <_Z18SystemClock_Configv+0x114>
  {
    Error_Handler();
 8009250:	f000 f808 	bl	8009264 <Error_Handler>
  }
}
 8009254:	bf00      	nop
 8009256:	3768      	adds	r7, #104	; 0x68
 8009258:	46bd      	mov	sp, r7
 800925a:	bd80      	pop	{r7, pc}
 800925c:	40023800 	.word	0x40023800
 8009260:	40007000 	.word	0x40007000

08009264 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009264:	b480      	push	{r7}
 8009266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8009268:	bf00      	nop
 800926a:	46bd      	mov	sp, r7
 800926c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009270:	4770      	bx	lr
	...

08009274 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8009278:	4b17      	ldr	r3, [pc, #92]	; (80092d8 <MX_SPI1_Init+0x64>)
 800927a:	4a18      	ldr	r2, [pc, #96]	; (80092dc <MX_SPI1_Init+0x68>)
 800927c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800927e:	4b16      	ldr	r3, [pc, #88]	; (80092d8 <MX_SPI1_Init+0x64>)
 8009280:	f44f 7282 	mov.w	r2, #260	; 0x104
 8009284:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8009286:	4b14      	ldr	r3, [pc, #80]	; (80092d8 <MX_SPI1_Init+0x64>)
 8009288:	2200      	movs	r2, #0
 800928a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800928c:	4b12      	ldr	r3, [pc, #72]	; (80092d8 <MX_SPI1_Init+0x64>)
 800928e:	2200      	movs	r2, #0
 8009290:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8009292:	4b11      	ldr	r3, [pc, #68]	; (80092d8 <MX_SPI1_Init+0x64>)
 8009294:	2200      	movs	r2, #0
 8009296:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8009298:	4b0f      	ldr	r3, [pc, #60]	; (80092d8 <MX_SPI1_Init+0x64>)
 800929a:	2200      	movs	r2, #0
 800929c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800929e:	4b0e      	ldr	r3, [pc, #56]	; (80092d8 <MX_SPI1_Init+0x64>)
 80092a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80092a4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80092a6:	4b0c      	ldr	r3, [pc, #48]	; (80092d8 <MX_SPI1_Init+0x64>)
 80092a8:	2220      	movs	r2, #32
 80092aa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80092ac:	4b0a      	ldr	r3, [pc, #40]	; (80092d8 <MX_SPI1_Init+0x64>)
 80092ae:	2200      	movs	r2, #0
 80092b0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80092b2:	4b09      	ldr	r3, [pc, #36]	; (80092d8 <MX_SPI1_Init+0x64>)
 80092b4:	2200      	movs	r2, #0
 80092b6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80092b8:	4b07      	ldr	r3, [pc, #28]	; (80092d8 <MX_SPI1_Init+0x64>)
 80092ba:	2200      	movs	r2, #0
 80092bc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80092be:	4b06      	ldr	r3, [pc, #24]	; (80092d8 <MX_SPI1_Init+0x64>)
 80092c0:	220a      	movs	r2, #10
 80092c2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80092c4:	4804      	ldr	r0, [pc, #16]	; (80092d8 <MX_SPI1_Init+0x64>)
 80092c6:	f003 fd13 	bl	800ccf0 <HAL_SPI_Init>
 80092ca:	4603      	mov	r3, r0
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d001      	beq.n	80092d4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80092d0:	f7ff ffc8 	bl	8009264 <Error_Handler>
  }

}
 80092d4:	bf00      	nop
 80092d6:	bd80      	pop	{r7, pc}
 80092d8:	20000310 	.word	0x20000310
 80092dc:	40013000 	.word	0x40013000

080092e0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b08a      	sub	sp, #40	; 0x28
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80092e8:	f107 0314 	add.w	r3, r7, #20
 80092ec:	2200      	movs	r2, #0
 80092ee:	601a      	str	r2, [r3, #0]
 80092f0:	605a      	str	r2, [r3, #4]
 80092f2:	609a      	str	r2, [r3, #8]
 80092f4:	60da      	str	r2, [r3, #12]
 80092f6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	4a19      	ldr	r2, [pc, #100]	; (8009364 <HAL_SPI_MspInit+0x84>)
 80092fe:	4293      	cmp	r3, r2
 8009300:	d12b      	bne.n	800935a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8009302:	2300      	movs	r3, #0
 8009304:	613b      	str	r3, [r7, #16]
 8009306:	4b18      	ldr	r3, [pc, #96]	; (8009368 <HAL_SPI_MspInit+0x88>)
 8009308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800930a:	4a17      	ldr	r2, [pc, #92]	; (8009368 <HAL_SPI_MspInit+0x88>)
 800930c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009310:	6453      	str	r3, [r2, #68]	; 0x44
 8009312:	4b15      	ldr	r3, [pc, #84]	; (8009368 <HAL_SPI_MspInit+0x88>)
 8009314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009316:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800931a:	613b      	str	r3, [r7, #16]
 800931c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800931e:	2300      	movs	r3, #0
 8009320:	60fb      	str	r3, [r7, #12]
 8009322:	4b11      	ldr	r3, [pc, #68]	; (8009368 <HAL_SPI_MspInit+0x88>)
 8009324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009326:	4a10      	ldr	r2, [pc, #64]	; (8009368 <HAL_SPI_MspInit+0x88>)
 8009328:	f043 0301 	orr.w	r3, r3, #1
 800932c:	6313      	str	r3, [r2, #48]	; 0x30
 800932e:	4b0e      	ldr	r3, [pc, #56]	; (8009368 <HAL_SPI_MspInit+0x88>)
 8009330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009332:	f003 0301 	and.w	r3, r3, #1
 8009336:	60fb      	str	r3, [r7, #12]
 8009338:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800933a:	23e0      	movs	r3, #224	; 0xe0
 800933c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800933e:	2302      	movs	r3, #2
 8009340:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009342:	2300      	movs	r3, #0
 8009344:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009346:	2303      	movs	r3, #3
 8009348:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800934a:	2305      	movs	r3, #5
 800934c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800934e:	f107 0314 	add.w	r3, r7, #20
 8009352:	4619      	mov	r1, r3
 8009354:	4805      	ldr	r0, [pc, #20]	; (800936c <HAL_SPI_MspInit+0x8c>)
 8009356:	f000 fab1 	bl	80098bc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800935a:	bf00      	nop
 800935c:	3728      	adds	r7, #40	; 0x28
 800935e:	46bd      	mov	sp, r7
 8009360:	bd80      	pop	{r7, pc}
 8009362:	bf00      	nop
 8009364:	40013000 	.word	0x40013000
 8009368:	40023800 	.word	0x40023800
 800936c:	40020000 	.word	0x40020000

08009370 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b082      	sub	sp, #8
 8009374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009376:	2300      	movs	r3, #0
 8009378:	607b      	str	r3, [r7, #4]
 800937a:	4b10      	ldr	r3, [pc, #64]	; (80093bc <HAL_MspInit+0x4c>)
 800937c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800937e:	4a0f      	ldr	r2, [pc, #60]	; (80093bc <HAL_MspInit+0x4c>)
 8009380:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009384:	6453      	str	r3, [r2, #68]	; 0x44
 8009386:	4b0d      	ldr	r3, [pc, #52]	; (80093bc <HAL_MspInit+0x4c>)
 8009388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800938a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800938e:	607b      	str	r3, [r7, #4]
 8009390:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8009392:	2300      	movs	r3, #0
 8009394:	603b      	str	r3, [r7, #0]
 8009396:	4b09      	ldr	r3, [pc, #36]	; (80093bc <HAL_MspInit+0x4c>)
 8009398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800939a:	4a08      	ldr	r2, [pc, #32]	; (80093bc <HAL_MspInit+0x4c>)
 800939c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80093a0:	6413      	str	r3, [r2, #64]	; 0x40
 80093a2:	4b06      	ldr	r3, [pc, #24]	; (80093bc <HAL_MspInit+0x4c>)
 80093a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80093aa:	603b      	str	r3, [r7, #0]
 80093ac:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80093ae:	2007      	movs	r0, #7
 80093b0:	f000 fa42 	bl	8009838 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80093b4:	bf00      	nop
 80093b6:	3708      	adds	r7, #8
 80093b8:	46bd      	mov	sp, r7
 80093ba:	bd80      	pop	{r7, pc}
 80093bc:	40023800 	.word	0x40023800

080093c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80093c0:	b480      	push	{r7}
 80093c2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80093c4:	bf00      	nop
 80093c6:	46bd      	mov	sp, r7
 80093c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093cc:	4770      	bx	lr

080093ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80093ce:	b480      	push	{r7}
 80093d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80093d2:	e7fe      	b.n	80093d2 <HardFault_Handler+0x4>

080093d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80093d4:	b480      	push	{r7}
 80093d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80093d8:	e7fe      	b.n	80093d8 <MemManage_Handler+0x4>

080093da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80093da:	b480      	push	{r7}
 80093dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80093de:	e7fe      	b.n	80093de <BusFault_Handler+0x4>

080093e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80093e0:	b480      	push	{r7}
 80093e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80093e4:	e7fe      	b.n	80093e4 <UsageFault_Handler+0x4>

080093e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80093e6:	b480      	push	{r7}
 80093e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80093ea:	bf00      	nop
 80093ec:	46bd      	mov	sp, r7
 80093ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f2:	4770      	bx	lr

080093f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80093f4:	b480      	push	{r7}
 80093f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80093f8:	bf00      	nop
 80093fa:	46bd      	mov	sp, r7
 80093fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009400:	4770      	bx	lr

08009402 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8009402:	b480      	push	{r7}
 8009404:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8009406:	bf00      	nop
 8009408:	46bd      	mov	sp, r7
 800940a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940e:	4770      	bx	lr

08009410 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8009414:	f000 f8fe 	bl	8009614 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009418:	bf00      	nop
 800941a:	bd80      	pop	{r7, pc}

0800941c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800941c:	b580      	push	{r7, lr}
 800941e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8009420:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8009424:	f000 fbe6 	bl	8009bf4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8009428:	bf00      	nop
 800942a:	bd80      	pop	{r7, pc}

0800942c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8009430:	4802      	ldr	r0, [pc, #8]	; (800943c <OTG_FS_IRQHandler+0x10>)
 8009432:	f000 fe87 	bl	800a144 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8009436:	bf00      	nop
 8009438:	bd80      	pop	{r7, pc}
 800943a:	bf00      	nop
 800943c:	20000744 	.word	0x20000744

08009440 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8009440:	b480      	push	{r7}
 8009442:	af00      	add	r7, sp, #0
	return 1;
 8009444:	2301      	movs	r3, #1
}
 8009446:	4618      	mov	r0, r3
 8009448:	46bd      	mov	sp, r7
 800944a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944e:	4770      	bx	lr

08009450 <_kill>:

int _kill(int pid, int sig)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b082      	sub	sp, #8
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
 8009458:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800945a:	f007 f9c7 	bl	80107ec <__errno>
 800945e:	4602      	mov	r2, r0
 8009460:	2316      	movs	r3, #22
 8009462:	6013      	str	r3, [r2, #0]
	return -1;
 8009464:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8009468:	4618      	mov	r0, r3
 800946a:	3708      	adds	r7, #8
 800946c:	46bd      	mov	sp, r7
 800946e:	bd80      	pop	{r7, pc}

08009470 <_exit>:

void _exit (int status)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b082      	sub	sp, #8
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8009478:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f7ff ffe7 	bl	8009450 <_kill>
	while (1) {}		/* Make sure we hang here */
 8009482:	e7fe      	b.n	8009482 <_exit+0x12>

08009484 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b086      	sub	sp, #24
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800948c:	4a14      	ldr	r2, [pc, #80]	; (80094e0 <_sbrk+0x5c>)
 800948e:	4b15      	ldr	r3, [pc, #84]	; (80094e4 <_sbrk+0x60>)
 8009490:	1ad3      	subs	r3, r2, r3
 8009492:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8009494:	697b      	ldr	r3, [r7, #20]
 8009496:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8009498:	4b13      	ldr	r3, [pc, #76]	; (80094e8 <_sbrk+0x64>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d102      	bne.n	80094a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80094a0:	4b11      	ldr	r3, [pc, #68]	; (80094e8 <_sbrk+0x64>)
 80094a2:	4a12      	ldr	r2, [pc, #72]	; (80094ec <_sbrk+0x68>)
 80094a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80094a6:	4b10      	ldr	r3, [pc, #64]	; (80094e8 <_sbrk+0x64>)
 80094a8:	681a      	ldr	r2, [r3, #0]
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	4413      	add	r3, r2
 80094ae:	693a      	ldr	r2, [r7, #16]
 80094b0:	429a      	cmp	r2, r3
 80094b2:	d207      	bcs.n	80094c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80094b4:	f007 f99a 	bl	80107ec <__errno>
 80094b8:	4602      	mov	r2, r0
 80094ba:	230c      	movs	r3, #12
 80094bc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80094be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80094c2:	e009      	b.n	80094d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80094c4:	4b08      	ldr	r3, [pc, #32]	; (80094e8 <_sbrk+0x64>)
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80094ca:	4b07      	ldr	r3, [pc, #28]	; (80094e8 <_sbrk+0x64>)
 80094cc:	681a      	ldr	r2, [r3, #0]
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	4413      	add	r3, r2
 80094d2:	4a05      	ldr	r2, [pc, #20]	; (80094e8 <_sbrk+0x64>)
 80094d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80094d6:	68fb      	ldr	r3, [r7, #12]
}
 80094d8:	4618      	mov	r0, r3
 80094da:	3718      	adds	r7, #24
 80094dc:	46bd      	mov	sp, r7
 80094de:	bd80      	pop	{r7, pc}
 80094e0:	20020000 	.word	0x20020000
 80094e4:	00000400 	.word	0x00000400
 80094e8:	20000214 	.word	0x20000214
 80094ec:	20000a10 	.word	0x20000a10

080094f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80094f0:	b480      	push	{r7}
 80094f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80094f4:	4b08      	ldr	r3, [pc, #32]	; (8009518 <SystemInit+0x28>)
 80094f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094fa:	4a07      	ldr	r2, [pc, #28]	; (8009518 <SystemInit+0x28>)
 80094fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009500:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8009504:	4b04      	ldr	r3, [pc, #16]	; (8009518 <SystemInit+0x28>)
 8009506:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800950a:	609a      	str	r2, [r3, #8]
#endif
}
 800950c:	bf00      	nop
 800950e:	46bd      	mov	sp, r7
 8009510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009514:	4770      	bx	lr
 8009516:	bf00      	nop
 8009518:	e000ed00 	.word	0xe000ed00

0800951c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800951c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009554 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8009520:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8009522:	e003      	b.n	800952c <LoopCopyDataInit>

08009524 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8009524:	4b0c      	ldr	r3, [pc, #48]	; (8009558 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8009526:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8009528:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800952a:	3104      	adds	r1, #4

0800952c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800952c:	480b      	ldr	r0, [pc, #44]	; (800955c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800952e:	4b0c      	ldr	r3, [pc, #48]	; (8009560 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8009530:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8009532:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8009534:	d3f6      	bcc.n	8009524 <CopyDataInit>
  ldr  r2, =_sbss
 8009536:	4a0b      	ldr	r2, [pc, #44]	; (8009564 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8009538:	e002      	b.n	8009540 <LoopFillZerobss>

0800953a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800953a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800953c:	f842 3b04 	str.w	r3, [r2], #4

08009540 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8009540:	4b09      	ldr	r3, [pc, #36]	; (8009568 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8009542:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8009544:	d3f9      	bcc.n	800953a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8009546:	f7ff ffd3 	bl	80094f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800954a:	f007 f955 	bl	80107f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800954e:	f7ff fddd 	bl	800910c <main>
  bx  lr    
 8009552:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8009554:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8009558:	08011ad0 	.word	0x08011ad0
  ldr  r0, =_sdata
 800955c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8009560:	200001f8 	.word	0x200001f8
  ldr  r2, =_sbss
 8009564:	200001f8 	.word	0x200001f8
  ldr  r3, = _ebss
 8009568:	20000a0c 	.word	0x20000a0c

0800956c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800956c:	e7fe      	b.n	800956c <ADC_IRQHandler>
	...

08009570 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009570:	b580      	push	{r7, lr}
 8009572:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8009574:	4b0e      	ldr	r3, [pc, #56]	; (80095b0 <HAL_Init+0x40>)
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	4a0d      	ldr	r2, [pc, #52]	; (80095b0 <HAL_Init+0x40>)
 800957a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800957e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8009580:	4b0b      	ldr	r3, [pc, #44]	; (80095b0 <HAL_Init+0x40>)
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	4a0a      	ldr	r2, [pc, #40]	; (80095b0 <HAL_Init+0x40>)
 8009586:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800958a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800958c:	4b08      	ldr	r3, [pc, #32]	; (80095b0 <HAL_Init+0x40>)
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	4a07      	ldr	r2, [pc, #28]	; (80095b0 <HAL_Init+0x40>)
 8009592:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009596:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009598:	2003      	movs	r0, #3
 800959a:	f000 f94d 	bl	8009838 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800959e:	2000      	movs	r0, #0
 80095a0:	f000 f808 	bl	80095b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80095a4:	f7ff fee4 	bl	8009370 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80095a8:	2300      	movs	r3, #0
}
 80095aa:	4618      	mov	r0, r3
 80095ac:	bd80      	pop	{r7, pc}
 80095ae:	bf00      	nop
 80095b0:	40023c00 	.word	0x40023c00

080095b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b082      	sub	sp, #8
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80095bc:	4b12      	ldr	r3, [pc, #72]	; (8009608 <HAL_InitTick+0x54>)
 80095be:	681a      	ldr	r2, [r3, #0]
 80095c0:	4b12      	ldr	r3, [pc, #72]	; (800960c <HAL_InitTick+0x58>)
 80095c2:	781b      	ldrb	r3, [r3, #0]
 80095c4:	4619      	mov	r1, r3
 80095c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80095ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80095ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80095d2:	4618      	mov	r0, r3
 80095d4:	f000 f965 	bl	80098a2 <HAL_SYSTICK_Config>
 80095d8:	4603      	mov	r3, r0
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d001      	beq.n	80095e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80095de:	2301      	movs	r3, #1
 80095e0:	e00e      	b.n	8009600 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	2b0f      	cmp	r3, #15
 80095e6:	d80a      	bhi.n	80095fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80095e8:	2200      	movs	r2, #0
 80095ea:	6879      	ldr	r1, [r7, #4]
 80095ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80095f0:	f000 f92d 	bl	800984e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80095f4:	4a06      	ldr	r2, [pc, #24]	; (8009610 <HAL_InitTick+0x5c>)
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80095fa:	2300      	movs	r3, #0
 80095fc:	e000      	b.n	8009600 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80095fe:	2301      	movs	r3, #1
}
 8009600:	4618      	mov	r0, r3
 8009602:	3708      	adds	r7, #8
 8009604:	46bd      	mov	sp, r7
 8009606:	bd80      	pop	{r7, pc}
 8009608:	20000164 	.word	0x20000164
 800960c:	2000016c 	.word	0x2000016c
 8009610:	20000168 	.word	0x20000168

08009614 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009614:	b480      	push	{r7}
 8009616:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009618:	4b06      	ldr	r3, [pc, #24]	; (8009634 <HAL_IncTick+0x20>)
 800961a:	781b      	ldrb	r3, [r3, #0]
 800961c:	461a      	mov	r2, r3
 800961e:	4b06      	ldr	r3, [pc, #24]	; (8009638 <HAL_IncTick+0x24>)
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	4413      	add	r3, r2
 8009624:	4a04      	ldr	r2, [pc, #16]	; (8009638 <HAL_IncTick+0x24>)
 8009626:	6013      	str	r3, [r2, #0]
}
 8009628:	bf00      	nop
 800962a:	46bd      	mov	sp, r7
 800962c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009630:	4770      	bx	lr
 8009632:	bf00      	nop
 8009634:	2000016c 	.word	0x2000016c
 8009638:	20000368 	.word	0x20000368

0800963c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800963c:	b480      	push	{r7}
 800963e:	af00      	add	r7, sp, #0
  return uwTick;
 8009640:	4b03      	ldr	r3, [pc, #12]	; (8009650 <HAL_GetTick+0x14>)
 8009642:	681b      	ldr	r3, [r3, #0]
}
 8009644:	4618      	mov	r0, r3
 8009646:	46bd      	mov	sp, r7
 8009648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964c:	4770      	bx	lr
 800964e:	bf00      	nop
 8009650:	20000368 	.word	0x20000368

08009654 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b084      	sub	sp, #16
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800965c:	f7ff ffee 	bl	800963c <HAL_GetTick>
 8009660:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800966c:	d005      	beq.n	800967a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800966e:	4b09      	ldr	r3, [pc, #36]	; (8009694 <HAL_Delay+0x40>)
 8009670:	781b      	ldrb	r3, [r3, #0]
 8009672:	461a      	mov	r2, r3
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	4413      	add	r3, r2
 8009678:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800967a:	bf00      	nop
 800967c:	f7ff ffde 	bl	800963c <HAL_GetTick>
 8009680:	4602      	mov	r2, r0
 8009682:	68bb      	ldr	r3, [r7, #8]
 8009684:	1ad3      	subs	r3, r2, r3
 8009686:	68fa      	ldr	r2, [r7, #12]
 8009688:	429a      	cmp	r2, r3
 800968a:	d8f7      	bhi.n	800967c <HAL_Delay+0x28>
  {
  }
}
 800968c:	bf00      	nop
 800968e:	3710      	adds	r7, #16
 8009690:	46bd      	mov	sp, r7
 8009692:	bd80      	pop	{r7, pc}
 8009694:	2000016c 	.word	0x2000016c

08009698 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009698:	b480      	push	{r7}
 800969a:	b085      	sub	sp, #20
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	f003 0307 	and.w	r3, r3, #7
 80096a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80096a8:	4b0c      	ldr	r3, [pc, #48]	; (80096dc <__NVIC_SetPriorityGrouping+0x44>)
 80096aa:	68db      	ldr	r3, [r3, #12]
 80096ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80096ae:	68ba      	ldr	r2, [r7, #8]
 80096b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80096b4:	4013      	ands	r3, r2
 80096b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80096bc:	68bb      	ldr	r3, [r7, #8]
 80096be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80096c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80096c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80096c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80096ca:	4a04      	ldr	r2, [pc, #16]	; (80096dc <__NVIC_SetPriorityGrouping+0x44>)
 80096cc:	68bb      	ldr	r3, [r7, #8]
 80096ce:	60d3      	str	r3, [r2, #12]
}
 80096d0:	bf00      	nop
 80096d2:	3714      	adds	r7, #20
 80096d4:	46bd      	mov	sp, r7
 80096d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096da:	4770      	bx	lr
 80096dc:	e000ed00 	.word	0xe000ed00

080096e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80096e0:	b480      	push	{r7}
 80096e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80096e4:	4b04      	ldr	r3, [pc, #16]	; (80096f8 <__NVIC_GetPriorityGrouping+0x18>)
 80096e6:	68db      	ldr	r3, [r3, #12]
 80096e8:	0a1b      	lsrs	r3, r3, #8
 80096ea:	f003 0307 	and.w	r3, r3, #7
}
 80096ee:	4618      	mov	r0, r3
 80096f0:	46bd      	mov	sp, r7
 80096f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f6:	4770      	bx	lr
 80096f8:	e000ed00 	.word	0xe000ed00

080096fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80096fc:	b480      	push	{r7}
 80096fe:	b083      	sub	sp, #12
 8009700:	af00      	add	r7, sp, #0
 8009702:	4603      	mov	r3, r0
 8009704:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800970a:	2b00      	cmp	r3, #0
 800970c:	db0b      	blt.n	8009726 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800970e:	79fb      	ldrb	r3, [r7, #7]
 8009710:	f003 021f 	and.w	r2, r3, #31
 8009714:	4907      	ldr	r1, [pc, #28]	; (8009734 <__NVIC_EnableIRQ+0x38>)
 8009716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800971a:	095b      	lsrs	r3, r3, #5
 800971c:	2001      	movs	r0, #1
 800971e:	fa00 f202 	lsl.w	r2, r0, r2
 8009722:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8009726:	bf00      	nop
 8009728:	370c      	adds	r7, #12
 800972a:	46bd      	mov	sp, r7
 800972c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009730:	4770      	bx	lr
 8009732:	bf00      	nop
 8009734:	e000e100 	.word	0xe000e100

08009738 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009738:	b480      	push	{r7}
 800973a:	b083      	sub	sp, #12
 800973c:	af00      	add	r7, sp, #0
 800973e:	4603      	mov	r3, r0
 8009740:	6039      	str	r1, [r7, #0]
 8009742:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009744:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009748:	2b00      	cmp	r3, #0
 800974a:	db0a      	blt.n	8009762 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	b2da      	uxtb	r2, r3
 8009750:	490c      	ldr	r1, [pc, #48]	; (8009784 <__NVIC_SetPriority+0x4c>)
 8009752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009756:	0112      	lsls	r2, r2, #4
 8009758:	b2d2      	uxtb	r2, r2
 800975a:	440b      	add	r3, r1
 800975c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009760:	e00a      	b.n	8009778 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	b2da      	uxtb	r2, r3
 8009766:	4908      	ldr	r1, [pc, #32]	; (8009788 <__NVIC_SetPriority+0x50>)
 8009768:	79fb      	ldrb	r3, [r7, #7]
 800976a:	f003 030f 	and.w	r3, r3, #15
 800976e:	3b04      	subs	r3, #4
 8009770:	0112      	lsls	r2, r2, #4
 8009772:	b2d2      	uxtb	r2, r2
 8009774:	440b      	add	r3, r1
 8009776:	761a      	strb	r2, [r3, #24]
}
 8009778:	bf00      	nop
 800977a:	370c      	adds	r7, #12
 800977c:	46bd      	mov	sp, r7
 800977e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009782:	4770      	bx	lr
 8009784:	e000e100 	.word	0xe000e100
 8009788:	e000ed00 	.word	0xe000ed00

0800978c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800978c:	b480      	push	{r7}
 800978e:	b089      	sub	sp, #36	; 0x24
 8009790:	af00      	add	r7, sp, #0
 8009792:	60f8      	str	r0, [r7, #12]
 8009794:	60b9      	str	r1, [r7, #8]
 8009796:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	f003 0307 	and.w	r3, r3, #7
 800979e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80097a0:	69fb      	ldr	r3, [r7, #28]
 80097a2:	f1c3 0307 	rsb	r3, r3, #7
 80097a6:	2b04      	cmp	r3, #4
 80097a8:	bf28      	it	cs
 80097aa:	2304      	movcs	r3, #4
 80097ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80097ae:	69fb      	ldr	r3, [r7, #28]
 80097b0:	3304      	adds	r3, #4
 80097b2:	2b06      	cmp	r3, #6
 80097b4:	d902      	bls.n	80097bc <NVIC_EncodePriority+0x30>
 80097b6:	69fb      	ldr	r3, [r7, #28]
 80097b8:	3b03      	subs	r3, #3
 80097ba:	e000      	b.n	80097be <NVIC_EncodePriority+0x32>
 80097bc:	2300      	movs	r3, #0
 80097be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80097c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80097c4:	69bb      	ldr	r3, [r7, #24]
 80097c6:	fa02 f303 	lsl.w	r3, r2, r3
 80097ca:	43da      	mvns	r2, r3
 80097cc:	68bb      	ldr	r3, [r7, #8]
 80097ce:	401a      	ands	r2, r3
 80097d0:	697b      	ldr	r3, [r7, #20]
 80097d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80097d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80097d8:	697b      	ldr	r3, [r7, #20]
 80097da:	fa01 f303 	lsl.w	r3, r1, r3
 80097de:	43d9      	mvns	r1, r3
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80097e4:	4313      	orrs	r3, r2
         );
}
 80097e6:	4618      	mov	r0, r3
 80097e8:	3724      	adds	r7, #36	; 0x24
 80097ea:	46bd      	mov	sp, r7
 80097ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f0:	4770      	bx	lr
	...

080097f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b082      	sub	sp, #8
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	3b01      	subs	r3, #1
 8009800:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009804:	d301      	bcc.n	800980a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009806:	2301      	movs	r3, #1
 8009808:	e00f      	b.n	800982a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800980a:	4a0a      	ldr	r2, [pc, #40]	; (8009834 <SysTick_Config+0x40>)
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	3b01      	subs	r3, #1
 8009810:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009812:	210f      	movs	r1, #15
 8009814:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009818:	f7ff ff8e 	bl	8009738 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800981c:	4b05      	ldr	r3, [pc, #20]	; (8009834 <SysTick_Config+0x40>)
 800981e:	2200      	movs	r2, #0
 8009820:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009822:	4b04      	ldr	r3, [pc, #16]	; (8009834 <SysTick_Config+0x40>)
 8009824:	2207      	movs	r2, #7
 8009826:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009828:	2300      	movs	r3, #0
}
 800982a:	4618      	mov	r0, r3
 800982c:	3708      	adds	r7, #8
 800982e:	46bd      	mov	sp, r7
 8009830:	bd80      	pop	{r7, pc}
 8009832:	bf00      	nop
 8009834:	e000e010 	.word	0xe000e010

08009838 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b082      	sub	sp, #8
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009840:	6878      	ldr	r0, [r7, #4]
 8009842:	f7ff ff29 	bl	8009698 <__NVIC_SetPriorityGrouping>
}
 8009846:	bf00      	nop
 8009848:	3708      	adds	r7, #8
 800984a:	46bd      	mov	sp, r7
 800984c:	bd80      	pop	{r7, pc}

0800984e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800984e:	b580      	push	{r7, lr}
 8009850:	b086      	sub	sp, #24
 8009852:	af00      	add	r7, sp, #0
 8009854:	4603      	mov	r3, r0
 8009856:	60b9      	str	r1, [r7, #8]
 8009858:	607a      	str	r2, [r7, #4]
 800985a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800985c:	2300      	movs	r3, #0
 800985e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009860:	f7ff ff3e 	bl	80096e0 <__NVIC_GetPriorityGrouping>
 8009864:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009866:	687a      	ldr	r2, [r7, #4]
 8009868:	68b9      	ldr	r1, [r7, #8]
 800986a:	6978      	ldr	r0, [r7, #20]
 800986c:	f7ff ff8e 	bl	800978c <NVIC_EncodePriority>
 8009870:	4602      	mov	r2, r0
 8009872:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009876:	4611      	mov	r1, r2
 8009878:	4618      	mov	r0, r3
 800987a:	f7ff ff5d 	bl	8009738 <__NVIC_SetPriority>
}
 800987e:	bf00      	nop
 8009880:	3718      	adds	r7, #24
 8009882:	46bd      	mov	sp, r7
 8009884:	bd80      	pop	{r7, pc}

08009886 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009886:	b580      	push	{r7, lr}
 8009888:	b082      	sub	sp, #8
 800988a:	af00      	add	r7, sp, #0
 800988c:	4603      	mov	r3, r0
 800988e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009890:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009894:	4618      	mov	r0, r3
 8009896:	f7ff ff31 	bl	80096fc <__NVIC_EnableIRQ>
}
 800989a:	bf00      	nop
 800989c:	3708      	adds	r7, #8
 800989e:	46bd      	mov	sp, r7
 80098a0:	bd80      	pop	{r7, pc}

080098a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80098a2:	b580      	push	{r7, lr}
 80098a4:	b082      	sub	sp, #8
 80098a6:	af00      	add	r7, sp, #0
 80098a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80098aa:	6878      	ldr	r0, [r7, #4]
 80098ac:	f7ff ffa2 	bl	80097f4 <SysTick_Config>
 80098b0:	4603      	mov	r3, r0
}
 80098b2:	4618      	mov	r0, r3
 80098b4:	3708      	adds	r7, #8
 80098b6:	46bd      	mov	sp, r7
 80098b8:	bd80      	pop	{r7, pc}
	...

080098bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80098bc:	b480      	push	{r7}
 80098be:	b089      	sub	sp, #36	; 0x24
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
 80098c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80098c6:	2300      	movs	r3, #0
 80098c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80098ca:	2300      	movs	r3, #0
 80098cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80098ce:	2300      	movs	r3, #0
 80098d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80098d2:	2300      	movs	r3, #0
 80098d4:	61fb      	str	r3, [r7, #28]
 80098d6:	e159      	b.n	8009b8c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80098d8:	2201      	movs	r2, #1
 80098da:	69fb      	ldr	r3, [r7, #28]
 80098dc:	fa02 f303 	lsl.w	r3, r2, r3
 80098e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	697a      	ldr	r2, [r7, #20]
 80098e8:	4013      	ands	r3, r2
 80098ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80098ec:	693a      	ldr	r2, [r7, #16]
 80098ee:	697b      	ldr	r3, [r7, #20]
 80098f0:	429a      	cmp	r2, r3
 80098f2:	f040 8148 	bne.w	8009b86 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	685b      	ldr	r3, [r3, #4]
 80098fa:	2b01      	cmp	r3, #1
 80098fc:	d00b      	beq.n	8009916 <HAL_GPIO_Init+0x5a>
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	685b      	ldr	r3, [r3, #4]
 8009902:	2b02      	cmp	r3, #2
 8009904:	d007      	beq.n	8009916 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800990a:	2b11      	cmp	r3, #17
 800990c:	d003      	beq.n	8009916 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	685b      	ldr	r3, [r3, #4]
 8009912:	2b12      	cmp	r3, #18
 8009914:	d130      	bne.n	8009978 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	689b      	ldr	r3, [r3, #8]
 800991a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800991c:	69fb      	ldr	r3, [r7, #28]
 800991e:	005b      	lsls	r3, r3, #1
 8009920:	2203      	movs	r2, #3
 8009922:	fa02 f303 	lsl.w	r3, r2, r3
 8009926:	43db      	mvns	r3, r3
 8009928:	69ba      	ldr	r2, [r7, #24]
 800992a:	4013      	ands	r3, r2
 800992c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	68da      	ldr	r2, [r3, #12]
 8009932:	69fb      	ldr	r3, [r7, #28]
 8009934:	005b      	lsls	r3, r3, #1
 8009936:	fa02 f303 	lsl.w	r3, r2, r3
 800993a:	69ba      	ldr	r2, [r7, #24]
 800993c:	4313      	orrs	r3, r2
 800993e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	69ba      	ldr	r2, [r7, #24]
 8009944:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	685b      	ldr	r3, [r3, #4]
 800994a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800994c:	2201      	movs	r2, #1
 800994e:	69fb      	ldr	r3, [r7, #28]
 8009950:	fa02 f303 	lsl.w	r3, r2, r3
 8009954:	43db      	mvns	r3, r3
 8009956:	69ba      	ldr	r2, [r7, #24]
 8009958:	4013      	ands	r3, r2
 800995a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	685b      	ldr	r3, [r3, #4]
 8009960:	091b      	lsrs	r3, r3, #4
 8009962:	f003 0201 	and.w	r2, r3, #1
 8009966:	69fb      	ldr	r3, [r7, #28]
 8009968:	fa02 f303 	lsl.w	r3, r2, r3
 800996c:	69ba      	ldr	r2, [r7, #24]
 800996e:	4313      	orrs	r3, r2
 8009970:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	69ba      	ldr	r2, [r7, #24]
 8009976:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	68db      	ldr	r3, [r3, #12]
 800997c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800997e:	69fb      	ldr	r3, [r7, #28]
 8009980:	005b      	lsls	r3, r3, #1
 8009982:	2203      	movs	r2, #3
 8009984:	fa02 f303 	lsl.w	r3, r2, r3
 8009988:	43db      	mvns	r3, r3
 800998a:	69ba      	ldr	r2, [r7, #24]
 800998c:	4013      	ands	r3, r2
 800998e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	689a      	ldr	r2, [r3, #8]
 8009994:	69fb      	ldr	r3, [r7, #28]
 8009996:	005b      	lsls	r3, r3, #1
 8009998:	fa02 f303 	lsl.w	r3, r2, r3
 800999c:	69ba      	ldr	r2, [r7, #24]
 800999e:	4313      	orrs	r3, r2
 80099a0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	69ba      	ldr	r2, [r7, #24]
 80099a6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	685b      	ldr	r3, [r3, #4]
 80099ac:	2b02      	cmp	r3, #2
 80099ae:	d003      	beq.n	80099b8 <HAL_GPIO_Init+0xfc>
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	685b      	ldr	r3, [r3, #4]
 80099b4:	2b12      	cmp	r3, #18
 80099b6:	d123      	bne.n	8009a00 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80099b8:	69fb      	ldr	r3, [r7, #28]
 80099ba:	08da      	lsrs	r2, r3, #3
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	3208      	adds	r2, #8
 80099c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80099c6:	69fb      	ldr	r3, [r7, #28]
 80099c8:	f003 0307 	and.w	r3, r3, #7
 80099cc:	009b      	lsls	r3, r3, #2
 80099ce:	220f      	movs	r2, #15
 80099d0:	fa02 f303 	lsl.w	r3, r2, r3
 80099d4:	43db      	mvns	r3, r3
 80099d6:	69ba      	ldr	r2, [r7, #24]
 80099d8:	4013      	ands	r3, r2
 80099da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	691a      	ldr	r2, [r3, #16]
 80099e0:	69fb      	ldr	r3, [r7, #28]
 80099e2:	f003 0307 	and.w	r3, r3, #7
 80099e6:	009b      	lsls	r3, r3, #2
 80099e8:	fa02 f303 	lsl.w	r3, r2, r3
 80099ec:	69ba      	ldr	r2, [r7, #24]
 80099ee:	4313      	orrs	r3, r2
 80099f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80099f2:	69fb      	ldr	r3, [r7, #28]
 80099f4:	08da      	lsrs	r2, r3, #3
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	3208      	adds	r2, #8
 80099fa:	69b9      	ldr	r1, [r7, #24]
 80099fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8009a06:	69fb      	ldr	r3, [r7, #28]
 8009a08:	005b      	lsls	r3, r3, #1
 8009a0a:	2203      	movs	r2, #3
 8009a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8009a10:	43db      	mvns	r3, r3
 8009a12:	69ba      	ldr	r2, [r7, #24]
 8009a14:	4013      	ands	r3, r2
 8009a16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	685b      	ldr	r3, [r3, #4]
 8009a1c:	f003 0203 	and.w	r2, r3, #3
 8009a20:	69fb      	ldr	r3, [r7, #28]
 8009a22:	005b      	lsls	r3, r3, #1
 8009a24:	fa02 f303 	lsl.w	r3, r2, r3
 8009a28:	69ba      	ldr	r2, [r7, #24]
 8009a2a:	4313      	orrs	r3, r2
 8009a2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	69ba      	ldr	r2, [r7, #24]
 8009a32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009a34:	683b      	ldr	r3, [r7, #0]
 8009a36:	685b      	ldr	r3, [r3, #4]
 8009a38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	f000 80a2 	beq.w	8009b86 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009a42:	2300      	movs	r3, #0
 8009a44:	60fb      	str	r3, [r7, #12]
 8009a46:	4b56      	ldr	r3, [pc, #344]	; (8009ba0 <HAL_GPIO_Init+0x2e4>)
 8009a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a4a:	4a55      	ldr	r2, [pc, #340]	; (8009ba0 <HAL_GPIO_Init+0x2e4>)
 8009a4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009a50:	6453      	str	r3, [r2, #68]	; 0x44
 8009a52:	4b53      	ldr	r3, [pc, #332]	; (8009ba0 <HAL_GPIO_Init+0x2e4>)
 8009a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009a5a:	60fb      	str	r3, [r7, #12]
 8009a5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009a5e:	4a51      	ldr	r2, [pc, #324]	; (8009ba4 <HAL_GPIO_Init+0x2e8>)
 8009a60:	69fb      	ldr	r3, [r7, #28]
 8009a62:	089b      	lsrs	r3, r3, #2
 8009a64:	3302      	adds	r3, #2
 8009a66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8009a6c:	69fb      	ldr	r3, [r7, #28]
 8009a6e:	f003 0303 	and.w	r3, r3, #3
 8009a72:	009b      	lsls	r3, r3, #2
 8009a74:	220f      	movs	r2, #15
 8009a76:	fa02 f303 	lsl.w	r3, r2, r3
 8009a7a:	43db      	mvns	r3, r3
 8009a7c:	69ba      	ldr	r2, [r7, #24]
 8009a7e:	4013      	ands	r3, r2
 8009a80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	4a48      	ldr	r2, [pc, #288]	; (8009ba8 <HAL_GPIO_Init+0x2ec>)
 8009a86:	4293      	cmp	r3, r2
 8009a88:	d019      	beq.n	8009abe <HAL_GPIO_Init+0x202>
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	4a47      	ldr	r2, [pc, #284]	; (8009bac <HAL_GPIO_Init+0x2f0>)
 8009a8e:	4293      	cmp	r3, r2
 8009a90:	d013      	beq.n	8009aba <HAL_GPIO_Init+0x1fe>
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	4a46      	ldr	r2, [pc, #280]	; (8009bb0 <HAL_GPIO_Init+0x2f4>)
 8009a96:	4293      	cmp	r3, r2
 8009a98:	d00d      	beq.n	8009ab6 <HAL_GPIO_Init+0x1fa>
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	4a45      	ldr	r2, [pc, #276]	; (8009bb4 <HAL_GPIO_Init+0x2f8>)
 8009a9e:	4293      	cmp	r3, r2
 8009aa0:	d007      	beq.n	8009ab2 <HAL_GPIO_Init+0x1f6>
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	4a44      	ldr	r2, [pc, #272]	; (8009bb8 <HAL_GPIO_Init+0x2fc>)
 8009aa6:	4293      	cmp	r3, r2
 8009aa8:	d101      	bne.n	8009aae <HAL_GPIO_Init+0x1f2>
 8009aaa:	2304      	movs	r3, #4
 8009aac:	e008      	b.n	8009ac0 <HAL_GPIO_Init+0x204>
 8009aae:	2307      	movs	r3, #7
 8009ab0:	e006      	b.n	8009ac0 <HAL_GPIO_Init+0x204>
 8009ab2:	2303      	movs	r3, #3
 8009ab4:	e004      	b.n	8009ac0 <HAL_GPIO_Init+0x204>
 8009ab6:	2302      	movs	r3, #2
 8009ab8:	e002      	b.n	8009ac0 <HAL_GPIO_Init+0x204>
 8009aba:	2301      	movs	r3, #1
 8009abc:	e000      	b.n	8009ac0 <HAL_GPIO_Init+0x204>
 8009abe:	2300      	movs	r3, #0
 8009ac0:	69fa      	ldr	r2, [r7, #28]
 8009ac2:	f002 0203 	and.w	r2, r2, #3
 8009ac6:	0092      	lsls	r2, r2, #2
 8009ac8:	4093      	lsls	r3, r2
 8009aca:	69ba      	ldr	r2, [r7, #24]
 8009acc:	4313      	orrs	r3, r2
 8009ace:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009ad0:	4934      	ldr	r1, [pc, #208]	; (8009ba4 <HAL_GPIO_Init+0x2e8>)
 8009ad2:	69fb      	ldr	r3, [r7, #28]
 8009ad4:	089b      	lsrs	r3, r3, #2
 8009ad6:	3302      	adds	r3, #2
 8009ad8:	69ba      	ldr	r2, [r7, #24]
 8009ada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009ade:	4b37      	ldr	r3, [pc, #220]	; (8009bbc <HAL_GPIO_Init+0x300>)
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009ae4:	693b      	ldr	r3, [r7, #16]
 8009ae6:	43db      	mvns	r3, r3
 8009ae8:	69ba      	ldr	r2, [r7, #24]
 8009aea:	4013      	ands	r3, r2
 8009aec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	685b      	ldr	r3, [r3, #4]
 8009af2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d003      	beq.n	8009b02 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8009afa:	69ba      	ldr	r2, [r7, #24]
 8009afc:	693b      	ldr	r3, [r7, #16]
 8009afe:	4313      	orrs	r3, r2
 8009b00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8009b02:	4a2e      	ldr	r2, [pc, #184]	; (8009bbc <HAL_GPIO_Init+0x300>)
 8009b04:	69bb      	ldr	r3, [r7, #24]
 8009b06:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8009b08:	4b2c      	ldr	r3, [pc, #176]	; (8009bbc <HAL_GPIO_Init+0x300>)
 8009b0a:	685b      	ldr	r3, [r3, #4]
 8009b0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009b0e:	693b      	ldr	r3, [r7, #16]
 8009b10:	43db      	mvns	r3, r3
 8009b12:	69ba      	ldr	r2, [r7, #24]
 8009b14:	4013      	ands	r3, r2
 8009b16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	685b      	ldr	r3, [r3, #4]
 8009b1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d003      	beq.n	8009b2c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8009b24:	69ba      	ldr	r2, [r7, #24]
 8009b26:	693b      	ldr	r3, [r7, #16]
 8009b28:	4313      	orrs	r3, r2
 8009b2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8009b2c:	4a23      	ldr	r2, [pc, #140]	; (8009bbc <HAL_GPIO_Init+0x300>)
 8009b2e:	69bb      	ldr	r3, [r7, #24]
 8009b30:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009b32:	4b22      	ldr	r3, [pc, #136]	; (8009bbc <HAL_GPIO_Init+0x300>)
 8009b34:	689b      	ldr	r3, [r3, #8]
 8009b36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009b38:	693b      	ldr	r3, [r7, #16]
 8009b3a:	43db      	mvns	r3, r3
 8009b3c:	69ba      	ldr	r2, [r7, #24]
 8009b3e:	4013      	ands	r3, r2
 8009b40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	685b      	ldr	r3, [r3, #4]
 8009b46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d003      	beq.n	8009b56 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8009b4e:	69ba      	ldr	r2, [r7, #24]
 8009b50:	693b      	ldr	r3, [r7, #16]
 8009b52:	4313      	orrs	r3, r2
 8009b54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8009b56:	4a19      	ldr	r2, [pc, #100]	; (8009bbc <HAL_GPIO_Init+0x300>)
 8009b58:	69bb      	ldr	r3, [r7, #24]
 8009b5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8009b5c:	4b17      	ldr	r3, [pc, #92]	; (8009bbc <HAL_GPIO_Init+0x300>)
 8009b5e:	68db      	ldr	r3, [r3, #12]
 8009b60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009b62:	693b      	ldr	r3, [r7, #16]
 8009b64:	43db      	mvns	r3, r3
 8009b66:	69ba      	ldr	r2, [r7, #24]
 8009b68:	4013      	ands	r3, r2
 8009b6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	685b      	ldr	r3, [r3, #4]
 8009b70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d003      	beq.n	8009b80 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8009b78:	69ba      	ldr	r2, [r7, #24]
 8009b7a:	693b      	ldr	r3, [r7, #16]
 8009b7c:	4313      	orrs	r3, r2
 8009b7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8009b80:	4a0e      	ldr	r2, [pc, #56]	; (8009bbc <HAL_GPIO_Init+0x300>)
 8009b82:	69bb      	ldr	r3, [r7, #24]
 8009b84:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009b86:	69fb      	ldr	r3, [r7, #28]
 8009b88:	3301      	adds	r3, #1
 8009b8a:	61fb      	str	r3, [r7, #28]
 8009b8c:	69fb      	ldr	r3, [r7, #28]
 8009b8e:	2b0f      	cmp	r3, #15
 8009b90:	f67f aea2 	bls.w	80098d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8009b94:	bf00      	nop
 8009b96:	3724      	adds	r7, #36	; 0x24
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9e:	4770      	bx	lr
 8009ba0:	40023800 	.word	0x40023800
 8009ba4:	40013800 	.word	0x40013800
 8009ba8:	40020000 	.word	0x40020000
 8009bac:	40020400 	.word	0x40020400
 8009bb0:	40020800 	.word	0x40020800
 8009bb4:	40020c00 	.word	0x40020c00
 8009bb8:	40021000 	.word	0x40021000
 8009bbc:	40013c00 	.word	0x40013c00

08009bc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009bc0:	b480      	push	{r7}
 8009bc2:	b083      	sub	sp, #12
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
 8009bc8:	460b      	mov	r3, r1
 8009bca:	807b      	strh	r3, [r7, #2]
 8009bcc:	4613      	mov	r3, r2
 8009bce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009bd0:	787b      	ldrb	r3, [r7, #1]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d003      	beq.n	8009bde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009bd6:	887a      	ldrh	r2, [r7, #2]
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8009bdc:	e003      	b.n	8009be6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8009bde:	887b      	ldrh	r3, [r7, #2]
 8009be0:	041a      	lsls	r2, r3, #16
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	619a      	str	r2, [r3, #24]
}
 8009be6:	bf00      	nop
 8009be8:	370c      	adds	r7, #12
 8009bea:	46bd      	mov	sp, r7
 8009bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf0:	4770      	bx	lr
	...

08009bf4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b082      	sub	sp, #8
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	4603      	mov	r3, r0
 8009bfc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8009bfe:	4b08      	ldr	r3, [pc, #32]	; (8009c20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009c00:	695a      	ldr	r2, [r3, #20]
 8009c02:	88fb      	ldrh	r3, [r7, #6]
 8009c04:	4013      	ands	r3, r2
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d006      	beq.n	8009c18 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8009c0a:	4a05      	ldr	r2, [pc, #20]	; (8009c20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009c0c:	88fb      	ldrh	r3, [r7, #6]
 8009c0e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009c10:	88fb      	ldrh	r3, [r7, #6]
 8009c12:	4618      	mov	r0, r3
 8009c14:	f7ff fa66 	bl	80090e4 <HAL_GPIO_EXTI_Callback>
  }
}
 8009c18:	bf00      	nop
 8009c1a:	3708      	adds	r7, #8
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	bd80      	pop	{r7, pc}
 8009c20:	40013c00 	.word	0x40013c00

08009c24 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8009c24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c26:	b08f      	sub	sp, #60	; 0x3c
 8009c28:	af0a      	add	r7, sp, #40	; 0x28
 8009c2a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d101      	bne.n	8009c36 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8009c32:	2301      	movs	r3, #1
 8009c34:	e054      	b.n	8009ce0 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8009c42:	b2db      	uxtb	r3, r3
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d106      	bne.n	8009c56 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8009c50:	6878      	ldr	r0, [r7, #4]
 8009c52:	f006 f935 	bl	800fec0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	2203      	movs	r2, #3
 8009c5a:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d102      	bne.n	8009c70 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	4618      	mov	r0, r3
 8009c76:	f003 faf1 	bl	800d25c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	603b      	str	r3, [r7, #0]
 8009c80:	687e      	ldr	r6, [r7, #4]
 8009c82:	466d      	mov	r5, sp
 8009c84:	f106 0410 	add.w	r4, r6, #16
 8009c88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009c8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009c8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009c8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009c90:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009c94:	e885 0003 	stmia.w	r5, {r0, r1}
 8009c98:	1d33      	adds	r3, r6, #4
 8009c9a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009c9c:	6838      	ldr	r0, [r7, #0]
 8009c9e:	f003 fa6b 	bl	800d178 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	2101      	movs	r1, #1
 8009ca8:	4618      	mov	r0, r3
 8009caa:	f003 fae8 	bl	800d27e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	603b      	str	r3, [r7, #0]
 8009cb4:	687e      	ldr	r6, [r7, #4]
 8009cb6:	466d      	mov	r5, sp
 8009cb8:	f106 0410 	add.w	r4, r6, #16
 8009cbc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009cbe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009cc0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009cc2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009cc4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009cc8:	e885 0003 	stmia.w	r5, {r0, r1}
 8009ccc:	1d33      	adds	r3, r6, #4
 8009cce:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009cd0:	6838      	ldr	r0, [r7, #0]
 8009cd2:	f003 fbfb 	bl	800d4cc <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	2201      	movs	r2, #1
 8009cda:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8009cde:	2300      	movs	r3, #0
}
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	3714      	adds	r7, #20
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009ce8 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8009ce8:	b590      	push	{r4, r7, lr}
 8009cea:	b089      	sub	sp, #36	; 0x24
 8009cec:	af04      	add	r7, sp, #16
 8009cee:	6078      	str	r0, [r7, #4]
 8009cf0:	4608      	mov	r0, r1
 8009cf2:	4611      	mov	r1, r2
 8009cf4:	461a      	mov	r2, r3
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	70fb      	strb	r3, [r7, #3]
 8009cfa:	460b      	mov	r3, r1
 8009cfc:	70bb      	strb	r3, [r7, #2]
 8009cfe:	4613      	mov	r3, r2
 8009d00:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8009d08:	2b01      	cmp	r3, #1
 8009d0a:	d101      	bne.n	8009d10 <HAL_HCD_HC_Init+0x28>
 8009d0c:	2302      	movs	r3, #2
 8009d0e:	e07f      	b.n	8009e10 <HAL_HCD_HC_Init+0x128>
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	2201      	movs	r2, #1
 8009d14:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8009d18:	78fa      	ldrb	r2, [r7, #3]
 8009d1a:	6879      	ldr	r1, [r7, #4]
 8009d1c:	4613      	mov	r3, r2
 8009d1e:	009b      	lsls	r3, r3, #2
 8009d20:	4413      	add	r3, r2
 8009d22:	00db      	lsls	r3, r3, #3
 8009d24:	440b      	add	r3, r1
 8009d26:	333d      	adds	r3, #61	; 0x3d
 8009d28:	2200      	movs	r2, #0
 8009d2a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8009d2c:	78fa      	ldrb	r2, [r7, #3]
 8009d2e:	6879      	ldr	r1, [r7, #4]
 8009d30:	4613      	mov	r3, r2
 8009d32:	009b      	lsls	r3, r3, #2
 8009d34:	4413      	add	r3, r2
 8009d36:	00db      	lsls	r3, r3, #3
 8009d38:	440b      	add	r3, r1
 8009d3a:	3338      	adds	r3, #56	; 0x38
 8009d3c:	787a      	ldrb	r2, [r7, #1]
 8009d3e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8009d40:	78fa      	ldrb	r2, [r7, #3]
 8009d42:	6879      	ldr	r1, [r7, #4]
 8009d44:	4613      	mov	r3, r2
 8009d46:	009b      	lsls	r3, r3, #2
 8009d48:	4413      	add	r3, r2
 8009d4a:	00db      	lsls	r3, r3, #3
 8009d4c:	440b      	add	r3, r1
 8009d4e:	3340      	adds	r3, #64	; 0x40
 8009d50:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8009d52:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8009d54:	78fa      	ldrb	r2, [r7, #3]
 8009d56:	6879      	ldr	r1, [r7, #4]
 8009d58:	4613      	mov	r3, r2
 8009d5a:	009b      	lsls	r3, r3, #2
 8009d5c:	4413      	add	r3, r2
 8009d5e:	00db      	lsls	r3, r3, #3
 8009d60:	440b      	add	r3, r1
 8009d62:	3339      	adds	r3, #57	; 0x39
 8009d64:	78fa      	ldrb	r2, [r7, #3]
 8009d66:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8009d68:	78fa      	ldrb	r2, [r7, #3]
 8009d6a:	6879      	ldr	r1, [r7, #4]
 8009d6c:	4613      	mov	r3, r2
 8009d6e:	009b      	lsls	r3, r3, #2
 8009d70:	4413      	add	r3, r2
 8009d72:	00db      	lsls	r3, r3, #3
 8009d74:	440b      	add	r3, r1
 8009d76:	333f      	adds	r3, #63	; 0x3f
 8009d78:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8009d7c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8009d7e:	78fa      	ldrb	r2, [r7, #3]
 8009d80:	78bb      	ldrb	r3, [r7, #2]
 8009d82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d86:	b2d8      	uxtb	r0, r3
 8009d88:	6879      	ldr	r1, [r7, #4]
 8009d8a:	4613      	mov	r3, r2
 8009d8c:	009b      	lsls	r3, r3, #2
 8009d8e:	4413      	add	r3, r2
 8009d90:	00db      	lsls	r3, r3, #3
 8009d92:	440b      	add	r3, r1
 8009d94:	333a      	adds	r3, #58	; 0x3a
 8009d96:	4602      	mov	r2, r0
 8009d98:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8009d9a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	da0a      	bge.n	8009db8 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8009da2:	78fa      	ldrb	r2, [r7, #3]
 8009da4:	6879      	ldr	r1, [r7, #4]
 8009da6:	4613      	mov	r3, r2
 8009da8:	009b      	lsls	r3, r3, #2
 8009daa:	4413      	add	r3, r2
 8009dac:	00db      	lsls	r3, r3, #3
 8009dae:	440b      	add	r3, r1
 8009db0:	333b      	adds	r3, #59	; 0x3b
 8009db2:	2201      	movs	r2, #1
 8009db4:	701a      	strb	r2, [r3, #0]
 8009db6:	e009      	b.n	8009dcc <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8009db8:	78fa      	ldrb	r2, [r7, #3]
 8009dba:	6879      	ldr	r1, [r7, #4]
 8009dbc:	4613      	mov	r3, r2
 8009dbe:	009b      	lsls	r3, r3, #2
 8009dc0:	4413      	add	r3, r2
 8009dc2:	00db      	lsls	r3, r3, #3
 8009dc4:	440b      	add	r3, r1
 8009dc6:	333b      	adds	r3, #59	; 0x3b
 8009dc8:	2200      	movs	r2, #0
 8009dca:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8009dcc:	78fa      	ldrb	r2, [r7, #3]
 8009dce:	6879      	ldr	r1, [r7, #4]
 8009dd0:	4613      	mov	r3, r2
 8009dd2:	009b      	lsls	r3, r3, #2
 8009dd4:	4413      	add	r3, r2
 8009dd6:	00db      	lsls	r3, r3, #3
 8009dd8:	440b      	add	r3, r1
 8009dda:	333c      	adds	r3, #60	; 0x3c
 8009ddc:	f897 2020 	ldrb.w	r2, [r7, #32]
 8009de0:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	6818      	ldr	r0, [r3, #0]
 8009de6:	787c      	ldrb	r4, [r7, #1]
 8009de8:	78ba      	ldrb	r2, [r7, #2]
 8009dea:	78f9      	ldrb	r1, [r7, #3]
 8009dec:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009dee:	9302      	str	r3, [sp, #8]
 8009df0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009df4:	9301      	str	r3, [sp, #4]
 8009df6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009dfa:	9300      	str	r3, [sp, #0]
 8009dfc:	4623      	mov	r3, r4
 8009dfe:	f003 fce7 	bl	800d7d0 <USB_HC_Init>
 8009e02:	4603      	mov	r3, r0
 8009e04:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	2200      	movs	r2, #0
 8009e0a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8009e0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e10:	4618      	mov	r0, r3
 8009e12:	3714      	adds	r7, #20
 8009e14:	46bd      	mov	sp, r7
 8009e16:	bd90      	pop	{r4, r7, pc}

08009e18 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b084      	sub	sp, #16
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
 8009e20:	460b      	mov	r3, r1
 8009e22:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8009e24:	2300      	movs	r3, #0
 8009e26:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8009e2e:	2b01      	cmp	r3, #1
 8009e30:	d101      	bne.n	8009e36 <HAL_HCD_HC_Halt+0x1e>
 8009e32:	2302      	movs	r3, #2
 8009e34:	e00f      	b.n	8009e56 <HAL_HCD_HC_Halt+0x3e>
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	2201      	movs	r2, #1
 8009e3a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	78fa      	ldrb	r2, [r7, #3]
 8009e44:	4611      	mov	r1, r2
 8009e46:	4618      	mov	r0, r3
 8009e48:	f003 ff23 	bl	800dc92 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	2200      	movs	r2, #0
 8009e50:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8009e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e56:	4618      	mov	r0, r3
 8009e58:	3710      	adds	r7, #16
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	bd80      	pop	{r7, pc}
	...

08009e60 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b082      	sub	sp, #8
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
 8009e68:	4608      	mov	r0, r1
 8009e6a:	4611      	mov	r1, r2
 8009e6c:	461a      	mov	r2, r3
 8009e6e:	4603      	mov	r3, r0
 8009e70:	70fb      	strb	r3, [r7, #3]
 8009e72:	460b      	mov	r3, r1
 8009e74:	70bb      	strb	r3, [r7, #2]
 8009e76:	4613      	mov	r3, r2
 8009e78:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8009e7a:	78fa      	ldrb	r2, [r7, #3]
 8009e7c:	6879      	ldr	r1, [r7, #4]
 8009e7e:	4613      	mov	r3, r2
 8009e80:	009b      	lsls	r3, r3, #2
 8009e82:	4413      	add	r3, r2
 8009e84:	00db      	lsls	r3, r3, #3
 8009e86:	440b      	add	r3, r1
 8009e88:	333b      	adds	r3, #59	; 0x3b
 8009e8a:	78ba      	ldrb	r2, [r7, #2]
 8009e8c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8009e8e:	78fa      	ldrb	r2, [r7, #3]
 8009e90:	6879      	ldr	r1, [r7, #4]
 8009e92:	4613      	mov	r3, r2
 8009e94:	009b      	lsls	r3, r3, #2
 8009e96:	4413      	add	r3, r2
 8009e98:	00db      	lsls	r3, r3, #3
 8009e9a:	440b      	add	r3, r1
 8009e9c:	333f      	adds	r3, #63	; 0x3f
 8009e9e:	787a      	ldrb	r2, [r7, #1]
 8009ea0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8009ea2:	7c3b      	ldrb	r3, [r7, #16]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d114      	bne.n	8009ed2 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8009ea8:	78fa      	ldrb	r2, [r7, #3]
 8009eaa:	6879      	ldr	r1, [r7, #4]
 8009eac:	4613      	mov	r3, r2
 8009eae:	009b      	lsls	r3, r3, #2
 8009eb0:	4413      	add	r3, r2
 8009eb2:	00db      	lsls	r3, r3, #3
 8009eb4:	440b      	add	r3, r1
 8009eb6:	3342      	adds	r3, #66	; 0x42
 8009eb8:	2203      	movs	r2, #3
 8009eba:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8009ebc:	78fa      	ldrb	r2, [r7, #3]
 8009ebe:	6879      	ldr	r1, [r7, #4]
 8009ec0:	4613      	mov	r3, r2
 8009ec2:	009b      	lsls	r3, r3, #2
 8009ec4:	4413      	add	r3, r2
 8009ec6:	00db      	lsls	r3, r3, #3
 8009ec8:	440b      	add	r3, r1
 8009eca:	333d      	adds	r3, #61	; 0x3d
 8009ecc:	7f3a      	ldrb	r2, [r7, #28]
 8009ece:	701a      	strb	r2, [r3, #0]
 8009ed0:	e009      	b.n	8009ee6 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8009ed2:	78fa      	ldrb	r2, [r7, #3]
 8009ed4:	6879      	ldr	r1, [r7, #4]
 8009ed6:	4613      	mov	r3, r2
 8009ed8:	009b      	lsls	r3, r3, #2
 8009eda:	4413      	add	r3, r2
 8009edc:	00db      	lsls	r3, r3, #3
 8009ede:	440b      	add	r3, r1
 8009ee0:	3342      	adds	r3, #66	; 0x42
 8009ee2:	2202      	movs	r2, #2
 8009ee4:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8009ee6:	787b      	ldrb	r3, [r7, #1]
 8009ee8:	2b03      	cmp	r3, #3
 8009eea:	f200 80d6 	bhi.w	800a09a <HAL_HCD_HC_SubmitRequest+0x23a>
 8009eee:	a201      	add	r2, pc, #4	; (adr r2, 8009ef4 <HAL_HCD_HC_SubmitRequest+0x94>)
 8009ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ef4:	08009f05 	.word	0x08009f05
 8009ef8:	0800a085 	.word	0x0800a085
 8009efc:	08009f71 	.word	0x08009f71
 8009f00:	08009ffb 	.word	0x08009ffb
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8009f04:	7c3b      	ldrb	r3, [r7, #16]
 8009f06:	2b01      	cmp	r3, #1
 8009f08:	f040 80c9 	bne.w	800a09e <HAL_HCD_HC_SubmitRequest+0x23e>
 8009f0c:	78bb      	ldrb	r3, [r7, #2]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	f040 80c5 	bne.w	800a09e <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8009f14:	8b3b      	ldrh	r3, [r7, #24]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d109      	bne.n	8009f2e <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8009f1a:	78fa      	ldrb	r2, [r7, #3]
 8009f1c:	6879      	ldr	r1, [r7, #4]
 8009f1e:	4613      	mov	r3, r2
 8009f20:	009b      	lsls	r3, r3, #2
 8009f22:	4413      	add	r3, r2
 8009f24:	00db      	lsls	r3, r3, #3
 8009f26:	440b      	add	r3, r1
 8009f28:	3351      	adds	r3, #81	; 0x51
 8009f2a:	2201      	movs	r2, #1
 8009f2c:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8009f2e:	78fa      	ldrb	r2, [r7, #3]
 8009f30:	6879      	ldr	r1, [r7, #4]
 8009f32:	4613      	mov	r3, r2
 8009f34:	009b      	lsls	r3, r3, #2
 8009f36:	4413      	add	r3, r2
 8009f38:	00db      	lsls	r3, r3, #3
 8009f3a:	440b      	add	r3, r1
 8009f3c:	3351      	adds	r3, #81	; 0x51
 8009f3e:	781b      	ldrb	r3, [r3, #0]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d10a      	bne.n	8009f5a <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8009f44:	78fa      	ldrb	r2, [r7, #3]
 8009f46:	6879      	ldr	r1, [r7, #4]
 8009f48:	4613      	mov	r3, r2
 8009f4a:	009b      	lsls	r3, r3, #2
 8009f4c:	4413      	add	r3, r2
 8009f4e:	00db      	lsls	r3, r3, #3
 8009f50:	440b      	add	r3, r1
 8009f52:	3342      	adds	r3, #66	; 0x42
 8009f54:	2200      	movs	r2, #0
 8009f56:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8009f58:	e0a1      	b.n	800a09e <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8009f5a:	78fa      	ldrb	r2, [r7, #3]
 8009f5c:	6879      	ldr	r1, [r7, #4]
 8009f5e:	4613      	mov	r3, r2
 8009f60:	009b      	lsls	r3, r3, #2
 8009f62:	4413      	add	r3, r2
 8009f64:	00db      	lsls	r3, r3, #3
 8009f66:	440b      	add	r3, r1
 8009f68:	3342      	adds	r3, #66	; 0x42
 8009f6a:	2202      	movs	r2, #2
 8009f6c:	701a      	strb	r2, [r3, #0]
      break;
 8009f6e:	e096      	b.n	800a09e <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8009f70:	78bb      	ldrb	r3, [r7, #2]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d120      	bne.n	8009fb8 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8009f76:	78fa      	ldrb	r2, [r7, #3]
 8009f78:	6879      	ldr	r1, [r7, #4]
 8009f7a:	4613      	mov	r3, r2
 8009f7c:	009b      	lsls	r3, r3, #2
 8009f7e:	4413      	add	r3, r2
 8009f80:	00db      	lsls	r3, r3, #3
 8009f82:	440b      	add	r3, r1
 8009f84:	3351      	adds	r3, #81	; 0x51
 8009f86:	781b      	ldrb	r3, [r3, #0]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d10a      	bne.n	8009fa2 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8009f8c:	78fa      	ldrb	r2, [r7, #3]
 8009f8e:	6879      	ldr	r1, [r7, #4]
 8009f90:	4613      	mov	r3, r2
 8009f92:	009b      	lsls	r3, r3, #2
 8009f94:	4413      	add	r3, r2
 8009f96:	00db      	lsls	r3, r3, #3
 8009f98:	440b      	add	r3, r1
 8009f9a:	3342      	adds	r3, #66	; 0x42
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8009fa0:	e07e      	b.n	800a0a0 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8009fa2:	78fa      	ldrb	r2, [r7, #3]
 8009fa4:	6879      	ldr	r1, [r7, #4]
 8009fa6:	4613      	mov	r3, r2
 8009fa8:	009b      	lsls	r3, r3, #2
 8009faa:	4413      	add	r3, r2
 8009fac:	00db      	lsls	r3, r3, #3
 8009fae:	440b      	add	r3, r1
 8009fb0:	3342      	adds	r3, #66	; 0x42
 8009fb2:	2202      	movs	r2, #2
 8009fb4:	701a      	strb	r2, [r3, #0]
      break;
 8009fb6:	e073      	b.n	800a0a0 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8009fb8:	78fa      	ldrb	r2, [r7, #3]
 8009fba:	6879      	ldr	r1, [r7, #4]
 8009fbc:	4613      	mov	r3, r2
 8009fbe:	009b      	lsls	r3, r3, #2
 8009fc0:	4413      	add	r3, r2
 8009fc2:	00db      	lsls	r3, r3, #3
 8009fc4:	440b      	add	r3, r1
 8009fc6:	3350      	adds	r3, #80	; 0x50
 8009fc8:	781b      	ldrb	r3, [r3, #0]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d10a      	bne.n	8009fe4 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8009fce:	78fa      	ldrb	r2, [r7, #3]
 8009fd0:	6879      	ldr	r1, [r7, #4]
 8009fd2:	4613      	mov	r3, r2
 8009fd4:	009b      	lsls	r3, r3, #2
 8009fd6:	4413      	add	r3, r2
 8009fd8:	00db      	lsls	r3, r3, #3
 8009fda:	440b      	add	r3, r1
 8009fdc:	3342      	adds	r3, #66	; 0x42
 8009fde:	2200      	movs	r2, #0
 8009fe0:	701a      	strb	r2, [r3, #0]
      break;
 8009fe2:	e05d      	b.n	800a0a0 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8009fe4:	78fa      	ldrb	r2, [r7, #3]
 8009fe6:	6879      	ldr	r1, [r7, #4]
 8009fe8:	4613      	mov	r3, r2
 8009fea:	009b      	lsls	r3, r3, #2
 8009fec:	4413      	add	r3, r2
 8009fee:	00db      	lsls	r3, r3, #3
 8009ff0:	440b      	add	r3, r1
 8009ff2:	3342      	adds	r3, #66	; 0x42
 8009ff4:	2202      	movs	r2, #2
 8009ff6:	701a      	strb	r2, [r3, #0]
      break;
 8009ff8:	e052      	b.n	800a0a0 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8009ffa:	78bb      	ldrb	r3, [r7, #2]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d120      	bne.n	800a042 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800a000:	78fa      	ldrb	r2, [r7, #3]
 800a002:	6879      	ldr	r1, [r7, #4]
 800a004:	4613      	mov	r3, r2
 800a006:	009b      	lsls	r3, r3, #2
 800a008:	4413      	add	r3, r2
 800a00a:	00db      	lsls	r3, r3, #3
 800a00c:	440b      	add	r3, r1
 800a00e:	3351      	adds	r3, #81	; 0x51
 800a010:	781b      	ldrb	r3, [r3, #0]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d10a      	bne.n	800a02c <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800a016:	78fa      	ldrb	r2, [r7, #3]
 800a018:	6879      	ldr	r1, [r7, #4]
 800a01a:	4613      	mov	r3, r2
 800a01c:	009b      	lsls	r3, r3, #2
 800a01e:	4413      	add	r3, r2
 800a020:	00db      	lsls	r3, r3, #3
 800a022:	440b      	add	r3, r1
 800a024:	3342      	adds	r3, #66	; 0x42
 800a026:	2200      	movs	r2, #0
 800a028:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800a02a:	e039      	b.n	800a0a0 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800a02c:	78fa      	ldrb	r2, [r7, #3]
 800a02e:	6879      	ldr	r1, [r7, #4]
 800a030:	4613      	mov	r3, r2
 800a032:	009b      	lsls	r3, r3, #2
 800a034:	4413      	add	r3, r2
 800a036:	00db      	lsls	r3, r3, #3
 800a038:	440b      	add	r3, r1
 800a03a:	3342      	adds	r3, #66	; 0x42
 800a03c:	2202      	movs	r2, #2
 800a03e:	701a      	strb	r2, [r3, #0]
      break;
 800a040:	e02e      	b.n	800a0a0 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800a042:	78fa      	ldrb	r2, [r7, #3]
 800a044:	6879      	ldr	r1, [r7, #4]
 800a046:	4613      	mov	r3, r2
 800a048:	009b      	lsls	r3, r3, #2
 800a04a:	4413      	add	r3, r2
 800a04c:	00db      	lsls	r3, r3, #3
 800a04e:	440b      	add	r3, r1
 800a050:	3350      	adds	r3, #80	; 0x50
 800a052:	781b      	ldrb	r3, [r3, #0]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d10a      	bne.n	800a06e <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800a058:	78fa      	ldrb	r2, [r7, #3]
 800a05a:	6879      	ldr	r1, [r7, #4]
 800a05c:	4613      	mov	r3, r2
 800a05e:	009b      	lsls	r3, r3, #2
 800a060:	4413      	add	r3, r2
 800a062:	00db      	lsls	r3, r3, #3
 800a064:	440b      	add	r3, r1
 800a066:	3342      	adds	r3, #66	; 0x42
 800a068:	2200      	movs	r2, #0
 800a06a:	701a      	strb	r2, [r3, #0]
      break;
 800a06c:	e018      	b.n	800a0a0 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800a06e:	78fa      	ldrb	r2, [r7, #3]
 800a070:	6879      	ldr	r1, [r7, #4]
 800a072:	4613      	mov	r3, r2
 800a074:	009b      	lsls	r3, r3, #2
 800a076:	4413      	add	r3, r2
 800a078:	00db      	lsls	r3, r3, #3
 800a07a:	440b      	add	r3, r1
 800a07c:	3342      	adds	r3, #66	; 0x42
 800a07e:	2202      	movs	r2, #2
 800a080:	701a      	strb	r2, [r3, #0]
      break;
 800a082:	e00d      	b.n	800a0a0 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800a084:	78fa      	ldrb	r2, [r7, #3]
 800a086:	6879      	ldr	r1, [r7, #4]
 800a088:	4613      	mov	r3, r2
 800a08a:	009b      	lsls	r3, r3, #2
 800a08c:	4413      	add	r3, r2
 800a08e:	00db      	lsls	r3, r3, #3
 800a090:	440b      	add	r3, r1
 800a092:	3342      	adds	r3, #66	; 0x42
 800a094:	2200      	movs	r2, #0
 800a096:	701a      	strb	r2, [r3, #0]
      break;
 800a098:	e002      	b.n	800a0a0 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 800a09a:	bf00      	nop
 800a09c:	e000      	b.n	800a0a0 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 800a09e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800a0a0:	78fa      	ldrb	r2, [r7, #3]
 800a0a2:	6879      	ldr	r1, [r7, #4]
 800a0a4:	4613      	mov	r3, r2
 800a0a6:	009b      	lsls	r3, r3, #2
 800a0a8:	4413      	add	r3, r2
 800a0aa:	00db      	lsls	r3, r3, #3
 800a0ac:	440b      	add	r3, r1
 800a0ae:	3344      	adds	r3, #68	; 0x44
 800a0b0:	697a      	ldr	r2, [r7, #20]
 800a0b2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800a0b4:	78fa      	ldrb	r2, [r7, #3]
 800a0b6:	8b39      	ldrh	r1, [r7, #24]
 800a0b8:	6878      	ldr	r0, [r7, #4]
 800a0ba:	4613      	mov	r3, r2
 800a0bc:	009b      	lsls	r3, r3, #2
 800a0be:	4413      	add	r3, r2
 800a0c0:	00db      	lsls	r3, r3, #3
 800a0c2:	4403      	add	r3, r0
 800a0c4:	3348      	adds	r3, #72	; 0x48
 800a0c6:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800a0c8:	78fa      	ldrb	r2, [r7, #3]
 800a0ca:	6879      	ldr	r1, [r7, #4]
 800a0cc:	4613      	mov	r3, r2
 800a0ce:	009b      	lsls	r3, r3, #2
 800a0d0:	4413      	add	r3, r2
 800a0d2:	00db      	lsls	r3, r3, #3
 800a0d4:	440b      	add	r3, r1
 800a0d6:	335c      	adds	r3, #92	; 0x5c
 800a0d8:	2200      	movs	r2, #0
 800a0da:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800a0dc:	78fa      	ldrb	r2, [r7, #3]
 800a0de:	6879      	ldr	r1, [r7, #4]
 800a0e0:	4613      	mov	r3, r2
 800a0e2:	009b      	lsls	r3, r3, #2
 800a0e4:	4413      	add	r3, r2
 800a0e6:	00db      	lsls	r3, r3, #3
 800a0e8:	440b      	add	r3, r1
 800a0ea:	334c      	adds	r3, #76	; 0x4c
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800a0f0:	78fa      	ldrb	r2, [r7, #3]
 800a0f2:	6879      	ldr	r1, [r7, #4]
 800a0f4:	4613      	mov	r3, r2
 800a0f6:	009b      	lsls	r3, r3, #2
 800a0f8:	4413      	add	r3, r2
 800a0fa:	00db      	lsls	r3, r3, #3
 800a0fc:	440b      	add	r3, r1
 800a0fe:	3339      	adds	r3, #57	; 0x39
 800a100:	78fa      	ldrb	r2, [r7, #3]
 800a102:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800a104:	78fa      	ldrb	r2, [r7, #3]
 800a106:	6879      	ldr	r1, [r7, #4]
 800a108:	4613      	mov	r3, r2
 800a10a:	009b      	lsls	r3, r3, #2
 800a10c:	4413      	add	r3, r2
 800a10e:	00db      	lsls	r3, r3, #3
 800a110:	440b      	add	r3, r1
 800a112:	335d      	adds	r3, #93	; 0x5d
 800a114:	2200      	movs	r2, #0
 800a116:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	6818      	ldr	r0, [r3, #0]
 800a11c:	78fa      	ldrb	r2, [r7, #3]
 800a11e:	4613      	mov	r3, r2
 800a120:	009b      	lsls	r3, r3, #2
 800a122:	4413      	add	r3, r2
 800a124:	00db      	lsls	r3, r3, #3
 800a126:	3338      	adds	r3, #56	; 0x38
 800a128:	687a      	ldr	r2, [r7, #4]
 800a12a:	18d1      	adds	r1, r2, r3
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	691b      	ldr	r3, [r3, #16]
 800a130:	b2db      	uxtb	r3, r3
 800a132:	461a      	mov	r2, r3
 800a134:	f003 fc56 	bl	800d9e4 <USB_HC_StartXfer>
 800a138:	4603      	mov	r3, r0
}
 800a13a:	4618      	mov	r0, r3
 800a13c:	3708      	adds	r7, #8
 800a13e:	46bd      	mov	sp, r7
 800a140:	bd80      	pop	{r7, pc}
 800a142:	bf00      	nop

0800a144 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800a144:	b580      	push	{r7, lr}
 800a146:	b086      	sub	sp, #24
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a152:	693b      	ldr	r3, [r7, #16]
 800a154:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	4618      	mov	r0, r3
 800a15c:	f003 f973 	bl	800d446 <USB_GetMode>
 800a160:	4603      	mov	r3, r0
 800a162:	2b01      	cmp	r3, #1
 800a164:	f040 80ef 	bne.w	800a346 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	4618      	mov	r0, r3
 800a16e:	f003 f957 	bl	800d420 <USB_ReadInterrupts>
 800a172:	4603      	mov	r3, r0
 800a174:	2b00      	cmp	r3, #0
 800a176:	f000 80e5 	beq.w	800a344 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	4618      	mov	r0, r3
 800a180:	f003 f94e 	bl	800d420 <USB_ReadInterrupts>
 800a184:	4603      	mov	r3, r0
 800a186:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a18a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a18e:	d104      	bne.n	800a19a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800a198:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	4618      	mov	r0, r3
 800a1a0:	f003 f93e 	bl	800d420 <USB_ReadInterrupts>
 800a1a4:	4603      	mov	r3, r0
 800a1a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a1aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a1ae:	d104      	bne.n	800a1ba <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a1b8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	4618      	mov	r0, r3
 800a1c0:	f003 f92e 	bl	800d420 <USB_ReadInterrupts>
 800a1c4:	4603      	mov	r3, r0
 800a1c6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a1ca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a1ce:	d104      	bne.n	800a1da <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800a1d8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	4618      	mov	r0, r3
 800a1e0:	f003 f91e 	bl	800d420 <USB_ReadInterrupts>
 800a1e4:	4603      	mov	r3, r0
 800a1e6:	f003 0302 	and.w	r3, r3, #2
 800a1ea:	2b02      	cmp	r3, #2
 800a1ec:	d103      	bne.n	800a1f6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	2202      	movs	r2, #2
 800a1f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	f003 f910 	bl	800d420 <USB_ReadInterrupts>
 800a200:	4603      	mov	r3, r0
 800a202:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a206:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a20a:	d115      	bne.n	800a238 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800a214:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	f003 0301 	and.w	r3, r3, #1
 800a222:	2b00      	cmp	r3, #0
 800a224:	d108      	bne.n	800a238 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800a226:	6878      	ldr	r0, [r7, #4]
 800a228:	f005 fec8 	bl	800ffbc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	2101      	movs	r1, #1
 800a232:	4618      	mov	r0, r3
 800a234:	f003 fa06 	bl	800d644 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	4618      	mov	r0, r3
 800a23e:	f003 f8ef 	bl	800d420 <USB_ReadInterrupts>
 800a242:	4603      	mov	r3, r0
 800a244:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a248:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a24c:	d102      	bne.n	800a254 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 800a24e:	6878      	ldr	r0, [r7, #4]
 800a250:	f001 f966 	bl	800b520 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	4618      	mov	r0, r3
 800a25a:	f003 f8e1 	bl	800d420 <USB_ReadInterrupts>
 800a25e:	4603      	mov	r3, r0
 800a260:	f003 0308 	and.w	r3, r3, #8
 800a264:	2b08      	cmp	r3, #8
 800a266:	d106      	bne.n	800a276 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800a268:	6878      	ldr	r0, [r7, #4]
 800a26a:	f005 fe8b 	bl	800ff84 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	2208      	movs	r2, #8
 800a274:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	4618      	mov	r0, r3
 800a27c:	f003 f8d0 	bl	800d420 <USB_ReadInterrupts>
 800a280:	4603      	mov	r3, r0
 800a282:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a286:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a28a:	d138      	bne.n	800a2fe <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	4618      	mov	r0, r3
 800a292:	f003 fced 	bl	800dc70 <USB_HC_ReadInterrupt>
 800a296:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800a298:	2300      	movs	r3, #0
 800a29a:	617b      	str	r3, [r7, #20]
 800a29c:	e025      	b.n	800a2ea <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800a29e:	697b      	ldr	r3, [r7, #20]
 800a2a0:	f003 030f 	and.w	r3, r3, #15
 800a2a4:	68ba      	ldr	r2, [r7, #8]
 800a2a6:	fa22 f303 	lsr.w	r3, r2, r3
 800a2aa:	f003 0301 	and.w	r3, r3, #1
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d018      	beq.n	800a2e4 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800a2b2:	697b      	ldr	r3, [r7, #20]
 800a2b4:	015a      	lsls	r2, r3, #5
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	4413      	add	r3, r2
 800a2ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a2c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a2c8:	d106      	bne.n	800a2d8 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800a2ca:	697b      	ldr	r3, [r7, #20]
 800a2cc:	b2db      	uxtb	r3, r3
 800a2ce:	4619      	mov	r1, r3
 800a2d0:	6878      	ldr	r0, [r7, #4]
 800a2d2:	f000 f8cf 	bl	800a474 <HCD_HC_IN_IRQHandler>
 800a2d6:	e005      	b.n	800a2e4 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800a2d8:	697b      	ldr	r3, [r7, #20]
 800a2da:	b2db      	uxtb	r3, r3
 800a2dc:	4619      	mov	r1, r3
 800a2de:	6878      	ldr	r0, [r7, #4]
 800a2e0:	f000 fcfd 	bl	800acde <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800a2e4:	697b      	ldr	r3, [r7, #20]
 800a2e6:	3301      	adds	r3, #1
 800a2e8:	617b      	str	r3, [r7, #20]
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	689b      	ldr	r3, [r3, #8]
 800a2ee:	697a      	ldr	r2, [r7, #20]
 800a2f0:	429a      	cmp	r2, r3
 800a2f2:	d3d4      	bcc.n	800a29e <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800a2fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	4618      	mov	r0, r3
 800a304:	f003 f88c 	bl	800d420 <USB_ReadInterrupts>
 800a308:	4603      	mov	r3, r0
 800a30a:	f003 0310 	and.w	r3, r3, #16
 800a30e:	2b10      	cmp	r3, #16
 800a310:	d101      	bne.n	800a316 <HAL_HCD_IRQHandler+0x1d2>
 800a312:	2301      	movs	r3, #1
 800a314:	e000      	b.n	800a318 <HAL_HCD_IRQHandler+0x1d4>
 800a316:	2300      	movs	r3, #0
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d014      	beq.n	800a346 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	699a      	ldr	r2, [r3, #24]
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	f022 0210 	bic.w	r2, r2, #16
 800a32a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800a32c:	6878      	ldr	r0, [r7, #4]
 800a32e:	f001 f84b 	bl	800b3c8 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	699a      	ldr	r2, [r3, #24]
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	f042 0210 	orr.w	r2, r2, #16
 800a340:	619a      	str	r2, [r3, #24]
 800a342:	e000      	b.n	800a346 <HAL_HCD_IRQHandler+0x202>
      return;
 800a344:	bf00      	nop
    }
  }
}
 800a346:	3718      	adds	r7, #24
 800a348:	46bd      	mov	sp, r7
 800a34a:	bd80      	pop	{r7, pc}

0800a34c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b082      	sub	sp, #8
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800a35a:	2b01      	cmp	r3, #1
 800a35c:	d101      	bne.n	800a362 <HAL_HCD_Start+0x16>
 800a35e:	2302      	movs	r3, #2
 800a360:	e013      	b.n	800a38a <HAL_HCD_Start+0x3e>
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	2201      	movs	r2, #1
 800a366:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	4618      	mov	r0, r3
 800a370:	f002 ff63 	bl	800d23a <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	2101      	movs	r1, #1
 800a37a:	4618      	mov	r0, r3
 800a37c:	f003 f9c6 	bl	800d70c <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	2200      	movs	r2, #0
 800a384:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 800a388:	2300      	movs	r3, #0
}
 800a38a:	4618      	mov	r0, r3
 800a38c:	3708      	adds	r7, #8
 800a38e:	46bd      	mov	sp, r7
 800a390:	bd80      	pop	{r7, pc}

0800a392 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800a392:	b580      	push	{r7, lr}
 800a394:	b082      	sub	sp, #8
 800a396:	af00      	add	r7, sp, #0
 800a398:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800a3a0:	2b01      	cmp	r3, #1
 800a3a2:	d101      	bne.n	800a3a8 <HAL_HCD_Stop+0x16>
 800a3a4:	2302      	movs	r3, #2
 800a3a6:	e00d      	b.n	800a3c4 <HAL_HCD_Stop+0x32>
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	2201      	movs	r2, #1
 800a3ac:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	f003 fda7 	bl	800df08 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	2200      	movs	r2, #0
 800a3be:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 800a3c2:	2300      	movs	r3, #0
}
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	3708      	adds	r7, #8
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	bd80      	pop	{r7, pc}

0800a3cc <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b082      	sub	sp, #8
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	4618      	mov	r0, r3
 800a3da:	f003 f96d 	bl	800d6b8 <USB_ResetPort>
 800a3de:	4603      	mov	r3, r0
}
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	3708      	adds	r7, #8
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	bd80      	pop	{r7, pc}

0800a3e8 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800a3e8:	b480      	push	{r7}
 800a3ea:	b083      	sub	sp, #12
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
 800a3f0:	460b      	mov	r3, r1
 800a3f2:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800a3f4:	78fa      	ldrb	r2, [r7, #3]
 800a3f6:	6879      	ldr	r1, [r7, #4]
 800a3f8:	4613      	mov	r3, r2
 800a3fa:	009b      	lsls	r3, r3, #2
 800a3fc:	4413      	add	r3, r2
 800a3fe:	00db      	lsls	r3, r3, #3
 800a400:	440b      	add	r3, r1
 800a402:	335c      	adds	r3, #92	; 0x5c
 800a404:	781b      	ldrb	r3, [r3, #0]
}
 800a406:	4618      	mov	r0, r3
 800a408:	370c      	adds	r7, #12
 800a40a:	46bd      	mov	sp, r7
 800a40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a410:	4770      	bx	lr

0800a412 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800a412:	b480      	push	{r7}
 800a414:	b083      	sub	sp, #12
 800a416:	af00      	add	r7, sp, #0
 800a418:	6078      	str	r0, [r7, #4]
 800a41a:	460b      	mov	r3, r1
 800a41c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800a41e:	78fa      	ldrb	r2, [r7, #3]
 800a420:	6879      	ldr	r1, [r7, #4]
 800a422:	4613      	mov	r3, r2
 800a424:	009b      	lsls	r3, r3, #2
 800a426:	4413      	add	r3, r2
 800a428:	00db      	lsls	r3, r3, #3
 800a42a:	440b      	add	r3, r1
 800a42c:	334c      	adds	r3, #76	; 0x4c
 800a42e:	681b      	ldr	r3, [r3, #0]
}
 800a430:	4618      	mov	r0, r3
 800a432:	370c      	adds	r7, #12
 800a434:	46bd      	mov	sp, r7
 800a436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43a:	4770      	bx	lr

0800a43c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b082      	sub	sp, #8
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	4618      	mov	r0, r3
 800a44a:	f003 f9af 	bl	800d7ac <USB_GetCurrentFrame>
 800a44e:	4603      	mov	r3, r0
}
 800a450:	4618      	mov	r0, r3
 800a452:	3708      	adds	r7, #8
 800a454:	46bd      	mov	sp, r7
 800a456:	bd80      	pop	{r7, pc}

0800a458 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b082      	sub	sp, #8
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	4618      	mov	r0, r3
 800a466:	f003 f98a 	bl	800d77e <USB_GetHostSpeed>
 800a46a:	4603      	mov	r3, r0
}
 800a46c:	4618      	mov	r0, r3
 800a46e:	3708      	adds	r7, #8
 800a470:	46bd      	mov	sp, r7
 800a472:	bd80      	pop	{r7, pc}

0800a474 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b086      	sub	sp, #24
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
 800a47c:	460b      	mov	r3, r1
 800a47e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a486:	697b      	ldr	r3, [r7, #20]
 800a488:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800a48a:	78fb      	ldrb	r3, [r7, #3]
 800a48c:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	015a      	lsls	r2, r3, #5
 800a492:	693b      	ldr	r3, [r7, #16]
 800a494:	4413      	add	r3, r2
 800a496:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a49a:	689b      	ldr	r3, [r3, #8]
 800a49c:	f003 0304 	and.w	r3, r3, #4
 800a4a0:	2b04      	cmp	r3, #4
 800a4a2:	d119      	bne.n	800a4d8 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	015a      	lsls	r2, r3, #5
 800a4a8:	693b      	ldr	r3, [r7, #16]
 800a4aa:	4413      	add	r3, r2
 800a4ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a4b0:	461a      	mov	r2, r3
 800a4b2:	2304      	movs	r3, #4
 800a4b4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	015a      	lsls	r2, r3, #5
 800a4ba:	693b      	ldr	r3, [r7, #16]
 800a4bc:	4413      	add	r3, r2
 800a4be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a4c2:	68db      	ldr	r3, [r3, #12]
 800a4c4:	68fa      	ldr	r2, [r7, #12]
 800a4c6:	0151      	lsls	r1, r2, #5
 800a4c8:	693a      	ldr	r2, [r7, #16]
 800a4ca:	440a      	add	r2, r1
 800a4cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a4d0:	f043 0302 	orr.w	r3, r3, #2
 800a4d4:	60d3      	str	r3, [r2, #12]
 800a4d6:	e0ce      	b.n	800a676 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	015a      	lsls	r2, r3, #5
 800a4dc:	693b      	ldr	r3, [r7, #16]
 800a4de:	4413      	add	r3, r2
 800a4e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a4e4:	689b      	ldr	r3, [r3, #8]
 800a4e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a4ee:	d12c      	bne.n	800a54a <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	015a      	lsls	r2, r3, #5
 800a4f4:	693b      	ldr	r3, [r7, #16]
 800a4f6:	4413      	add	r3, r2
 800a4f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a4fc:	461a      	mov	r2, r3
 800a4fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a502:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800a504:	6879      	ldr	r1, [r7, #4]
 800a506:	68fa      	ldr	r2, [r7, #12]
 800a508:	4613      	mov	r3, r2
 800a50a:	009b      	lsls	r3, r3, #2
 800a50c:	4413      	add	r3, r2
 800a50e:	00db      	lsls	r3, r3, #3
 800a510:	440b      	add	r3, r1
 800a512:	335d      	adds	r3, #93	; 0x5d
 800a514:	2207      	movs	r2, #7
 800a516:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	015a      	lsls	r2, r3, #5
 800a51c:	693b      	ldr	r3, [r7, #16]
 800a51e:	4413      	add	r3, r2
 800a520:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a524:	68db      	ldr	r3, [r3, #12]
 800a526:	68fa      	ldr	r2, [r7, #12]
 800a528:	0151      	lsls	r1, r2, #5
 800a52a:	693a      	ldr	r2, [r7, #16]
 800a52c:	440a      	add	r2, r1
 800a52e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a532:	f043 0302 	orr.w	r3, r3, #2
 800a536:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	68fa      	ldr	r2, [r7, #12]
 800a53e:	b2d2      	uxtb	r2, r2
 800a540:	4611      	mov	r1, r2
 800a542:	4618      	mov	r0, r3
 800a544:	f003 fba5 	bl	800dc92 <USB_HC_Halt>
 800a548:	e095      	b.n	800a676 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	015a      	lsls	r2, r3, #5
 800a54e:	693b      	ldr	r3, [r7, #16]
 800a550:	4413      	add	r3, r2
 800a552:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a556:	689b      	ldr	r3, [r3, #8]
 800a558:	f003 0320 	and.w	r3, r3, #32
 800a55c:	2b20      	cmp	r3, #32
 800a55e:	d109      	bne.n	800a574 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	015a      	lsls	r2, r3, #5
 800a564:	693b      	ldr	r3, [r7, #16]
 800a566:	4413      	add	r3, r2
 800a568:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a56c:	461a      	mov	r2, r3
 800a56e:	2320      	movs	r3, #32
 800a570:	6093      	str	r3, [r2, #8]
 800a572:	e080      	b.n	800a676 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	015a      	lsls	r2, r3, #5
 800a578:	693b      	ldr	r3, [r7, #16]
 800a57a:	4413      	add	r3, r2
 800a57c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a580:	689b      	ldr	r3, [r3, #8]
 800a582:	f003 0308 	and.w	r3, r3, #8
 800a586:	2b08      	cmp	r3, #8
 800a588:	d134      	bne.n	800a5f4 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	015a      	lsls	r2, r3, #5
 800a58e:	693b      	ldr	r3, [r7, #16]
 800a590:	4413      	add	r3, r2
 800a592:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a596:	68db      	ldr	r3, [r3, #12]
 800a598:	68fa      	ldr	r2, [r7, #12]
 800a59a:	0151      	lsls	r1, r2, #5
 800a59c:	693a      	ldr	r2, [r7, #16]
 800a59e:	440a      	add	r2, r1
 800a5a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a5a4:	f043 0302 	orr.w	r3, r3, #2
 800a5a8:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 800a5aa:	6879      	ldr	r1, [r7, #4]
 800a5ac:	68fa      	ldr	r2, [r7, #12]
 800a5ae:	4613      	mov	r3, r2
 800a5b0:	009b      	lsls	r3, r3, #2
 800a5b2:	4413      	add	r3, r2
 800a5b4:	00db      	lsls	r3, r3, #3
 800a5b6:	440b      	add	r3, r1
 800a5b8:	335d      	adds	r3, #93	; 0x5d
 800a5ba:	2205      	movs	r2, #5
 800a5bc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	015a      	lsls	r2, r3, #5
 800a5c2:	693b      	ldr	r3, [r7, #16]
 800a5c4:	4413      	add	r3, r2
 800a5c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a5ca:	461a      	mov	r2, r3
 800a5cc:	2310      	movs	r3, #16
 800a5ce:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	015a      	lsls	r2, r3, #5
 800a5d4:	693b      	ldr	r3, [r7, #16]
 800a5d6:	4413      	add	r3, r2
 800a5d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a5dc:	461a      	mov	r2, r3
 800a5de:	2308      	movs	r3, #8
 800a5e0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	68fa      	ldr	r2, [r7, #12]
 800a5e8:	b2d2      	uxtb	r2, r2
 800a5ea:	4611      	mov	r1, r2
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	f003 fb50 	bl	800dc92 <USB_HC_Halt>
 800a5f2:	e040      	b.n	800a676 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	015a      	lsls	r2, r3, #5
 800a5f8:	693b      	ldr	r3, [r7, #16]
 800a5fa:	4413      	add	r3, r2
 800a5fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a600:	689b      	ldr	r3, [r3, #8]
 800a602:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a606:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a60a:	d134      	bne.n	800a676 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	015a      	lsls	r2, r3, #5
 800a610:	693b      	ldr	r3, [r7, #16]
 800a612:	4413      	add	r3, r2
 800a614:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a618:	68db      	ldr	r3, [r3, #12]
 800a61a:	68fa      	ldr	r2, [r7, #12]
 800a61c:	0151      	lsls	r1, r2, #5
 800a61e:	693a      	ldr	r2, [r7, #16]
 800a620:	440a      	add	r2, r1
 800a622:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a626:	f043 0302 	orr.w	r3, r3, #2
 800a62a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	68fa      	ldr	r2, [r7, #12]
 800a632:	b2d2      	uxtb	r2, r2
 800a634:	4611      	mov	r1, r2
 800a636:	4618      	mov	r0, r3
 800a638:	f003 fb2b 	bl	800dc92 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	015a      	lsls	r2, r3, #5
 800a640:	693b      	ldr	r3, [r7, #16]
 800a642:	4413      	add	r3, r2
 800a644:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a648:	461a      	mov	r2, r3
 800a64a:	2310      	movs	r3, #16
 800a64c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800a64e:	6879      	ldr	r1, [r7, #4]
 800a650:	68fa      	ldr	r2, [r7, #12]
 800a652:	4613      	mov	r3, r2
 800a654:	009b      	lsls	r3, r3, #2
 800a656:	4413      	add	r3, r2
 800a658:	00db      	lsls	r3, r3, #3
 800a65a:	440b      	add	r3, r1
 800a65c:	335d      	adds	r3, #93	; 0x5d
 800a65e:	2208      	movs	r2, #8
 800a660:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	015a      	lsls	r2, r3, #5
 800a666:	693b      	ldr	r3, [r7, #16]
 800a668:	4413      	add	r3, r2
 800a66a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a66e:	461a      	mov	r2, r3
 800a670:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a674:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	015a      	lsls	r2, r3, #5
 800a67a:	693b      	ldr	r3, [r7, #16]
 800a67c:	4413      	add	r3, r2
 800a67e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a682:	689b      	ldr	r3, [r3, #8]
 800a684:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a688:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a68c:	d122      	bne.n	800a6d4 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	015a      	lsls	r2, r3, #5
 800a692:	693b      	ldr	r3, [r7, #16]
 800a694:	4413      	add	r3, r2
 800a696:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a69a:	68db      	ldr	r3, [r3, #12]
 800a69c:	68fa      	ldr	r2, [r7, #12]
 800a69e:	0151      	lsls	r1, r2, #5
 800a6a0:	693a      	ldr	r2, [r7, #16]
 800a6a2:	440a      	add	r2, r1
 800a6a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a6a8:	f043 0302 	orr.w	r3, r3, #2
 800a6ac:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	68fa      	ldr	r2, [r7, #12]
 800a6b4:	b2d2      	uxtb	r2, r2
 800a6b6:	4611      	mov	r1, r2
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	f003 faea 	bl	800dc92 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	015a      	lsls	r2, r3, #5
 800a6c2:	693b      	ldr	r3, [r7, #16]
 800a6c4:	4413      	add	r3, r2
 800a6c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a6ca:	461a      	mov	r2, r3
 800a6cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a6d0:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800a6d2:	e300      	b.n	800acd6 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	015a      	lsls	r2, r3, #5
 800a6d8:	693b      	ldr	r3, [r7, #16]
 800a6da:	4413      	add	r3, r2
 800a6dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a6e0:	689b      	ldr	r3, [r3, #8]
 800a6e2:	f003 0301 	and.w	r3, r3, #1
 800a6e6:	2b01      	cmp	r3, #1
 800a6e8:	f040 80fd 	bne.w	800a8e6 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	691b      	ldr	r3, [r3, #16]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d01b      	beq.n	800a72c <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800a6f4:	6879      	ldr	r1, [r7, #4]
 800a6f6:	68fa      	ldr	r2, [r7, #12]
 800a6f8:	4613      	mov	r3, r2
 800a6fa:	009b      	lsls	r3, r3, #2
 800a6fc:	4413      	add	r3, r2
 800a6fe:	00db      	lsls	r3, r3, #3
 800a700:	440b      	add	r3, r1
 800a702:	3348      	adds	r3, #72	; 0x48
 800a704:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	0159      	lsls	r1, r3, #5
 800a70a:	693b      	ldr	r3, [r7, #16]
 800a70c:	440b      	add	r3, r1
 800a70e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a712:	691b      	ldr	r3, [r3, #16]
 800a714:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800a718:	1ad1      	subs	r1, r2, r3
 800a71a:	6878      	ldr	r0, [r7, #4]
 800a71c:	68fa      	ldr	r2, [r7, #12]
 800a71e:	4613      	mov	r3, r2
 800a720:	009b      	lsls	r3, r3, #2
 800a722:	4413      	add	r3, r2
 800a724:	00db      	lsls	r3, r3, #3
 800a726:	4403      	add	r3, r0
 800a728:	334c      	adds	r3, #76	; 0x4c
 800a72a:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800a72c:	6879      	ldr	r1, [r7, #4]
 800a72e:	68fa      	ldr	r2, [r7, #12]
 800a730:	4613      	mov	r3, r2
 800a732:	009b      	lsls	r3, r3, #2
 800a734:	4413      	add	r3, r2
 800a736:	00db      	lsls	r3, r3, #3
 800a738:	440b      	add	r3, r1
 800a73a:	335d      	adds	r3, #93	; 0x5d
 800a73c:	2201      	movs	r2, #1
 800a73e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800a740:	6879      	ldr	r1, [r7, #4]
 800a742:	68fa      	ldr	r2, [r7, #12]
 800a744:	4613      	mov	r3, r2
 800a746:	009b      	lsls	r3, r3, #2
 800a748:	4413      	add	r3, r2
 800a74a:	00db      	lsls	r3, r3, #3
 800a74c:	440b      	add	r3, r1
 800a74e:	3358      	adds	r3, #88	; 0x58
 800a750:	2200      	movs	r2, #0
 800a752:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	015a      	lsls	r2, r3, #5
 800a758:	693b      	ldr	r3, [r7, #16]
 800a75a:	4413      	add	r3, r2
 800a75c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a760:	461a      	mov	r2, r3
 800a762:	2301      	movs	r3, #1
 800a764:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800a766:	6879      	ldr	r1, [r7, #4]
 800a768:	68fa      	ldr	r2, [r7, #12]
 800a76a:	4613      	mov	r3, r2
 800a76c:	009b      	lsls	r3, r3, #2
 800a76e:	4413      	add	r3, r2
 800a770:	00db      	lsls	r3, r3, #3
 800a772:	440b      	add	r3, r1
 800a774:	333f      	adds	r3, #63	; 0x3f
 800a776:	781b      	ldrb	r3, [r3, #0]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d00a      	beq.n	800a792 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800a77c:	6879      	ldr	r1, [r7, #4]
 800a77e:	68fa      	ldr	r2, [r7, #12]
 800a780:	4613      	mov	r3, r2
 800a782:	009b      	lsls	r3, r3, #2
 800a784:	4413      	add	r3, r2
 800a786:	00db      	lsls	r3, r3, #3
 800a788:	440b      	add	r3, r1
 800a78a:	333f      	adds	r3, #63	; 0x3f
 800a78c:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800a78e:	2b02      	cmp	r3, #2
 800a790:	d121      	bne.n	800a7d6 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	015a      	lsls	r2, r3, #5
 800a796:	693b      	ldr	r3, [r7, #16]
 800a798:	4413      	add	r3, r2
 800a79a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a79e:	68db      	ldr	r3, [r3, #12]
 800a7a0:	68fa      	ldr	r2, [r7, #12]
 800a7a2:	0151      	lsls	r1, r2, #5
 800a7a4:	693a      	ldr	r2, [r7, #16]
 800a7a6:	440a      	add	r2, r1
 800a7a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a7ac:	f043 0302 	orr.w	r3, r3, #2
 800a7b0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	68fa      	ldr	r2, [r7, #12]
 800a7b8:	b2d2      	uxtb	r2, r2
 800a7ba:	4611      	mov	r1, r2
 800a7bc:	4618      	mov	r0, r3
 800a7be:	f003 fa68 	bl	800dc92 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	015a      	lsls	r2, r3, #5
 800a7c6:	693b      	ldr	r3, [r7, #16]
 800a7c8:	4413      	add	r3, r2
 800a7ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a7ce:	461a      	mov	r2, r3
 800a7d0:	2310      	movs	r3, #16
 800a7d2:	6093      	str	r3, [r2, #8]
 800a7d4:	e070      	b.n	800a8b8 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800a7d6:	6879      	ldr	r1, [r7, #4]
 800a7d8:	68fa      	ldr	r2, [r7, #12]
 800a7da:	4613      	mov	r3, r2
 800a7dc:	009b      	lsls	r3, r3, #2
 800a7de:	4413      	add	r3, r2
 800a7e0:	00db      	lsls	r3, r3, #3
 800a7e2:	440b      	add	r3, r1
 800a7e4:	333f      	adds	r3, #63	; 0x3f
 800a7e6:	781b      	ldrb	r3, [r3, #0]
 800a7e8:	2b03      	cmp	r3, #3
 800a7ea:	d12a      	bne.n	800a842 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	015a      	lsls	r2, r3, #5
 800a7f0:	693b      	ldr	r3, [r7, #16]
 800a7f2:	4413      	add	r3, r2
 800a7f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	68fa      	ldr	r2, [r7, #12]
 800a7fc:	0151      	lsls	r1, r2, #5
 800a7fe:	693a      	ldr	r2, [r7, #16]
 800a800:	440a      	add	r2, r1
 800a802:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a806:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a80a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800a80c:	6879      	ldr	r1, [r7, #4]
 800a80e:	68fa      	ldr	r2, [r7, #12]
 800a810:	4613      	mov	r3, r2
 800a812:	009b      	lsls	r3, r3, #2
 800a814:	4413      	add	r3, r2
 800a816:	00db      	lsls	r3, r3, #3
 800a818:	440b      	add	r3, r1
 800a81a:	335c      	adds	r3, #92	; 0x5c
 800a81c:	2201      	movs	r2, #1
 800a81e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	b2d8      	uxtb	r0, r3
 800a824:	6879      	ldr	r1, [r7, #4]
 800a826:	68fa      	ldr	r2, [r7, #12]
 800a828:	4613      	mov	r3, r2
 800a82a:	009b      	lsls	r3, r3, #2
 800a82c:	4413      	add	r3, r2
 800a82e:	00db      	lsls	r3, r3, #3
 800a830:	440b      	add	r3, r1
 800a832:	335c      	adds	r3, #92	; 0x5c
 800a834:	781b      	ldrb	r3, [r3, #0]
 800a836:	461a      	mov	r2, r3
 800a838:	4601      	mov	r1, r0
 800a83a:	6878      	ldr	r0, [r7, #4]
 800a83c:	f005 fbcc 	bl	800ffd8 <HAL_HCD_HC_NotifyURBChange_Callback>
 800a840:	e03a      	b.n	800a8b8 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 800a842:	6879      	ldr	r1, [r7, #4]
 800a844:	68fa      	ldr	r2, [r7, #12]
 800a846:	4613      	mov	r3, r2
 800a848:	009b      	lsls	r3, r3, #2
 800a84a:	4413      	add	r3, r2
 800a84c:	00db      	lsls	r3, r3, #3
 800a84e:	440b      	add	r3, r1
 800a850:	333f      	adds	r3, #63	; 0x3f
 800a852:	781b      	ldrb	r3, [r3, #0]
 800a854:	2b01      	cmp	r3, #1
 800a856:	d12f      	bne.n	800a8b8 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800a858:	6879      	ldr	r1, [r7, #4]
 800a85a:	68fa      	ldr	r2, [r7, #12]
 800a85c:	4613      	mov	r3, r2
 800a85e:	009b      	lsls	r3, r3, #2
 800a860:	4413      	add	r3, r2
 800a862:	00db      	lsls	r3, r3, #3
 800a864:	440b      	add	r3, r1
 800a866:	335c      	adds	r3, #92	; 0x5c
 800a868:	2201      	movs	r2, #1
 800a86a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800a86c:	6879      	ldr	r1, [r7, #4]
 800a86e:	68fa      	ldr	r2, [r7, #12]
 800a870:	4613      	mov	r3, r2
 800a872:	009b      	lsls	r3, r3, #2
 800a874:	4413      	add	r3, r2
 800a876:	00db      	lsls	r3, r3, #3
 800a878:	440b      	add	r3, r1
 800a87a:	3350      	adds	r3, #80	; 0x50
 800a87c:	781b      	ldrb	r3, [r3, #0]
 800a87e:	f083 0301 	eor.w	r3, r3, #1
 800a882:	b2d8      	uxtb	r0, r3
 800a884:	6879      	ldr	r1, [r7, #4]
 800a886:	68fa      	ldr	r2, [r7, #12]
 800a888:	4613      	mov	r3, r2
 800a88a:	009b      	lsls	r3, r3, #2
 800a88c:	4413      	add	r3, r2
 800a88e:	00db      	lsls	r3, r3, #3
 800a890:	440b      	add	r3, r1
 800a892:	3350      	adds	r3, #80	; 0x50
 800a894:	4602      	mov	r2, r0
 800a896:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	b2d8      	uxtb	r0, r3
 800a89c:	6879      	ldr	r1, [r7, #4]
 800a89e:	68fa      	ldr	r2, [r7, #12]
 800a8a0:	4613      	mov	r3, r2
 800a8a2:	009b      	lsls	r3, r3, #2
 800a8a4:	4413      	add	r3, r2
 800a8a6:	00db      	lsls	r3, r3, #3
 800a8a8:	440b      	add	r3, r1
 800a8aa:	335c      	adds	r3, #92	; 0x5c
 800a8ac:	781b      	ldrb	r3, [r3, #0]
 800a8ae:	461a      	mov	r2, r3
 800a8b0:	4601      	mov	r1, r0
 800a8b2:	6878      	ldr	r0, [r7, #4]
 800a8b4:	f005 fb90 	bl	800ffd8 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 800a8b8:	6879      	ldr	r1, [r7, #4]
 800a8ba:	68fa      	ldr	r2, [r7, #12]
 800a8bc:	4613      	mov	r3, r2
 800a8be:	009b      	lsls	r3, r3, #2
 800a8c0:	4413      	add	r3, r2
 800a8c2:	00db      	lsls	r3, r3, #3
 800a8c4:	440b      	add	r3, r1
 800a8c6:	3350      	adds	r3, #80	; 0x50
 800a8c8:	781b      	ldrb	r3, [r3, #0]
 800a8ca:	f083 0301 	eor.w	r3, r3, #1
 800a8ce:	b2d8      	uxtb	r0, r3
 800a8d0:	6879      	ldr	r1, [r7, #4]
 800a8d2:	68fa      	ldr	r2, [r7, #12]
 800a8d4:	4613      	mov	r3, r2
 800a8d6:	009b      	lsls	r3, r3, #2
 800a8d8:	4413      	add	r3, r2
 800a8da:	00db      	lsls	r3, r3, #3
 800a8dc:	440b      	add	r3, r1
 800a8de:	3350      	adds	r3, #80	; 0x50
 800a8e0:	4602      	mov	r2, r0
 800a8e2:	701a      	strb	r2, [r3, #0]
}
 800a8e4:	e1f7      	b.n	800acd6 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	015a      	lsls	r2, r3, #5
 800a8ea:	693b      	ldr	r3, [r7, #16]
 800a8ec:	4413      	add	r3, r2
 800a8ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a8f2:	689b      	ldr	r3, [r3, #8]
 800a8f4:	f003 0302 	and.w	r3, r3, #2
 800a8f8:	2b02      	cmp	r3, #2
 800a8fa:	f040 811a 	bne.w	800ab32 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	015a      	lsls	r2, r3, #5
 800a902:	693b      	ldr	r3, [r7, #16]
 800a904:	4413      	add	r3, r2
 800a906:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a90a:	68db      	ldr	r3, [r3, #12]
 800a90c:	68fa      	ldr	r2, [r7, #12]
 800a90e:	0151      	lsls	r1, r2, #5
 800a910:	693a      	ldr	r2, [r7, #16]
 800a912:	440a      	add	r2, r1
 800a914:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a918:	f023 0302 	bic.w	r3, r3, #2
 800a91c:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800a91e:	6879      	ldr	r1, [r7, #4]
 800a920:	68fa      	ldr	r2, [r7, #12]
 800a922:	4613      	mov	r3, r2
 800a924:	009b      	lsls	r3, r3, #2
 800a926:	4413      	add	r3, r2
 800a928:	00db      	lsls	r3, r3, #3
 800a92a:	440b      	add	r3, r1
 800a92c:	335d      	adds	r3, #93	; 0x5d
 800a92e:	781b      	ldrb	r3, [r3, #0]
 800a930:	2b01      	cmp	r3, #1
 800a932:	d10a      	bne.n	800a94a <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800a934:	6879      	ldr	r1, [r7, #4]
 800a936:	68fa      	ldr	r2, [r7, #12]
 800a938:	4613      	mov	r3, r2
 800a93a:	009b      	lsls	r3, r3, #2
 800a93c:	4413      	add	r3, r2
 800a93e:	00db      	lsls	r3, r3, #3
 800a940:	440b      	add	r3, r1
 800a942:	335c      	adds	r3, #92	; 0x5c
 800a944:	2201      	movs	r2, #1
 800a946:	701a      	strb	r2, [r3, #0]
 800a948:	e0d9      	b.n	800aafe <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800a94a:	6879      	ldr	r1, [r7, #4]
 800a94c:	68fa      	ldr	r2, [r7, #12]
 800a94e:	4613      	mov	r3, r2
 800a950:	009b      	lsls	r3, r3, #2
 800a952:	4413      	add	r3, r2
 800a954:	00db      	lsls	r3, r3, #3
 800a956:	440b      	add	r3, r1
 800a958:	335d      	adds	r3, #93	; 0x5d
 800a95a:	781b      	ldrb	r3, [r3, #0]
 800a95c:	2b05      	cmp	r3, #5
 800a95e:	d10a      	bne.n	800a976 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800a960:	6879      	ldr	r1, [r7, #4]
 800a962:	68fa      	ldr	r2, [r7, #12]
 800a964:	4613      	mov	r3, r2
 800a966:	009b      	lsls	r3, r3, #2
 800a968:	4413      	add	r3, r2
 800a96a:	00db      	lsls	r3, r3, #3
 800a96c:	440b      	add	r3, r1
 800a96e:	335c      	adds	r3, #92	; 0x5c
 800a970:	2205      	movs	r2, #5
 800a972:	701a      	strb	r2, [r3, #0]
 800a974:	e0c3      	b.n	800aafe <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800a976:	6879      	ldr	r1, [r7, #4]
 800a978:	68fa      	ldr	r2, [r7, #12]
 800a97a:	4613      	mov	r3, r2
 800a97c:	009b      	lsls	r3, r3, #2
 800a97e:	4413      	add	r3, r2
 800a980:	00db      	lsls	r3, r3, #3
 800a982:	440b      	add	r3, r1
 800a984:	335d      	adds	r3, #93	; 0x5d
 800a986:	781b      	ldrb	r3, [r3, #0]
 800a988:	2b06      	cmp	r3, #6
 800a98a:	d00a      	beq.n	800a9a2 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800a98c:	6879      	ldr	r1, [r7, #4]
 800a98e:	68fa      	ldr	r2, [r7, #12]
 800a990:	4613      	mov	r3, r2
 800a992:	009b      	lsls	r3, r3, #2
 800a994:	4413      	add	r3, r2
 800a996:	00db      	lsls	r3, r3, #3
 800a998:	440b      	add	r3, r1
 800a99a:	335d      	adds	r3, #93	; 0x5d
 800a99c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800a99e:	2b08      	cmp	r3, #8
 800a9a0:	d156      	bne.n	800aa50 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 800a9a2:	6879      	ldr	r1, [r7, #4]
 800a9a4:	68fa      	ldr	r2, [r7, #12]
 800a9a6:	4613      	mov	r3, r2
 800a9a8:	009b      	lsls	r3, r3, #2
 800a9aa:	4413      	add	r3, r2
 800a9ac:	00db      	lsls	r3, r3, #3
 800a9ae:	440b      	add	r3, r1
 800a9b0:	3358      	adds	r3, #88	; 0x58
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	1c59      	adds	r1, r3, #1
 800a9b6:	6878      	ldr	r0, [r7, #4]
 800a9b8:	68fa      	ldr	r2, [r7, #12]
 800a9ba:	4613      	mov	r3, r2
 800a9bc:	009b      	lsls	r3, r3, #2
 800a9be:	4413      	add	r3, r2
 800a9c0:	00db      	lsls	r3, r3, #3
 800a9c2:	4403      	add	r3, r0
 800a9c4:	3358      	adds	r3, #88	; 0x58
 800a9c6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800a9c8:	6879      	ldr	r1, [r7, #4]
 800a9ca:	68fa      	ldr	r2, [r7, #12]
 800a9cc:	4613      	mov	r3, r2
 800a9ce:	009b      	lsls	r3, r3, #2
 800a9d0:	4413      	add	r3, r2
 800a9d2:	00db      	lsls	r3, r3, #3
 800a9d4:	440b      	add	r3, r1
 800a9d6:	3358      	adds	r3, #88	; 0x58
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	2b03      	cmp	r3, #3
 800a9dc:	d914      	bls.n	800aa08 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800a9de:	6879      	ldr	r1, [r7, #4]
 800a9e0:	68fa      	ldr	r2, [r7, #12]
 800a9e2:	4613      	mov	r3, r2
 800a9e4:	009b      	lsls	r3, r3, #2
 800a9e6:	4413      	add	r3, r2
 800a9e8:	00db      	lsls	r3, r3, #3
 800a9ea:	440b      	add	r3, r1
 800a9ec:	3358      	adds	r3, #88	; 0x58
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800a9f2:	6879      	ldr	r1, [r7, #4]
 800a9f4:	68fa      	ldr	r2, [r7, #12]
 800a9f6:	4613      	mov	r3, r2
 800a9f8:	009b      	lsls	r3, r3, #2
 800a9fa:	4413      	add	r3, r2
 800a9fc:	00db      	lsls	r3, r3, #3
 800a9fe:	440b      	add	r3, r1
 800aa00:	335c      	adds	r3, #92	; 0x5c
 800aa02:	2204      	movs	r2, #4
 800aa04:	701a      	strb	r2, [r3, #0]
 800aa06:	e009      	b.n	800aa1c <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800aa08:	6879      	ldr	r1, [r7, #4]
 800aa0a:	68fa      	ldr	r2, [r7, #12]
 800aa0c:	4613      	mov	r3, r2
 800aa0e:	009b      	lsls	r3, r3, #2
 800aa10:	4413      	add	r3, r2
 800aa12:	00db      	lsls	r3, r3, #3
 800aa14:	440b      	add	r3, r1
 800aa16:	335c      	adds	r3, #92	; 0x5c
 800aa18:	2202      	movs	r2, #2
 800aa1a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	015a      	lsls	r2, r3, #5
 800aa20:	693b      	ldr	r3, [r7, #16]
 800aa22:	4413      	add	r3, r2
 800aa24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800aa2c:	68bb      	ldr	r3, [r7, #8]
 800aa2e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800aa32:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800aa34:	68bb      	ldr	r3, [r7, #8]
 800aa36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800aa3a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	015a      	lsls	r2, r3, #5
 800aa40:	693b      	ldr	r3, [r7, #16]
 800aa42:	4413      	add	r3, r2
 800aa44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa48:	461a      	mov	r2, r3
 800aa4a:	68bb      	ldr	r3, [r7, #8]
 800aa4c:	6013      	str	r3, [r2, #0]
 800aa4e:	e056      	b.n	800aafe <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800aa50:	6879      	ldr	r1, [r7, #4]
 800aa52:	68fa      	ldr	r2, [r7, #12]
 800aa54:	4613      	mov	r3, r2
 800aa56:	009b      	lsls	r3, r3, #2
 800aa58:	4413      	add	r3, r2
 800aa5a:	00db      	lsls	r3, r3, #3
 800aa5c:	440b      	add	r3, r1
 800aa5e:	335d      	adds	r3, #93	; 0x5d
 800aa60:	781b      	ldrb	r3, [r3, #0]
 800aa62:	2b03      	cmp	r3, #3
 800aa64:	d123      	bne.n	800aaae <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800aa66:	6879      	ldr	r1, [r7, #4]
 800aa68:	68fa      	ldr	r2, [r7, #12]
 800aa6a:	4613      	mov	r3, r2
 800aa6c:	009b      	lsls	r3, r3, #2
 800aa6e:	4413      	add	r3, r2
 800aa70:	00db      	lsls	r3, r3, #3
 800aa72:	440b      	add	r3, r1
 800aa74:	335c      	adds	r3, #92	; 0x5c
 800aa76:	2202      	movs	r2, #2
 800aa78:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	015a      	lsls	r2, r3, #5
 800aa7e:	693b      	ldr	r3, [r7, #16]
 800aa80:	4413      	add	r3, r2
 800aa82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800aa8a:	68bb      	ldr	r3, [r7, #8]
 800aa8c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800aa90:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800aa92:	68bb      	ldr	r3, [r7, #8]
 800aa94:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800aa98:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	015a      	lsls	r2, r3, #5
 800aa9e:	693b      	ldr	r3, [r7, #16]
 800aaa0:	4413      	add	r3, r2
 800aaa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aaa6:	461a      	mov	r2, r3
 800aaa8:	68bb      	ldr	r3, [r7, #8]
 800aaaa:	6013      	str	r3, [r2, #0]
 800aaac:	e027      	b.n	800aafe <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800aaae:	6879      	ldr	r1, [r7, #4]
 800aab0:	68fa      	ldr	r2, [r7, #12]
 800aab2:	4613      	mov	r3, r2
 800aab4:	009b      	lsls	r3, r3, #2
 800aab6:	4413      	add	r3, r2
 800aab8:	00db      	lsls	r3, r3, #3
 800aaba:	440b      	add	r3, r1
 800aabc:	335d      	adds	r3, #93	; 0x5d
 800aabe:	781b      	ldrb	r3, [r3, #0]
 800aac0:	2b07      	cmp	r3, #7
 800aac2:	d11c      	bne.n	800aafe <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 800aac4:	6879      	ldr	r1, [r7, #4]
 800aac6:	68fa      	ldr	r2, [r7, #12]
 800aac8:	4613      	mov	r3, r2
 800aaca:	009b      	lsls	r3, r3, #2
 800aacc:	4413      	add	r3, r2
 800aace:	00db      	lsls	r3, r3, #3
 800aad0:	440b      	add	r3, r1
 800aad2:	3358      	adds	r3, #88	; 0x58
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	1c59      	adds	r1, r3, #1
 800aad8:	6878      	ldr	r0, [r7, #4]
 800aada:	68fa      	ldr	r2, [r7, #12]
 800aadc:	4613      	mov	r3, r2
 800aade:	009b      	lsls	r3, r3, #2
 800aae0:	4413      	add	r3, r2
 800aae2:	00db      	lsls	r3, r3, #3
 800aae4:	4403      	add	r3, r0
 800aae6:	3358      	adds	r3, #88	; 0x58
 800aae8:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800aaea:	6879      	ldr	r1, [r7, #4]
 800aaec:	68fa      	ldr	r2, [r7, #12]
 800aaee:	4613      	mov	r3, r2
 800aaf0:	009b      	lsls	r3, r3, #2
 800aaf2:	4413      	add	r3, r2
 800aaf4:	00db      	lsls	r3, r3, #3
 800aaf6:	440b      	add	r3, r1
 800aaf8:	335c      	adds	r3, #92	; 0x5c
 800aafa:	2204      	movs	r2, #4
 800aafc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	015a      	lsls	r2, r3, #5
 800ab02:	693b      	ldr	r3, [r7, #16]
 800ab04:	4413      	add	r3, r2
 800ab06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab0a:	461a      	mov	r2, r3
 800ab0c:	2302      	movs	r3, #2
 800ab0e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	b2d8      	uxtb	r0, r3
 800ab14:	6879      	ldr	r1, [r7, #4]
 800ab16:	68fa      	ldr	r2, [r7, #12]
 800ab18:	4613      	mov	r3, r2
 800ab1a:	009b      	lsls	r3, r3, #2
 800ab1c:	4413      	add	r3, r2
 800ab1e:	00db      	lsls	r3, r3, #3
 800ab20:	440b      	add	r3, r1
 800ab22:	335c      	adds	r3, #92	; 0x5c
 800ab24:	781b      	ldrb	r3, [r3, #0]
 800ab26:	461a      	mov	r2, r3
 800ab28:	4601      	mov	r1, r0
 800ab2a:	6878      	ldr	r0, [r7, #4]
 800ab2c:	f005 fa54 	bl	800ffd8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800ab30:	e0d1      	b.n	800acd6 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	015a      	lsls	r2, r3, #5
 800ab36:	693b      	ldr	r3, [r7, #16]
 800ab38:	4413      	add	r3, r2
 800ab3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab3e:	689b      	ldr	r3, [r3, #8]
 800ab40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab44:	2b80      	cmp	r3, #128	; 0x80
 800ab46:	d13e      	bne.n	800abc6 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	015a      	lsls	r2, r3, #5
 800ab4c:	693b      	ldr	r3, [r7, #16]
 800ab4e:	4413      	add	r3, r2
 800ab50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab54:	68db      	ldr	r3, [r3, #12]
 800ab56:	68fa      	ldr	r2, [r7, #12]
 800ab58:	0151      	lsls	r1, r2, #5
 800ab5a:	693a      	ldr	r2, [r7, #16]
 800ab5c:	440a      	add	r2, r1
 800ab5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ab62:	f043 0302 	orr.w	r3, r3, #2
 800ab66:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 800ab68:	6879      	ldr	r1, [r7, #4]
 800ab6a:	68fa      	ldr	r2, [r7, #12]
 800ab6c:	4613      	mov	r3, r2
 800ab6e:	009b      	lsls	r3, r3, #2
 800ab70:	4413      	add	r3, r2
 800ab72:	00db      	lsls	r3, r3, #3
 800ab74:	440b      	add	r3, r1
 800ab76:	3358      	adds	r3, #88	; 0x58
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	1c59      	adds	r1, r3, #1
 800ab7c:	6878      	ldr	r0, [r7, #4]
 800ab7e:	68fa      	ldr	r2, [r7, #12]
 800ab80:	4613      	mov	r3, r2
 800ab82:	009b      	lsls	r3, r3, #2
 800ab84:	4413      	add	r3, r2
 800ab86:	00db      	lsls	r3, r3, #3
 800ab88:	4403      	add	r3, r0
 800ab8a:	3358      	adds	r3, #88	; 0x58
 800ab8c:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800ab8e:	6879      	ldr	r1, [r7, #4]
 800ab90:	68fa      	ldr	r2, [r7, #12]
 800ab92:	4613      	mov	r3, r2
 800ab94:	009b      	lsls	r3, r3, #2
 800ab96:	4413      	add	r3, r2
 800ab98:	00db      	lsls	r3, r3, #3
 800ab9a:	440b      	add	r3, r1
 800ab9c:	335d      	adds	r3, #93	; 0x5d
 800ab9e:	2206      	movs	r2, #6
 800aba0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	68fa      	ldr	r2, [r7, #12]
 800aba8:	b2d2      	uxtb	r2, r2
 800abaa:	4611      	mov	r1, r2
 800abac:	4618      	mov	r0, r3
 800abae:	f003 f870 	bl	800dc92 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	015a      	lsls	r2, r3, #5
 800abb6:	693b      	ldr	r3, [r7, #16]
 800abb8:	4413      	add	r3, r2
 800abba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800abbe:	461a      	mov	r2, r3
 800abc0:	2380      	movs	r3, #128	; 0x80
 800abc2:	6093      	str	r3, [r2, #8]
}
 800abc4:	e087      	b.n	800acd6 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	015a      	lsls	r2, r3, #5
 800abca:	693b      	ldr	r3, [r7, #16]
 800abcc:	4413      	add	r3, r2
 800abce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800abd2:	689b      	ldr	r3, [r3, #8]
 800abd4:	f003 0310 	and.w	r3, r3, #16
 800abd8:	2b10      	cmp	r3, #16
 800abda:	d17c      	bne.n	800acd6 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800abdc:	6879      	ldr	r1, [r7, #4]
 800abde:	68fa      	ldr	r2, [r7, #12]
 800abe0:	4613      	mov	r3, r2
 800abe2:	009b      	lsls	r3, r3, #2
 800abe4:	4413      	add	r3, r2
 800abe6:	00db      	lsls	r3, r3, #3
 800abe8:	440b      	add	r3, r1
 800abea:	333f      	adds	r3, #63	; 0x3f
 800abec:	781b      	ldrb	r3, [r3, #0]
 800abee:	2b03      	cmp	r3, #3
 800abf0:	d122      	bne.n	800ac38 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800abf2:	6879      	ldr	r1, [r7, #4]
 800abf4:	68fa      	ldr	r2, [r7, #12]
 800abf6:	4613      	mov	r3, r2
 800abf8:	009b      	lsls	r3, r3, #2
 800abfa:	4413      	add	r3, r2
 800abfc:	00db      	lsls	r3, r3, #3
 800abfe:	440b      	add	r3, r1
 800ac00:	3358      	adds	r3, #88	; 0x58
 800ac02:	2200      	movs	r2, #0
 800ac04:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	015a      	lsls	r2, r3, #5
 800ac0a:	693b      	ldr	r3, [r7, #16]
 800ac0c:	4413      	add	r3, r2
 800ac0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac12:	68db      	ldr	r3, [r3, #12]
 800ac14:	68fa      	ldr	r2, [r7, #12]
 800ac16:	0151      	lsls	r1, r2, #5
 800ac18:	693a      	ldr	r2, [r7, #16]
 800ac1a:	440a      	add	r2, r1
 800ac1c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ac20:	f043 0302 	orr.w	r3, r3, #2
 800ac24:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	68fa      	ldr	r2, [r7, #12]
 800ac2c:	b2d2      	uxtb	r2, r2
 800ac2e:	4611      	mov	r1, r2
 800ac30:	4618      	mov	r0, r3
 800ac32:	f003 f82e 	bl	800dc92 <USB_HC_Halt>
 800ac36:	e045      	b.n	800acc4 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800ac38:	6879      	ldr	r1, [r7, #4]
 800ac3a:	68fa      	ldr	r2, [r7, #12]
 800ac3c:	4613      	mov	r3, r2
 800ac3e:	009b      	lsls	r3, r3, #2
 800ac40:	4413      	add	r3, r2
 800ac42:	00db      	lsls	r3, r3, #3
 800ac44:	440b      	add	r3, r1
 800ac46:	333f      	adds	r3, #63	; 0x3f
 800ac48:	781b      	ldrb	r3, [r3, #0]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d00a      	beq.n	800ac64 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800ac4e:	6879      	ldr	r1, [r7, #4]
 800ac50:	68fa      	ldr	r2, [r7, #12]
 800ac52:	4613      	mov	r3, r2
 800ac54:	009b      	lsls	r3, r3, #2
 800ac56:	4413      	add	r3, r2
 800ac58:	00db      	lsls	r3, r3, #3
 800ac5a:	440b      	add	r3, r1
 800ac5c:	333f      	adds	r3, #63	; 0x3f
 800ac5e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800ac60:	2b02      	cmp	r3, #2
 800ac62:	d12f      	bne.n	800acc4 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800ac64:	6879      	ldr	r1, [r7, #4]
 800ac66:	68fa      	ldr	r2, [r7, #12]
 800ac68:	4613      	mov	r3, r2
 800ac6a:	009b      	lsls	r3, r3, #2
 800ac6c:	4413      	add	r3, r2
 800ac6e:	00db      	lsls	r3, r3, #3
 800ac70:	440b      	add	r3, r1
 800ac72:	3358      	adds	r3, #88	; 0x58
 800ac74:	2200      	movs	r2, #0
 800ac76:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	691b      	ldr	r3, [r3, #16]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d121      	bne.n	800acc4 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 800ac80:	6879      	ldr	r1, [r7, #4]
 800ac82:	68fa      	ldr	r2, [r7, #12]
 800ac84:	4613      	mov	r3, r2
 800ac86:	009b      	lsls	r3, r3, #2
 800ac88:	4413      	add	r3, r2
 800ac8a:	00db      	lsls	r3, r3, #3
 800ac8c:	440b      	add	r3, r1
 800ac8e:	335d      	adds	r3, #93	; 0x5d
 800ac90:	2203      	movs	r2, #3
 800ac92:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	015a      	lsls	r2, r3, #5
 800ac98:	693b      	ldr	r3, [r7, #16]
 800ac9a:	4413      	add	r3, r2
 800ac9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aca0:	68db      	ldr	r3, [r3, #12]
 800aca2:	68fa      	ldr	r2, [r7, #12]
 800aca4:	0151      	lsls	r1, r2, #5
 800aca6:	693a      	ldr	r2, [r7, #16]
 800aca8:	440a      	add	r2, r1
 800acaa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800acae:	f043 0302 	orr.w	r3, r3, #2
 800acb2:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	68fa      	ldr	r2, [r7, #12]
 800acba:	b2d2      	uxtb	r2, r2
 800acbc:	4611      	mov	r1, r2
 800acbe:	4618      	mov	r0, r3
 800acc0:	f002 ffe7 	bl	800dc92 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	015a      	lsls	r2, r3, #5
 800acc8:	693b      	ldr	r3, [r7, #16]
 800acca:	4413      	add	r3, r2
 800accc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800acd0:	461a      	mov	r2, r3
 800acd2:	2310      	movs	r3, #16
 800acd4:	6093      	str	r3, [r2, #8]
}
 800acd6:	bf00      	nop
 800acd8:	3718      	adds	r7, #24
 800acda:	46bd      	mov	sp, r7
 800acdc:	bd80      	pop	{r7, pc}

0800acde <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800acde:	b580      	push	{r7, lr}
 800ace0:	b086      	sub	sp, #24
 800ace2:	af00      	add	r7, sp, #0
 800ace4:	6078      	str	r0, [r7, #4]
 800ace6:	460b      	mov	r3, r1
 800ace8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acf0:	697b      	ldr	r3, [r7, #20]
 800acf2:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800acf4:	78fb      	ldrb	r3, [r7, #3]
 800acf6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	015a      	lsls	r2, r3, #5
 800acfc:	693b      	ldr	r3, [r7, #16]
 800acfe:	4413      	add	r3, r2
 800ad00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad04:	689b      	ldr	r3, [r3, #8]
 800ad06:	f003 0304 	and.w	r3, r3, #4
 800ad0a:	2b04      	cmp	r3, #4
 800ad0c:	d119      	bne.n	800ad42 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	015a      	lsls	r2, r3, #5
 800ad12:	693b      	ldr	r3, [r7, #16]
 800ad14:	4413      	add	r3, r2
 800ad16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad1a:	461a      	mov	r2, r3
 800ad1c:	2304      	movs	r3, #4
 800ad1e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	015a      	lsls	r2, r3, #5
 800ad24:	693b      	ldr	r3, [r7, #16]
 800ad26:	4413      	add	r3, r2
 800ad28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad2c:	68db      	ldr	r3, [r3, #12]
 800ad2e:	68fa      	ldr	r2, [r7, #12]
 800ad30:	0151      	lsls	r1, r2, #5
 800ad32:	693a      	ldr	r2, [r7, #16]
 800ad34:	440a      	add	r2, r1
 800ad36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ad3a:	f043 0302 	orr.w	r3, r3, #2
 800ad3e:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 800ad40:	e33e      	b.n	800b3c0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	015a      	lsls	r2, r3, #5
 800ad46:	693b      	ldr	r3, [r7, #16]
 800ad48:	4413      	add	r3, r2
 800ad4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad4e:	689b      	ldr	r3, [r3, #8]
 800ad50:	f003 0320 	and.w	r3, r3, #32
 800ad54:	2b20      	cmp	r3, #32
 800ad56:	d141      	bne.n	800addc <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	015a      	lsls	r2, r3, #5
 800ad5c:	693b      	ldr	r3, [r7, #16]
 800ad5e:	4413      	add	r3, r2
 800ad60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad64:	461a      	mov	r2, r3
 800ad66:	2320      	movs	r3, #32
 800ad68:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800ad6a:	6879      	ldr	r1, [r7, #4]
 800ad6c:	68fa      	ldr	r2, [r7, #12]
 800ad6e:	4613      	mov	r3, r2
 800ad70:	009b      	lsls	r3, r3, #2
 800ad72:	4413      	add	r3, r2
 800ad74:	00db      	lsls	r3, r3, #3
 800ad76:	440b      	add	r3, r1
 800ad78:	333d      	adds	r3, #61	; 0x3d
 800ad7a:	781b      	ldrb	r3, [r3, #0]
 800ad7c:	2b01      	cmp	r3, #1
 800ad7e:	f040 831f 	bne.w	800b3c0 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 800ad82:	6879      	ldr	r1, [r7, #4]
 800ad84:	68fa      	ldr	r2, [r7, #12]
 800ad86:	4613      	mov	r3, r2
 800ad88:	009b      	lsls	r3, r3, #2
 800ad8a:	4413      	add	r3, r2
 800ad8c:	00db      	lsls	r3, r3, #3
 800ad8e:	440b      	add	r3, r1
 800ad90:	333d      	adds	r3, #61	; 0x3d
 800ad92:	2200      	movs	r2, #0
 800ad94:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800ad96:	6879      	ldr	r1, [r7, #4]
 800ad98:	68fa      	ldr	r2, [r7, #12]
 800ad9a:	4613      	mov	r3, r2
 800ad9c:	009b      	lsls	r3, r3, #2
 800ad9e:	4413      	add	r3, r2
 800ada0:	00db      	lsls	r3, r3, #3
 800ada2:	440b      	add	r3, r1
 800ada4:	335c      	adds	r3, #92	; 0x5c
 800ada6:	2202      	movs	r2, #2
 800ada8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	015a      	lsls	r2, r3, #5
 800adae:	693b      	ldr	r3, [r7, #16]
 800adb0:	4413      	add	r3, r2
 800adb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800adb6:	68db      	ldr	r3, [r3, #12]
 800adb8:	68fa      	ldr	r2, [r7, #12]
 800adba:	0151      	lsls	r1, r2, #5
 800adbc:	693a      	ldr	r2, [r7, #16]
 800adbe:	440a      	add	r2, r1
 800adc0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800adc4:	f043 0302 	orr.w	r3, r3, #2
 800adc8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	68fa      	ldr	r2, [r7, #12]
 800add0:	b2d2      	uxtb	r2, r2
 800add2:	4611      	mov	r1, r2
 800add4:	4618      	mov	r0, r3
 800add6:	f002 ff5c 	bl	800dc92 <USB_HC_Halt>
}
 800adda:	e2f1      	b.n	800b3c0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	015a      	lsls	r2, r3, #5
 800ade0:	693b      	ldr	r3, [r7, #16]
 800ade2:	4413      	add	r3, r2
 800ade4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ade8:	689b      	ldr	r3, [r3, #8]
 800adea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800adee:	2b40      	cmp	r3, #64	; 0x40
 800adf0:	d13f      	bne.n	800ae72 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 800adf2:	6879      	ldr	r1, [r7, #4]
 800adf4:	68fa      	ldr	r2, [r7, #12]
 800adf6:	4613      	mov	r3, r2
 800adf8:	009b      	lsls	r3, r3, #2
 800adfa:	4413      	add	r3, r2
 800adfc:	00db      	lsls	r3, r3, #3
 800adfe:	440b      	add	r3, r1
 800ae00:	335d      	adds	r3, #93	; 0x5d
 800ae02:	2204      	movs	r2, #4
 800ae04:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800ae06:	6879      	ldr	r1, [r7, #4]
 800ae08:	68fa      	ldr	r2, [r7, #12]
 800ae0a:	4613      	mov	r3, r2
 800ae0c:	009b      	lsls	r3, r3, #2
 800ae0e:	4413      	add	r3, r2
 800ae10:	00db      	lsls	r3, r3, #3
 800ae12:	440b      	add	r3, r1
 800ae14:	333d      	adds	r3, #61	; 0x3d
 800ae16:	2201      	movs	r2, #1
 800ae18:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800ae1a:	6879      	ldr	r1, [r7, #4]
 800ae1c:	68fa      	ldr	r2, [r7, #12]
 800ae1e:	4613      	mov	r3, r2
 800ae20:	009b      	lsls	r3, r3, #2
 800ae22:	4413      	add	r3, r2
 800ae24:	00db      	lsls	r3, r3, #3
 800ae26:	440b      	add	r3, r1
 800ae28:	3358      	adds	r3, #88	; 0x58
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	015a      	lsls	r2, r3, #5
 800ae32:	693b      	ldr	r3, [r7, #16]
 800ae34:	4413      	add	r3, r2
 800ae36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae3a:	68db      	ldr	r3, [r3, #12]
 800ae3c:	68fa      	ldr	r2, [r7, #12]
 800ae3e:	0151      	lsls	r1, r2, #5
 800ae40:	693a      	ldr	r2, [r7, #16]
 800ae42:	440a      	add	r2, r1
 800ae44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ae48:	f043 0302 	orr.w	r3, r3, #2
 800ae4c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	68fa      	ldr	r2, [r7, #12]
 800ae54:	b2d2      	uxtb	r2, r2
 800ae56:	4611      	mov	r1, r2
 800ae58:	4618      	mov	r0, r3
 800ae5a:	f002 ff1a 	bl	800dc92 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	015a      	lsls	r2, r3, #5
 800ae62:	693b      	ldr	r3, [r7, #16]
 800ae64:	4413      	add	r3, r2
 800ae66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae6a:	461a      	mov	r2, r3
 800ae6c:	2340      	movs	r3, #64	; 0x40
 800ae6e:	6093      	str	r3, [r2, #8]
}
 800ae70:	e2a6      	b.n	800b3c0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	015a      	lsls	r2, r3, #5
 800ae76:	693b      	ldr	r3, [r7, #16]
 800ae78:	4413      	add	r3, r2
 800ae7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae7e:	689b      	ldr	r3, [r3, #8]
 800ae80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ae84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ae88:	d122      	bne.n	800aed0 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	015a      	lsls	r2, r3, #5
 800ae8e:	693b      	ldr	r3, [r7, #16]
 800ae90:	4413      	add	r3, r2
 800ae92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae96:	68db      	ldr	r3, [r3, #12]
 800ae98:	68fa      	ldr	r2, [r7, #12]
 800ae9a:	0151      	lsls	r1, r2, #5
 800ae9c:	693a      	ldr	r2, [r7, #16]
 800ae9e:	440a      	add	r2, r1
 800aea0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aea4:	f043 0302 	orr.w	r3, r3, #2
 800aea8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	68fa      	ldr	r2, [r7, #12]
 800aeb0:	b2d2      	uxtb	r2, r2
 800aeb2:	4611      	mov	r1, r2
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	f002 feec 	bl	800dc92 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	015a      	lsls	r2, r3, #5
 800aebe:	693b      	ldr	r3, [r7, #16]
 800aec0:	4413      	add	r3, r2
 800aec2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aec6:	461a      	mov	r2, r3
 800aec8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aecc:	6093      	str	r3, [r2, #8]
}
 800aece:	e277      	b.n	800b3c0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	015a      	lsls	r2, r3, #5
 800aed4:	693b      	ldr	r3, [r7, #16]
 800aed6:	4413      	add	r3, r2
 800aed8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aedc:	689b      	ldr	r3, [r3, #8]
 800aede:	f003 0301 	and.w	r3, r3, #1
 800aee2:	2b01      	cmp	r3, #1
 800aee4:	d135      	bne.n	800af52 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800aee6:	6879      	ldr	r1, [r7, #4]
 800aee8:	68fa      	ldr	r2, [r7, #12]
 800aeea:	4613      	mov	r3, r2
 800aeec:	009b      	lsls	r3, r3, #2
 800aeee:	4413      	add	r3, r2
 800aef0:	00db      	lsls	r3, r3, #3
 800aef2:	440b      	add	r3, r1
 800aef4:	3358      	adds	r3, #88	; 0x58
 800aef6:	2200      	movs	r2, #0
 800aef8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	015a      	lsls	r2, r3, #5
 800aefe:	693b      	ldr	r3, [r7, #16]
 800af00:	4413      	add	r3, r2
 800af02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800af06:	68db      	ldr	r3, [r3, #12]
 800af08:	68fa      	ldr	r2, [r7, #12]
 800af0a:	0151      	lsls	r1, r2, #5
 800af0c:	693a      	ldr	r2, [r7, #16]
 800af0e:	440a      	add	r2, r1
 800af10:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800af14:	f043 0302 	orr.w	r3, r3, #2
 800af18:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	68fa      	ldr	r2, [r7, #12]
 800af20:	b2d2      	uxtb	r2, r2
 800af22:	4611      	mov	r1, r2
 800af24:	4618      	mov	r0, r3
 800af26:	f002 feb4 	bl	800dc92 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	015a      	lsls	r2, r3, #5
 800af2e:	693b      	ldr	r3, [r7, #16]
 800af30:	4413      	add	r3, r2
 800af32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800af36:	461a      	mov	r2, r3
 800af38:	2301      	movs	r3, #1
 800af3a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800af3c:	6879      	ldr	r1, [r7, #4]
 800af3e:	68fa      	ldr	r2, [r7, #12]
 800af40:	4613      	mov	r3, r2
 800af42:	009b      	lsls	r3, r3, #2
 800af44:	4413      	add	r3, r2
 800af46:	00db      	lsls	r3, r3, #3
 800af48:	440b      	add	r3, r1
 800af4a:	335d      	adds	r3, #93	; 0x5d
 800af4c:	2201      	movs	r2, #1
 800af4e:	701a      	strb	r2, [r3, #0]
}
 800af50:	e236      	b.n	800b3c0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	015a      	lsls	r2, r3, #5
 800af56:	693b      	ldr	r3, [r7, #16]
 800af58:	4413      	add	r3, r2
 800af5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800af5e:	689b      	ldr	r3, [r3, #8]
 800af60:	f003 0308 	and.w	r3, r3, #8
 800af64:	2b08      	cmp	r3, #8
 800af66:	d12b      	bne.n	800afc0 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	015a      	lsls	r2, r3, #5
 800af6c:	693b      	ldr	r3, [r7, #16]
 800af6e:	4413      	add	r3, r2
 800af70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800af74:	461a      	mov	r2, r3
 800af76:	2308      	movs	r3, #8
 800af78:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	015a      	lsls	r2, r3, #5
 800af7e:	693b      	ldr	r3, [r7, #16]
 800af80:	4413      	add	r3, r2
 800af82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800af86:	68db      	ldr	r3, [r3, #12]
 800af88:	68fa      	ldr	r2, [r7, #12]
 800af8a:	0151      	lsls	r1, r2, #5
 800af8c:	693a      	ldr	r2, [r7, #16]
 800af8e:	440a      	add	r2, r1
 800af90:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800af94:	f043 0302 	orr.w	r3, r3, #2
 800af98:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	68fa      	ldr	r2, [r7, #12]
 800afa0:	b2d2      	uxtb	r2, r2
 800afa2:	4611      	mov	r1, r2
 800afa4:	4618      	mov	r0, r3
 800afa6:	f002 fe74 	bl	800dc92 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800afaa:	6879      	ldr	r1, [r7, #4]
 800afac:	68fa      	ldr	r2, [r7, #12]
 800afae:	4613      	mov	r3, r2
 800afb0:	009b      	lsls	r3, r3, #2
 800afb2:	4413      	add	r3, r2
 800afb4:	00db      	lsls	r3, r3, #3
 800afb6:	440b      	add	r3, r1
 800afb8:	335d      	adds	r3, #93	; 0x5d
 800afba:	2205      	movs	r2, #5
 800afbc:	701a      	strb	r2, [r3, #0]
}
 800afbe:	e1ff      	b.n	800b3c0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	015a      	lsls	r2, r3, #5
 800afc4:	693b      	ldr	r3, [r7, #16]
 800afc6:	4413      	add	r3, r2
 800afc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800afcc:	689b      	ldr	r3, [r3, #8]
 800afce:	f003 0310 	and.w	r3, r3, #16
 800afd2:	2b10      	cmp	r3, #16
 800afd4:	d155      	bne.n	800b082 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800afd6:	6879      	ldr	r1, [r7, #4]
 800afd8:	68fa      	ldr	r2, [r7, #12]
 800afda:	4613      	mov	r3, r2
 800afdc:	009b      	lsls	r3, r3, #2
 800afde:	4413      	add	r3, r2
 800afe0:	00db      	lsls	r3, r3, #3
 800afe2:	440b      	add	r3, r1
 800afe4:	3358      	adds	r3, #88	; 0x58
 800afe6:	2200      	movs	r2, #0
 800afe8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800afea:	6879      	ldr	r1, [r7, #4]
 800afec:	68fa      	ldr	r2, [r7, #12]
 800afee:	4613      	mov	r3, r2
 800aff0:	009b      	lsls	r3, r3, #2
 800aff2:	4413      	add	r3, r2
 800aff4:	00db      	lsls	r3, r3, #3
 800aff6:	440b      	add	r3, r1
 800aff8:	335d      	adds	r3, #93	; 0x5d
 800affa:	2203      	movs	r2, #3
 800affc:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800affe:	6879      	ldr	r1, [r7, #4]
 800b000:	68fa      	ldr	r2, [r7, #12]
 800b002:	4613      	mov	r3, r2
 800b004:	009b      	lsls	r3, r3, #2
 800b006:	4413      	add	r3, r2
 800b008:	00db      	lsls	r3, r3, #3
 800b00a:	440b      	add	r3, r1
 800b00c:	333d      	adds	r3, #61	; 0x3d
 800b00e:	781b      	ldrb	r3, [r3, #0]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d114      	bne.n	800b03e <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 800b014:	6879      	ldr	r1, [r7, #4]
 800b016:	68fa      	ldr	r2, [r7, #12]
 800b018:	4613      	mov	r3, r2
 800b01a:	009b      	lsls	r3, r3, #2
 800b01c:	4413      	add	r3, r2
 800b01e:	00db      	lsls	r3, r3, #3
 800b020:	440b      	add	r3, r1
 800b022:	333c      	adds	r3, #60	; 0x3c
 800b024:	781b      	ldrb	r3, [r3, #0]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d109      	bne.n	800b03e <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 800b02a:	6879      	ldr	r1, [r7, #4]
 800b02c:	68fa      	ldr	r2, [r7, #12]
 800b02e:	4613      	mov	r3, r2
 800b030:	009b      	lsls	r3, r3, #2
 800b032:	4413      	add	r3, r2
 800b034:	00db      	lsls	r3, r3, #3
 800b036:	440b      	add	r3, r1
 800b038:	333d      	adds	r3, #61	; 0x3d
 800b03a:	2201      	movs	r2, #1
 800b03c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	015a      	lsls	r2, r3, #5
 800b042:	693b      	ldr	r3, [r7, #16]
 800b044:	4413      	add	r3, r2
 800b046:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b04a:	68db      	ldr	r3, [r3, #12]
 800b04c:	68fa      	ldr	r2, [r7, #12]
 800b04e:	0151      	lsls	r1, r2, #5
 800b050:	693a      	ldr	r2, [r7, #16]
 800b052:	440a      	add	r2, r1
 800b054:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b058:	f043 0302 	orr.w	r3, r3, #2
 800b05c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	68fa      	ldr	r2, [r7, #12]
 800b064:	b2d2      	uxtb	r2, r2
 800b066:	4611      	mov	r1, r2
 800b068:	4618      	mov	r0, r3
 800b06a:	f002 fe12 	bl	800dc92 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	015a      	lsls	r2, r3, #5
 800b072:	693b      	ldr	r3, [r7, #16]
 800b074:	4413      	add	r3, r2
 800b076:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b07a:	461a      	mov	r2, r3
 800b07c:	2310      	movs	r3, #16
 800b07e:	6093      	str	r3, [r2, #8]
}
 800b080:	e19e      	b.n	800b3c0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	015a      	lsls	r2, r3, #5
 800b086:	693b      	ldr	r3, [r7, #16]
 800b088:	4413      	add	r3, r2
 800b08a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b08e:	689b      	ldr	r3, [r3, #8]
 800b090:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b094:	2b80      	cmp	r3, #128	; 0x80
 800b096:	d12b      	bne.n	800b0f0 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	015a      	lsls	r2, r3, #5
 800b09c:	693b      	ldr	r3, [r7, #16]
 800b09e:	4413      	add	r3, r2
 800b0a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b0a4:	68db      	ldr	r3, [r3, #12]
 800b0a6:	68fa      	ldr	r2, [r7, #12]
 800b0a8:	0151      	lsls	r1, r2, #5
 800b0aa:	693a      	ldr	r2, [r7, #16]
 800b0ac:	440a      	add	r2, r1
 800b0ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b0b2:	f043 0302 	orr.w	r3, r3, #2
 800b0b6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	68fa      	ldr	r2, [r7, #12]
 800b0be:	b2d2      	uxtb	r2, r2
 800b0c0:	4611      	mov	r1, r2
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	f002 fde5 	bl	800dc92 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 800b0c8:	6879      	ldr	r1, [r7, #4]
 800b0ca:	68fa      	ldr	r2, [r7, #12]
 800b0cc:	4613      	mov	r3, r2
 800b0ce:	009b      	lsls	r3, r3, #2
 800b0d0:	4413      	add	r3, r2
 800b0d2:	00db      	lsls	r3, r3, #3
 800b0d4:	440b      	add	r3, r1
 800b0d6:	335d      	adds	r3, #93	; 0x5d
 800b0d8:	2206      	movs	r2, #6
 800b0da:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	015a      	lsls	r2, r3, #5
 800b0e0:	693b      	ldr	r3, [r7, #16]
 800b0e2:	4413      	add	r3, r2
 800b0e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b0e8:	461a      	mov	r2, r3
 800b0ea:	2380      	movs	r3, #128	; 0x80
 800b0ec:	6093      	str	r3, [r2, #8]
}
 800b0ee:	e167      	b.n	800b3c0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	015a      	lsls	r2, r3, #5
 800b0f4:	693b      	ldr	r3, [r7, #16]
 800b0f6:	4413      	add	r3, r2
 800b0f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b0fc:	689b      	ldr	r3, [r3, #8]
 800b0fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b102:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b106:	d135      	bne.n	800b174 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	015a      	lsls	r2, r3, #5
 800b10c:	693b      	ldr	r3, [r7, #16]
 800b10e:	4413      	add	r3, r2
 800b110:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b114:	68db      	ldr	r3, [r3, #12]
 800b116:	68fa      	ldr	r2, [r7, #12]
 800b118:	0151      	lsls	r1, r2, #5
 800b11a:	693a      	ldr	r2, [r7, #16]
 800b11c:	440a      	add	r2, r1
 800b11e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b122:	f043 0302 	orr.w	r3, r3, #2
 800b126:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	68fa      	ldr	r2, [r7, #12]
 800b12e:	b2d2      	uxtb	r2, r2
 800b130:	4611      	mov	r1, r2
 800b132:	4618      	mov	r0, r3
 800b134:	f002 fdad 	bl	800dc92 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	015a      	lsls	r2, r3, #5
 800b13c:	693b      	ldr	r3, [r7, #16]
 800b13e:	4413      	add	r3, r2
 800b140:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b144:	461a      	mov	r2, r3
 800b146:	2310      	movs	r3, #16
 800b148:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	015a      	lsls	r2, r3, #5
 800b14e:	693b      	ldr	r3, [r7, #16]
 800b150:	4413      	add	r3, r2
 800b152:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b156:	461a      	mov	r2, r3
 800b158:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b15c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800b15e:	6879      	ldr	r1, [r7, #4]
 800b160:	68fa      	ldr	r2, [r7, #12]
 800b162:	4613      	mov	r3, r2
 800b164:	009b      	lsls	r3, r3, #2
 800b166:	4413      	add	r3, r2
 800b168:	00db      	lsls	r3, r3, #3
 800b16a:	440b      	add	r3, r1
 800b16c:	335d      	adds	r3, #93	; 0x5d
 800b16e:	2208      	movs	r2, #8
 800b170:	701a      	strb	r2, [r3, #0]
}
 800b172:	e125      	b.n	800b3c0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	015a      	lsls	r2, r3, #5
 800b178:	693b      	ldr	r3, [r7, #16]
 800b17a:	4413      	add	r3, r2
 800b17c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b180:	689b      	ldr	r3, [r3, #8]
 800b182:	f003 0302 	and.w	r3, r3, #2
 800b186:	2b02      	cmp	r3, #2
 800b188:	f040 811a 	bne.w	800b3c0 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	015a      	lsls	r2, r3, #5
 800b190:	693b      	ldr	r3, [r7, #16]
 800b192:	4413      	add	r3, r2
 800b194:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b198:	68db      	ldr	r3, [r3, #12]
 800b19a:	68fa      	ldr	r2, [r7, #12]
 800b19c:	0151      	lsls	r1, r2, #5
 800b19e:	693a      	ldr	r2, [r7, #16]
 800b1a0:	440a      	add	r2, r1
 800b1a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b1a6:	f023 0302 	bic.w	r3, r3, #2
 800b1aa:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800b1ac:	6879      	ldr	r1, [r7, #4]
 800b1ae:	68fa      	ldr	r2, [r7, #12]
 800b1b0:	4613      	mov	r3, r2
 800b1b2:	009b      	lsls	r3, r3, #2
 800b1b4:	4413      	add	r3, r2
 800b1b6:	00db      	lsls	r3, r3, #3
 800b1b8:	440b      	add	r3, r1
 800b1ba:	335d      	adds	r3, #93	; 0x5d
 800b1bc:	781b      	ldrb	r3, [r3, #0]
 800b1be:	2b01      	cmp	r3, #1
 800b1c0:	d137      	bne.n	800b232 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800b1c2:	6879      	ldr	r1, [r7, #4]
 800b1c4:	68fa      	ldr	r2, [r7, #12]
 800b1c6:	4613      	mov	r3, r2
 800b1c8:	009b      	lsls	r3, r3, #2
 800b1ca:	4413      	add	r3, r2
 800b1cc:	00db      	lsls	r3, r3, #3
 800b1ce:	440b      	add	r3, r1
 800b1d0:	335c      	adds	r3, #92	; 0x5c
 800b1d2:	2201      	movs	r2, #1
 800b1d4:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800b1d6:	6879      	ldr	r1, [r7, #4]
 800b1d8:	68fa      	ldr	r2, [r7, #12]
 800b1da:	4613      	mov	r3, r2
 800b1dc:	009b      	lsls	r3, r3, #2
 800b1de:	4413      	add	r3, r2
 800b1e0:	00db      	lsls	r3, r3, #3
 800b1e2:	440b      	add	r3, r1
 800b1e4:	333f      	adds	r3, #63	; 0x3f
 800b1e6:	781b      	ldrb	r3, [r3, #0]
 800b1e8:	2b02      	cmp	r3, #2
 800b1ea:	d00b      	beq.n	800b204 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800b1ec:	6879      	ldr	r1, [r7, #4]
 800b1ee:	68fa      	ldr	r2, [r7, #12]
 800b1f0:	4613      	mov	r3, r2
 800b1f2:	009b      	lsls	r3, r3, #2
 800b1f4:	4413      	add	r3, r2
 800b1f6:	00db      	lsls	r3, r3, #3
 800b1f8:	440b      	add	r3, r1
 800b1fa:	333f      	adds	r3, #63	; 0x3f
 800b1fc:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800b1fe:	2b03      	cmp	r3, #3
 800b200:	f040 80c5 	bne.w	800b38e <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 800b204:	6879      	ldr	r1, [r7, #4]
 800b206:	68fa      	ldr	r2, [r7, #12]
 800b208:	4613      	mov	r3, r2
 800b20a:	009b      	lsls	r3, r3, #2
 800b20c:	4413      	add	r3, r2
 800b20e:	00db      	lsls	r3, r3, #3
 800b210:	440b      	add	r3, r1
 800b212:	3351      	adds	r3, #81	; 0x51
 800b214:	781b      	ldrb	r3, [r3, #0]
 800b216:	f083 0301 	eor.w	r3, r3, #1
 800b21a:	b2d8      	uxtb	r0, r3
 800b21c:	6879      	ldr	r1, [r7, #4]
 800b21e:	68fa      	ldr	r2, [r7, #12]
 800b220:	4613      	mov	r3, r2
 800b222:	009b      	lsls	r3, r3, #2
 800b224:	4413      	add	r3, r2
 800b226:	00db      	lsls	r3, r3, #3
 800b228:	440b      	add	r3, r1
 800b22a:	3351      	adds	r3, #81	; 0x51
 800b22c:	4602      	mov	r2, r0
 800b22e:	701a      	strb	r2, [r3, #0]
 800b230:	e0ad      	b.n	800b38e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800b232:	6879      	ldr	r1, [r7, #4]
 800b234:	68fa      	ldr	r2, [r7, #12]
 800b236:	4613      	mov	r3, r2
 800b238:	009b      	lsls	r3, r3, #2
 800b23a:	4413      	add	r3, r2
 800b23c:	00db      	lsls	r3, r3, #3
 800b23e:	440b      	add	r3, r1
 800b240:	335d      	adds	r3, #93	; 0x5d
 800b242:	781b      	ldrb	r3, [r3, #0]
 800b244:	2b03      	cmp	r3, #3
 800b246:	d10a      	bne.n	800b25e <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800b248:	6879      	ldr	r1, [r7, #4]
 800b24a:	68fa      	ldr	r2, [r7, #12]
 800b24c:	4613      	mov	r3, r2
 800b24e:	009b      	lsls	r3, r3, #2
 800b250:	4413      	add	r3, r2
 800b252:	00db      	lsls	r3, r3, #3
 800b254:	440b      	add	r3, r1
 800b256:	335c      	adds	r3, #92	; 0x5c
 800b258:	2202      	movs	r2, #2
 800b25a:	701a      	strb	r2, [r3, #0]
 800b25c:	e097      	b.n	800b38e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800b25e:	6879      	ldr	r1, [r7, #4]
 800b260:	68fa      	ldr	r2, [r7, #12]
 800b262:	4613      	mov	r3, r2
 800b264:	009b      	lsls	r3, r3, #2
 800b266:	4413      	add	r3, r2
 800b268:	00db      	lsls	r3, r3, #3
 800b26a:	440b      	add	r3, r1
 800b26c:	335d      	adds	r3, #93	; 0x5d
 800b26e:	781b      	ldrb	r3, [r3, #0]
 800b270:	2b04      	cmp	r3, #4
 800b272:	d10a      	bne.n	800b28a <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800b274:	6879      	ldr	r1, [r7, #4]
 800b276:	68fa      	ldr	r2, [r7, #12]
 800b278:	4613      	mov	r3, r2
 800b27a:	009b      	lsls	r3, r3, #2
 800b27c:	4413      	add	r3, r2
 800b27e:	00db      	lsls	r3, r3, #3
 800b280:	440b      	add	r3, r1
 800b282:	335c      	adds	r3, #92	; 0x5c
 800b284:	2202      	movs	r2, #2
 800b286:	701a      	strb	r2, [r3, #0]
 800b288:	e081      	b.n	800b38e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800b28a:	6879      	ldr	r1, [r7, #4]
 800b28c:	68fa      	ldr	r2, [r7, #12]
 800b28e:	4613      	mov	r3, r2
 800b290:	009b      	lsls	r3, r3, #2
 800b292:	4413      	add	r3, r2
 800b294:	00db      	lsls	r3, r3, #3
 800b296:	440b      	add	r3, r1
 800b298:	335d      	adds	r3, #93	; 0x5d
 800b29a:	781b      	ldrb	r3, [r3, #0]
 800b29c:	2b05      	cmp	r3, #5
 800b29e:	d10a      	bne.n	800b2b6 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800b2a0:	6879      	ldr	r1, [r7, #4]
 800b2a2:	68fa      	ldr	r2, [r7, #12]
 800b2a4:	4613      	mov	r3, r2
 800b2a6:	009b      	lsls	r3, r3, #2
 800b2a8:	4413      	add	r3, r2
 800b2aa:	00db      	lsls	r3, r3, #3
 800b2ac:	440b      	add	r3, r1
 800b2ae:	335c      	adds	r3, #92	; 0x5c
 800b2b0:	2205      	movs	r2, #5
 800b2b2:	701a      	strb	r2, [r3, #0]
 800b2b4:	e06b      	b.n	800b38e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800b2b6:	6879      	ldr	r1, [r7, #4]
 800b2b8:	68fa      	ldr	r2, [r7, #12]
 800b2ba:	4613      	mov	r3, r2
 800b2bc:	009b      	lsls	r3, r3, #2
 800b2be:	4413      	add	r3, r2
 800b2c0:	00db      	lsls	r3, r3, #3
 800b2c2:	440b      	add	r3, r1
 800b2c4:	335d      	adds	r3, #93	; 0x5d
 800b2c6:	781b      	ldrb	r3, [r3, #0]
 800b2c8:	2b06      	cmp	r3, #6
 800b2ca:	d00a      	beq.n	800b2e2 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800b2cc:	6879      	ldr	r1, [r7, #4]
 800b2ce:	68fa      	ldr	r2, [r7, #12]
 800b2d0:	4613      	mov	r3, r2
 800b2d2:	009b      	lsls	r3, r3, #2
 800b2d4:	4413      	add	r3, r2
 800b2d6:	00db      	lsls	r3, r3, #3
 800b2d8:	440b      	add	r3, r1
 800b2da:	335d      	adds	r3, #93	; 0x5d
 800b2dc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800b2de:	2b08      	cmp	r3, #8
 800b2e0:	d155      	bne.n	800b38e <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 800b2e2:	6879      	ldr	r1, [r7, #4]
 800b2e4:	68fa      	ldr	r2, [r7, #12]
 800b2e6:	4613      	mov	r3, r2
 800b2e8:	009b      	lsls	r3, r3, #2
 800b2ea:	4413      	add	r3, r2
 800b2ec:	00db      	lsls	r3, r3, #3
 800b2ee:	440b      	add	r3, r1
 800b2f0:	3358      	adds	r3, #88	; 0x58
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	1c59      	adds	r1, r3, #1
 800b2f6:	6878      	ldr	r0, [r7, #4]
 800b2f8:	68fa      	ldr	r2, [r7, #12]
 800b2fa:	4613      	mov	r3, r2
 800b2fc:	009b      	lsls	r3, r3, #2
 800b2fe:	4413      	add	r3, r2
 800b300:	00db      	lsls	r3, r3, #3
 800b302:	4403      	add	r3, r0
 800b304:	3358      	adds	r3, #88	; 0x58
 800b306:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800b308:	6879      	ldr	r1, [r7, #4]
 800b30a:	68fa      	ldr	r2, [r7, #12]
 800b30c:	4613      	mov	r3, r2
 800b30e:	009b      	lsls	r3, r3, #2
 800b310:	4413      	add	r3, r2
 800b312:	00db      	lsls	r3, r3, #3
 800b314:	440b      	add	r3, r1
 800b316:	3358      	adds	r3, #88	; 0x58
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	2b03      	cmp	r3, #3
 800b31c:	d914      	bls.n	800b348 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800b31e:	6879      	ldr	r1, [r7, #4]
 800b320:	68fa      	ldr	r2, [r7, #12]
 800b322:	4613      	mov	r3, r2
 800b324:	009b      	lsls	r3, r3, #2
 800b326:	4413      	add	r3, r2
 800b328:	00db      	lsls	r3, r3, #3
 800b32a:	440b      	add	r3, r1
 800b32c:	3358      	adds	r3, #88	; 0x58
 800b32e:	2200      	movs	r2, #0
 800b330:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800b332:	6879      	ldr	r1, [r7, #4]
 800b334:	68fa      	ldr	r2, [r7, #12]
 800b336:	4613      	mov	r3, r2
 800b338:	009b      	lsls	r3, r3, #2
 800b33a:	4413      	add	r3, r2
 800b33c:	00db      	lsls	r3, r3, #3
 800b33e:	440b      	add	r3, r1
 800b340:	335c      	adds	r3, #92	; 0x5c
 800b342:	2204      	movs	r2, #4
 800b344:	701a      	strb	r2, [r3, #0]
 800b346:	e009      	b.n	800b35c <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800b348:	6879      	ldr	r1, [r7, #4]
 800b34a:	68fa      	ldr	r2, [r7, #12]
 800b34c:	4613      	mov	r3, r2
 800b34e:	009b      	lsls	r3, r3, #2
 800b350:	4413      	add	r3, r2
 800b352:	00db      	lsls	r3, r3, #3
 800b354:	440b      	add	r3, r1
 800b356:	335c      	adds	r3, #92	; 0x5c
 800b358:	2202      	movs	r2, #2
 800b35a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	015a      	lsls	r2, r3, #5
 800b360:	693b      	ldr	r3, [r7, #16]
 800b362:	4413      	add	r3, r2
 800b364:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800b36c:	68bb      	ldr	r3, [r7, #8]
 800b36e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b372:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800b374:	68bb      	ldr	r3, [r7, #8]
 800b376:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b37a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	015a      	lsls	r2, r3, #5
 800b380:	693b      	ldr	r3, [r7, #16]
 800b382:	4413      	add	r3, r2
 800b384:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b388:	461a      	mov	r2, r3
 800b38a:	68bb      	ldr	r3, [r7, #8]
 800b38c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	015a      	lsls	r2, r3, #5
 800b392:	693b      	ldr	r3, [r7, #16]
 800b394:	4413      	add	r3, r2
 800b396:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b39a:	461a      	mov	r2, r3
 800b39c:	2302      	movs	r3, #2
 800b39e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	b2d8      	uxtb	r0, r3
 800b3a4:	6879      	ldr	r1, [r7, #4]
 800b3a6:	68fa      	ldr	r2, [r7, #12]
 800b3a8:	4613      	mov	r3, r2
 800b3aa:	009b      	lsls	r3, r3, #2
 800b3ac:	4413      	add	r3, r2
 800b3ae:	00db      	lsls	r3, r3, #3
 800b3b0:	440b      	add	r3, r1
 800b3b2:	335c      	adds	r3, #92	; 0x5c
 800b3b4:	781b      	ldrb	r3, [r3, #0]
 800b3b6:	461a      	mov	r2, r3
 800b3b8:	4601      	mov	r1, r0
 800b3ba:	6878      	ldr	r0, [r7, #4]
 800b3bc:	f004 fe0c 	bl	800ffd8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800b3c0:	bf00      	nop
 800b3c2:	3718      	adds	r7, #24
 800b3c4:	46bd      	mov	sp, r7
 800b3c6:	bd80      	pop	{r7, pc}

0800b3c8 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	b08a      	sub	sp, #40	; 0x28
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3d8:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	6a1b      	ldr	r3, [r3, #32]
 800b3e0:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 800b3e2:	69fb      	ldr	r3, [r7, #28]
 800b3e4:	f003 030f 	and.w	r3, r3, #15
 800b3e8:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800b3ea:	69fb      	ldr	r3, [r7, #28]
 800b3ec:	0c5b      	lsrs	r3, r3, #17
 800b3ee:	f003 030f 	and.w	r3, r3, #15
 800b3f2:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b3f4:	69fb      	ldr	r3, [r7, #28]
 800b3f6:	091b      	lsrs	r3, r3, #4
 800b3f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b3fc:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800b3fe:	697b      	ldr	r3, [r7, #20]
 800b400:	2b02      	cmp	r3, #2
 800b402:	d003      	beq.n	800b40c <HCD_RXQLVL_IRQHandler+0x44>
 800b404:	2b05      	cmp	r3, #5
 800b406:	f000 8082 	beq.w	800b50e <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800b40a:	e083      	b.n	800b514 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800b40c:	693b      	ldr	r3, [r7, #16]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d07f      	beq.n	800b512 <HCD_RXQLVL_IRQHandler+0x14a>
 800b412:	6879      	ldr	r1, [r7, #4]
 800b414:	69ba      	ldr	r2, [r7, #24]
 800b416:	4613      	mov	r3, r2
 800b418:	009b      	lsls	r3, r3, #2
 800b41a:	4413      	add	r3, r2
 800b41c:	00db      	lsls	r3, r3, #3
 800b41e:	440b      	add	r3, r1
 800b420:	3344      	adds	r3, #68	; 0x44
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d074      	beq.n	800b512 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	6818      	ldr	r0, [r3, #0]
 800b42c:	6879      	ldr	r1, [r7, #4]
 800b42e:	69ba      	ldr	r2, [r7, #24]
 800b430:	4613      	mov	r3, r2
 800b432:	009b      	lsls	r3, r3, #2
 800b434:	4413      	add	r3, r2
 800b436:	00db      	lsls	r3, r3, #3
 800b438:	440b      	add	r3, r1
 800b43a:	3344      	adds	r3, #68	; 0x44
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	693a      	ldr	r2, [r7, #16]
 800b440:	b292      	uxth	r2, r2
 800b442:	4619      	mov	r1, r3
 800b444:	f001 ffc3 	bl	800d3ce <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 800b448:	6879      	ldr	r1, [r7, #4]
 800b44a:	69ba      	ldr	r2, [r7, #24]
 800b44c:	4613      	mov	r3, r2
 800b44e:	009b      	lsls	r3, r3, #2
 800b450:	4413      	add	r3, r2
 800b452:	00db      	lsls	r3, r3, #3
 800b454:	440b      	add	r3, r1
 800b456:	3344      	adds	r3, #68	; 0x44
 800b458:	681a      	ldr	r2, [r3, #0]
 800b45a:	693b      	ldr	r3, [r7, #16]
 800b45c:	18d1      	adds	r1, r2, r3
 800b45e:	6878      	ldr	r0, [r7, #4]
 800b460:	69ba      	ldr	r2, [r7, #24]
 800b462:	4613      	mov	r3, r2
 800b464:	009b      	lsls	r3, r3, #2
 800b466:	4413      	add	r3, r2
 800b468:	00db      	lsls	r3, r3, #3
 800b46a:	4403      	add	r3, r0
 800b46c:	3344      	adds	r3, #68	; 0x44
 800b46e:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 800b470:	6879      	ldr	r1, [r7, #4]
 800b472:	69ba      	ldr	r2, [r7, #24]
 800b474:	4613      	mov	r3, r2
 800b476:	009b      	lsls	r3, r3, #2
 800b478:	4413      	add	r3, r2
 800b47a:	00db      	lsls	r3, r3, #3
 800b47c:	440b      	add	r3, r1
 800b47e:	334c      	adds	r3, #76	; 0x4c
 800b480:	681a      	ldr	r2, [r3, #0]
 800b482:	693b      	ldr	r3, [r7, #16]
 800b484:	18d1      	adds	r1, r2, r3
 800b486:	6878      	ldr	r0, [r7, #4]
 800b488:	69ba      	ldr	r2, [r7, #24]
 800b48a:	4613      	mov	r3, r2
 800b48c:	009b      	lsls	r3, r3, #2
 800b48e:	4413      	add	r3, r2
 800b490:	00db      	lsls	r3, r3, #3
 800b492:	4403      	add	r3, r0
 800b494:	334c      	adds	r3, #76	; 0x4c
 800b496:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 800b498:	69bb      	ldr	r3, [r7, #24]
 800b49a:	015a      	lsls	r2, r3, #5
 800b49c:	6a3b      	ldr	r3, [r7, #32]
 800b49e:	4413      	add	r3, r2
 800b4a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b4a4:	691a      	ldr	r2, [r3, #16]
 800b4a6:	4b1d      	ldr	r3, [pc, #116]	; (800b51c <HCD_RXQLVL_IRQHandler+0x154>)
 800b4a8:	4013      	ands	r3, r2
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d031      	beq.n	800b512 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 800b4ae:	69bb      	ldr	r3, [r7, #24]
 800b4b0:	015a      	lsls	r2, r3, #5
 800b4b2:	6a3b      	ldr	r3, [r7, #32]
 800b4b4:	4413      	add	r3, r2
 800b4b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b4c4:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b4cc:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 800b4ce:	69bb      	ldr	r3, [r7, #24]
 800b4d0:	015a      	lsls	r2, r3, #5
 800b4d2:	6a3b      	ldr	r3, [r7, #32]
 800b4d4:	4413      	add	r3, r2
 800b4d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b4da:	461a      	mov	r2, r3
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 800b4e0:	6879      	ldr	r1, [r7, #4]
 800b4e2:	69ba      	ldr	r2, [r7, #24]
 800b4e4:	4613      	mov	r3, r2
 800b4e6:	009b      	lsls	r3, r3, #2
 800b4e8:	4413      	add	r3, r2
 800b4ea:	00db      	lsls	r3, r3, #3
 800b4ec:	440b      	add	r3, r1
 800b4ee:	3350      	adds	r3, #80	; 0x50
 800b4f0:	781b      	ldrb	r3, [r3, #0]
 800b4f2:	f083 0301 	eor.w	r3, r3, #1
 800b4f6:	b2d8      	uxtb	r0, r3
 800b4f8:	6879      	ldr	r1, [r7, #4]
 800b4fa:	69ba      	ldr	r2, [r7, #24]
 800b4fc:	4613      	mov	r3, r2
 800b4fe:	009b      	lsls	r3, r3, #2
 800b500:	4413      	add	r3, r2
 800b502:	00db      	lsls	r3, r3, #3
 800b504:	440b      	add	r3, r1
 800b506:	3350      	adds	r3, #80	; 0x50
 800b508:	4602      	mov	r2, r0
 800b50a:	701a      	strb	r2, [r3, #0]
      break;
 800b50c:	e001      	b.n	800b512 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 800b50e:	bf00      	nop
 800b510:	e000      	b.n	800b514 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 800b512:	bf00      	nop
  }
}
 800b514:	bf00      	nop
 800b516:	3728      	adds	r7, #40	; 0x28
 800b518:	46bd      	mov	sp, r7
 800b51a:	bd80      	pop	{r7, pc}
 800b51c:	1ff80000 	.word	0x1ff80000

0800b520 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800b520:	b580      	push	{r7, lr}
 800b522:	b086      	sub	sp, #24
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b52e:	697b      	ldr	r3, [r7, #20]
 800b530:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800b532:	693b      	ldr	r3, [r7, #16]
 800b534:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800b53c:	693b      	ldr	r3, [r7, #16]
 800b53e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800b546:	68bb      	ldr	r3, [r7, #8]
 800b548:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800b54c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	f003 0302 	and.w	r3, r3, #2
 800b554:	2b02      	cmp	r3, #2
 800b556:	d10b      	bne.n	800b570 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	f003 0301 	and.w	r3, r3, #1
 800b55e:	2b01      	cmp	r3, #1
 800b560:	d102      	bne.n	800b568 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800b562:	6878      	ldr	r0, [r7, #4]
 800b564:	f004 fd1c 	bl	800ffa0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 800b568:	68bb      	ldr	r3, [r7, #8]
 800b56a:	f043 0302 	orr.w	r3, r3, #2
 800b56e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	f003 0308 	and.w	r3, r3, #8
 800b576:	2b08      	cmp	r3, #8
 800b578:	d132      	bne.n	800b5e0 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800b57a:	68bb      	ldr	r3, [r7, #8]
 800b57c:	f043 0308 	orr.w	r3, r3, #8
 800b580:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	f003 0304 	and.w	r3, r3, #4
 800b588:	2b04      	cmp	r3, #4
 800b58a:	d126      	bne.n	800b5da <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	699b      	ldr	r3, [r3, #24]
 800b590:	2b02      	cmp	r3, #2
 800b592:	d113      	bne.n	800b5bc <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800b59a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b59e:	d106      	bne.n	800b5ae <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	2102      	movs	r1, #2
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	f002 f84c 	bl	800d644 <USB_InitFSLSPClkSel>
 800b5ac:	e011      	b.n	800b5d2 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	2101      	movs	r1, #1
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	f002 f845 	bl	800d644 <USB_InitFSLSPClkSel>
 800b5ba:	e00a      	b.n	800b5d2 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	68db      	ldr	r3, [r3, #12]
 800b5c0:	2b01      	cmp	r3, #1
 800b5c2:	d106      	bne.n	800b5d2 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800b5c4:	693b      	ldr	r3, [r7, #16]
 800b5c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b5ca:	461a      	mov	r2, r3
 800b5cc:	f64e 2360 	movw	r3, #60000	; 0xea60
 800b5d0:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800b5d2:	6878      	ldr	r0, [r7, #4]
 800b5d4:	f004 fd0e 	bl	800fff4 <HAL_HCD_PortEnabled_Callback>
 800b5d8:	e002      	b.n	800b5e0 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800b5da:	6878      	ldr	r0, [r7, #4]
 800b5dc:	f004 fd18 	bl	8010010 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	f003 0320 	and.w	r3, r3, #32
 800b5e6:	2b20      	cmp	r3, #32
 800b5e8:	d103      	bne.n	800b5f2 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800b5ea:	68bb      	ldr	r3, [r7, #8]
 800b5ec:	f043 0320 	orr.w	r3, r3, #32
 800b5f0:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800b5f2:	693b      	ldr	r3, [r7, #16]
 800b5f4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800b5f8:	461a      	mov	r2, r3
 800b5fa:	68bb      	ldr	r3, [r7, #8]
 800b5fc:	6013      	str	r3, [r2, #0]
}
 800b5fe:	bf00      	nop
 800b600:	3718      	adds	r7, #24
 800b602:	46bd      	mov	sp, r7
 800b604:	bd80      	pop	{r7, pc}
	...

0800b608 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b608:	b580      	push	{r7, lr}
 800b60a:	b084      	sub	sp, #16
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	2b00      	cmp	r3, #0
 800b614:	d101      	bne.n	800b61a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b616:	2301      	movs	r3, #1
 800b618:	e11f      	b.n	800b85a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b620:	b2db      	uxtb	r3, r3
 800b622:	2b00      	cmp	r3, #0
 800b624:	d106      	bne.n	800b634 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	2200      	movs	r2, #0
 800b62a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800b62e:	6878      	ldr	r0, [r7, #4]
 800b630:	f7fd fbe4 	bl	8008dfc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	2224      	movs	r2, #36	; 0x24
 800b638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	681a      	ldr	r2, [r3, #0]
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	f022 0201 	bic.w	r2, r2, #1
 800b64a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	681a      	ldr	r2, [r3, #0]
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b65a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	681a      	ldr	r2, [r3, #0]
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b66a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800b66c:	f001 f9de 	bl	800ca2c <HAL_RCC_GetPCLK1Freq>
 800b670:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	685b      	ldr	r3, [r3, #4]
 800b676:	4a7b      	ldr	r2, [pc, #492]	; (800b864 <HAL_I2C_Init+0x25c>)
 800b678:	4293      	cmp	r3, r2
 800b67a:	d807      	bhi.n	800b68c <HAL_I2C_Init+0x84>
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	4a7a      	ldr	r2, [pc, #488]	; (800b868 <HAL_I2C_Init+0x260>)
 800b680:	4293      	cmp	r3, r2
 800b682:	bf94      	ite	ls
 800b684:	2301      	movls	r3, #1
 800b686:	2300      	movhi	r3, #0
 800b688:	b2db      	uxtb	r3, r3
 800b68a:	e006      	b.n	800b69a <HAL_I2C_Init+0x92>
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	4a77      	ldr	r2, [pc, #476]	; (800b86c <HAL_I2C_Init+0x264>)
 800b690:	4293      	cmp	r3, r2
 800b692:	bf94      	ite	ls
 800b694:	2301      	movls	r3, #1
 800b696:	2300      	movhi	r3, #0
 800b698:	b2db      	uxtb	r3, r3
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d001      	beq.n	800b6a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800b69e:	2301      	movs	r3, #1
 800b6a0:	e0db      	b.n	800b85a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	4a72      	ldr	r2, [pc, #456]	; (800b870 <HAL_I2C_Init+0x268>)
 800b6a6:	fba2 2303 	umull	r2, r3, r2, r3
 800b6aa:	0c9b      	lsrs	r3, r3, #18
 800b6ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	685b      	ldr	r3, [r3, #4]
 800b6b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	68ba      	ldr	r2, [r7, #8]
 800b6be:	430a      	orrs	r2, r1
 800b6c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	6a1b      	ldr	r3, [r3, #32]
 800b6c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	685b      	ldr	r3, [r3, #4]
 800b6d0:	4a64      	ldr	r2, [pc, #400]	; (800b864 <HAL_I2C_Init+0x25c>)
 800b6d2:	4293      	cmp	r3, r2
 800b6d4:	d802      	bhi.n	800b6dc <HAL_I2C_Init+0xd4>
 800b6d6:	68bb      	ldr	r3, [r7, #8]
 800b6d8:	3301      	adds	r3, #1
 800b6da:	e009      	b.n	800b6f0 <HAL_I2C_Init+0xe8>
 800b6dc:	68bb      	ldr	r3, [r7, #8]
 800b6de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800b6e2:	fb02 f303 	mul.w	r3, r2, r3
 800b6e6:	4a63      	ldr	r2, [pc, #396]	; (800b874 <HAL_I2C_Init+0x26c>)
 800b6e8:	fba2 2303 	umull	r2, r3, r2, r3
 800b6ec:	099b      	lsrs	r3, r3, #6
 800b6ee:	3301      	adds	r3, #1
 800b6f0:	687a      	ldr	r2, [r7, #4]
 800b6f2:	6812      	ldr	r2, [r2, #0]
 800b6f4:	430b      	orrs	r3, r1
 800b6f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	69db      	ldr	r3, [r3, #28]
 800b6fe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800b702:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	685b      	ldr	r3, [r3, #4]
 800b70a:	4956      	ldr	r1, [pc, #344]	; (800b864 <HAL_I2C_Init+0x25c>)
 800b70c:	428b      	cmp	r3, r1
 800b70e:	d80d      	bhi.n	800b72c <HAL_I2C_Init+0x124>
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	1e59      	subs	r1, r3, #1
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	685b      	ldr	r3, [r3, #4]
 800b718:	005b      	lsls	r3, r3, #1
 800b71a:	fbb1 f3f3 	udiv	r3, r1, r3
 800b71e:	3301      	adds	r3, #1
 800b720:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b724:	2b04      	cmp	r3, #4
 800b726:	bf38      	it	cc
 800b728:	2304      	movcc	r3, #4
 800b72a:	e04f      	b.n	800b7cc <HAL_I2C_Init+0x1c4>
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	689b      	ldr	r3, [r3, #8]
 800b730:	2b00      	cmp	r3, #0
 800b732:	d111      	bne.n	800b758 <HAL_I2C_Init+0x150>
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	1e58      	subs	r0, r3, #1
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	6859      	ldr	r1, [r3, #4]
 800b73c:	460b      	mov	r3, r1
 800b73e:	005b      	lsls	r3, r3, #1
 800b740:	440b      	add	r3, r1
 800b742:	fbb0 f3f3 	udiv	r3, r0, r3
 800b746:	3301      	adds	r3, #1
 800b748:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	bf0c      	ite	eq
 800b750:	2301      	moveq	r3, #1
 800b752:	2300      	movne	r3, #0
 800b754:	b2db      	uxtb	r3, r3
 800b756:	e012      	b.n	800b77e <HAL_I2C_Init+0x176>
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	1e58      	subs	r0, r3, #1
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	6859      	ldr	r1, [r3, #4]
 800b760:	460b      	mov	r3, r1
 800b762:	009b      	lsls	r3, r3, #2
 800b764:	440b      	add	r3, r1
 800b766:	0099      	lsls	r1, r3, #2
 800b768:	440b      	add	r3, r1
 800b76a:	fbb0 f3f3 	udiv	r3, r0, r3
 800b76e:	3301      	adds	r3, #1
 800b770:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b774:	2b00      	cmp	r3, #0
 800b776:	bf0c      	ite	eq
 800b778:	2301      	moveq	r3, #1
 800b77a:	2300      	movne	r3, #0
 800b77c:	b2db      	uxtb	r3, r3
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d001      	beq.n	800b786 <HAL_I2C_Init+0x17e>
 800b782:	2301      	movs	r3, #1
 800b784:	e022      	b.n	800b7cc <HAL_I2C_Init+0x1c4>
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	689b      	ldr	r3, [r3, #8]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d10e      	bne.n	800b7ac <HAL_I2C_Init+0x1a4>
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	1e58      	subs	r0, r3, #1
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	6859      	ldr	r1, [r3, #4]
 800b796:	460b      	mov	r3, r1
 800b798:	005b      	lsls	r3, r3, #1
 800b79a:	440b      	add	r3, r1
 800b79c:	fbb0 f3f3 	udiv	r3, r0, r3
 800b7a0:	3301      	adds	r3, #1
 800b7a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b7a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b7aa:	e00f      	b.n	800b7cc <HAL_I2C_Init+0x1c4>
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	1e58      	subs	r0, r3, #1
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	6859      	ldr	r1, [r3, #4]
 800b7b4:	460b      	mov	r3, r1
 800b7b6:	009b      	lsls	r3, r3, #2
 800b7b8:	440b      	add	r3, r1
 800b7ba:	0099      	lsls	r1, r3, #2
 800b7bc:	440b      	add	r3, r1
 800b7be:	fbb0 f3f3 	udiv	r3, r0, r3
 800b7c2:	3301      	adds	r3, #1
 800b7c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b7c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b7cc:	6879      	ldr	r1, [r7, #4]
 800b7ce:	6809      	ldr	r1, [r1, #0]
 800b7d0:	4313      	orrs	r3, r2
 800b7d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	69da      	ldr	r2, [r3, #28]
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	6a1b      	ldr	r3, [r3, #32]
 800b7e6:	431a      	orrs	r2, r3
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	430a      	orrs	r2, r1
 800b7ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	689b      	ldr	r3, [r3, #8]
 800b7f6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800b7fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b7fe:	687a      	ldr	r2, [r7, #4]
 800b800:	6911      	ldr	r1, [r2, #16]
 800b802:	687a      	ldr	r2, [r7, #4]
 800b804:	68d2      	ldr	r2, [r2, #12]
 800b806:	4311      	orrs	r1, r2
 800b808:	687a      	ldr	r2, [r7, #4]
 800b80a:	6812      	ldr	r2, [r2, #0]
 800b80c:	430b      	orrs	r3, r1
 800b80e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	68db      	ldr	r3, [r3, #12]
 800b816:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	695a      	ldr	r2, [r3, #20]
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	699b      	ldr	r3, [r3, #24]
 800b822:	431a      	orrs	r2, r3
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	430a      	orrs	r2, r1
 800b82a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	681a      	ldr	r2, [r3, #0]
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	f042 0201 	orr.w	r2, r2, #1
 800b83a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	2200      	movs	r2, #0
 800b840:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	2220      	movs	r2, #32
 800b846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	2200      	movs	r2, #0
 800b84e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	2200      	movs	r2, #0
 800b854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b858:	2300      	movs	r3, #0
}
 800b85a:	4618      	mov	r0, r3
 800b85c:	3710      	adds	r7, #16
 800b85e:	46bd      	mov	sp, r7
 800b860:	bd80      	pop	{r7, pc}
 800b862:	bf00      	nop
 800b864:	000186a0 	.word	0x000186a0
 800b868:	001e847f 	.word	0x001e847f
 800b86c:	003d08ff 	.word	0x003d08ff
 800b870:	431bde83 	.word	0x431bde83
 800b874:	10624dd3 	.word	0x10624dd3

0800b878 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800b878:	b580      	push	{r7, lr}
 800b87a:	b088      	sub	sp, #32
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	2b00      	cmp	r3, #0
 800b884:	d101      	bne.n	800b88a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800b886:	2301      	movs	r3, #1
 800b888:	e128      	b.n	800badc <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b890:	b2db      	uxtb	r3, r3
 800b892:	2b00      	cmp	r3, #0
 800b894:	d109      	bne.n	800b8aa <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	2200      	movs	r2, #0
 800b89a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	4a90      	ldr	r2, [pc, #576]	; (800bae4 <HAL_I2S_Init+0x26c>)
 800b8a2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800b8a4:	6878      	ldr	r0, [r7, #4]
 800b8a6:	f7fd fb4f 	bl	8008f48 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	2202      	movs	r2, #2
 800b8ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	69db      	ldr	r3, [r3, #28]
 800b8b8:	687a      	ldr	r2, [r7, #4]
 800b8ba:	6812      	ldr	r2, [r2, #0]
 800b8bc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800b8c0:	f023 030f 	bic.w	r3, r3, #15
 800b8c4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	2202      	movs	r2, #2
 800b8cc:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	695b      	ldr	r3, [r3, #20]
 800b8d2:	2b02      	cmp	r3, #2
 800b8d4:	d060      	beq.n	800b998 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	68db      	ldr	r3, [r3, #12]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d102      	bne.n	800b8e4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800b8de:	2310      	movs	r3, #16
 800b8e0:	617b      	str	r3, [r7, #20]
 800b8e2:	e001      	b.n	800b8e8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800b8e4:	2320      	movs	r3, #32
 800b8e6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	689b      	ldr	r3, [r3, #8]
 800b8ec:	2b20      	cmp	r3, #32
 800b8ee:	d802      	bhi.n	800b8f6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 800b8f0:	697b      	ldr	r3, [r7, #20]
 800b8f2:	005b      	lsls	r3, r3, #1
 800b8f4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800b8f6:	2001      	movs	r0, #1
 800b8f8:	f001 f99c 	bl	800cc34 <HAL_RCCEx_GetPeriphCLKFreq>
 800b8fc:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	691b      	ldr	r3, [r3, #16]
 800b902:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b906:	d125      	bne.n	800b954 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	68db      	ldr	r3, [r3, #12]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d010      	beq.n	800b932 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800b910:	697b      	ldr	r3, [r7, #20]
 800b912:	009b      	lsls	r3, r3, #2
 800b914:	68fa      	ldr	r2, [r7, #12]
 800b916:	fbb2 f2f3 	udiv	r2, r2, r3
 800b91a:	4613      	mov	r3, r2
 800b91c:	009b      	lsls	r3, r3, #2
 800b91e:	4413      	add	r3, r2
 800b920:	005b      	lsls	r3, r3, #1
 800b922:	461a      	mov	r2, r3
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	695b      	ldr	r3, [r3, #20]
 800b928:	fbb2 f3f3 	udiv	r3, r2, r3
 800b92c:	3305      	adds	r3, #5
 800b92e:	613b      	str	r3, [r7, #16]
 800b930:	e01f      	b.n	800b972 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800b932:	697b      	ldr	r3, [r7, #20]
 800b934:	00db      	lsls	r3, r3, #3
 800b936:	68fa      	ldr	r2, [r7, #12]
 800b938:	fbb2 f2f3 	udiv	r2, r2, r3
 800b93c:	4613      	mov	r3, r2
 800b93e:	009b      	lsls	r3, r3, #2
 800b940:	4413      	add	r3, r2
 800b942:	005b      	lsls	r3, r3, #1
 800b944:	461a      	mov	r2, r3
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	695b      	ldr	r3, [r3, #20]
 800b94a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b94e:	3305      	adds	r3, #5
 800b950:	613b      	str	r3, [r7, #16]
 800b952:	e00e      	b.n	800b972 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800b954:	68fa      	ldr	r2, [r7, #12]
 800b956:	697b      	ldr	r3, [r7, #20]
 800b958:	fbb2 f2f3 	udiv	r2, r2, r3
 800b95c:	4613      	mov	r3, r2
 800b95e:	009b      	lsls	r3, r3, #2
 800b960:	4413      	add	r3, r2
 800b962:	005b      	lsls	r3, r3, #1
 800b964:	461a      	mov	r2, r3
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	695b      	ldr	r3, [r3, #20]
 800b96a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b96e:	3305      	adds	r3, #5
 800b970:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800b972:	693b      	ldr	r3, [r7, #16]
 800b974:	4a5c      	ldr	r2, [pc, #368]	; (800bae8 <HAL_I2S_Init+0x270>)
 800b976:	fba2 2303 	umull	r2, r3, r2, r3
 800b97a:	08db      	lsrs	r3, r3, #3
 800b97c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800b97e:	693b      	ldr	r3, [r7, #16]
 800b980:	f003 0301 	and.w	r3, r3, #1
 800b984:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800b986:	693a      	ldr	r2, [r7, #16]
 800b988:	69bb      	ldr	r3, [r7, #24]
 800b98a:	1ad3      	subs	r3, r2, r3
 800b98c:	085b      	lsrs	r3, r3, #1
 800b98e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800b990:	69bb      	ldr	r3, [r7, #24]
 800b992:	021b      	lsls	r3, r3, #8
 800b994:	61bb      	str	r3, [r7, #24]
 800b996:	e003      	b.n	800b9a0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800b998:	2302      	movs	r3, #2
 800b99a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800b99c:	2300      	movs	r3, #0
 800b99e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800b9a0:	69fb      	ldr	r3, [r7, #28]
 800b9a2:	2b01      	cmp	r3, #1
 800b9a4:	d902      	bls.n	800b9ac <HAL_I2S_Init+0x134>
 800b9a6:	69fb      	ldr	r3, [r7, #28]
 800b9a8:	2bff      	cmp	r3, #255	; 0xff
 800b9aa:	d907      	bls.n	800b9bc <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9b0:	f043 0210 	orr.w	r2, r3, #16
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 800b9b8:	2301      	movs	r3, #1
 800b9ba:	e08f      	b.n	800badc <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	691a      	ldr	r2, [r3, #16]
 800b9c0:	69bb      	ldr	r3, [r7, #24]
 800b9c2:	ea42 0103 	orr.w	r1, r2, r3
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	69fa      	ldr	r2, [r7, #28]
 800b9cc:	430a      	orrs	r2, r1
 800b9ce:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	69db      	ldr	r3, [r3, #28]
 800b9d6:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800b9da:	f023 030f 	bic.w	r3, r3, #15
 800b9de:	687a      	ldr	r2, [r7, #4]
 800b9e0:	6851      	ldr	r1, [r2, #4]
 800b9e2:	687a      	ldr	r2, [r7, #4]
 800b9e4:	6892      	ldr	r2, [r2, #8]
 800b9e6:	4311      	orrs	r1, r2
 800b9e8:	687a      	ldr	r2, [r7, #4]
 800b9ea:	68d2      	ldr	r2, [r2, #12]
 800b9ec:	4311      	orrs	r1, r2
 800b9ee:	687a      	ldr	r2, [r7, #4]
 800b9f0:	6992      	ldr	r2, [r2, #24]
 800b9f2:	430a      	orrs	r2, r1
 800b9f4:	431a      	orrs	r2, r3
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b9fe:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	6a1b      	ldr	r3, [r3, #32]
 800ba04:	2b01      	cmp	r3, #1
 800ba06:	d161      	bne.n	800bacc <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	4a38      	ldr	r2, [pc, #224]	; (800baec <HAL_I2S_Init+0x274>)
 800ba0c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	4a37      	ldr	r2, [pc, #220]	; (800baf0 <HAL_I2S_Init+0x278>)
 800ba14:	4293      	cmp	r3, r2
 800ba16:	d101      	bne.n	800ba1c <HAL_I2S_Init+0x1a4>
 800ba18:	4b36      	ldr	r3, [pc, #216]	; (800baf4 <HAL_I2S_Init+0x27c>)
 800ba1a:	e001      	b.n	800ba20 <HAL_I2S_Init+0x1a8>
 800ba1c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800ba20:	69db      	ldr	r3, [r3, #28]
 800ba22:	687a      	ldr	r2, [r7, #4]
 800ba24:	6812      	ldr	r2, [r2, #0]
 800ba26:	4932      	ldr	r1, [pc, #200]	; (800baf0 <HAL_I2S_Init+0x278>)
 800ba28:	428a      	cmp	r2, r1
 800ba2a:	d101      	bne.n	800ba30 <HAL_I2S_Init+0x1b8>
 800ba2c:	4a31      	ldr	r2, [pc, #196]	; (800baf4 <HAL_I2S_Init+0x27c>)
 800ba2e:	e001      	b.n	800ba34 <HAL_I2S_Init+0x1bc>
 800ba30:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800ba34:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800ba38:	f023 030f 	bic.w	r3, r3, #15
 800ba3c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	4a2b      	ldr	r2, [pc, #172]	; (800baf0 <HAL_I2S_Init+0x278>)
 800ba44:	4293      	cmp	r3, r2
 800ba46:	d101      	bne.n	800ba4c <HAL_I2S_Init+0x1d4>
 800ba48:	4b2a      	ldr	r3, [pc, #168]	; (800baf4 <HAL_I2S_Init+0x27c>)
 800ba4a:	e001      	b.n	800ba50 <HAL_I2S_Init+0x1d8>
 800ba4c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800ba50:	2202      	movs	r2, #2
 800ba52:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	4a25      	ldr	r2, [pc, #148]	; (800baf0 <HAL_I2S_Init+0x278>)
 800ba5a:	4293      	cmp	r3, r2
 800ba5c:	d101      	bne.n	800ba62 <HAL_I2S_Init+0x1ea>
 800ba5e:	4b25      	ldr	r3, [pc, #148]	; (800baf4 <HAL_I2S_Init+0x27c>)
 800ba60:	e001      	b.n	800ba66 <HAL_I2S_Init+0x1ee>
 800ba62:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800ba66:	69db      	ldr	r3, [r3, #28]
 800ba68:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	685b      	ldr	r3, [r3, #4]
 800ba6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ba72:	d003      	beq.n	800ba7c <HAL_I2S_Init+0x204>
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	685b      	ldr	r3, [r3, #4]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d103      	bne.n	800ba84 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800ba7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ba80:	613b      	str	r3, [r7, #16]
 800ba82:	e001      	b.n	800ba88 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800ba84:	2300      	movs	r3, #0
 800ba86:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 800ba88:	693b      	ldr	r3, [r7, #16]
 800ba8a:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	689b      	ldr	r3, [r3, #8]
 800ba90:	b299      	uxth	r1, r3
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	68db      	ldr	r3, [r3, #12]
 800ba96:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	699b      	ldr	r3, [r3, #24]
 800ba9c:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800ba9e:	4303      	orrs	r3, r0
 800baa0:	b29b      	uxth	r3, r3
 800baa2:	430b      	orrs	r3, r1
 800baa4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 800baa6:	4313      	orrs	r3, r2
 800baa8:	b29a      	uxth	r2, r3
 800baaa:	897b      	ldrh	r3, [r7, #10]
 800baac:	4313      	orrs	r3, r2
 800baae:	b29b      	uxth	r3, r3
 800bab0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800bab4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	4a0d      	ldr	r2, [pc, #52]	; (800baf0 <HAL_I2S_Init+0x278>)
 800babc:	4293      	cmp	r3, r2
 800babe:	d101      	bne.n	800bac4 <HAL_I2S_Init+0x24c>
 800bac0:	4b0c      	ldr	r3, [pc, #48]	; (800baf4 <HAL_I2S_Init+0x27c>)
 800bac2:	e001      	b.n	800bac8 <HAL_I2S_Init+0x250>
 800bac4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800bac8:	897a      	ldrh	r2, [r7, #10]
 800baca:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	2200      	movs	r2, #0
 800bad0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	2201      	movs	r2, #1
 800bad6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800bada:	2300      	movs	r3, #0
}
 800badc:	4618      	mov	r0, r3
 800bade:	3720      	adds	r7, #32
 800bae0:	46bd      	mov	sp, r7
 800bae2:	bd80      	pop	{r7, pc}
 800bae4:	0800bbef 	.word	0x0800bbef
 800bae8:	cccccccd 	.word	0xcccccccd
 800baec:	0800bd05 	.word	0x0800bd05
 800baf0:	40003800 	.word	0x40003800
 800baf4:	40003400 	.word	0x40003400

0800baf8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800baf8:	b480      	push	{r7}
 800bafa:	b083      	sub	sp, #12
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800bb00:	bf00      	nop
 800bb02:	370c      	adds	r7, #12
 800bb04:	46bd      	mov	sp, r7
 800bb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0a:	4770      	bx	lr

0800bb0c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800bb0c:	b480      	push	{r7}
 800bb0e:	b083      	sub	sp, #12
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800bb14:	bf00      	nop
 800bb16:	370c      	adds	r7, #12
 800bb18:	46bd      	mov	sp, r7
 800bb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1e:	4770      	bx	lr

0800bb20 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800bb20:	b480      	push	{r7}
 800bb22:	b083      	sub	sp, #12
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800bb28:	bf00      	nop
 800bb2a:	370c      	adds	r7, #12
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb32:	4770      	bx	lr

0800bb34 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800bb34:	b580      	push	{r7, lr}
 800bb36:	b082      	sub	sp, #8
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb40:	881a      	ldrh	r2, [r3, #0]
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb4c:	1c9a      	adds	r2, r3, #2
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb56:	b29b      	uxth	r3, r3
 800bb58:	3b01      	subs	r3, #1
 800bb5a:	b29a      	uxth	r2, r3
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb64:	b29b      	uxth	r3, r3
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d10e      	bne.n	800bb88 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	685a      	ldr	r2, [r3, #4]
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800bb78:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	2201      	movs	r2, #1
 800bb7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800bb82:	6878      	ldr	r0, [r7, #4]
 800bb84:	f7ff ffb8 	bl	800baf8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800bb88:	bf00      	nop
 800bb8a:	3708      	adds	r7, #8
 800bb8c:	46bd      	mov	sp, r7
 800bb8e:	bd80      	pop	{r7, pc}

0800bb90 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800bb90:	b580      	push	{r7, lr}
 800bb92:	b082      	sub	sp, #8
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	68da      	ldr	r2, [r3, #12]
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bba2:	b292      	uxth	r2, r2
 800bba4:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbaa:	1c9a      	adds	r2, r3, #2
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bbb4:	b29b      	uxth	r3, r3
 800bbb6:	3b01      	subs	r3, #1
 800bbb8:	b29a      	uxth	r2, r3
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bbc2:	b29b      	uxth	r3, r3
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d10e      	bne.n	800bbe6 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	685a      	ldr	r2, [r3, #4]
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800bbd6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	2201      	movs	r2, #1
 800bbdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800bbe0:	6878      	ldr	r0, [r7, #4]
 800bbe2:	f7ff ff93 	bl	800bb0c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800bbe6:	bf00      	nop
 800bbe8:	3708      	adds	r7, #8
 800bbea:	46bd      	mov	sp, r7
 800bbec:	bd80      	pop	{r7, pc}

0800bbee <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800bbee:	b580      	push	{r7, lr}
 800bbf0:	b086      	sub	sp, #24
 800bbf2:	af00      	add	r7, sp, #0
 800bbf4:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	689b      	ldr	r3, [r3, #8]
 800bbfc:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bc04:	b2db      	uxtb	r3, r3
 800bc06:	2b04      	cmp	r3, #4
 800bc08:	d13a      	bne.n	800bc80 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800bc0a:	697b      	ldr	r3, [r7, #20]
 800bc0c:	f003 0301 	and.w	r3, r3, #1
 800bc10:	2b01      	cmp	r3, #1
 800bc12:	d109      	bne.n	800bc28 <I2S_IRQHandler+0x3a>
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	685b      	ldr	r3, [r3, #4]
 800bc1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc1e:	2b40      	cmp	r3, #64	; 0x40
 800bc20:	d102      	bne.n	800bc28 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800bc22:	6878      	ldr	r0, [r7, #4]
 800bc24:	f7ff ffb4 	bl	800bb90 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800bc28:	697b      	ldr	r3, [r7, #20]
 800bc2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc2e:	2b40      	cmp	r3, #64	; 0x40
 800bc30:	d126      	bne.n	800bc80 <I2S_IRQHandler+0x92>
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	685b      	ldr	r3, [r3, #4]
 800bc38:	f003 0320 	and.w	r3, r3, #32
 800bc3c:	2b20      	cmp	r3, #32
 800bc3e:	d11f      	bne.n	800bc80 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	685a      	ldr	r2, [r3, #4]
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800bc4e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800bc50:	2300      	movs	r3, #0
 800bc52:	613b      	str	r3, [r7, #16]
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	68db      	ldr	r3, [r3, #12]
 800bc5a:	613b      	str	r3, [r7, #16]
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	689b      	ldr	r3, [r3, #8]
 800bc62:	613b      	str	r3, [r7, #16]
 800bc64:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	2201      	movs	r2, #1
 800bc6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc72:	f043 0202 	orr.w	r2, r3, #2
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800bc7a:	6878      	ldr	r0, [r7, #4]
 800bc7c:	f7ff ff50 	bl	800bb20 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bc86:	b2db      	uxtb	r3, r3
 800bc88:	2b03      	cmp	r3, #3
 800bc8a:	d136      	bne.n	800bcfa <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800bc8c:	697b      	ldr	r3, [r7, #20]
 800bc8e:	f003 0302 	and.w	r3, r3, #2
 800bc92:	2b02      	cmp	r3, #2
 800bc94:	d109      	bne.n	800bcaa <I2S_IRQHandler+0xbc>
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	685b      	ldr	r3, [r3, #4]
 800bc9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bca0:	2b80      	cmp	r3, #128	; 0x80
 800bca2:	d102      	bne.n	800bcaa <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800bca4:	6878      	ldr	r0, [r7, #4]
 800bca6:	f7ff ff45 	bl	800bb34 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800bcaa:	697b      	ldr	r3, [r7, #20]
 800bcac:	f003 0308 	and.w	r3, r3, #8
 800bcb0:	2b08      	cmp	r3, #8
 800bcb2:	d122      	bne.n	800bcfa <I2S_IRQHandler+0x10c>
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	685b      	ldr	r3, [r3, #4]
 800bcba:	f003 0320 	and.w	r3, r3, #32
 800bcbe:	2b20      	cmp	r3, #32
 800bcc0:	d11b      	bne.n	800bcfa <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	685a      	ldr	r2, [r3, #4]
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800bcd0:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	60fb      	str	r3, [r7, #12]
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	689b      	ldr	r3, [r3, #8]
 800bcdc:	60fb      	str	r3, [r7, #12]
 800bcde:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	2201      	movs	r2, #1
 800bce4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bcec:	f043 0204 	orr.w	r2, r3, #4
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800bcf4:	6878      	ldr	r0, [r7, #4]
 800bcf6:	f7ff ff13 	bl	800bb20 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800bcfa:	bf00      	nop
 800bcfc:	3718      	adds	r7, #24
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	bd80      	pop	{r7, pc}
	...

0800bd04 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800bd04:	b580      	push	{r7, lr}
 800bd06:	b088      	sub	sp, #32
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	689b      	ldr	r3, [r3, #8]
 800bd12:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	4aa2      	ldr	r2, [pc, #648]	; (800bfa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800bd1a:	4293      	cmp	r3, r2
 800bd1c:	d101      	bne.n	800bd22 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800bd1e:	4ba2      	ldr	r3, [pc, #648]	; (800bfa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800bd20:	e001      	b.n	800bd26 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800bd22:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800bd26:	689b      	ldr	r3, [r3, #8]
 800bd28:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	685b      	ldr	r3, [r3, #4]
 800bd30:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	4a9b      	ldr	r2, [pc, #620]	; (800bfa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800bd38:	4293      	cmp	r3, r2
 800bd3a:	d101      	bne.n	800bd40 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800bd3c:	4b9a      	ldr	r3, [pc, #616]	; (800bfa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800bd3e:	e001      	b.n	800bd44 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800bd40:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800bd44:	685b      	ldr	r3, [r3, #4]
 800bd46:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	685b      	ldr	r3, [r3, #4]
 800bd4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bd50:	d004      	beq.n	800bd5c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	685b      	ldr	r3, [r3, #4]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	f040 8099 	bne.w	800be8e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800bd5c:	69fb      	ldr	r3, [r7, #28]
 800bd5e:	f003 0302 	and.w	r3, r3, #2
 800bd62:	2b02      	cmp	r3, #2
 800bd64:	d107      	bne.n	800bd76 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800bd66:	697b      	ldr	r3, [r7, #20]
 800bd68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d002      	beq.n	800bd76 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800bd70:	6878      	ldr	r0, [r7, #4]
 800bd72:	f000 f925 	bl	800bfc0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800bd76:	69bb      	ldr	r3, [r7, #24]
 800bd78:	f003 0301 	and.w	r3, r3, #1
 800bd7c:	2b01      	cmp	r3, #1
 800bd7e:	d107      	bne.n	800bd90 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800bd80:	693b      	ldr	r3, [r7, #16]
 800bd82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d002      	beq.n	800bd90 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800bd8a:	6878      	ldr	r0, [r7, #4]
 800bd8c:	f000 f9c8 	bl	800c120 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800bd90:	69bb      	ldr	r3, [r7, #24]
 800bd92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd96:	2b40      	cmp	r3, #64	; 0x40
 800bd98:	d13a      	bne.n	800be10 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800bd9a:	693b      	ldr	r3, [r7, #16]
 800bd9c:	f003 0320 	and.w	r3, r3, #32
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d035      	beq.n	800be10 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	4a7e      	ldr	r2, [pc, #504]	; (800bfa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800bdaa:	4293      	cmp	r3, r2
 800bdac:	d101      	bne.n	800bdb2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800bdae:	4b7e      	ldr	r3, [pc, #504]	; (800bfa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800bdb0:	e001      	b.n	800bdb6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800bdb2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800bdb6:	685a      	ldr	r2, [r3, #4]
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	4979      	ldr	r1, [pc, #484]	; (800bfa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800bdbe:	428b      	cmp	r3, r1
 800bdc0:	d101      	bne.n	800bdc6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800bdc2:	4b79      	ldr	r3, [pc, #484]	; (800bfa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800bdc4:	e001      	b.n	800bdca <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800bdc6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800bdca:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800bdce:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	685a      	ldr	r2, [r3, #4]
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800bdde:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800bde0:	2300      	movs	r3, #0
 800bde2:	60fb      	str	r3, [r7, #12]
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	68db      	ldr	r3, [r3, #12]
 800bdea:	60fb      	str	r3, [r7, #12]
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	689b      	ldr	r3, [r3, #8]
 800bdf2:	60fb      	str	r3, [r7, #12]
 800bdf4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	2201      	movs	r2, #1
 800bdfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be02:	f043 0202 	orr.w	r2, r3, #2
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800be0a:	6878      	ldr	r0, [r7, #4]
 800be0c:	f7ff fe88 	bl	800bb20 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800be10:	69fb      	ldr	r3, [r7, #28]
 800be12:	f003 0308 	and.w	r3, r3, #8
 800be16:	2b08      	cmp	r3, #8
 800be18:	f040 80be 	bne.w	800bf98 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 800be1c:	697b      	ldr	r3, [r7, #20]
 800be1e:	f003 0320 	and.w	r3, r3, #32
 800be22:	2b00      	cmp	r3, #0
 800be24:	f000 80b8 	beq.w	800bf98 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	685a      	ldr	r2, [r3, #4]
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800be36:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	4a59      	ldr	r2, [pc, #356]	; (800bfa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800be3e:	4293      	cmp	r3, r2
 800be40:	d101      	bne.n	800be46 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800be42:	4b59      	ldr	r3, [pc, #356]	; (800bfa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800be44:	e001      	b.n	800be4a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800be46:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800be4a:	685a      	ldr	r2, [r3, #4]
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	4954      	ldr	r1, [pc, #336]	; (800bfa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800be52:	428b      	cmp	r3, r1
 800be54:	d101      	bne.n	800be5a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800be56:	4b54      	ldr	r3, [pc, #336]	; (800bfa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800be58:	e001      	b.n	800be5e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800be5a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800be5e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800be62:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800be64:	2300      	movs	r3, #0
 800be66:	60bb      	str	r3, [r7, #8]
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	689b      	ldr	r3, [r3, #8]
 800be6e:	60bb      	str	r3, [r7, #8]
 800be70:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	2201      	movs	r2, #1
 800be76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be7e:	f043 0204 	orr.w	r2, r3, #4
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800be86:	6878      	ldr	r0, [r7, #4]
 800be88:	f7ff fe4a 	bl	800bb20 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800be8c:	e084      	b.n	800bf98 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800be8e:	69bb      	ldr	r3, [r7, #24]
 800be90:	f003 0302 	and.w	r3, r3, #2
 800be94:	2b02      	cmp	r3, #2
 800be96:	d107      	bne.n	800bea8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800be98:	693b      	ldr	r3, [r7, #16]
 800be9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d002      	beq.n	800bea8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800bea2:	6878      	ldr	r0, [r7, #4]
 800bea4:	f000 f8be 	bl	800c024 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800bea8:	69fb      	ldr	r3, [r7, #28]
 800beaa:	f003 0301 	and.w	r3, r3, #1
 800beae:	2b01      	cmp	r3, #1
 800beb0:	d107      	bne.n	800bec2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800beb2:	697b      	ldr	r3, [r7, #20]
 800beb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d002      	beq.n	800bec2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800bebc:	6878      	ldr	r0, [r7, #4]
 800bebe:	f000 f8fd 	bl	800c0bc <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800bec2:	69fb      	ldr	r3, [r7, #28]
 800bec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bec8:	2b40      	cmp	r3, #64	; 0x40
 800beca:	d12f      	bne.n	800bf2c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800becc:	697b      	ldr	r3, [r7, #20]
 800bece:	f003 0320 	and.w	r3, r3, #32
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d02a      	beq.n	800bf2c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	685a      	ldr	r2, [r3, #4]
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800bee4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	4a2e      	ldr	r2, [pc, #184]	; (800bfa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800beec:	4293      	cmp	r3, r2
 800beee:	d101      	bne.n	800bef4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800bef0:	4b2d      	ldr	r3, [pc, #180]	; (800bfa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800bef2:	e001      	b.n	800bef8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800bef4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800bef8:	685a      	ldr	r2, [r3, #4]
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	4929      	ldr	r1, [pc, #164]	; (800bfa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800bf00:	428b      	cmp	r3, r1
 800bf02:	d101      	bne.n	800bf08 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800bf04:	4b28      	ldr	r3, [pc, #160]	; (800bfa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800bf06:	e001      	b.n	800bf0c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800bf08:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800bf0c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800bf10:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	2201      	movs	r2, #1
 800bf16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf1e:	f043 0202 	orr.w	r2, r3, #2
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800bf26:	6878      	ldr	r0, [r7, #4]
 800bf28:	f7ff fdfa 	bl	800bb20 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800bf2c:	69bb      	ldr	r3, [r7, #24]
 800bf2e:	f003 0308 	and.w	r3, r3, #8
 800bf32:	2b08      	cmp	r3, #8
 800bf34:	d131      	bne.n	800bf9a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 800bf36:	693b      	ldr	r3, [r7, #16]
 800bf38:	f003 0320 	and.w	r3, r3, #32
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d02c      	beq.n	800bf9a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	4a17      	ldr	r2, [pc, #92]	; (800bfa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800bf46:	4293      	cmp	r3, r2
 800bf48:	d101      	bne.n	800bf4e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800bf4a:	4b17      	ldr	r3, [pc, #92]	; (800bfa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800bf4c:	e001      	b.n	800bf52 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800bf4e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800bf52:	685a      	ldr	r2, [r3, #4]
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	4912      	ldr	r1, [pc, #72]	; (800bfa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800bf5a:	428b      	cmp	r3, r1
 800bf5c:	d101      	bne.n	800bf62 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 800bf5e:	4b12      	ldr	r3, [pc, #72]	; (800bfa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800bf60:	e001      	b.n	800bf66 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 800bf62:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800bf66:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800bf6a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	685a      	ldr	r2, [r3, #4]
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800bf7a:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	2201      	movs	r2, #1
 800bf80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf88:	f043 0204 	orr.w	r2, r3, #4
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800bf90:	6878      	ldr	r0, [r7, #4]
 800bf92:	f7ff fdc5 	bl	800bb20 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800bf96:	e000      	b.n	800bf9a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800bf98:	bf00      	nop
}
 800bf9a:	bf00      	nop
 800bf9c:	3720      	adds	r7, #32
 800bf9e:	46bd      	mov	sp, r7
 800bfa0:	bd80      	pop	{r7, pc}
 800bfa2:	bf00      	nop
 800bfa4:	40003800 	.word	0x40003800
 800bfa8:	40003400 	.word	0x40003400

0800bfac <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800bfac:	b480      	push	{r7}
 800bfae:	b083      	sub	sp, #12
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800bfb4:	bf00      	nop
 800bfb6:	370c      	adds	r7, #12
 800bfb8:	46bd      	mov	sp, r7
 800bfba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfbe:	4770      	bx	lr

0800bfc0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b082      	sub	sp, #8
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfcc:	1c99      	adds	r1, r3, #2
 800bfce:	687a      	ldr	r2, [r7, #4]
 800bfd0:	6251      	str	r1, [r2, #36]	; 0x24
 800bfd2:	881a      	ldrh	r2, [r3, #0]
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bfde:	b29b      	uxth	r3, r3
 800bfe0:	3b01      	subs	r3, #1
 800bfe2:	b29a      	uxth	r2, r3
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bfec:	b29b      	uxth	r3, r3
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d113      	bne.n	800c01a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	685a      	ldr	r2, [r3, #4]
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800c000:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c006:	b29b      	uxth	r3, r3
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d106      	bne.n	800c01a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	2201      	movs	r2, #1
 800c010:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800c014:	6878      	ldr	r0, [r7, #4]
 800c016:	f7ff ffc9 	bl	800bfac <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800c01a:	bf00      	nop
 800c01c:	3708      	adds	r7, #8
 800c01e:	46bd      	mov	sp, r7
 800c020:	bd80      	pop	{r7, pc}
	...

0800c024 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800c024:	b580      	push	{r7, lr}
 800c026:	b082      	sub	sp, #8
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c030:	1c99      	adds	r1, r3, #2
 800c032:	687a      	ldr	r2, [r7, #4]
 800c034:	6251      	str	r1, [r2, #36]	; 0x24
 800c036:	8819      	ldrh	r1, [r3, #0]
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	4a1d      	ldr	r2, [pc, #116]	; (800c0b4 <I2SEx_TxISR_I2SExt+0x90>)
 800c03e:	4293      	cmp	r3, r2
 800c040:	d101      	bne.n	800c046 <I2SEx_TxISR_I2SExt+0x22>
 800c042:	4b1d      	ldr	r3, [pc, #116]	; (800c0b8 <I2SEx_TxISR_I2SExt+0x94>)
 800c044:	e001      	b.n	800c04a <I2SEx_TxISR_I2SExt+0x26>
 800c046:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800c04a:	460a      	mov	r2, r1
 800c04c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c052:	b29b      	uxth	r3, r3
 800c054:	3b01      	subs	r3, #1
 800c056:	b29a      	uxth	r2, r3
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c060:	b29b      	uxth	r3, r3
 800c062:	2b00      	cmp	r3, #0
 800c064:	d121      	bne.n	800c0aa <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	4a12      	ldr	r2, [pc, #72]	; (800c0b4 <I2SEx_TxISR_I2SExt+0x90>)
 800c06c:	4293      	cmp	r3, r2
 800c06e:	d101      	bne.n	800c074 <I2SEx_TxISR_I2SExt+0x50>
 800c070:	4b11      	ldr	r3, [pc, #68]	; (800c0b8 <I2SEx_TxISR_I2SExt+0x94>)
 800c072:	e001      	b.n	800c078 <I2SEx_TxISR_I2SExt+0x54>
 800c074:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800c078:	685a      	ldr	r2, [r3, #4]
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	490d      	ldr	r1, [pc, #52]	; (800c0b4 <I2SEx_TxISR_I2SExt+0x90>)
 800c080:	428b      	cmp	r3, r1
 800c082:	d101      	bne.n	800c088 <I2SEx_TxISR_I2SExt+0x64>
 800c084:	4b0c      	ldr	r3, [pc, #48]	; (800c0b8 <I2SEx_TxISR_I2SExt+0x94>)
 800c086:	e001      	b.n	800c08c <I2SEx_TxISR_I2SExt+0x68>
 800c088:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800c08c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800c090:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c096:	b29b      	uxth	r3, r3
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d106      	bne.n	800c0aa <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	2201      	movs	r2, #1
 800c0a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800c0a4:	6878      	ldr	r0, [r7, #4]
 800c0a6:	f7ff ff81 	bl	800bfac <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800c0aa:	bf00      	nop
 800c0ac:	3708      	adds	r7, #8
 800c0ae:	46bd      	mov	sp, r7
 800c0b0:	bd80      	pop	{r7, pc}
 800c0b2:	bf00      	nop
 800c0b4:	40003800 	.word	0x40003800
 800c0b8:	40003400 	.word	0x40003400

0800c0bc <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800c0bc:	b580      	push	{r7, lr}
 800c0be:	b082      	sub	sp, #8
 800c0c0:	af00      	add	r7, sp, #0
 800c0c2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	68d8      	ldr	r0, [r3, #12]
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0ce:	1c99      	adds	r1, r3, #2
 800c0d0:	687a      	ldr	r2, [r7, #4]
 800c0d2:	62d1      	str	r1, [r2, #44]	; 0x2c
 800c0d4:	b282      	uxth	r2, r0
 800c0d6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c0dc:	b29b      	uxth	r3, r3
 800c0de:	3b01      	subs	r3, #1
 800c0e0:	b29a      	uxth	r2, r3
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c0ea:	b29b      	uxth	r3, r3
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d113      	bne.n	800c118 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	685a      	ldr	r2, [r3, #4]
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800c0fe:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c104:	b29b      	uxth	r3, r3
 800c106:	2b00      	cmp	r3, #0
 800c108:	d106      	bne.n	800c118 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	2201      	movs	r2, #1
 800c10e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800c112:	6878      	ldr	r0, [r7, #4]
 800c114:	f7ff ff4a 	bl	800bfac <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800c118:	bf00      	nop
 800c11a:	3708      	adds	r7, #8
 800c11c:	46bd      	mov	sp, r7
 800c11e:	bd80      	pop	{r7, pc}

0800c120 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800c120:	b580      	push	{r7, lr}
 800c122:	b082      	sub	sp, #8
 800c124:	af00      	add	r7, sp, #0
 800c126:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	4a20      	ldr	r2, [pc, #128]	; (800c1b0 <I2SEx_RxISR_I2SExt+0x90>)
 800c12e:	4293      	cmp	r3, r2
 800c130:	d101      	bne.n	800c136 <I2SEx_RxISR_I2SExt+0x16>
 800c132:	4b20      	ldr	r3, [pc, #128]	; (800c1b4 <I2SEx_RxISR_I2SExt+0x94>)
 800c134:	e001      	b.n	800c13a <I2SEx_RxISR_I2SExt+0x1a>
 800c136:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800c13a:	68d8      	ldr	r0, [r3, #12]
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c140:	1c99      	adds	r1, r3, #2
 800c142:	687a      	ldr	r2, [r7, #4]
 800c144:	62d1      	str	r1, [r2, #44]	; 0x2c
 800c146:	b282      	uxth	r2, r0
 800c148:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c14e:	b29b      	uxth	r3, r3
 800c150:	3b01      	subs	r3, #1
 800c152:	b29a      	uxth	r2, r3
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c15c:	b29b      	uxth	r3, r3
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d121      	bne.n	800c1a6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	4a12      	ldr	r2, [pc, #72]	; (800c1b0 <I2SEx_RxISR_I2SExt+0x90>)
 800c168:	4293      	cmp	r3, r2
 800c16a:	d101      	bne.n	800c170 <I2SEx_RxISR_I2SExt+0x50>
 800c16c:	4b11      	ldr	r3, [pc, #68]	; (800c1b4 <I2SEx_RxISR_I2SExt+0x94>)
 800c16e:	e001      	b.n	800c174 <I2SEx_RxISR_I2SExt+0x54>
 800c170:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800c174:	685a      	ldr	r2, [r3, #4]
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	490d      	ldr	r1, [pc, #52]	; (800c1b0 <I2SEx_RxISR_I2SExt+0x90>)
 800c17c:	428b      	cmp	r3, r1
 800c17e:	d101      	bne.n	800c184 <I2SEx_RxISR_I2SExt+0x64>
 800c180:	4b0c      	ldr	r3, [pc, #48]	; (800c1b4 <I2SEx_RxISR_I2SExt+0x94>)
 800c182:	e001      	b.n	800c188 <I2SEx_RxISR_I2SExt+0x68>
 800c184:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800c188:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800c18c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c192:	b29b      	uxth	r3, r3
 800c194:	2b00      	cmp	r3, #0
 800c196:	d106      	bne.n	800c1a6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	2201      	movs	r2, #1
 800c19c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800c1a0:	6878      	ldr	r0, [r7, #4]
 800c1a2:	f7ff ff03 	bl	800bfac <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800c1a6:	bf00      	nop
 800c1a8:	3708      	adds	r7, #8
 800c1aa:	46bd      	mov	sp, r7
 800c1ac:	bd80      	pop	{r7, pc}
 800c1ae:	bf00      	nop
 800c1b0:	40003800 	.word	0x40003800
 800c1b4:	40003400 	.word	0x40003400

0800c1b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c1b8:	b580      	push	{r7, lr}
 800c1ba:	b086      	sub	sp, #24
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d101      	bne.n	800c1ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c1c6:	2301      	movs	r3, #1
 800c1c8:	e25b      	b.n	800c682 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	f003 0301 	and.w	r3, r3, #1
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d075      	beq.n	800c2c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800c1d6:	4ba3      	ldr	r3, [pc, #652]	; (800c464 <HAL_RCC_OscConfig+0x2ac>)
 800c1d8:	689b      	ldr	r3, [r3, #8]
 800c1da:	f003 030c 	and.w	r3, r3, #12
 800c1de:	2b04      	cmp	r3, #4
 800c1e0:	d00c      	beq.n	800c1fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c1e2:	4ba0      	ldr	r3, [pc, #640]	; (800c464 <HAL_RCC_OscConfig+0x2ac>)
 800c1e4:	689b      	ldr	r3, [r3, #8]
 800c1e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800c1ea:	2b08      	cmp	r3, #8
 800c1ec:	d112      	bne.n	800c214 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c1ee:	4b9d      	ldr	r3, [pc, #628]	; (800c464 <HAL_RCC_OscConfig+0x2ac>)
 800c1f0:	685b      	ldr	r3, [r3, #4]
 800c1f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c1f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c1fa:	d10b      	bne.n	800c214 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c1fc:	4b99      	ldr	r3, [pc, #612]	; (800c464 <HAL_RCC_OscConfig+0x2ac>)
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c204:	2b00      	cmp	r3, #0
 800c206:	d05b      	beq.n	800c2c0 <HAL_RCC_OscConfig+0x108>
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	685b      	ldr	r3, [r3, #4]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d157      	bne.n	800c2c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800c210:	2301      	movs	r3, #1
 800c212:	e236      	b.n	800c682 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	685b      	ldr	r3, [r3, #4]
 800c218:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c21c:	d106      	bne.n	800c22c <HAL_RCC_OscConfig+0x74>
 800c21e:	4b91      	ldr	r3, [pc, #580]	; (800c464 <HAL_RCC_OscConfig+0x2ac>)
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	4a90      	ldr	r2, [pc, #576]	; (800c464 <HAL_RCC_OscConfig+0x2ac>)
 800c224:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c228:	6013      	str	r3, [r2, #0]
 800c22a:	e01d      	b.n	800c268 <HAL_RCC_OscConfig+0xb0>
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	685b      	ldr	r3, [r3, #4]
 800c230:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c234:	d10c      	bne.n	800c250 <HAL_RCC_OscConfig+0x98>
 800c236:	4b8b      	ldr	r3, [pc, #556]	; (800c464 <HAL_RCC_OscConfig+0x2ac>)
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	4a8a      	ldr	r2, [pc, #552]	; (800c464 <HAL_RCC_OscConfig+0x2ac>)
 800c23c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c240:	6013      	str	r3, [r2, #0]
 800c242:	4b88      	ldr	r3, [pc, #544]	; (800c464 <HAL_RCC_OscConfig+0x2ac>)
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	4a87      	ldr	r2, [pc, #540]	; (800c464 <HAL_RCC_OscConfig+0x2ac>)
 800c248:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c24c:	6013      	str	r3, [r2, #0]
 800c24e:	e00b      	b.n	800c268 <HAL_RCC_OscConfig+0xb0>
 800c250:	4b84      	ldr	r3, [pc, #528]	; (800c464 <HAL_RCC_OscConfig+0x2ac>)
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	4a83      	ldr	r2, [pc, #524]	; (800c464 <HAL_RCC_OscConfig+0x2ac>)
 800c256:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c25a:	6013      	str	r3, [r2, #0]
 800c25c:	4b81      	ldr	r3, [pc, #516]	; (800c464 <HAL_RCC_OscConfig+0x2ac>)
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	4a80      	ldr	r2, [pc, #512]	; (800c464 <HAL_RCC_OscConfig+0x2ac>)
 800c262:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c266:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	685b      	ldr	r3, [r3, #4]
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d013      	beq.n	800c298 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c270:	f7fd f9e4 	bl	800963c <HAL_GetTick>
 800c274:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c276:	e008      	b.n	800c28a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c278:	f7fd f9e0 	bl	800963c <HAL_GetTick>
 800c27c:	4602      	mov	r2, r0
 800c27e:	693b      	ldr	r3, [r7, #16]
 800c280:	1ad3      	subs	r3, r2, r3
 800c282:	2b64      	cmp	r3, #100	; 0x64
 800c284:	d901      	bls.n	800c28a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800c286:	2303      	movs	r3, #3
 800c288:	e1fb      	b.n	800c682 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c28a:	4b76      	ldr	r3, [pc, #472]	; (800c464 <HAL_RCC_OscConfig+0x2ac>)
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c292:	2b00      	cmp	r3, #0
 800c294:	d0f0      	beq.n	800c278 <HAL_RCC_OscConfig+0xc0>
 800c296:	e014      	b.n	800c2c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c298:	f7fd f9d0 	bl	800963c <HAL_GetTick>
 800c29c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c29e:	e008      	b.n	800c2b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c2a0:	f7fd f9cc 	bl	800963c <HAL_GetTick>
 800c2a4:	4602      	mov	r2, r0
 800c2a6:	693b      	ldr	r3, [r7, #16]
 800c2a8:	1ad3      	subs	r3, r2, r3
 800c2aa:	2b64      	cmp	r3, #100	; 0x64
 800c2ac:	d901      	bls.n	800c2b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800c2ae:	2303      	movs	r3, #3
 800c2b0:	e1e7      	b.n	800c682 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c2b2:	4b6c      	ldr	r3, [pc, #432]	; (800c464 <HAL_RCC_OscConfig+0x2ac>)
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d1f0      	bne.n	800c2a0 <HAL_RCC_OscConfig+0xe8>
 800c2be:	e000      	b.n	800c2c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c2c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	f003 0302 	and.w	r3, r3, #2
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d063      	beq.n	800c396 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800c2ce:	4b65      	ldr	r3, [pc, #404]	; (800c464 <HAL_RCC_OscConfig+0x2ac>)
 800c2d0:	689b      	ldr	r3, [r3, #8]
 800c2d2:	f003 030c 	and.w	r3, r3, #12
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d00b      	beq.n	800c2f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c2da:	4b62      	ldr	r3, [pc, #392]	; (800c464 <HAL_RCC_OscConfig+0x2ac>)
 800c2dc:	689b      	ldr	r3, [r3, #8]
 800c2de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800c2e2:	2b08      	cmp	r3, #8
 800c2e4:	d11c      	bne.n	800c320 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c2e6:	4b5f      	ldr	r3, [pc, #380]	; (800c464 <HAL_RCC_OscConfig+0x2ac>)
 800c2e8:	685b      	ldr	r3, [r3, #4]
 800c2ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d116      	bne.n	800c320 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c2f2:	4b5c      	ldr	r3, [pc, #368]	; (800c464 <HAL_RCC_OscConfig+0x2ac>)
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	f003 0302 	and.w	r3, r3, #2
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d005      	beq.n	800c30a <HAL_RCC_OscConfig+0x152>
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	68db      	ldr	r3, [r3, #12]
 800c302:	2b01      	cmp	r3, #1
 800c304:	d001      	beq.n	800c30a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800c306:	2301      	movs	r3, #1
 800c308:	e1bb      	b.n	800c682 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c30a:	4b56      	ldr	r3, [pc, #344]	; (800c464 <HAL_RCC_OscConfig+0x2ac>)
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	691b      	ldr	r3, [r3, #16]
 800c316:	00db      	lsls	r3, r3, #3
 800c318:	4952      	ldr	r1, [pc, #328]	; (800c464 <HAL_RCC_OscConfig+0x2ac>)
 800c31a:	4313      	orrs	r3, r2
 800c31c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c31e:	e03a      	b.n	800c396 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	68db      	ldr	r3, [r3, #12]
 800c324:	2b00      	cmp	r3, #0
 800c326:	d020      	beq.n	800c36a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c328:	4b4f      	ldr	r3, [pc, #316]	; (800c468 <HAL_RCC_OscConfig+0x2b0>)
 800c32a:	2201      	movs	r2, #1
 800c32c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c32e:	f7fd f985 	bl	800963c <HAL_GetTick>
 800c332:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c334:	e008      	b.n	800c348 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c336:	f7fd f981 	bl	800963c <HAL_GetTick>
 800c33a:	4602      	mov	r2, r0
 800c33c:	693b      	ldr	r3, [r7, #16]
 800c33e:	1ad3      	subs	r3, r2, r3
 800c340:	2b02      	cmp	r3, #2
 800c342:	d901      	bls.n	800c348 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800c344:	2303      	movs	r3, #3
 800c346:	e19c      	b.n	800c682 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c348:	4b46      	ldr	r3, [pc, #280]	; (800c464 <HAL_RCC_OscConfig+0x2ac>)
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	f003 0302 	and.w	r3, r3, #2
 800c350:	2b00      	cmp	r3, #0
 800c352:	d0f0      	beq.n	800c336 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c354:	4b43      	ldr	r3, [pc, #268]	; (800c464 <HAL_RCC_OscConfig+0x2ac>)
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	691b      	ldr	r3, [r3, #16]
 800c360:	00db      	lsls	r3, r3, #3
 800c362:	4940      	ldr	r1, [pc, #256]	; (800c464 <HAL_RCC_OscConfig+0x2ac>)
 800c364:	4313      	orrs	r3, r2
 800c366:	600b      	str	r3, [r1, #0]
 800c368:	e015      	b.n	800c396 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c36a:	4b3f      	ldr	r3, [pc, #252]	; (800c468 <HAL_RCC_OscConfig+0x2b0>)
 800c36c:	2200      	movs	r2, #0
 800c36e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c370:	f7fd f964 	bl	800963c <HAL_GetTick>
 800c374:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c376:	e008      	b.n	800c38a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c378:	f7fd f960 	bl	800963c <HAL_GetTick>
 800c37c:	4602      	mov	r2, r0
 800c37e:	693b      	ldr	r3, [r7, #16]
 800c380:	1ad3      	subs	r3, r2, r3
 800c382:	2b02      	cmp	r3, #2
 800c384:	d901      	bls.n	800c38a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800c386:	2303      	movs	r3, #3
 800c388:	e17b      	b.n	800c682 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c38a:	4b36      	ldr	r3, [pc, #216]	; (800c464 <HAL_RCC_OscConfig+0x2ac>)
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	f003 0302 	and.w	r3, r3, #2
 800c392:	2b00      	cmp	r3, #0
 800c394:	d1f0      	bne.n	800c378 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	f003 0308 	and.w	r3, r3, #8
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d030      	beq.n	800c404 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	695b      	ldr	r3, [r3, #20]
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d016      	beq.n	800c3d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c3aa:	4b30      	ldr	r3, [pc, #192]	; (800c46c <HAL_RCC_OscConfig+0x2b4>)
 800c3ac:	2201      	movs	r2, #1
 800c3ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c3b0:	f7fd f944 	bl	800963c <HAL_GetTick>
 800c3b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c3b6:	e008      	b.n	800c3ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c3b8:	f7fd f940 	bl	800963c <HAL_GetTick>
 800c3bc:	4602      	mov	r2, r0
 800c3be:	693b      	ldr	r3, [r7, #16]
 800c3c0:	1ad3      	subs	r3, r2, r3
 800c3c2:	2b02      	cmp	r3, #2
 800c3c4:	d901      	bls.n	800c3ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800c3c6:	2303      	movs	r3, #3
 800c3c8:	e15b      	b.n	800c682 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c3ca:	4b26      	ldr	r3, [pc, #152]	; (800c464 <HAL_RCC_OscConfig+0x2ac>)
 800c3cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c3ce:	f003 0302 	and.w	r3, r3, #2
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d0f0      	beq.n	800c3b8 <HAL_RCC_OscConfig+0x200>
 800c3d6:	e015      	b.n	800c404 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c3d8:	4b24      	ldr	r3, [pc, #144]	; (800c46c <HAL_RCC_OscConfig+0x2b4>)
 800c3da:	2200      	movs	r2, #0
 800c3dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c3de:	f7fd f92d 	bl	800963c <HAL_GetTick>
 800c3e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c3e4:	e008      	b.n	800c3f8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c3e6:	f7fd f929 	bl	800963c <HAL_GetTick>
 800c3ea:	4602      	mov	r2, r0
 800c3ec:	693b      	ldr	r3, [r7, #16]
 800c3ee:	1ad3      	subs	r3, r2, r3
 800c3f0:	2b02      	cmp	r3, #2
 800c3f2:	d901      	bls.n	800c3f8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800c3f4:	2303      	movs	r3, #3
 800c3f6:	e144      	b.n	800c682 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c3f8:	4b1a      	ldr	r3, [pc, #104]	; (800c464 <HAL_RCC_OscConfig+0x2ac>)
 800c3fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c3fc:	f003 0302 	and.w	r3, r3, #2
 800c400:	2b00      	cmp	r3, #0
 800c402:	d1f0      	bne.n	800c3e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	f003 0304 	and.w	r3, r3, #4
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	f000 80a0 	beq.w	800c552 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c412:	2300      	movs	r3, #0
 800c414:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c416:	4b13      	ldr	r3, [pc, #76]	; (800c464 <HAL_RCC_OscConfig+0x2ac>)
 800c418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c41a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d10f      	bne.n	800c442 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c422:	2300      	movs	r3, #0
 800c424:	60bb      	str	r3, [r7, #8]
 800c426:	4b0f      	ldr	r3, [pc, #60]	; (800c464 <HAL_RCC_OscConfig+0x2ac>)
 800c428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c42a:	4a0e      	ldr	r2, [pc, #56]	; (800c464 <HAL_RCC_OscConfig+0x2ac>)
 800c42c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c430:	6413      	str	r3, [r2, #64]	; 0x40
 800c432:	4b0c      	ldr	r3, [pc, #48]	; (800c464 <HAL_RCC_OscConfig+0x2ac>)
 800c434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c43a:	60bb      	str	r3, [r7, #8]
 800c43c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c43e:	2301      	movs	r3, #1
 800c440:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c442:	4b0b      	ldr	r3, [pc, #44]	; (800c470 <HAL_RCC_OscConfig+0x2b8>)
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d121      	bne.n	800c492 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800c44e:	4b08      	ldr	r3, [pc, #32]	; (800c470 <HAL_RCC_OscConfig+0x2b8>)
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	4a07      	ldr	r2, [pc, #28]	; (800c470 <HAL_RCC_OscConfig+0x2b8>)
 800c454:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c458:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c45a:	f7fd f8ef 	bl	800963c <HAL_GetTick>
 800c45e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c460:	e011      	b.n	800c486 <HAL_RCC_OscConfig+0x2ce>
 800c462:	bf00      	nop
 800c464:	40023800 	.word	0x40023800
 800c468:	42470000 	.word	0x42470000
 800c46c:	42470e80 	.word	0x42470e80
 800c470:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c474:	f7fd f8e2 	bl	800963c <HAL_GetTick>
 800c478:	4602      	mov	r2, r0
 800c47a:	693b      	ldr	r3, [r7, #16]
 800c47c:	1ad3      	subs	r3, r2, r3
 800c47e:	2b02      	cmp	r3, #2
 800c480:	d901      	bls.n	800c486 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800c482:	2303      	movs	r3, #3
 800c484:	e0fd      	b.n	800c682 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c486:	4b81      	ldr	r3, [pc, #516]	; (800c68c <HAL_RCC_OscConfig+0x4d4>)
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d0f0      	beq.n	800c474 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	689b      	ldr	r3, [r3, #8]
 800c496:	2b01      	cmp	r3, #1
 800c498:	d106      	bne.n	800c4a8 <HAL_RCC_OscConfig+0x2f0>
 800c49a:	4b7d      	ldr	r3, [pc, #500]	; (800c690 <HAL_RCC_OscConfig+0x4d8>)
 800c49c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c49e:	4a7c      	ldr	r2, [pc, #496]	; (800c690 <HAL_RCC_OscConfig+0x4d8>)
 800c4a0:	f043 0301 	orr.w	r3, r3, #1
 800c4a4:	6713      	str	r3, [r2, #112]	; 0x70
 800c4a6:	e01c      	b.n	800c4e2 <HAL_RCC_OscConfig+0x32a>
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	689b      	ldr	r3, [r3, #8]
 800c4ac:	2b05      	cmp	r3, #5
 800c4ae:	d10c      	bne.n	800c4ca <HAL_RCC_OscConfig+0x312>
 800c4b0:	4b77      	ldr	r3, [pc, #476]	; (800c690 <HAL_RCC_OscConfig+0x4d8>)
 800c4b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c4b4:	4a76      	ldr	r2, [pc, #472]	; (800c690 <HAL_RCC_OscConfig+0x4d8>)
 800c4b6:	f043 0304 	orr.w	r3, r3, #4
 800c4ba:	6713      	str	r3, [r2, #112]	; 0x70
 800c4bc:	4b74      	ldr	r3, [pc, #464]	; (800c690 <HAL_RCC_OscConfig+0x4d8>)
 800c4be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c4c0:	4a73      	ldr	r2, [pc, #460]	; (800c690 <HAL_RCC_OscConfig+0x4d8>)
 800c4c2:	f043 0301 	orr.w	r3, r3, #1
 800c4c6:	6713      	str	r3, [r2, #112]	; 0x70
 800c4c8:	e00b      	b.n	800c4e2 <HAL_RCC_OscConfig+0x32a>
 800c4ca:	4b71      	ldr	r3, [pc, #452]	; (800c690 <HAL_RCC_OscConfig+0x4d8>)
 800c4cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c4ce:	4a70      	ldr	r2, [pc, #448]	; (800c690 <HAL_RCC_OscConfig+0x4d8>)
 800c4d0:	f023 0301 	bic.w	r3, r3, #1
 800c4d4:	6713      	str	r3, [r2, #112]	; 0x70
 800c4d6:	4b6e      	ldr	r3, [pc, #440]	; (800c690 <HAL_RCC_OscConfig+0x4d8>)
 800c4d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c4da:	4a6d      	ldr	r2, [pc, #436]	; (800c690 <HAL_RCC_OscConfig+0x4d8>)
 800c4dc:	f023 0304 	bic.w	r3, r3, #4
 800c4e0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	689b      	ldr	r3, [r3, #8]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d015      	beq.n	800c516 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c4ea:	f7fd f8a7 	bl	800963c <HAL_GetTick>
 800c4ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c4f0:	e00a      	b.n	800c508 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c4f2:	f7fd f8a3 	bl	800963c <HAL_GetTick>
 800c4f6:	4602      	mov	r2, r0
 800c4f8:	693b      	ldr	r3, [r7, #16]
 800c4fa:	1ad3      	subs	r3, r2, r3
 800c4fc:	f241 3288 	movw	r2, #5000	; 0x1388
 800c500:	4293      	cmp	r3, r2
 800c502:	d901      	bls.n	800c508 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800c504:	2303      	movs	r3, #3
 800c506:	e0bc      	b.n	800c682 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c508:	4b61      	ldr	r3, [pc, #388]	; (800c690 <HAL_RCC_OscConfig+0x4d8>)
 800c50a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c50c:	f003 0302 	and.w	r3, r3, #2
 800c510:	2b00      	cmp	r3, #0
 800c512:	d0ee      	beq.n	800c4f2 <HAL_RCC_OscConfig+0x33a>
 800c514:	e014      	b.n	800c540 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c516:	f7fd f891 	bl	800963c <HAL_GetTick>
 800c51a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c51c:	e00a      	b.n	800c534 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c51e:	f7fd f88d 	bl	800963c <HAL_GetTick>
 800c522:	4602      	mov	r2, r0
 800c524:	693b      	ldr	r3, [r7, #16]
 800c526:	1ad3      	subs	r3, r2, r3
 800c528:	f241 3288 	movw	r2, #5000	; 0x1388
 800c52c:	4293      	cmp	r3, r2
 800c52e:	d901      	bls.n	800c534 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800c530:	2303      	movs	r3, #3
 800c532:	e0a6      	b.n	800c682 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c534:	4b56      	ldr	r3, [pc, #344]	; (800c690 <HAL_RCC_OscConfig+0x4d8>)
 800c536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c538:	f003 0302 	and.w	r3, r3, #2
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d1ee      	bne.n	800c51e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c540:	7dfb      	ldrb	r3, [r7, #23]
 800c542:	2b01      	cmp	r3, #1
 800c544:	d105      	bne.n	800c552 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c546:	4b52      	ldr	r3, [pc, #328]	; (800c690 <HAL_RCC_OscConfig+0x4d8>)
 800c548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c54a:	4a51      	ldr	r2, [pc, #324]	; (800c690 <HAL_RCC_OscConfig+0x4d8>)
 800c54c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c550:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	699b      	ldr	r3, [r3, #24]
 800c556:	2b00      	cmp	r3, #0
 800c558:	f000 8092 	beq.w	800c680 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800c55c:	4b4c      	ldr	r3, [pc, #304]	; (800c690 <HAL_RCC_OscConfig+0x4d8>)
 800c55e:	689b      	ldr	r3, [r3, #8]
 800c560:	f003 030c 	and.w	r3, r3, #12
 800c564:	2b08      	cmp	r3, #8
 800c566:	d05c      	beq.n	800c622 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	699b      	ldr	r3, [r3, #24]
 800c56c:	2b02      	cmp	r3, #2
 800c56e:	d141      	bne.n	800c5f4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c570:	4b48      	ldr	r3, [pc, #288]	; (800c694 <HAL_RCC_OscConfig+0x4dc>)
 800c572:	2200      	movs	r2, #0
 800c574:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c576:	f7fd f861 	bl	800963c <HAL_GetTick>
 800c57a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c57c:	e008      	b.n	800c590 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c57e:	f7fd f85d 	bl	800963c <HAL_GetTick>
 800c582:	4602      	mov	r2, r0
 800c584:	693b      	ldr	r3, [r7, #16]
 800c586:	1ad3      	subs	r3, r2, r3
 800c588:	2b02      	cmp	r3, #2
 800c58a:	d901      	bls.n	800c590 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800c58c:	2303      	movs	r3, #3
 800c58e:	e078      	b.n	800c682 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c590:	4b3f      	ldr	r3, [pc, #252]	; (800c690 <HAL_RCC_OscConfig+0x4d8>)
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d1f0      	bne.n	800c57e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	69da      	ldr	r2, [r3, #28]
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	6a1b      	ldr	r3, [r3, #32]
 800c5a4:	431a      	orrs	r2, r3
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5aa:	019b      	lsls	r3, r3, #6
 800c5ac:	431a      	orrs	r2, r3
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5b2:	085b      	lsrs	r3, r3, #1
 800c5b4:	3b01      	subs	r3, #1
 800c5b6:	041b      	lsls	r3, r3, #16
 800c5b8:	431a      	orrs	r2, r3
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5be:	061b      	lsls	r3, r3, #24
 800c5c0:	4933      	ldr	r1, [pc, #204]	; (800c690 <HAL_RCC_OscConfig+0x4d8>)
 800c5c2:	4313      	orrs	r3, r2
 800c5c4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c5c6:	4b33      	ldr	r3, [pc, #204]	; (800c694 <HAL_RCC_OscConfig+0x4dc>)
 800c5c8:	2201      	movs	r2, #1
 800c5ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c5cc:	f7fd f836 	bl	800963c <HAL_GetTick>
 800c5d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c5d2:	e008      	b.n	800c5e6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c5d4:	f7fd f832 	bl	800963c <HAL_GetTick>
 800c5d8:	4602      	mov	r2, r0
 800c5da:	693b      	ldr	r3, [r7, #16]
 800c5dc:	1ad3      	subs	r3, r2, r3
 800c5de:	2b02      	cmp	r3, #2
 800c5e0:	d901      	bls.n	800c5e6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800c5e2:	2303      	movs	r3, #3
 800c5e4:	e04d      	b.n	800c682 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c5e6:	4b2a      	ldr	r3, [pc, #168]	; (800c690 <HAL_RCC_OscConfig+0x4d8>)
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d0f0      	beq.n	800c5d4 <HAL_RCC_OscConfig+0x41c>
 800c5f2:	e045      	b.n	800c680 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c5f4:	4b27      	ldr	r3, [pc, #156]	; (800c694 <HAL_RCC_OscConfig+0x4dc>)
 800c5f6:	2200      	movs	r2, #0
 800c5f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c5fa:	f7fd f81f 	bl	800963c <HAL_GetTick>
 800c5fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c600:	e008      	b.n	800c614 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c602:	f7fd f81b 	bl	800963c <HAL_GetTick>
 800c606:	4602      	mov	r2, r0
 800c608:	693b      	ldr	r3, [r7, #16]
 800c60a:	1ad3      	subs	r3, r2, r3
 800c60c:	2b02      	cmp	r3, #2
 800c60e:	d901      	bls.n	800c614 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800c610:	2303      	movs	r3, #3
 800c612:	e036      	b.n	800c682 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c614:	4b1e      	ldr	r3, [pc, #120]	; (800c690 <HAL_RCC_OscConfig+0x4d8>)
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d1f0      	bne.n	800c602 <HAL_RCC_OscConfig+0x44a>
 800c620:	e02e      	b.n	800c680 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	699b      	ldr	r3, [r3, #24]
 800c626:	2b01      	cmp	r3, #1
 800c628:	d101      	bne.n	800c62e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800c62a:	2301      	movs	r3, #1
 800c62c:	e029      	b.n	800c682 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800c62e:	4b18      	ldr	r3, [pc, #96]	; (800c690 <HAL_RCC_OscConfig+0x4d8>)
 800c630:	685b      	ldr	r3, [r3, #4]
 800c632:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	69db      	ldr	r3, [r3, #28]
 800c63e:	429a      	cmp	r2, r3
 800c640:	d11c      	bne.n	800c67c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c64c:	429a      	cmp	r2, r3
 800c64e:	d115      	bne.n	800c67c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800c650:	68fa      	ldr	r2, [r7, #12]
 800c652:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800c656:	4013      	ands	r3, r2
 800c658:	687a      	ldr	r2, [r7, #4]
 800c65a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800c65c:	4293      	cmp	r3, r2
 800c65e:	d10d      	bne.n	800c67c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800c66a:	429a      	cmp	r2, r3
 800c66c:	d106      	bne.n	800c67c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800c678:	429a      	cmp	r2, r3
 800c67a:	d001      	beq.n	800c680 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800c67c:	2301      	movs	r3, #1
 800c67e:	e000      	b.n	800c682 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800c680:	2300      	movs	r3, #0
}
 800c682:	4618      	mov	r0, r3
 800c684:	3718      	adds	r7, #24
 800c686:	46bd      	mov	sp, r7
 800c688:	bd80      	pop	{r7, pc}
 800c68a:	bf00      	nop
 800c68c:	40007000 	.word	0x40007000
 800c690:	40023800 	.word	0x40023800
 800c694:	42470060 	.word	0x42470060

0800c698 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c698:	b580      	push	{r7, lr}
 800c69a:	b084      	sub	sp, #16
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	6078      	str	r0, [r7, #4]
 800c6a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d101      	bne.n	800c6ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c6a8:	2301      	movs	r3, #1
 800c6aa:	e0cc      	b.n	800c846 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800c6ac:	4b68      	ldr	r3, [pc, #416]	; (800c850 <HAL_RCC_ClockConfig+0x1b8>)
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	f003 030f 	and.w	r3, r3, #15
 800c6b4:	683a      	ldr	r2, [r7, #0]
 800c6b6:	429a      	cmp	r2, r3
 800c6b8:	d90c      	bls.n	800c6d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c6ba:	4b65      	ldr	r3, [pc, #404]	; (800c850 <HAL_RCC_ClockConfig+0x1b8>)
 800c6bc:	683a      	ldr	r2, [r7, #0]
 800c6be:	b2d2      	uxtb	r2, r2
 800c6c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c6c2:	4b63      	ldr	r3, [pc, #396]	; (800c850 <HAL_RCC_ClockConfig+0x1b8>)
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	f003 030f 	and.w	r3, r3, #15
 800c6ca:	683a      	ldr	r2, [r7, #0]
 800c6cc:	429a      	cmp	r2, r3
 800c6ce:	d001      	beq.n	800c6d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800c6d0:	2301      	movs	r3, #1
 800c6d2:	e0b8      	b.n	800c846 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	f003 0302 	and.w	r3, r3, #2
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d020      	beq.n	800c722 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	f003 0304 	and.w	r3, r3, #4
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d005      	beq.n	800c6f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c6ec:	4b59      	ldr	r3, [pc, #356]	; (800c854 <HAL_RCC_ClockConfig+0x1bc>)
 800c6ee:	689b      	ldr	r3, [r3, #8]
 800c6f0:	4a58      	ldr	r2, [pc, #352]	; (800c854 <HAL_RCC_ClockConfig+0x1bc>)
 800c6f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800c6f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	f003 0308 	and.w	r3, r3, #8
 800c700:	2b00      	cmp	r3, #0
 800c702:	d005      	beq.n	800c710 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c704:	4b53      	ldr	r3, [pc, #332]	; (800c854 <HAL_RCC_ClockConfig+0x1bc>)
 800c706:	689b      	ldr	r3, [r3, #8]
 800c708:	4a52      	ldr	r2, [pc, #328]	; (800c854 <HAL_RCC_ClockConfig+0x1bc>)
 800c70a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800c70e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c710:	4b50      	ldr	r3, [pc, #320]	; (800c854 <HAL_RCC_ClockConfig+0x1bc>)
 800c712:	689b      	ldr	r3, [r3, #8]
 800c714:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	689b      	ldr	r3, [r3, #8]
 800c71c:	494d      	ldr	r1, [pc, #308]	; (800c854 <HAL_RCC_ClockConfig+0x1bc>)
 800c71e:	4313      	orrs	r3, r2
 800c720:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	f003 0301 	and.w	r3, r3, #1
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d044      	beq.n	800c7b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	685b      	ldr	r3, [r3, #4]
 800c732:	2b01      	cmp	r3, #1
 800c734:	d107      	bne.n	800c746 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c736:	4b47      	ldr	r3, [pc, #284]	; (800c854 <HAL_RCC_ClockConfig+0x1bc>)
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d119      	bne.n	800c776 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c742:	2301      	movs	r3, #1
 800c744:	e07f      	b.n	800c846 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	685b      	ldr	r3, [r3, #4]
 800c74a:	2b02      	cmp	r3, #2
 800c74c:	d003      	beq.n	800c756 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c752:	2b03      	cmp	r3, #3
 800c754:	d107      	bne.n	800c766 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c756:	4b3f      	ldr	r3, [pc, #252]	; (800c854 <HAL_RCC_ClockConfig+0x1bc>)
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d109      	bne.n	800c776 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c762:	2301      	movs	r3, #1
 800c764:	e06f      	b.n	800c846 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c766:	4b3b      	ldr	r3, [pc, #236]	; (800c854 <HAL_RCC_ClockConfig+0x1bc>)
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	f003 0302 	and.w	r3, r3, #2
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d101      	bne.n	800c776 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c772:	2301      	movs	r3, #1
 800c774:	e067      	b.n	800c846 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c776:	4b37      	ldr	r3, [pc, #220]	; (800c854 <HAL_RCC_ClockConfig+0x1bc>)
 800c778:	689b      	ldr	r3, [r3, #8]
 800c77a:	f023 0203 	bic.w	r2, r3, #3
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	685b      	ldr	r3, [r3, #4]
 800c782:	4934      	ldr	r1, [pc, #208]	; (800c854 <HAL_RCC_ClockConfig+0x1bc>)
 800c784:	4313      	orrs	r3, r2
 800c786:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800c788:	f7fc ff58 	bl	800963c <HAL_GetTick>
 800c78c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c78e:	e00a      	b.n	800c7a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c790:	f7fc ff54 	bl	800963c <HAL_GetTick>
 800c794:	4602      	mov	r2, r0
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	1ad3      	subs	r3, r2, r3
 800c79a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c79e:	4293      	cmp	r3, r2
 800c7a0:	d901      	bls.n	800c7a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800c7a2:	2303      	movs	r3, #3
 800c7a4:	e04f      	b.n	800c846 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c7a6:	4b2b      	ldr	r3, [pc, #172]	; (800c854 <HAL_RCC_ClockConfig+0x1bc>)
 800c7a8:	689b      	ldr	r3, [r3, #8]
 800c7aa:	f003 020c 	and.w	r2, r3, #12
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	685b      	ldr	r3, [r3, #4]
 800c7b2:	009b      	lsls	r3, r3, #2
 800c7b4:	429a      	cmp	r2, r3
 800c7b6:	d1eb      	bne.n	800c790 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800c7b8:	4b25      	ldr	r3, [pc, #148]	; (800c850 <HAL_RCC_ClockConfig+0x1b8>)
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	f003 030f 	and.w	r3, r3, #15
 800c7c0:	683a      	ldr	r2, [r7, #0]
 800c7c2:	429a      	cmp	r2, r3
 800c7c4:	d20c      	bcs.n	800c7e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c7c6:	4b22      	ldr	r3, [pc, #136]	; (800c850 <HAL_RCC_ClockConfig+0x1b8>)
 800c7c8:	683a      	ldr	r2, [r7, #0]
 800c7ca:	b2d2      	uxtb	r2, r2
 800c7cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c7ce:	4b20      	ldr	r3, [pc, #128]	; (800c850 <HAL_RCC_ClockConfig+0x1b8>)
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	f003 030f 	and.w	r3, r3, #15
 800c7d6:	683a      	ldr	r2, [r7, #0]
 800c7d8:	429a      	cmp	r2, r3
 800c7da:	d001      	beq.n	800c7e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800c7dc:	2301      	movs	r3, #1
 800c7de:	e032      	b.n	800c846 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	f003 0304 	and.w	r3, r3, #4
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d008      	beq.n	800c7fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c7ec:	4b19      	ldr	r3, [pc, #100]	; (800c854 <HAL_RCC_ClockConfig+0x1bc>)
 800c7ee:	689b      	ldr	r3, [r3, #8]
 800c7f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	68db      	ldr	r3, [r3, #12]
 800c7f8:	4916      	ldr	r1, [pc, #88]	; (800c854 <HAL_RCC_ClockConfig+0x1bc>)
 800c7fa:	4313      	orrs	r3, r2
 800c7fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	f003 0308 	and.w	r3, r3, #8
 800c806:	2b00      	cmp	r3, #0
 800c808:	d009      	beq.n	800c81e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c80a:	4b12      	ldr	r3, [pc, #72]	; (800c854 <HAL_RCC_ClockConfig+0x1bc>)
 800c80c:	689b      	ldr	r3, [r3, #8]
 800c80e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	691b      	ldr	r3, [r3, #16]
 800c816:	00db      	lsls	r3, r3, #3
 800c818:	490e      	ldr	r1, [pc, #56]	; (800c854 <HAL_RCC_ClockConfig+0x1bc>)
 800c81a:	4313      	orrs	r3, r2
 800c81c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800c81e:	f000 f821 	bl	800c864 <HAL_RCC_GetSysClockFreq>
 800c822:	4601      	mov	r1, r0
 800c824:	4b0b      	ldr	r3, [pc, #44]	; (800c854 <HAL_RCC_ClockConfig+0x1bc>)
 800c826:	689b      	ldr	r3, [r3, #8]
 800c828:	091b      	lsrs	r3, r3, #4
 800c82a:	f003 030f 	and.w	r3, r3, #15
 800c82e:	4a0a      	ldr	r2, [pc, #40]	; (800c858 <HAL_RCC_ClockConfig+0x1c0>)
 800c830:	5cd3      	ldrb	r3, [r2, r3]
 800c832:	fa21 f303 	lsr.w	r3, r1, r3
 800c836:	4a09      	ldr	r2, [pc, #36]	; (800c85c <HAL_RCC_ClockConfig+0x1c4>)
 800c838:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800c83a:	4b09      	ldr	r3, [pc, #36]	; (800c860 <HAL_RCC_ClockConfig+0x1c8>)
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	4618      	mov	r0, r3
 800c840:	f7fc feb8 	bl	80095b4 <HAL_InitTick>

  return HAL_OK;
 800c844:	2300      	movs	r3, #0
}
 800c846:	4618      	mov	r0, r3
 800c848:	3710      	adds	r7, #16
 800c84a:	46bd      	mov	sp, r7
 800c84c:	bd80      	pop	{r7, pc}
 800c84e:	bf00      	nop
 800c850:	40023c00 	.word	0x40023c00
 800c854:	40023800 	.word	0x40023800
 800c858:	08011a48 	.word	0x08011a48
 800c85c:	20000164 	.word	0x20000164
 800c860:	20000168 	.word	0x20000168

0800c864 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c864:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c866:	b085      	sub	sp, #20
 800c868:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800c86a:	2300      	movs	r3, #0
 800c86c:	607b      	str	r3, [r7, #4]
 800c86e:	2300      	movs	r3, #0
 800c870:	60fb      	str	r3, [r7, #12]
 800c872:	2300      	movs	r3, #0
 800c874:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800c876:	2300      	movs	r3, #0
 800c878:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c87a:	4b63      	ldr	r3, [pc, #396]	; (800ca08 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c87c:	689b      	ldr	r3, [r3, #8]
 800c87e:	f003 030c 	and.w	r3, r3, #12
 800c882:	2b04      	cmp	r3, #4
 800c884:	d007      	beq.n	800c896 <HAL_RCC_GetSysClockFreq+0x32>
 800c886:	2b08      	cmp	r3, #8
 800c888:	d008      	beq.n	800c89c <HAL_RCC_GetSysClockFreq+0x38>
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	f040 80b4 	bne.w	800c9f8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800c890:	4b5e      	ldr	r3, [pc, #376]	; (800ca0c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800c892:	60bb      	str	r3, [r7, #8]
       break;
 800c894:	e0b3      	b.n	800c9fe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800c896:	4b5e      	ldr	r3, [pc, #376]	; (800ca10 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800c898:	60bb      	str	r3, [r7, #8]
      break;
 800c89a:	e0b0      	b.n	800c9fe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c89c:	4b5a      	ldr	r3, [pc, #360]	; (800ca08 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c89e:	685b      	ldr	r3, [r3, #4]
 800c8a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c8a4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800c8a6:	4b58      	ldr	r3, [pc, #352]	; (800ca08 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c8a8:	685b      	ldr	r3, [r3, #4]
 800c8aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d04a      	beq.n	800c948 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c8b2:	4b55      	ldr	r3, [pc, #340]	; (800ca08 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c8b4:	685b      	ldr	r3, [r3, #4]
 800c8b6:	099b      	lsrs	r3, r3, #6
 800c8b8:	f04f 0400 	mov.w	r4, #0
 800c8bc:	f240 11ff 	movw	r1, #511	; 0x1ff
 800c8c0:	f04f 0200 	mov.w	r2, #0
 800c8c4:	ea03 0501 	and.w	r5, r3, r1
 800c8c8:	ea04 0602 	and.w	r6, r4, r2
 800c8cc:	4629      	mov	r1, r5
 800c8ce:	4632      	mov	r2, r6
 800c8d0:	f04f 0300 	mov.w	r3, #0
 800c8d4:	f04f 0400 	mov.w	r4, #0
 800c8d8:	0154      	lsls	r4, r2, #5
 800c8da:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800c8de:	014b      	lsls	r3, r1, #5
 800c8e0:	4619      	mov	r1, r3
 800c8e2:	4622      	mov	r2, r4
 800c8e4:	1b49      	subs	r1, r1, r5
 800c8e6:	eb62 0206 	sbc.w	r2, r2, r6
 800c8ea:	f04f 0300 	mov.w	r3, #0
 800c8ee:	f04f 0400 	mov.w	r4, #0
 800c8f2:	0194      	lsls	r4, r2, #6
 800c8f4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800c8f8:	018b      	lsls	r3, r1, #6
 800c8fa:	1a5b      	subs	r3, r3, r1
 800c8fc:	eb64 0402 	sbc.w	r4, r4, r2
 800c900:	f04f 0100 	mov.w	r1, #0
 800c904:	f04f 0200 	mov.w	r2, #0
 800c908:	00e2      	lsls	r2, r4, #3
 800c90a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800c90e:	00d9      	lsls	r1, r3, #3
 800c910:	460b      	mov	r3, r1
 800c912:	4614      	mov	r4, r2
 800c914:	195b      	adds	r3, r3, r5
 800c916:	eb44 0406 	adc.w	r4, r4, r6
 800c91a:	f04f 0100 	mov.w	r1, #0
 800c91e:	f04f 0200 	mov.w	r2, #0
 800c922:	0262      	lsls	r2, r4, #9
 800c924:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800c928:	0259      	lsls	r1, r3, #9
 800c92a:	460b      	mov	r3, r1
 800c92c:	4614      	mov	r4, r2
 800c92e:	4618      	mov	r0, r3
 800c930:	4621      	mov	r1, r4
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	f04f 0400 	mov.w	r4, #0
 800c938:	461a      	mov	r2, r3
 800c93a:	4623      	mov	r3, r4
 800c93c:	f7f3 fc54 	bl	80001e8 <__aeabi_uldivmod>
 800c940:	4603      	mov	r3, r0
 800c942:	460c      	mov	r4, r1
 800c944:	60fb      	str	r3, [r7, #12]
 800c946:	e049      	b.n	800c9dc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c948:	4b2f      	ldr	r3, [pc, #188]	; (800ca08 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c94a:	685b      	ldr	r3, [r3, #4]
 800c94c:	099b      	lsrs	r3, r3, #6
 800c94e:	f04f 0400 	mov.w	r4, #0
 800c952:	f240 11ff 	movw	r1, #511	; 0x1ff
 800c956:	f04f 0200 	mov.w	r2, #0
 800c95a:	ea03 0501 	and.w	r5, r3, r1
 800c95e:	ea04 0602 	and.w	r6, r4, r2
 800c962:	4629      	mov	r1, r5
 800c964:	4632      	mov	r2, r6
 800c966:	f04f 0300 	mov.w	r3, #0
 800c96a:	f04f 0400 	mov.w	r4, #0
 800c96e:	0154      	lsls	r4, r2, #5
 800c970:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800c974:	014b      	lsls	r3, r1, #5
 800c976:	4619      	mov	r1, r3
 800c978:	4622      	mov	r2, r4
 800c97a:	1b49      	subs	r1, r1, r5
 800c97c:	eb62 0206 	sbc.w	r2, r2, r6
 800c980:	f04f 0300 	mov.w	r3, #0
 800c984:	f04f 0400 	mov.w	r4, #0
 800c988:	0194      	lsls	r4, r2, #6
 800c98a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800c98e:	018b      	lsls	r3, r1, #6
 800c990:	1a5b      	subs	r3, r3, r1
 800c992:	eb64 0402 	sbc.w	r4, r4, r2
 800c996:	f04f 0100 	mov.w	r1, #0
 800c99a:	f04f 0200 	mov.w	r2, #0
 800c99e:	00e2      	lsls	r2, r4, #3
 800c9a0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800c9a4:	00d9      	lsls	r1, r3, #3
 800c9a6:	460b      	mov	r3, r1
 800c9a8:	4614      	mov	r4, r2
 800c9aa:	195b      	adds	r3, r3, r5
 800c9ac:	eb44 0406 	adc.w	r4, r4, r6
 800c9b0:	f04f 0100 	mov.w	r1, #0
 800c9b4:	f04f 0200 	mov.w	r2, #0
 800c9b8:	02a2      	lsls	r2, r4, #10
 800c9ba:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800c9be:	0299      	lsls	r1, r3, #10
 800c9c0:	460b      	mov	r3, r1
 800c9c2:	4614      	mov	r4, r2
 800c9c4:	4618      	mov	r0, r3
 800c9c6:	4621      	mov	r1, r4
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	f04f 0400 	mov.w	r4, #0
 800c9ce:	461a      	mov	r2, r3
 800c9d0:	4623      	mov	r3, r4
 800c9d2:	f7f3 fc09 	bl	80001e8 <__aeabi_uldivmod>
 800c9d6:	4603      	mov	r3, r0
 800c9d8:	460c      	mov	r4, r1
 800c9da:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800c9dc:	4b0a      	ldr	r3, [pc, #40]	; (800ca08 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c9de:	685b      	ldr	r3, [r3, #4]
 800c9e0:	0c1b      	lsrs	r3, r3, #16
 800c9e2:	f003 0303 	and.w	r3, r3, #3
 800c9e6:	3301      	adds	r3, #1
 800c9e8:	005b      	lsls	r3, r3, #1
 800c9ea:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800c9ec:	68fa      	ldr	r2, [r7, #12]
 800c9ee:	683b      	ldr	r3, [r7, #0]
 800c9f0:	fbb2 f3f3 	udiv	r3, r2, r3
 800c9f4:	60bb      	str	r3, [r7, #8]
      break;
 800c9f6:	e002      	b.n	800c9fe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800c9f8:	4b04      	ldr	r3, [pc, #16]	; (800ca0c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800c9fa:	60bb      	str	r3, [r7, #8]
      break;
 800c9fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c9fe:	68bb      	ldr	r3, [r7, #8]
}
 800ca00:	4618      	mov	r0, r3
 800ca02:	3714      	adds	r7, #20
 800ca04:	46bd      	mov	sp, r7
 800ca06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca08:	40023800 	.word	0x40023800
 800ca0c:	00f42400 	.word	0x00f42400
 800ca10:	007a1200 	.word	0x007a1200

0800ca14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ca14:	b480      	push	{r7}
 800ca16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ca18:	4b03      	ldr	r3, [pc, #12]	; (800ca28 <HAL_RCC_GetHCLKFreq+0x14>)
 800ca1a:	681b      	ldr	r3, [r3, #0]
}
 800ca1c:	4618      	mov	r0, r3
 800ca1e:	46bd      	mov	sp, r7
 800ca20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca24:	4770      	bx	lr
 800ca26:	bf00      	nop
 800ca28:	20000164 	.word	0x20000164

0800ca2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ca2c:	b580      	push	{r7, lr}
 800ca2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800ca30:	f7ff fff0 	bl	800ca14 <HAL_RCC_GetHCLKFreq>
 800ca34:	4601      	mov	r1, r0
 800ca36:	4b05      	ldr	r3, [pc, #20]	; (800ca4c <HAL_RCC_GetPCLK1Freq+0x20>)
 800ca38:	689b      	ldr	r3, [r3, #8]
 800ca3a:	0a9b      	lsrs	r3, r3, #10
 800ca3c:	f003 0307 	and.w	r3, r3, #7
 800ca40:	4a03      	ldr	r2, [pc, #12]	; (800ca50 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ca42:	5cd3      	ldrb	r3, [r2, r3]
 800ca44:	fa21 f303 	lsr.w	r3, r1, r3
}
 800ca48:	4618      	mov	r0, r3
 800ca4a:	bd80      	pop	{r7, pc}
 800ca4c:	40023800 	.word	0x40023800
 800ca50:	08011a58 	.word	0x08011a58

0800ca54 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ca54:	b580      	push	{r7, lr}
 800ca56:	b086      	sub	sp, #24
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800ca5c:	2300      	movs	r3, #0
 800ca5e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800ca60:	2300      	movs	r3, #0
 800ca62:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	f003 0301 	and.w	r3, r3, #1
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d105      	bne.n	800ca7c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d038      	beq.n	800caee <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800ca7c:	4b68      	ldr	r3, [pc, #416]	; (800cc20 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800ca7e:	2200      	movs	r2, #0
 800ca80:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800ca82:	f7fc fddb 	bl	800963c <HAL_GetTick>
 800ca86:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800ca88:	e008      	b.n	800ca9c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800ca8a:	f7fc fdd7 	bl	800963c <HAL_GetTick>
 800ca8e:	4602      	mov	r2, r0
 800ca90:	697b      	ldr	r3, [r7, #20]
 800ca92:	1ad3      	subs	r3, r2, r3
 800ca94:	2b02      	cmp	r3, #2
 800ca96:	d901      	bls.n	800ca9c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ca98:	2303      	movs	r3, #3
 800ca9a:	e0bd      	b.n	800cc18 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800ca9c:	4b61      	ldr	r3, [pc, #388]	; (800cc24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d1f0      	bne.n	800ca8a <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	685a      	ldr	r2, [r3, #4]
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	689b      	ldr	r3, [r3, #8]
 800cab0:	019b      	lsls	r3, r3, #6
 800cab2:	431a      	orrs	r2, r3
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	68db      	ldr	r3, [r3, #12]
 800cab8:	071b      	lsls	r3, r3, #28
 800caba:	495a      	ldr	r1, [pc, #360]	; (800cc24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cabc:	4313      	orrs	r3, r2
 800cabe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800cac2:	4b57      	ldr	r3, [pc, #348]	; (800cc20 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800cac4:	2201      	movs	r2, #1
 800cac6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800cac8:	f7fc fdb8 	bl	800963c <HAL_GetTick>
 800cacc:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800cace:	e008      	b.n	800cae2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800cad0:	f7fc fdb4 	bl	800963c <HAL_GetTick>
 800cad4:	4602      	mov	r2, r0
 800cad6:	697b      	ldr	r3, [r7, #20]
 800cad8:	1ad3      	subs	r3, r2, r3
 800cada:	2b02      	cmp	r3, #2
 800cadc:	d901      	bls.n	800cae2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800cade:	2303      	movs	r3, #3
 800cae0:	e09a      	b.n	800cc18 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800cae2:	4b50      	ldr	r3, [pc, #320]	; (800cc24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800caea:	2b00      	cmp	r3, #0
 800caec:	d0f0      	beq.n	800cad0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	f003 0302 	and.w	r3, r3, #2
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	f000 8083 	beq.w	800cc02 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800cafc:	2300      	movs	r3, #0
 800cafe:	60fb      	str	r3, [r7, #12]
 800cb00:	4b48      	ldr	r3, [pc, #288]	; (800cc24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cb02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb04:	4a47      	ldr	r2, [pc, #284]	; (800cc24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cb06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cb0a:	6413      	str	r3, [r2, #64]	; 0x40
 800cb0c:	4b45      	ldr	r3, [pc, #276]	; (800cc24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cb0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cb14:	60fb      	str	r3, [r7, #12]
 800cb16:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800cb18:	4b43      	ldr	r3, [pc, #268]	; (800cc28 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	4a42      	ldr	r2, [pc, #264]	; (800cc28 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800cb1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cb22:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800cb24:	f7fc fd8a 	bl	800963c <HAL_GetTick>
 800cb28:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800cb2a:	e008      	b.n	800cb3e <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800cb2c:	f7fc fd86 	bl	800963c <HAL_GetTick>
 800cb30:	4602      	mov	r2, r0
 800cb32:	697b      	ldr	r3, [r7, #20]
 800cb34:	1ad3      	subs	r3, r2, r3
 800cb36:	2b02      	cmp	r3, #2
 800cb38:	d901      	bls.n	800cb3e <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 800cb3a:	2303      	movs	r3, #3
 800cb3c:	e06c      	b.n	800cc18 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800cb3e:	4b3a      	ldr	r3, [pc, #232]	; (800cc28 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d0f0      	beq.n	800cb2c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800cb4a:	4b36      	ldr	r3, [pc, #216]	; (800cc24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cb4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cb52:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800cb54:	693b      	ldr	r3, [r7, #16]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d02f      	beq.n	800cbba <HAL_RCCEx_PeriphCLKConfig+0x166>
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	691b      	ldr	r3, [r3, #16]
 800cb5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cb62:	693a      	ldr	r2, [r7, #16]
 800cb64:	429a      	cmp	r2, r3
 800cb66:	d028      	beq.n	800cbba <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800cb68:	4b2e      	ldr	r3, [pc, #184]	; (800cc24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cb6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cb70:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800cb72:	4b2e      	ldr	r3, [pc, #184]	; (800cc2c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800cb74:	2201      	movs	r2, #1
 800cb76:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800cb78:	4b2c      	ldr	r3, [pc, #176]	; (800cc2c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800cb7a:	2200      	movs	r2, #0
 800cb7c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800cb7e:	4a29      	ldr	r2, [pc, #164]	; (800cc24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cb80:	693b      	ldr	r3, [r7, #16]
 800cb82:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800cb84:	4b27      	ldr	r3, [pc, #156]	; (800cc24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cb86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb88:	f003 0301 	and.w	r3, r3, #1
 800cb8c:	2b01      	cmp	r3, #1
 800cb8e:	d114      	bne.n	800cbba <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800cb90:	f7fc fd54 	bl	800963c <HAL_GetTick>
 800cb94:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cb96:	e00a      	b.n	800cbae <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800cb98:	f7fc fd50 	bl	800963c <HAL_GetTick>
 800cb9c:	4602      	mov	r2, r0
 800cb9e:	697b      	ldr	r3, [r7, #20]
 800cba0:	1ad3      	subs	r3, r2, r3
 800cba2:	f241 3288 	movw	r2, #5000	; 0x1388
 800cba6:	4293      	cmp	r3, r2
 800cba8:	d901      	bls.n	800cbae <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800cbaa:	2303      	movs	r3, #3
 800cbac:	e034      	b.n	800cc18 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cbae:	4b1d      	ldr	r3, [pc, #116]	; (800cc24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cbb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cbb2:	f003 0302 	and.w	r3, r3, #2
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d0ee      	beq.n	800cb98 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	691b      	ldr	r3, [r3, #16]
 800cbbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cbc2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cbc6:	d10d      	bne.n	800cbe4 <HAL_RCCEx_PeriphCLKConfig+0x190>
 800cbc8:	4b16      	ldr	r3, [pc, #88]	; (800cc24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cbca:	689b      	ldr	r3, [r3, #8]
 800cbcc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	691b      	ldr	r3, [r3, #16]
 800cbd4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800cbd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cbdc:	4911      	ldr	r1, [pc, #68]	; (800cc24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cbde:	4313      	orrs	r3, r2
 800cbe0:	608b      	str	r3, [r1, #8]
 800cbe2:	e005      	b.n	800cbf0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 800cbe4:	4b0f      	ldr	r3, [pc, #60]	; (800cc24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cbe6:	689b      	ldr	r3, [r3, #8]
 800cbe8:	4a0e      	ldr	r2, [pc, #56]	; (800cc24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cbea:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800cbee:	6093      	str	r3, [r2, #8]
 800cbf0:	4b0c      	ldr	r3, [pc, #48]	; (800cc24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cbf2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	691b      	ldr	r3, [r3, #16]
 800cbf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cbfc:	4909      	ldr	r1, [pc, #36]	; (800cc24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cbfe:	4313      	orrs	r3, r2
 800cc00:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	f003 0308 	and.w	r3, r3, #8
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d003      	beq.n	800cc16 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	7d1a      	ldrb	r2, [r3, #20]
 800cc12:	4b07      	ldr	r3, [pc, #28]	; (800cc30 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800cc14:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800cc16:	2300      	movs	r3, #0
}
 800cc18:	4618      	mov	r0, r3
 800cc1a:	3718      	adds	r7, #24
 800cc1c:	46bd      	mov	sp, r7
 800cc1e:	bd80      	pop	{r7, pc}
 800cc20:	42470068 	.word	0x42470068
 800cc24:	40023800 	.word	0x40023800
 800cc28:	40007000 	.word	0x40007000
 800cc2c:	42470e40 	.word	0x42470e40
 800cc30:	424711e0 	.word	0x424711e0

0800cc34 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800cc34:	b480      	push	{r7}
 800cc36:	b087      	sub	sp, #28
 800cc38:	af00      	add	r7, sp, #0
 800cc3a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800cc3c:	2300      	movs	r3, #0
 800cc3e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800cc40:	2300      	movs	r3, #0
 800cc42:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800cc44:	2300      	movs	r3, #0
 800cc46:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800cc48:	2300      	movs	r3, #0
 800cc4a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	2b01      	cmp	r3, #1
 800cc50:	d13f      	bne.n	800ccd2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800cc52:	4b23      	ldr	r3, [pc, #140]	; (800cce0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800cc54:	689b      	ldr	r3, [r3, #8]
 800cc56:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cc5a:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d004      	beq.n	800cc6c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800cc62:	2b01      	cmp	r3, #1
 800cc64:	d131      	bne.n	800ccca <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800cc66:	4b1f      	ldr	r3, [pc, #124]	; (800cce4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800cc68:	617b      	str	r3, [r7, #20]
          break;
 800cc6a:	e031      	b.n	800ccd0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800cc6c:	4b1c      	ldr	r3, [pc, #112]	; (800cce0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800cc6e:	685b      	ldr	r3, [r3, #4]
 800cc70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cc74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cc78:	d109      	bne.n	800cc8e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800cc7a:	4b19      	ldr	r3, [pc, #100]	; (800cce0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800cc7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cc80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cc84:	4a18      	ldr	r2, [pc, #96]	; (800cce8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800cc86:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc8a:	613b      	str	r3, [r7, #16]
 800cc8c:	e008      	b.n	800cca0 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800cc8e:	4b14      	ldr	r3, [pc, #80]	; (800cce0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800cc90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cc94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cc98:	4a14      	ldr	r2, [pc, #80]	; (800ccec <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800cc9a:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc9e:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800cca0:	4b0f      	ldr	r3, [pc, #60]	; (800cce0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800cca2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cca6:	099b      	lsrs	r3, r3, #6
 800cca8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ccac:	693b      	ldr	r3, [r7, #16]
 800ccae:	fb02 f303 	mul.w	r3, r2, r3
 800ccb2:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800ccb4:	4b0a      	ldr	r3, [pc, #40]	; (800cce0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800ccb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ccba:	0f1b      	lsrs	r3, r3, #28
 800ccbc:	f003 0307 	and.w	r3, r3, #7
 800ccc0:	68ba      	ldr	r2, [r7, #8]
 800ccc2:	fbb2 f3f3 	udiv	r3, r2, r3
 800ccc6:	617b      	str	r3, [r7, #20]
          break;
 800ccc8:	e002      	b.n	800ccd0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800ccca:	2300      	movs	r3, #0
 800cccc:	617b      	str	r3, [r7, #20]
          break;
 800ccce:	bf00      	nop
        }
      }
      break;
 800ccd0:	bf00      	nop
    }
  }
  return frequency;
 800ccd2:	697b      	ldr	r3, [r7, #20]
}
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	371c      	adds	r7, #28
 800ccd8:	46bd      	mov	sp, r7
 800ccda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccde:	4770      	bx	lr
 800cce0:	40023800 	.word	0x40023800
 800cce4:	00bb8000 	.word	0x00bb8000
 800cce8:	007a1200 	.word	0x007a1200
 800ccec:	00f42400 	.word	0x00f42400

0800ccf0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ccf0:	b580      	push	{r7, lr}
 800ccf2:	b082      	sub	sp, #8
 800ccf4:	af00      	add	r7, sp, #0
 800ccf6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d101      	bne.n	800cd02 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ccfe:	2301      	movs	r3, #1
 800cd00:	e056      	b.n	800cdb0 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	2200      	movs	r2, #0
 800cd06:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800cd0e:	b2db      	uxtb	r3, r3
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d106      	bne.n	800cd22 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	2200      	movs	r2, #0
 800cd18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800cd1c:	6878      	ldr	r0, [r7, #4]
 800cd1e:	f7fc fadf 	bl	80092e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	2202      	movs	r2, #2
 800cd26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	681a      	ldr	r2, [r3, #0]
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cd38:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	685a      	ldr	r2, [r3, #4]
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	689b      	ldr	r3, [r3, #8]
 800cd42:	431a      	orrs	r2, r3
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	68db      	ldr	r3, [r3, #12]
 800cd48:	431a      	orrs	r2, r3
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	691b      	ldr	r3, [r3, #16]
 800cd4e:	431a      	orrs	r2, r3
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	695b      	ldr	r3, [r3, #20]
 800cd54:	431a      	orrs	r2, r3
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	699b      	ldr	r3, [r3, #24]
 800cd5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cd5e:	431a      	orrs	r2, r3
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	69db      	ldr	r3, [r3, #28]
 800cd64:	431a      	orrs	r2, r3
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	6a1b      	ldr	r3, [r3, #32]
 800cd6a:	ea42 0103 	orr.w	r1, r2, r3
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	430a      	orrs	r2, r1
 800cd78:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	699b      	ldr	r3, [r3, #24]
 800cd7e:	0c1b      	lsrs	r3, r3, #16
 800cd80:	f003 0104 	and.w	r1, r3, #4
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	430a      	orrs	r2, r1
 800cd8e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	69da      	ldr	r2, [r3, #28]
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800cd9e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	2200      	movs	r2, #0
 800cda4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	2201      	movs	r2, #1
 800cdaa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800cdae:	2300      	movs	r3, #0
}
 800cdb0:	4618      	mov	r0, r3
 800cdb2:	3708      	adds	r7, #8
 800cdb4:	46bd      	mov	sp, r7
 800cdb6:	bd80      	pop	{r7, pc}

0800cdb8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cdb8:	b580      	push	{r7, lr}
 800cdba:	b088      	sub	sp, #32
 800cdbc:	af00      	add	r7, sp, #0
 800cdbe:	60f8      	str	r0, [r7, #12]
 800cdc0:	60b9      	str	r1, [r7, #8]
 800cdc2:	603b      	str	r3, [r7, #0]
 800cdc4:	4613      	mov	r3, r2
 800cdc6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800cdc8:	2300      	movs	r3, #0
 800cdca:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800cdd2:	2b01      	cmp	r3, #1
 800cdd4:	d101      	bne.n	800cdda <HAL_SPI_Transmit+0x22>
 800cdd6:	2302      	movs	r3, #2
 800cdd8:	e11e      	b.n	800d018 <HAL_SPI_Transmit+0x260>
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	2201      	movs	r2, #1
 800cdde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800cde2:	f7fc fc2b 	bl	800963c <HAL_GetTick>
 800cde6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800cde8:	88fb      	ldrh	r3, [r7, #6]
 800cdea:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800cdf2:	b2db      	uxtb	r3, r3
 800cdf4:	2b01      	cmp	r3, #1
 800cdf6:	d002      	beq.n	800cdfe <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800cdf8:	2302      	movs	r3, #2
 800cdfa:	77fb      	strb	r3, [r7, #31]
    goto error;
 800cdfc:	e103      	b.n	800d006 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800cdfe:	68bb      	ldr	r3, [r7, #8]
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d002      	beq.n	800ce0a <HAL_SPI_Transmit+0x52>
 800ce04:	88fb      	ldrh	r3, [r7, #6]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d102      	bne.n	800ce10 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800ce0a:	2301      	movs	r3, #1
 800ce0c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800ce0e:	e0fa      	b.n	800d006 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	2203      	movs	r2, #3
 800ce14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	2200      	movs	r2, #0
 800ce1c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	68ba      	ldr	r2, [r7, #8]
 800ce22:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	88fa      	ldrh	r2, [r7, #6]
 800ce28:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	88fa      	ldrh	r2, [r7, #6]
 800ce2e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	2200      	movs	r2, #0
 800ce34:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	2200      	movs	r2, #0
 800ce3a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	2200      	movs	r2, #0
 800ce40:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	2200      	movs	r2, #0
 800ce46:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	2200      	movs	r2, #0
 800ce4c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	689b      	ldr	r3, [r3, #8]
 800ce52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ce56:	d107      	bne.n	800ce68 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	681a      	ldr	r2, [r3, #0]
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ce66:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce72:	2b40      	cmp	r3, #64	; 0x40
 800ce74:	d007      	beq.n	800ce86 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	681a      	ldr	r2, [r3, #0]
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ce84:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	68db      	ldr	r3, [r3, #12]
 800ce8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ce8e:	d14b      	bne.n	800cf28 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	685b      	ldr	r3, [r3, #4]
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d002      	beq.n	800ce9e <HAL_SPI_Transmit+0xe6>
 800ce98:	8afb      	ldrh	r3, [r7, #22]
 800ce9a:	2b01      	cmp	r3, #1
 800ce9c:	d13e      	bne.n	800cf1c <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cea2:	881a      	ldrh	r2, [r3, #0]
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ceae:	1c9a      	adds	r2, r3, #2
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ceb8:	b29b      	uxth	r3, r3
 800ceba:	3b01      	subs	r3, #1
 800cebc:	b29a      	uxth	r2, r3
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800cec2:	e02b      	b.n	800cf1c <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	689b      	ldr	r3, [r3, #8]
 800ceca:	f003 0302 	and.w	r3, r3, #2
 800cece:	2b02      	cmp	r3, #2
 800ced0:	d112      	bne.n	800cef8 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ced6:	881a      	ldrh	r2, [r3, #0]
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cee2:	1c9a      	adds	r2, r3, #2
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ceec:	b29b      	uxth	r3, r3
 800ceee:	3b01      	subs	r3, #1
 800cef0:	b29a      	uxth	r2, r3
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	86da      	strh	r2, [r3, #54]	; 0x36
 800cef6:	e011      	b.n	800cf1c <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cef8:	f7fc fba0 	bl	800963c <HAL_GetTick>
 800cefc:	4602      	mov	r2, r0
 800cefe:	69bb      	ldr	r3, [r7, #24]
 800cf00:	1ad3      	subs	r3, r2, r3
 800cf02:	683a      	ldr	r2, [r7, #0]
 800cf04:	429a      	cmp	r2, r3
 800cf06:	d803      	bhi.n	800cf10 <HAL_SPI_Transmit+0x158>
 800cf08:	683b      	ldr	r3, [r7, #0]
 800cf0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cf0e:	d102      	bne.n	800cf16 <HAL_SPI_Transmit+0x15e>
 800cf10:	683b      	ldr	r3, [r7, #0]
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d102      	bne.n	800cf1c <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800cf16:	2303      	movs	r3, #3
 800cf18:	77fb      	strb	r3, [r7, #31]
          goto error;
 800cf1a:	e074      	b.n	800d006 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cf20:	b29b      	uxth	r3, r3
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d1ce      	bne.n	800cec4 <HAL_SPI_Transmit+0x10c>
 800cf26:	e04c      	b.n	800cfc2 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	685b      	ldr	r3, [r3, #4]
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d002      	beq.n	800cf36 <HAL_SPI_Transmit+0x17e>
 800cf30:	8afb      	ldrh	r3, [r7, #22]
 800cf32:	2b01      	cmp	r3, #1
 800cf34:	d140      	bne.n	800cfb8 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	330c      	adds	r3, #12
 800cf40:	7812      	ldrb	r2, [r2, #0]
 800cf42:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf48:	1c5a      	adds	r2, r3, #1
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cf52:	b29b      	uxth	r3, r3
 800cf54:	3b01      	subs	r3, #1
 800cf56:	b29a      	uxth	r2, r3
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800cf5c:	e02c      	b.n	800cfb8 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	689b      	ldr	r3, [r3, #8]
 800cf64:	f003 0302 	and.w	r3, r3, #2
 800cf68:	2b02      	cmp	r3, #2
 800cf6a:	d113      	bne.n	800cf94 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	330c      	adds	r3, #12
 800cf76:	7812      	ldrb	r2, [r2, #0]
 800cf78:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf7e:	1c5a      	adds	r2, r3, #1
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cf88:	b29b      	uxth	r3, r3
 800cf8a:	3b01      	subs	r3, #1
 800cf8c:	b29a      	uxth	r2, r3
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	86da      	strh	r2, [r3, #54]	; 0x36
 800cf92:	e011      	b.n	800cfb8 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cf94:	f7fc fb52 	bl	800963c <HAL_GetTick>
 800cf98:	4602      	mov	r2, r0
 800cf9a:	69bb      	ldr	r3, [r7, #24]
 800cf9c:	1ad3      	subs	r3, r2, r3
 800cf9e:	683a      	ldr	r2, [r7, #0]
 800cfa0:	429a      	cmp	r2, r3
 800cfa2:	d803      	bhi.n	800cfac <HAL_SPI_Transmit+0x1f4>
 800cfa4:	683b      	ldr	r3, [r7, #0]
 800cfa6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cfaa:	d102      	bne.n	800cfb2 <HAL_SPI_Transmit+0x1fa>
 800cfac:	683b      	ldr	r3, [r7, #0]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d102      	bne.n	800cfb8 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800cfb2:	2303      	movs	r3, #3
 800cfb4:	77fb      	strb	r3, [r7, #31]
          goto error;
 800cfb6:	e026      	b.n	800d006 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cfbc:	b29b      	uxth	r3, r3
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d1cd      	bne.n	800cf5e <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800cfc2:	69ba      	ldr	r2, [r7, #24]
 800cfc4:	6839      	ldr	r1, [r7, #0]
 800cfc6:	68f8      	ldr	r0, [r7, #12]
 800cfc8:	f000 f894 	bl	800d0f4 <SPI_EndRxTxTransaction>
 800cfcc:	4603      	mov	r3, r0
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d002      	beq.n	800cfd8 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	2220      	movs	r2, #32
 800cfd6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	689b      	ldr	r3, [r3, #8]
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d10a      	bne.n	800cff6 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800cfe0:	2300      	movs	r3, #0
 800cfe2:	613b      	str	r3, [r7, #16]
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	68db      	ldr	r3, [r3, #12]
 800cfea:	613b      	str	r3, [r7, #16]
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	689b      	ldr	r3, [r3, #8]
 800cff2:	613b      	str	r3, [r7, #16]
 800cff4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d002      	beq.n	800d004 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800cffe:	2301      	movs	r3, #1
 800d000:	77fb      	strb	r3, [r7, #31]
 800d002:	e000      	b.n	800d006 <HAL_SPI_Transmit+0x24e>
  }

error:
 800d004:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	2201      	movs	r2, #1
 800d00a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	2200      	movs	r2, #0
 800d012:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800d016:	7ffb      	ldrb	r3, [r7, #31]
}
 800d018:	4618      	mov	r0, r3
 800d01a:	3720      	adds	r7, #32
 800d01c:	46bd      	mov	sp, r7
 800d01e:	bd80      	pop	{r7, pc}

0800d020 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800d020:	b580      	push	{r7, lr}
 800d022:	b084      	sub	sp, #16
 800d024:	af00      	add	r7, sp, #0
 800d026:	60f8      	str	r0, [r7, #12]
 800d028:	60b9      	str	r1, [r7, #8]
 800d02a:	603b      	str	r3, [r7, #0]
 800d02c:	4613      	mov	r3, r2
 800d02e:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d030:	e04c      	b.n	800d0cc <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800d032:	683b      	ldr	r3, [r7, #0]
 800d034:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d038:	d048      	beq.n	800d0cc <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800d03a:	f7fc faff 	bl	800963c <HAL_GetTick>
 800d03e:	4602      	mov	r2, r0
 800d040:	69bb      	ldr	r3, [r7, #24]
 800d042:	1ad3      	subs	r3, r2, r3
 800d044:	683a      	ldr	r2, [r7, #0]
 800d046:	429a      	cmp	r2, r3
 800d048:	d902      	bls.n	800d050 <SPI_WaitFlagStateUntilTimeout+0x30>
 800d04a:	683b      	ldr	r3, [r7, #0]
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d13d      	bne.n	800d0cc <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	685a      	ldr	r2, [r3, #4]
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800d05e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	685b      	ldr	r3, [r3, #4]
 800d064:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d068:	d111      	bne.n	800d08e <SPI_WaitFlagStateUntilTimeout+0x6e>
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	689b      	ldr	r3, [r3, #8]
 800d06e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d072:	d004      	beq.n	800d07e <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	689b      	ldr	r3, [r3, #8]
 800d078:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d07c:	d107      	bne.n	800d08e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	681a      	ldr	r2, [r3, #0]
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d08c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d092:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d096:	d10f      	bne.n	800d0b8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	681a      	ldr	r2, [r3, #0]
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d0a6:	601a      	str	r2, [r3, #0]
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	681a      	ldr	r2, [r3, #0]
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d0b6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	2201      	movs	r2, #1
 800d0bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	2200      	movs	r2, #0
 800d0c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800d0c8:	2303      	movs	r3, #3
 800d0ca:	e00f      	b.n	800d0ec <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	689a      	ldr	r2, [r3, #8]
 800d0d2:	68bb      	ldr	r3, [r7, #8]
 800d0d4:	4013      	ands	r3, r2
 800d0d6:	68ba      	ldr	r2, [r7, #8]
 800d0d8:	429a      	cmp	r2, r3
 800d0da:	bf0c      	ite	eq
 800d0dc:	2301      	moveq	r3, #1
 800d0de:	2300      	movne	r3, #0
 800d0e0:	b2db      	uxtb	r3, r3
 800d0e2:	461a      	mov	r2, r3
 800d0e4:	79fb      	ldrb	r3, [r7, #7]
 800d0e6:	429a      	cmp	r2, r3
 800d0e8:	d1a3      	bne.n	800d032 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800d0ea:	2300      	movs	r3, #0
}
 800d0ec:	4618      	mov	r0, r3
 800d0ee:	3710      	adds	r7, #16
 800d0f0:	46bd      	mov	sp, r7
 800d0f2:	bd80      	pop	{r7, pc}

0800d0f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800d0f4:	b580      	push	{r7, lr}
 800d0f6:	b088      	sub	sp, #32
 800d0f8:	af02      	add	r7, sp, #8
 800d0fa:	60f8      	str	r0, [r7, #12]
 800d0fc:	60b9      	str	r1, [r7, #8]
 800d0fe:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800d100:	4b1b      	ldr	r3, [pc, #108]	; (800d170 <SPI_EndRxTxTransaction+0x7c>)
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	4a1b      	ldr	r2, [pc, #108]	; (800d174 <SPI_EndRxTxTransaction+0x80>)
 800d106:	fba2 2303 	umull	r2, r3, r2, r3
 800d10a:	0d5b      	lsrs	r3, r3, #21
 800d10c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d110:	fb02 f303 	mul.w	r3, r2, r3
 800d114:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	685b      	ldr	r3, [r3, #4]
 800d11a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d11e:	d112      	bne.n	800d146 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	9300      	str	r3, [sp, #0]
 800d124:	68bb      	ldr	r3, [r7, #8]
 800d126:	2200      	movs	r2, #0
 800d128:	2180      	movs	r1, #128	; 0x80
 800d12a:	68f8      	ldr	r0, [r7, #12]
 800d12c:	f7ff ff78 	bl	800d020 <SPI_WaitFlagStateUntilTimeout>
 800d130:	4603      	mov	r3, r0
 800d132:	2b00      	cmp	r3, #0
 800d134:	d016      	beq.n	800d164 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d13a:	f043 0220 	orr.w	r2, r3, #32
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800d142:	2303      	movs	r3, #3
 800d144:	e00f      	b.n	800d166 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800d146:	697b      	ldr	r3, [r7, #20]
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d00a      	beq.n	800d162 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800d14c:	697b      	ldr	r3, [r7, #20]
 800d14e:	3b01      	subs	r3, #1
 800d150:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	689b      	ldr	r3, [r3, #8]
 800d158:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d15c:	2b80      	cmp	r3, #128	; 0x80
 800d15e:	d0f2      	beq.n	800d146 <SPI_EndRxTxTransaction+0x52>
 800d160:	e000      	b.n	800d164 <SPI_EndRxTxTransaction+0x70>
        break;
 800d162:	bf00      	nop
  }

  return HAL_OK;
 800d164:	2300      	movs	r3, #0
}
 800d166:	4618      	mov	r0, r3
 800d168:	3718      	adds	r7, #24
 800d16a:	46bd      	mov	sp, r7
 800d16c:	bd80      	pop	{r7, pc}
 800d16e:	bf00      	nop
 800d170:	20000164 	.word	0x20000164
 800d174:	165e9f81 	.word	0x165e9f81

0800d178 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d178:	b084      	sub	sp, #16
 800d17a:	b580      	push	{r7, lr}
 800d17c:	b084      	sub	sp, #16
 800d17e:	af00      	add	r7, sp, #0
 800d180:	6078      	str	r0, [r7, #4]
 800d182:	f107 001c 	add.w	r0, r7, #28
 800d186:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d18a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d18c:	2b01      	cmp	r3, #1
 800d18e:	d122      	bne.n	800d1d6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d194:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	68db      	ldr	r3, [r3, #12]
 800d1a0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800d1a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d1a8:	687a      	ldr	r2, [r7, #4]
 800d1aa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	68db      	ldr	r3, [r3, #12]
 800d1b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800d1b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d1ba:	2b01      	cmp	r3, #1
 800d1bc:	d105      	bne.n	800d1ca <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	68db      	ldr	r3, [r3, #12]
 800d1c2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800d1ca:	6878      	ldr	r0, [r7, #4]
 800d1cc:	f000 f94a 	bl	800d464 <USB_CoreReset>
 800d1d0:	4603      	mov	r3, r0
 800d1d2:	73fb      	strb	r3, [r7, #15]
 800d1d4:	e01a      	b.n	800d20c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	68db      	ldr	r3, [r3, #12]
 800d1da:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d1e2:	6878      	ldr	r0, [r7, #4]
 800d1e4:	f000 f93e 	bl	800d464 <USB_CoreReset>
 800d1e8:	4603      	mov	r3, r0
 800d1ea:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800d1ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d106      	bne.n	800d200 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1f6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	639a      	str	r2, [r3, #56]	; 0x38
 800d1fe:	e005      	b.n	800d20c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d204:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800d20c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d20e:	2b01      	cmp	r3, #1
 800d210:	d10b      	bne.n	800d22a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	689b      	ldr	r3, [r3, #8]
 800d216:	f043 0206 	orr.w	r2, r3, #6
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	689b      	ldr	r3, [r3, #8]
 800d222:	f043 0220 	orr.w	r2, r3, #32
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800d22a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d22c:	4618      	mov	r0, r3
 800d22e:	3710      	adds	r7, #16
 800d230:	46bd      	mov	sp, r7
 800d232:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d236:	b004      	add	sp, #16
 800d238:	4770      	bx	lr

0800d23a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d23a:	b480      	push	{r7}
 800d23c:	b083      	sub	sp, #12
 800d23e:	af00      	add	r7, sp, #0
 800d240:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	689b      	ldr	r3, [r3, #8]
 800d246:	f043 0201 	orr.w	r2, r3, #1
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d24e:	2300      	movs	r3, #0
}
 800d250:	4618      	mov	r0, r3
 800d252:	370c      	adds	r7, #12
 800d254:	46bd      	mov	sp, r7
 800d256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d25a:	4770      	bx	lr

0800d25c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d25c:	b480      	push	{r7}
 800d25e:	b083      	sub	sp, #12
 800d260:	af00      	add	r7, sp, #0
 800d262:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	689b      	ldr	r3, [r3, #8]
 800d268:	f023 0201 	bic.w	r2, r3, #1
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d270:	2300      	movs	r3, #0
}
 800d272:	4618      	mov	r0, r3
 800d274:	370c      	adds	r7, #12
 800d276:	46bd      	mov	sp, r7
 800d278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d27c:	4770      	bx	lr

0800d27e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800d27e:	b580      	push	{r7, lr}
 800d280:	b082      	sub	sp, #8
 800d282:	af00      	add	r7, sp, #0
 800d284:	6078      	str	r0, [r7, #4]
 800d286:	460b      	mov	r3, r1
 800d288:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	68db      	ldr	r3, [r3, #12]
 800d28e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d296:	78fb      	ldrb	r3, [r7, #3]
 800d298:	2b01      	cmp	r3, #1
 800d29a:	d106      	bne.n	800d2aa <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	68db      	ldr	r3, [r3, #12]
 800d2a0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	60da      	str	r2, [r3, #12]
 800d2a8:	e00b      	b.n	800d2c2 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800d2aa:	78fb      	ldrb	r3, [r7, #3]
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d106      	bne.n	800d2be <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	68db      	ldr	r3, [r3, #12]
 800d2b4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	60da      	str	r2, [r3, #12]
 800d2bc:	e001      	b.n	800d2c2 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800d2be:	2301      	movs	r3, #1
 800d2c0:	e003      	b.n	800d2ca <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800d2c2:	2032      	movs	r0, #50	; 0x32
 800d2c4:	f7fc f9c6 	bl	8009654 <HAL_Delay>

  return HAL_OK;
 800d2c8:	2300      	movs	r3, #0
}
 800d2ca:	4618      	mov	r0, r3
 800d2cc:	3708      	adds	r7, #8
 800d2ce:	46bd      	mov	sp, r7
 800d2d0:	bd80      	pop	{r7, pc}
	...

0800d2d4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d2d4:	b480      	push	{r7}
 800d2d6:	b085      	sub	sp, #20
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	6078      	str	r0, [r7, #4]
 800d2dc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800d2de:	2300      	movs	r3, #0
 800d2e0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d2e2:	683b      	ldr	r3, [r7, #0]
 800d2e4:	019b      	lsls	r3, r3, #6
 800d2e6:	f043 0220 	orr.w	r2, r3, #32
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	3301      	adds	r3, #1
 800d2f2:	60fb      	str	r3, [r7, #12]
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	4a09      	ldr	r2, [pc, #36]	; (800d31c <USB_FlushTxFifo+0x48>)
 800d2f8:	4293      	cmp	r3, r2
 800d2fa:	d901      	bls.n	800d300 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800d2fc:	2303      	movs	r3, #3
 800d2fe:	e006      	b.n	800d30e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	691b      	ldr	r3, [r3, #16]
 800d304:	f003 0320 	and.w	r3, r3, #32
 800d308:	2b20      	cmp	r3, #32
 800d30a:	d0f0      	beq.n	800d2ee <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800d30c:	2300      	movs	r3, #0
}
 800d30e:	4618      	mov	r0, r3
 800d310:	3714      	adds	r7, #20
 800d312:	46bd      	mov	sp, r7
 800d314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d318:	4770      	bx	lr
 800d31a:	bf00      	nop
 800d31c:	00030d40 	.word	0x00030d40

0800d320 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d320:	b480      	push	{r7}
 800d322:	b085      	sub	sp, #20
 800d324:	af00      	add	r7, sp, #0
 800d326:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800d328:	2300      	movs	r3, #0
 800d32a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	2210      	movs	r2, #16
 800d330:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	3301      	adds	r3, #1
 800d336:	60fb      	str	r3, [r7, #12]
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	4a09      	ldr	r2, [pc, #36]	; (800d360 <USB_FlushRxFifo+0x40>)
 800d33c:	4293      	cmp	r3, r2
 800d33e:	d901      	bls.n	800d344 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800d340:	2303      	movs	r3, #3
 800d342:	e006      	b.n	800d352 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	691b      	ldr	r3, [r3, #16]
 800d348:	f003 0310 	and.w	r3, r3, #16
 800d34c:	2b10      	cmp	r3, #16
 800d34e:	d0f0      	beq.n	800d332 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800d350:	2300      	movs	r3, #0
}
 800d352:	4618      	mov	r0, r3
 800d354:	3714      	adds	r7, #20
 800d356:	46bd      	mov	sp, r7
 800d358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d35c:	4770      	bx	lr
 800d35e:	bf00      	nop
 800d360:	00030d40 	.word	0x00030d40

0800d364 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800d364:	b480      	push	{r7}
 800d366:	b089      	sub	sp, #36	; 0x24
 800d368:	af00      	add	r7, sp, #0
 800d36a:	60f8      	str	r0, [r7, #12]
 800d36c:	60b9      	str	r1, [r7, #8]
 800d36e:	4611      	mov	r1, r2
 800d370:	461a      	mov	r2, r3
 800d372:	460b      	mov	r3, r1
 800d374:	71fb      	strb	r3, [r7, #7]
 800d376:	4613      	mov	r3, r2
 800d378:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800d37e:	68bb      	ldr	r3, [r7, #8]
 800d380:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800d382:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d386:	2b00      	cmp	r3, #0
 800d388:	d11a      	bne.n	800d3c0 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800d38a:	88bb      	ldrh	r3, [r7, #4]
 800d38c:	3303      	adds	r3, #3
 800d38e:	089b      	lsrs	r3, r3, #2
 800d390:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800d392:	2300      	movs	r3, #0
 800d394:	61bb      	str	r3, [r7, #24]
 800d396:	e00f      	b.n	800d3b8 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800d398:	79fb      	ldrb	r3, [r7, #7]
 800d39a:	031a      	lsls	r2, r3, #12
 800d39c:	697b      	ldr	r3, [r7, #20]
 800d39e:	4413      	add	r3, r2
 800d3a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d3a4:	461a      	mov	r2, r3
 800d3a6:	69fb      	ldr	r3, [r7, #28]
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	6013      	str	r3, [r2, #0]
      pSrc++;
 800d3ac:	69fb      	ldr	r3, [r7, #28]
 800d3ae:	3304      	adds	r3, #4
 800d3b0:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800d3b2:	69bb      	ldr	r3, [r7, #24]
 800d3b4:	3301      	adds	r3, #1
 800d3b6:	61bb      	str	r3, [r7, #24]
 800d3b8:	69ba      	ldr	r2, [r7, #24]
 800d3ba:	693b      	ldr	r3, [r7, #16]
 800d3bc:	429a      	cmp	r2, r3
 800d3be:	d3eb      	bcc.n	800d398 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800d3c0:	2300      	movs	r3, #0
}
 800d3c2:	4618      	mov	r0, r3
 800d3c4:	3724      	adds	r7, #36	; 0x24
 800d3c6:	46bd      	mov	sp, r7
 800d3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3cc:	4770      	bx	lr

0800d3ce <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800d3ce:	b480      	push	{r7}
 800d3d0:	b089      	sub	sp, #36	; 0x24
 800d3d2:	af00      	add	r7, sp, #0
 800d3d4:	60f8      	str	r0, [r7, #12]
 800d3d6:	60b9      	str	r1, [r7, #8]
 800d3d8:	4613      	mov	r3, r2
 800d3da:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800d3e0:	68bb      	ldr	r3, [r7, #8]
 800d3e2:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800d3e4:	88fb      	ldrh	r3, [r7, #6]
 800d3e6:	3303      	adds	r3, #3
 800d3e8:	089b      	lsrs	r3, r3, #2
 800d3ea:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800d3ec:	2300      	movs	r3, #0
 800d3ee:	61bb      	str	r3, [r7, #24]
 800d3f0:	e00b      	b.n	800d40a <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800d3f2:	697b      	ldr	r3, [r7, #20]
 800d3f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d3f8:	681a      	ldr	r2, [r3, #0]
 800d3fa:	69fb      	ldr	r3, [r7, #28]
 800d3fc:	601a      	str	r2, [r3, #0]
    pDest++;
 800d3fe:	69fb      	ldr	r3, [r7, #28]
 800d400:	3304      	adds	r3, #4
 800d402:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800d404:	69bb      	ldr	r3, [r7, #24]
 800d406:	3301      	adds	r3, #1
 800d408:	61bb      	str	r3, [r7, #24]
 800d40a:	69ba      	ldr	r2, [r7, #24]
 800d40c:	693b      	ldr	r3, [r7, #16]
 800d40e:	429a      	cmp	r2, r3
 800d410:	d3ef      	bcc.n	800d3f2 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800d412:	69fb      	ldr	r3, [r7, #28]
}
 800d414:	4618      	mov	r0, r3
 800d416:	3724      	adds	r7, #36	; 0x24
 800d418:	46bd      	mov	sp, r7
 800d41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d41e:	4770      	bx	lr

0800d420 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800d420:	b480      	push	{r7}
 800d422:	b085      	sub	sp, #20
 800d424:	af00      	add	r7, sp, #0
 800d426:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	695b      	ldr	r3, [r3, #20]
 800d42c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	699b      	ldr	r3, [r3, #24]
 800d432:	68fa      	ldr	r2, [r7, #12]
 800d434:	4013      	ands	r3, r2
 800d436:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800d438:	68fb      	ldr	r3, [r7, #12]
}
 800d43a:	4618      	mov	r0, r3
 800d43c:	3714      	adds	r7, #20
 800d43e:	46bd      	mov	sp, r7
 800d440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d444:	4770      	bx	lr

0800d446 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800d446:	b480      	push	{r7}
 800d448:	b083      	sub	sp, #12
 800d44a:	af00      	add	r7, sp, #0
 800d44c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	695b      	ldr	r3, [r3, #20]
 800d452:	f003 0301 	and.w	r3, r3, #1
}
 800d456:	4618      	mov	r0, r3
 800d458:	370c      	adds	r7, #12
 800d45a:	46bd      	mov	sp, r7
 800d45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d460:	4770      	bx	lr
	...

0800d464 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d464:	b480      	push	{r7}
 800d466:	b085      	sub	sp, #20
 800d468:	af00      	add	r7, sp, #0
 800d46a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800d46c:	2300      	movs	r3, #0
 800d46e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	3301      	adds	r3, #1
 800d474:	60fb      	str	r3, [r7, #12]
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	4a13      	ldr	r2, [pc, #76]	; (800d4c8 <USB_CoreReset+0x64>)
 800d47a:	4293      	cmp	r3, r2
 800d47c:	d901      	bls.n	800d482 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d47e:	2303      	movs	r3, #3
 800d480:	e01b      	b.n	800d4ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	691b      	ldr	r3, [r3, #16]
 800d486:	2b00      	cmp	r3, #0
 800d488:	daf2      	bge.n	800d470 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d48a:	2300      	movs	r3, #0
 800d48c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	691b      	ldr	r3, [r3, #16]
 800d492:	f043 0201 	orr.w	r2, r3, #1
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	3301      	adds	r3, #1
 800d49e:	60fb      	str	r3, [r7, #12]
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	4a09      	ldr	r2, [pc, #36]	; (800d4c8 <USB_CoreReset+0x64>)
 800d4a4:	4293      	cmp	r3, r2
 800d4a6:	d901      	bls.n	800d4ac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d4a8:	2303      	movs	r3, #3
 800d4aa:	e006      	b.n	800d4ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	691b      	ldr	r3, [r3, #16]
 800d4b0:	f003 0301 	and.w	r3, r3, #1
 800d4b4:	2b01      	cmp	r3, #1
 800d4b6:	d0f0      	beq.n	800d49a <USB_CoreReset+0x36>

  return HAL_OK;
 800d4b8:	2300      	movs	r3, #0
}
 800d4ba:	4618      	mov	r0, r3
 800d4bc:	3714      	adds	r7, #20
 800d4be:	46bd      	mov	sp, r7
 800d4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c4:	4770      	bx	lr
 800d4c6:	bf00      	nop
 800d4c8:	00030d40 	.word	0x00030d40

0800d4cc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d4cc:	b084      	sub	sp, #16
 800d4ce:	b580      	push	{r7, lr}
 800d4d0:	b084      	sub	sp, #16
 800d4d2:	af00      	add	r7, sp, #0
 800d4d4:	6078      	str	r0, [r7, #4]
 800d4d6:	f107 001c 	add.w	r0, r7, #28
 800d4da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d4e2:	68bb      	ldr	r3, [r7, #8]
 800d4e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d4e8:	461a      	mov	r2, r3
 800d4ea:	2300      	movs	r3, #0
 800d4ec:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4f2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4fe:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d50a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d018      	beq.n	800d550 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800d51e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d520:	2b01      	cmp	r3, #1
 800d522:	d10a      	bne.n	800d53a <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800d524:	68bb      	ldr	r3, [r7, #8]
 800d526:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	68ba      	ldr	r2, [r7, #8]
 800d52e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d532:	f043 0304 	orr.w	r3, r3, #4
 800d536:	6013      	str	r3, [r2, #0]
 800d538:	e014      	b.n	800d564 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800d53a:	68bb      	ldr	r3, [r7, #8]
 800d53c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	68ba      	ldr	r2, [r7, #8]
 800d544:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d548:	f023 0304 	bic.w	r3, r3, #4
 800d54c:	6013      	str	r3, [r2, #0]
 800d54e:	e009      	b.n	800d564 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800d550:	68bb      	ldr	r3, [r7, #8]
 800d552:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	68ba      	ldr	r2, [r7, #8]
 800d55a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d55e:	f023 0304 	bic.w	r3, r3, #4
 800d562:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800d564:	2110      	movs	r1, #16
 800d566:	6878      	ldr	r0, [r7, #4]
 800d568:	f7ff feb4 	bl	800d2d4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800d56c:	6878      	ldr	r0, [r7, #4]
 800d56e:	f7ff fed7 	bl	800d320 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800d572:	2300      	movs	r3, #0
 800d574:	60fb      	str	r3, [r7, #12]
 800d576:	e015      	b.n	800d5a4 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	015a      	lsls	r2, r3, #5
 800d57c:	68bb      	ldr	r3, [r7, #8]
 800d57e:	4413      	add	r3, r2
 800d580:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d584:	461a      	mov	r2, r3
 800d586:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d58a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	015a      	lsls	r2, r3, #5
 800d590:	68bb      	ldr	r3, [r7, #8]
 800d592:	4413      	add	r3, r2
 800d594:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d598:	461a      	mov	r2, r3
 800d59a:	2300      	movs	r3, #0
 800d59c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	3301      	adds	r3, #1
 800d5a2:	60fb      	str	r3, [r7, #12]
 800d5a4:	6a3b      	ldr	r3, [r7, #32]
 800d5a6:	68fa      	ldr	r2, [r7, #12]
 800d5a8:	429a      	cmp	r2, r3
 800d5aa:	d3e5      	bcc.n	800d578 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800d5ac:	2101      	movs	r1, #1
 800d5ae:	6878      	ldr	r0, [r7, #4]
 800d5b0:	f000 f8ac 	bl	800d70c <USB_DriveVbus>

  HAL_Delay(200U);
 800d5b4:	20c8      	movs	r0, #200	; 0xc8
 800d5b6:	f7fc f84d 	bl	8009654 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	2200      	movs	r2, #0
 800d5be:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d5c6:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d5cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d00b      	beq.n	800d5ec <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d5da:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	4a14      	ldr	r2, [pc, #80]	; (800d630 <USB_HostInit+0x164>)
 800d5e0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	4a13      	ldr	r2, [pc, #76]	; (800d634 <USB_HostInit+0x168>)
 800d5e6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800d5ea:	e009      	b.n	800d600 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	2280      	movs	r2, #128	; 0x80
 800d5f0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	4a10      	ldr	r2, [pc, #64]	; (800d638 <USB_HostInit+0x16c>)
 800d5f6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	4a10      	ldr	r2, [pc, #64]	; (800d63c <USB_HostInit+0x170>)
 800d5fc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800d600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d602:	2b00      	cmp	r3, #0
 800d604:	d105      	bne.n	800d612 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	699b      	ldr	r3, [r3, #24]
 800d60a:	f043 0210 	orr.w	r2, r3, #16
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	699a      	ldr	r2, [r3, #24]
 800d616:	4b0a      	ldr	r3, [pc, #40]	; (800d640 <USB_HostInit+0x174>)
 800d618:	4313      	orrs	r3, r2
 800d61a:	687a      	ldr	r2, [r7, #4]
 800d61c:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800d61e:	2300      	movs	r3, #0
}
 800d620:	4618      	mov	r0, r3
 800d622:	3710      	adds	r7, #16
 800d624:	46bd      	mov	sp, r7
 800d626:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d62a:	b004      	add	sp, #16
 800d62c:	4770      	bx	lr
 800d62e:	bf00      	nop
 800d630:	01000200 	.word	0x01000200
 800d634:	00e00300 	.word	0x00e00300
 800d638:	00600080 	.word	0x00600080
 800d63c:	004000e0 	.word	0x004000e0
 800d640:	a3200008 	.word	0xa3200008

0800d644 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800d644:	b480      	push	{r7}
 800d646:	b085      	sub	sp, #20
 800d648:	af00      	add	r7, sp, #0
 800d64a:	6078      	str	r0, [r7, #4]
 800d64c:	460b      	mov	r3, r1
 800d64e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	68fa      	ldr	r2, [r7, #12]
 800d65e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d662:	f023 0303 	bic.w	r3, r3, #3
 800d666:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d66e:	681a      	ldr	r2, [r3, #0]
 800d670:	78fb      	ldrb	r3, [r7, #3]
 800d672:	f003 0303 	and.w	r3, r3, #3
 800d676:	68f9      	ldr	r1, [r7, #12]
 800d678:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800d67c:	4313      	orrs	r3, r2
 800d67e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800d680:	78fb      	ldrb	r3, [r7, #3]
 800d682:	2b01      	cmp	r3, #1
 800d684:	d107      	bne.n	800d696 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d68c:	461a      	mov	r2, r3
 800d68e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800d692:	6053      	str	r3, [r2, #4]
 800d694:	e009      	b.n	800d6aa <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800d696:	78fb      	ldrb	r3, [r7, #3]
 800d698:	2b02      	cmp	r3, #2
 800d69a:	d106      	bne.n	800d6aa <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d6a2:	461a      	mov	r2, r3
 800d6a4:	f241 7370 	movw	r3, #6000	; 0x1770
 800d6a8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800d6aa:	2300      	movs	r3, #0
}
 800d6ac:	4618      	mov	r0, r3
 800d6ae:	3714      	adds	r7, #20
 800d6b0:	46bd      	mov	sp, r7
 800d6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b6:	4770      	bx	lr

0800d6b8 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800d6b8:	b580      	push	{r7, lr}
 800d6ba:	b084      	sub	sp, #16
 800d6bc:	af00      	add	r7, sp, #0
 800d6be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800d6c4:	2300      	movs	r3, #0
 800d6c6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800d6d2:	68bb      	ldr	r3, [r7, #8]
 800d6d4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800d6d8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800d6da:	68bb      	ldr	r3, [r7, #8]
 800d6dc:	68fa      	ldr	r2, [r7, #12]
 800d6de:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800d6e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d6e6:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800d6e8:	2064      	movs	r0, #100	; 0x64
 800d6ea:	f7fb ffb3 	bl	8009654 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800d6ee:	68bb      	ldr	r3, [r7, #8]
 800d6f0:	68fa      	ldr	r2, [r7, #12]
 800d6f2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800d6f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d6fa:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800d6fc:	200a      	movs	r0, #10
 800d6fe:	f7fb ffa9 	bl	8009654 <HAL_Delay>

  return HAL_OK;
 800d702:	2300      	movs	r3, #0
}
 800d704:	4618      	mov	r0, r3
 800d706:	3710      	adds	r7, #16
 800d708:	46bd      	mov	sp, r7
 800d70a:	bd80      	pop	{r7, pc}

0800d70c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800d70c:	b480      	push	{r7}
 800d70e:	b085      	sub	sp, #20
 800d710:	af00      	add	r7, sp, #0
 800d712:	6078      	str	r0, [r7, #4]
 800d714:	460b      	mov	r3, r1
 800d716:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800d71c:	2300      	movs	r3, #0
 800d71e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800d72a:	68bb      	ldr	r3, [r7, #8]
 800d72c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800d730:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800d732:	68bb      	ldr	r3, [r7, #8]
 800d734:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d109      	bne.n	800d750 <USB_DriveVbus+0x44>
 800d73c:	78fb      	ldrb	r3, [r7, #3]
 800d73e:	2b01      	cmp	r3, #1
 800d740:	d106      	bne.n	800d750 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800d742:	68bb      	ldr	r3, [r7, #8]
 800d744:	68fa      	ldr	r2, [r7, #12]
 800d746:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800d74a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d74e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800d750:	68bb      	ldr	r3, [r7, #8]
 800d752:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d756:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d75a:	d109      	bne.n	800d770 <USB_DriveVbus+0x64>
 800d75c:	78fb      	ldrb	r3, [r7, #3]
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d106      	bne.n	800d770 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800d762:	68bb      	ldr	r3, [r7, #8]
 800d764:	68fa      	ldr	r2, [r7, #12]
 800d766:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800d76a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d76e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800d770:	2300      	movs	r3, #0
}
 800d772:	4618      	mov	r0, r3
 800d774:	3714      	adds	r7, #20
 800d776:	46bd      	mov	sp, r7
 800d778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d77c:	4770      	bx	lr

0800d77e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800d77e:	b480      	push	{r7}
 800d780:	b085      	sub	sp, #20
 800d782:	af00      	add	r7, sp, #0
 800d784:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800d78a:	2300      	movs	r3, #0
 800d78c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800d798:	68bb      	ldr	r3, [r7, #8]
 800d79a:	0c5b      	lsrs	r3, r3, #17
 800d79c:	f003 0303 	and.w	r3, r3, #3
}
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	3714      	adds	r7, #20
 800d7a4:	46bd      	mov	sp, r7
 800d7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7aa:	4770      	bx	lr

0800d7ac <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800d7ac:	b480      	push	{r7}
 800d7ae:	b085      	sub	sp, #20
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d7be:	689b      	ldr	r3, [r3, #8]
 800d7c0:	b29b      	uxth	r3, r3
}
 800d7c2:	4618      	mov	r0, r3
 800d7c4:	3714      	adds	r7, #20
 800d7c6:	46bd      	mov	sp, r7
 800d7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7cc:	4770      	bx	lr
	...

0800d7d0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800d7d0:	b480      	push	{r7}
 800d7d2:	b087      	sub	sp, #28
 800d7d4:	af00      	add	r7, sp, #0
 800d7d6:	6078      	str	r0, [r7, #4]
 800d7d8:	4608      	mov	r0, r1
 800d7da:	4611      	mov	r1, r2
 800d7dc:	461a      	mov	r2, r3
 800d7de:	4603      	mov	r3, r0
 800d7e0:	70fb      	strb	r3, [r7, #3]
 800d7e2:	460b      	mov	r3, r1
 800d7e4:	70bb      	strb	r3, [r7, #2]
 800d7e6:	4613      	mov	r3, r2
 800d7e8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800d7ea:	2300      	movs	r3, #0
 800d7ec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800d7f2:	78fb      	ldrb	r3, [r7, #3]
 800d7f4:	015a      	lsls	r2, r3, #5
 800d7f6:	68bb      	ldr	r3, [r7, #8]
 800d7f8:	4413      	add	r3, r2
 800d7fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d7fe:	461a      	mov	r2, r3
 800d800:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d804:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800d806:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d80a:	2b03      	cmp	r3, #3
 800d80c:	d87e      	bhi.n	800d90c <USB_HC_Init+0x13c>
 800d80e:	a201      	add	r2, pc, #4	; (adr r2, 800d814 <USB_HC_Init+0x44>)
 800d810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d814:	0800d825 	.word	0x0800d825
 800d818:	0800d8cf 	.word	0x0800d8cf
 800d81c:	0800d825 	.word	0x0800d825
 800d820:	0800d891 	.word	0x0800d891
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800d824:	78fb      	ldrb	r3, [r7, #3]
 800d826:	015a      	lsls	r2, r3, #5
 800d828:	68bb      	ldr	r3, [r7, #8]
 800d82a:	4413      	add	r3, r2
 800d82c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d830:	461a      	mov	r2, r3
 800d832:	f240 439d 	movw	r3, #1181	; 0x49d
 800d836:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800d838:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	da10      	bge.n	800d862 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800d840:	78fb      	ldrb	r3, [r7, #3]
 800d842:	015a      	lsls	r2, r3, #5
 800d844:	68bb      	ldr	r3, [r7, #8]
 800d846:	4413      	add	r3, r2
 800d848:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d84c:	68db      	ldr	r3, [r3, #12]
 800d84e:	78fa      	ldrb	r2, [r7, #3]
 800d850:	0151      	lsls	r1, r2, #5
 800d852:	68ba      	ldr	r2, [r7, #8]
 800d854:	440a      	add	r2, r1
 800d856:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d85a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d85e:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 800d860:	e057      	b.n	800d912 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d051      	beq.n	800d912 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800d86e:	78fb      	ldrb	r3, [r7, #3]
 800d870:	015a      	lsls	r2, r3, #5
 800d872:	68bb      	ldr	r3, [r7, #8]
 800d874:	4413      	add	r3, r2
 800d876:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d87a:	68db      	ldr	r3, [r3, #12]
 800d87c:	78fa      	ldrb	r2, [r7, #3]
 800d87e:	0151      	lsls	r1, r2, #5
 800d880:	68ba      	ldr	r2, [r7, #8]
 800d882:	440a      	add	r2, r1
 800d884:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d888:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800d88c:	60d3      	str	r3, [r2, #12]
      break;
 800d88e:	e040      	b.n	800d912 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800d890:	78fb      	ldrb	r3, [r7, #3]
 800d892:	015a      	lsls	r2, r3, #5
 800d894:	68bb      	ldr	r3, [r7, #8]
 800d896:	4413      	add	r3, r2
 800d898:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d89c:	461a      	mov	r2, r3
 800d89e:	f240 639d 	movw	r3, #1693	; 0x69d
 800d8a2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800d8a4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	da34      	bge.n	800d916 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800d8ac:	78fb      	ldrb	r3, [r7, #3]
 800d8ae:	015a      	lsls	r2, r3, #5
 800d8b0:	68bb      	ldr	r3, [r7, #8]
 800d8b2:	4413      	add	r3, r2
 800d8b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d8b8:	68db      	ldr	r3, [r3, #12]
 800d8ba:	78fa      	ldrb	r2, [r7, #3]
 800d8bc:	0151      	lsls	r1, r2, #5
 800d8be:	68ba      	ldr	r2, [r7, #8]
 800d8c0:	440a      	add	r2, r1
 800d8c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d8c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d8ca:	60d3      	str	r3, [r2, #12]
      }

      break;
 800d8cc:	e023      	b.n	800d916 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800d8ce:	78fb      	ldrb	r3, [r7, #3]
 800d8d0:	015a      	lsls	r2, r3, #5
 800d8d2:	68bb      	ldr	r3, [r7, #8]
 800d8d4:	4413      	add	r3, r2
 800d8d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d8da:	461a      	mov	r2, r3
 800d8dc:	f240 2325 	movw	r3, #549	; 0x225
 800d8e0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800d8e2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	da17      	bge.n	800d91a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800d8ea:	78fb      	ldrb	r3, [r7, #3]
 800d8ec:	015a      	lsls	r2, r3, #5
 800d8ee:	68bb      	ldr	r3, [r7, #8]
 800d8f0:	4413      	add	r3, r2
 800d8f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d8f6:	68db      	ldr	r3, [r3, #12]
 800d8f8:	78fa      	ldrb	r2, [r7, #3]
 800d8fa:	0151      	lsls	r1, r2, #5
 800d8fc:	68ba      	ldr	r2, [r7, #8]
 800d8fe:	440a      	add	r2, r1
 800d900:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d904:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800d908:	60d3      	str	r3, [r2, #12]
      }
      break;
 800d90a:	e006      	b.n	800d91a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800d90c:	2301      	movs	r3, #1
 800d90e:	75fb      	strb	r3, [r7, #23]
      break;
 800d910:	e004      	b.n	800d91c <USB_HC_Init+0x14c>
      break;
 800d912:	bf00      	nop
 800d914:	e002      	b.n	800d91c <USB_HC_Init+0x14c>
      break;
 800d916:	bf00      	nop
 800d918:	e000      	b.n	800d91c <USB_HC_Init+0x14c>
      break;
 800d91a:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800d91c:	68bb      	ldr	r3, [r7, #8]
 800d91e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d922:	699a      	ldr	r2, [r3, #24]
 800d924:	78fb      	ldrb	r3, [r7, #3]
 800d926:	f003 030f 	and.w	r3, r3, #15
 800d92a:	2101      	movs	r1, #1
 800d92c:	fa01 f303 	lsl.w	r3, r1, r3
 800d930:	68b9      	ldr	r1, [r7, #8]
 800d932:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800d936:	4313      	orrs	r3, r2
 800d938:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	699b      	ldr	r3, [r3, #24]
 800d93e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800d946:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	da03      	bge.n	800d956 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800d94e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d952:	613b      	str	r3, [r7, #16]
 800d954:	e001      	b.n	800d95a <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800d956:	2300      	movs	r3, #0
 800d958:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 800d95a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d95e:	2b02      	cmp	r3, #2
 800d960:	d103      	bne.n	800d96a <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800d962:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d966:	60fb      	str	r3, [r7, #12]
 800d968:	e001      	b.n	800d96e <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800d96a:	2300      	movs	r3, #0
 800d96c:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d96e:	787b      	ldrb	r3, [r7, #1]
 800d970:	059b      	lsls	r3, r3, #22
 800d972:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800d976:	78bb      	ldrb	r3, [r7, #2]
 800d978:	02db      	lsls	r3, r3, #11
 800d97a:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d97e:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800d980:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d984:	049b      	lsls	r3, r3, #18
 800d986:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800d98a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800d98c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d98e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800d992:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800d994:	693b      	ldr	r3, [r7, #16]
 800d996:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d998:	78fb      	ldrb	r3, [r7, #3]
 800d99a:	0159      	lsls	r1, r3, #5
 800d99c:	68bb      	ldr	r3, [r7, #8]
 800d99e:	440b      	add	r3, r1
 800d9a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d9a4:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d9aa:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800d9ac:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d9b0:	2b03      	cmp	r3, #3
 800d9b2:	d10f      	bne.n	800d9d4 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800d9b4:	78fb      	ldrb	r3, [r7, #3]
 800d9b6:	015a      	lsls	r2, r3, #5
 800d9b8:	68bb      	ldr	r3, [r7, #8]
 800d9ba:	4413      	add	r3, r2
 800d9bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	78fa      	ldrb	r2, [r7, #3]
 800d9c4:	0151      	lsls	r1, r2, #5
 800d9c6:	68ba      	ldr	r2, [r7, #8]
 800d9c8:	440a      	add	r2, r1
 800d9ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d9ce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d9d2:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800d9d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d9d6:	4618      	mov	r0, r3
 800d9d8:	371c      	adds	r7, #28
 800d9da:	46bd      	mov	sp, r7
 800d9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e0:	4770      	bx	lr
 800d9e2:	bf00      	nop

0800d9e4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800d9e4:	b580      	push	{r7, lr}
 800d9e6:	b08c      	sub	sp, #48	; 0x30
 800d9e8:	af02      	add	r7, sp, #8
 800d9ea:	60f8      	str	r0, [r7, #12]
 800d9ec:	60b9      	str	r1, [r7, #8]
 800d9ee:	4613      	mov	r3, r2
 800d9f0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800d9f6:	68bb      	ldr	r3, [r7, #8]
 800d9f8:	785b      	ldrb	r3, [r3, #1]
 800d9fa:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800d9fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800da00:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d028      	beq.n	800da60 <USB_HC_StartXfer+0x7c>
 800da0e:	68bb      	ldr	r3, [r7, #8]
 800da10:	791b      	ldrb	r3, [r3, #4]
 800da12:	2b00      	cmp	r3, #0
 800da14:	d124      	bne.n	800da60 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 800da16:	79fb      	ldrb	r3, [r7, #7]
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d10b      	bne.n	800da34 <USB_HC_StartXfer+0x50>
 800da1c:	68bb      	ldr	r3, [r7, #8]
 800da1e:	795b      	ldrb	r3, [r3, #5]
 800da20:	2b01      	cmp	r3, #1
 800da22:	d107      	bne.n	800da34 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800da24:	68bb      	ldr	r3, [r7, #8]
 800da26:	785b      	ldrb	r3, [r3, #1]
 800da28:	4619      	mov	r1, r3
 800da2a:	68f8      	ldr	r0, [r7, #12]
 800da2c:	f000 fa30 	bl	800de90 <USB_DoPing>
      return HAL_OK;
 800da30:	2300      	movs	r3, #0
 800da32:	e114      	b.n	800dc5e <USB_HC_StartXfer+0x27a>
    }
    else if (dma == 1U)
 800da34:	79fb      	ldrb	r3, [r7, #7]
 800da36:	2b01      	cmp	r3, #1
 800da38:	d112      	bne.n	800da60 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800da3a:	69fb      	ldr	r3, [r7, #28]
 800da3c:	015a      	lsls	r2, r3, #5
 800da3e:	6a3b      	ldr	r3, [r7, #32]
 800da40:	4413      	add	r3, r2
 800da42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800da46:	68db      	ldr	r3, [r3, #12]
 800da48:	69fa      	ldr	r2, [r7, #28]
 800da4a:	0151      	lsls	r1, r2, #5
 800da4c:	6a3a      	ldr	r2, [r7, #32]
 800da4e:	440a      	add	r2, r1
 800da50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800da54:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800da58:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 800da5a:	68bb      	ldr	r3, [r7, #8]
 800da5c:	2200      	movs	r2, #0
 800da5e:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800da60:	68bb      	ldr	r3, [r7, #8]
 800da62:	691b      	ldr	r3, [r3, #16]
 800da64:	2b00      	cmp	r3, #0
 800da66:	d018      	beq.n	800da9a <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800da68:	68bb      	ldr	r3, [r7, #8]
 800da6a:	691b      	ldr	r3, [r3, #16]
 800da6c:	68ba      	ldr	r2, [r7, #8]
 800da6e:	8912      	ldrh	r2, [r2, #8]
 800da70:	4413      	add	r3, r2
 800da72:	3b01      	subs	r3, #1
 800da74:	68ba      	ldr	r2, [r7, #8]
 800da76:	8912      	ldrh	r2, [r2, #8]
 800da78:	fbb3 f3f2 	udiv	r3, r3, r2
 800da7c:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800da7e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800da80:	8b7b      	ldrh	r3, [r7, #26]
 800da82:	429a      	cmp	r2, r3
 800da84:	d90b      	bls.n	800da9e <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 800da86:	8b7b      	ldrh	r3, [r7, #26]
 800da88:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800da8a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800da8c:	68ba      	ldr	r2, [r7, #8]
 800da8e:	8912      	ldrh	r2, [r2, #8]
 800da90:	fb02 f203 	mul.w	r2, r2, r3
 800da94:	68bb      	ldr	r3, [r7, #8]
 800da96:	611a      	str	r2, [r3, #16]
 800da98:	e001      	b.n	800da9e <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 800da9a:	2301      	movs	r3, #1
 800da9c:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 800da9e:	68bb      	ldr	r3, [r7, #8]
 800daa0:	78db      	ldrb	r3, [r3, #3]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d006      	beq.n	800dab4 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800daa6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800daa8:	68ba      	ldr	r2, [r7, #8]
 800daaa:	8912      	ldrh	r2, [r2, #8]
 800daac:	fb02 f203 	mul.w	r2, r2, r3
 800dab0:	68bb      	ldr	r3, [r7, #8]
 800dab2:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800dab4:	68bb      	ldr	r3, [r7, #8]
 800dab6:	691b      	ldr	r3, [r3, #16]
 800dab8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800dabc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800dabe:	04d9      	lsls	r1, r3, #19
 800dac0:	4b69      	ldr	r3, [pc, #420]	; (800dc68 <USB_HC_StartXfer+0x284>)
 800dac2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800dac4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800dac6:	68bb      	ldr	r3, [r7, #8]
 800dac8:	7a9b      	ldrb	r3, [r3, #10]
 800daca:	075b      	lsls	r3, r3, #29
 800dacc:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800dad0:	69f9      	ldr	r1, [r7, #28]
 800dad2:	0148      	lsls	r0, r1, #5
 800dad4:	6a39      	ldr	r1, [r7, #32]
 800dad6:	4401      	add	r1, r0
 800dad8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800dadc:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800dade:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800dae0:	79fb      	ldrb	r3, [r7, #7]
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d009      	beq.n	800dafa <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800dae6:	68bb      	ldr	r3, [r7, #8]
 800dae8:	68d9      	ldr	r1, [r3, #12]
 800daea:	69fb      	ldr	r3, [r7, #28]
 800daec:	015a      	lsls	r2, r3, #5
 800daee:	6a3b      	ldr	r3, [r7, #32]
 800daf0:	4413      	add	r3, r2
 800daf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800daf6:	460a      	mov	r2, r1
 800daf8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800dafa:	6a3b      	ldr	r3, [r7, #32]
 800dafc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800db00:	689b      	ldr	r3, [r3, #8]
 800db02:	f003 0301 	and.w	r3, r3, #1
 800db06:	2b00      	cmp	r3, #0
 800db08:	bf0c      	ite	eq
 800db0a:	2301      	moveq	r3, #1
 800db0c:	2300      	movne	r3, #0
 800db0e:	b2db      	uxtb	r3, r3
 800db10:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800db12:	69fb      	ldr	r3, [r7, #28]
 800db14:	015a      	lsls	r2, r3, #5
 800db16:	6a3b      	ldr	r3, [r7, #32]
 800db18:	4413      	add	r3, r2
 800db1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	69fa      	ldr	r2, [r7, #28]
 800db22:	0151      	lsls	r1, r2, #5
 800db24:	6a3a      	ldr	r2, [r7, #32]
 800db26:	440a      	add	r2, r1
 800db28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800db2c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800db30:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800db32:	69fb      	ldr	r3, [r7, #28]
 800db34:	015a      	lsls	r2, r3, #5
 800db36:	6a3b      	ldr	r3, [r7, #32]
 800db38:	4413      	add	r3, r2
 800db3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800db3e:	681a      	ldr	r2, [r3, #0]
 800db40:	7e7b      	ldrb	r3, [r7, #25]
 800db42:	075b      	lsls	r3, r3, #29
 800db44:	69f9      	ldr	r1, [r7, #28]
 800db46:	0148      	lsls	r0, r1, #5
 800db48:	6a39      	ldr	r1, [r7, #32]
 800db4a:	4401      	add	r1, r0
 800db4c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800db50:	4313      	orrs	r3, r2
 800db52:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800db54:	69fb      	ldr	r3, [r7, #28]
 800db56:	015a      	lsls	r2, r3, #5
 800db58:	6a3b      	ldr	r3, [r7, #32]
 800db5a:	4413      	add	r3, r2
 800db5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	4a42      	ldr	r2, [pc, #264]	; (800dc6c <USB_HC_StartXfer+0x288>)
 800db64:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800db66:	4b41      	ldr	r3, [pc, #260]	; (800dc6c <USB_HC_StartXfer+0x288>)
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800db6e:	4a3f      	ldr	r2, [pc, #252]	; (800dc6c <USB_HC_StartXfer+0x288>)
 800db70:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800db72:	68bb      	ldr	r3, [r7, #8]
 800db74:	78db      	ldrb	r3, [r3, #3]
 800db76:	2b00      	cmp	r3, #0
 800db78:	d006      	beq.n	800db88 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800db7a:	4b3c      	ldr	r3, [pc, #240]	; (800dc6c <USB_HC_StartXfer+0x288>)
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800db82:	4a3a      	ldr	r2, [pc, #232]	; (800dc6c <USB_HC_StartXfer+0x288>)
 800db84:	6013      	str	r3, [r2, #0]
 800db86:	e005      	b.n	800db94 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800db88:	4b38      	ldr	r3, [pc, #224]	; (800dc6c <USB_HC_StartXfer+0x288>)
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800db90:	4a36      	ldr	r2, [pc, #216]	; (800dc6c <USB_HC_StartXfer+0x288>)
 800db92:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800db94:	4b35      	ldr	r3, [pc, #212]	; (800dc6c <USB_HC_StartXfer+0x288>)
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800db9c:	4a33      	ldr	r2, [pc, #204]	; (800dc6c <USB_HC_StartXfer+0x288>)
 800db9e:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800dba0:	69fb      	ldr	r3, [r7, #28]
 800dba2:	015a      	lsls	r2, r3, #5
 800dba4:	6a3b      	ldr	r3, [r7, #32]
 800dba6:	4413      	add	r3, r2
 800dba8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dbac:	461a      	mov	r2, r3
 800dbae:	4b2f      	ldr	r3, [pc, #188]	; (800dc6c <USB_HC_StartXfer+0x288>)
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800dbb4:	79fb      	ldrb	r3, [r7, #7]
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d001      	beq.n	800dbbe <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800dbba:	2300      	movs	r3, #0
 800dbbc:	e04f      	b.n	800dc5e <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800dbbe:	68bb      	ldr	r3, [r7, #8]
 800dbc0:	78db      	ldrb	r3, [r3, #3]
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d14a      	bne.n	800dc5c <USB_HC_StartXfer+0x278>
 800dbc6:	68bb      	ldr	r3, [r7, #8]
 800dbc8:	691b      	ldr	r3, [r3, #16]
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d046      	beq.n	800dc5c <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 800dbce:	68bb      	ldr	r3, [r7, #8]
 800dbd0:	79db      	ldrb	r3, [r3, #7]
 800dbd2:	2b03      	cmp	r3, #3
 800dbd4:	d830      	bhi.n	800dc38 <USB_HC_StartXfer+0x254>
 800dbd6:	a201      	add	r2, pc, #4	; (adr r2, 800dbdc <USB_HC_StartXfer+0x1f8>)
 800dbd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbdc:	0800dbed 	.word	0x0800dbed
 800dbe0:	0800dc11 	.word	0x0800dc11
 800dbe4:	0800dbed 	.word	0x0800dbed
 800dbe8:	0800dc11 	.word	0x0800dc11
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800dbec:	68bb      	ldr	r3, [r7, #8]
 800dbee:	691b      	ldr	r3, [r3, #16]
 800dbf0:	3303      	adds	r3, #3
 800dbf2:	089b      	lsrs	r3, r3, #2
 800dbf4:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800dbf6:	8afa      	ldrh	r2, [r7, #22]
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbfc:	b29b      	uxth	r3, r3
 800dbfe:	429a      	cmp	r2, r3
 800dc00:	d91c      	bls.n	800dc3c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	699b      	ldr	r3, [r3, #24]
 800dc06:	f043 0220 	orr.w	r2, r3, #32
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	619a      	str	r2, [r3, #24]
        }
        break;
 800dc0e:	e015      	b.n	800dc3c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800dc10:	68bb      	ldr	r3, [r7, #8]
 800dc12:	691b      	ldr	r3, [r3, #16]
 800dc14:	3303      	adds	r3, #3
 800dc16:	089b      	lsrs	r3, r3, #2
 800dc18:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800dc1a:	8afa      	ldrh	r2, [r7, #22]
 800dc1c:	6a3b      	ldr	r3, [r7, #32]
 800dc1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800dc22:	691b      	ldr	r3, [r3, #16]
 800dc24:	b29b      	uxth	r3, r3
 800dc26:	429a      	cmp	r2, r3
 800dc28:	d90a      	bls.n	800dc40 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	699b      	ldr	r3, [r3, #24]
 800dc2e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	619a      	str	r2, [r3, #24]
        }
        break;
 800dc36:	e003      	b.n	800dc40 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800dc38:	bf00      	nop
 800dc3a:	e002      	b.n	800dc42 <USB_HC_StartXfer+0x25e>
        break;
 800dc3c:	bf00      	nop
 800dc3e:	e000      	b.n	800dc42 <USB_HC_StartXfer+0x25e>
        break;
 800dc40:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800dc42:	68bb      	ldr	r3, [r7, #8]
 800dc44:	68d9      	ldr	r1, [r3, #12]
 800dc46:	68bb      	ldr	r3, [r7, #8]
 800dc48:	785a      	ldrb	r2, [r3, #1]
 800dc4a:	68bb      	ldr	r3, [r7, #8]
 800dc4c:	691b      	ldr	r3, [r3, #16]
 800dc4e:	b298      	uxth	r0, r3
 800dc50:	2300      	movs	r3, #0
 800dc52:	9300      	str	r3, [sp, #0]
 800dc54:	4603      	mov	r3, r0
 800dc56:	68f8      	ldr	r0, [r7, #12]
 800dc58:	f7ff fb84 	bl	800d364 <USB_WritePacket>
  }

  return HAL_OK;
 800dc5c:	2300      	movs	r3, #0
}
 800dc5e:	4618      	mov	r0, r3
 800dc60:	3728      	adds	r7, #40	; 0x28
 800dc62:	46bd      	mov	sp, r7
 800dc64:	bd80      	pop	{r7, pc}
 800dc66:	bf00      	nop
 800dc68:	1ff80000 	.word	0x1ff80000
 800dc6c:	20000218 	.word	0x20000218

0800dc70 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800dc70:	b480      	push	{r7}
 800dc72:	b085      	sub	sp, #20
 800dc74:	af00      	add	r7, sp, #0
 800dc76:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800dc82:	695b      	ldr	r3, [r3, #20]
 800dc84:	b29b      	uxth	r3, r3
}
 800dc86:	4618      	mov	r0, r3
 800dc88:	3714      	adds	r7, #20
 800dc8a:	46bd      	mov	sp, r7
 800dc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc90:	4770      	bx	lr

0800dc92 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800dc92:	b480      	push	{r7}
 800dc94:	b087      	sub	sp, #28
 800dc96:	af00      	add	r7, sp, #0
 800dc98:	6078      	str	r0, [r7, #4]
 800dc9a:	460b      	mov	r3, r1
 800dc9c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800dca2:	78fb      	ldrb	r3, [r7, #3]
 800dca4:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800dca6:	2300      	movs	r3, #0
 800dca8:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	015a      	lsls	r2, r3, #5
 800dcae:	693b      	ldr	r3, [r7, #16]
 800dcb0:	4413      	add	r3, r2
 800dcb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	0c9b      	lsrs	r3, r3, #18
 800dcba:	f003 0303 	and.w	r3, r3, #3
 800dcbe:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800dcc0:	68bb      	ldr	r3, [r7, #8]
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d002      	beq.n	800dccc <USB_HC_Halt+0x3a>
 800dcc6:	68bb      	ldr	r3, [r7, #8]
 800dcc8:	2b02      	cmp	r3, #2
 800dcca:	d16c      	bne.n	800dda6 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	015a      	lsls	r2, r3, #5
 800dcd0:	693b      	ldr	r3, [r7, #16]
 800dcd2:	4413      	add	r3, r2
 800dcd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	68fa      	ldr	r2, [r7, #12]
 800dcdc:	0151      	lsls	r1, r2, #5
 800dcde:	693a      	ldr	r2, [r7, #16]
 800dce0:	440a      	add	r2, r1
 800dce2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800dce6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800dcea:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcf0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d143      	bne.n	800dd80 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	015a      	lsls	r2, r3, #5
 800dcfc:	693b      	ldr	r3, [r7, #16]
 800dcfe:	4413      	add	r3, r2
 800dd00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	68fa      	ldr	r2, [r7, #12]
 800dd08:	0151      	lsls	r1, r2, #5
 800dd0a:	693a      	ldr	r2, [r7, #16]
 800dd0c:	440a      	add	r2, r1
 800dd0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800dd12:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dd16:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	015a      	lsls	r2, r3, #5
 800dd1c:	693b      	ldr	r3, [r7, #16]
 800dd1e:	4413      	add	r3, r2
 800dd20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	68fa      	ldr	r2, [r7, #12]
 800dd28:	0151      	lsls	r1, r2, #5
 800dd2a:	693a      	ldr	r2, [r7, #16]
 800dd2c:	440a      	add	r2, r1
 800dd2e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800dd32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800dd36:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	015a      	lsls	r2, r3, #5
 800dd3c:	693b      	ldr	r3, [r7, #16]
 800dd3e:	4413      	add	r3, r2
 800dd40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	68fa      	ldr	r2, [r7, #12]
 800dd48:	0151      	lsls	r1, r2, #5
 800dd4a:	693a      	ldr	r2, [r7, #16]
 800dd4c:	440a      	add	r2, r1
 800dd4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800dd52:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800dd56:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800dd58:	697b      	ldr	r3, [r7, #20]
 800dd5a:	3301      	adds	r3, #1
 800dd5c:	617b      	str	r3, [r7, #20]
 800dd5e:	697b      	ldr	r3, [r7, #20]
 800dd60:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dd64:	d81d      	bhi.n	800dda2 <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	015a      	lsls	r2, r3, #5
 800dd6a:	693b      	ldr	r3, [r7, #16]
 800dd6c:	4413      	add	r3, r2
 800dd6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dd78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dd7c:	d0ec      	beq.n	800dd58 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800dd7e:	e080      	b.n	800de82 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	015a      	lsls	r2, r3, #5
 800dd84:	693b      	ldr	r3, [r7, #16]
 800dd86:	4413      	add	r3, r2
 800dd88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	68fa      	ldr	r2, [r7, #12]
 800dd90:	0151      	lsls	r1, r2, #5
 800dd92:	693a      	ldr	r2, [r7, #16]
 800dd94:	440a      	add	r2, r1
 800dd96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800dd9a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800dd9e:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800dda0:	e06f      	b.n	800de82 <USB_HC_Halt+0x1f0>
          break;
 800dda2:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800dda4:	e06d      	b.n	800de82 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	015a      	lsls	r2, r3, #5
 800ddaa:	693b      	ldr	r3, [r7, #16]
 800ddac:	4413      	add	r3, r2
 800ddae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	68fa      	ldr	r2, [r7, #12]
 800ddb6:	0151      	lsls	r1, r2, #5
 800ddb8:	693a      	ldr	r2, [r7, #16]
 800ddba:	440a      	add	r2, r1
 800ddbc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ddc0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ddc4:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800ddc6:	693b      	ldr	r3, [r7, #16]
 800ddc8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ddcc:	691b      	ldr	r3, [r3, #16]
 800ddce:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d143      	bne.n	800de5e <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	015a      	lsls	r2, r3, #5
 800ddda:	693b      	ldr	r3, [r7, #16]
 800dddc:	4413      	add	r3, r2
 800ddde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	68fa      	ldr	r2, [r7, #12]
 800dde6:	0151      	lsls	r1, r2, #5
 800dde8:	693a      	ldr	r2, [r7, #16]
 800ddea:	440a      	add	r2, r1
 800ddec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ddf0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ddf4:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	015a      	lsls	r2, r3, #5
 800ddfa:	693b      	ldr	r3, [r7, #16]
 800ddfc:	4413      	add	r3, r2
 800ddfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	68fa      	ldr	r2, [r7, #12]
 800de06:	0151      	lsls	r1, r2, #5
 800de08:	693a      	ldr	r2, [r7, #16]
 800de0a:	440a      	add	r2, r1
 800de0c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800de10:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800de14:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	015a      	lsls	r2, r3, #5
 800de1a:	693b      	ldr	r3, [r7, #16]
 800de1c:	4413      	add	r3, r2
 800de1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	68fa      	ldr	r2, [r7, #12]
 800de26:	0151      	lsls	r1, r2, #5
 800de28:	693a      	ldr	r2, [r7, #16]
 800de2a:	440a      	add	r2, r1
 800de2c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800de30:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800de34:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800de36:	697b      	ldr	r3, [r7, #20]
 800de38:	3301      	adds	r3, #1
 800de3a:	617b      	str	r3, [r7, #20]
 800de3c:	697b      	ldr	r3, [r7, #20]
 800de3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800de42:	d81d      	bhi.n	800de80 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	015a      	lsls	r2, r3, #5
 800de48:	693b      	ldr	r3, [r7, #16]
 800de4a:	4413      	add	r3, r2
 800de4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800de56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800de5a:	d0ec      	beq.n	800de36 <USB_HC_Halt+0x1a4>
 800de5c:	e011      	b.n	800de82 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	015a      	lsls	r2, r3, #5
 800de62:	693b      	ldr	r3, [r7, #16]
 800de64:	4413      	add	r3, r2
 800de66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	68fa      	ldr	r2, [r7, #12]
 800de6e:	0151      	lsls	r1, r2, #5
 800de70:	693a      	ldr	r2, [r7, #16]
 800de72:	440a      	add	r2, r1
 800de74:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800de78:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800de7c:	6013      	str	r3, [r2, #0]
 800de7e:	e000      	b.n	800de82 <USB_HC_Halt+0x1f0>
          break;
 800de80:	bf00      	nop
    }
  }

  return HAL_OK;
 800de82:	2300      	movs	r3, #0
}
 800de84:	4618      	mov	r0, r3
 800de86:	371c      	adds	r7, #28
 800de88:	46bd      	mov	sp, r7
 800de8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de8e:	4770      	bx	lr

0800de90 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800de90:	b480      	push	{r7}
 800de92:	b087      	sub	sp, #28
 800de94:	af00      	add	r7, sp, #0
 800de96:	6078      	str	r0, [r7, #4]
 800de98:	460b      	mov	r3, r1
 800de9a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800dea0:	78fb      	ldrb	r3, [r7, #3]
 800dea2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800dea4:	2301      	movs	r3, #1
 800dea6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	04da      	lsls	r2, r3, #19
 800deac:	4b15      	ldr	r3, [pc, #84]	; (800df04 <USB_DoPing+0x74>)
 800deae:	4013      	ands	r3, r2
 800deb0:	693a      	ldr	r2, [r7, #16]
 800deb2:	0151      	lsls	r1, r2, #5
 800deb4:	697a      	ldr	r2, [r7, #20]
 800deb6:	440a      	add	r2, r1
 800deb8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800debc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800dec0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800dec2:	693b      	ldr	r3, [r7, #16]
 800dec4:	015a      	lsls	r2, r3, #5
 800dec6:	697b      	ldr	r3, [r7, #20]
 800dec8:	4413      	add	r3, r2
 800deca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800ded2:	68bb      	ldr	r3, [r7, #8]
 800ded4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ded8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800deda:	68bb      	ldr	r3, [r7, #8]
 800dedc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800dee0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800dee2:	693b      	ldr	r3, [r7, #16]
 800dee4:	015a      	lsls	r2, r3, #5
 800dee6:	697b      	ldr	r3, [r7, #20]
 800dee8:	4413      	add	r3, r2
 800deea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800deee:	461a      	mov	r2, r3
 800def0:	68bb      	ldr	r3, [r7, #8]
 800def2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800def4:	2300      	movs	r3, #0
}
 800def6:	4618      	mov	r0, r3
 800def8:	371c      	adds	r7, #28
 800defa:	46bd      	mov	sp, r7
 800defc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df00:	4770      	bx	lr
 800df02:	bf00      	nop
 800df04:	1ff80000 	.word	0x1ff80000

0800df08 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800df08:	b580      	push	{r7, lr}
 800df0a:	b086      	sub	sp, #24
 800df0c:	af00      	add	r7, sp, #0
 800df0e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800df14:	2300      	movs	r3, #0
 800df16:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800df18:	6878      	ldr	r0, [r7, #4]
 800df1a:	f7ff f99f 	bl	800d25c <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800df1e:	2110      	movs	r1, #16
 800df20:	6878      	ldr	r0, [r7, #4]
 800df22:	f7ff f9d7 	bl	800d2d4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800df26:	6878      	ldr	r0, [r7, #4]
 800df28:	f7ff f9fa 	bl	800d320 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800df2c:	2300      	movs	r3, #0
 800df2e:	613b      	str	r3, [r7, #16]
 800df30:	e01f      	b.n	800df72 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800df32:	693b      	ldr	r3, [r7, #16]
 800df34:	015a      	lsls	r2, r3, #5
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	4413      	add	r3, r2
 800df3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800df42:	68bb      	ldr	r3, [r7, #8]
 800df44:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800df48:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800df4a:	68bb      	ldr	r3, [r7, #8]
 800df4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800df50:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800df52:	68bb      	ldr	r3, [r7, #8]
 800df54:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800df58:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800df5a:	693b      	ldr	r3, [r7, #16]
 800df5c:	015a      	lsls	r2, r3, #5
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	4413      	add	r3, r2
 800df62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800df66:	461a      	mov	r2, r3
 800df68:	68bb      	ldr	r3, [r7, #8]
 800df6a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800df6c:	693b      	ldr	r3, [r7, #16]
 800df6e:	3301      	adds	r3, #1
 800df70:	613b      	str	r3, [r7, #16]
 800df72:	693b      	ldr	r3, [r7, #16]
 800df74:	2b0f      	cmp	r3, #15
 800df76:	d9dc      	bls.n	800df32 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800df78:	2300      	movs	r3, #0
 800df7a:	613b      	str	r3, [r7, #16]
 800df7c:	e034      	b.n	800dfe8 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800df7e:	693b      	ldr	r3, [r7, #16]
 800df80:	015a      	lsls	r2, r3, #5
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	4413      	add	r3, r2
 800df86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800df8e:	68bb      	ldr	r3, [r7, #8]
 800df90:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800df94:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800df96:	68bb      	ldr	r3, [r7, #8]
 800df98:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800df9c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800df9e:	68bb      	ldr	r3, [r7, #8]
 800dfa0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800dfa4:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800dfa6:	693b      	ldr	r3, [r7, #16]
 800dfa8:	015a      	lsls	r2, r3, #5
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	4413      	add	r3, r2
 800dfae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dfb2:	461a      	mov	r2, r3
 800dfb4:	68bb      	ldr	r3, [r7, #8]
 800dfb6:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800dfb8:	697b      	ldr	r3, [r7, #20]
 800dfba:	3301      	adds	r3, #1
 800dfbc:	617b      	str	r3, [r7, #20]
 800dfbe:	697b      	ldr	r3, [r7, #20]
 800dfc0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dfc4:	d80c      	bhi.n	800dfe0 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800dfc6:	693b      	ldr	r3, [r7, #16]
 800dfc8:	015a      	lsls	r2, r3, #5
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	4413      	add	r3, r2
 800dfce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dfd8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dfdc:	d0ec      	beq.n	800dfb8 <USB_StopHost+0xb0>
 800dfde:	e000      	b.n	800dfe2 <USB_StopHost+0xda>
        break;
 800dfe0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800dfe2:	693b      	ldr	r3, [r7, #16]
 800dfe4:	3301      	adds	r3, #1
 800dfe6:	613b      	str	r3, [r7, #16]
 800dfe8:	693b      	ldr	r3, [r7, #16]
 800dfea:	2b0f      	cmp	r3, #15
 800dfec:	d9c7      	bls.n	800df7e <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800dff4:	461a      	mov	r2, r3
 800dff6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dffa:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e002:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800e004:	6878      	ldr	r0, [r7, #4]
 800e006:	f7ff f918 	bl	800d23a <USB_EnableGlobalInt>

  return HAL_OK;
 800e00a:	2300      	movs	r3, #0
}
 800e00c:	4618      	mov	r0, r3
 800e00e:	3718      	adds	r7, #24
 800e010:	46bd      	mov	sp, r7
 800e012:	bd80      	pop	{r7, pc}

0800e014 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800e014:	b590      	push	{r4, r7, lr}
 800e016:	b089      	sub	sp, #36	; 0x24
 800e018:	af04      	add	r7, sp, #16
 800e01a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800e01c:	2301      	movs	r3, #1
 800e01e:	2202      	movs	r2, #2
 800e020:	2102      	movs	r1, #2
 800e022:	6878      	ldr	r0, [r7, #4]
 800e024:	f000 fc68 	bl	800e8f8 <USBH_FindInterface>
 800e028:	4603      	mov	r3, r0
 800e02a:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800e02c:	7bfb      	ldrb	r3, [r7, #15]
 800e02e:	2bff      	cmp	r3, #255	; 0xff
 800e030:	d002      	beq.n	800e038 <USBH_CDC_InterfaceInit+0x24>
 800e032:	7bfb      	ldrb	r3, [r7, #15]
 800e034:	2b01      	cmp	r3, #1
 800e036:	d901      	bls.n	800e03c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800e038:	2302      	movs	r3, #2
 800e03a:	e13d      	b.n	800e2b8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800e03c:	7bfb      	ldrb	r3, [r7, #15]
 800e03e:	4619      	mov	r1, r3
 800e040:	6878      	ldr	r0, [r7, #4]
 800e042:	f000 fc3d 	bl	800e8c0 <USBH_SelectInterface>
 800e046:	4603      	mov	r3, r0
 800e048:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800e04a:	7bbb      	ldrb	r3, [r7, #14]
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d001      	beq.n	800e054 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800e050:	2302      	movs	r3, #2
 800e052:	e131      	b.n	800e2b8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800e05a:	2050      	movs	r0, #80	; 0x50
 800e05c:	f002 fbf0 	bl	8010840 <malloc>
 800e060:	4603      	mov	r3, r0
 800e062:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e06a:	69db      	ldr	r3, [r3, #28]
 800e06c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800e06e:	68bb      	ldr	r3, [r7, #8]
 800e070:	2b00      	cmp	r3, #0
 800e072:	d101      	bne.n	800e078 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800e074:	2302      	movs	r3, #2
 800e076:	e11f      	b.n	800e2b8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800e078:	2250      	movs	r2, #80	; 0x50
 800e07a:	2100      	movs	r1, #0
 800e07c:	68b8      	ldr	r0, [r7, #8]
 800e07e:	f002 fc13 	bl	80108a8 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800e082:	7bfb      	ldrb	r3, [r7, #15]
 800e084:	687a      	ldr	r2, [r7, #4]
 800e086:	211a      	movs	r1, #26
 800e088:	fb01 f303 	mul.w	r3, r1, r3
 800e08c:	4413      	add	r3, r2
 800e08e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800e092:	781b      	ldrb	r3, [r3, #0]
 800e094:	b25b      	sxtb	r3, r3
 800e096:	2b00      	cmp	r3, #0
 800e098:	da15      	bge.n	800e0c6 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800e09a:	7bfb      	ldrb	r3, [r7, #15]
 800e09c:	687a      	ldr	r2, [r7, #4]
 800e09e:	211a      	movs	r1, #26
 800e0a0:	fb01 f303 	mul.w	r3, r1, r3
 800e0a4:	4413      	add	r3, r2
 800e0a6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800e0aa:	781a      	ldrb	r2, [r3, #0]
 800e0ac:	68bb      	ldr	r3, [r7, #8]
 800e0ae:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800e0b0:	7bfb      	ldrb	r3, [r7, #15]
 800e0b2:	687a      	ldr	r2, [r7, #4]
 800e0b4:	211a      	movs	r1, #26
 800e0b6:	fb01 f303 	mul.w	r3, r1, r3
 800e0ba:	4413      	add	r3, r2
 800e0bc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800e0c0:	881a      	ldrh	r2, [r3, #0]
 800e0c2:	68bb      	ldr	r3, [r7, #8]
 800e0c4:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800e0c6:	68bb      	ldr	r3, [r7, #8]
 800e0c8:	785b      	ldrb	r3, [r3, #1]
 800e0ca:	4619      	mov	r1, r3
 800e0cc:	6878      	ldr	r0, [r7, #4]
 800e0ce:	f001 fe36 	bl	800fd3e <USBH_AllocPipe>
 800e0d2:	4603      	mov	r3, r0
 800e0d4:	461a      	mov	r2, r3
 800e0d6:	68bb      	ldr	r3, [r7, #8]
 800e0d8:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800e0da:	68bb      	ldr	r3, [r7, #8]
 800e0dc:	7819      	ldrb	r1, [r3, #0]
 800e0de:	68bb      	ldr	r3, [r7, #8]
 800e0e0:	7858      	ldrb	r0, [r3, #1]
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e0ee:	68ba      	ldr	r2, [r7, #8]
 800e0f0:	8952      	ldrh	r2, [r2, #10]
 800e0f2:	9202      	str	r2, [sp, #8]
 800e0f4:	2203      	movs	r2, #3
 800e0f6:	9201      	str	r2, [sp, #4]
 800e0f8:	9300      	str	r3, [sp, #0]
 800e0fa:	4623      	mov	r3, r4
 800e0fc:	4602      	mov	r2, r0
 800e0fe:	6878      	ldr	r0, [r7, #4]
 800e100:	f001 fdee 	bl	800fce0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800e104:	68bb      	ldr	r3, [r7, #8]
 800e106:	781b      	ldrb	r3, [r3, #0]
 800e108:	2200      	movs	r2, #0
 800e10a:	4619      	mov	r1, r3
 800e10c:	6878      	ldr	r0, [r7, #4]
 800e10e:	f002 f8fb 	bl	8010308 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800e112:	2300      	movs	r3, #0
 800e114:	2200      	movs	r2, #0
 800e116:	210a      	movs	r1, #10
 800e118:	6878      	ldr	r0, [r7, #4]
 800e11a:	f000 fbed 	bl	800e8f8 <USBH_FindInterface>
 800e11e:	4603      	mov	r3, r0
 800e120:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800e122:	7bfb      	ldrb	r3, [r7, #15]
 800e124:	2bff      	cmp	r3, #255	; 0xff
 800e126:	d002      	beq.n	800e12e <USBH_CDC_InterfaceInit+0x11a>
 800e128:	7bfb      	ldrb	r3, [r7, #15]
 800e12a:	2b01      	cmp	r3, #1
 800e12c:	d901      	bls.n	800e132 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800e12e:	2302      	movs	r3, #2
 800e130:	e0c2      	b.n	800e2b8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800e132:	7bfb      	ldrb	r3, [r7, #15]
 800e134:	687a      	ldr	r2, [r7, #4]
 800e136:	211a      	movs	r1, #26
 800e138:	fb01 f303 	mul.w	r3, r1, r3
 800e13c:	4413      	add	r3, r2
 800e13e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800e142:	781b      	ldrb	r3, [r3, #0]
 800e144:	b25b      	sxtb	r3, r3
 800e146:	2b00      	cmp	r3, #0
 800e148:	da16      	bge.n	800e178 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800e14a:	7bfb      	ldrb	r3, [r7, #15]
 800e14c:	687a      	ldr	r2, [r7, #4]
 800e14e:	211a      	movs	r1, #26
 800e150:	fb01 f303 	mul.w	r3, r1, r3
 800e154:	4413      	add	r3, r2
 800e156:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800e15a:	781a      	ldrb	r2, [r3, #0]
 800e15c:	68bb      	ldr	r3, [r7, #8]
 800e15e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800e160:	7bfb      	ldrb	r3, [r7, #15]
 800e162:	687a      	ldr	r2, [r7, #4]
 800e164:	211a      	movs	r1, #26
 800e166:	fb01 f303 	mul.w	r3, r1, r3
 800e16a:	4413      	add	r3, r2
 800e16c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800e170:	881a      	ldrh	r2, [r3, #0]
 800e172:	68bb      	ldr	r3, [r7, #8]
 800e174:	835a      	strh	r2, [r3, #26]
 800e176:	e015      	b.n	800e1a4 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800e178:	7bfb      	ldrb	r3, [r7, #15]
 800e17a:	687a      	ldr	r2, [r7, #4]
 800e17c:	211a      	movs	r1, #26
 800e17e:	fb01 f303 	mul.w	r3, r1, r3
 800e182:	4413      	add	r3, r2
 800e184:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800e188:	781a      	ldrb	r2, [r3, #0]
 800e18a:	68bb      	ldr	r3, [r7, #8]
 800e18c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800e18e:	7bfb      	ldrb	r3, [r7, #15]
 800e190:	687a      	ldr	r2, [r7, #4]
 800e192:	211a      	movs	r1, #26
 800e194:	fb01 f303 	mul.w	r3, r1, r3
 800e198:	4413      	add	r3, r2
 800e19a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800e19e:	881a      	ldrh	r2, [r3, #0]
 800e1a0:	68bb      	ldr	r3, [r7, #8]
 800e1a2:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800e1a4:	7bfb      	ldrb	r3, [r7, #15]
 800e1a6:	687a      	ldr	r2, [r7, #4]
 800e1a8:	211a      	movs	r1, #26
 800e1aa:	fb01 f303 	mul.w	r3, r1, r3
 800e1ae:	4413      	add	r3, r2
 800e1b0:	f203 3356 	addw	r3, r3, #854	; 0x356
 800e1b4:	781b      	ldrb	r3, [r3, #0]
 800e1b6:	b25b      	sxtb	r3, r3
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	da16      	bge.n	800e1ea <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800e1bc:	7bfb      	ldrb	r3, [r7, #15]
 800e1be:	687a      	ldr	r2, [r7, #4]
 800e1c0:	211a      	movs	r1, #26
 800e1c2:	fb01 f303 	mul.w	r3, r1, r3
 800e1c6:	4413      	add	r3, r2
 800e1c8:	f203 3356 	addw	r3, r3, #854	; 0x356
 800e1cc:	781a      	ldrb	r2, [r3, #0]
 800e1ce:	68bb      	ldr	r3, [r7, #8]
 800e1d0:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800e1d2:	7bfb      	ldrb	r3, [r7, #15]
 800e1d4:	687a      	ldr	r2, [r7, #4]
 800e1d6:	211a      	movs	r1, #26
 800e1d8:	fb01 f303 	mul.w	r3, r1, r3
 800e1dc:	4413      	add	r3, r2
 800e1de:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800e1e2:	881a      	ldrh	r2, [r3, #0]
 800e1e4:	68bb      	ldr	r3, [r7, #8]
 800e1e6:	835a      	strh	r2, [r3, #26]
 800e1e8:	e015      	b.n	800e216 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800e1ea:	7bfb      	ldrb	r3, [r7, #15]
 800e1ec:	687a      	ldr	r2, [r7, #4]
 800e1ee:	211a      	movs	r1, #26
 800e1f0:	fb01 f303 	mul.w	r3, r1, r3
 800e1f4:	4413      	add	r3, r2
 800e1f6:	f203 3356 	addw	r3, r3, #854	; 0x356
 800e1fa:	781a      	ldrb	r2, [r3, #0]
 800e1fc:	68bb      	ldr	r3, [r7, #8]
 800e1fe:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800e200:	7bfb      	ldrb	r3, [r7, #15]
 800e202:	687a      	ldr	r2, [r7, #4]
 800e204:	211a      	movs	r1, #26
 800e206:	fb01 f303 	mul.w	r3, r1, r3
 800e20a:	4413      	add	r3, r2
 800e20c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800e210:	881a      	ldrh	r2, [r3, #0]
 800e212:	68bb      	ldr	r3, [r7, #8]
 800e214:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800e216:	68bb      	ldr	r3, [r7, #8]
 800e218:	7b9b      	ldrb	r3, [r3, #14]
 800e21a:	4619      	mov	r1, r3
 800e21c:	6878      	ldr	r0, [r7, #4]
 800e21e:	f001 fd8e 	bl	800fd3e <USBH_AllocPipe>
 800e222:	4603      	mov	r3, r0
 800e224:	461a      	mov	r2, r3
 800e226:	68bb      	ldr	r3, [r7, #8]
 800e228:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800e22a:	68bb      	ldr	r3, [r7, #8]
 800e22c:	7bdb      	ldrb	r3, [r3, #15]
 800e22e:	4619      	mov	r1, r3
 800e230:	6878      	ldr	r0, [r7, #4]
 800e232:	f001 fd84 	bl	800fd3e <USBH_AllocPipe>
 800e236:	4603      	mov	r3, r0
 800e238:	461a      	mov	r2, r3
 800e23a:	68bb      	ldr	r3, [r7, #8]
 800e23c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800e23e:	68bb      	ldr	r3, [r7, #8]
 800e240:	7b59      	ldrb	r1, [r3, #13]
 800e242:	68bb      	ldr	r3, [r7, #8]
 800e244:	7b98      	ldrb	r0, [r3, #14]
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e252:	68ba      	ldr	r2, [r7, #8]
 800e254:	8b12      	ldrh	r2, [r2, #24]
 800e256:	9202      	str	r2, [sp, #8]
 800e258:	2202      	movs	r2, #2
 800e25a:	9201      	str	r2, [sp, #4]
 800e25c:	9300      	str	r3, [sp, #0]
 800e25e:	4623      	mov	r3, r4
 800e260:	4602      	mov	r2, r0
 800e262:	6878      	ldr	r0, [r7, #4]
 800e264:	f001 fd3c 	bl	800fce0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800e268:	68bb      	ldr	r3, [r7, #8]
 800e26a:	7b19      	ldrb	r1, [r3, #12]
 800e26c:	68bb      	ldr	r3, [r7, #8]
 800e26e:	7bd8      	ldrb	r0, [r3, #15]
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e27c:	68ba      	ldr	r2, [r7, #8]
 800e27e:	8b52      	ldrh	r2, [r2, #26]
 800e280:	9202      	str	r2, [sp, #8]
 800e282:	2202      	movs	r2, #2
 800e284:	9201      	str	r2, [sp, #4]
 800e286:	9300      	str	r3, [sp, #0]
 800e288:	4623      	mov	r3, r4
 800e28a:	4602      	mov	r2, r0
 800e28c:	6878      	ldr	r0, [r7, #4]
 800e28e:	f001 fd27 	bl	800fce0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800e292:	68bb      	ldr	r3, [r7, #8]
 800e294:	2200      	movs	r2, #0
 800e296:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800e29a:	68bb      	ldr	r3, [r7, #8]
 800e29c:	7b5b      	ldrb	r3, [r3, #13]
 800e29e:	2200      	movs	r2, #0
 800e2a0:	4619      	mov	r1, r3
 800e2a2:	6878      	ldr	r0, [r7, #4]
 800e2a4:	f002 f830 	bl	8010308 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800e2a8:	68bb      	ldr	r3, [r7, #8]
 800e2aa:	7b1b      	ldrb	r3, [r3, #12]
 800e2ac:	2200      	movs	r2, #0
 800e2ae:	4619      	mov	r1, r3
 800e2b0:	6878      	ldr	r0, [r7, #4]
 800e2b2:	f002 f829 	bl	8010308 <USBH_LL_SetToggle>

  return USBH_OK;
 800e2b6:	2300      	movs	r3, #0
}
 800e2b8:	4618      	mov	r0, r3
 800e2ba:	3714      	adds	r7, #20
 800e2bc:	46bd      	mov	sp, r7
 800e2be:	bd90      	pop	{r4, r7, pc}

0800e2c0 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800e2c0:	b580      	push	{r7, lr}
 800e2c2:	b084      	sub	sp, #16
 800e2c4:	af00      	add	r7, sp, #0
 800e2c6:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e2ce:	69db      	ldr	r3, [r3, #28]
 800e2d0:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	781b      	ldrb	r3, [r3, #0]
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d00e      	beq.n	800e2f8 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	781b      	ldrb	r3, [r3, #0]
 800e2de:	4619      	mov	r1, r3
 800e2e0:	6878      	ldr	r0, [r7, #4]
 800e2e2:	f001 fd1c 	bl	800fd1e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	781b      	ldrb	r3, [r3, #0]
 800e2ea:	4619      	mov	r1, r3
 800e2ec:	6878      	ldr	r0, [r7, #4]
 800e2ee:	f001 fd47 	bl	800fd80 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	2200      	movs	r2, #0
 800e2f6:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	7b1b      	ldrb	r3, [r3, #12]
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d00e      	beq.n	800e31e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	7b1b      	ldrb	r3, [r3, #12]
 800e304:	4619      	mov	r1, r3
 800e306:	6878      	ldr	r0, [r7, #4]
 800e308:	f001 fd09 	bl	800fd1e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	7b1b      	ldrb	r3, [r3, #12]
 800e310:	4619      	mov	r1, r3
 800e312:	6878      	ldr	r0, [r7, #4]
 800e314:	f001 fd34 	bl	800fd80 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	2200      	movs	r2, #0
 800e31c:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	7b5b      	ldrb	r3, [r3, #13]
 800e322:	2b00      	cmp	r3, #0
 800e324:	d00e      	beq.n	800e344 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	7b5b      	ldrb	r3, [r3, #13]
 800e32a:	4619      	mov	r1, r3
 800e32c:	6878      	ldr	r0, [r7, #4]
 800e32e:	f001 fcf6 	bl	800fd1e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	7b5b      	ldrb	r3, [r3, #13]
 800e336:	4619      	mov	r1, r3
 800e338:	6878      	ldr	r0, [r7, #4]
 800e33a:	f001 fd21 	bl	800fd80 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	2200      	movs	r2, #0
 800e342:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e34a:	69db      	ldr	r3, [r3, #28]
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d00b      	beq.n	800e368 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e356:	69db      	ldr	r3, [r3, #28]
 800e358:	4618      	mov	r0, r3
 800e35a:	f002 fa79 	bl	8010850 <free>
    phost->pActiveClass->pData = 0U;
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e364:	2200      	movs	r2, #0
 800e366:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800e368:	2300      	movs	r3, #0
}
 800e36a:	4618      	mov	r0, r3
 800e36c:	3710      	adds	r7, #16
 800e36e:	46bd      	mov	sp, r7
 800e370:	bd80      	pop	{r7, pc}

0800e372 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800e372:	b580      	push	{r7, lr}
 800e374:	b084      	sub	sp, #16
 800e376:	af00      	add	r7, sp, #0
 800e378:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e380:	69db      	ldr	r3, [r3, #28]
 800e382:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	3340      	adds	r3, #64	; 0x40
 800e388:	4619      	mov	r1, r3
 800e38a:	6878      	ldr	r0, [r7, #4]
 800e38c:	f000 f8b1 	bl	800e4f2 <GetLineCoding>
 800e390:	4603      	mov	r3, r0
 800e392:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800e394:	7afb      	ldrb	r3, [r7, #11]
 800e396:	2b00      	cmp	r3, #0
 800e398:	d105      	bne.n	800e3a6 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e3a0:	2102      	movs	r1, #2
 800e3a2:	6878      	ldr	r0, [r7, #4]
 800e3a4:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800e3a6:	7afb      	ldrb	r3, [r7, #11]
}
 800e3a8:	4618      	mov	r0, r3
 800e3aa:	3710      	adds	r7, #16
 800e3ac:	46bd      	mov	sp, r7
 800e3ae:	bd80      	pop	{r7, pc}

0800e3b0 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800e3b0:	b580      	push	{r7, lr}
 800e3b2:	b084      	sub	sp, #16
 800e3b4:	af00      	add	r7, sp, #0
 800e3b6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800e3b8:	2301      	movs	r3, #1
 800e3ba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800e3bc:	2300      	movs	r3, #0
 800e3be:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e3c6:	69db      	ldr	r3, [r3, #28]
 800e3c8:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800e3ca:	68bb      	ldr	r3, [r7, #8]
 800e3cc:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800e3d0:	2b04      	cmp	r3, #4
 800e3d2:	d877      	bhi.n	800e4c4 <USBH_CDC_Process+0x114>
 800e3d4:	a201      	add	r2, pc, #4	; (adr r2, 800e3dc <USBH_CDC_Process+0x2c>)
 800e3d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3da:	bf00      	nop
 800e3dc:	0800e3f1 	.word	0x0800e3f1
 800e3e0:	0800e3f7 	.word	0x0800e3f7
 800e3e4:	0800e427 	.word	0x0800e427
 800e3e8:	0800e49b 	.word	0x0800e49b
 800e3ec:	0800e4a9 	.word	0x0800e4a9
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800e3f0:	2300      	movs	r3, #0
 800e3f2:	73fb      	strb	r3, [r7, #15]
      break;
 800e3f4:	e06d      	b.n	800e4d2 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800e3f6:	68bb      	ldr	r3, [r7, #8]
 800e3f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e3fa:	4619      	mov	r1, r3
 800e3fc:	6878      	ldr	r0, [r7, #4]
 800e3fe:	f000 f897 	bl	800e530 <SetLineCoding>
 800e402:	4603      	mov	r3, r0
 800e404:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800e406:	7bbb      	ldrb	r3, [r7, #14]
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d104      	bne.n	800e416 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800e40c:	68bb      	ldr	r3, [r7, #8]
 800e40e:	2202      	movs	r2, #2
 800e410:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800e414:	e058      	b.n	800e4c8 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800e416:	7bbb      	ldrb	r3, [r7, #14]
 800e418:	2b01      	cmp	r3, #1
 800e41a:	d055      	beq.n	800e4c8 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800e41c:	68bb      	ldr	r3, [r7, #8]
 800e41e:	2204      	movs	r2, #4
 800e420:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800e424:	e050      	b.n	800e4c8 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800e426:	68bb      	ldr	r3, [r7, #8]
 800e428:	3340      	adds	r3, #64	; 0x40
 800e42a:	4619      	mov	r1, r3
 800e42c:	6878      	ldr	r0, [r7, #4]
 800e42e:	f000 f860 	bl	800e4f2 <GetLineCoding>
 800e432:	4603      	mov	r3, r0
 800e434:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800e436:	7bbb      	ldrb	r3, [r7, #14]
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d126      	bne.n	800e48a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800e43c:	68bb      	ldr	r3, [r7, #8]
 800e43e:	2200      	movs	r2, #0
 800e440:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800e444:	68bb      	ldr	r3, [r7, #8]
 800e446:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800e44a:	68bb      	ldr	r3, [r7, #8]
 800e44c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e44e:	791b      	ldrb	r3, [r3, #4]
 800e450:	429a      	cmp	r2, r3
 800e452:	d13b      	bne.n	800e4cc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800e454:	68bb      	ldr	r3, [r7, #8]
 800e456:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800e45a:	68bb      	ldr	r3, [r7, #8]
 800e45c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e45e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800e460:	429a      	cmp	r2, r3
 800e462:	d133      	bne.n	800e4cc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800e464:	68bb      	ldr	r3, [r7, #8]
 800e466:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800e46a:	68bb      	ldr	r3, [r7, #8]
 800e46c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e46e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800e470:	429a      	cmp	r2, r3
 800e472:	d12b      	bne.n	800e4cc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800e474:	68bb      	ldr	r3, [r7, #8]
 800e476:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e478:	68bb      	ldr	r3, [r7, #8]
 800e47a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e47c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800e47e:	429a      	cmp	r2, r3
 800e480:	d124      	bne.n	800e4cc <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800e482:	6878      	ldr	r0, [r7, #4]
 800e484:	f000 f95a 	bl	800e73c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800e488:	e020      	b.n	800e4cc <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800e48a:	7bbb      	ldrb	r3, [r7, #14]
 800e48c:	2b01      	cmp	r3, #1
 800e48e:	d01d      	beq.n	800e4cc <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800e490:	68bb      	ldr	r3, [r7, #8]
 800e492:	2204      	movs	r2, #4
 800e494:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800e498:	e018      	b.n	800e4cc <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800e49a:	6878      	ldr	r0, [r7, #4]
 800e49c:	f000 f867 	bl	800e56e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800e4a0:	6878      	ldr	r0, [r7, #4]
 800e4a2:	f000 f8dc 	bl	800e65e <CDC_ProcessReception>
      break;
 800e4a6:	e014      	b.n	800e4d2 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800e4a8:	2100      	movs	r1, #0
 800e4aa:	6878      	ldr	r0, [r7, #4]
 800e4ac:	f000 ffe5 	bl	800f47a <USBH_ClrFeature>
 800e4b0:	4603      	mov	r3, r0
 800e4b2:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800e4b4:	7bbb      	ldrb	r3, [r7, #14]
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d10a      	bne.n	800e4d0 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800e4ba:	68bb      	ldr	r3, [r7, #8]
 800e4bc:	2200      	movs	r2, #0
 800e4be:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800e4c2:	e005      	b.n	800e4d0 <USBH_CDC_Process+0x120>

    default:
      break;
 800e4c4:	bf00      	nop
 800e4c6:	e004      	b.n	800e4d2 <USBH_CDC_Process+0x122>
      break;
 800e4c8:	bf00      	nop
 800e4ca:	e002      	b.n	800e4d2 <USBH_CDC_Process+0x122>
      break;
 800e4cc:	bf00      	nop
 800e4ce:	e000      	b.n	800e4d2 <USBH_CDC_Process+0x122>
      break;
 800e4d0:	bf00      	nop

  }

  return status;
 800e4d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e4d4:	4618      	mov	r0, r3
 800e4d6:	3710      	adds	r7, #16
 800e4d8:	46bd      	mov	sp, r7
 800e4da:	bd80      	pop	{r7, pc}

0800e4dc <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800e4dc:	b480      	push	{r7}
 800e4de:	b083      	sub	sp, #12
 800e4e0:	af00      	add	r7, sp, #0
 800e4e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800e4e4:	2300      	movs	r3, #0
}
 800e4e6:	4618      	mov	r0, r3
 800e4e8:	370c      	adds	r7, #12
 800e4ea:	46bd      	mov	sp, r7
 800e4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4f0:	4770      	bx	lr

0800e4f2 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800e4f2:	b580      	push	{r7, lr}
 800e4f4:	b082      	sub	sp, #8
 800e4f6:	af00      	add	r7, sp, #0
 800e4f8:	6078      	str	r0, [r7, #4]
 800e4fa:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	22a1      	movs	r2, #161	; 0xa1
 800e500:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	2221      	movs	r2, #33	; 0x21
 800e506:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	2200      	movs	r2, #0
 800e50c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	2200      	movs	r2, #0
 800e512:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	2207      	movs	r2, #7
 800e518:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800e51a:	683b      	ldr	r3, [r7, #0]
 800e51c:	2207      	movs	r2, #7
 800e51e:	4619      	mov	r1, r3
 800e520:	6878      	ldr	r0, [r7, #4]
 800e522:	f001 f98a 	bl	800f83a <USBH_CtlReq>
 800e526:	4603      	mov	r3, r0
}
 800e528:	4618      	mov	r0, r3
 800e52a:	3708      	adds	r7, #8
 800e52c:	46bd      	mov	sp, r7
 800e52e:	bd80      	pop	{r7, pc}

0800e530 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800e530:	b580      	push	{r7, lr}
 800e532:	b082      	sub	sp, #8
 800e534:	af00      	add	r7, sp, #0
 800e536:	6078      	str	r0, [r7, #4]
 800e538:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	2221      	movs	r2, #33	; 0x21
 800e53e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	2220      	movs	r2, #32
 800e544:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	2200      	movs	r2, #0
 800e54a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	2200      	movs	r2, #0
 800e550:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	2207      	movs	r2, #7
 800e556:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800e558:	683b      	ldr	r3, [r7, #0]
 800e55a:	2207      	movs	r2, #7
 800e55c:	4619      	mov	r1, r3
 800e55e:	6878      	ldr	r0, [r7, #4]
 800e560:	f001 f96b 	bl	800f83a <USBH_CtlReq>
 800e564:	4603      	mov	r3, r0
}
 800e566:	4618      	mov	r0, r3
 800e568:	3708      	adds	r7, #8
 800e56a:	46bd      	mov	sp, r7
 800e56c:	bd80      	pop	{r7, pc}

0800e56e <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800e56e:	b580      	push	{r7, lr}
 800e570:	b086      	sub	sp, #24
 800e572:	af02      	add	r7, sp, #8
 800e574:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e57c:	69db      	ldr	r3, [r3, #28]
 800e57e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800e580:	2300      	movs	r3, #0
 800e582:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800e58a:	2b01      	cmp	r3, #1
 800e58c:	d002      	beq.n	800e594 <CDC_ProcessTransmission+0x26>
 800e58e:	2b02      	cmp	r3, #2
 800e590:	d025      	beq.n	800e5de <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 800e592:	e060      	b.n	800e656 <CDC_ProcessTransmission+0xe8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e598:	68fa      	ldr	r2, [r7, #12]
 800e59a:	8b12      	ldrh	r2, [r2, #24]
 800e59c:	4293      	cmp	r3, r2
 800e59e:	d90c      	bls.n	800e5ba <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	69d9      	ldr	r1, [r3, #28]
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	8b1a      	ldrh	r2, [r3, #24]
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	7b58      	ldrb	r0, [r3, #13]
 800e5ac:	2301      	movs	r3, #1
 800e5ae:	9300      	str	r3, [sp, #0]
 800e5b0:	4603      	mov	r3, r0
 800e5b2:	6878      	ldr	r0, [r7, #4]
 800e5b4:	f001 fb51 	bl	800fc5a <USBH_BulkSendData>
 800e5b8:	e00c      	b.n	800e5d4 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800e5c2:	b29a      	uxth	r2, r3
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	7b58      	ldrb	r0, [r3, #13]
 800e5c8:	2301      	movs	r3, #1
 800e5ca:	9300      	str	r3, [sp, #0]
 800e5cc:	4603      	mov	r3, r0
 800e5ce:	6878      	ldr	r0, [r7, #4]
 800e5d0:	f001 fb43 	bl	800fc5a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	2202      	movs	r2, #2
 800e5d8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800e5dc:	e03b      	b.n	800e656 <CDC_ProcessTransmission+0xe8>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	7b5b      	ldrb	r3, [r3, #13]
 800e5e2:	4619      	mov	r1, r3
 800e5e4:	6878      	ldr	r0, [r7, #4]
 800e5e6:	f001 fe65 	bl	80102b4 <USBH_LL_GetURBState>
 800e5ea:	4603      	mov	r3, r0
 800e5ec:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800e5ee:	7afb      	ldrb	r3, [r7, #11]
 800e5f0:	2b01      	cmp	r3, #1
 800e5f2:	d128      	bne.n	800e646 <CDC_ProcessTransmission+0xd8>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5f8:	68fa      	ldr	r2, [r7, #12]
 800e5fa:	8b12      	ldrh	r2, [r2, #24]
 800e5fc:	4293      	cmp	r3, r2
 800e5fe:	d90e      	bls.n	800e61e <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e604:	68fa      	ldr	r2, [r7, #12]
 800e606:	8b12      	ldrh	r2, [r2, #24]
 800e608:	1a9a      	subs	r2, r3, r2
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	69db      	ldr	r3, [r3, #28]
 800e612:	68fa      	ldr	r2, [r7, #12]
 800e614:	8b12      	ldrh	r2, [r2, #24]
 800e616:	441a      	add	r2, r3
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	61da      	str	r2, [r3, #28]
 800e61c:	e002      	b.n	800e624 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	2200      	movs	r2, #0
 800e622:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d004      	beq.n	800e636 <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	2201      	movs	r2, #1
 800e630:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800e634:	e00e      	b.n	800e654 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	2200      	movs	r2, #0
 800e63a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800e63e:	6878      	ldr	r0, [r7, #4]
 800e640:	f000 f868 	bl	800e714 <USBH_CDC_TransmitCallback>
      break;
 800e644:	e006      	b.n	800e654 <CDC_ProcessTransmission+0xe6>
        if (URB_Status == USBH_URB_NOTREADY)
 800e646:	7afb      	ldrb	r3, [r7, #11]
 800e648:	2b02      	cmp	r3, #2
 800e64a:	d103      	bne.n	800e654 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	2201      	movs	r2, #1
 800e650:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800e654:	bf00      	nop
  }
}
 800e656:	bf00      	nop
 800e658:	3710      	adds	r7, #16
 800e65a:	46bd      	mov	sp, r7
 800e65c:	bd80      	pop	{r7, pc}

0800e65e <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800e65e:	b580      	push	{r7, lr}
 800e660:	b086      	sub	sp, #24
 800e662:	af00      	add	r7, sp, #0
 800e664:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e66c:	69db      	ldr	r3, [r3, #28]
 800e66e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800e670:	2300      	movs	r3, #0
 800e672:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800e674:	697b      	ldr	r3, [r7, #20]
 800e676:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800e67a:	2b03      	cmp	r3, #3
 800e67c:	d002      	beq.n	800e684 <CDC_ProcessReception+0x26>
 800e67e:	2b04      	cmp	r3, #4
 800e680:	d00e      	beq.n	800e6a0 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800e682:	e043      	b.n	800e70c <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 800e684:	697b      	ldr	r3, [r7, #20]
 800e686:	6a19      	ldr	r1, [r3, #32]
 800e688:	697b      	ldr	r3, [r7, #20]
 800e68a:	8b5a      	ldrh	r2, [r3, #26]
 800e68c:	697b      	ldr	r3, [r7, #20]
 800e68e:	7b1b      	ldrb	r3, [r3, #12]
 800e690:	6878      	ldr	r0, [r7, #4]
 800e692:	f001 fb07 	bl	800fca4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800e696:	697b      	ldr	r3, [r7, #20]
 800e698:	2204      	movs	r2, #4
 800e69a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800e69e:	e035      	b.n	800e70c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800e6a0:	697b      	ldr	r3, [r7, #20]
 800e6a2:	7b1b      	ldrb	r3, [r3, #12]
 800e6a4:	4619      	mov	r1, r3
 800e6a6:	6878      	ldr	r0, [r7, #4]
 800e6a8:	f001 fe04 	bl	80102b4 <USBH_LL_GetURBState>
 800e6ac:	4603      	mov	r3, r0
 800e6ae:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800e6b0:	7cfb      	ldrb	r3, [r7, #19]
 800e6b2:	2b01      	cmp	r3, #1
 800e6b4:	d129      	bne.n	800e70a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800e6b6:	697b      	ldr	r3, [r7, #20]
 800e6b8:	7b1b      	ldrb	r3, [r3, #12]
 800e6ba:	4619      	mov	r1, r3
 800e6bc:	6878      	ldr	r0, [r7, #4]
 800e6be:	f001 fd67 	bl	8010190 <USBH_LL_GetLastXferSize>
 800e6c2:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800e6c4:	697b      	ldr	r3, [r7, #20]
 800e6c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6c8:	68fa      	ldr	r2, [r7, #12]
 800e6ca:	429a      	cmp	r2, r3
 800e6cc:	d016      	beq.n	800e6fc <CDC_ProcessReception+0x9e>
 800e6ce:	697b      	ldr	r3, [r7, #20]
 800e6d0:	8b5b      	ldrh	r3, [r3, #26]
 800e6d2:	461a      	mov	r2, r3
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	4293      	cmp	r3, r2
 800e6d8:	d910      	bls.n	800e6fc <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800e6da:	697b      	ldr	r3, [r7, #20]
 800e6dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	1ad2      	subs	r2, r2, r3
 800e6e2:	697b      	ldr	r3, [r7, #20]
 800e6e4:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800e6e6:	697b      	ldr	r3, [r7, #20]
 800e6e8:	6a1a      	ldr	r2, [r3, #32]
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	441a      	add	r2, r3
 800e6ee:	697b      	ldr	r3, [r7, #20]
 800e6f0:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800e6f2:	697b      	ldr	r3, [r7, #20]
 800e6f4:	2203      	movs	r2, #3
 800e6f6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800e6fa:	e006      	b.n	800e70a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800e6fc:	697b      	ldr	r3, [r7, #20]
 800e6fe:	2200      	movs	r2, #0
 800e700:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800e704:	6878      	ldr	r0, [r7, #4]
 800e706:	f000 f80f 	bl	800e728 <USBH_CDC_ReceiveCallback>
      break;
 800e70a:	bf00      	nop
  }
}
 800e70c:	bf00      	nop
 800e70e:	3718      	adds	r7, #24
 800e710:	46bd      	mov	sp, r7
 800e712:	bd80      	pop	{r7, pc}

0800e714 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800e714:	b480      	push	{r7}
 800e716:	b083      	sub	sp, #12
 800e718:	af00      	add	r7, sp, #0
 800e71a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800e71c:	bf00      	nop
 800e71e:	370c      	adds	r7, #12
 800e720:	46bd      	mov	sp, r7
 800e722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e726:	4770      	bx	lr

0800e728 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800e728:	b480      	push	{r7}
 800e72a:	b083      	sub	sp, #12
 800e72c:	af00      	add	r7, sp, #0
 800e72e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800e730:	bf00      	nop
 800e732:	370c      	adds	r7, #12
 800e734:	46bd      	mov	sp, r7
 800e736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e73a:	4770      	bx	lr

0800e73c <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800e73c:	b480      	push	{r7}
 800e73e:	b083      	sub	sp, #12
 800e740:	af00      	add	r7, sp, #0
 800e742:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800e744:	bf00      	nop
 800e746:	370c      	adds	r7, #12
 800e748:	46bd      	mov	sp, r7
 800e74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e74e:	4770      	bx	lr

0800e750 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800e750:	b580      	push	{r7, lr}
 800e752:	b084      	sub	sp, #16
 800e754:	af00      	add	r7, sp, #0
 800e756:	60f8      	str	r0, [r7, #12]
 800e758:	60b9      	str	r1, [r7, #8]
 800e75a:	4613      	mov	r3, r2
 800e75c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	2b00      	cmp	r3, #0
 800e762:	d101      	bne.n	800e768 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800e764:	2302      	movs	r3, #2
 800e766:	e029      	b.n	800e7bc <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	79fa      	ldrb	r2, [r7, #7]
 800e76c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	2200      	movs	r2, #0
 800e774:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	2200      	movs	r2, #0
 800e77c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800e780:	68f8      	ldr	r0, [r7, #12]
 800e782:	f000 f81f 	bl	800e7c4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	2200      	movs	r2, #0
 800e78a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	2200      	movs	r2, #0
 800e792:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	2200      	movs	r2, #0
 800e79a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	2200      	movs	r2, #0
 800e7a2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800e7a6:	68bb      	ldr	r3, [r7, #8]
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d003      	beq.n	800e7b4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	68ba      	ldr	r2, [r7, #8]
 800e7b0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800e7b4:	68f8      	ldr	r0, [r7, #12]
 800e7b6:	f001 fc39 	bl	801002c <USBH_LL_Init>

  return USBH_OK;
 800e7ba:	2300      	movs	r3, #0
}
 800e7bc:	4618      	mov	r0, r3
 800e7be:	3710      	adds	r7, #16
 800e7c0:	46bd      	mov	sp, r7
 800e7c2:	bd80      	pop	{r7, pc}

0800e7c4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800e7c4:	b480      	push	{r7}
 800e7c6:	b085      	sub	sp, #20
 800e7c8:	af00      	add	r7, sp, #0
 800e7ca:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800e7cc:	2300      	movs	r3, #0
 800e7ce:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800e7d0:	2300      	movs	r3, #0
 800e7d2:	60fb      	str	r3, [r7, #12]
 800e7d4:	e009      	b.n	800e7ea <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800e7d6:	687a      	ldr	r2, [r7, #4]
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	33e0      	adds	r3, #224	; 0xe0
 800e7dc:	009b      	lsls	r3, r3, #2
 800e7de:	4413      	add	r3, r2
 800e7e0:	2200      	movs	r2, #0
 800e7e2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	3301      	adds	r3, #1
 800e7e8:	60fb      	str	r3, [r7, #12]
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	2b0e      	cmp	r3, #14
 800e7ee:	d9f2      	bls.n	800e7d6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800e7f0:	2300      	movs	r3, #0
 800e7f2:	60fb      	str	r3, [r7, #12]
 800e7f4:	e009      	b.n	800e80a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800e7f6:	687a      	ldr	r2, [r7, #4]
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	4413      	add	r3, r2
 800e7fc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800e800:	2200      	movs	r2, #0
 800e802:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	3301      	adds	r3, #1
 800e808:	60fb      	str	r3, [r7, #12]
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e810:	d3f1      	bcc.n	800e7f6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	2200      	movs	r2, #0
 800e816:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	2200      	movs	r2, #0
 800e81c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	2201      	movs	r2, #1
 800e822:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	2200      	movs	r2, #0
 800e828:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	2201      	movs	r2, #1
 800e830:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	2240      	movs	r2, #64	; 0x40
 800e836:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	2200      	movs	r2, #0
 800e83c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	2200      	movs	r2, #0
 800e842:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	2201      	movs	r2, #1
 800e84a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	2200      	movs	r2, #0
 800e852:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	2200      	movs	r2, #0
 800e85a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800e85e:	2300      	movs	r3, #0
}
 800e860:	4618      	mov	r0, r3
 800e862:	3714      	adds	r7, #20
 800e864:	46bd      	mov	sp, r7
 800e866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e86a:	4770      	bx	lr

0800e86c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800e86c:	b480      	push	{r7}
 800e86e:	b085      	sub	sp, #20
 800e870:	af00      	add	r7, sp, #0
 800e872:	6078      	str	r0, [r7, #4]
 800e874:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800e876:	2300      	movs	r3, #0
 800e878:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800e87a:	683b      	ldr	r3, [r7, #0]
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d016      	beq.n	800e8ae <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800e886:	2b00      	cmp	r3, #0
 800e888:	d10e      	bne.n	800e8a8 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800e890:	1c59      	adds	r1, r3, #1
 800e892:	687a      	ldr	r2, [r7, #4]
 800e894:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800e898:	687a      	ldr	r2, [r7, #4]
 800e89a:	33de      	adds	r3, #222	; 0xde
 800e89c:	6839      	ldr	r1, [r7, #0]
 800e89e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800e8a2:	2300      	movs	r3, #0
 800e8a4:	73fb      	strb	r3, [r7, #15]
 800e8a6:	e004      	b.n	800e8b2 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800e8a8:	2302      	movs	r3, #2
 800e8aa:	73fb      	strb	r3, [r7, #15]
 800e8ac:	e001      	b.n	800e8b2 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800e8ae:	2302      	movs	r3, #2
 800e8b0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800e8b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8b4:	4618      	mov	r0, r3
 800e8b6:	3714      	adds	r7, #20
 800e8b8:	46bd      	mov	sp, r7
 800e8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8be:	4770      	bx	lr

0800e8c0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800e8c0:	b480      	push	{r7}
 800e8c2:	b085      	sub	sp, #20
 800e8c4:	af00      	add	r7, sp, #0
 800e8c6:	6078      	str	r0, [r7, #4]
 800e8c8:	460b      	mov	r3, r1
 800e8ca:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800e8cc:	2300      	movs	r3, #0
 800e8ce:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800e8d6:	78fa      	ldrb	r2, [r7, #3]
 800e8d8:	429a      	cmp	r2, r3
 800e8da:	d204      	bcs.n	800e8e6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	78fa      	ldrb	r2, [r7, #3]
 800e8e0:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800e8e4:	e001      	b.n	800e8ea <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800e8e6:	2302      	movs	r3, #2
 800e8e8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800e8ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8ec:	4618      	mov	r0, r3
 800e8ee:	3714      	adds	r7, #20
 800e8f0:	46bd      	mov	sp, r7
 800e8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8f6:	4770      	bx	lr

0800e8f8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800e8f8:	b480      	push	{r7}
 800e8fa:	b087      	sub	sp, #28
 800e8fc:	af00      	add	r7, sp, #0
 800e8fe:	6078      	str	r0, [r7, #4]
 800e900:	4608      	mov	r0, r1
 800e902:	4611      	mov	r1, r2
 800e904:	461a      	mov	r2, r3
 800e906:	4603      	mov	r3, r0
 800e908:	70fb      	strb	r3, [r7, #3]
 800e90a:	460b      	mov	r3, r1
 800e90c:	70bb      	strb	r3, [r7, #2]
 800e90e:	4613      	mov	r3, r2
 800e910:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800e912:	2300      	movs	r3, #0
 800e914:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800e916:	2300      	movs	r3, #0
 800e918:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800e920:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800e922:	e025      	b.n	800e970 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800e924:	7dfb      	ldrb	r3, [r7, #23]
 800e926:	221a      	movs	r2, #26
 800e928:	fb02 f303 	mul.w	r3, r2, r3
 800e92c:	3308      	adds	r3, #8
 800e92e:	68fa      	ldr	r2, [r7, #12]
 800e930:	4413      	add	r3, r2
 800e932:	3302      	adds	r3, #2
 800e934:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800e936:	693b      	ldr	r3, [r7, #16]
 800e938:	795b      	ldrb	r3, [r3, #5]
 800e93a:	78fa      	ldrb	r2, [r7, #3]
 800e93c:	429a      	cmp	r2, r3
 800e93e:	d002      	beq.n	800e946 <USBH_FindInterface+0x4e>
 800e940:	78fb      	ldrb	r3, [r7, #3]
 800e942:	2bff      	cmp	r3, #255	; 0xff
 800e944:	d111      	bne.n	800e96a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800e946:	693b      	ldr	r3, [r7, #16]
 800e948:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800e94a:	78ba      	ldrb	r2, [r7, #2]
 800e94c:	429a      	cmp	r2, r3
 800e94e:	d002      	beq.n	800e956 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800e950:	78bb      	ldrb	r3, [r7, #2]
 800e952:	2bff      	cmp	r3, #255	; 0xff
 800e954:	d109      	bne.n	800e96a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800e956:	693b      	ldr	r3, [r7, #16]
 800e958:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800e95a:	787a      	ldrb	r2, [r7, #1]
 800e95c:	429a      	cmp	r2, r3
 800e95e:	d002      	beq.n	800e966 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800e960:	787b      	ldrb	r3, [r7, #1]
 800e962:	2bff      	cmp	r3, #255	; 0xff
 800e964:	d101      	bne.n	800e96a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800e966:	7dfb      	ldrb	r3, [r7, #23]
 800e968:	e006      	b.n	800e978 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800e96a:	7dfb      	ldrb	r3, [r7, #23]
 800e96c:	3301      	adds	r3, #1
 800e96e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800e970:	7dfb      	ldrb	r3, [r7, #23]
 800e972:	2b01      	cmp	r3, #1
 800e974:	d9d6      	bls.n	800e924 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800e976:	23ff      	movs	r3, #255	; 0xff
}
 800e978:	4618      	mov	r0, r3
 800e97a:	371c      	adds	r7, #28
 800e97c:	46bd      	mov	sp, r7
 800e97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e982:	4770      	bx	lr

0800e984 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800e984:	b580      	push	{r7, lr}
 800e986:	b082      	sub	sp, #8
 800e988:	af00      	add	r7, sp, #0
 800e98a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800e98c:	6878      	ldr	r0, [r7, #4]
 800e98e:	f001 fb89 	bl	80100a4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800e992:	2101      	movs	r1, #1
 800e994:	6878      	ldr	r0, [r7, #4]
 800e996:	f001 fca0 	bl	80102da <USBH_LL_DriverVBUS>

  return USBH_OK;
 800e99a:	2300      	movs	r3, #0
}
 800e99c:	4618      	mov	r0, r3
 800e99e:	3708      	adds	r7, #8
 800e9a0:	46bd      	mov	sp, r7
 800e9a2:	bd80      	pop	{r7, pc}

0800e9a4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800e9a4:	b580      	push	{r7, lr}
 800e9a6:	b088      	sub	sp, #32
 800e9a8:	af04      	add	r7, sp, #16
 800e9aa:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800e9ac:	2302      	movs	r3, #2
 800e9ae:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800e9b0:	2300      	movs	r3, #0
 800e9b2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800e9ba:	b2db      	uxtb	r3, r3
 800e9bc:	2b01      	cmp	r3, #1
 800e9be:	d102      	bne.n	800e9c6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	2203      	movs	r2, #3
 800e9c4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	781b      	ldrb	r3, [r3, #0]
 800e9ca:	b2db      	uxtb	r3, r3
 800e9cc:	2b0b      	cmp	r3, #11
 800e9ce:	f200 81b3 	bhi.w	800ed38 <USBH_Process+0x394>
 800e9d2:	a201      	add	r2, pc, #4	; (adr r2, 800e9d8 <USBH_Process+0x34>)
 800e9d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9d8:	0800ea09 	.word	0x0800ea09
 800e9dc:	0800ea3b 	.word	0x0800ea3b
 800e9e0:	0800eaa3 	.word	0x0800eaa3
 800e9e4:	0800ecd3 	.word	0x0800ecd3
 800e9e8:	0800ed39 	.word	0x0800ed39
 800e9ec:	0800eb47 	.word	0x0800eb47
 800e9f0:	0800ec79 	.word	0x0800ec79
 800e9f4:	0800eb7d 	.word	0x0800eb7d
 800e9f8:	0800eb9d 	.word	0x0800eb9d
 800e9fc:	0800ebbd 	.word	0x0800ebbd
 800ea00:	0800ebeb 	.word	0x0800ebeb
 800ea04:	0800ecbb 	.word	0x0800ecbb
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800ea0e:	b2db      	uxtb	r3, r3
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	f000 8193 	beq.w	800ed3c <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	2201      	movs	r2, #1
 800ea1a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800ea1c:	20c8      	movs	r0, #200	; 0xc8
 800ea1e:	f001 fca6 	bl	801036e <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800ea22:	6878      	ldr	r0, [r7, #4]
 800ea24:	f001 fb99 	bl	801015a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	2200      	movs	r2, #0
 800ea2c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	2200      	movs	r2, #0
 800ea34:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800ea38:	e180      	b.n	800ed3c <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800ea40:	2b01      	cmp	r3, #1
 800ea42:	d107      	bne.n	800ea54 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	2200      	movs	r2, #0
 800ea48:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	2202      	movs	r2, #2
 800ea50:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ea52:	e182      	b.n	800ed5a <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800ea5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ea5e:	d914      	bls.n	800ea8a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800ea66:	3301      	adds	r3, #1
 800ea68:	b2da      	uxtb	r2, r3
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800ea76:	2b03      	cmp	r3, #3
 800ea78:	d903      	bls.n	800ea82 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	220d      	movs	r2, #13
 800ea7e:	701a      	strb	r2, [r3, #0]
      break;
 800ea80:	e16b      	b.n	800ed5a <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	2200      	movs	r2, #0
 800ea86:	701a      	strb	r2, [r3, #0]
      break;
 800ea88:	e167      	b.n	800ed5a <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800ea90:	f103 020a 	add.w	r2, r3, #10
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800ea9a:	200a      	movs	r0, #10
 800ea9c:	f001 fc67 	bl	801036e <USBH_Delay>
      break;
 800eaa0:	e15b      	b.n	800ed5a <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d005      	beq.n	800eab8 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800eab2:	2104      	movs	r1, #4
 800eab4:	6878      	ldr	r0, [r7, #4]
 800eab6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800eab8:	2064      	movs	r0, #100	; 0x64
 800eaba:	f001 fc58 	bl	801036e <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800eabe:	6878      	ldr	r0, [r7, #4]
 800eac0:	f001 fb26 	bl	8010110 <USBH_LL_GetSpeed>
 800eac4:	4603      	mov	r3, r0
 800eac6:	461a      	mov	r2, r3
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	2205      	movs	r2, #5
 800ead2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800ead4:	2100      	movs	r1, #0
 800ead6:	6878      	ldr	r0, [r7, #4]
 800ead8:	f001 f931 	bl	800fd3e <USBH_AllocPipe>
 800eadc:	4603      	mov	r3, r0
 800eade:	461a      	mov	r2, r3
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800eae4:	2180      	movs	r1, #128	; 0x80
 800eae6:	6878      	ldr	r0, [r7, #4]
 800eae8:	f001 f929 	bl	800fd3e <USBH_AllocPipe>
 800eaec:	4603      	mov	r3, r0
 800eaee:	461a      	mov	r2, r3
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	7919      	ldrb	r1, [r3, #4]
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800eb04:	687a      	ldr	r2, [r7, #4]
 800eb06:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800eb08:	b292      	uxth	r2, r2
 800eb0a:	9202      	str	r2, [sp, #8]
 800eb0c:	2200      	movs	r2, #0
 800eb0e:	9201      	str	r2, [sp, #4]
 800eb10:	9300      	str	r3, [sp, #0]
 800eb12:	4603      	mov	r3, r0
 800eb14:	2280      	movs	r2, #128	; 0x80
 800eb16:	6878      	ldr	r0, [r7, #4]
 800eb18:	f001 f8e2 	bl	800fce0 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	7959      	ldrb	r1, [r3, #5]
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800eb2c:	687a      	ldr	r2, [r7, #4]
 800eb2e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800eb30:	b292      	uxth	r2, r2
 800eb32:	9202      	str	r2, [sp, #8]
 800eb34:	2200      	movs	r2, #0
 800eb36:	9201      	str	r2, [sp, #4]
 800eb38:	9300      	str	r3, [sp, #0]
 800eb3a:	4603      	mov	r3, r0
 800eb3c:	2200      	movs	r2, #0
 800eb3e:	6878      	ldr	r0, [r7, #4]
 800eb40:	f001 f8ce 	bl	800fce0 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800eb44:	e109      	b.n	800ed5a <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800eb46:	6878      	ldr	r0, [r7, #4]
 800eb48:	f000 f90c 	bl	800ed64 <USBH_HandleEnum>
 800eb4c:	4603      	mov	r3, r0
 800eb4e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800eb50:	7bbb      	ldrb	r3, [r7, #14]
 800eb52:	b2db      	uxtb	r3, r3
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	f040 80f3 	bne.w	800ed40 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	2200      	movs	r2, #0
 800eb5e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800eb68:	2b01      	cmp	r3, #1
 800eb6a:	d103      	bne.n	800eb74 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	2208      	movs	r2, #8
 800eb70:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800eb72:	e0e5      	b.n	800ed40 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	2207      	movs	r2, #7
 800eb78:	701a      	strb	r2, [r3, #0]
      break;
 800eb7a:	e0e1      	b.n	800ed40 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	f000 80de 	beq.w	800ed44 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800eb8e:	2101      	movs	r1, #1
 800eb90:	6878      	ldr	r0, [r7, #4]
 800eb92:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	2208      	movs	r2, #8
 800eb98:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800eb9a:	e0d3      	b.n	800ed44 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800eba2:	b29b      	uxth	r3, r3
 800eba4:	4619      	mov	r1, r3
 800eba6:	6878      	ldr	r0, [r7, #4]
 800eba8:	f000 fc20 	bl	800f3ec <USBH_SetCfg>
 800ebac:	4603      	mov	r3, r0
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	f040 80ca 	bne.w	800ed48 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	2209      	movs	r2, #9
 800ebb8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ebba:	e0c5      	b.n	800ed48 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800ebc2:	f003 0320 	and.w	r3, r3, #32
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d00b      	beq.n	800ebe2 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800ebca:	2101      	movs	r1, #1
 800ebcc:	6878      	ldr	r0, [r7, #4]
 800ebce:	f000 fc30 	bl	800f432 <USBH_SetFeature>
 800ebd2:	4603      	mov	r3, r0
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	f040 80b9 	bne.w	800ed4c <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	220a      	movs	r2, #10
 800ebde:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ebe0:	e0b4      	b.n	800ed4c <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	220a      	movs	r2, #10
 800ebe6:	701a      	strb	r2, [r3, #0]
      break;
 800ebe8:	e0b0      	b.n	800ed4c <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	f000 80ad 	beq.w	800ed50 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	2200      	movs	r2, #0
 800ebfa:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800ebfe:	2300      	movs	r3, #0
 800ec00:	73fb      	strb	r3, [r7, #15]
 800ec02:	e016      	b.n	800ec32 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800ec04:	7bfa      	ldrb	r2, [r7, #15]
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	32de      	adds	r2, #222	; 0xde
 800ec0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec0e:	791a      	ldrb	r2, [r3, #4]
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800ec16:	429a      	cmp	r2, r3
 800ec18:	d108      	bne.n	800ec2c <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800ec1a:	7bfa      	ldrb	r2, [r7, #15]
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	32de      	adds	r2, #222	; 0xde
 800ec20:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800ec2a:	e005      	b.n	800ec38 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800ec2c:	7bfb      	ldrb	r3, [r7, #15]
 800ec2e:	3301      	adds	r3, #1
 800ec30:	73fb      	strb	r3, [r7, #15]
 800ec32:	7bfb      	ldrb	r3, [r7, #15]
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d0e5      	beq.n	800ec04 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d016      	beq.n	800ec70 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ec48:	689b      	ldr	r3, [r3, #8]
 800ec4a:	6878      	ldr	r0, [r7, #4]
 800ec4c:	4798      	blx	r3
 800ec4e:	4603      	mov	r3, r0
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d109      	bne.n	800ec68 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	2206      	movs	r2, #6
 800ec58:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ec60:	2103      	movs	r1, #3
 800ec62:	6878      	ldr	r0, [r7, #4]
 800ec64:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ec66:	e073      	b.n	800ed50 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	220d      	movs	r2, #13
 800ec6c:	701a      	strb	r2, [r3, #0]
      break;
 800ec6e:	e06f      	b.n	800ed50 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	220d      	movs	r2, #13
 800ec74:	701a      	strb	r2, [r3, #0]
      break;
 800ec76:	e06b      	b.n	800ed50 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d017      	beq.n	800ecb2 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ec88:	691b      	ldr	r3, [r3, #16]
 800ec8a:	6878      	ldr	r0, [r7, #4]
 800ec8c:	4798      	blx	r3
 800ec8e:	4603      	mov	r3, r0
 800ec90:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800ec92:	7bbb      	ldrb	r3, [r7, #14]
 800ec94:	b2db      	uxtb	r3, r3
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d103      	bne.n	800eca2 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	220b      	movs	r2, #11
 800ec9e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800eca0:	e058      	b.n	800ed54 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800eca2:	7bbb      	ldrb	r3, [r7, #14]
 800eca4:	b2db      	uxtb	r3, r3
 800eca6:	2b02      	cmp	r3, #2
 800eca8:	d154      	bne.n	800ed54 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	220d      	movs	r2, #13
 800ecae:	701a      	strb	r2, [r3, #0]
      break;
 800ecb0:	e050      	b.n	800ed54 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	220d      	movs	r2, #13
 800ecb6:	701a      	strb	r2, [r3, #0]
      break;
 800ecb8:	e04c      	b.n	800ed54 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d049      	beq.n	800ed58 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ecca:	695b      	ldr	r3, [r3, #20]
 800eccc:	6878      	ldr	r0, [r7, #4]
 800ecce:	4798      	blx	r3
      }
      break;
 800ecd0:	e042      	b.n	800ed58 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	2200      	movs	r2, #0
 800ecd6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800ecda:	6878      	ldr	r0, [r7, #4]
 800ecdc:	f7ff fd72 	bl	800e7c4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d009      	beq.n	800ecfe <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ecf0:	68db      	ldr	r3, [r3, #12]
 800ecf2:	6878      	ldr	r0, [r7, #4]
 800ecf4:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	2200      	movs	r2, #0
 800ecfa:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d005      	beq.n	800ed14 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ed0e:	2105      	movs	r1, #5
 800ed10:	6878      	ldr	r0, [r7, #4]
 800ed12:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800ed1a:	b2db      	uxtb	r3, r3
 800ed1c:	2b01      	cmp	r3, #1
 800ed1e:	d107      	bne.n	800ed30 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	2200      	movs	r2, #0
 800ed24:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800ed28:	6878      	ldr	r0, [r7, #4]
 800ed2a:	f7ff fe2b 	bl	800e984 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ed2e:	e014      	b.n	800ed5a <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800ed30:	6878      	ldr	r0, [r7, #4]
 800ed32:	f001 f9b7 	bl	80100a4 <USBH_LL_Start>
      break;
 800ed36:	e010      	b.n	800ed5a <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 800ed38:	bf00      	nop
 800ed3a:	e00e      	b.n	800ed5a <USBH_Process+0x3b6>
      break;
 800ed3c:	bf00      	nop
 800ed3e:	e00c      	b.n	800ed5a <USBH_Process+0x3b6>
      break;
 800ed40:	bf00      	nop
 800ed42:	e00a      	b.n	800ed5a <USBH_Process+0x3b6>
    break;
 800ed44:	bf00      	nop
 800ed46:	e008      	b.n	800ed5a <USBH_Process+0x3b6>
      break;
 800ed48:	bf00      	nop
 800ed4a:	e006      	b.n	800ed5a <USBH_Process+0x3b6>
      break;
 800ed4c:	bf00      	nop
 800ed4e:	e004      	b.n	800ed5a <USBH_Process+0x3b6>
      break;
 800ed50:	bf00      	nop
 800ed52:	e002      	b.n	800ed5a <USBH_Process+0x3b6>
      break;
 800ed54:	bf00      	nop
 800ed56:	e000      	b.n	800ed5a <USBH_Process+0x3b6>
      break;
 800ed58:	bf00      	nop
  }
  return USBH_OK;
 800ed5a:	2300      	movs	r3, #0
}
 800ed5c:	4618      	mov	r0, r3
 800ed5e:	3710      	adds	r7, #16
 800ed60:	46bd      	mov	sp, r7
 800ed62:	bd80      	pop	{r7, pc}

0800ed64 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800ed64:	b580      	push	{r7, lr}
 800ed66:	b088      	sub	sp, #32
 800ed68:	af04      	add	r7, sp, #16
 800ed6a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800ed6c:	2301      	movs	r3, #1
 800ed6e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800ed70:	2301      	movs	r3, #1
 800ed72:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	785b      	ldrb	r3, [r3, #1]
 800ed78:	2b07      	cmp	r3, #7
 800ed7a:	f200 81c1 	bhi.w	800f100 <USBH_HandleEnum+0x39c>
 800ed7e:	a201      	add	r2, pc, #4	; (adr r2, 800ed84 <USBH_HandleEnum+0x20>)
 800ed80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed84:	0800eda5 	.word	0x0800eda5
 800ed88:	0800ee63 	.word	0x0800ee63
 800ed8c:	0800eecd 	.word	0x0800eecd
 800ed90:	0800ef5b 	.word	0x0800ef5b
 800ed94:	0800efc5 	.word	0x0800efc5
 800ed98:	0800f035 	.word	0x0800f035
 800ed9c:	0800f07b 	.word	0x0800f07b
 800eda0:	0800f0c1 	.word	0x0800f0c1
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800eda4:	2108      	movs	r1, #8
 800eda6:	6878      	ldr	r0, [r7, #4]
 800eda8:	f000 fa50 	bl	800f24c <USBH_Get_DevDesc>
 800edac:	4603      	mov	r3, r0
 800edae:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800edb0:	7bbb      	ldrb	r3, [r7, #14]
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d130      	bne.n	800ee18 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	2201      	movs	r2, #1
 800edc4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	7919      	ldrb	r1, [r3, #4]
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800edd6:	687a      	ldr	r2, [r7, #4]
 800edd8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800edda:	b292      	uxth	r2, r2
 800eddc:	9202      	str	r2, [sp, #8]
 800edde:	2200      	movs	r2, #0
 800ede0:	9201      	str	r2, [sp, #4]
 800ede2:	9300      	str	r3, [sp, #0]
 800ede4:	4603      	mov	r3, r0
 800ede6:	2280      	movs	r2, #128	; 0x80
 800ede8:	6878      	ldr	r0, [r7, #4]
 800edea:	f000 ff79 	bl	800fce0 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	7959      	ldrb	r1, [r3, #5]
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800edfe:	687a      	ldr	r2, [r7, #4]
 800ee00:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ee02:	b292      	uxth	r2, r2
 800ee04:	9202      	str	r2, [sp, #8]
 800ee06:	2200      	movs	r2, #0
 800ee08:	9201      	str	r2, [sp, #4]
 800ee0a:	9300      	str	r3, [sp, #0]
 800ee0c:	4603      	mov	r3, r0
 800ee0e:	2200      	movs	r2, #0
 800ee10:	6878      	ldr	r0, [r7, #4]
 800ee12:	f000 ff65 	bl	800fce0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800ee16:	e175      	b.n	800f104 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ee18:	7bbb      	ldrb	r3, [r7, #14]
 800ee1a:	2b03      	cmp	r3, #3
 800ee1c:	f040 8172 	bne.w	800f104 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ee26:	3301      	adds	r3, #1
 800ee28:	b2da      	uxtb	r2, r3
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ee36:	2b03      	cmp	r3, #3
 800ee38:	d903      	bls.n	800ee42 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	220d      	movs	r2, #13
 800ee3e:	701a      	strb	r2, [r3, #0]
      break;
 800ee40:	e160      	b.n	800f104 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	795b      	ldrb	r3, [r3, #5]
 800ee46:	4619      	mov	r1, r3
 800ee48:	6878      	ldr	r0, [r7, #4]
 800ee4a:	f000 ff99 	bl	800fd80 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	791b      	ldrb	r3, [r3, #4]
 800ee52:	4619      	mov	r1, r3
 800ee54:	6878      	ldr	r0, [r7, #4]
 800ee56:	f000 ff93 	bl	800fd80 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	2200      	movs	r2, #0
 800ee5e:	701a      	strb	r2, [r3, #0]
      break;
 800ee60:	e150      	b.n	800f104 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800ee62:	2112      	movs	r1, #18
 800ee64:	6878      	ldr	r0, [r7, #4]
 800ee66:	f000 f9f1 	bl	800f24c <USBH_Get_DevDesc>
 800ee6a:	4603      	mov	r3, r0
 800ee6c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ee6e:	7bbb      	ldrb	r3, [r7, #14]
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d103      	bne.n	800ee7c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	2202      	movs	r2, #2
 800ee78:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ee7a:	e145      	b.n	800f108 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ee7c:	7bbb      	ldrb	r3, [r7, #14]
 800ee7e:	2b03      	cmp	r3, #3
 800ee80:	f040 8142 	bne.w	800f108 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ee8a:	3301      	adds	r3, #1
 800ee8c:	b2da      	uxtb	r2, r3
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ee9a:	2b03      	cmp	r3, #3
 800ee9c:	d903      	bls.n	800eea6 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	220d      	movs	r2, #13
 800eea2:	701a      	strb	r2, [r3, #0]
      break;
 800eea4:	e130      	b.n	800f108 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	795b      	ldrb	r3, [r3, #5]
 800eeaa:	4619      	mov	r1, r3
 800eeac:	6878      	ldr	r0, [r7, #4]
 800eeae:	f000 ff67 	bl	800fd80 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	791b      	ldrb	r3, [r3, #4]
 800eeb6:	4619      	mov	r1, r3
 800eeb8:	6878      	ldr	r0, [r7, #4]
 800eeba:	f000 ff61 	bl	800fd80 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	2200      	movs	r2, #0
 800eec2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	2200      	movs	r2, #0
 800eec8:	701a      	strb	r2, [r3, #0]
      break;
 800eeca:	e11d      	b.n	800f108 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800eecc:	2101      	movs	r1, #1
 800eece:	6878      	ldr	r0, [r7, #4]
 800eed0:	f000 fa68 	bl	800f3a4 <USBH_SetAddress>
 800eed4:	4603      	mov	r3, r0
 800eed6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800eed8:	7bbb      	ldrb	r3, [r7, #14]
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d132      	bne.n	800ef44 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800eede:	2002      	movs	r0, #2
 800eee0:	f001 fa45 	bl	801036e <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	2201      	movs	r2, #1
 800eee8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	2203      	movs	r2, #3
 800eef0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	7919      	ldrb	r1, [r3, #4]
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800ef02:	687a      	ldr	r2, [r7, #4]
 800ef04:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800ef06:	b292      	uxth	r2, r2
 800ef08:	9202      	str	r2, [sp, #8]
 800ef0a:	2200      	movs	r2, #0
 800ef0c:	9201      	str	r2, [sp, #4]
 800ef0e:	9300      	str	r3, [sp, #0]
 800ef10:	4603      	mov	r3, r0
 800ef12:	2280      	movs	r2, #128	; 0x80
 800ef14:	6878      	ldr	r0, [r7, #4]
 800ef16:	f000 fee3 	bl	800fce0 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	7959      	ldrb	r1, [r3, #5]
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800ef2a:	687a      	ldr	r2, [r7, #4]
 800ef2c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ef2e:	b292      	uxth	r2, r2
 800ef30:	9202      	str	r2, [sp, #8]
 800ef32:	2200      	movs	r2, #0
 800ef34:	9201      	str	r2, [sp, #4]
 800ef36:	9300      	str	r3, [sp, #0]
 800ef38:	4603      	mov	r3, r0
 800ef3a:	2200      	movs	r2, #0
 800ef3c:	6878      	ldr	r0, [r7, #4]
 800ef3e:	f000 fecf 	bl	800fce0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800ef42:	e0e3      	b.n	800f10c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ef44:	7bbb      	ldrb	r3, [r7, #14]
 800ef46:	2b03      	cmp	r3, #3
 800ef48:	f040 80e0 	bne.w	800f10c <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	220d      	movs	r2, #13
 800ef50:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	2200      	movs	r2, #0
 800ef56:	705a      	strb	r2, [r3, #1]
      break;
 800ef58:	e0d8      	b.n	800f10c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800ef5a:	2109      	movs	r1, #9
 800ef5c:	6878      	ldr	r0, [r7, #4]
 800ef5e:	f000 f99d 	bl	800f29c <USBH_Get_CfgDesc>
 800ef62:	4603      	mov	r3, r0
 800ef64:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ef66:	7bbb      	ldrb	r3, [r7, #14]
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d103      	bne.n	800ef74 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	2204      	movs	r2, #4
 800ef70:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ef72:	e0cd      	b.n	800f110 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ef74:	7bbb      	ldrb	r3, [r7, #14]
 800ef76:	2b03      	cmp	r3, #3
 800ef78:	f040 80ca 	bne.w	800f110 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ef82:	3301      	adds	r3, #1
 800ef84:	b2da      	uxtb	r2, r3
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ef92:	2b03      	cmp	r3, #3
 800ef94:	d903      	bls.n	800ef9e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	220d      	movs	r2, #13
 800ef9a:	701a      	strb	r2, [r3, #0]
      break;
 800ef9c:	e0b8      	b.n	800f110 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	795b      	ldrb	r3, [r3, #5]
 800efa2:	4619      	mov	r1, r3
 800efa4:	6878      	ldr	r0, [r7, #4]
 800efa6:	f000 feeb 	bl	800fd80 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	791b      	ldrb	r3, [r3, #4]
 800efae:	4619      	mov	r1, r3
 800efb0:	6878      	ldr	r0, [r7, #4]
 800efb2:	f000 fee5 	bl	800fd80 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	2200      	movs	r2, #0
 800efba:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	2200      	movs	r2, #0
 800efc0:	701a      	strb	r2, [r3, #0]
      break;
 800efc2:	e0a5      	b.n	800f110 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800efca:	4619      	mov	r1, r3
 800efcc:	6878      	ldr	r0, [r7, #4]
 800efce:	f000 f965 	bl	800f29c <USBH_Get_CfgDesc>
 800efd2:	4603      	mov	r3, r0
 800efd4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800efd6:	7bbb      	ldrb	r3, [r7, #14]
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d103      	bne.n	800efe4 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	2205      	movs	r2, #5
 800efe0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800efe2:	e097      	b.n	800f114 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800efe4:	7bbb      	ldrb	r3, [r7, #14]
 800efe6:	2b03      	cmp	r3, #3
 800efe8:	f040 8094 	bne.w	800f114 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800eff2:	3301      	adds	r3, #1
 800eff4:	b2da      	uxtb	r2, r3
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f002:	2b03      	cmp	r3, #3
 800f004:	d903      	bls.n	800f00e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	220d      	movs	r2, #13
 800f00a:	701a      	strb	r2, [r3, #0]
      break;
 800f00c:	e082      	b.n	800f114 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	795b      	ldrb	r3, [r3, #5]
 800f012:	4619      	mov	r1, r3
 800f014:	6878      	ldr	r0, [r7, #4]
 800f016:	f000 feb3 	bl	800fd80 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	791b      	ldrb	r3, [r3, #4]
 800f01e:	4619      	mov	r1, r3
 800f020:	6878      	ldr	r0, [r7, #4]
 800f022:	f000 fead 	bl	800fd80 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	2200      	movs	r2, #0
 800f02a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	2200      	movs	r2, #0
 800f030:	701a      	strb	r2, [r3, #0]
      break;
 800f032:	e06f      	b.n	800f114 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d019      	beq.n	800f072 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800f04a:	23ff      	movs	r3, #255	; 0xff
 800f04c:	6878      	ldr	r0, [r7, #4]
 800f04e:	f000 f949 	bl	800f2e4 <USBH_Get_StringDesc>
 800f052:	4603      	mov	r3, r0
 800f054:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800f056:	7bbb      	ldrb	r3, [r7, #14]
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d103      	bne.n	800f064 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	2206      	movs	r2, #6
 800f060:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800f062:	e059      	b.n	800f118 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f064:	7bbb      	ldrb	r3, [r7, #14]
 800f066:	2b03      	cmp	r3, #3
 800f068:	d156      	bne.n	800f118 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	2206      	movs	r2, #6
 800f06e:	705a      	strb	r2, [r3, #1]
      break;
 800f070:	e052      	b.n	800f118 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	2206      	movs	r2, #6
 800f076:	705a      	strb	r2, [r3, #1]
      break;
 800f078:	e04e      	b.n	800f118 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800f080:	2b00      	cmp	r3, #0
 800f082:	d019      	beq.n	800f0b8 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800f090:	23ff      	movs	r3, #255	; 0xff
 800f092:	6878      	ldr	r0, [r7, #4]
 800f094:	f000 f926 	bl	800f2e4 <USBH_Get_StringDesc>
 800f098:	4603      	mov	r3, r0
 800f09a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800f09c:	7bbb      	ldrb	r3, [r7, #14]
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d103      	bne.n	800f0aa <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	2207      	movs	r2, #7
 800f0a6:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800f0a8:	e038      	b.n	800f11c <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f0aa:	7bbb      	ldrb	r3, [r7, #14]
 800f0ac:	2b03      	cmp	r3, #3
 800f0ae:	d135      	bne.n	800f11c <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	2207      	movs	r2, #7
 800f0b4:	705a      	strb	r2, [r3, #1]
      break;
 800f0b6:	e031      	b.n	800f11c <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	2207      	movs	r2, #7
 800f0bc:	705a      	strb	r2, [r3, #1]
      break;
 800f0be:	e02d      	b.n	800f11c <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d017      	beq.n	800f0fa <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800f0d6:	23ff      	movs	r3, #255	; 0xff
 800f0d8:	6878      	ldr	r0, [r7, #4]
 800f0da:	f000 f903 	bl	800f2e4 <USBH_Get_StringDesc>
 800f0de:	4603      	mov	r3, r0
 800f0e0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800f0e2:	7bbb      	ldrb	r3, [r7, #14]
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d102      	bne.n	800f0ee <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800f0e8:	2300      	movs	r3, #0
 800f0ea:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800f0ec:	e018      	b.n	800f120 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f0ee:	7bbb      	ldrb	r3, [r7, #14]
 800f0f0:	2b03      	cmp	r3, #3
 800f0f2:	d115      	bne.n	800f120 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800f0f4:	2300      	movs	r3, #0
 800f0f6:	73fb      	strb	r3, [r7, #15]
      break;
 800f0f8:	e012      	b.n	800f120 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800f0fa:	2300      	movs	r3, #0
 800f0fc:	73fb      	strb	r3, [r7, #15]
      break;
 800f0fe:	e00f      	b.n	800f120 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800f100:	bf00      	nop
 800f102:	e00e      	b.n	800f122 <USBH_HandleEnum+0x3be>
      break;
 800f104:	bf00      	nop
 800f106:	e00c      	b.n	800f122 <USBH_HandleEnum+0x3be>
      break;
 800f108:	bf00      	nop
 800f10a:	e00a      	b.n	800f122 <USBH_HandleEnum+0x3be>
      break;
 800f10c:	bf00      	nop
 800f10e:	e008      	b.n	800f122 <USBH_HandleEnum+0x3be>
      break;
 800f110:	bf00      	nop
 800f112:	e006      	b.n	800f122 <USBH_HandleEnum+0x3be>
      break;
 800f114:	bf00      	nop
 800f116:	e004      	b.n	800f122 <USBH_HandleEnum+0x3be>
      break;
 800f118:	bf00      	nop
 800f11a:	e002      	b.n	800f122 <USBH_HandleEnum+0x3be>
      break;
 800f11c:	bf00      	nop
 800f11e:	e000      	b.n	800f122 <USBH_HandleEnum+0x3be>
      break;
 800f120:	bf00      	nop
  }
  return Status;
 800f122:	7bfb      	ldrb	r3, [r7, #15]
}
 800f124:	4618      	mov	r0, r3
 800f126:	3710      	adds	r7, #16
 800f128:	46bd      	mov	sp, r7
 800f12a:	bd80      	pop	{r7, pc}

0800f12c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800f12c:	b480      	push	{r7}
 800f12e:	b083      	sub	sp, #12
 800f130:	af00      	add	r7, sp, #0
 800f132:	6078      	str	r0, [r7, #4]
 800f134:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	683a      	ldr	r2, [r7, #0]
 800f13a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800f13e:	bf00      	nop
 800f140:	370c      	adds	r7, #12
 800f142:	46bd      	mov	sp, r7
 800f144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f148:	4770      	bx	lr

0800f14a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800f14a:	b580      	push	{r7, lr}
 800f14c:	b082      	sub	sp, #8
 800f14e:	af00      	add	r7, sp, #0
 800f150:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800f158:	1c5a      	adds	r2, r3, #1
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800f160:	6878      	ldr	r0, [r7, #4]
 800f162:	f000 f804 	bl	800f16e <USBH_HandleSof>
}
 800f166:	bf00      	nop
 800f168:	3708      	adds	r7, #8
 800f16a:	46bd      	mov	sp, r7
 800f16c:	bd80      	pop	{r7, pc}

0800f16e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800f16e:	b580      	push	{r7, lr}
 800f170:	b082      	sub	sp, #8
 800f172:	af00      	add	r7, sp, #0
 800f174:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	781b      	ldrb	r3, [r3, #0]
 800f17a:	b2db      	uxtb	r3, r3
 800f17c:	2b0b      	cmp	r3, #11
 800f17e:	d10a      	bne.n	800f196 <USBH_HandleSof+0x28>
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f186:	2b00      	cmp	r3, #0
 800f188:	d005      	beq.n	800f196 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f190:	699b      	ldr	r3, [r3, #24]
 800f192:	6878      	ldr	r0, [r7, #4]
 800f194:	4798      	blx	r3
  }
}
 800f196:	bf00      	nop
 800f198:	3708      	adds	r7, #8
 800f19a:	46bd      	mov	sp, r7
 800f19c:	bd80      	pop	{r7, pc}

0800f19e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800f19e:	b480      	push	{r7}
 800f1a0:	b083      	sub	sp, #12
 800f1a2:	af00      	add	r7, sp, #0
 800f1a4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	2201      	movs	r2, #1
 800f1aa:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800f1ae:	bf00      	nop
}
 800f1b0:	370c      	adds	r7, #12
 800f1b2:	46bd      	mov	sp, r7
 800f1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1b8:	4770      	bx	lr

0800f1ba <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800f1ba:	b480      	push	{r7}
 800f1bc:	b083      	sub	sp, #12
 800f1be:	af00      	add	r7, sp, #0
 800f1c0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	2200      	movs	r2, #0
 800f1c6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800f1ca:	bf00      	nop
}
 800f1cc:	370c      	adds	r7, #12
 800f1ce:	46bd      	mov	sp, r7
 800f1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1d4:	4770      	bx	lr

0800f1d6 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800f1d6:	b480      	push	{r7}
 800f1d8:	b083      	sub	sp, #12
 800f1da:	af00      	add	r7, sp, #0
 800f1dc:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	2201      	movs	r2, #1
 800f1e2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	2200      	movs	r2, #0
 800f1ea:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	2200      	movs	r2, #0
 800f1f2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800f1f6:	2300      	movs	r3, #0
}
 800f1f8:	4618      	mov	r0, r3
 800f1fa:	370c      	adds	r7, #12
 800f1fc:	46bd      	mov	sp, r7
 800f1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f202:	4770      	bx	lr

0800f204 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800f204:	b580      	push	{r7, lr}
 800f206:	b082      	sub	sp, #8
 800f208:	af00      	add	r7, sp, #0
 800f20a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	2201      	movs	r2, #1
 800f210:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	2200      	movs	r2, #0
 800f218:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	2200      	movs	r2, #0
 800f220:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800f224:	6878      	ldr	r0, [r7, #4]
 800f226:	f000 ff58 	bl	80100da <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	791b      	ldrb	r3, [r3, #4]
 800f22e:	4619      	mov	r1, r3
 800f230:	6878      	ldr	r0, [r7, #4]
 800f232:	f000 fda5 	bl	800fd80 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	795b      	ldrb	r3, [r3, #5]
 800f23a:	4619      	mov	r1, r3
 800f23c:	6878      	ldr	r0, [r7, #4]
 800f23e:	f000 fd9f 	bl	800fd80 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800f242:	2300      	movs	r3, #0
}
 800f244:	4618      	mov	r0, r3
 800f246:	3708      	adds	r7, #8
 800f248:	46bd      	mov	sp, r7
 800f24a:	bd80      	pop	{r7, pc}

0800f24c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800f24c:	b580      	push	{r7, lr}
 800f24e:	b086      	sub	sp, #24
 800f250:	af02      	add	r7, sp, #8
 800f252:	6078      	str	r0, [r7, #4]
 800f254:	460b      	mov	r3, r1
 800f256:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800f25e:	78fb      	ldrb	r3, [r7, #3]
 800f260:	b29b      	uxth	r3, r3
 800f262:	9300      	str	r3, [sp, #0]
 800f264:	4613      	mov	r3, r2
 800f266:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f26a:	2100      	movs	r1, #0
 800f26c:	6878      	ldr	r0, [r7, #4]
 800f26e:	f000 f864 	bl	800f33a <USBH_GetDescriptor>
 800f272:	4603      	mov	r3, r0
 800f274:	73fb      	strb	r3, [r7, #15]
 800f276:	7bfb      	ldrb	r3, [r7, #15]
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d10a      	bne.n	800f292 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	f203 3026 	addw	r0, r3, #806	; 0x326
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800f288:	78fa      	ldrb	r2, [r7, #3]
 800f28a:	b292      	uxth	r2, r2
 800f28c:	4619      	mov	r1, r3
 800f28e:	f000 f918 	bl	800f4c2 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800f292:	7bfb      	ldrb	r3, [r7, #15]
}
 800f294:	4618      	mov	r0, r3
 800f296:	3710      	adds	r7, #16
 800f298:	46bd      	mov	sp, r7
 800f29a:	bd80      	pop	{r7, pc}

0800f29c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800f29c:	b580      	push	{r7, lr}
 800f29e:	b086      	sub	sp, #24
 800f2a0:	af02      	add	r7, sp, #8
 800f2a2:	6078      	str	r0, [r7, #4]
 800f2a4:	460b      	mov	r3, r1
 800f2a6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	331c      	adds	r3, #28
 800f2ac:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800f2ae:	887b      	ldrh	r3, [r7, #2]
 800f2b0:	9300      	str	r3, [sp, #0]
 800f2b2:	68fb      	ldr	r3, [r7, #12]
 800f2b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f2b8:	2100      	movs	r1, #0
 800f2ba:	6878      	ldr	r0, [r7, #4]
 800f2bc:	f000 f83d 	bl	800f33a <USBH_GetDescriptor>
 800f2c0:	4603      	mov	r3, r0
 800f2c2:	72fb      	strb	r3, [r7, #11]
 800f2c4:	7afb      	ldrb	r3, [r7, #11]
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d107      	bne.n	800f2da <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800f2d0:	887a      	ldrh	r2, [r7, #2]
 800f2d2:	68f9      	ldr	r1, [r7, #12]
 800f2d4:	4618      	mov	r0, r3
 800f2d6:	f000 f964 	bl	800f5a2 <USBH_ParseCfgDesc>
  }

  return status;
 800f2da:	7afb      	ldrb	r3, [r7, #11]
}
 800f2dc:	4618      	mov	r0, r3
 800f2de:	3710      	adds	r7, #16
 800f2e0:	46bd      	mov	sp, r7
 800f2e2:	bd80      	pop	{r7, pc}

0800f2e4 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800f2e4:	b580      	push	{r7, lr}
 800f2e6:	b088      	sub	sp, #32
 800f2e8:	af02      	add	r7, sp, #8
 800f2ea:	60f8      	str	r0, [r7, #12]
 800f2ec:	607a      	str	r2, [r7, #4]
 800f2ee:	461a      	mov	r2, r3
 800f2f0:	460b      	mov	r3, r1
 800f2f2:	72fb      	strb	r3, [r7, #11]
 800f2f4:	4613      	mov	r3, r2
 800f2f6:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800f2f8:	7afb      	ldrb	r3, [r7, #11]
 800f2fa:	b29b      	uxth	r3, r3
 800f2fc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800f300:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800f308:	893b      	ldrh	r3, [r7, #8]
 800f30a:	9300      	str	r3, [sp, #0]
 800f30c:	460b      	mov	r3, r1
 800f30e:	2100      	movs	r1, #0
 800f310:	68f8      	ldr	r0, [r7, #12]
 800f312:	f000 f812 	bl	800f33a <USBH_GetDescriptor>
 800f316:	4603      	mov	r3, r0
 800f318:	75fb      	strb	r3, [r7, #23]
 800f31a:	7dfb      	ldrb	r3, [r7, #23]
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d107      	bne.n	800f330 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800f326:	893a      	ldrh	r2, [r7, #8]
 800f328:	6879      	ldr	r1, [r7, #4]
 800f32a:	4618      	mov	r0, r3
 800f32c:	f000 fa37 	bl	800f79e <USBH_ParseStringDesc>
  }

  return status;
 800f330:	7dfb      	ldrb	r3, [r7, #23]
}
 800f332:	4618      	mov	r0, r3
 800f334:	3718      	adds	r7, #24
 800f336:	46bd      	mov	sp, r7
 800f338:	bd80      	pop	{r7, pc}

0800f33a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800f33a:	b580      	push	{r7, lr}
 800f33c:	b084      	sub	sp, #16
 800f33e:	af00      	add	r7, sp, #0
 800f340:	60f8      	str	r0, [r7, #12]
 800f342:	607b      	str	r3, [r7, #4]
 800f344:	460b      	mov	r3, r1
 800f346:	72fb      	strb	r3, [r7, #11]
 800f348:	4613      	mov	r3, r2
 800f34a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	789b      	ldrb	r3, [r3, #2]
 800f350:	2b01      	cmp	r3, #1
 800f352:	d11c      	bne.n	800f38e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800f354:	7afb      	ldrb	r3, [r7, #11]
 800f356:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f35a:	b2da      	uxtb	r2, r3
 800f35c:	68fb      	ldr	r3, [r7, #12]
 800f35e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	2206      	movs	r2, #6
 800f364:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800f366:	68fb      	ldr	r3, [r7, #12]
 800f368:	893a      	ldrh	r2, [r7, #8]
 800f36a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800f36c:	893b      	ldrh	r3, [r7, #8]
 800f36e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f372:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f376:	d104      	bne.n	800f382 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	f240 4209 	movw	r2, #1033	; 0x409
 800f37e:	829a      	strh	r2, [r3, #20]
 800f380:	e002      	b.n	800f388 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	2200      	movs	r2, #0
 800f386:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	8b3a      	ldrh	r2, [r7, #24]
 800f38c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800f38e:	8b3b      	ldrh	r3, [r7, #24]
 800f390:	461a      	mov	r2, r3
 800f392:	6879      	ldr	r1, [r7, #4]
 800f394:	68f8      	ldr	r0, [r7, #12]
 800f396:	f000 fa50 	bl	800f83a <USBH_CtlReq>
 800f39a:	4603      	mov	r3, r0
}
 800f39c:	4618      	mov	r0, r3
 800f39e:	3710      	adds	r7, #16
 800f3a0:	46bd      	mov	sp, r7
 800f3a2:	bd80      	pop	{r7, pc}

0800f3a4 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800f3a4:	b580      	push	{r7, lr}
 800f3a6:	b082      	sub	sp, #8
 800f3a8:	af00      	add	r7, sp, #0
 800f3aa:	6078      	str	r0, [r7, #4]
 800f3ac:	460b      	mov	r3, r1
 800f3ae:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	789b      	ldrb	r3, [r3, #2]
 800f3b4:	2b01      	cmp	r3, #1
 800f3b6:	d10f      	bne.n	800f3d8 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	2200      	movs	r2, #0
 800f3bc:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	2205      	movs	r2, #5
 800f3c2:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800f3c4:	78fb      	ldrb	r3, [r7, #3]
 800f3c6:	b29a      	uxth	r2, r3
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	2200      	movs	r2, #0
 800f3d0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	2200      	movs	r2, #0
 800f3d6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800f3d8:	2200      	movs	r2, #0
 800f3da:	2100      	movs	r1, #0
 800f3dc:	6878      	ldr	r0, [r7, #4]
 800f3de:	f000 fa2c 	bl	800f83a <USBH_CtlReq>
 800f3e2:	4603      	mov	r3, r0
}
 800f3e4:	4618      	mov	r0, r3
 800f3e6:	3708      	adds	r7, #8
 800f3e8:	46bd      	mov	sp, r7
 800f3ea:	bd80      	pop	{r7, pc}

0800f3ec <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800f3ec:	b580      	push	{r7, lr}
 800f3ee:	b082      	sub	sp, #8
 800f3f0:	af00      	add	r7, sp, #0
 800f3f2:	6078      	str	r0, [r7, #4]
 800f3f4:	460b      	mov	r3, r1
 800f3f6:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	789b      	ldrb	r3, [r3, #2]
 800f3fc:	2b01      	cmp	r3, #1
 800f3fe:	d10e      	bne.n	800f41e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	2200      	movs	r2, #0
 800f404:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	2209      	movs	r2, #9
 800f40a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	887a      	ldrh	r2, [r7, #2]
 800f410:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	2200      	movs	r2, #0
 800f416:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	2200      	movs	r2, #0
 800f41c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800f41e:	2200      	movs	r2, #0
 800f420:	2100      	movs	r1, #0
 800f422:	6878      	ldr	r0, [r7, #4]
 800f424:	f000 fa09 	bl	800f83a <USBH_CtlReq>
 800f428:	4603      	mov	r3, r0
}
 800f42a:	4618      	mov	r0, r3
 800f42c:	3708      	adds	r7, #8
 800f42e:	46bd      	mov	sp, r7
 800f430:	bd80      	pop	{r7, pc}

0800f432 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800f432:	b580      	push	{r7, lr}
 800f434:	b082      	sub	sp, #8
 800f436:	af00      	add	r7, sp, #0
 800f438:	6078      	str	r0, [r7, #4]
 800f43a:	460b      	mov	r3, r1
 800f43c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	789b      	ldrb	r3, [r3, #2]
 800f442:	2b01      	cmp	r3, #1
 800f444:	d10f      	bne.n	800f466 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	2200      	movs	r2, #0
 800f44a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	2203      	movs	r2, #3
 800f450:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800f452:	78fb      	ldrb	r3, [r7, #3]
 800f454:	b29a      	uxth	r2, r3
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	2200      	movs	r2, #0
 800f45e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	2200      	movs	r2, #0
 800f464:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800f466:	2200      	movs	r2, #0
 800f468:	2100      	movs	r1, #0
 800f46a:	6878      	ldr	r0, [r7, #4]
 800f46c:	f000 f9e5 	bl	800f83a <USBH_CtlReq>
 800f470:	4603      	mov	r3, r0
}
 800f472:	4618      	mov	r0, r3
 800f474:	3708      	adds	r7, #8
 800f476:	46bd      	mov	sp, r7
 800f478:	bd80      	pop	{r7, pc}

0800f47a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800f47a:	b580      	push	{r7, lr}
 800f47c:	b082      	sub	sp, #8
 800f47e:	af00      	add	r7, sp, #0
 800f480:	6078      	str	r0, [r7, #4]
 800f482:	460b      	mov	r3, r1
 800f484:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	789b      	ldrb	r3, [r3, #2]
 800f48a:	2b01      	cmp	r3, #1
 800f48c:	d10f      	bne.n	800f4ae <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	2202      	movs	r2, #2
 800f492:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	2201      	movs	r2, #1
 800f498:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	2200      	movs	r2, #0
 800f49e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800f4a0:	78fb      	ldrb	r3, [r7, #3]
 800f4a2:	b29a      	uxth	r2, r3
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	2200      	movs	r2, #0
 800f4ac:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800f4ae:	2200      	movs	r2, #0
 800f4b0:	2100      	movs	r1, #0
 800f4b2:	6878      	ldr	r0, [r7, #4]
 800f4b4:	f000 f9c1 	bl	800f83a <USBH_CtlReq>
 800f4b8:	4603      	mov	r3, r0
}
 800f4ba:	4618      	mov	r0, r3
 800f4bc:	3708      	adds	r7, #8
 800f4be:	46bd      	mov	sp, r7
 800f4c0:	bd80      	pop	{r7, pc}

0800f4c2 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800f4c2:	b480      	push	{r7}
 800f4c4:	b085      	sub	sp, #20
 800f4c6:	af00      	add	r7, sp, #0
 800f4c8:	60f8      	str	r0, [r7, #12]
 800f4ca:	60b9      	str	r1, [r7, #8]
 800f4cc:	4613      	mov	r3, r2
 800f4ce:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800f4d0:	68bb      	ldr	r3, [r7, #8]
 800f4d2:	781a      	ldrb	r2, [r3, #0]
 800f4d4:	68fb      	ldr	r3, [r7, #12]
 800f4d6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800f4d8:	68bb      	ldr	r3, [r7, #8]
 800f4da:	785a      	ldrb	r2, [r3, #1]
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800f4e0:	68bb      	ldr	r3, [r7, #8]
 800f4e2:	3302      	adds	r3, #2
 800f4e4:	781b      	ldrb	r3, [r3, #0]
 800f4e6:	b29a      	uxth	r2, r3
 800f4e8:	68bb      	ldr	r3, [r7, #8]
 800f4ea:	3303      	adds	r3, #3
 800f4ec:	781b      	ldrb	r3, [r3, #0]
 800f4ee:	b29b      	uxth	r3, r3
 800f4f0:	021b      	lsls	r3, r3, #8
 800f4f2:	b29b      	uxth	r3, r3
 800f4f4:	4313      	orrs	r3, r2
 800f4f6:	b29a      	uxth	r2, r3
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800f4fc:	68bb      	ldr	r3, [r7, #8]
 800f4fe:	791a      	ldrb	r2, [r3, #4]
 800f500:	68fb      	ldr	r3, [r7, #12]
 800f502:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800f504:	68bb      	ldr	r3, [r7, #8]
 800f506:	795a      	ldrb	r2, [r3, #5]
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800f50c:	68bb      	ldr	r3, [r7, #8]
 800f50e:	799a      	ldrb	r2, [r3, #6]
 800f510:	68fb      	ldr	r3, [r7, #12]
 800f512:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800f514:	68bb      	ldr	r3, [r7, #8]
 800f516:	79da      	ldrb	r2, [r3, #7]
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800f51c:	88fb      	ldrh	r3, [r7, #6]
 800f51e:	2b08      	cmp	r3, #8
 800f520:	d939      	bls.n	800f596 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800f522:	68bb      	ldr	r3, [r7, #8]
 800f524:	3308      	adds	r3, #8
 800f526:	781b      	ldrb	r3, [r3, #0]
 800f528:	b29a      	uxth	r2, r3
 800f52a:	68bb      	ldr	r3, [r7, #8]
 800f52c:	3309      	adds	r3, #9
 800f52e:	781b      	ldrb	r3, [r3, #0]
 800f530:	b29b      	uxth	r3, r3
 800f532:	021b      	lsls	r3, r3, #8
 800f534:	b29b      	uxth	r3, r3
 800f536:	4313      	orrs	r3, r2
 800f538:	b29a      	uxth	r2, r3
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800f53e:	68bb      	ldr	r3, [r7, #8]
 800f540:	330a      	adds	r3, #10
 800f542:	781b      	ldrb	r3, [r3, #0]
 800f544:	b29a      	uxth	r2, r3
 800f546:	68bb      	ldr	r3, [r7, #8]
 800f548:	330b      	adds	r3, #11
 800f54a:	781b      	ldrb	r3, [r3, #0]
 800f54c:	b29b      	uxth	r3, r3
 800f54e:	021b      	lsls	r3, r3, #8
 800f550:	b29b      	uxth	r3, r3
 800f552:	4313      	orrs	r3, r2
 800f554:	b29a      	uxth	r2, r3
 800f556:	68fb      	ldr	r3, [r7, #12]
 800f558:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800f55a:	68bb      	ldr	r3, [r7, #8]
 800f55c:	330c      	adds	r3, #12
 800f55e:	781b      	ldrb	r3, [r3, #0]
 800f560:	b29a      	uxth	r2, r3
 800f562:	68bb      	ldr	r3, [r7, #8]
 800f564:	330d      	adds	r3, #13
 800f566:	781b      	ldrb	r3, [r3, #0]
 800f568:	b29b      	uxth	r3, r3
 800f56a:	021b      	lsls	r3, r3, #8
 800f56c:	b29b      	uxth	r3, r3
 800f56e:	4313      	orrs	r3, r2
 800f570:	b29a      	uxth	r2, r3
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800f576:	68bb      	ldr	r3, [r7, #8]
 800f578:	7b9a      	ldrb	r2, [r3, #14]
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800f57e:	68bb      	ldr	r3, [r7, #8]
 800f580:	7bda      	ldrb	r2, [r3, #15]
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800f586:	68bb      	ldr	r3, [r7, #8]
 800f588:	7c1a      	ldrb	r2, [r3, #16]
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800f58e:	68bb      	ldr	r3, [r7, #8]
 800f590:	7c5a      	ldrb	r2, [r3, #17]
 800f592:	68fb      	ldr	r3, [r7, #12]
 800f594:	745a      	strb	r2, [r3, #17]
  }
}
 800f596:	bf00      	nop
 800f598:	3714      	adds	r7, #20
 800f59a:	46bd      	mov	sp, r7
 800f59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5a0:	4770      	bx	lr

0800f5a2 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800f5a2:	b580      	push	{r7, lr}
 800f5a4:	b08a      	sub	sp, #40	; 0x28
 800f5a6:	af00      	add	r7, sp, #0
 800f5a8:	60f8      	str	r0, [r7, #12]
 800f5aa:	60b9      	str	r1, [r7, #8]
 800f5ac:	4613      	mov	r3, r2
 800f5ae:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800f5b0:	68bb      	ldr	r3, [r7, #8]
 800f5b2:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800f5b4:	2300      	movs	r3, #0
 800f5b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800f5ba:	2300      	movs	r3, #0
 800f5bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800f5c0:	68bb      	ldr	r3, [r7, #8]
 800f5c2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800f5c4:	68bb      	ldr	r3, [r7, #8]
 800f5c6:	781a      	ldrb	r2, [r3, #0]
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800f5cc:	68bb      	ldr	r3, [r7, #8]
 800f5ce:	785a      	ldrb	r2, [r3, #1]
 800f5d0:	68fb      	ldr	r3, [r7, #12]
 800f5d2:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800f5d4:	68bb      	ldr	r3, [r7, #8]
 800f5d6:	3302      	adds	r3, #2
 800f5d8:	781b      	ldrb	r3, [r3, #0]
 800f5da:	b29a      	uxth	r2, r3
 800f5dc:	68bb      	ldr	r3, [r7, #8]
 800f5de:	3303      	adds	r3, #3
 800f5e0:	781b      	ldrb	r3, [r3, #0]
 800f5e2:	b29b      	uxth	r3, r3
 800f5e4:	021b      	lsls	r3, r3, #8
 800f5e6:	b29b      	uxth	r3, r3
 800f5e8:	4313      	orrs	r3, r2
 800f5ea:	b29a      	uxth	r2, r3
 800f5ec:	68fb      	ldr	r3, [r7, #12]
 800f5ee:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800f5f0:	68bb      	ldr	r3, [r7, #8]
 800f5f2:	791a      	ldrb	r2, [r3, #4]
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800f5f8:	68bb      	ldr	r3, [r7, #8]
 800f5fa:	795a      	ldrb	r2, [r3, #5]
 800f5fc:	68fb      	ldr	r3, [r7, #12]
 800f5fe:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800f600:	68bb      	ldr	r3, [r7, #8]
 800f602:	799a      	ldrb	r2, [r3, #6]
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800f608:	68bb      	ldr	r3, [r7, #8]
 800f60a:	79da      	ldrb	r2, [r3, #7]
 800f60c:	68fb      	ldr	r3, [r7, #12]
 800f60e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800f610:	68bb      	ldr	r3, [r7, #8]
 800f612:	7a1a      	ldrb	r2, [r3, #8]
 800f614:	68fb      	ldr	r3, [r7, #12]
 800f616:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800f618:	88fb      	ldrh	r3, [r7, #6]
 800f61a:	2b09      	cmp	r3, #9
 800f61c:	d95f      	bls.n	800f6de <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800f61e:	2309      	movs	r3, #9
 800f620:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800f622:	2300      	movs	r3, #0
 800f624:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800f626:	e051      	b.n	800f6cc <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800f628:	f107 0316 	add.w	r3, r7, #22
 800f62c:	4619      	mov	r1, r3
 800f62e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f630:	f000 f8e8 	bl	800f804 <USBH_GetNextDesc>
 800f634:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800f636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f638:	785b      	ldrb	r3, [r3, #1]
 800f63a:	2b04      	cmp	r3, #4
 800f63c:	d146      	bne.n	800f6cc <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800f63e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f642:	221a      	movs	r2, #26
 800f644:	fb02 f303 	mul.w	r3, r2, r3
 800f648:	3308      	adds	r3, #8
 800f64a:	68fa      	ldr	r2, [r7, #12]
 800f64c:	4413      	add	r3, r2
 800f64e:	3302      	adds	r3, #2
 800f650:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800f652:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f654:	69f8      	ldr	r0, [r7, #28]
 800f656:	f000 f846 	bl	800f6e6 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800f65a:	2300      	movs	r3, #0
 800f65c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800f660:	2300      	movs	r3, #0
 800f662:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800f664:	e022      	b.n	800f6ac <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800f666:	f107 0316 	add.w	r3, r7, #22
 800f66a:	4619      	mov	r1, r3
 800f66c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f66e:	f000 f8c9 	bl	800f804 <USBH_GetNextDesc>
 800f672:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800f674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f676:	785b      	ldrb	r3, [r3, #1]
 800f678:	2b05      	cmp	r3, #5
 800f67a:	d117      	bne.n	800f6ac <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800f67c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f680:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800f684:	3201      	adds	r2, #1
 800f686:	00d2      	lsls	r2, r2, #3
 800f688:	211a      	movs	r1, #26
 800f68a:	fb01 f303 	mul.w	r3, r1, r3
 800f68e:	4413      	add	r3, r2
 800f690:	3308      	adds	r3, #8
 800f692:	68fa      	ldr	r2, [r7, #12]
 800f694:	4413      	add	r3, r2
 800f696:	3304      	adds	r3, #4
 800f698:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800f69a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f69c:	69b8      	ldr	r0, [r7, #24]
 800f69e:	f000 f851 	bl	800f744 <USBH_ParseEPDesc>
            ep_ix++;
 800f6a2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800f6a6:	3301      	adds	r3, #1
 800f6a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800f6ac:	69fb      	ldr	r3, [r7, #28]
 800f6ae:	791b      	ldrb	r3, [r3, #4]
 800f6b0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800f6b4:	429a      	cmp	r2, r3
 800f6b6:	d204      	bcs.n	800f6c2 <USBH_ParseCfgDesc+0x120>
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	885a      	ldrh	r2, [r3, #2]
 800f6bc:	8afb      	ldrh	r3, [r7, #22]
 800f6be:	429a      	cmp	r2, r3
 800f6c0:	d8d1      	bhi.n	800f666 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800f6c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f6c6:	3301      	adds	r3, #1
 800f6c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800f6cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f6d0:	2b01      	cmp	r3, #1
 800f6d2:	d804      	bhi.n	800f6de <USBH_ParseCfgDesc+0x13c>
 800f6d4:	68fb      	ldr	r3, [r7, #12]
 800f6d6:	885a      	ldrh	r2, [r3, #2]
 800f6d8:	8afb      	ldrh	r3, [r7, #22]
 800f6da:	429a      	cmp	r2, r3
 800f6dc:	d8a4      	bhi.n	800f628 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800f6de:	bf00      	nop
 800f6e0:	3728      	adds	r7, #40	; 0x28
 800f6e2:	46bd      	mov	sp, r7
 800f6e4:	bd80      	pop	{r7, pc}

0800f6e6 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800f6e6:	b480      	push	{r7}
 800f6e8:	b083      	sub	sp, #12
 800f6ea:	af00      	add	r7, sp, #0
 800f6ec:	6078      	str	r0, [r7, #4]
 800f6ee:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800f6f0:	683b      	ldr	r3, [r7, #0]
 800f6f2:	781a      	ldrb	r2, [r3, #0]
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800f6f8:	683b      	ldr	r3, [r7, #0]
 800f6fa:	785a      	ldrb	r2, [r3, #1]
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800f700:	683b      	ldr	r3, [r7, #0]
 800f702:	789a      	ldrb	r2, [r3, #2]
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800f708:	683b      	ldr	r3, [r7, #0]
 800f70a:	78da      	ldrb	r2, [r3, #3]
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800f710:	683b      	ldr	r3, [r7, #0]
 800f712:	791a      	ldrb	r2, [r3, #4]
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800f718:	683b      	ldr	r3, [r7, #0]
 800f71a:	795a      	ldrb	r2, [r3, #5]
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800f720:	683b      	ldr	r3, [r7, #0]
 800f722:	799a      	ldrb	r2, [r3, #6]
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800f728:	683b      	ldr	r3, [r7, #0]
 800f72a:	79da      	ldrb	r2, [r3, #7]
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800f730:	683b      	ldr	r3, [r7, #0]
 800f732:	7a1a      	ldrb	r2, [r3, #8]
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	721a      	strb	r2, [r3, #8]
}
 800f738:	bf00      	nop
 800f73a:	370c      	adds	r7, #12
 800f73c:	46bd      	mov	sp, r7
 800f73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f742:	4770      	bx	lr

0800f744 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800f744:	b480      	push	{r7}
 800f746:	b083      	sub	sp, #12
 800f748:	af00      	add	r7, sp, #0
 800f74a:	6078      	str	r0, [r7, #4]
 800f74c:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800f74e:	683b      	ldr	r3, [r7, #0]
 800f750:	781a      	ldrb	r2, [r3, #0]
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800f756:	683b      	ldr	r3, [r7, #0]
 800f758:	785a      	ldrb	r2, [r3, #1]
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800f75e:	683b      	ldr	r3, [r7, #0]
 800f760:	789a      	ldrb	r2, [r3, #2]
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800f766:	683b      	ldr	r3, [r7, #0]
 800f768:	78da      	ldrb	r2, [r3, #3]
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800f76e:	683b      	ldr	r3, [r7, #0]
 800f770:	3304      	adds	r3, #4
 800f772:	781b      	ldrb	r3, [r3, #0]
 800f774:	b29a      	uxth	r2, r3
 800f776:	683b      	ldr	r3, [r7, #0]
 800f778:	3305      	adds	r3, #5
 800f77a:	781b      	ldrb	r3, [r3, #0]
 800f77c:	b29b      	uxth	r3, r3
 800f77e:	021b      	lsls	r3, r3, #8
 800f780:	b29b      	uxth	r3, r3
 800f782:	4313      	orrs	r3, r2
 800f784:	b29a      	uxth	r2, r3
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800f78a:	683b      	ldr	r3, [r7, #0]
 800f78c:	799a      	ldrb	r2, [r3, #6]
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	719a      	strb	r2, [r3, #6]
}
 800f792:	bf00      	nop
 800f794:	370c      	adds	r7, #12
 800f796:	46bd      	mov	sp, r7
 800f798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f79c:	4770      	bx	lr

0800f79e <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800f79e:	b480      	push	{r7}
 800f7a0:	b087      	sub	sp, #28
 800f7a2:	af00      	add	r7, sp, #0
 800f7a4:	60f8      	str	r0, [r7, #12]
 800f7a6:	60b9      	str	r1, [r7, #8]
 800f7a8:	4613      	mov	r3, r2
 800f7aa:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	3301      	adds	r3, #1
 800f7b0:	781b      	ldrb	r3, [r3, #0]
 800f7b2:	2b03      	cmp	r3, #3
 800f7b4:	d120      	bne.n	800f7f8 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800f7b6:	68fb      	ldr	r3, [r7, #12]
 800f7b8:	781b      	ldrb	r3, [r3, #0]
 800f7ba:	1e9a      	subs	r2, r3, #2
 800f7bc:	88fb      	ldrh	r3, [r7, #6]
 800f7be:	4293      	cmp	r3, r2
 800f7c0:	bf28      	it	cs
 800f7c2:	4613      	movcs	r3, r2
 800f7c4:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800f7c6:	68fb      	ldr	r3, [r7, #12]
 800f7c8:	3302      	adds	r3, #2
 800f7ca:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800f7cc:	2300      	movs	r3, #0
 800f7ce:	82fb      	strh	r3, [r7, #22]
 800f7d0:	e00b      	b.n	800f7ea <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800f7d2:	8afb      	ldrh	r3, [r7, #22]
 800f7d4:	68fa      	ldr	r2, [r7, #12]
 800f7d6:	4413      	add	r3, r2
 800f7d8:	781a      	ldrb	r2, [r3, #0]
 800f7da:	68bb      	ldr	r3, [r7, #8]
 800f7dc:	701a      	strb	r2, [r3, #0]
      pdest++;
 800f7de:	68bb      	ldr	r3, [r7, #8]
 800f7e0:	3301      	adds	r3, #1
 800f7e2:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800f7e4:	8afb      	ldrh	r3, [r7, #22]
 800f7e6:	3302      	adds	r3, #2
 800f7e8:	82fb      	strh	r3, [r7, #22]
 800f7ea:	8afa      	ldrh	r2, [r7, #22]
 800f7ec:	8abb      	ldrh	r3, [r7, #20]
 800f7ee:	429a      	cmp	r2, r3
 800f7f0:	d3ef      	bcc.n	800f7d2 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800f7f2:	68bb      	ldr	r3, [r7, #8]
 800f7f4:	2200      	movs	r2, #0
 800f7f6:	701a      	strb	r2, [r3, #0]
  }
}
 800f7f8:	bf00      	nop
 800f7fa:	371c      	adds	r7, #28
 800f7fc:	46bd      	mov	sp, r7
 800f7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f802:	4770      	bx	lr

0800f804 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800f804:	b480      	push	{r7}
 800f806:	b085      	sub	sp, #20
 800f808:	af00      	add	r7, sp, #0
 800f80a:	6078      	str	r0, [r7, #4]
 800f80c:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800f80e:	683b      	ldr	r3, [r7, #0]
 800f810:	881a      	ldrh	r2, [r3, #0]
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	781b      	ldrb	r3, [r3, #0]
 800f816:	b29b      	uxth	r3, r3
 800f818:	4413      	add	r3, r2
 800f81a:	b29a      	uxth	r2, r3
 800f81c:	683b      	ldr	r3, [r7, #0]
 800f81e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	781b      	ldrb	r3, [r3, #0]
 800f824:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	4413      	add	r3, r2
 800f82a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800f82c:	68fb      	ldr	r3, [r7, #12]
}
 800f82e:	4618      	mov	r0, r3
 800f830:	3714      	adds	r7, #20
 800f832:	46bd      	mov	sp, r7
 800f834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f838:	4770      	bx	lr

0800f83a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800f83a:	b580      	push	{r7, lr}
 800f83c:	b086      	sub	sp, #24
 800f83e:	af00      	add	r7, sp, #0
 800f840:	60f8      	str	r0, [r7, #12]
 800f842:	60b9      	str	r1, [r7, #8]
 800f844:	4613      	mov	r3, r2
 800f846:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800f848:	2301      	movs	r3, #1
 800f84a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	789b      	ldrb	r3, [r3, #2]
 800f850:	2b01      	cmp	r3, #1
 800f852:	d002      	beq.n	800f85a <USBH_CtlReq+0x20>
 800f854:	2b02      	cmp	r3, #2
 800f856:	d00f      	beq.n	800f878 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800f858:	e027      	b.n	800f8aa <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800f85a:	68fb      	ldr	r3, [r7, #12]
 800f85c:	68ba      	ldr	r2, [r7, #8]
 800f85e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800f860:	68fb      	ldr	r3, [r7, #12]
 800f862:	88fa      	ldrh	r2, [r7, #6]
 800f864:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800f866:	68fb      	ldr	r3, [r7, #12]
 800f868:	2201      	movs	r2, #1
 800f86a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	2202      	movs	r2, #2
 800f870:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800f872:	2301      	movs	r3, #1
 800f874:	75fb      	strb	r3, [r7, #23]
      break;
 800f876:	e018      	b.n	800f8aa <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800f878:	68f8      	ldr	r0, [r7, #12]
 800f87a:	f000 f81b 	bl	800f8b4 <USBH_HandleControl>
 800f87e:	4603      	mov	r3, r0
 800f880:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800f882:	7dfb      	ldrb	r3, [r7, #23]
 800f884:	2b00      	cmp	r3, #0
 800f886:	d002      	beq.n	800f88e <USBH_CtlReq+0x54>
 800f888:	7dfb      	ldrb	r3, [r7, #23]
 800f88a:	2b03      	cmp	r3, #3
 800f88c:	d106      	bne.n	800f89c <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800f88e:	68fb      	ldr	r3, [r7, #12]
 800f890:	2201      	movs	r2, #1
 800f892:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800f894:	68fb      	ldr	r3, [r7, #12]
 800f896:	2200      	movs	r2, #0
 800f898:	761a      	strb	r2, [r3, #24]
      break;
 800f89a:	e005      	b.n	800f8a8 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800f89c:	7dfb      	ldrb	r3, [r7, #23]
 800f89e:	2b02      	cmp	r3, #2
 800f8a0:	d102      	bne.n	800f8a8 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800f8a2:	68fb      	ldr	r3, [r7, #12]
 800f8a4:	2201      	movs	r2, #1
 800f8a6:	709a      	strb	r2, [r3, #2]
      break;
 800f8a8:	bf00      	nop
  }
  return status;
 800f8aa:	7dfb      	ldrb	r3, [r7, #23]
}
 800f8ac:	4618      	mov	r0, r3
 800f8ae:	3718      	adds	r7, #24
 800f8b0:	46bd      	mov	sp, r7
 800f8b2:	bd80      	pop	{r7, pc}

0800f8b4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800f8b4:	b580      	push	{r7, lr}
 800f8b6:	b086      	sub	sp, #24
 800f8b8:	af02      	add	r7, sp, #8
 800f8ba:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800f8bc:	2301      	movs	r3, #1
 800f8be:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800f8c0:	2300      	movs	r3, #0
 800f8c2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	7e1b      	ldrb	r3, [r3, #24]
 800f8c8:	3b01      	subs	r3, #1
 800f8ca:	2b0a      	cmp	r3, #10
 800f8cc:	f200 8158 	bhi.w	800fb80 <USBH_HandleControl+0x2cc>
 800f8d0:	a201      	add	r2, pc, #4	; (adr r2, 800f8d8 <USBH_HandleControl+0x24>)
 800f8d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8d6:	bf00      	nop
 800f8d8:	0800f905 	.word	0x0800f905
 800f8dc:	0800f91f 	.word	0x0800f91f
 800f8e0:	0800f989 	.word	0x0800f989
 800f8e4:	0800f9af 	.word	0x0800f9af
 800f8e8:	0800f9e7 	.word	0x0800f9e7
 800f8ec:	0800fa13 	.word	0x0800fa13
 800f8f0:	0800fa65 	.word	0x0800fa65
 800f8f4:	0800fa87 	.word	0x0800fa87
 800f8f8:	0800fac3 	.word	0x0800fac3
 800f8fc:	0800faeb 	.word	0x0800faeb
 800f900:	0800fb29 	.word	0x0800fb29
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	f103 0110 	add.w	r1, r3, #16
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	795b      	ldrb	r3, [r3, #5]
 800f90e:	461a      	mov	r2, r3
 800f910:	6878      	ldr	r0, [r7, #4]
 800f912:	f000 f945 	bl	800fba0 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	2202      	movs	r2, #2
 800f91a:	761a      	strb	r2, [r3, #24]
      break;
 800f91c:	e13b      	b.n	800fb96 <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	795b      	ldrb	r3, [r3, #5]
 800f922:	4619      	mov	r1, r3
 800f924:	6878      	ldr	r0, [r7, #4]
 800f926:	f000 fcc5 	bl	80102b4 <USBH_LL_GetURBState>
 800f92a:	4603      	mov	r3, r0
 800f92c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800f92e:	7bbb      	ldrb	r3, [r7, #14]
 800f930:	2b01      	cmp	r3, #1
 800f932:	d11e      	bne.n	800f972 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	7c1b      	ldrb	r3, [r3, #16]
 800f938:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800f93c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	8adb      	ldrh	r3, [r3, #22]
 800f942:	2b00      	cmp	r3, #0
 800f944:	d00a      	beq.n	800f95c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800f946:	7b7b      	ldrb	r3, [r7, #13]
 800f948:	2b80      	cmp	r3, #128	; 0x80
 800f94a:	d103      	bne.n	800f954 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	2203      	movs	r2, #3
 800f950:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800f952:	e117      	b.n	800fb84 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	2205      	movs	r2, #5
 800f958:	761a      	strb	r2, [r3, #24]
      break;
 800f95a:	e113      	b.n	800fb84 <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 800f95c:	7b7b      	ldrb	r3, [r7, #13]
 800f95e:	2b80      	cmp	r3, #128	; 0x80
 800f960:	d103      	bne.n	800f96a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	2209      	movs	r2, #9
 800f966:	761a      	strb	r2, [r3, #24]
      break;
 800f968:	e10c      	b.n	800fb84 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	2207      	movs	r2, #7
 800f96e:	761a      	strb	r2, [r3, #24]
      break;
 800f970:	e108      	b.n	800fb84 <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800f972:	7bbb      	ldrb	r3, [r7, #14]
 800f974:	2b04      	cmp	r3, #4
 800f976:	d003      	beq.n	800f980 <USBH_HandleControl+0xcc>
 800f978:	7bbb      	ldrb	r3, [r7, #14]
 800f97a:	2b02      	cmp	r3, #2
 800f97c:	f040 8102 	bne.w	800fb84 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	220b      	movs	r2, #11
 800f984:	761a      	strb	r2, [r3, #24]
      break;
 800f986:	e0fd      	b.n	800fb84 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800f98e:	b29a      	uxth	r2, r3
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	6899      	ldr	r1, [r3, #8]
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	899a      	ldrh	r2, [r3, #12]
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	791b      	ldrb	r3, [r3, #4]
 800f9a0:	6878      	ldr	r0, [r7, #4]
 800f9a2:	f000 f93c 	bl	800fc1e <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	2204      	movs	r2, #4
 800f9aa:	761a      	strb	r2, [r3, #24]
      break;
 800f9ac:	e0f3      	b.n	800fb96 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	791b      	ldrb	r3, [r3, #4]
 800f9b2:	4619      	mov	r1, r3
 800f9b4:	6878      	ldr	r0, [r7, #4]
 800f9b6:	f000 fc7d 	bl	80102b4 <USBH_LL_GetURBState>
 800f9ba:	4603      	mov	r3, r0
 800f9bc:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800f9be:	7bbb      	ldrb	r3, [r7, #14]
 800f9c0:	2b01      	cmp	r3, #1
 800f9c2:	d102      	bne.n	800f9ca <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	2209      	movs	r2, #9
 800f9c8:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800f9ca:	7bbb      	ldrb	r3, [r7, #14]
 800f9cc:	2b05      	cmp	r3, #5
 800f9ce:	d102      	bne.n	800f9d6 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800f9d0:	2303      	movs	r3, #3
 800f9d2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800f9d4:	e0d8      	b.n	800fb88 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800f9d6:	7bbb      	ldrb	r3, [r7, #14]
 800f9d8:	2b04      	cmp	r3, #4
 800f9da:	f040 80d5 	bne.w	800fb88 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	220b      	movs	r2, #11
 800f9e2:	761a      	strb	r2, [r3, #24]
      break;
 800f9e4:	e0d0      	b.n	800fb88 <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	6899      	ldr	r1, [r3, #8]
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	899a      	ldrh	r2, [r3, #12]
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	7958      	ldrb	r0, [r3, #5]
 800f9f2:	2301      	movs	r3, #1
 800f9f4:	9300      	str	r3, [sp, #0]
 800f9f6:	4603      	mov	r3, r0
 800f9f8:	6878      	ldr	r0, [r7, #4]
 800f9fa:	f000 f8eb 	bl	800fbd4 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800fa04:	b29a      	uxth	r2, r3
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	2206      	movs	r2, #6
 800fa0e:	761a      	strb	r2, [r3, #24]
      break;
 800fa10:	e0c1      	b.n	800fb96 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	795b      	ldrb	r3, [r3, #5]
 800fa16:	4619      	mov	r1, r3
 800fa18:	6878      	ldr	r0, [r7, #4]
 800fa1a:	f000 fc4b 	bl	80102b4 <USBH_LL_GetURBState>
 800fa1e:	4603      	mov	r3, r0
 800fa20:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800fa22:	7bbb      	ldrb	r3, [r7, #14]
 800fa24:	2b01      	cmp	r3, #1
 800fa26:	d103      	bne.n	800fa30 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	2207      	movs	r2, #7
 800fa2c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800fa2e:	e0ad      	b.n	800fb8c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 800fa30:	7bbb      	ldrb	r3, [r7, #14]
 800fa32:	2b05      	cmp	r3, #5
 800fa34:	d105      	bne.n	800fa42 <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	220c      	movs	r2, #12
 800fa3a:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800fa3c:	2303      	movs	r3, #3
 800fa3e:	73fb      	strb	r3, [r7, #15]
      break;
 800fa40:	e0a4      	b.n	800fb8c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 800fa42:	7bbb      	ldrb	r3, [r7, #14]
 800fa44:	2b02      	cmp	r3, #2
 800fa46:	d103      	bne.n	800fa50 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	2205      	movs	r2, #5
 800fa4c:	761a      	strb	r2, [r3, #24]
      break;
 800fa4e:	e09d      	b.n	800fb8c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 800fa50:	7bbb      	ldrb	r3, [r7, #14]
 800fa52:	2b04      	cmp	r3, #4
 800fa54:	f040 809a 	bne.w	800fb8c <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	220b      	movs	r2, #11
 800fa5c:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800fa5e:	2302      	movs	r3, #2
 800fa60:	73fb      	strb	r3, [r7, #15]
      break;
 800fa62:	e093      	b.n	800fb8c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	791b      	ldrb	r3, [r3, #4]
 800fa68:	2200      	movs	r2, #0
 800fa6a:	2100      	movs	r1, #0
 800fa6c:	6878      	ldr	r0, [r7, #4]
 800fa6e:	f000 f8d6 	bl	800fc1e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800fa78:	b29a      	uxth	r2, r3
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	2208      	movs	r2, #8
 800fa82:	761a      	strb	r2, [r3, #24]

      break;
 800fa84:	e087      	b.n	800fb96 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	791b      	ldrb	r3, [r3, #4]
 800fa8a:	4619      	mov	r1, r3
 800fa8c:	6878      	ldr	r0, [r7, #4]
 800fa8e:	f000 fc11 	bl	80102b4 <USBH_LL_GetURBState>
 800fa92:	4603      	mov	r3, r0
 800fa94:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800fa96:	7bbb      	ldrb	r3, [r7, #14]
 800fa98:	2b01      	cmp	r3, #1
 800fa9a:	d105      	bne.n	800faa8 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	220d      	movs	r2, #13
 800faa0:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800faa2:	2300      	movs	r3, #0
 800faa4:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800faa6:	e073      	b.n	800fb90 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 800faa8:	7bbb      	ldrb	r3, [r7, #14]
 800faaa:	2b04      	cmp	r3, #4
 800faac:	d103      	bne.n	800fab6 <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	220b      	movs	r2, #11
 800fab2:	761a      	strb	r2, [r3, #24]
      break;
 800fab4:	e06c      	b.n	800fb90 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 800fab6:	7bbb      	ldrb	r3, [r7, #14]
 800fab8:	2b05      	cmp	r3, #5
 800faba:	d169      	bne.n	800fb90 <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 800fabc:	2303      	movs	r3, #3
 800fabe:	73fb      	strb	r3, [r7, #15]
      break;
 800fac0:	e066      	b.n	800fb90 <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	795a      	ldrb	r2, [r3, #5]
 800fac6:	2301      	movs	r3, #1
 800fac8:	9300      	str	r3, [sp, #0]
 800faca:	4613      	mov	r3, r2
 800facc:	2200      	movs	r2, #0
 800face:	2100      	movs	r1, #0
 800fad0:	6878      	ldr	r0, [r7, #4]
 800fad2:	f000 f87f 	bl	800fbd4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800fadc:	b29a      	uxth	r2, r3
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	220a      	movs	r2, #10
 800fae6:	761a      	strb	r2, [r3, #24]
      break;
 800fae8:	e055      	b.n	800fb96 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	795b      	ldrb	r3, [r3, #5]
 800faee:	4619      	mov	r1, r3
 800faf0:	6878      	ldr	r0, [r7, #4]
 800faf2:	f000 fbdf 	bl	80102b4 <USBH_LL_GetURBState>
 800faf6:	4603      	mov	r3, r0
 800faf8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800fafa:	7bbb      	ldrb	r3, [r7, #14]
 800fafc:	2b01      	cmp	r3, #1
 800fafe:	d105      	bne.n	800fb0c <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 800fb00:	2300      	movs	r3, #0
 800fb02:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	220d      	movs	r2, #13
 800fb08:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800fb0a:	e043      	b.n	800fb94 <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 800fb0c:	7bbb      	ldrb	r3, [r7, #14]
 800fb0e:	2b02      	cmp	r3, #2
 800fb10:	d103      	bne.n	800fb1a <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	2209      	movs	r2, #9
 800fb16:	761a      	strb	r2, [r3, #24]
      break;
 800fb18:	e03c      	b.n	800fb94 <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 800fb1a:	7bbb      	ldrb	r3, [r7, #14]
 800fb1c:	2b04      	cmp	r3, #4
 800fb1e:	d139      	bne.n	800fb94 <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	220b      	movs	r2, #11
 800fb24:	761a      	strb	r2, [r3, #24]
      break;
 800fb26:	e035      	b.n	800fb94 <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	7e5b      	ldrb	r3, [r3, #25]
 800fb2c:	3301      	adds	r3, #1
 800fb2e:	b2da      	uxtb	r2, r3
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	765a      	strb	r2, [r3, #25]
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	7e5b      	ldrb	r3, [r3, #25]
 800fb38:	2b02      	cmp	r3, #2
 800fb3a:	d806      	bhi.n	800fb4a <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	2201      	movs	r2, #1
 800fb40:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	2201      	movs	r2, #1
 800fb46:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800fb48:	e025      	b.n	800fb96 <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800fb50:	2106      	movs	r1, #6
 800fb52:	6878      	ldr	r0, [r7, #4]
 800fb54:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	2200      	movs	r2, #0
 800fb5a:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	795b      	ldrb	r3, [r3, #5]
 800fb60:	4619      	mov	r1, r3
 800fb62:	6878      	ldr	r0, [r7, #4]
 800fb64:	f000 f90c 	bl	800fd80 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	791b      	ldrb	r3, [r3, #4]
 800fb6c:	4619      	mov	r1, r3
 800fb6e:	6878      	ldr	r0, [r7, #4]
 800fb70:	f000 f906 	bl	800fd80 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	2200      	movs	r2, #0
 800fb78:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800fb7a:	2302      	movs	r3, #2
 800fb7c:	73fb      	strb	r3, [r7, #15]
      break;
 800fb7e:	e00a      	b.n	800fb96 <USBH_HandleControl+0x2e2>

    default:
      break;
 800fb80:	bf00      	nop
 800fb82:	e008      	b.n	800fb96 <USBH_HandleControl+0x2e2>
      break;
 800fb84:	bf00      	nop
 800fb86:	e006      	b.n	800fb96 <USBH_HandleControl+0x2e2>
      break;
 800fb88:	bf00      	nop
 800fb8a:	e004      	b.n	800fb96 <USBH_HandleControl+0x2e2>
      break;
 800fb8c:	bf00      	nop
 800fb8e:	e002      	b.n	800fb96 <USBH_HandleControl+0x2e2>
      break;
 800fb90:	bf00      	nop
 800fb92:	e000      	b.n	800fb96 <USBH_HandleControl+0x2e2>
      break;
 800fb94:	bf00      	nop
  }

  return status;
 800fb96:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb98:	4618      	mov	r0, r3
 800fb9a:	3710      	adds	r7, #16
 800fb9c:	46bd      	mov	sp, r7
 800fb9e:	bd80      	pop	{r7, pc}

0800fba0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800fba0:	b580      	push	{r7, lr}
 800fba2:	b088      	sub	sp, #32
 800fba4:	af04      	add	r7, sp, #16
 800fba6:	60f8      	str	r0, [r7, #12]
 800fba8:	60b9      	str	r1, [r7, #8]
 800fbaa:	4613      	mov	r3, r2
 800fbac:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800fbae:	79f9      	ldrb	r1, [r7, #7]
 800fbb0:	2300      	movs	r3, #0
 800fbb2:	9303      	str	r3, [sp, #12]
 800fbb4:	2308      	movs	r3, #8
 800fbb6:	9302      	str	r3, [sp, #8]
 800fbb8:	68bb      	ldr	r3, [r7, #8]
 800fbba:	9301      	str	r3, [sp, #4]
 800fbbc:	2300      	movs	r3, #0
 800fbbe:	9300      	str	r3, [sp, #0]
 800fbc0:	2300      	movs	r3, #0
 800fbc2:	2200      	movs	r2, #0
 800fbc4:	68f8      	ldr	r0, [r7, #12]
 800fbc6:	f000 fb44 	bl	8010252 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800fbca:	2300      	movs	r3, #0
}
 800fbcc:	4618      	mov	r0, r3
 800fbce:	3710      	adds	r7, #16
 800fbd0:	46bd      	mov	sp, r7
 800fbd2:	bd80      	pop	{r7, pc}

0800fbd4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800fbd4:	b580      	push	{r7, lr}
 800fbd6:	b088      	sub	sp, #32
 800fbd8:	af04      	add	r7, sp, #16
 800fbda:	60f8      	str	r0, [r7, #12]
 800fbdc:	60b9      	str	r1, [r7, #8]
 800fbde:	4611      	mov	r1, r2
 800fbe0:	461a      	mov	r2, r3
 800fbe2:	460b      	mov	r3, r1
 800fbe4:	80fb      	strh	r3, [r7, #6]
 800fbe6:	4613      	mov	r3, r2
 800fbe8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800fbea:	68fb      	ldr	r3, [r7, #12]
 800fbec:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	d001      	beq.n	800fbf8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800fbf4:	2300      	movs	r3, #0
 800fbf6:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800fbf8:	7979      	ldrb	r1, [r7, #5]
 800fbfa:	7e3b      	ldrb	r3, [r7, #24]
 800fbfc:	9303      	str	r3, [sp, #12]
 800fbfe:	88fb      	ldrh	r3, [r7, #6]
 800fc00:	9302      	str	r3, [sp, #8]
 800fc02:	68bb      	ldr	r3, [r7, #8]
 800fc04:	9301      	str	r3, [sp, #4]
 800fc06:	2301      	movs	r3, #1
 800fc08:	9300      	str	r3, [sp, #0]
 800fc0a:	2300      	movs	r3, #0
 800fc0c:	2200      	movs	r2, #0
 800fc0e:	68f8      	ldr	r0, [r7, #12]
 800fc10:	f000 fb1f 	bl	8010252 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800fc14:	2300      	movs	r3, #0
}
 800fc16:	4618      	mov	r0, r3
 800fc18:	3710      	adds	r7, #16
 800fc1a:	46bd      	mov	sp, r7
 800fc1c:	bd80      	pop	{r7, pc}

0800fc1e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800fc1e:	b580      	push	{r7, lr}
 800fc20:	b088      	sub	sp, #32
 800fc22:	af04      	add	r7, sp, #16
 800fc24:	60f8      	str	r0, [r7, #12]
 800fc26:	60b9      	str	r1, [r7, #8]
 800fc28:	4611      	mov	r1, r2
 800fc2a:	461a      	mov	r2, r3
 800fc2c:	460b      	mov	r3, r1
 800fc2e:	80fb      	strh	r3, [r7, #6]
 800fc30:	4613      	mov	r3, r2
 800fc32:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800fc34:	7979      	ldrb	r1, [r7, #5]
 800fc36:	2300      	movs	r3, #0
 800fc38:	9303      	str	r3, [sp, #12]
 800fc3a:	88fb      	ldrh	r3, [r7, #6]
 800fc3c:	9302      	str	r3, [sp, #8]
 800fc3e:	68bb      	ldr	r3, [r7, #8]
 800fc40:	9301      	str	r3, [sp, #4]
 800fc42:	2301      	movs	r3, #1
 800fc44:	9300      	str	r3, [sp, #0]
 800fc46:	2300      	movs	r3, #0
 800fc48:	2201      	movs	r2, #1
 800fc4a:	68f8      	ldr	r0, [r7, #12]
 800fc4c:	f000 fb01 	bl	8010252 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800fc50:	2300      	movs	r3, #0

}
 800fc52:	4618      	mov	r0, r3
 800fc54:	3710      	adds	r7, #16
 800fc56:	46bd      	mov	sp, r7
 800fc58:	bd80      	pop	{r7, pc}

0800fc5a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800fc5a:	b580      	push	{r7, lr}
 800fc5c:	b088      	sub	sp, #32
 800fc5e:	af04      	add	r7, sp, #16
 800fc60:	60f8      	str	r0, [r7, #12]
 800fc62:	60b9      	str	r1, [r7, #8]
 800fc64:	4611      	mov	r1, r2
 800fc66:	461a      	mov	r2, r3
 800fc68:	460b      	mov	r3, r1
 800fc6a:	80fb      	strh	r3, [r7, #6]
 800fc6c:	4613      	mov	r3, r2
 800fc6e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800fc70:	68fb      	ldr	r3, [r7, #12]
 800fc72:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d001      	beq.n	800fc7e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800fc7a:	2300      	movs	r3, #0
 800fc7c:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800fc7e:	7979      	ldrb	r1, [r7, #5]
 800fc80:	7e3b      	ldrb	r3, [r7, #24]
 800fc82:	9303      	str	r3, [sp, #12]
 800fc84:	88fb      	ldrh	r3, [r7, #6]
 800fc86:	9302      	str	r3, [sp, #8]
 800fc88:	68bb      	ldr	r3, [r7, #8]
 800fc8a:	9301      	str	r3, [sp, #4]
 800fc8c:	2301      	movs	r3, #1
 800fc8e:	9300      	str	r3, [sp, #0]
 800fc90:	2302      	movs	r3, #2
 800fc92:	2200      	movs	r2, #0
 800fc94:	68f8      	ldr	r0, [r7, #12]
 800fc96:	f000 fadc 	bl	8010252 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800fc9a:	2300      	movs	r3, #0
}
 800fc9c:	4618      	mov	r0, r3
 800fc9e:	3710      	adds	r7, #16
 800fca0:	46bd      	mov	sp, r7
 800fca2:	bd80      	pop	{r7, pc}

0800fca4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800fca4:	b580      	push	{r7, lr}
 800fca6:	b088      	sub	sp, #32
 800fca8:	af04      	add	r7, sp, #16
 800fcaa:	60f8      	str	r0, [r7, #12]
 800fcac:	60b9      	str	r1, [r7, #8]
 800fcae:	4611      	mov	r1, r2
 800fcb0:	461a      	mov	r2, r3
 800fcb2:	460b      	mov	r3, r1
 800fcb4:	80fb      	strh	r3, [r7, #6]
 800fcb6:	4613      	mov	r3, r2
 800fcb8:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800fcba:	7979      	ldrb	r1, [r7, #5]
 800fcbc:	2300      	movs	r3, #0
 800fcbe:	9303      	str	r3, [sp, #12]
 800fcc0:	88fb      	ldrh	r3, [r7, #6]
 800fcc2:	9302      	str	r3, [sp, #8]
 800fcc4:	68bb      	ldr	r3, [r7, #8]
 800fcc6:	9301      	str	r3, [sp, #4]
 800fcc8:	2301      	movs	r3, #1
 800fcca:	9300      	str	r3, [sp, #0]
 800fccc:	2302      	movs	r3, #2
 800fcce:	2201      	movs	r2, #1
 800fcd0:	68f8      	ldr	r0, [r7, #12]
 800fcd2:	f000 fabe 	bl	8010252 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800fcd6:	2300      	movs	r3, #0
}
 800fcd8:	4618      	mov	r0, r3
 800fcda:	3710      	adds	r7, #16
 800fcdc:	46bd      	mov	sp, r7
 800fcde:	bd80      	pop	{r7, pc}

0800fce0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800fce0:	b580      	push	{r7, lr}
 800fce2:	b086      	sub	sp, #24
 800fce4:	af04      	add	r7, sp, #16
 800fce6:	6078      	str	r0, [r7, #4]
 800fce8:	4608      	mov	r0, r1
 800fcea:	4611      	mov	r1, r2
 800fcec:	461a      	mov	r2, r3
 800fcee:	4603      	mov	r3, r0
 800fcf0:	70fb      	strb	r3, [r7, #3]
 800fcf2:	460b      	mov	r3, r1
 800fcf4:	70bb      	strb	r3, [r7, #2]
 800fcf6:	4613      	mov	r3, r2
 800fcf8:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800fcfa:	7878      	ldrb	r0, [r7, #1]
 800fcfc:	78ba      	ldrb	r2, [r7, #2]
 800fcfe:	78f9      	ldrb	r1, [r7, #3]
 800fd00:	8b3b      	ldrh	r3, [r7, #24]
 800fd02:	9302      	str	r3, [sp, #8]
 800fd04:	7d3b      	ldrb	r3, [r7, #20]
 800fd06:	9301      	str	r3, [sp, #4]
 800fd08:	7c3b      	ldrb	r3, [r7, #16]
 800fd0a:	9300      	str	r3, [sp, #0]
 800fd0c:	4603      	mov	r3, r0
 800fd0e:	6878      	ldr	r0, [r7, #4]
 800fd10:	f000 fa51 	bl	80101b6 <USBH_LL_OpenPipe>

  return USBH_OK;
 800fd14:	2300      	movs	r3, #0
}
 800fd16:	4618      	mov	r0, r3
 800fd18:	3708      	adds	r7, #8
 800fd1a:	46bd      	mov	sp, r7
 800fd1c:	bd80      	pop	{r7, pc}

0800fd1e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800fd1e:	b580      	push	{r7, lr}
 800fd20:	b082      	sub	sp, #8
 800fd22:	af00      	add	r7, sp, #0
 800fd24:	6078      	str	r0, [r7, #4]
 800fd26:	460b      	mov	r3, r1
 800fd28:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800fd2a:	78fb      	ldrb	r3, [r7, #3]
 800fd2c:	4619      	mov	r1, r3
 800fd2e:	6878      	ldr	r0, [r7, #4]
 800fd30:	f000 fa70 	bl	8010214 <USBH_LL_ClosePipe>

  return USBH_OK;
 800fd34:	2300      	movs	r3, #0
}
 800fd36:	4618      	mov	r0, r3
 800fd38:	3708      	adds	r7, #8
 800fd3a:	46bd      	mov	sp, r7
 800fd3c:	bd80      	pop	{r7, pc}

0800fd3e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800fd3e:	b580      	push	{r7, lr}
 800fd40:	b084      	sub	sp, #16
 800fd42:	af00      	add	r7, sp, #0
 800fd44:	6078      	str	r0, [r7, #4]
 800fd46:	460b      	mov	r3, r1
 800fd48:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800fd4a:	6878      	ldr	r0, [r7, #4]
 800fd4c:	f000 f836 	bl	800fdbc <USBH_GetFreePipe>
 800fd50:	4603      	mov	r3, r0
 800fd52:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800fd54:	89fb      	ldrh	r3, [r7, #14]
 800fd56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fd5a:	4293      	cmp	r3, r2
 800fd5c:	d00a      	beq.n	800fd74 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800fd5e:	78fa      	ldrb	r2, [r7, #3]
 800fd60:	89fb      	ldrh	r3, [r7, #14]
 800fd62:	f003 030f 	and.w	r3, r3, #15
 800fd66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800fd6a:	6879      	ldr	r1, [r7, #4]
 800fd6c:	33e0      	adds	r3, #224	; 0xe0
 800fd6e:	009b      	lsls	r3, r3, #2
 800fd70:	440b      	add	r3, r1
 800fd72:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800fd74:	89fb      	ldrh	r3, [r7, #14]
 800fd76:	b2db      	uxtb	r3, r3
}
 800fd78:	4618      	mov	r0, r3
 800fd7a:	3710      	adds	r7, #16
 800fd7c:	46bd      	mov	sp, r7
 800fd7e:	bd80      	pop	{r7, pc}

0800fd80 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800fd80:	b480      	push	{r7}
 800fd82:	b083      	sub	sp, #12
 800fd84:	af00      	add	r7, sp, #0
 800fd86:	6078      	str	r0, [r7, #4]
 800fd88:	460b      	mov	r3, r1
 800fd8a:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800fd8c:	78fb      	ldrb	r3, [r7, #3]
 800fd8e:	2b0a      	cmp	r3, #10
 800fd90:	d80d      	bhi.n	800fdae <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800fd92:	78fb      	ldrb	r3, [r7, #3]
 800fd94:	687a      	ldr	r2, [r7, #4]
 800fd96:	33e0      	adds	r3, #224	; 0xe0
 800fd98:	009b      	lsls	r3, r3, #2
 800fd9a:	4413      	add	r3, r2
 800fd9c:	685a      	ldr	r2, [r3, #4]
 800fd9e:	78fb      	ldrb	r3, [r7, #3]
 800fda0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800fda4:	6879      	ldr	r1, [r7, #4]
 800fda6:	33e0      	adds	r3, #224	; 0xe0
 800fda8:	009b      	lsls	r3, r3, #2
 800fdaa:	440b      	add	r3, r1
 800fdac:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800fdae:	2300      	movs	r3, #0
}
 800fdb0:	4618      	mov	r0, r3
 800fdb2:	370c      	adds	r7, #12
 800fdb4:	46bd      	mov	sp, r7
 800fdb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdba:	4770      	bx	lr

0800fdbc <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800fdbc:	b480      	push	{r7}
 800fdbe:	b085      	sub	sp, #20
 800fdc0:	af00      	add	r7, sp, #0
 800fdc2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800fdc4:	2300      	movs	r3, #0
 800fdc6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800fdc8:	2300      	movs	r3, #0
 800fdca:	73fb      	strb	r3, [r7, #15]
 800fdcc:	e00f      	b.n	800fdee <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800fdce:	7bfb      	ldrb	r3, [r7, #15]
 800fdd0:	687a      	ldr	r2, [r7, #4]
 800fdd2:	33e0      	adds	r3, #224	; 0xe0
 800fdd4:	009b      	lsls	r3, r3, #2
 800fdd6:	4413      	add	r3, r2
 800fdd8:	685b      	ldr	r3, [r3, #4]
 800fdda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d102      	bne.n	800fde8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800fde2:	7bfb      	ldrb	r3, [r7, #15]
 800fde4:	b29b      	uxth	r3, r3
 800fde6:	e007      	b.n	800fdf8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800fde8:	7bfb      	ldrb	r3, [r7, #15]
 800fdea:	3301      	adds	r3, #1
 800fdec:	73fb      	strb	r3, [r7, #15]
 800fdee:	7bfb      	ldrb	r3, [r7, #15]
 800fdf0:	2b0a      	cmp	r3, #10
 800fdf2:	d9ec      	bls.n	800fdce <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800fdf4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800fdf8:	4618      	mov	r0, r3
 800fdfa:	3714      	adds	r7, #20
 800fdfc:	46bd      	mov	sp, r7
 800fdfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe02:	4770      	bx	lr

0800fe04 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800fe04:	b580      	push	{r7, lr}
 800fe06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800fe08:	2201      	movs	r2, #1
 800fe0a:	490e      	ldr	r1, [pc, #56]	; (800fe44 <MX_USB_HOST_Init+0x40>)
 800fe0c:	480e      	ldr	r0, [pc, #56]	; (800fe48 <MX_USB_HOST_Init+0x44>)
 800fe0e:	f7fe fc9f 	bl	800e750 <USBH_Init>
 800fe12:	4603      	mov	r3, r0
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d001      	beq.n	800fe1c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800fe18:	f7f9 fa24 	bl	8009264 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800fe1c:	490b      	ldr	r1, [pc, #44]	; (800fe4c <MX_USB_HOST_Init+0x48>)
 800fe1e:	480a      	ldr	r0, [pc, #40]	; (800fe48 <MX_USB_HOST_Init+0x44>)
 800fe20:	f7fe fd24 	bl	800e86c <USBH_RegisterClass>
 800fe24:	4603      	mov	r3, r0
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d001      	beq.n	800fe2e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800fe2a:	f7f9 fa1b 	bl	8009264 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800fe2e:	4806      	ldr	r0, [pc, #24]	; (800fe48 <MX_USB_HOST_Init+0x44>)
 800fe30:	f7fe fda8 	bl	800e984 <USBH_Start>
 800fe34:	4603      	mov	r3, r0
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	d001      	beq.n	800fe3e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800fe3a:	f7f9 fa13 	bl	8009264 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800fe3e:	bf00      	nop
 800fe40:	bd80      	pop	{r7, pc}
 800fe42:	bf00      	nop
 800fe44:	0800fe65 	.word	0x0800fe65
 800fe48:	2000036c 	.word	0x2000036c
 800fe4c:	20000170 	.word	0x20000170

0800fe50 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800fe50:	b580      	push	{r7, lr}
 800fe52:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800fe54:	4802      	ldr	r0, [pc, #8]	; (800fe60 <MX_USB_HOST_Process+0x10>)
 800fe56:	f7fe fda5 	bl	800e9a4 <USBH_Process>
}
 800fe5a:	bf00      	nop
 800fe5c:	bd80      	pop	{r7, pc}
 800fe5e:	bf00      	nop
 800fe60:	2000036c 	.word	0x2000036c

0800fe64 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800fe64:	b480      	push	{r7}
 800fe66:	b083      	sub	sp, #12
 800fe68:	af00      	add	r7, sp, #0
 800fe6a:	6078      	str	r0, [r7, #4]
 800fe6c:	460b      	mov	r3, r1
 800fe6e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800fe70:	78fb      	ldrb	r3, [r7, #3]
 800fe72:	3b01      	subs	r3, #1
 800fe74:	2b04      	cmp	r3, #4
 800fe76:	d819      	bhi.n	800feac <USBH_UserProcess+0x48>
 800fe78:	a201      	add	r2, pc, #4	; (adr r2, 800fe80 <USBH_UserProcess+0x1c>)
 800fe7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe7e:	bf00      	nop
 800fe80:	0800fead 	.word	0x0800fead
 800fe84:	0800fe9d 	.word	0x0800fe9d
 800fe88:	0800fead 	.word	0x0800fead
 800fe8c:	0800fea5 	.word	0x0800fea5
 800fe90:	0800fe95 	.word	0x0800fe95
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800fe94:	4b09      	ldr	r3, [pc, #36]	; (800febc <USBH_UserProcess+0x58>)
 800fe96:	2203      	movs	r2, #3
 800fe98:	701a      	strb	r2, [r3, #0]
  break;
 800fe9a:	e008      	b.n	800feae <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800fe9c:	4b07      	ldr	r3, [pc, #28]	; (800febc <USBH_UserProcess+0x58>)
 800fe9e:	2202      	movs	r2, #2
 800fea0:	701a      	strb	r2, [r3, #0]
  break;
 800fea2:	e004      	b.n	800feae <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800fea4:	4b05      	ldr	r3, [pc, #20]	; (800febc <USBH_UserProcess+0x58>)
 800fea6:	2201      	movs	r2, #1
 800fea8:	701a      	strb	r2, [r3, #0]
  break;
 800feaa:	e000      	b.n	800feae <USBH_UserProcess+0x4a>

  default:
  break;
 800feac:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800feae:	bf00      	nop
 800feb0:	370c      	adds	r7, #12
 800feb2:	46bd      	mov	sp, r7
 800feb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feb8:	4770      	bx	lr
 800feba:	bf00      	nop
 800febc:	2000021c 	.word	0x2000021c

0800fec0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800fec0:	b580      	push	{r7, lr}
 800fec2:	b08a      	sub	sp, #40	; 0x28
 800fec4:	af00      	add	r7, sp, #0
 800fec6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fec8:	f107 0314 	add.w	r3, r7, #20
 800fecc:	2200      	movs	r2, #0
 800fece:	601a      	str	r2, [r3, #0]
 800fed0:	605a      	str	r2, [r3, #4]
 800fed2:	609a      	str	r2, [r3, #8]
 800fed4:	60da      	str	r2, [r3, #12]
 800fed6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	681b      	ldr	r3, [r3, #0]
 800fedc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800fee0:	d147      	bne.n	800ff72 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800fee2:	2300      	movs	r3, #0
 800fee4:	613b      	str	r3, [r7, #16]
 800fee6:	4b25      	ldr	r3, [pc, #148]	; (800ff7c <HAL_HCD_MspInit+0xbc>)
 800fee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800feea:	4a24      	ldr	r2, [pc, #144]	; (800ff7c <HAL_HCD_MspInit+0xbc>)
 800feec:	f043 0301 	orr.w	r3, r3, #1
 800fef0:	6313      	str	r3, [r2, #48]	; 0x30
 800fef2:	4b22      	ldr	r3, [pc, #136]	; (800ff7c <HAL_HCD_MspInit+0xbc>)
 800fef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fef6:	f003 0301 	and.w	r3, r3, #1
 800fefa:	613b      	str	r3, [r7, #16]
 800fefc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800fefe:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ff02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ff04:	2300      	movs	r3, #0
 800ff06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ff08:	2300      	movs	r3, #0
 800ff0a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800ff0c:	f107 0314 	add.w	r3, r7, #20
 800ff10:	4619      	mov	r1, r3
 800ff12:	481b      	ldr	r0, [pc, #108]	; (800ff80 <HAL_HCD_MspInit+0xc0>)
 800ff14:	f7f9 fcd2 	bl	80098bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800ff18:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800ff1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ff1e:	2302      	movs	r3, #2
 800ff20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ff22:	2300      	movs	r3, #0
 800ff24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ff26:	2303      	movs	r3, #3
 800ff28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ff2a:	230a      	movs	r3, #10
 800ff2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ff2e:	f107 0314 	add.w	r3, r7, #20
 800ff32:	4619      	mov	r1, r3
 800ff34:	4812      	ldr	r0, [pc, #72]	; (800ff80 <HAL_HCD_MspInit+0xc0>)
 800ff36:	f7f9 fcc1 	bl	80098bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ff3a:	4b10      	ldr	r3, [pc, #64]	; (800ff7c <HAL_HCD_MspInit+0xbc>)
 800ff3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ff3e:	4a0f      	ldr	r2, [pc, #60]	; (800ff7c <HAL_HCD_MspInit+0xbc>)
 800ff40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ff44:	6353      	str	r3, [r2, #52]	; 0x34
 800ff46:	2300      	movs	r3, #0
 800ff48:	60fb      	str	r3, [r7, #12]
 800ff4a:	4b0c      	ldr	r3, [pc, #48]	; (800ff7c <HAL_HCD_MspInit+0xbc>)
 800ff4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ff4e:	4a0b      	ldr	r2, [pc, #44]	; (800ff7c <HAL_HCD_MspInit+0xbc>)
 800ff50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ff54:	6453      	str	r3, [r2, #68]	; 0x44
 800ff56:	4b09      	ldr	r3, [pc, #36]	; (800ff7c <HAL_HCD_MspInit+0xbc>)
 800ff58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ff5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ff5e:	60fb      	str	r3, [r7, #12]
 800ff60:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ff62:	2200      	movs	r2, #0
 800ff64:	2100      	movs	r1, #0
 800ff66:	2043      	movs	r0, #67	; 0x43
 800ff68:	f7f9 fc71 	bl	800984e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ff6c:	2043      	movs	r0, #67	; 0x43
 800ff6e:	f7f9 fc8a 	bl	8009886 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ff72:	bf00      	nop
 800ff74:	3728      	adds	r7, #40	; 0x28
 800ff76:	46bd      	mov	sp, r7
 800ff78:	bd80      	pop	{r7, pc}
 800ff7a:	bf00      	nop
 800ff7c:	40023800 	.word	0x40023800
 800ff80:	40020000 	.word	0x40020000

0800ff84 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800ff84:	b580      	push	{r7, lr}
 800ff86:	b082      	sub	sp, #8
 800ff88:	af00      	add	r7, sp, #0
 800ff8a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ff92:	4618      	mov	r0, r3
 800ff94:	f7ff f8d9 	bl	800f14a <USBH_LL_IncTimer>
}
 800ff98:	bf00      	nop
 800ff9a:	3708      	adds	r7, #8
 800ff9c:	46bd      	mov	sp, r7
 800ff9e:	bd80      	pop	{r7, pc}

0800ffa0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ffa0:	b580      	push	{r7, lr}
 800ffa2:	b082      	sub	sp, #8
 800ffa4:	af00      	add	r7, sp, #0
 800ffa6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ffae:	4618      	mov	r0, r3
 800ffb0:	f7ff f911 	bl	800f1d6 <USBH_LL_Connect>
}
 800ffb4:	bf00      	nop
 800ffb6:	3708      	adds	r7, #8
 800ffb8:	46bd      	mov	sp, r7
 800ffba:	bd80      	pop	{r7, pc}

0800ffbc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ffbc:	b580      	push	{r7, lr}
 800ffbe:	b082      	sub	sp, #8
 800ffc0:	af00      	add	r7, sp, #0
 800ffc2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ffca:	4618      	mov	r0, r3
 800ffcc:	f7ff f91a 	bl	800f204 <USBH_LL_Disconnect>
}
 800ffd0:	bf00      	nop
 800ffd2:	3708      	adds	r7, #8
 800ffd4:	46bd      	mov	sp, r7
 800ffd6:	bd80      	pop	{r7, pc}

0800ffd8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800ffd8:	b480      	push	{r7}
 800ffda:	b083      	sub	sp, #12
 800ffdc:	af00      	add	r7, sp, #0
 800ffde:	6078      	str	r0, [r7, #4]
 800ffe0:	460b      	mov	r3, r1
 800ffe2:	70fb      	strb	r3, [r7, #3]
 800ffe4:	4613      	mov	r3, r2
 800ffe6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800ffe8:	bf00      	nop
 800ffea:	370c      	adds	r7, #12
 800ffec:	46bd      	mov	sp, r7
 800ffee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fff2:	4770      	bx	lr

0800fff4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800fff4:	b580      	push	{r7, lr}
 800fff6:	b082      	sub	sp, #8
 800fff8:	af00      	add	r7, sp, #0
 800fffa:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010002:	4618      	mov	r0, r3
 8010004:	f7ff f8cb 	bl	800f19e <USBH_LL_PortEnabled>
}
 8010008:	bf00      	nop
 801000a:	3708      	adds	r7, #8
 801000c:	46bd      	mov	sp, r7
 801000e:	bd80      	pop	{r7, pc}

08010010 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8010010:	b580      	push	{r7, lr}
 8010012:	b082      	sub	sp, #8
 8010014:	af00      	add	r7, sp, #0
 8010016:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801001e:	4618      	mov	r0, r3
 8010020:	f7ff f8cb 	bl	800f1ba <USBH_LL_PortDisabled>
}
 8010024:	bf00      	nop
 8010026:	3708      	adds	r7, #8
 8010028:	46bd      	mov	sp, r7
 801002a:	bd80      	pop	{r7, pc}

0801002c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 801002c:	b580      	push	{r7, lr}
 801002e:	b082      	sub	sp, #8
 8010030:	af00      	add	r7, sp, #0
 8010032:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 801003a:	2b01      	cmp	r3, #1
 801003c:	d12a      	bne.n	8010094 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 801003e:	4a18      	ldr	r2, [pc, #96]	; (80100a0 <USBH_LL_Init+0x74>)
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	4a15      	ldr	r2, [pc, #84]	; (80100a0 <USBH_LL_Init+0x74>)
 801004a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801004e:	4b14      	ldr	r3, [pc, #80]	; (80100a0 <USBH_LL_Init+0x74>)
 8010050:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8010054:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8010056:	4b12      	ldr	r3, [pc, #72]	; (80100a0 <USBH_LL_Init+0x74>)
 8010058:	2208      	movs	r2, #8
 801005a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 801005c:	4b10      	ldr	r3, [pc, #64]	; (80100a0 <USBH_LL_Init+0x74>)
 801005e:	2201      	movs	r2, #1
 8010060:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8010062:	4b0f      	ldr	r3, [pc, #60]	; (80100a0 <USBH_LL_Init+0x74>)
 8010064:	2200      	movs	r2, #0
 8010066:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8010068:	4b0d      	ldr	r3, [pc, #52]	; (80100a0 <USBH_LL_Init+0x74>)
 801006a:	2202      	movs	r2, #2
 801006c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801006e:	4b0c      	ldr	r3, [pc, #48]	; (80100a0 <USBH_LL_Init+0x74>)
 8010070:	2200      	movs	r2, #0
 8010072:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8010074:	480a      	ldr	r0, [pc, #40]	; (80100a0 <USBH_LL_Init+0x74>)
 8010076:	f7f9 fdd5 	bl	8009c24 <HAL_HCD_Init>
 801007a:	4603      	mov	r3, r0
 801007c:	2b00      	cmp	r3, #0
 801007e:	d001      	beq.n	8010084 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8010080:	f7f9 f8f0 	bl	8009264 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8010084:	4806      	ldr	r0, [pc, #24]	; (80100a0 <USBH_LL_Init+0x74>)
 8010086:	f7fa f9d9 	bl	800a43c <HAL_HCD_GetCurrentFrame>
 801008a:	4603      	mov	r3, r0
 801008c:	4619      	mov	r1, r3
 801008e:	6878      	ldr	r0, [r7, #4]
 8010090:	f7ff f84c 	bl	800f12c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8010094:	2300      	movs	r3, #0
}
 8010096:	4618      	mov	r0, r3
 8010098:	3708      	adds	r7, #8
 801009a:	46bd      	mov	sp, r7
 801009c:	bd80      	pop	{r7, pc}
 801009e:	bf00      	nop
 80100a0:	20000744 	.word	0x20000744

080100a4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80100a4:	b580      	push	{r7, lr}
 80100a6:	b084      	sub	sp, #16
 80100a8:	af00      	add	r7, sp, #0
 80100aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80100ac:	2300      	movs	r3, #0
 80100ae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80100b0:	2300      	movs	r3, #0
 80100b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80100ba:	4618      	mov	r0, r3
 80100bc:	f7fa f946 	bl	800a34c <HAL_HCD_Start>
 80100c0:	4603      	mov	r3, r0
 80100c2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80100c4:	7bfb      	ldrb	r3, [r7, #15]
 80100c6:	4618      	mov	r0, r3
 80100c8:	f000 f95c 	bl	8010384 <USBH_Get_USB_Status>
 80100cc:	4603      	mov	r3, r0
 80100ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80100d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80100d2:	4618      	mov	r0, r3
 80100d4:	3710      	adds	r7, #16
 80100d6:	46bd      	mov	sp, r7
 80100d8:	bd80      	pop	{r7, pc}

080100da <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80100da:	b580      	push	{r7, lr}
 80100dc:	b084      	sub	sp, #16
 80100de:	af00      	add	r7, sp, #0
 80100e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80100e2:	2300      	movs	r3, #0
 80100e4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80100e6:	2300      	movs	r3, #0
 80100e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80100f0:	4618      	mov	r0, r3
 80100f2:	f7fa f94e 	bl	800a392 <HAL_HCD_Stop>
 80100f6:	4603      	mov	r3, r0
 80100f8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80100fa:	7bfb      	ldrb	r3, [r7, #15]
 80100fc:	4618      	mov	r0, r3
 80100fe:	f000 f941 	bl	8010384 <USBH_Get_USB_Status>
 8010102:	4603      	mov	r3, r0
 8010104:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010106:	7bbb      	ldrb	r3, [r7, #14]
}
 8010108:	4618      	mov	r0, r3
 801010a:	3710      	adds	r7, #16
 801010c:	46bd      	mov	sp, r7
 801010e:	bd80      	pop	{r7, pc}

08010110 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8010110:	b580      	push	{r7, lr}
 8010112:	b084      	sub	sp, #16
 8010114:	af00      	add	r7, sp, #0
 8010116:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8010118:	2301      	movs	r3, #1
 801011a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010122:	4618      	mov	r0, r3
 8010124:	f7fa f998 	bl	800a458 <HAL_HCD_GetCurrentSpeed>
 8010128:	4603      	mov	r3, r0
 801012a:	2b01      	cmp	r3, #1
 801012c:	d007      	beq.n	801013e <USBH_LL_GetSpeed+0x2e>
 801012e:	2b01      	cmp	r3, #1
 8010130:	d302      	bcc.n	8010138 <USBH_LL_GetSpeed+0x28>
 8010132:	2b02      	cmp	r3, #2
 8010134:	d006      	beq.n	8010144 <USBH_LL_GetSpeed+0x34>
 8010136:	e008      	b.n	801014a <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8010138:	2300      	movs	r3, #0
 801013a:	73fb      	strb	r3, [r7, #15]
    break;
 801013c:	e008      	b.n	8010150 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 801013e:	2301      	movs	r3, #1
 8010140:	73fb      	strb	r3, [r7, #15]
    break;
 8010142:	e005      	b.n	8010150 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8010144:	2302      	movs	r3, #2
 8010146:	73fb      	strb	r3, [r7, #15]
    break;
 8010148:	e002      	b.n	8010150 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 801014a:	2301      	movs	r3, #1
 801014c:	73fb      	strb	r3, [r7, #15]
    break;
 801014e:	bf00      	nop
  }
  return  speed;
 8010150:	7bfb      	ldrb	r3, [r7, #15]
}
 8010152:	4618      	mov	r0, r3
 8010154:	3710      	adds	r7, #16
 8010156:	46bd      	mov	sp, r7
 8010158:	bd80      	pop	{r7, pc}

0801015a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 801015a:	b580      	push	{r7, lr}
 801015c:	b084      	sub	sp, #16
 801015e:	af00      	add	r7, sp, #0
 8010160:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010162:	2300      	movs	r3, #0
 8010164:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010166:	2300      	movs	r3, #0
 8010168:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010170:	4618      	mov	r0, r3
 8010172:	f7fa f92b 	bl	800a3cc <HAL_HCD_ResetPort>
 8010176:	4603      	mov	r3, r0
 8010178:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801017a:	7bfb      	ldrb	r3, [r7, #15]
 801017c:	4618      	mov	r0, r3
 801017e:	f000 f901 	bl	8010384 <USBH_Get_USB_Status>
 8010182:	4603      	mov	r3, r0
 8010184:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010186:	7bbb      	ldrb	r3, [r7, #14]
}
 8010188:	4618      	mov	r0, r3
 801018a:	3710      	adds	r7, #16
 801018c:	46bd      	mov	sp, r7
 801018e:	bd80      	pop	{r7, pc}

08010190 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010190:	b580      	push	{r7, lr}
 8010192:	b082      	sub	sp, #8
 8010194:	af00      	add	r7, sp, #0
 8010196:	6078      	str	r0, [r7, #4]
 8010198:	460b      	mov	r3, r1
 801019a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80101a2:	78fa      	ldrb	r2, [r7, #3]
 80101a4:	4611      	mov	r1, r2
 80101a6:	4618      	mov	r0, r3
 80101a8:	f7fa f933 	bl	800a412 <HAL_HCD_HC_GetXferCount>
 80101ac:	4603      	mov	r3, r0
}
 80101ae:	4618      	mov	r0, r3
 80101b0:	3708      	adds	r7, #8
 80101b2:	46bd      	mov	sp, r7
 80101b4:	bd80      	pop	{r7, pc}

080101b6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80101b6:	b590      	push	{r4, r7, lr}
 80101b8:	b089      	sub	sp, #36	; 0x24
 80101ba:	af04      	add	r7, sp, #16
 80101bc:	6078      	str	r0, [r7, #4]
 80101be:	4608      	mov	r0, r1
 80101c0:	4611      	mov	r1, r2
 80101c2:	461a      	mov	r2, r3
 80101c4:	4603      	mov	r3, r0
 80101c6:	70fb      	strb	r3, [r7, #3]
 80101c8:	460b      	mov	r3, r1
 80101ca:	70bb      	strb	r3, [r7, #2]
 80101cc:	4613      	mov	r3, r2
 80101ce:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80101d0:	2300      	movs	r3, #0
 80101d2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80101d4:	2300      	movs	r3, #0
 80101d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80101de:	787c      	ldrb	r4, [r7, #1]
 80101e0:	78ba      	ldrb	r2, [r7, #2]
 80101e2:	78f9      	ldrb	r1, [r7, #3]
 80101e4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80101e6:	9302      	str	r3, [sp, #8]
 80101e8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80101ec:	9301      	str	r3, [sp, #4]
 80101ee:	f897 3020 	ldrb.w	r3, [r7, #32]
 80101f2:	9300      	str	r3, [sp, #0]
 80101f4:	4623      	mov	r3, r4
 80101f6:	f7f9 fd77 	bl	8009ce8 <HAL_HCD_HC_Init>
 80101fa:	4603      	mov	r3, r0
 80101fc:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80101fe:	7bfb      	ldrb	r3, [r7, #15]
 8010200:	4618      	mov	r0, r3
 8010202:	f000 f8bf 	bl	8010384 <USBH_Get_USB_Status>
 8010206:	4603      	mov	r3, r0
 8010208:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801020a:	7bbb      	ldrb	r3, [r7, #14]
}
 801020c:	4618      	mov	r0, r3
 801020e:	3714      	adds	r7, #20
 8010210:	46bd      	mov	sp, r7
 8010212:	bd90      	pop	{r4, r7, pc}

08010214 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010214:	b580      	push	{r7, lr}
 8010216:	b084      	sub	sp, #16
 8010218:	af00      	add	r7, sp, #0
 801021a:	6078      	str	r0, [r7, #4]
 801021c:	460b      	mov	r3, r1
 801021e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010220:	2300      	movs	r3, #0
 8010222:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010224:	2300      	movs	r3, #0
 8010226:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801022e:	78fa      	ldrb	r2, [r7, #3]
 8010230:	4611      	mov	r1, r2
 8010232:	4618      	mov	r0, r3
 8010234:	f7f9 fdf0 	bl	8009e18 <HAL_HCD_HC_Halt>
 8010238:	4603      	mov	r3, r0
 801023a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801023c:	7bfb      	ldrb	r3, [r7, #15]
 801023e:	4618      	mov	r0, r3
 8010240:	f000 f8a0 	bl	8010384 <USBH_Get_USB_Status>
 8010244:	4603      	mov	r3, r0
 8010246:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010248:	7bbb      	ldrb	r3, [r7, #14]
}
 801024a:	4618      	mov	r0, r3
 801024c:	3710      	adds	r7, #16
 801024e:	46bd      	mov	sp, r7
 8010250:	bd80      	pop	{r7, pc}

08010252 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8010252:	b590      	push	{r4, r7, lr}
 8010254:	b089      	sub	sp, #36	; 0x24
 8010256:	af04      	add	r7, sp, #16
 8010258:	6078      	str	r0, [r7, #4]
 801025a:	4608      	mov	r0, r1
 801025c:	4611      	mov	r1, r2
 801025e:	461a      	mov	r2, r3
 8010260:	4603      	mov	r3, r0
 8010262:	70fb      	strb	r3, [r7, #3]
 8010264:	460b      	mov	r3, r1
 8010266:	70bb      	strb	r3, [r7, #2]
 8010268:	4613      	mov	r3, r2
 801026a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801026c:	2300      	movs	r3, #0
 801026e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010270:	2300      	movs	r3, #0
 8010272:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 801027a:	787c      	ldrb	r4, [r7, #1]
 801027c:	78ba      	ldrb	r2, [r7, #2]
 801027e:	78f9      	ldrb	r1, [r7, #3]
 8010280:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8010284:	9303      	str	r3, [sp, #12]
 8010286:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010288:	9302      	str	r3, [sp, #8]
 801028a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801028c:	9301      	str	r3, [sp, #4]
 801028e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010292:	9300      	str	r3, [sp, #0]
 8010294:	4623      	mov	r3, r4
 8010296:	f7f9 fde3 	bl	8009e60 <HAL_HCD_HC_SubmitRequest>
 801029a:	4603      	mov	r3, r0
 801029c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 801029e:	7bfb      	ldrb	r3, [r7, #15]
 80102a0:	4618      	mov	r0, r3
 80102a2:	f000 f86f 	bl	8010384 <USBH_Get_USB_Status>
 80102a6:	4603      	mov	r3, r0
 80102a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80102aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80102ac:	4618      	mov	r0, r3
 80102ae:	3714      	adds	r7, #20
 80102b0:	46bd      	mov	sp, r7
 80102b2:	bd90      	pop	{r4, r7, pc}

080102b4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80102b4:	b580      	push	{r7, lr}
 80102b6:	b082      	sub	sp, #8
 80102b8:	af00      	add	r7, sp, #0
 80102ba:	6078      	str	r0, [r7, #4]
 80102bc:	460b      	mov	r3, r1
 80102be:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80102c6:	78fa      	ldrb	r2, [r7, #3]
 80102c8:	4611      	mov	r1, r2
 80102ca:	4618      	mov	r0, r3
 80102cc:	f7fa f88c 	bl	800a3e8 <HAL_HCD_HC_GetURBState>
 80102d0:	4603      	mov	r3, r0
}
 80102d2:	4618      	mov	r0, r3
 80102d4:	3708      	adds	r7, #8
 80102d6:	46bd      	mov	sp, r7
 80102d8:	bd80      	pop	{r7, pc}

080102da <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80102da:	b580      	push	{r7, lr}
 80102dc:	b082      	sub	sp, #8
 80102de:	af00      	add	r7, sp, #0
 80102e0:	6078      	str	r0, [r7, #4]
 80102e2:	460b      	mov	r3, r1
 80102e4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80102ec:	2b01      	cmp	r3, #1
 80102ee:	d103      	bne.n	80102f8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80102f0:	78fb      	ldrb	r3, [r7, #3]
 80102f2:	4618      	mov	r0, r3
 80102f4:	f000 f872 	bl	80103dc <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80102f8:	20c8      	movs	r0, #200	; 0xc8
 80102fa:	f7f9 f9ab 	bl	8009654 <HAL_Delay>
  return USBH_OK;
 80102fe:	2300      	movs	r3, #0
}
 8010300:	4618      	mov	r0, r3
 8010302:	3708      	adds	r7, #8
 8010304:	46bd      	mov	sp, r7
 8010306:	bd80      	pop	{r7, pc}

08010308 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8010308:	b480      	push	{r7}
 801030a:	b085      	sub	sp, #20
 801030c:	af00      	add	r7, sp, #0
 801030e:	6078      	str	r0, [r7, #4]
 8010310:	460b      	mov	r3, r1
 8010312:	70fb      	strb	r3, [r7, #3]
 8010314:	4613      	mov	r3, r2
 8010316:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801031e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8010320:	78fa      	ldrb	r2, [r7, #3]
 8010322:	68f9      	ldr	r1, [r7, #12]
 8010324:	4613      	mov	r3, r2
 8010326:	009b      	lsls	r3, r3, #2
 8010328:	4413      	add	r3, r2
 801032a:	00db      	lsls	r3, r3, #3
 801032c:	440b      	add	r3, r1
 801032e:	333b      	adds	r3, #59	; 0x3b
 8010330:	781b      	ldrb	r3, [r3, #0]
 8010332:	2b00      	cmp	r3, #0
 8010334:	d00a      	beq.n	801034c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8010336:	78fa      	ldrb	r2, [r7, #3]
 8010338:	68f9      	ldr	r1, [r7, #12]
 801033a:	4613      	mov	r3, r2
 801033c:	009b      	lsls	r3, r3, #2
 801033e:	4413      	add	r3, r2
 8010340:	00db      	lsls	r3, r3, #3
 8010342:	440b      	add	r3, r1
 8010344:	3350      	adds	r3, #80	; 0x50
 8010346:	78ba      	ldrb	r2, [r7, #2]
 8010348:	701a      	strb	r2, [r3, #0]
 801034a:	e009      	b.n	8010360 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 801034c:	78fa      	ldrb	r2, [r7, #3]
 801034e:	68f9      	ldr	r1, [r7, #12]
 8010350:	4613      	mov	r3, r2
 8010352:	009b      	lsls	r3, r3, #2
 8010354:	4413      	add	r3, r2
 8010356:	00db      	lsls	r3, r3, #3
 8010358:	440b      	add	r3, r1
 801035a:	3351      	adds	r3, #81	; 0x51
 801035c:	78ba      	ldrb	r2, [r7, #2]
 801035e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8010360:	2300      	movs	r3, #0
}
 8010362:	4618      	mov	r0, r3
 8010364:	3714      	adds	r7, #20
 8010366:	46bd      	mov	sp, r7
 8010368:	f85d 7b04 	ldr.w	r7, [sp], #4
 801036c:	4770      	bx	lr

0801036e <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 801036e:	b580      	push	{r7, lr}
 8010370:	b082      	sub	sp, #8
 8010372:	af00      	add	r7, sp, #0
 8010374:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8010376:	6878      	ldr	r0, [r7, #4]
 8010378:	f7f9 f96c 	bl	8009654 <HAL_Delay>
}
 801037c:	bf00      	nop
 801037e:	3708      	adds	r7, #8
 8010380:	46bd      	mov	sp, r7
 8010382:	bd80      	pop	{r7, pc}

08010384 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010384:	b480      	push	{r7}
 8010386:	b085      	sub	sp, #20
 8010388:	af00      	add	r7, sp, #0
 801038a:	4603      	mov	r3, r0
 801038c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801038e:	2300      	movs	r3, #0
 8010390:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010392:	79fb      	ldrb	r3, [r7, #7]
 8010394:	2b03      	cmp	r3, #3
 8010396:	d817      	bhi.n	80103c8 <USBH_Get_USB_Status+0x44>
 8010398:	a201      	add	r2, pc, #4	; (adr r2, 80103a0 <USBH_Get_USB_Status+0x1c>)
 801039a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801039e:	bf00      	nop
 80103a0:	080103b1 	.word	0x080103b1
 80103a4:	080103b7 	.word	0x080103b7
 80103a8:	080103bd 	.word	0x080103bd
 80103ac:	080103c3 	.word	0x080103c3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80103b0:	2300      	movs	r3, #0
 80103b2:	73fb      	strb	r3, [r7, #15]
    break;
 80103b4:	e00b      	b.n	80103ce <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80103b6:	2302      	movs	r3, #2
 80103b8:	73fb      	strb	r3, [r7, #15]
    break;
 80103ba:	e008      	b.n	80103ce <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80103bc:	2301      	movs	r3, #1
 80103be:	73fb      	strb	r3, [r7, #15]
    break;
 80103c0:	e005      	b.n	80103ce <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80103c2:	2302      	movs	r3, #2
 80103c4:	73fb      	strb	r3, [r7, #15]
    break;
 80103c6:	e002      	b.n	80103ce <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80103c8:	2302      	movs	r3, #2
 80103ca:	73fb      	strb	r3, [r7, #15]
    break;
 80103cc:	bf00      	nop
  }
  return usb_status;
 80103ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80103d0:	4618      	mov	r0, r3
 80103d2:	3714      	adds	r7, #20
 80103d4:	46bd      	mov	sp, r7
 80103d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103da:	4770      	bx	lr

080103dc <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80103dc:	b580      	push	{r7, lr}
 80103de:	b084      	sub	sp, #16
 80103e0:	af00      	add	r7, sp, #0
 80103e2:	4603      	mov	r3, r0
 80103e4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80103e6:	79fb      	ldrb	r3, [r7, #7]
 80103e8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80103ea:	79fb      	ldrb	r3, [r7, #7]
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	d102      	bne.n	80103f6 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 80103f0:	2301      	movs	r3, #1
 80103f2:	73fb      	strb	r3, [r7, #15]
 80103f4:	e001      	b.n	80103fa <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 80103f6:	2300      	movs	r3, #0
 80103f8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80103fa:	7bfb      	ldrb	r3, [r7, #15]
 80103fc:	461a      	mov	r2, r3
 80103fe:	2101      	movs	r1, #1
 8010400:	4803      	ldr	r0, [pc, #12]	; (8010410 <MX_DriverVbusFS+0x34>)
 8010402:	f7f9 fbdd 	bl	8009bc0 <HAL_GPIO_WritePin>
}
 8010406:	bf00      	nop
 8010408:	3710      	adds	r7, #16
 801040a:	46bd      	mov	sp, r7
 801040c:	bd80      	pop	{r7, pc}
 801040e:	bf00      	nop
 8010410:	40020800 	.word	0x40020800

08010414 <_ZdaPv>:
 8010414:	f000 b820 	b.w	8010458 <_ZdlPv>

08010418 <__cxa_pure_virtual>:
 8010418:	b508      	push	{r3, lr}
 801041a:	f000 f82b 	bl	8010474 <_ZSt9terminatev>

0801041e <_Znaj>:
 801041e:	f000 b802 	b.w	8010426 <_Znwj>

08010422 <_ZdlPvj>:
 8010422:	f000 b819 	b.w	8010458 <_ZdlPv>

08010426 <_Znwj>:
 8010426:	b510      	push	{r4, lr}
 8010428:	2800      	cmp	r0, #0
 801042a:	bf14      	ite	ne
 801042c:	4604      	movne	r4, r0
 801042e:	2401      	moveq	r4, #1
 8010430:	4620      	mov	r0, r4
 8010432:	f000 fa05 	bl	8010840 <malloc>
 8010436:	b930      	cbnz	r0, 8010446 <_Znwj+0x20>
 8010438:	f000 f806 	bl	8010448 <_ZSt15get_new_handlerv>
 801043c:	b908      	cbnz	r0, 8010442 <_Znwj+0x1c>
 801043e:	f000 f9cd 	bl	80107dc <abort>
 8010442:	4780      	blx	r0
 8010444:	e7f4      	b.n	8010430 <_Znwj+0xa>
 8010446:	bd10      	pop	{r4, pc}

08010448 <_ZSt15get_new_handlerv>:
 8010448:	4b02      	ldr	r3, [pc, #8]	; (8010454 <_ZSt15get_new_handlerv+0xc>)
 801044a:	6818      	ldr	r0, [r3, #0]
 801044c:	f3bf 8f5b 	dmb	ish
 8010450:	4770      	bx	lr
 8010452:	bf00      	nop
 8010454:	20000220 	.word	0x20000220

08010458 <_ZdlPv>:
 8010458:	f000 b9fa 	b.w	8010850 <free>

0801045c <_ZN10__cxxabiv111__terminateEPFvvE>:
 801045c:	b508      	push	{r3, lr}
 801045e:	4780      	blx	r0
 8010460:	f000 f9bc 	bl	80107dc <abort>

08010464 <_ZSt13get_terminatev>:
 8010464:	4b02      	ldr	r3, [pc, #8]	; (8010470 <_ZSt13get_terminatev+0xc>)
 8010466:	6818      	ldr	r0, [r3, #0]
 8010468:	f3bf 8f5b 	dmb	ish
 801046c:	4770      	bx	lr
 801046e:	bf00      	nop
 8010470:	20000190 	.word	0x20000190

08010474 <_ZSt9terminatev>:
 8010474:	b508      	push	{r3, lr}
 8010476:	f7ff fff5 	bl	8010464 <_ZSt13get_terminatev>
 801047a:	f7ff ffef 	bl	801045c <_ZN10__cxxabiv111__terminateEPFvvE>

0801047e <_ZNSaIcEC1Ev>:
 801047e:	4770      	bx	lr

08010480 <_ZNSaIcED1Ev>:
 8010480:	4770      	bx	lr

08010482 <_ZSt17__throw_bad_allocv>:
 8010482:	b508      	push	{r3, lr}
 8010484:	f000 f9aa 	bl	80107dc <abort>

08010488 <_ZSt19__throw_logic_errorPKc>:
 8010488:	b508      	push	{r3, lr}
 801048a:	f000 f9a7 	bl	80107dc <abort>

0801048e <_ZSt20__throw_length_errorPKc>:
 801048e:	b508      	push	{r3, lr}
 8010490:	f000 f9a4 	bl	80107dc <abort>

08010494 <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 8010494:	b10a      	cbz	r2, 801049a <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 8010496:	f000 b9e3 	b.w	8010860 <memcpy>
 801049a:	4770      	bx	lr

0801049c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 801049c:	b508      	push	{r3, lr}
 801049e:	680b      	ldr	r3, [r1, #0]
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	da02      	bge.n	80104aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0xe>
 80104a4:	4809      	ldr	r0, [pc, #36]	; (80104cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x30>)
 80104a6:	f7ff fff2 	bl	801048e <_ZSt20__throw_length_errorPKc>
 80104aa:	4293      	cmp	r3, r2
 80104ac:	d908      	bls.n	80104c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 80104ae:	0052      	lsls	r2, r2, #1
 80104b0:	4293      	cmp	r3, r2
 80104b2:	d205      	bcs.n	80104c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 80104b4:	2a00      	cmp	r2, #0
 80104b6:	bfb6      	itet	lt
 80104b8:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 80104bc:	600a      	strge	r2, [r1, #0]
 80104be:	600b      	strlt	r3, [r1, #0]
 80104c0:	6808      	ldr	r0, [r1, #0]
 80104c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80104c6:	3001      	adds	r0, #1
 80104c8:	f7ff bfad 	b.w	8010426 <_Znwj>
 80104cc:	08011aa3 	.word	0x08011aa3

080104d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 80104d0:	4603      	mov	r3, r0
 80104d2:	f853 0b08 	ldr.w	r0, [r3], #8
 80104d6:	4298      	cmp	r0, r3
 80104d8:	d001      	beq.n	80104de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 80104da:	f7ff bfbd 	b.w	8010458 <_ZdlPv>
 80104de:	4770      	bx	lr

080104e0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 80104e0:	b508      	push	{r3, lr}
 80104e2:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80104e6:	6840      	ldr	r0, [r0, #4]
 80104e8:	3901      	subs	r1, #1
 80104ea:	1a09      	subs	r1, r1, r0
 80104ec:	4291      	cmp	r1, r2
 80104ee:	d202      	bcs.n	80104f6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 80104f0:	4618      	mov	r0, r3
 80104f2:	f7ff ffcc 	bl	801048e <_ZSt20__throw_length_errorPKc>
 80104f6:	bd08      	pop	{r3, pc}

080104f8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
 80104f8:	6803      	ldr	r3, [r0, #0]
 80104fa:	428b      	cmp	r3, r1
 80104fc:	d806      	bhi.n	801050c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x14>
 80104fe:	6840      	ldr	r0, [r0, #4]
 8010500:	4418      	add	r0, r3
 8010502:	4281      	cmp	r1, r0
 8010504:	bf94      	ite	ls
 8010506:	2000      	movls	r0, #0
 8010508:	2001      	movhi	r0, #1
 801050a:	4770      	bx	lr
 801050c:	2001      	movs	r0, #1
 801050e:	4770      	bx	lr

08010510 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8010510:	2a01      	cmp	r2, #1
 8010512:	b510      	push	{r4, lr}
 8010514:	d102      	bne.n	801051c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 8010516:	780a      	ldrb	r2, [r1, #0]
 8010518:	7002      	strb	r2, [r0, #0]
 801051a:	bd10      	pop	{r4, pc}
 801051c:	f7ff ffba 	bl	8010494 <_ZNSt11char_traitsIcE4copyEPcPKcj>
 8010520:	e7fb      	b.n	801051a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

08010522 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 8010522:	2a01      	cmp	r2, #1
 8010524:	b430      	push	{r4, r5}
 8010526:	d103      	bne.n	8010530 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 8010528:	780b      	ldrb	r3, [r1, #0]
 801052a:	7003      	strb	r3, [r0, #0]
 801052c:	bc30      	pop	{r4, r5}
 801052e:	4770      	bx	lr
 8010530:	2a00      	cmp	r2, #0
 8010532:	d0fb      	beq.n	801052c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 8010534:	bc30      	pop	{r4, r5}
 8010536:	f000 b99e 	b.w	8010876 <memmove>

0801053a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 801053a:	b508      	push	{r3, lr}
 801053c:	1a52      	subs	r2, r2, r1
 801053e:	f7ff ffe7 	bl	8010510 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8010542:	bd08      	pop	{r3, pc}

08010544 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
 8010544:	4288      	cmp	r0, r1
 8010546:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010548:	4604      	mov	r4, r0
 801054a:	460e      	mov	r6, r1
 801054c:	d01f      	beq.n	801058e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x4a>
 801054e:	6802      	ldr	r2, [r0, #0]
 8010550:	684d      	ldr	r5, [r1, #4]
 8010552:	f100 0308 	add.w	r3, r0, #8
 8010556:	429a      	cmp	r2, r3
 8010558:	bf14      	ite	ne
 801055a:	6882      	ldrne	r2, [r0, #8]
 801055c:	220f      	moveq	r2, #15
 801055e:	42aa      	cmp	r2, r5
 8010560:	d20b      	bcs.n	801057a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x36>
 8010562:	a902      	add	r1, sp, #8
 8010564:	f841 5d04 	str.w	r5, [r1, #-4]!
 8010568:	f7ff ff98 	bl	801049c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 801056c:	4607      	mov	r7, r0
 801056e:	4620      	mov	r0, r4
 8010570:	f7ff ffae 	bl	80104d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8010574:	9b01      	ldr	r3, [sp, #4]
 8010576:	6027      	str	r7, [r4, #0]
 8010578:	60a3      	str	r3, [r4, #8]
 801057a:	b125      	cbz	r5, 8010586 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x42>
 801057c:	462a      	mov	r2, r5
 801057e:	6831      	ldr	r1, [r6, #0]
 8010580:	6820      	ldr	r0, [r4, #0]
 8010582:	f7ff ffc5 	bl	8010510 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8010586:	6823      	ldr	r3, [r4, #0]
 8010588:	6065      	str	r5, [r4, #4]
 801058a:	2200      	movs	r2, #0
 801058c:	555a      	strb	r2, [r3, r5]
 801058e:	b003      	add	sp, #12
 8010590:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010592 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 8010592:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8010596:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 801059a:	4616      	mov	r6, r2
 801059c:	6842      	ldr	r2, [r0, #4]
 801059e:	469a      	mov	sl, r3
 80105a0:	eba8 0306 	sub.w	r3, r8, r6
 80105a4:	1a57      	subs	r7, r2, r1
 80105a6:	4413      	add	r3, r2
 80105a8:	6802      	ldr	r2, [r0, #0]
 80105aa:	9301      	str	r3, [sp, #4]
 80105ac:	f100 0308 	add.w	r3, r0, #8
 80105b0:	429a      	cmp	r2, r3
 80105b2:	460d      	mov	r5, r1
 80105b4:	bf14      	ite	ne
 80105b6:	6882      	ldrne	r2, [r0, #8]
 80105b8:	220f      	moveq	r2, #15
 80105ba:	a901      	add	r1, sp, #4
 80105bc:	4604      	mov	r4, r0
 80105be:	f7ff ff6d 	bl	801049c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80105c2:	1bbf      	subs	r7, r7, r6
 80105c4:	4681      	mov	r9, r0
 80105c6:	b11d      	cbz	r5, 80105d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 80105c8:	462a      	mov	r2, r5
 80105ca:	6821      	ldr	r1, [r4, #0]
 80105cc:	f7ff ffa0 	bl	8010510 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80105d0:	f1ba 0f00 	cmp.w	sl, #0
 80105d4:	d008      	beq.n	80105e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x56>
 80105d6:	f1b8 0f00 	cmp.w	r8, #0
 80105da:	d005      	beq.n	80105e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x56>
 80105dc:	4642      	mov	r2, r8
 80105de:	4651      	mov	r1, sl
 80105e0:	eb09 0005 	add.w	r0, r9, r5
 80105e4:	f7ff ff94 	bl	8010510 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80105e8:	b147      	cbz	r7, 80105fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x6a>
 80105ea:	6821      	ldr	r1, [r4, #0]
 80105ec:	442e      	add	r6, r5
 80105ee:	eb05 0008 	add.w	r0, r5, r8
 80105f2:	463a      	mov	r2, r7
 80105f4:	4431      	add	r1, r6
 80105f6:	4448      	add	r0, r9
 80105f8:	f7ff ff8a 	bl	8010510 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80105fc:	4620      	mov	r0, r4
 80105fe:	f7ff ff67 	bl	80104d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8010602:	9b01      	ldr	r3, [sp, #4]
 8010604:	f8c4 9000 	str.w	r9, [r4]
 8010608:	60a3      	str	r3, [r4, #8]
 801060a:	b002      	add	sp, #8
 801060c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08010610 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 8010610:	f100 0208 	add.w	r2, r0, #8
 8010614:	6002      	str	r2, [r0, #0]
 8010616:	2200      	movs	r2, #0
 8010618:	6042      	str	r2, [r0, #4]
 801061a:	7202      	strb	r2, [r0, #8]
 801061c:	4770      	bx	lr

0801061e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 801061e:	b510      	push	{r4, lr}
 8010620:	4604      	mov	r4, r0
 8010622:	f7ff ff55 	bl	80104d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8010626:	4620      	mov	r0, r4
 8010628:	bd10      	pop	{r4, pc}

0801062a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>:
 801062a:	b510      	push	{r4, lr}
 801062c:	4604      	mov	r4, r0
 801062e:	f7ff ff89 	bl	8010544 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
 8010632:	4620      	mov	r0, r4
 8010634:	bd10      	pop	{r4, pc}

08010636 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5beginEv>:
 8010636:	6800      	ldr	r0, [r0, #0]
 8010638:	4770      	bx	lr

0801063a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE3endEv>:
 801063a:	e9d0 2000 	ldrd	r2, r0, [r0]
 801063e:	4410      	add	r0, r2
 8010640:	4770      	bx	lr

08010642 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>:
 8010642:	6840      	ldr	r0, [r0, #4]
 8010644:	4770      	bx	lr

08010646 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
 8010646:	6800      	ldr	r0, [r0, #0]
 8010648:	4408      	add	r0, r1
 801064a:	4770      	bx	lr

0801064c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>:
 801064c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010650:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010652:	4614      	mov	r4, r2
 8010654:	4681      	mov	r9, r0
 8010656:	462a      	mov	r2, r5
 8010658:	460f      	mov	r7, r1
 801065a:	4698      	mov	r8, r3
 801065c:	4621      	mov	r1, r4
 801065e:	4b37      	ldr	r3, [pc, #220]	; (801073c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xf0>)
 8010660:	f7ff ff3e 	bl	80104e0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 8010664:	464a      	mov	r2, r9
 8010666:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801066a:	f852 6b08 	ldr.w	r6, [r2], #8
 801066e:	4296      	cmp	r6, r2
 8010670:	eba5 0b04 	sub.w	fp, r5, r4
 8010674:	bf18      	it	ne
 8010676:	f8d9 2008 	ldrne.w	r2, [r9, #8]
 801067a:	eb03 0a0b 	add.w	sl, r3, fp
 801067e:	bf08      	it	eq
 8010680:	220f      	moveq	r2, #15
 8010682:	4552      	cmp	r2, sl
 8010684:	d34e      	bcc.n	8010724 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xd8>
 8010686:	443e      	add	r6, r7
 8010688:	4641      	mov	r1, r8
 801068a:	1bdf      	subs	r7, r3, r7
 801068c:	4648      	mov	r0, r9
 801068e:	1b3f      	subs	r7, r7, r4
 8010690:	f7ff ff32 	bl	80104f8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
 8010694:	b170      	cbz	r0, 80106b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x68>
 8010696:	b137      	cbz	r7, 80106a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x5a>
 8010698:	42ac      	cmp	r4, r5
 801069a:	d004      	beq.n	80106a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x5a>
 801069c:	463a      	mov	r2, r7
 801069e:	1931      	adds	r1, r6, r4
 80106a0:	1970      	adds	r0, r6, r5
 80106a2:	f7ff ff3e 	bl	8010522 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80106a6:	b30d      	cbz	r5, 80106ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 80106a8:	462a      	mov	r2, r5
 80106aa:	4641      	mov	r1, r8
 80106ac:	4630      	mov	r0, r6
 80106ae:	f7ff ff2f 	bl	8010510 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80106b2:	e01b      	b.n	80106ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 80106b4:	b135      	cbz	r5, 80106c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x78>
 80106b6:	42ac      	cmp	r4, r5
 80106b8:	d33c      	bcc.n	8010734 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xe8>
 80106ba:	462a      	mov	r2, r5
 80106bc:	4641      	mov	r1, r8
 80106be:	4630      	mov	r0, r6
 80106c0:	f7ff ff2f 	bl	8010522 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80106c4:	b197      	cbz	r7, 80106ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 80106c6:	42ac      	cmp	r4, r5
 80106c8:	d010      	beq.n	80106ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 80106ca:	463a      	mov	r2, r7
 80106cc:	1931      	adds	r1, r6, r4
 80106ce:	1970      	adds	r0, r6, r5
 80106d0:	f7ff ff27 	bl	8010522 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80106d4:	42ac      	cmp	r4, r5
 80106d6:	d209      	bcs.n	80106ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 80106d8:	4434      	add	r4, r6
 80106da:	eb08 0305 	add.w	r3, r8, r5
 80106de:	429c      	cmp	r4, r3
 80106e0:	d30f      	bcc.n	8010702 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xb6>
 80106e2:	462a      	mov	r2, r5
 80106e4:	4641      	mov	r1, r8
 80106e6:	4630      	mov	r0, r6
 80106e8:	f7ff ff1b 	bl	8010522 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80106ec:	f8d9 3000 	ldr.w	r3, [r9]
 80106f0:	f8c9 a004 	str.w	sl, [r9, #4]
 80106f4:	2200      	movs	r2, #0
 80106f6:	4648      	mov	r0, r9
 80106f8:	f803 200a 	strb.w	r2, [r3, sl]
 80106fc:	b003      	add	sp, #12
 80106fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010702:	4544      	cmp	r4, r8
 8010704:	d803      	bhi.n	801070e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xc2>
 8010706:	462a      	mov	r2, r5
 8010708:	eb08 010b 	add.w	r1, r8, fp
 801070c:	e7ce      	b.n	80106ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 801070e:	eba4 0408 	sub.w	r4, r4, r8
 8010712:	4622      	mov	r2, r4
 8010714:	4641      	mov	r1, r8
 8010716:	4630      	mov	r0, r6
 8010718:	f7ff ff03 	bl	8010522 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 801071c:	1b2a      	subs	r2, r5, r4
 801071e:	1971      	adds	r1, r6, r5
 8010720:	1930      	adds	r0, r6, r4
 8010722:	e7c4      	b.n	80106ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x62>
 8010724:	9500      	str	r5, [sp, #0]
 8010726:	4643      	mov	r3, r8
 8010728:	4622      	mov	r2, r4
 801072a:	4639      	mov	r1, r7
 801072c:	4648      	mov	r0, r9
 801072e:	f7ff ff30 	bl	8010592 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8010732:	e7db      	b.n	80106ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 8010734:	2f00      	cmp	r7, #0
 8010736:	d0cf      	beq.n	80106d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x8c>
 8010738:	e7c7      	b.n	80106ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x7e>
 801073a:	bf00      	nop
 801073c:	08011a60 	.word	0x08011a60

08010740 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>:
 8010740:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010742:	4604      	mov	r4, r0
 8010744:	4608      	mov	r0, r1
 8010746:	460d      	mov	r5, r1
 8010748:	f7ef fd46 	bl	80001d8 <strlen>
 801074c:	462b      	mov	r3, r5
 801074e:	9000      	str	r0, [sp, #0]
 8010750:	6862      	ldr	r2, [r4, #4]
 8010752:	2100      	movs	r1, #0
 8010754:	4620      	mov	r0, r4
 8010756:	f7ff ff79 	bl	801064c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 801075a:	b003      	add	sp, #12
 801075c:	bd30      	pop	{r4, r5, pc}

0801075e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>:
 801075e:	b508      	push	{r3, lr}
 8010760:	f7ff ffee 	bl	8010740 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>
 8010764:	bd08      	pop	{r3, pc}
	...

08010768 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 8010768:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801076a:	4604      	mov	r4, r0
 801076c:	4616      	mov	r6, r2
 801076e:	460d      	mov	r5, r1
 8010770:	b919      	cbnz	r1, 801077a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8010772:	b112      	cbz	r2, 801077a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8010774:	480d      	ldr	r0, [pc, #52]	; (80107ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 8010776:	f7ff fe87 	bl	8010488 <_ZSt19__throw_logic_errorPKc>
 801077a:	1b73      	subs	r3, r6, r5
 801077c:	2b0f      	cmp	r3, #15
 801077e:	9301      	str	r3, [sp, #4]
 8010780:	d907      	bls.n	8010792 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 8010782:	2200      	movs	r2, #0
 8010784:	a901      	add	r1, sp, #4
 8010786:	4620      	mov	r0, r4
 8010788:	f7ff fe88 	bl	801049c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 801078c:	9b01      	ldr	r3, [sp, #4]
 801078e:	6020      	str	r0, [r4, #0]
 8010790:	60a3      	str	r3, [r4, #8]
 8010792:	4632      	mov	r2, r6
 8010794:	4629      	mov	r1, r5
 8010796:	6820      	ldr	r0, [r4, #0]
 8010798:	f7ff fecf 	bl	801053a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 801079c:	9b01      	ldr	r3, [sp, #4]
 801079e:	6822      	ldr	r2, [r4, #0]
 80107a0:	6063      	str	r3, [r4, #4]
 80107a2:	2100      	movs	r1, #0
 80107a4:	54d1      	strb	r1, [r2, r3]
 80107a6:	b002      	add	sp, #8
 80107a8:	bd70      	pop	{r4, r5, r6, pc}
 80107aa:	bf00      	nop
 80107ac:	08011a79 	.word	0x08011a79

080107b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 80107b0:	b538      	push	{r3, r4, r5, lr}
 80107b2:	f100 0308 	add.w	r3, r0, #8
 80107b6:	4604      	mov	r4, r0
 80107b8:	6003      	str	r3, [r0, #0]
 80107ba:	460d      	mov	r5, r1
 80107bc:	b159      	cbz	r1, 80107d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 80107be:	4608      	mov	r0, r1
 80107c0:	f7ef fd0a 	bl	80001d8 <strlen>
 80107c4:	182a      	adds	r2, r5, r0
 80107c6:	4620      	mov	r0, r4
 80107c8:	f04f 0300 	mov.w	r3, #0
 80107cc:	4629      	mov	r1, r5
 80107ce:	f7ff ffcb 	bl	8010768 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 80107d2:	4620      	mov	r0, r4
 80107d4:	bd38      	pop	{r3, r4, r5, pc}
 80107d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80107da:	e7f4      	b.n	80107c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

080107dc <abort>:
 80107dc:	b508      	push	{r3, lr}
 80107de:	2006      	movs	r0, #6
 80107e0:	f000 f94a 	bl	8010a78 <raise>
 80107e4:	2001      	movs	r0, #1
 80107e6:	f7f8 fe43 	bl	8009470 <_exit>
	...

080107ec <__errno>:
 80107ec:	4b01      	ldr	r3, [pc, #4]	; (80107f4 <__errno+0x8>)
 80107ee:	6818      	ldr	r0, [r3, #0]
 80107f0:	4770      	bx	lr
 80107f2:	bf00      	nop
 80107f4:	20000194 	.word	0x20000194

080107f8 <__libc_init_array>:
 80107f8:	b570      	push	{r4, r5, r6, lr}
 80107fa:	4e0d      	ldr	r6, [pc, #52]	; (8010830 <__libc_init_array+0x38>)
 80107fc:	4c0d      	ldr	r4, [pc, #52]	; (8010834 <__libc_init_array+0x3c>)
 80107fe:	1ba4      	subs	r4, r4, r6
 8010800:	10a4      	asrs	r4, r4, #2
 8010802:	2500      	movs	r5, #0
 8010804:	42a5      	cmp	r5, r4
 8010806:	d109      	bne.n	801081c <__libc_init_array+0x24>
 8010808:	4e0b      	ldr	r6, [pc, #44]	; (8010838 <__libc_init_array+0x40>)
 801080a:	4c0c      	ldr	r4, [pc, #48]	; (801083c <__libc_init_array+0x44>)
 801080c:	f000 f952 	bl	8010ab4 <_init>
 8010810:	1ba4      	subs	r4, r4, r6
 8010812:	10a4      	asrs	r4, r4, #2
 8010814:	2500      	movs	r5, #0
 8010816:	42a5      	cmp	r5, r4
 8010818:	d105      	bne.n	8010826 <__libc_init_array+0x2e>
 801081a:	bd70      	pop	{r4, r5, r6, pc}
 801081c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010820:	4798      	blx	r3
 8010822:	3501      	adds	r5, #1
 8010824:	e7ee      	b.n	8010804 <__libc_init_array+0xc>
 8010826:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801082a:	4798      	blx	r3
 801082c:	3501      	adds	r5, #1
 801082e:	e7f2      	b.n	8010816 <__libc_init_array+0x1e>
 8010830:	08011ac4 	.word	0x08011ac4
 8010834:	08011ac4 	.word	0x08011ac4
 8010838:	08011ac4 	.word	0x08011ac4
 801083c:	08011acc 	.word	0x08011acc

08010840 <malloc>:
 8010840:	4b02      	ldr	r3, [pc, #8]	; (801084c <malloc+0xc>)
 8010842:	4601      	mov	r1, r0
 8010844:	6818      	ldr	r0, [r3, #0]
 8010846:	f000 b885 	b.w	8010954 <_malloc_r>
 801084a:	bf00      	nop
 801084c:	20000194 	.word	0x20000194

08010850 <free>:
 8010850:	4b02      	ldr	r3, [pc, #8]	; (801085c <free+0xc>)
 8010852:	4601      	mov	r1, r0
 8010854:	6818      	ldr	r0, [r3, #0]
 8010856:	f000 b82f 	b.w	80108b8 <_free_r>
 801085a:	bf00      	nop
 801085c:	20000194 	.word	0x20000194

08010860 <memcpy>:
 8010860:	b510      	push	{r4, lr}
 8010862:	1e43      	subs	r3, r0, #1
 8010864:	440a      	add	r2, r1
 8010866:	4291      	cmp	r1, r2
 8010868:	d100      	bne.n	801086c <memcpy+0xc>
 801086a:	bd10      	pop	{r4, pc}
 801086c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010870:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010874:	e7f7      	b.n	8010866 <memcpy+0x6>

08010876 <memmove>:
 8010876:	4288      	cmp	r0, r1
 8010878:	b510      	push	{r4, lr}
 801087a:	eb01 0302 	add.w	r3, r1, r2
 801087e:	d807      	bhi.n	8010890 <memmove+0x1a>
 8010880:	1e42      	subs	r2, r0, #1
 8010882:	4299      	cmp	r1, r3
 8010884:	d00a      	beq.n	801089c <memmove+0x26>
 8010886:	f811 4b01 	ldrb.w	r4, [r1], #1
 801088a:	f802 4f01 	strb.w	r4, [r2, #1]!
 801088e:	e7f8      	b.n	8010882 <memmove+0xc>
 8010890:	4283      	cmp	r3, r0
 8010892:	d9f5      	bls.n	8010880 <memmove+0xa>
 8010894:	1881      	adds	r1, r0, r2
 8010896:	1ad2      	subs	r2, r2, r3
 8010898:	42d3      	cmn	r3, r2
 801089a:	d100      	bne.n	801089e <memmove+0x28>
 801089c:	bd10      	pop	{r4, pc}
 801089e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80108a2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80108a6:	e7f7      	b.n	8010898 <memmove+0x22>

080108a8 <memset>:
 80108a8:	4402      	add	r2, r0
 80108aa:	4603      	mov	r3, r0
 80108ac:	4293      	cmp	r3, r2
 80108ae:	d100      	bne.n	80108b2 <memset+0xa>
 80108b0:	4770      	bx	lr
 80108b2:	f803 1b01 	strb.w	r1, [r3], #1
 80108b6:	e7f9      	b.n	80108ac <memset+0x4>

080108b8 <_free_r>:
 80108b8:	b538      	push	{r3, r4, r5, lr}
 80108ba:	4605      	mov	r5, r0
 80108bc:	2900      	cmp	r1, #0
 80108be:	d045      	beq.n	801094c <_free_r+0x94>
 80108c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80108c4:	1f0c      	subs	r4, r1, #4
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	bfb8      	it	lt
 80108ca:	18e4      	addlt	r4, r4, r3
 80108cc:	f000 f8f0 	bl	8010ab0 <__malloc_lock>
 80108d0:	4a1f      	ldr	r2, [pc, #124]	; (8010950 <_free_r+0x98>)
 80108d2:	6813      	ldr	r3, [r2, #0]
 80108d4:	4610      	mov	r0, r2
 80108d6:	b933      	cbnz	r3, 80108e6 <_free_r+0x2e>
 80108d8:	6063      	str	r3, [r4, #4]
 80108da:	6014      	str	r4, [r2, #0]
 80108dc:	4628      	mov	r0, r5
 80108de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80108e2:	f000 b8e6 	b.w	8010ab2 <__malloc_unlock>
 80108e6:	42a3      	cmp	r3, r4
 80108e8:	d90c      	bls.n	8010904 <_free_r+0x4c>
 80108ea:	6821      	ldr	r1, [r4, #0]
 80108ec:	1862      	adds	r2, r4, r1
 80108ee:	4293      	cmp	r3, r2
 80108f0:	bf04      	itt	eq
 80108f2:	681a      	ldreq	r2, [r3, #0]
 80108f4:	685b      	ldreq	r3, [r3, #4]
 80108f6:	6063      	str	r3, [r4, #4]
 80108f8:	bf04      	itt	eq
 80108fa:	1852      	addeq	r2, r2, r1
 80108fc:	6022      	streq	r2, [r4, #0]
 80108fe:	6004      	str	r4, [r0, #0]
 8010900:	e7ec      	b.n	80108dc <_free_r+0x24>
 8010902:	4613      	mov	r3, r2
 8010904:	685a      	ldr	r2, [r3, #4]
 8010906:	b10a      	cbz	r2, 801090c <_free_r+0x54>
 8010908:	42a2      	cmp	r2, r4
 801090a:	d9fa      	bls.n	8010902 <_free_r+0x4a>
 801090c:	6819      	ldr	r1, [r3, #0]
 801090e:	1858      	adds	r0, r3, r1
 8010910:	42a0      	cmp	r0, r4
 8010912:	d10b      	bne.n	801092c <_free_r+0x74>
 8010914:	6820      	ldr	r0, [r4, #0]
 8010916:	4401      	add	r1, r0
 8010918:	1858      	adds	r0, r3, r1
 801091a:	4282      	cmp	r2, r0
 801091c:	6019      	str	r1, [r3, #0]
 801091e:	d1dd      	bne.n	80108dc <_free_r+0x24>
 8010920:	6810      	ldr	r0, [r2, #0]
 8010922:	6852      	ldr	r2, [r2, #4]
 8010924:	605a      	str	r2, [r3, #4]
 8010926:	4401      	add	r1, r0
 8010928:	6019      	str	r1, [r3, #0]
 801092a:	e7d7      	b.n	80108dc <_free_r+0x24>
 801092c:	d902      	bls.n	8010934 <_free_r+0x7c>
 801092e:	230c      	movs	r3, #12
 8010930:	602b      	str	r3, [r5, #0]
 8010932:	e7d3      	b.n	80108dc <_free_r+0x24>
 8010934:	6820      	ldr	r0, [r4, #0]
 8010936:	1821      	adds	r1, r4, r0
 8010938:	428a      	cmp	r2, r1
 801093a:	bf04      	itt	eq
 801093c:	6811      	ldreq	r1, [r2, #0]
 801093e:	6852      	ldreq	r2, [r2, #4]
 8010940:	6062      	str	r2, [r4, #4]
 8010942:	bf04      	itt	eq
 8010944:	1809      	addeq	r1, r1, r0
 8010946:	6021      	streq	r1, [r4, #0]
 8010948:	605c      	str	r4, [r3, #4]
 801094a:	e7c7      	b.n	80108dc <_free_r+0x24>
 801094c:	bd38      	pop	{r3, r4, r5, pc}
 801094e:	bf00      	nop
 8010950:	20000224 	.word	0x20000224

08010954 <_malloc_r>:
 8010954:	b570      	push	{r4, r5, r6, lr}
 8010956:	1ccd      	adds	r5, r1, #3
 8010958:	f025 0503 	bic.w	r5, r5, #3
 801095c:	3508      	adds	r5, #8
 801095e:	2d0c      	cmp	r5, #12
 8010960:	bf38      	it	cc
 8010962:	250c      	movcc	r5, #12
 8010964:	2d00      	cmp	r5, #0
 8010966:	4606      	mov	r6, r0
 8010968:	db01      	blt.n	801096e <_malloc_r+0x1a>
 801096a:	42a9      	cmp	r1, r5
 801096c:	d903      	bls.n	8010976 <_malloc_r+0x22>
 801096e:	230c      	movs	r3, #12
 8010970:	6033      	str	r3, [r6, #0]
 8010972:	2000      	movs	r0, #0
 8010974:	bd70      	pop	{r4, r5, r6, pc}
 8010976:	f000 f89b 	bl	8010ab0 <__malloc_lock>
 801097a:	4a21      	ldr	r2, [pc, #132]	; (8010a00 <_malloc_r+0xac>)
 801097c:	6814      	ldr	r4, [r2, #0]
 801097e:	4621      	mov	r1, r4
 8010980:	b991      	cbnz	r1, 80109a8 <_malloc_r+0x54>
 8010982:	4c20      	ldr	r4, [pc, #128]	; (8010a04 <_malloc_r+0xb0>)
 8010984:	6823      	ldr	r3, [r4, #0]
 8010986:	b91b      	cbnz	r3, 8010990 <_malloc_r+0x3c>
 8010988:	4630      	mov	r0, r6
 801098a:	f000 f83d 	bl	8010a08 <_sbrk_r>
 801098e:	6020      	str	r0, [r4, #0]
 8010990:	4629      	mov	r1, r5
 8010992:	4630      	mov	r0, r6
 8010994:	f000 f838 	bl	8010a08 <_sbrk_r>
 8010998:	1c43      	adds	r3, r0, #1
 801099a:	d124      	bne.n	80109e6 <_malloc_r+0x92>
 801099c:	230c      	movs	r3, #12
 801099e:	6033      	str	r3, [r6, #0]
 80109a0:	4630      	mov	r0, r6
 80109a2:	f000 f886 	bl	8010ab2 <__malloc_unlock>
 80109a6:	e7e4      	b.n	8010972 <_malloc_r+0x1e>
 80109a8:	680b      	ldr	r3, [r1, #0]
 80109aa:	1b5b      	subs	r3, r3, r5
 80109ac:	d418      	bmi.n	80109e0 <_malloc_r+0x8c>
 80109ae:	2b0b      	cmp	r3, #11
 80109b0:	d90f      	bls.n	80109d2 <_malloc_r+0x7e>
 80109b2:	600b      	str	r3, [r1, #0]
 80109b4:	50cd      	str	r5, [r1, r3]
 80109b6:	18cc      	adds	r4, r1, r3
 80109b8:	4630      	mov	r0, r6
 80109ba:	f000 f87a 	bl	8010ab2 <__malloc_unlock>
 80109be:	f104 000b 	add.w	r0, r4, #11
 80109c2:	1d23      	adds	r3, r4, #4
 80109c4:	f020 0007 	bic.w	r0, r0, #7
 80109c8:	1ac3      	subs	r3, r0, r3
 80109ca:	d0d3      	beq.n	8010974 <_malloc_r+0x20>
 80109cc:	425a      	negs	r2, r3
 80109ce:	50e2      	str	r2, [r4, r3]
 80109d0:	e7d0      	b.n	8010974 <_malloc_r+0x20>
 80109d2:	428c      	cmp	r4, r1
 80109d4:	684b      	ldr	r3, [r1, #4]
 80109d6:	bf16      	itet	ne
 80109d8:	6063      	strne	r3, [r4, #4]
 80109da:	6013      	streq	r3, [r2, #0]
 80109dc:	460c      	movne	r4, r1
 80109de:	e7eb      	b.n	80109b8 <_malloc_r+0x64>
 80109e0:	460c      	mov	r4, r1
 80109e2:	6849      	ldr	r1, [r1, #4]
 80109e4:	e7cc      	b.n	8010980 <_malloc_r+0x2c>
 80109e6:	1cc4      	adds	r4, r0, #3
 80109e8:	f024 0403 	bic.w	r4, r4, #3
 80109ec:	42a0      	cmp	r0, r4
 80109ee:	d005      	beq.n	80109fc <_malloc_r+0xa8>
 80109f0:	1a21      	subs	r1, r4, r0
 80109f2:	4630      	mov	r0, r6
 80109f4:	f000 f808 	bl	8010a08 <_sbrk_r>
 80109f8:	3001      	adds	r0, #1
 80109fa:	d0cf      	beq.n	801099c <_malloc_r+0x48>
 80109fc:	6025      	str	r5, [r4, #0]
 80109fe:	e7db      	b.n	80109b8 <_malloc_r+0x64>
 8010a00:	20000224 	.word	0x20000224
 8010a04:	20000228 	.word	0x20000228

08010a08 <_sbrk_r>:
 8010a08:	b538      	push	{r3, r4, r5, lr}
 8010a0a:	4c06      	ldr	r4, [pc, #24]	; (8010a24 <_sbrk_r+0x1c>)
 8010a0c:	2300      	movs	r3, #0
 8010a0e:	4605      	mov	r5, r0
 8010a10:	4608      	mov	r0, r1
 8010a12:	6023      	str	r3, [r4, #0]
 8010a14:	f7f8 fd36 	bl	8009484 <_sbrk>
 8010a18:	1c43      	adds	r3, r0, #1
 8010a1a:	d102      	bne.n	8010a22 <_sbrk_r+0x1a>
 8010a1c:	6823      	ldr	r3, [r4, #0]
 8010a1e:	b103      	cbz	r3, 8010a22 <_sbrk_r+0x1a>
 8010a20:	602b      	str	r3, [r5, #0]
 8010a22:	bd38      	pop	{r3, r4, r5, pc}
 8010a24:	20000a08 	.word	0x20000a08

08010a28 <_raise_r>:
 8010a28:	291f      	cmp	r1, #31
 8010a2a:	b538      	push	{r3, r4, r5, lr}
 8010a2c:	4604      	mov	r4, r0
 8010a2e:	460d      	mov	r5, r1
 8010a30:	d904      	bls.n	8010a3c <_raise_r+0x14>
 8010a32:	2316      	movs	r3, #22
 8010a34:	6003      	str	r3, [r0, #0]
 8010a36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010a3a:	bd38      	pop	{r3, r4, r5, pc}
 8010a3c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010a3e:	b112      	cbz	r2, 8010a46 <_raise_r+0x1e>
 8010a40:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010a44:	b94b      	cbnz	r3, 8010a5a <_raise_r+0x32>
 8010a46:	4620      	mov	r0, r4
 8010a48:	f000 f830 	bl	8010aac <_getpid_r>
 8010a4c:	462a      	mov	r2, r5
 8010a4e:	4601      	mov	r1, r0
 8010a50:	4620      	mov	r0, r4
 8010a52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010a56:	f000 b817 	b.w	8010a88 <_kill_r>
 8010a5a:	2b01      	cmp	r3, #1
 8010a5c:	d00a      	beq.n	8010a74 <_raise_r+0x4c>
 8010a5e:	1c59      	adds	r1, r3, #1
 8010a60:	d103      	bne.n	8010a6a <_raise_r+0x42>
 8010a62:	2316      	movs	r3, #22
 8010a64:	6003      	str	r3, [r0, #0]
 8010a66:	2001      	movs	r0, #1
 8010a68:	e7e7      	b.n	8010a3a <_raise_r+0x12>
 8010a6a:	2400      	movs	r4, #0
 8010a6c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010a70:	4628      	mov	r0, r5
 8010a72:	4798      	blx	r3
 8010a74:	2000      	movs	r0, #0
 8010a76:	e7e0      	b.n	8010a3a <_raise_r+0x12>

08010a78 <raise>:
 8010a78:	4b02      	ldr	r3, [pc, #8]	; (8010a84 <raise+0xc>)
 8010a7a:	4601      	mov	r1, r0
 8010a7c:	6818      	ldr	r0, [r3, #0]
 8010a7e:	f7ff bfd3 	b.w	8010a28 <_raise_r>
 8010a82:	bf00      	nop
 8010a84:	20000194 	.word	0x20000194

08010a88 <_kill_r>:
 8010a88:	b538      	push	{r3, r4, r5, lr}
 8010a8a:	4c07      	ldr	r4, [pc, #28]	; (8010aa8 <_kill_r+0x20>)
 8010a8c:	2300      	movs	r3, #0
 8010a8e:	4605      	mov	r5, r0
 8010a90:	4608      	mov	r0, r1
 8010a92:	4611      	mov	r1, r2
 8010a94:	6023      	str	r3, [r4, #0]
 8010a96:	f7f8 fcdb 	bl	8009450 <_kill>
 8010a9a:	1c43      	adds	r3, r0, #1
 8010a9c:	d102      	bne.n	8010aa4 <_kill_r+0x1c>
 8010a9e:	6823      	ldr	r3, [r4, #0]
 8010aa0:	b103      	cbz	r3, 8010aa4 <_kill_r+0x1c>
 8010aa2:	602b      	str	r3, [r5, #0]
 8010aa4:	bd38      	pop	{r3, r4, r5, pc}
 8010aa6:	bf00      	nop
 8010aa8:	20000a08 	.word	0x20000a08

08010aac <_getpid_r>:
 8010aac:	f7f8 bcc8 	b.w	8009440 <_getpid>

08010ab0 <__malloc_lock>:
 8010ab0:	4770      	bx	lr

08010ab2 <__malloc_unlock>:
 8010ab2:	4770      	bx	lr

08010ab4 <_init>:
 8010ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ab6:	bf00      	nop
 8010ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010aba:	bc08      	pop	{r3}
 8010abc:	469e      	mov	lr, r3
 8010abe:	4770      	bx	lr

08010ac0 <_fini>:
 8010ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ac2:	bf00      	nop
 8010ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010ac6:	bc08      	pop	{r3}
 8010ac8:	469e      	mov	lr, r3
 8010aca:	4770      	bx	lr
