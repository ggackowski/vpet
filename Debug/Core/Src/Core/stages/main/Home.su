new:168:14:void* operator new(std::size_t, void*)	16	static
gthr-default.h:229:1:int __gthread_key_delete(__gthread_key_t)	16	static
shared_ptr_base.h:302:5:void std::_Sp_counted_base<_Lp>::_M_add_ref_copy() [with __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
shared_ptr_base.h:307:5:void std::_Sp_counted_base<_Lp>::_M_release() [with __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
shared_ptr_base.h:1123:7:std::__shared_ptr<_Tp, _Lp>::~__shared_ptr() [with _Tp = tama::TextureLoader; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
shared_ptr.h:93:11:std::shared_ptr<tama::TextureLoader>::~shared_ptr()	16	static
shared_ptr_base.h:1123:7:std::__shared_ptr<_Tp, _Lp>::~__shared_ptr() [with _Tp = tama::Texture; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
shared_ptr.h:93:11:std::shared_ptr<tama::Texture>::~shared_ptr()	16	static
shared_ptr_base.h:1123:7:std::__shared_ptr<_Tp, _Lp>::~__shared_ptr() [with _Tp = tama::ChangeObserver; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
shared_ptr.h:93:11:std::shared_ptr<tama::ChangeObserver>::~shared_ptr()	16	static
Sprite.h:13:11:tama::Sprite::~Sprite()	16	static
shared_ptr_base.h:1123:7:std::__shared_ptr<_Tp, _Lp>::~__shared_ptr() [with _Tp = tama::TimeMonitorCreator; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
shared_ptr.h:93:11:std::shared_ptr<tama::TimeMonitorCreator>::~shared_ptr()	16	static
shared_ptr_base.h:1123:7:std::__shared_ptr<_Tp, _Lp>::~__shared_ptr() [with _Tp = tama::TimeMonitor; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
shared_ptr.h:93:11:std::shared_ptr<tama::TimeMonitor>::~shared_ptr()	16	static
HappyJump.h:16:11:tama::HappyJump::~HappyJump()	16	static
Text.h:13:11:tama::Text::~Text()	16	static
shared_ptr_base.h:1123:7:std::__shared_ptr<_Tp, _Lp>::~__shared_ptr() [with _Tp = tama::TimeView; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
shared_ptr.h:93:11:std::shared_ptr<tama::TimeView>::~shared_ptr()	16	static
shared_ptr_base.h:1123:7:std::__shared_ptr<_Tp, _Lp>::~__shared_ptr() [with _Tp = tama::Stage; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
shared_ptr.h:93:11:std::shared_ptr<tama::Stage>::~shared_ptr()	16	static
Home.cpp:16:6:virtual void tama::Home::onInput(tama::Button)	48	static
shared_ptr_base.h:1123:7:std::__shared_ptr<_Tp, _Lp>::~__shared_ptr() [with _Tp = tama::PageOne; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
shared_ptr.h:93:11:std::shared_ptr<tama::PageOne>::~shared_ptr()	16	static
shared_ptr_base.h:1123:7:std::__shared_ptr<_Tp, _Lp>::~__shared_ptr() [with _Tp = tama::Eat; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
shared_ptr.h:93:11:std::shared_ptr<tama::Eat>::~shared_ptr()	16	static
shared_ptr_base.h:1123:7:std::__shared_ptr<_Tp, _Lp>::~__shared_ptr() [with _Tp = tama::Wash; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
shared_ptr.h:93:11:std::shared_ptr<tama::Wash>::~shared_ptr()	16	static
shared_ptr_base.h:1123:7:std::__shared_ptr<_Tp, _Lp>::~__shared_ptr() [with _Tp = tama::PlayMenu; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
shared_ptr.h:93:11:std::shared_ptr<tama::PlayMenu>::~shared_ptr()	16	static
shared_ptr_base.h:1123:7:std::__shared_ptr<_Tp, _Lp>::~__shared_ptr() [with _Tp = tama::Heal; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
shared_ptr.h:93:11:std::shared_ptr<tama::Heal>::~shared_ptr()	16	static
shared_ptr_base.h:1123:7:std::__shared_ptr<_Tp, _Lp>::~__shared_ptr() [with _Tp = tama::Lamp; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
shared_ptr.h:93:11:std::shared_ptr<tama::Lamp>::~shared_ptr()	16	static
Home.cpp:41:6:void tama::Home::onIconSelection(int)	120	static
Home.cpp:74:6:virtual void tama::Home::onInit()	16	static
Home.cpp:79:6:virtual void tama::Home::onFrame()	16	static
shared_ptr_base.h:1123:7:std::__shared_ptr<_Tp, _Lp>::~__shared_ptr() [with _Tp = tama::Sprite; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
shared_ptr.h:93:11:std::shared_ptr<tama::Sprite>::~shared_ptr()	16	static
shared_ptr_base.h:1123:7:std::__shared_ptr<_Tp, _Lp>::~__shared_ptr() [with _Tp = tama::Drawable; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
shared_ptr.h:93:11:std::shared_ptr<tama::Drawable>::~shared_ptr()	16	static
Home.cpp:97:6:void tama::Home::updatePoops()	120	static
shared_ptr_base.h:1121:7:std::__shared_ptr<_Tp, _Lp>::__shared_ptr(const std::__shared_ptr<_Tp, _Lp>&) [with _Tp = tama::Texture; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
shared_ptr.h:119:7:std::shared_ptr<_Tp>::shared_ptr(const std::shared_ptr<_Tp>&) [with _Tp = tama::Texture]	16	static
Home.cpp:122:6:void tama::Home::updatePetPosition()	104	static
Home.cpp:139:6:bool tama::Home::shouldUpdatePet()	16	static
shared_ptr_base.h:1121:7:std::__shared_ptr<_Tp, _Lp>::__shared_ptr(const std::__shared_ptr<_Tp, _Lp>&) [with _Tp = tama::Scene; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
shared_ptr_base.h:1123:7:std::__shared_ptr<_Tp, _Lp>::~__shared_ptr() [with _Tp = tama::Scene; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
shared_ptr.h:119:7:std::shared_ptr<_Tp>::shared_ptr(const std::shared_ptr<_Tp>&) [with _Tp = tama::Scene]	16	static
shared_ptr.h:93:11:std::shared_ptr<tama::Scene>::~shared_ptr()	16	static
shared_ptr_base.h:1123:7:std::__shared_ptr<_Tp, _Lp>::~__shared_ptr() [with _Tp = tama::Context; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
shared_ptr.h:93:11:std::shared_ptr<tama::Context>::~shared_ptr()	16	static
Stage.h:18:7:tama::Stage::~Stage()	16	static
Home.cpp:142:1:tama::Home::Home(const std::shared_ptr<tama::Context>&)	128	static
shared_ptr_base.h:130:7:void std::_Sp_counted_base<_Lp>::_M_destroy() [with __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
shared_ptr_base.h:966:7:std::__shared_ptr_access<_Tp, _Lp, <anonymous>, <anonymous> >::element_type* std::__shared_ptr_access<_Tp, _Lp, <anonymous>, <anonymous> >::operator->() const [with _Tp = tama::Texture; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0; bool <anonymous> = false; bool <anonymous> = false]	16	static
stl_algobase.h:219:5:constexpr const _Tp& std::max(const _Tp&, const _Tp&) [with _Tp = unsigned int]	16	static
shared_ptr_base.h:966:7:std::__shared_ptr_access<_Tp, _Lp, <anonymous>, <anonymous> >::element_type* std::__shared_ptr_access<_Tp, _Lp, <anonymous>, <anonymous> >::operator->() const [with _Tp = tama::Context; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0; bool <anonymous> = false; bool <anonymous> = false]	16	static
shared_ptr_base.h:681:7:std::__shared_count<_Lp>::~__shared_count() [with __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
shared_ptr_base.h:966:7:std::__shared_ptr_access<_Tp, _Lp, <anonymous>, <anonymous> >::element_type* std::__shared_ptr_access<_Tp, _Lp, <anonymous>, <anonymous> >::operator->() const [with _Tp = tama::TextureLoader; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0; bool <anonymous> = false; bool <anonymous> = false]	16	static
shared_ptr_base.h:966:7:std::__shared_ptr_access<_Tp, _Lp, <anonymous>, <anonymous> >::element_type* std::__shared_ptr_access<_Tp, _Lp, <anonymous>, <anonymous> >::operator->() const [with _Tp = tama::TimeMonitorCreator; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0; bool <anonymous> = false; bool <anonymous> = false]	16	static
move.h:98:5:constexpr typename std::remove_reference< <template-parameter-1-1> >::type&& std::move(_Tp&&) [with _Tp = std::shared_ptr<tama::TimeMonitor>&]	16	static
unique_ptr.h:264:7:std::unique_ptr<_Tp, _Dp>::~unique_ptr() [with _Tp = tama::TextureLoader; _Dp = std::default_delete<tama::TextureLoader>]	24	static
move.h:73:5:constexpr _Tp&& std::forward(typename std::remove_reference<_From>::type&) [with _Tp = std::shared_ptr<tama::Context>&]	16	static
shared_ptr.h:703:5:) [with _Tp = tama::TimeView; _Args = {std::shared_ptr<tama::Context>&}]	24	static
move.h:98:5:constexpr typename std::remove_reference< <template-parameter-1-1> >::type&& std::move(_Tp&&) [with _Tp = std::shared_ptr<tama::TimeView>&]	16	static
shared_ptr.h:253:2:std::shared_ptr<_Tp>::shared_ptr(std::shared_ptr<_Yp>&&) [with _Yp = tama::TimeView; <template-parameter-2-2> = void; _Tp = tama::Stage]	24	static
shared_ptr.h:703:5:) [with _Tp = tama::PageOne; _Args = {std::shared_ptr<tama::Context>&}]	24	static
move.h:98:5:constexpr typename std::remove_reference< <template-parameter-1-1> >::type&& std::move(_Tp&&) [with _Tp = std::shared_ptr<tama::PageOne>&]	16	static
shared_ptr.h:253:2:std::shared_ptr<_Tp>::shared_ptr(std::shared_ptr<_Yp>&&) [with _Yp = tama::PageOne; <template-parameter-2-2> = void; _Tp = tama::Stage]	24	static
shared_ptr.h:703:5:) [with _Tp = tama::Eat; _Args = {std::shared_ptr<tama::Context>&}]	24	static
move.h:98:5:constexpr typename std::remove_reference< <template-parameter-1-1> >::type&& std::move(_Tp&&) [with _Tp = std::shared_ptr<tama::Eat>&]	16	static
shared_ptr.h:253:2:std::shared_ptr<_Tp>::shared_ptr(std::shared_ptr<_Yp>&&) [with _Yp = tama::Eat; <template-parameter-2-2> = void; _Tp = tama::Stage]	24	static
shared_ptr.h:703:5:) [with _Tp = tama::Wash; _Args = {std::shared_ptr<tama::Context>&}]	24	static
move.h:98:5:constexpr typename std::remove_reference< <template-parameter-1-1> >::type&& std::move(_Tp&&) [with _Tp = std::shared_ptr<tama::Wash>&]	16	static
shared_ptr.h:253:2:std::shared_ptr<_Tp>::shared_ptr(std::shared_ptr<_Yp>&&) [with _Yp = tama::Wash; <template-parameter-2-2> = void; _Tp = tama::Stage]	24	static
shared_ptr.h:703:5:) [with _Tp = tama::PlayMenu; _Args = {std::shared_ptr<tama::Context>&}]	24	static
move.h:98:5:constexpr typename std::remove_reference< <template-parameter-1-1> >::type&& std::move(_Tp&&) [with _Tp = std::shared_ptr<tama::PlayMenu>&]	16	static
shared_ptr.h:253:2:std::shared_ptr<_Tp>::shared_ptr(std::shared_ptr<_Yp>&&) [with _Yp = tama::PlayMenu; <template-parameter-2-2> = void; _Tp = tama::Stage]	24	static
shared_ptr.h:703:5:) [with _Tp = tama::Heal; _Args = {std::shared_ptr<tama::Context>&}]	24	static
move.h:98:5:constexpr typename std::remove_reference< <template-parameter-1-1> >::type&& std::move(_Tp&&) [with _Tp = std::shared_ptr<tama::Heal>&]	16	static
shared_ptr.h:253:2:std::shared_ptr<_Tp>::shared_ptr(std::shared_ptr<_Yp>&&) [with _Yp = tama::Heal; <template-parameter-2-2> = void; _Tp = tama::Stage]	24	static
shared_ptr.h:703:5:) [with _Tp = tama::Lamp; _Args = {std::shared_ptr<tama::Context>&}]	24	static
move.h:98:5:constexpr typename std::remove_reference< <template-parameter-1-1> >::type&& std::move(_Tp&&) [with _Tp = std::shared_ptr<tama::Lamp>&]	16	static
shared_ptr.h:253:2:std::shared_ptr<_Tp>::shared_ptr(std::shared_ptr<_Yp>&&) [with _Yp = tama::Lamp; <template-parameter-2-2> = void; _Tp = tama::Stage]	24	static
shared_ptr_base.h:966:7:std::__shared_ptr_access<_Tp, _Lp, <anonymous>, <anonymous> >::element_type* std::__shared_ptr_access<_Tp, _Lp, <anonymous>, <anonymous> >::operator->() const [with _Tp = tama::TimeMonitor; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0; bool <anonymous> = false; bool <anonymous> = false]	16	static
stl_vector.h:670:7:std::vector<_Tp, _Alloc>::size_type std::vector<_Tp, _Alloc>::size() const [with _Tp = std::shared_ptr<tama::Sprite>; _Alloc = std::allocator<std::shared_ptr<tama::Sprite> >]	16	static
move.h:73:5:constexpr _Tp&& std::forward(typename std::remove_reference<_From>::type&) [with _Tp = std::shared_ptr<tama::Texture>]	16	static
move.h:73:5:constexpr _Tp&& std::forward(typename std::remove_reference<_From>::type&) [with _Tp = tama::Vec2d]	16	static
shared_ptr.h:703:5:) [with _Tp = tama::Sprite; _Args = {std::shared_ptr<tama::Texture>, tama::Vec2d}]	40	static
move.h:98:5:constexpr typename std::remove_reference< <template-parameter-1-1> >::type&& std::move(_Tp&&) [with _Tp = std::shared_ptr<tama::Sprite>&]	16	static
shared_ptr.h:244:7:std::shared_ptr<_Tp>::shared_ptr(std::shared_ptr<_Tp>&&) [with _Tp = tama::Sprite]	24	static
move.h:73:5:constexpr _Tp&& std::forward(typename std::remove_reference<_From>::type&) [with _Tp = std::shared_ptr<tama::Sprite>&]	16	static
vector.tcc:95:7:) [with _Args = {std::shared_ptr<tama::Sprite>&}; _Tp = std::shared_ptr<tama::Sprite>; _Alloc = std::allocator<std::shared_ptr<tama::Sprite> >]	24	static
shared_ptr_base.h:966:7:std::__shared_ptr_access<_Tp, _Lp, <anonymous>, <anonymous> >::element_type* std::__shared_ptr_access<_Tp, _Lp, <anonymous>, <anonymous> >::operator->() const [with _Tp = tama::Scene; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0; bool <anonymous> = false; bool <anonymous> = false]	16	static
shared_ptr.h:236:2:std::shared_ptr<_Tp>::shared_ptr(const std::shared_ptr<_Yp>&) [with _Yp = tama::Sprite; <template-parameter-2-2> = void; _Tp = tama::Drawable]	16	static
stl_vector.h:563:7:std::vector<_Tp, _Alloc>::iterator std::vector<_Tp, _Alloc>::begin() [with _Tp = std::shared_ptr<tama::Sprite>; _Alloc = std::allocator<std::shared_ptr<tama::Sprite> >]	24	static
stl_vector.h:581:7:std::vector<_Tp, _Alloc>::iterator std::vector<_Tp, _Alloc>::end() [with _Tp = std::shared_ptr<tama::Sprite>; _Alloc = std::allocator<std::shared_ptr<tama::Sprite> >]	24	static
stl_iterator.h:784:9:__gnu_cxx::__normal_iterator<_Iterator, _Container>::__normal_iterator(const __gnu_cxx::__normal_iterator<_Iter, typename __gnu_cxx::__enable_if<std::__are_same<_Iter, typename _Container::pointer>::__value, _Container>::__type>&) [with _Iter = std::shared_ptr<tama::Sprite>*; _Iterator = const std::shared_ptr<tama::Sprite>*; _Container = std::vector<std::shared_ptr<tama::Sprite> >]	16	static
stl_vector.h:1206:7:std::vector<_Tp, _Alloc>::iterator std::vector<_Tp, _Alloc>::erase(std::vector<_Tp, _Alloc>::const_iterator, std::vector<_Tp, _Alloc>::const_iterator) [with _Tp = std::shared_ptr<tama::Sprite>; _Alloc = std::allocator<std::shared_ptr<tama::Sprite> >]	40	static
stl_vector.h:844:7:std::vector<_Tp, _Alloc>::reference std::vector<_Tp, _Alloc>::at(std::vector<_Tp, _Alloc>::size_type) [with _Tp = std::shared_ptr<tama::Sprite>; _Alloc = std::allocator<std::shared_ptr<tama::Sprite> >]	16	static
shared_ptr_base.h:966:7:std::__shared_ptr_access<_Tp, _Lp, <anonymous>, <anonymous> >::element_type* std::__shared_ptr_access<_Tp, _Lp, <anonymous>, <anonymous> >::operator->() const [with _Tp = tama::Sprite; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0; bool <anonymous> = false; bool <anonymous> = false]	16	static
shared_ptr_base.h:687:7:std::__shared_count<_Lp>::__shared_count(const std::__shared_count<_Lp>&) [with __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
shared_ptr.h:117:17:constexpr std::shared_ptr<_Tp>::shared_ptr() [with _Tp = tama::TimeMonitor]	16	static
stl_vector.h:259:7:std::vector<_Tp, _Alloc>::vector() [with _Tp = std::shared_ptr<tama::Sprite>; _Alloc = std::allocator<std::shared_ptr<tama::Sprite> >]	16	static
shared_ptr.h:317:7:std::shared_ptr<_Tp>& std::shared_ptr<_Tp>::operator=(std::shared_ptr<_Tp>&&) [with _Tp = tama::TimeMonitor]	24	static
shared_ptr.h:129:2:std::shared_ptr<_Tp>::shared_ptr(_Yp*) [with _Yp = tama::Sprite; <template-parameter-2-2> = void; _Tp = tama::Drawable]	16	static
shared_ptr_base.h:120:7:std::_Sp_counted_base<_Lp>::~_Sp_counted_base() [with __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
shared_ptr_base.h:120:7:std::_Sp_counted_base<_Lp>::~_Sp_counted_base() [with __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
shared_ptr_base.h:974:7:std::__shared_ptr_access<_Tp, _Lp, <anonymous>, <anonymous> >::element_type* std::__shared_ptr_access<_Tp, _Lp, <anonymous>, <anonymous> >::_M_get() const [with _Tp = tama::Texture; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0; bool <anonymous> = false; bool <anonymous> = false]	16	static
shared_ptr_base.h:974:7:std::__shared_ptr_access<_Tp, _Lp, <anonymous>, <anonymous> >::element_type* std::__shared_ptr_access<_Tp, _Lp, <anonymous>, <anonymous> >::_M_get() const [with _Tp = tama::Context; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0; bool <anonymous> = false; bool <anonymous> = false]	16	static
shared_ptr_base.h:974:7:std::__shared_ptr_access<_Tp, _Lp, <anonymous>, <anonymous> >::element_type* std::__shared_ptr_access<_Tp, _Lp, <anonymous>, <anonymous> >::_M_get() const [with _Tp = tama::TextureLoader; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0; bool <anonymous> = false; bool <anonymous> = false]	16	static
shared_ptr_base.h:974:7:std::__shared_ptr_access<_Tp, _Lp, <anonymous>, <anonymous> >::element_type* std::__shared_ptr_access<_Tp, _Lp, <anonymous>, <anonymous> >::_M_get() const [with _Tp = tama::TimeMonitorCreator; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0; bool <anonymous> = false; bool <anonymous> = false]	16	static
shared_ptr_base.h:1130:7:std::__shared_ptr<_Tp, _Lp>::__shared_ptr(std::__shared_ptr<_Tp, _Lp>&&) [with _Tp = tama::TimeMonitor; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
shared_ptr_base.h:974:7:std::__shared_ptr_access<_Tp, _Lp, <anonymous>, <anonymous> >::element_type* std::__shared_ptr_access<_Tp, _Lp, <anonymous>, <anonymous> >::_M_get() const [with _Tp = tama::Scene; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0; bool <anonymous> = false; bool <anonymous> = false]	16	static
unique_ptr.h:146:18:std::__uniq_ptr_impl<_Tp, _Dp>::pointer& std::__uniq_ptr_impl<_Tp, _Dp>::_M_ptr() [with _Tp = tama::TextureLoader; _Dp = std::default_delete<tama::TextureLoader>]	16	static
unique_ptr.h:341:7:std::unique_ptr<_Tp, _Dp>::deleter_type& std::unique_ptr<_Tp, _Dp>::get_deleter() [with _Tp = tama::TextureLoader; _Dp = std::default_delete<tama::TextureLoader>]	16	static
unique_ptr.h:72:7:void std::default_delete<_Tp>::operator()(_Tp*) const [with _Tp = tama::TextureLoader]	16	static
allocator.h:131:7:std::allocator< <template-parameter-1-1> >::allocator() [with _Tp = tama::TimeView]	16	static
allocator.h:139:7:std::allocator< <template-parameter-1-1> >::~allocator() [with _Tp = tama::TimeView]	16	static
shared_ptr.h:688:5:) [with _Tp = tama::TimeView; _Alloc = std::allocator<tama::TimeView>; _Args = {std::shared_ptr<tama::Context>&}]	40	static
shared_ptr_base.h:1138:2:std::__shared_ptr<_Tp, _Lp>::__shared_ptr(std::__shared_ptr<_Yp, _Lp>&&) [with _Yp = tama::TimeView; <template-parameter-2-2> = void; _Tp = tama::Stage; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
allocator.h:131:7:std::allocator< <template-parameter-1-1> >::allocator() [with _Tp = tama::PageOne]	16	static
allocator.h:139:7:std::allocator< <template-parameter-1-1> >::~allocator() [with _Tp = tama::PageOne]	16	static
shared_ptr.h:688:5:) [with _Tp = tama::PageOne; _Alloc = std::allocator<tama::PageOne>; _Args = {std::shared_ptr<tama::Context>&}]	40	static
shared_ptr_base.h:1138:2:std::__shared_ptr<_Tp, _Lp>::__shared_ptr(std::__shared_ptr<_Yp, _Lp>&&) [with _Yp = tama::PageOne; <template-parameter-2-2> = void; _Tp = tama::Stage; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
allocator.h:131:7:std::allocator< <template-parameter-1-1> >::allocator() [with _Tp = tama::Eat]	16	static
allocator.h:139:7:std::allocator< <template-parameter-1-1> >::~allocator() [with _Tp = tama::Eat]	16	static
shared_ptr.h:688:5:) [with _Tp = tama::Eat; _Alloc = std::allocator<tama::Eat>; _Args = {std::shared_ptr<tama::Context>&}]	40	static
shared_ptr_base.h:1138:2:std::__shared_ptr<_Tp, _Lp>::__shared_ptr(std::__shared_ptr<_Yp, _Lp>&&) [with _Yp = tama::Eat; <template-parameter-2-2> = void; _Tp = tama::Stage; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
allocator.h:131:7:std::allocator< <template-parameter-1-1> >::allocator() [with _Tp = tama::Wash]	16	static
allocator.h:139:7:std::allocator< <template-parameter-1-1> >::~allocator() [with _Tp = tama::Wash]	16	static
shared_ptr.h:688:5:) [with _Tp = tama::Wash; _Alloc = std::allocator<tama::Wash>; _Args = {std::shared_ptr<tama::Context>&}]	40	static
shared_ptr_base.h:1138:2:std::__shared_ptr<_Tp, _Lp>::__shared_ptr(std::__shared_ptr<_Yp, _Lp>&&) [with _Yp = tama::Wash; <template-parameter-2-2> = void; _Tp = tama::Stage; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
allocator.h:131:7:std::allocator< <template-parameter-1-1> >::allocator() [with _Tp = tama::PlayMenu]	16	static
allocator.h:139:7:std::allocator< <template-parameter-1-1> >::~allocator() [with _Tp = tama::PlayMenu]	16	static
shared_ptr.h:688:5:) [with _Tp = tama::PlayMenu; _Alloc = std::allocator<tama::PlayMenu>; _Args = {std::shared_ptr<tama::Context>&}]	40	static
shared_ptr_base.h:1138:2:std::__shared_ptr<_Tp, _Lp>::__shared_ptr(std::__shared_ptr<_Yp, _Lp>&&) [with _Yp = tama::PlayMenu; <template-parameter-2-2> = void; _Tp = tama::Stage; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
allocator.h:131:7:std::allocator< <template-parameter-1-1> >::allocator() [with _Tp = tama::Heal]	16	static
allocator.h:139:7:std::allocator< <template-parameter-1-1> >::~allocator() [with _Tp = tama::Heal]	16	static
shared_ptr.h:688:5:) [with _Tp = tama::Heal; _Alloc = std::allocator<tama::Heal>; _Args = {std::shared_ptr<tama::Context>&}]	40	static
shared_ptr_base.h:1138:2:std::__shared_ptr<_Tp, _Lp>::__shared_ptr(std::__shared_ptr<_Yp, _Lp>&&) [with _Yp = tama::Heal; <template-parameter-2-2> = void; _Tp = tama::Stage; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
allocator.h:131:7:std::allocator< <template-parameter-1-1> >::allocator() [with _Tp = tama::Lamp]	16	static
allocator.h:139:7:std::allocator< <template-parameter-1-1> >::~allocator() [with _Tp = tama::Lamp]	16	static
shared_ptr.h:688:5:) [with _Tp = tama::Lamp; _Alloc = std::allocator<tama::Lamp>; _Args = {std::shared_ptr<tama::Context>&}]	40	static
shared_ptr_base.h:1138:2:std::__shared_ptr<_Tp, _Lp>::__shared_ptr(std::__shared_ptr<_Yp, _Lp>&&) [with _Yp = tama::Lamp; <template-parameter-2-2> = void; _Tp = tama::Stage; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
shared_ptr_base.h:974:7:std::__shared_ptr_access<_Tp, _Lp, <anonymous>, <anonymous> >::element_type* std::__shared_ptr_access<_Tp, _Lp, <anonymous>, <anonymous> >::_M_get() const [with _Tp = tama::TimeMonitor; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0; bool <anonymous> = false; bool <anonymous> = false]	16	static
allocator.h:131:7:std::allocator< <template-parameter-1-1> >::allocator() [with _Tp = tama::Sprite]	16	static
allocator.h:139:7:std::allocator< <template-parameter-1-1> >::~allocator() [with _Tp = tama::Sprite]	16	static
shared_ptr.h:688:5:) [with _Tp = tama::Sprite; _Alloc = std::allocator<tama::Sprite>; _Args = {std::shared_ptr<tama::Texture>, tama::Vec2d}]	48	static
shared_ptr_base.h:1130:7:std::__shared_ptr<_Tp, _Lp>::__shared_ptr(std::__shared_ptr<_Tp, _Lp>&&) [with _Tp = tama::Sprite; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
alloc_traits.h:474:2:) [with _Up = std::shared_ptr<tama::Sprite>; _Args = {std::shared_ptr<tama::Sprite>&}; _Tp = std::shared_ptr<tama::Sprite>]	24	static
vector.tcc:394:7:) [with _Args = {std::shared_ptr<tama::Sprite>&}; _Tp = std::shared_ptr<tama::Sprite>; _Alloc = std::allocator<std::shared_ptr<tama::Sprite> >]	56	static
shared_ptr_base.h:1126:2:std::__shared_ptr<_Tp, _Lp>::__shared_ptr(const std::__shared_ptr<_Yp, _Lp>&) [with _Yp = tama::Sprite; <template-parameter-2-2> = void; _Tp = tama::Drawable; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
stl_iterator.h:779:7:__gnu_cxx::__normal_iterator<_Iterator, _Container>::__normal_iterator(const _Iterator&) [with _Iterator = std::shared_ptr<tama::Sprite>*; _Container = std::vector<std::shared_ptr<tama::Sprite> >]	16	static
stl_iterator.h:844:7:const _Iterator& __gnu_cxx::__normal_iterator<_Iterator, _Container>::base() const [with _Iterator = std::shared_ptr<tama::Sprite>*; _Container = std::vector<std::shared_ptr<tama::Sprite> >]	16	static
stl_vector.h:636:7:std::vector<_Tp, _Alloc>::const_iterator std::vector<_Tp, _Alloc>::cbegin() const [with _Tp = std::shared_ptr<tama::Sprite>; _Alloc = std::allocator<std::shared_ptr<tama::Sprite> >]	24	static
stl_iterator.h:962:5:typename __gnu_cxx::__normal_iterator<_Iterator, _Container>::difference_type __gnu_cxx::operator-(const __gnu_cxx::__normal_iterator<_Iterator, _Container>&, const __gnu_cxx::__normal_iterator<_Iterator, _Container>&) [with _Iterator = const std::shared_ptr<tama::Sprite>*; _Container = std::vector<std::shared_ptr<tama::Sprite> >]	24	static
stl_iterator.h:832:7:__gnu_cxx::__normal_iterator<_Iterator, _Container> __gnu_cxx::__normal_iterator<_Iterator, _Container>::operator+(__gnu_cxx::__normal_iterator<_Iterator, _Container>::difference_type) const [with _Iterator = std::shared_ptr<tama::Sprite>*; _Container = std::vector<std::shared_ptr<tama::Sprite> >]	24	static
vector.tcc:165:5:std::vector<_Tp, _Alloc>::iterator std::vector<_Tp, _Alloc>::_M_erase(std::vector<_Tp, _Alloc>::iterator, std::vector<_Tp, _Alloc>::iterator) [with _Tp = std::shared_ptr<tama::Sprite>; _Alloc = std::allocator<std::shared_ptr<tama::Sprite> >]	40	static
stl_vector.h:822:7:void std::vector<_Tp, _Alloc>::_M_range_check(std::vector<_Tp, _Alloc>::size_type) const [with _Tp = std::shared_ptr<tama::Sprite>; _Alloc = std::allocator<std::shared_ptr<tama::Sprite> >]	16	static
stl_vector.h:795:7:std::vector<_Tp, _Alloc>::reference std::vector<_Tp, _Alloc>::operator[](std::vector<_Tp, _Alloc>::size_type) [with _Tp = std::shared_ptr<tama::Sprite>; _Alloc = std::allocator<std::shared_ptr<tama::Sprite> >]	16	static
shared_ptr_base.h:974:7:std::__shared_ptr_access<_Tp, _Lp, <anonymous>, <anonymous> >::element_type* std::__shared_ptr_access<_Tp, _Lp, <anonymous>, <anonymous> >::_M_get() const [with _Tp = tama::Sprite; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0; bool <anonymous> = false; bool <anonymous> = false]	16	static
shared_ptr_base.h:1072:17:constexpr std::__shared_ptr<_Tp, _Lp>::__shared_ptr() [with _Tp = tama::TimeMonitor; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
stl_vector.h:126:7:std::_Vector_base<_Tp, _Alloc>::_Vector_base() [with _Tp = std::shared_ptr<tama::Sprite>; _Alloc = std::allocator<std::shared_ptr<tama::Sprite> >]	16	static
stl_vector.h:115:7:std::_Vector_base<_Tp, _Alloc>::_Tp_alloc_type& std::_Vector_base<_Tp, _Alloc>::_M_get_Tp_allocator() [with _Tp = std::shared_ptr<tama::Sprite>; _Alloc = std::allocator<std::shared_ptr<tama::Sprite> >]	16	static
stl_construct.h:203:5:void std::_Destroy(_ForwardIterator, _ForwardIterator, std::allocator<_T2>&) [with _ForwardIterator = std::shared_ptr<tama::Sprite>*; _Tp = std::shared_ptr<tama::Sprite>]	24	static
move.h:98:5:constexpr typename std::remove_reference< <template-parameter-1-1> >::type&& std::move(_Tp&&) [with _Tp = std::__shared_ptr<tama::TimeMonitor, (__gnu_cxx::_Lock_policy)0>&]	16	static
shared_ptr_base.h:1211:7:std::__shared_ptr<_Tp, _Lp>& std::__shared_ptr<_Tp, _Lp>::operator=(std::__shared_ptr<_Tp, _Lp>&&) [with _Tp = tama::TimeMonitor; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	24	static
shared_ptr_base.h:1078:2:std::__shared_ptr<_Tp, _Lp>::__shared_ptr(_Yp*) [with _Yp = tama::Sprite; <template-parameter-2-2> = void; _Tp = tama::Drawable; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	32	static
shared_ptr_base.h:1257:7:std::__shared_ptr<_Tp, _Lp>::element_type* std::__shared_ptr<_Tp, _Lp>::get() const [with _Tp = tama::Texture; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
shared_ptr_base.h:1257:7:std::__shared_ptr<_Tp, _Lp>::element_type* std::__shared_ptr<_Tp, _Lp>::get() const [with _Tp = tama::Context; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
shared_ptr_base.h:1257:7:std::__shared_ptr<_Tp, _Lp>::element_type* std::__shared_ptr<_Tp, _Lp>::get() const [with _Tp = tama::TextureLoader; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
shared_ptr_base.h:575:17:constexpr std::__shared_count<_Lp>::__shared_count() [with __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
shared_ptr_base.h:710:7:void std::__shared_count<_Lp>::_M_swap(std::__shared_count<_Lp>&) [with __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	24	static
shared_ptr_base.h:1257:7:std::__shared_ptr<_Tp, _Lp>::element_type* std::__shared_ptr<_Tp, _Lp>::get() const [with _Tp = tama::TimeMonitorCreator; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
shared_ptr_base.h:1257:7:std::__shared_ptr<_Tp, _Lp>::element_type* std::__shared_ptr<_Tp, _Lp>::get() const [with _Tp = tama::Scene; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
tuple:1314:5:>&) [with unsigned int __i = 0; _Elements = {tama::TextureLoader*, std::default_delete<tama::TextureLoader>}]	16	static
unique_ptr.h:148:18:_Dp& std::__uniq_ptr_impl<_Tp, _Dp>::_M_deleter() [with _Tp = tama::TextureLoader; _Dp = std::default_delete<tama::TextureLoader>]	16	static
new_allocator.h:79:7:__gnu_cxx::new_allocator<_Tp>::new_allocator() [with _Tp = tama::TimeView]	16	static
new_allocator.h:86:7:__gnu_cxx::new_allocator<_Tp>::~new_allocator() [with _Tp = tama::TimeView]	16	static
shared_ptr.h:342:2:) [with _Alloc = std::allocator<tama::TimeView>; _Args = {std::shared_ptr<tama::Context>&}; _Tp = tama::TimeView]	32	static
new_allocator.h:79:7:__gnu_cxx::new_allocator<_Tp>::new_allocator() [with _Tp = tama::PageOne]	16	static
new_allocator.h:86:7:__gnu_cxx::new_allocator<_Tp>::~new_allocator() [with _Tp = tama::PageOne]	16	static
shared_ptr.h:342:2:) [with _Alloc = std::allocator<tama::PageOne>; _Args = {std::shared_ptr<tama::Context>&}; _Tp = tama::PageOne]	32	static
new_allocator.h:79:7:__gnu_cxx::new_allocator<_Tp>::new_allocator() [with _Tp = tama::Eat]	16	static
new_allocator.h:86:7:__gnu_cxx::new_allocator<_Tp>::~new_allocator() [with _Tp = tama::Eat]	16	static
shared_ptr.h:342:2:) [with _Alloc = std::allocator<tama::Eat>; _Args = {std::shared_ptr<tama::Context>&}; _Tp = tama::Eat]	32	static
new_allocator.h:79:7:__gnu_cxx::new_allocator<_Tp>::new_allocator() [with _Tp = tama::Wash]	16	static
new_allocator.h:86:7:__gnu_cxx::new_allocator<_Tp>::~new_allocator() [with _Tp = tama::Wash]	16	static
shared_ptr.h:342:2:) [with _Alloc = std::allocator<tama::Wash>; _Args = {std::shared_ptr<tama::Context>&}; _Tp = tama::Wash]	32	static
new_allocator.h:79:7:__gnu_cxx::new_allocator<_Tp>::new_allocator() [with _Tp = tama::PlayMenu]	16	static
new_allocator.h:86:7:__gnu_cxx::new_allocator<_Tp>::~new_allocator() [with _Tp = tama::PlayMenu]	16	static
shared_ptr.h:342:2:) [with _Alloc = std::allocator<tama::PlayMenu>; _Args = {std::shared_ptr<tama::Context>&}; _Tp = tama::PlayMenu]	32	static
new_allocator.h:79:7:__gnu_cxx::new_allocator<_Tp>::new_allocator() [with _Tp = tama::Heal]	16	static
new_allocator.h:86:7:__gnu_cxx::new_allocator<_Tp>::~new_allocator() [with _Tp = tama::Heal]	16	static
shared_ptr.h:342:2:) [with _Alloc = std::allocator<tama::Heal>; _Args = {std::shared_ptr<tama::Context>&}; _Tp = tama::Heal]	32	static
new_allocator.h:79:7:__gnu_cxx::new_allocator<_Tp>::new_allocator() [with _Tp = tama::Lamp]	16	static
new_allocator.h:86:7:__gnu_cxx::new_allocator<_Tp>::~new_allocator() [with _Tp = tama::Lamp]	16	static
shared_ptr.h:342:2:) [with _Alloc = std::allocator<tama::Lamp>; _Args = {std::shared_ptr<tama::Context>&}; _Tp = tama::Lamp]	32	static
shared_ptr_base.h:1257:7:std::__shared_ptr<_Tp, _Lp>::element_type* std::__shared_ptr<_Tp, _Lp>::get() const [with _Tp = tama::TimeMonitor; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
new_allocator.h:79:7:__gnu_cxx::new_allocator<_Tp>::new_allocator() [with _Tp = tama::Sprite]	16	static
new_allocator.h:86:7:__gnu_cxx::new_allocator<_Tp>::~new_allocator() [with _Tp = tama::Sprite]	16	static
shared_ptr.h:342:2:) [with _Alloc = std::allocator<tama::Sprite>; _Args = {std::shared_ptr<tama::Texture>, tama::Vec2d}; _Tp = tama::Sprite]	48	static
shared_ptr_base.h:1121:7:std::__shared_ptr<_Tp, _Lp>::__shared_ptr(const std::__shared_ptr<_Tp, _Lp>&) [with _Tp = tama::Sprite; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
shared_ptr.h:119:7:std::shared_ptr<_Tp>::shared_ptr(const std::shared_ptr<_Tp>&) [with _Tp = tama::Sprite]	16	static
new_allocator.h:135:2:) [with _Up = std::shared_ptr<tama::Sprite>; _Args = {std::shared_ptr<tama::Sprite>&}; _Tp = std::shared_ptr<tama::Sprite>]	32	static
stl_vector.h:1497:7:std::vector<_Tp, _Alloc>::size_type std::vector<_Tp, _Alloc>::_M_check_len(std::vector<_Tp, _Alloc>::size_type, const char*) const [with _Tp = std::shared_ptr<tama::Sprite>; _Alloc = std::allocator<std::shared_ptr<tama::Sprite> >]	40	static
stl_iterator.h:962:5:typename __gnu_cxx::__normal_iterator<_Iterator, _Container>::difference_type __gnu_cxx::operator-(const __gnu_cxx::__normal_iterator<_Iterator, _Container>&, const __gnu_cxx::__normal_iterator<_Iterator, _Container>&) [with _Iterator = std::shared_ptr<tama::Sprite>*; _Container = std::vector<std::shared_ptr<tama::Sprite> >]	24	static
stl_vector.h:169:7:std::_Vector_base<_Tp, _Alloc>::pointer std::_Vector_base<_Tp, _Alloc>::_M_allocate(std::size_t) [with _Tp = std::shared_ptr<tama::Sprite>; _Alloc = std::allocator<std::shared_ptr<tama::Sprite> >]	16	static
stl_uninitialized.h:305:5:_ForwardIterator std::__uninitialized_move_if_noexcept_a(_InputIterator, _InputIterator, _ForwardIterator, _Allocator&) [with _InputIterator = std::shared_ptr<tama::Sprite>*; _ForwardIterator = std::shared_ptr<tama::Sprite>*; _Allocator = std::allocator<std::shared_ptr<tama::Sprite> >]	32	static
stl_vector.h:176:7:void std::_Vector_base<_Tp, _Alloc>::_M_deallocate(std::_Vector_base<_Tp, _Alloc>::pointer, std::size_t) [with _Tp = std::shared_ptr<tama::Sprite>; _Alloc = std::allocator<std::shared_ptr<tama::Sprite> >]	24	static
stl_iterator.h:779:7:__gnu_cxx::__normal_iterator<_Iterator, _Container>::__normal_iterator(const _Iterator&) [with _Iterator = const std::shared_ptr<tama::Sprite>*; _Container = std::vector<std::shared_ptr<tama::Sprite> >]	16	static
stl_iterator.h:844:7:const _Iterator& __gnu_cxx::__normal_iterator<_Iterator, _Container>::base() const [with _Iterator = const std::shared_ptr<tama::Sprite>*; _Container = std::vector<std::shared_ptr<tama::Sprite> >]	16	static
stl_iterator.h:880:5:bool __gnu_cxx::operator!=(const __gnu_cxx::__normal_iterator<_Iterator, _Container>&, const __gnu_cxx::__normal_iterator<_Iterator, _Container>&) [with _Iterator = std::shared_ptr<tama::Sprite>*; _Container = std::vector<std::shared_ptr<tama::Sprite> >]	24	static
stl_algobase.h:479:5:_OI std::move(_II, _II, _OI) [with _II = __gnu_cxx::__normal_iterator<std::shared_ptr<tama::Sprite>*, std::vector<std::shared_ptr<tama::Sprite> > >; _OI = __gnu_cxx::__normal_iterator<std::shared_ptr<tama::Sprite>*, std::vector<std::shared_ptr<tama::Sprite> > >]	32	static
stl_vector.h:1511:7:void std::vector<_Tp, _Alloc>::_M_erase_at_end(std::vector<_Tp, _Alloc>::pointer) [with _Tp = std::shared_ptr<tama::Sprite>; _Alloc = std::allocator<std::shared_ptr<tama::Sprite> >]	24	static
shared_ptr_base.h:1257:7:std::__shared_ptr<_Tp, _Lp>::element_type* std::__shared_ptr<_Tp, _Lp>::get() const [with _Tp = tama::Sprite; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
stl_vector.h:88:2:std::_Vector_base<_Tp, _Alloc>::_Vector_impl::_Vector_impl() [with _Tp = std::shared_ptr<tama::Sprite>; _Alloc = std::allocator<std::shared_ptr<tama::Sprite> >]	16	static
stl_construct.h:127:5:void std::_Destroy(_ForwardIterator, _ForwardIterator) [with _ForwardIterator = std::shared_ptr<tama::Sprite>*]	16	static
shared_ptr_base.h:1272:7:void std::__shared_ptr<_Tp, _Lp>::swap(std::__shared_ptr<_Tp, _Lp>&) [with _Tp = tama::TimeMonitor; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
shared_ptr_base.h:594:2:std::__shared_count<_Lp>::__shared_count(_Ptr, std::false_type) [with _Ptr = tama::Sprite*; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	24	static
shared_ptr_base.h:1378:2:typename std::enable_if<(! std::__shared_ptr<_Tp, _Lp>::__has_esft_base<_Yp2>::value)>::type std::__shared_ptr<_Tp, _Lp>::_M_enable_shared_from_this_with(_Yp*) [with _Yp = tama::Sprite; _Yp2 = tama::Sprite; _Tp = tama::Drawable; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
tuple:1303:5:>&) [with unsigned int __i = 0; _Head = tama::TextureLoader*; _Tail = {std::default_delete<tama::TextureLoader>}]	16	static
tuple:1314:5:>&) [with unsigned int __i = 1; _Elements = {tama::TextureLoader*, std::default_delete<tama::TextureLoader>}]	16	static
shared_ptr_base.h:1305:16:std::__shared_ptr<tama::TimeView, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::TimeView> >::~_Deleter()	16	static
shared_ptr_base.h:1305:16:std::__shared_ptr<tama::TimeView, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::TimeView> >::_Deleter(const std::__shared_ptr<tama::TimeView, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::TimeView> >&)	16	static
shared_ptr_base.h:1316:2:) [with _Alloc = std::allocator<tama::TimeView>; _Args = {std::shared_ptr<tama::Context>&}; _Tp = tama::TimeView; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	56	static
shared_ptr_base.h:1305:16:std::__shared_ptr<tama::PageOne, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::PageOne> >::~_Deleter()	16	static
shared_ptr_base.h:1305:16:std::__shared_ptr<tama::PageOne, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::PageOne> >::_Deleter(const std::__shared_ptr<tama::PageOne, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::PageOne> >&)	16	static
shared_ptr_base.h:1316:2:) [with _Alloc = std::allocator<tama::PageOne>; _Args = {std::shared_ptr<tama::Context>&}; _Tp = tama::PageOne; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	56	static
shared_ptr_base.h:1305:16:std::__shared_ptr<tama::Eat, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Eat> >::~_Deleter()	16	static
shared_ptr_base.h:1305:16:std::__shared_ptr<tama::Eat, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Eat> >::_Deleter(const std::__shared_ptr<tama::Eat, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Eat> >&)	16	static
shared_ptr_base.h:1316:2:) [with _Alloc = std::allocator<tama::Eat>; _Args = {std::shared_ptr<tama::Context>&}; _Tp = tama::Eat; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	56	static
shared_ptr_base.h:1305:16:std::__shared_ptr<tama::Wash, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Wash> >::~_Deleter()	16	static
shared_ptr_base.h:1305:16:std::__shared_ptr<tama::Wash, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Wash> >::_Deleter(const std::__shared_ptr<tama::Wash, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Wash> >&)	16	static
shared_ptr_base.h:1316:2:) [with _Alloc = std::allocator<tama::Wash>; _Args = {std::shared_ptr<tama::Context>&}; _Tp = tama::Wash; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	56	static
shared_ptr_base.h:1305:16:std::__shared_ptr<tama::PlayMenu, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::PlayMenu> >::~_Deleter()	16	static
shared_ptr_base.h:1305:16:std::__shared_ptr<tama::PlayMenu, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::PlayMenu> >::_Deleter(const std::__shared_ptr<tama::PlayMenu, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::PlayMenu> >&)	16	static
shared_ptr_base.h:1316:2:) [with _Alloc = std::allocator<tama::PlayMenu>; _Args = {std::shared_ptr<tama::Context>&}; _Tp = tama::PlayMenu; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	56	static
shared_ptr_base.h:1305:16:std::__shared_ptr<tama::Heal, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Heal> >::~_Deleter()	16	static
shared_ptr_base.h:1305:16:std::__shared_ptr<tama::Heal, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Heal> >::_Deleter(const std::__shared_ptr<tama::Heal, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Heal> >&)	16	static
shared_ptr_base.h:1316:2:) [with _Alloc = std::allocator<tama::Heal>; _Args = {std::shared_ptr<tama::Context>&}; _Tp = tama::Heal; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	56	static
shared_ptr_base.h:1305:16:std::__shared_ptr<tama::Lamp, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Lamp> >::~_Deleter()	16	static
shared_ptr_base.h:1305:16:std::__shared_ptr<tama::Lamp, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Lamp> >::_Deleter(const std::__shared_ptr<tama::Lamp, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Lamp> >&)	16	static
shared_ptr_base.h:1316:2:) [with _Alloc = std::allocator<tama::Lamp>; _Args = {std::shared_ptr<tama::Context>&}; _Tp = tama::Lamp; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	56	static
shared_ptr_base.h:1305:16:std::__shared_ptr<tama::Sprite, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Sprite> >::~_Deleter()	16	static
shared_ptr_base.h:1305:16:std::__shared_ptr<tama::Sprite, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Sprite> >::_Deleter(const std::__shared_ptr<tama::Sprite, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Sprite> >&)	16	static
shared_ptr_base.h:1316:2:) [with _Alloc = std::allocator<tama::Sprite>; _Args = {std::shared_ptr<tama::Texture>, tama::Vec2d}; _Tp = tama::Sprite; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	64	static
stl_vector.h:675:7:std::vector<_Tp, _Alloc>::size_type std::vector<_Tp, _Alloc>::max_size() const [with _Tp = std::shared_ptr<tama::Sprite>; _Alloc = std::allocator<std::shared_ptr<tama::Sprite> >]	16	static
alloc_traits.h:435:7:static _Tp* std::allocator_traits<std::allocator<_Tp1> >::allocate(std::allocator_traits<std::allocator<_Tp1> >::allocator_type&, std::allocator_traits<std::allocator<_Tp1> >::size_type) [with _Tp = std::shared_ptr<tama::Sprite>]	16	static
stl_iterator.h:1221:5:_ReturnType std::__make_move_if_noexcept_iterator(_Tp*) [with _Tp = std::shared_ptr<tama::Sprite>; _ReturnType = std::move_iterator<std::shared_ptr<tama::Sprite>*>]	24	static
stl_uninitialized.h:287:5:_ForwardIterator std::__uninitialized_copy_a(_InputIterator, _InputIterator, _ForwardIterator, std::allocator<_Tp>&) [with _InputIterator = std::move_iterator<std::shared_ptr<tama::Sprite>*>; _ForwardIterator = std::shared_ptr<tama::Sprite>*; _Tp = std::shared_ptr<tama::Sprite>]	24	static
alloc_traits.h:461:7:static void std::allocator_traits<std::allocator<_Tp1> >::deallocate(std::allocator_traits<std::allocator<_Tp1> >::allocator_type&, std::allocator_traits<std::allocator<_Tp1> >::pointer, std::allocator_traits<std::allocator<_Tp1> >::size_type) [with _Tp = std::shared_ptr<tama::Sprite>]	24	static
cpp_type_traits.h:408:5:_Iterator std::__miter_base(_Iterator) [with _Iterator = __gnu_cxx::__normal_iterator<std::shared_ptr<tama::Sprite>*, std::vector<std::shared_ptr<tama::Sprite> > >]	16	static
stl_algobase.h:420:5:_OI std::__copy_move_a2(_II, _II, _OI) [with bool _IsMove = true; _II = __gnu_cxx::__normal_iterator<std::shared_ptr<tama::Sprite>*, std::vector<std::shared_ptr<tama::Sprite> > >; _OI = __gnu_cxx::__normal_iterator<std::shared_ptr<tama::Sprite>*, std::vector<std::shared_ptr<tama::Sprite> > >]	40	static
allocator.h:131:7:std::allocator< <template-parameter-1-1> >::allocator() [with _Tp = std::shared_ptr<tama::Sprite>]	16	static
move.h:47:5:constexpr _Tp* std::__addressof(_Tp&) [with _Tp = std::shared_ptr<tama::Sprite>]	16	static
stl_construct.h:105:9:static void std::_Destroy_aux<<anonymous> >::__destroy(_ForwardIterator, _ForwardIterator) [with _ForwardIterator = std::shared_ptr<tama::Sprite>*; bool <anonymous> = false]	16	static
move.h:98:5:constexpr typename std::remove_reference< <template-parameter-1-1> >::type&& std::move(_Tp&&) [with _Tp = tama::TimeMonitor*&]	16	static
move.h:187:5:typename std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<_Tp> >, std::is_move_constructible<_Tp>, std::is_move_assignable<_Tp> >::value>::type std::swap(_Tp&, _Tp&) [with _Tp = tama::TimeMonitor*]	24	static
shared_ptr_base.h:580:2:std::__shared_count<_Lp>::__shared_count(_Ptr) [with _Ptr = tama::Sprite*; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	24	static
tuple:195:7:>&) [with unsigned int _Idx = 0; _Head = tama::TextureLoader*; _Tail = {std::default_delete<tama::TextureLoader>}]	16	static
tuple:1303:5:>&) [with unsigned int __i = 1; _Head = std::default_delete<tama::TextureLoader>; _Tail = {}]	16	static
allocator.h:133:7:std::allocator< <template-parameter-1-1> >::allocator(const std::allocator< <template-parameter-1-1> >&) [with _Tp = tama::TimeView]	16	static
allocated_ptr.h:102:5:std::__allocated_ptr<_Alloc> std::__allocate_guarded(_Alloc&) [with _Alloc = std::allocator<tama::TimeView>]	16	static
allocated_ptr.h:70:7:std::__allocated_ptr<_Alloc>::~__allocated_ptr() [with _Alloc = std::allocator<tama::TimeView>]	16	static
allocated_ptr.h:85:19:std::__allocated_ptr<_Alloc>::value_type* std::__allocated_ptr<_Alloc>::get() [with _Alloc = std::allocator<tama::TimeView>]	16	static
alloc_traits.h:474:2:) [with _Up = tama::TimeView; _Args = {std::shared_ptr<tama::Context>&}; _Tp = tama::TimeView]	24	static
allocated_ptr.h:78:7:std::__allocated_ptr<_Alloc>& std::__allocated_ptr<_Alloc>::operator=(std::nullptr_t) [with _Alloc = std::allocator<tama::TimeView>]	16	static
move.h:98:5:constexpr typename std::remove_reference< <template-parameter-1-1> >::type&& std::move(_Tp&&) [with _Tp = std::__shared_ptr<tama::TimeView, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::TimeView> >&]	16	static
shared_ptr_base.h:1305:16:std::__shared_ptr<tama::TimeView, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::TimeView> >::_Deleter(std::__shared_ptr<tama::TimeView, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::TimeView> >&&)	16	static
move.h:98:5:constexpr typename std::remove_reference< <template-parameter-1-1> >::type&& std::move(_Tp&&) [with _Tp = std::allocator<tama::TimeView>&]	16	static
shared_ptr_base.h:609:2:std::__shared_count<_Lp>::__shared_count(_Ptr, _Deleter, _Alloc) [with _Ptr = tama::TimeView*; _Deleter = std::__shared_ptr<tama::TimeView, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::TimeView> >; _Alloc = std::allocator<tama::TimeView>; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	56	static
shared_ptr_base.h:1378:2:typename std::enable_if<(! std::__shared_ptr<_Tp, _Lp>::__has_esft_base<_Yp2>::value)>::type std::__shared_ptr<_Tp, _Lp>::_M_enable_shared_from_this_with(_Yp*) [with _Yp = tama::TimeView; _Yp2 = tama::TimeView; _Tp = tama::TimeView; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
allocator.h:133:7:std::allocator< <template-parameter-1-1> >::allocator(const std::allocator< <template-parameter-1-1> >&) [with _Tp = tama::PageOne]	16	static
allocated_ptr.h:102:5:std::__allocated_ptr<_Alloc> std::__allocate_guarded(_Alloc&) [with _Alloc = std::allocator<tama::PageOne>]	16	static
allocated_ptr.h:70:7:std::__allocated_ptr<_Alloc>::~__allocated_ptr() [with _Alloc = std::allocator<tama::PageOne>]	16	static
allocated_ptr.h:85:19:std::__allocated_ptr<_Alloc>::value_type* std::__allocated_ptr<_Alloc>::get() [with _Alloc = std::allocator<tama::PageOne>]	16	static
alloc_traits.h:474:2:) [with _Up = tama::PageOne; _Args = {std::shared_ptr<tama::Context>&}; _Tp = tama::PageOne]	24	static
allocated_ptr.h:78:7:std::__allocated_ptr<_Alloc>& std::__allocated_ptr<_Alloc>::operator=(std::nullptr_t) [with _Alloc = std::allocator<tama::PageOne>]	16	static
move.h:98:5:constexpr typename std::remove_reference< <template-parameter-1-1> >::type&& std::move(_Tp&&) [with _Tp = std::__shared_ptr<tama::PageOne, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::PageOne> >&]	16	static
shared_ptr_base.h:1305:16:std::__shared_ptr<tama::PageOne, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::PageOne> >::_Deleter(std::__shared_ptr<tama::PageOne, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::PageOne> >&&)	16	static
move.h:98:5:constexpr typename std::remove_reference< <template-parameter-1-1> >::type&& std::move(_Tp&&) [with _Tp = std::allocator<tama::PageOne>&]	16	static
shared_ptr_base.h:609:2:std::__shared_count<_Lp>::__shared_count(_Ptr, _Deleter, _Alloc) [with _Ptr = tama::PageOne*; _Deleter = std::__shared_ptr<tama::PageOne, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::PageOne> >; _Alloc = std::allocator<tama::PageOne>; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	56	static
shared_ptr_base.h:1378:2:typename std::enable_if<(! std::__shared_ptr<_Tp, _Lp>::__has_esft_base<_Yp2>::value)>::type std::__shared_ptr<_Tp, _Lp>::_M_enable_shared_from_this_with(_Yp*) [with _Yp = tama::PageOne; _Yp2 = tama::PageOne; _Tp = tama::PageOne; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
allocator.h:133:7:std::allocator< <template-parameter-1-1> >::allocator(const std::allocator< <template-parameter-1-1> >&) [with _Tp = tama::Eat]	16	static
allocated_ptr.h:102:5:std::__allocated_ptr<_Alloc> std::__allocate_guarded(_Alloc&) [with _Alloc = std::allocator<tama::Eat>]	16	static
allocated_ptr.h:70:7:std::__allocated_ptr<_Alloc>::~__allocated_ptr() [with _Alloc = std::allocator<tama::Eat>]	16	static
allocated_ptr.h:85:19:std::__allocated_ptr<_Alloc>::value_type* std::__allocated_ptr<_Alloc>::get() [with _Alloc = std::allocator<tama::Eat>]	16	static
alloc_traits.h:474:2:) [with _Up = tama::Eat; _Args = {std::shared_ptr<tama::Context>&}; _Tp = tama::Eat]	24	static
allocated_ptr.h:78:7:std::__allocated_ptr<_Alloc>& std::__allocated_ptr<_Alloc>::operator=(std::nullptr_t) [with _Alloc = std::allocator<tama::Eat>]	16	static
move.h:98:5:constexpr typename std::remove_reference< <template-parameter-1-1> >::type&& std::move(_Tp&&) [with _Tp = std::__shared_ptr<tama::Eat, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Eat> >&]	16	static
shared_ptr_base.h:1305:16:std::__shared_ptr<tama::Eat, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Eat> >::_Deleter(std::__shared_ptr<tama::Eat, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Eat> >&&)	16	static
move.h:98:5:constexpr typename std::remove_reference< <template-parameter-1-1> >::type&& std::move(_Tp&&) [with _Tp = std::allocator<tama::Eat>&]	16	static
shared_ptr_base.h:609:2:std::__shared_count<_Lp>::__shared_count(_Ptr, _Deleter, _Alloc) [with _Ptr = tama::Eat*; _Deleter = std::__shared_ptr<tama::Eat, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Eat> >; _Alloc = std::allocator<tama::Eat>; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	56	static
shared_ptr_base.h:1378:2:typename std::enable_if<(! std::__shared_ptr<_Tp, _Lp>::__has_esft_base<_Yp2>::value)>::type std::__shared_ptr<_Tp, _Lp>::_M_enable_shared_from_this_with(_Yp*) [with _Yp = tama::Eat; _Yp2 = tama::Eat; _Tp = tama::Eat; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
allocator.h:133:7:std::allocator< <template-parameter-1-1> >::allocator(const std::allocator< <template-parameter-1-1> >&) [with _Tp = tama::Wash]	16	static
allocated_ptr.h:102:5:std::__allocated_ptr<_Alloc> std::__allocate_guarded(_Alloc&) [with _Alloc = std::allocator<tama::Wash>]	16	static
allocated_ptr.h:70:7:std::__allocated_ptr<_Alloc>::~__allocated_ptr() [with _Alloc = std::allocator<tama::Wash>]	16	static
allocated_ptr.h:85:19:std::__allocated_ptr<_Alloc>::value_type* std::__allocated_ptr<_Alloc>::get() [with _Alloc = std::allocator<tama::Wash>]	16	static
alloc_traits.h:474:2:) [with _Up = tama::Wash; _Args = {std::shared_ptr<tama::Context>&}; _Tp = tama::Wash]	24	static
allocated_ptr.h:78:7:std::__allocated_ptr<_Alloc>& std::__allocated_ptr<_Alloc>::operator=(std::nullptr_t) [with _Alloc = std::allocator<tama::Wash>]	16	static
move.h:98:5:constexpr typename std::remove_reference< <template-parameter-1-1> >::type&& std::move(_Tp&&) [with _Tp = std::__shared_ptr<tama::Wash, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Wash> >&]	16	static
shared_ptr_base.h:1305:16:std::__shared_ptr<tama::Wash, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Wash> >::_Deleter(std::__shared_ptr<tama::Wash, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Wash> >&&)	16	static
move.h:98:5:constexpr typename std::remove_reference< <template-parameter-1-1> >::type&& std::move(_Tp&&) [with _Tp = std::allocator<tama::Wash>&]	16	static
shared_ptr_base.h:609:2:std::__shared_count<_Lp>::__shared_count(_Ptr, _Deleter, _Alloc) [with _Ptr = tama::Wash*; _Deleter = std::__shared_ptr<tama::Wash, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Wash> >; _Alloc = std::allocator<tama::Wash>; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	56	static
shared_ptr_base.h:1378:2:typename std::enable_if<(! std::__shared_ptr<_Tp, _Lp>::__has_esft_base<_Yp2>::value)>::type std::__shared_ptr<_Tp, _Lp>::_M_enable_shared_from_this_with(_Yp*) [with _Yp = tama::Wash; _Yp2 = tama::Wash; _Tp = tama::Wash; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
allocator.h:133:7:std::allocator< <template-parameter-1-1> >::allocator(const std::allocator< <template-parameter-1-1> >&) [with _Tp = tama::PlayMenu]	16	static
allocated_ptr.h:102:5:std::__allocated_ptr<_Alloc> std::__allocate_guarded(_Alloc&) [with _Alloc = std::allocator<tama::PlayMenu>]	16	static
allocated_ptr.h:70:7:std::__allocated_ptr<_Alloc>::~__allocated_ptr() [with _Alloc = std::allocator<tama::PlayMenu>]	16	static
allocated_ptr.h:85:19:std::__allocated_ptr<_Alloc>::value_type* std::__allocated_ptr<_Alloc>::get() [with _Alloc = std::allocator<tama::PlayMenu>]	16	static
alloc_traits.h:474:2:) [with _Up = tama::PlayMenu; _Args = {std::shared_ptr<tama::Context>&}; _Tp = tama::PlayMenu]	24	static
allocated_ptr.h:78:7:std::__allocated_ptr<_Alloc>& std::__allocated_ptr<_Alloc>::operator=(std::nullptr_t) [with _Alloc = std::allocator<tama::PlayMenu>]	16	static
move.h:98:5:constexpr typename std::remove_reference< <template-parameter-1-1> >::type&& std::move(_Tp&&) [with _Tp = std::__shared_ptr<tama::PlayMenu, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::PlayMenu> >&]	16	static
shared_ptr_base.h:1305:16:std::__shared_ptr<tama::PlayMenu, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::PlayMenu> >::_Deleter(std::__shared_ptr<tama::PlayMenu, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::PlayMenu> >&&)	16	static
move.h:98:5:constexpr typename std::remove_reference< <template-parameter-1-1> >::type&& std::move(_Tp&&) [with _Tp = std::allocator<tama::PlayMenu>&]	16	static
shared_ptr_base.h:609:2:std::__shared_count<_Lp>::__shared_count(_Ptr, _Deleter, _Alloc) [with _Ptr = tama::PlayMenu*; _Deleter = std::__shared_ptr<tama::PlayMenu, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::PlayMenu> >; _Alloc = std::allocator<tama::PlayMenu>; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	56	static
shared_ptr_base.h:1378:2:typename std::enable_if<(! std::__shared_ptr<_Tp, _Lp>::__has_esft_base<_Yp2>::value)>::type std::__shared_ptr<_Tp, _Lp>::_M_enable_shared_from_this_with(_Yp*) [with _Yp = tama::PlayMenu; _Yp2 = tama::PlayMenu; _Tp = tama::PlayMenu; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
allocator.h:133:7:std::allocator< <template-parameter-1-1> >::allocator(const std::allocator< <template-parameter-1-1> >&) [with _Tp = tama::Heal]	16	static
allocated_ptr.h:102:5:std::__allocated_ptr<_Alloc> std::__allocate_guarded(_Alloc&) [with _Alloc = std::allocator<tama::Heal>]	16	static
allocated_ptr.h:70:7:std::__allocated_ptr<_Alloc>::~__allocated_ptr() [with _Alloc = std::allocator<tama::Heal>]	16	static
allocated_ptr.h:85:19:std::__allocated_ptr<_Alloc>::value_type* std::__allocated_ptr<_Alloc>::get() [with _Alloc = std::allocator<tama::Heal>]	16	static
alloc_traits.h:474:2:) [with _Up = tama::Heal; _Args = {std::shared_ptr<tama::Context>&}; _Tp = tama::Heal]	24	static
allocated_ptr.h:78:7:std::__allocated_ptr<_Alloc>& std::__allocated_ptr<_Alloc>::operator=(std::nullptr_t) [with _Alloc = std::allocator<tama::Heal>]	16	static
move.h:98:5:constexpr typename std::remove_reference< <template-parameter-1-1> >::type&& std::move(_Tp&&) [with _Tp = std::__shared_ptr<tama::Heal, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Heal> >&]	16	static
shared_ptr_base.h:1305:16:std::__shared_ptr<tama::Heal, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Heal> >::_Deleter(std::__shared_ptr<tama::Heal, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Heal> >&&)	16	static
move.h:98:5:constexpr typename std::remove_reference< <template-parameter-1-1> >::type&& std::move(_Tp&&) [with _Tp = std::allocator<tama::Heal>&]	16	static
shared_ptr_base.h:609:2:std::__shared_count<_Lp>::__shared_count(_Ptr, _Deleter, _Alloc) [with _Ptr = tama::Heal*; _Deleter = std::__shared_ptr<tama::Heal, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Heal> >; _Alloc = std::allocator<tama::Heal>; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	56	static
shared_ptr_base.h:1378:2:typename std::enable_if<(! std::__shared_ptr<_Tp, _Lp>::__has_esft_base<_Yp2>::value)>::type std::__shared_ptr<_Tp, _Lp>::_M_enable_shared_from_this_with(_Yp*) [with _Yp = tama::Heal; _Yp2 = tama::Heal; _Tp = tama::Heal; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
allocator.h:133:7:std::allocator< <template-parameter-1-1> >::allocator(const std::allocator< <template-parameter-1-1> >&) [with _Tp = tama::Lamp]	16	static
allocated_ptr.h:102:5:std::__allocated_ptr<_Alloc> std::__allocate_guarded(_Alloc&) [with _Alloc = std::allocator<tama::Lamp>]	16	static
allocated_ptr.h:70:7:std::__allocated_ptr<_Alloc>::~__allocated_ptr() [with _Alloc = std::allocator<tama::Lamp>]	16	static
allocated_ptr.h:85:19:std::__allocated_ptr<_Alloc>::value_type* std::__allocated_ptr<_Alloc>::get() [with _Alloc = std::allocator<tama::Lamp>]	16	static
alloc_traits.h:474:2:) [with _Up = tama::Lamp; _Args = {std::shared_ptr<tama::Context>&}; _Tp = tama::Lamp]	24	static
allocated_ptr.h:78:7:std::__allocated_ptr<_Alloc>& std::__allocated_ptr<_Alloc>::operator=(std::nullptr_t) [with _Alloc = std::allocator<tama::Lamp>]	16	static
move.h:98:5:constexpr typename std::remove_reference< <template-parameter-1-1> >::type&& std::move(_Tp&&) [with _Tp = std::__shared_ptr<tama::Lamp, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Lamp> >&]	16	static
shared_ptr_base.h:1305:16:std::__shared_ptr<tama::Lamp, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Lamp> >::_Deleter(std::__shared_ptr<tama::Lamp, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Lamp> >&&)	16	static
move.h:98:5:constexpr typename std::remove_reference< <template-parameter-1-1> >::type&& std::move(_Tp&&) [with _Tp = std::allocator<tama::Lamp>&]	16	static
shared_ptr_base.h:609:2:std::__shared_count<_Lp>::__shared_count(_Ptr, _Deleter, _Alloc) [with _Ptr = tama::Lamp*; _Deleter = std::__shared_ptr<tama::Lamp, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Lamp> >; _Alloc = std::allocator<tama::Lamp>; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	56	static
shared_ptr_base.h:1378:2:typename std::enable_if<(! std::__shared_ptr<_Tp, _Lp>::__has_esft_base<_Yp2>::value)>::type std::__shared_ptr<_Tp, _Lp>::_M_enable_shared_from_this_with(_Yp*) [with _Yp = tama::Lamp; _Yp2 = tama::Lamp; _Tp = tama::Lamp; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
allocator.h:133:7:std::allocator< <template-parameter-1-1> >::allocator(const std::allocator< <template-parameter-1-1> >&) [with _Tp = tama::Sprite]	16	static
allocated_ptr.h:102:5:std::__allocated_ptr<_Alloc> std::__allocate_guarded(_Alloc&) [with _Alloc = std::allocator<tama::Sprite>]	16	static
allocated_ptr.h:70:7:std::__allocated_ptr<_Alloc>::~__allocated_ptr() [with _Alloc = std::allocator<tama::Sprite>]	16	static
allocated_ptr.h:85:19:std::__allocated_ptr<_Alloc>::value_type* std::__allocated_ptr<_Alloc>::get() [with _Alloc = std::allocator<tama::Sprite>]	16	static
alloc_traits.h:474:2:) [with _Up = tama::Sprite; _Args = {std::shared_ptr<tama::Texture>, tama::Vec2d}; _Tp = tama::Sprite]	32	static
allocated_ptr.h:78:7:std::__allocated_ptr<_Alloc>& std::__allocated_ptr<_Alloc>::operator=(std::nullptr_t) [with _Alloc = std::allocator<tama::Sprite>]	16	static
move.h:98:5:constexpr typename std::remove_reference< <template-parameter-1-1> >::type&& std::move(_Tp&&) [with _Tp = std::__shared_ptr<tama::Sprite, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Sprite> >&]	16	static
shared_ptr_base.h:1305:16:std::__shared_ptr<tama::Sprite, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Sprite> >::_Deleter(std::__shared_ptr<tama::Sprite, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Sprite> >&&)	16	static
move.h:98:5:constexpr typename std::remove_reference< <template-parameter-1-1> >::type&& std::move(_Tp&&) [with _Tp = std::allocator<tama::Sprite>&]	16	static
shared_ptr_base.h:609:2:std::__shared_count<_Lp>::__shared_count(_Ptr, _Deleter, _Alloc) [with _Ptr = tama::Sprite*; _Deleter = std::__shared_ptr<tama::Sprite, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Sprite> >; _Alloc = std::allocator<tama::Sprite>; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	56	static
shared_ptr_base.h:1378:2:typename std::enable_if<(! std::__shared_ptr<_Tp, _Lp>::__has_esft_base<_Yp2>::value)>::type std::__shared_ptr<_Tp, _Lp>::_M_enable_shared_from_this_with(_Yp*) [with _Yp = tama::Sprite; _Yp2 = tama::Sprite; _Tp = tama::Sprite; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
alloc_traits.h:495:7:static std::allocator_traits<std::allocator<_Tp1> >::size_type std::allocator_traits<std::allocator<_Tp1> >::max_size(const allocator_type&) [with _Tp = std::shared_ptr<tama::Sprite>]	16	static
stl_vector.h:119:7:const _Tp_alloc_type& std::_Vector_base<_Tp, _Alloc>::_M_get_Tp_allocator() const [with _Tp = std::shared_ptr<tama::Sprite>; _Alloc = std::allocator<std::shared_ptr<tama::Sprite> >]	16	static
new_allocator.h:99:7:_Tp* __gnu_cxx::new_allocator<_Tp>::allocate(__gnu_cxx::new_allocator<_Tp>::size_type, const void*) [with _Tp = std::shared_ptr<tama::Sprite>]	24	static
stl_iterator.h:1036:7:std::move_iterator<_Iterator>::move_iterator(std::move_iterator<_Iterator>::iterator_type) [with _Iterator = std::shared_ptr<tama::Sprite>*]	16	static
stl_uninitialized.h:115:5:_ForwardIterator std::uninitialized_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = std::move_iterator<std::shared_ptr<tama::Sprite>*>; _ForwardIterator = std::shared_ptr<tama::Sprite>*]	32	static
new_allocator.h:116:7:void __gnu_cxx::new_allocator<_Tp>::deallocate(__gnu_cxx::new_allocator<_Tp>::pointer, __gnu_cxx::new_allocator<_Tp>::size_type) [with _Tp = std::shared_ptr<tama::Sprite>]	24	static
stl_iterator.h:983:5:_Iterator std::__niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container>) [with _Iterator = std::shared_ptr<tama::Sprite>*; _Container = std::vector<std::shared_ptr<tama::Sprite> >]	16	static
stl_algobase.h:375:5:_OI std::__copy_move_a(_II, _II, _OI) [with bool _IsMove = true; _II = std::shared_ptr<tama::Sprite>*; _OI = std::shared_ptr<tama::Sprite>*]	32	static
new_allocator.h:79:7:__gnu_cxx::new_allocator<_Tp>::new_allocator() [with _Tp = std::shared_ptr<tama::Sprite>]	16	static
stl_construct.h:97:5:void std::_Destroy(_Tp*) [with _Tp = std::shared_ptr<tama::Sprite>]	16	static
shared_ptr_base.h:371:7:std::_Sp_counted_ptr<_Ptr, _Lp>::_Sp_counted_ptr(_Ptr) [with _Ptr = tama::Sprite*; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
tuple:160:7:static constexpr _Head& std::_Head_base<_Idx, _Head, false>::_M_head(std::_Head_base<_Idx, _Head, false>&) [with unsigned int _Idx = 0; _Head = tama::TextureLoader*]	16	static
tuple:351:7:static constexpr _Head& std::_Tuple_impl<_Idx, _Head>::_M_head(std::_Tuple_impl<_Idx, _Head>&) [with unsigned int _Idx = 1; _Head = std::default_delete<tama::TextureLoader>]	16	static
new_allocator.h:81:7:__gnu_cxx::new_allocator<_Tp>::new_allocator(const __gnu_cxx::new_allocator<_Tp>&) [with _Tp = tama::TimeView]	16	static
alloc_traits.h:435:7:static _Tp* std::allocator_traits<std::allocator<_Tp1> >::allocate(std::allocator_traits<std::allocator<_Tp1> >::allocator_type&, std::allocator_traits<std::allocator<_Tp1> >::size_type) [with _Tp = tama::TimeView]	16	static
allocated_ptr.h:52:7:std::__allocated_ptr<_Alloc>::__allocated_ptr(_Alloc&, std::__allocated_ptr<_Alloc>::pointer) [with _Alloc = std::allocator<tama::TimeView>]	24	static
alloc_traits.h:461:7:static void std::allocator_traits<std::allocator<_Tp1> >::deallocate(std::allocator_traits<std::allocator<_Tp1> >::allocator_type&, std::allocator_traits<std::allocator<_Tp1> >::pointer, std::allocator_traits<std::allocator<_Tp1> >::size_type) [with _Tp = tama::TimeView]	24	static
allocated_ptr.h:88:26:static std::__allocated_ptr<_Alloc>::value_type* std::__allocated_ptr<_Alloc>::_S_raw_ptr(std::__allocated_ptr<_Alloc>::value_type*) [with _Alloc = std::allocator<tama::TimeView>]	16	static
new_allocator.h:135:2:) [with _Up = tama::TimeView; _Args = {std::shared_ptr<tama::Context>&}; _Tp = tama::TimeView]	32	static
allocator.h:137:2:std::allocator< <template-parameter-1-1> >::allocator(const std::allocator<_Tp1>&) [with _Tp1 = tama::TimeView; _Tp = std::_Sp_counted_deleter<tama::TimeView*, std::__shared_ptr<tama::TimeView, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::TimeView> >, std::allocator<tama::TimeView>, (__gnu_cxx::_Lock_policy)0>]	16	static
allocator.h:139:7:std::allocator< <template-parameter-1-1> >::~allocator() [with _Tp = std::_Sp_counted_deleter<tama::TimeView*, std::__shared_ptr<tama::TimeView, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::TimeView> >, std::allocator<tama::TimeView>, (__gnu_cxx::_Lock_policy)0>]	16	static
allocated_ptr.h:102:5:std::__allocated_ptr<_Alloc> std::__allocate_guarded(_Alloc&) [with _Alloc = std::allocator<std::_Sp_counted_deleter<tama::TimeView*, std::__shared_ptr<tama::TimeView, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::TimeView> >, std::allocator<tama::TimeView>, (__gnu_cxx::_Lock_policy)0> >]	16	static
allocated_ptr.h:70:7:std::__allocated_ptr<_Alloc>::~__allocated_ptr() [with _Alloc = std::allocator<std::_Sp_counted_deleter<tama::TimeView*, std::__shared_ptr<tama::TimeView, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::TimeView> >, std::allocator<tama::TimeView>, (__gnu_cxx::_Lock_policy)0> >]	16	static
allocated_ptr.h:85:19:std::__allocated_ptr<_Alloc>::value_type* std::__allocated_ptr<_Alloc>::get() [with _Alloc = std::allocator<std::_Sp_counted_deleter<tama::TimeView*, std::__shared_ptr<tama::TimeView, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::TimeView> >, std::allocator<tama::TimeView>, (__gnu_cxx::_Lock_policy)0> >]	16	static
shared_ptr_base.h:422:12:std::_Sp_ebo_helper<0, std::__shared_ptr<tama::TimeView, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::TimeView> >, false>::~_Sp_ebo_helper()	16	static
shared_ptr_base.h:411:12:std::_Sp_ebo_helper<1, std::allocator<tama::TimeView>, true>::~_Sp_ebo_helper()	16	static
shared_ptr_base.h:439:13:std::_Sp_counted_deleter<tama::TimeView*, std::__shared_ptr<tama::TimeView, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::TimeView> >, std::allocator<tama::TimeView>, (__gnu_cxx::_Lock_policy)0>::_Impl::~_Impl()	16	static
shared_ptr_base.h:463:7:std::_Sp_counted_deleter<_Ptr, _Deleter, _Alloc, _Lp>::_Sp_counted_deleter(_Ptr, _Deleter, const _Alloc&) [with _Ptr = tama::TimeView*; _Deleter = std::__shared_ptr<tama::TimeView, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::TimeView> >; _Alloc = std::allocator<tama::TimeView>; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	40	static
allocated_ptr.h:78:7:std::__allocated_ptr<_Alloc>& std::__allocated_ptr<_Alloc>::operator=(std::nullptr_t) [with _Alloc = std::allocator<std::_Sp_counted_deleter<tama::TimeView*, std::__shared_ptr<tama::TimeView, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::TimeView> >, std::allocator<tama::TimeView>, (__gnu_cxx::_Lock_policy)0> >]	16	static
shared_ptr_base.h:1307:16:void std::__shared_ptr<_Tp, _Lp>::_Deleter<_Alloc>::operator()(typename _Alloc::value_type*) [with _Alloc = std::allocator<tama::TimeView>; _Tp = tama::TimeView; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	32	static
new_allocator.h:81:7:__gnu_cxx::new_allocator<_Tp>::new_allocator(const __gnu_cxx::new_allocator<_Tp>&) [with _Tp = tama::PageOne]	16	static
alloc_traits.h:435:7:static _Tp* std::allocator_traits<std::allocator<_Tp1> >::allocate(std::allocator_traits<std::allocator<_Tp1> >::allocator_type&, std::allocator_traits<std::allocator<_Tp1> >::size_type) [with _Tp = tama::PageOne]	16	static
allocated_ptr.h:52:7:std::__allocated_ptr<_Alloc>::__allocated_ptr(_Alloc&, std::__allocated_ptr<_Alloc>::pointer) [with _Alloc = std::allocator<tama::PageOne>]	24	static
alloc_traits.h:461:7:static void std::allocator_traits<std::allocator<_Tp1> >::deallocate(std::allocator_traits<std::allocator<_Tp1> >::allocator_type&, std::allocator_traits<std::allocator<_Tp1> >::pointer, std::allocator_traits<std::allocator<_Tp1> >::size_type) [with _Tp = tama::PageOne]	24	static
allocated_ptr.h:88:26:static std::__allocated_ptr<_Alloc>::value_type* std::__allocated_ptr<_Alloc>::_S_raw_ptr(std::__allocated_ptr<_Alloc>::value_type*) [with _Alloc = std::allocator<tama::PageOne>]	16	static
new_allocator.h:135:2:) [with _Up = tama::PageOne; _Args = {std::shared_ptr<tama::Context>&}; _Tp = tama::PageOne]	32	static
allocator.h:137:2:std::allocator< <template-parameter-1-1> >::allocator(const std::allocator<_Tp1>&) [with _Tp1 = tama::PageOne; _Tp = std::_Sp_counted_deleter<tama::PageOne*, std::__shared_ptr<tama::PageOne, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::PageOne> >, std::allocator<tama::PageOne>, (__gnu_cxx::_Lock_policy)0>]	16	static
allocator.h:139:7:std::allocator< <template-parameter-1-1> >::~allocator() [with _Tp = std::_Sp_counted_deleter<tama::PageOne*, std::__shared_ptr<tama::PageOne, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::PageOne> >, std::allocator<tama::PageOne>, (__gnu_cxx::_Lock_policy)0>]	16	static
allocated_ptr.h:102:5:std::__allocated_ptr<_Alloc> std::__allocate_guarded(_Alloc&) [with _Alloc = std::allocator<std::_Sp_counted_deleter<tama::PageOne*, std::__shared_ptr<tama::PageOne, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::PageOne> >, std::allocator<tama::PageOne>, (__gnu_cxx::_Lock_policy)0> >]	16	static
allocated_ptr.h:70:7:std::__allocated_ptr<_Alloc>::~__allocated_ptr() [with _Alloc = std::allocator<std::_Sp_counted_deleter<tama::PageOne*, std::__shared_ptr<tama::PageOne, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::PageOne> >, std::allocator<tama::PageOne>, (__gnu_cxx::_Lock_policy)0> >]	16	static
allocated_ptr.h:85:19:std::__allocated_ptr<_Alloc>::value_type* std::__allocated_ptr<_Alloc>::get() [with _Alloc = std::allocator<std::_Sp_counted_deleter<tama::PageOne*, std::__shared_ptr<tama::PageOne, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::PageOne> >, std::allocator<tama::PageOne>, (__gnu_cxx::_Lock_policy)0> >]	16	static
shared_ptr_base.h:422:12:std::_Sp_ebo_helper<0, std::__shared_ptr<tama::PageOne, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::PageOne> >, false>::~_Sp_ebo_helper()	16	static
shared_ptr_base.h:411:12:std::_Sp_ebo_helper<1, std::allocator<tama::PageOne>, true>::~_Sp_ebo_helper()	16	static
shared_ptr_base.h:439:13:std::_Sp_counted_deleter<tama::PageOne*, std::__shared_ptr<tama::PageOne, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::PageOne> >, std::allocator<tama::PageOne>, (__gnu_cxx::_Lock_policy)0>::_Impl::~_Impl()	16	static
shared_ptr_base.h:463:7:std::_Sp_counted_deleter<_Ptr, _Deleter, _Alloc, _Lp>::_Sp_counted_deleter(_Ptr, _Deleter, const _Alloc&) [with _Ptr = tama::PageOne*; _Deleter = std::__shared_ptr<tama::PageOne, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::PageOne> >; _Alloc = std::allocator<tama::PageOne>; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	40	static
allocated_ptr.h:78:7:std::__allocated_ptr<_Alloc>& std::__allocated_ptr<_Alloc>::operator=(std::nullptr_t) [with _Alloc = std::allocator<std::_Sp_counted_deleter<tama::PageOne*, std::__shared_ptr<tama::PageOne, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::PageOne> >, std::allocator<tama::PageOne>, (__gnu_cxx::_Lock_policy)0> >]	16	static
shared_ptr_base.h:1307:16:void std::__shared_ptr<_Tp, _Lp>::_Deleter<_Alloc>::operator()(typename _Alloc::value_type*) [with _Alloc = std::allocator<tama::PageOne>; _Tp = tama::PageOne; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	32	static
new_allocator.h:81:7:__gnu_cxx::new_allocator<_Tp>::new_allocator(const __gnu_cxx::new_allocator<_Tp>&) [with _Tp = tama::Eat]	16	static
alloc_traits.h:435:7:static _Tp* std::allocator_traits<std::allocator<_Tp1> >::allocate(std::allocator_traits<std::allocator<_Tp1> >::allocator_type&, std::allocator_traits<std::allocator<_Tp1> >::size_type) [with _Tp = tama::Eat]	16	static
allocated_ptr.h:52:7:std::__allocated_ptr<_Alloc>::__allocated_ptr(_Alloc&, std::__allocated_ptr<_Alloc>::pointer) [with _Alloc = std::allocator<tama::Eat>]	24	static
alloc_traits.h:461:7:static void std::allocator_traits<std::allocator<_Tp1> >::deallocate(std::allocator_traits<std::allocator<_Tp1> >::allocator_type&, std::allocator_traits<std::allocator<_Tp1> >::pointer, std::allocator_traits<std::allocator<_Tp1> >::size_type) [with _Tp = tama::Eat]	24	static
allocated_ptr.h:88:26:static std::__allocated_ptr<_Alloc>::value_type* std::__allocated_ptr<_Alloc>::_S_raw_ptr(std::__allocated_ptr<_Alloc>::value_type*) [with _Alloc = std::allocator<tama::Eat>]	16	static
new_allocator.h:135:2:) [with _Up = tama::Eat; _Args = {std::shared_ptr<tama::Context>&}; _Tp = tama::Eat]	32	static
allocator.h:137:2:std::allocator< <template-parameter-1-1> >::allocator(const std::allocator<_Tp1>&) [with _Tp1 = tama::Eat; _Tp = std::_Sp_counted_deleter<tama::Eat*, std::__shared_ptr<tama::Eat, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Eat> >, std::allocator<tama::Eat>, (__gnu_cxx::_Lock_policy)0>]	16	static
allocator.h:139:7:std::allocator< <template-parameter-1-1> >::~allocator() [with _Tp = std::_Sp_counted_deleter<tama::Eat*, std::__shared_ptr<tama::Eat, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Eat> >, std::allocator<tama::Eat>, (__gnu_cxx::_Lock_policy)0>]	16	static
allocated_ptr.h:102:5:std::__allocated_ptr<_Alloc> std::__allocate_guarded(_Alloc&) [with _Alloc = std::allocator<std::_Sp_counted_deleter<tama::Eat*, std::__shared_ptr<tama::Eat, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Eat> >, std::allocator<tama::Eat>, (__gnu_cxx::_Lock_policy)0> >]	16	static
allocated_ptr.h:70:7:std::__allocated_ptr<_Alloc>::~__allocated_ptr() [with _Alloc = std::allocator<std::_Sp_counted_deleter<tama::Eat*, std::__shared_ptr<tama::Eat, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Eat> >, std::allocator<tama::Eat>, (__gnu_cxx::_Lock_policy)0> >]	16	static
allocated_ptr.h:85:19:std::__allocated_ptr<_Alloc>::value_type* std::__allocated_ptr<_Alloc>::get() [with _Alloc = std::allocator<std::_Sp_counted_deleter<tama::Eat*, std::__shared_ptr<tama::Eat, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Eat> >, std::allocator<tama::Eat>, (__gnu_cxx::_Lock_policy)0> >]	16	static
shared_ptr_base.h:422:12:std::_Sp_ebo_helper<0, std::__shared_ptr<tama::Eat, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Eat> >, false>::~_Sp_ebo_helper()	16	static
shared_ptr_base.h:411:12:std::_Sp_ebo_helper<1, std::allocator<tama::Eat>, true>::~_Sp_ebo_helper()	16	static
shared_ptr_base.h:439:13:std::_Sp_counted_deleter<tama::Eat*, std::__shared_ptr<tama::Eat, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Eat> >, std::allocator<tama::Eat>, (__gnu_cxx::_Lock_policy)0>::_Impl::~_Impl()	16	static
shared_ptr_base.h:463:7:std::_Sp_counted_deleter<_Ptr, _Deleter, _Alloc, _Lp>::_Sp_counted_deleter(_Ptr, _Deleter, const _Alloc&) [with _Ptr = tama::Eat*; _Deleter = std::__shared_ptr<tama::Eat, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Eat> >; _Alloc = std::allocator<tama::Eat>; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	40	static
allocated_ptr.h:78:7:std::__allocated_ptr<_Alloc>& std::__allocated_ptr<_Alloc>::operator=(std::nullptr_t) [with _Alloc = std::allocator<std::_Sp_counted_deleter<tama::Eat*, std::__shared_ptr<tama::Eat, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Eat> >, std::allocator<tama::Eat>, (__gnu_cxx::_Lock_policy)0> >]	16	static
shared_ptr_base.h:1307:16:void std::__shared_ptr<_Tp, _Lp>::_Deleter<_Alloc>::operator()(typename _Alloc::value_type*) [with _Alloc = std::allocator<tama::Eat>; _Tp = tama::Eat; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	32	static
new_allocator.h:81:7:__gnu_cxx::new_allocator<_Tp>::new_allocator(const __gnu_cxx::new_allocator<_Tp>&) [with _Tp = tama::Wash]	16	static
alloc_traits.h:435:7:static _Tp* std::allocator_traits<std::allocator<_Tp1> >::allocate(std::allocator_traits<std::allocator<_Tp1> >::allocator_type&, std::allocator_traits<std::allocator<_Tp1> >::size_type) [with _Tp = tama::Wash]	16	static
allocated_ptr.h:52:7:std::__allocated_ptr<_Alloc>::__allocated_ptr(_Alloc&, std::__allocated_ptr<_Alloc>::pointer) [with _Alloc = std::allocator<tama::Wash>]	24	static
alloc_traits.h:461:7:static void std::allocator_traits<std::allocator<_Tp1> >::deallocate(std::allocator_traits<std::allocator<_Tp1> >::allocator_type&, std::allocator_traits<std::allocator<_Tp1> >::pointer, std::allocator_traits<std::allocator<_Tp1> >::size_type) [with _Tp = tama::Wash]	24	static
allocated_ptr.h:88:26:static std::__allocated_ptr<_Alloc>::value_type* std::__allocated_ptr<_Alloc>::_S_raw_ptr(std::__allocated_ptr<_Alloc>::value_type*) [with _Alloc = std::allocator<tama::Wash>]	16	static
new_allocator.h:135:2:) [with _Up = tama::Wash; _Args = {std::shared_ptr<tama::Context>&}; _Tp = tama::Wash]	32	static
allocator.h:137:2:std::allocator< <template-parameter-1-1> >::allocator(const std::allocator<_Tp1>&) [with _Tp1 = tama::Wash; _Tp = std::_Sp_counted_deleter<tama::Wash*, std::__shared_ptr<tama::Wash, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Wash> >, std::allocator<tama::Wash>, (__gnu_cxx::_Lock_policy)0>]	16	static
allocator.h:139:7:std::allocator< <template-parameter-1-1> >::~allocator() [with _Tp = std::_Sp_counted_deleter<tama::Wash*, std::__shared_ptr<tama::Wash, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Wash> >, std::allocator<tama::Wash>, (__gnu_cxx::_Lock_policy)0>]	16	static
allocated_ptr.h:102:5:std::__allocated_ptr<_Alloc> std::__allocate_guarded(_Alloc&) [with _Alloc = std::allocator<std::_Sp_counted_deleter<tama::Wash*, std::__shared_ptr<tama::Wash, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Wash> >, std::allocator<tama::Wash>, (__gnu_cxx::_Lock_policy)0> >]	16	static
allocated_ptr.h:70:7:std::__allocated_ptr<_Alloc>::~__allocated_ptr() [with _Alloc = std::allocator<std::_Sp_counted_deleter<tama::Wash*, std::__shared_ptr<tama::Wash, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Wash> >, std::allocator<tama::Wash>, (__gnu_cxx::_Lock_policy)0> >]	16	static
allocated_ptr.h:85:19:std::__allocated_ptr<_Alloc>::value_type* std::__allocated_ptr<_Alloc>::get() [with _Alloc = std::allocator<std::_Sp_counted_deleter<tama::Wash*, std::__shared_ptr<tama::Wash, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Wash> >, std::allocator<tama::Wash>, (__gnu_cxx::_Lock_policy)0> >]	16	static
shared_ptr_base.h:422:12:std::_Sp_ebo_helper<0, std::__shared_ptr<tama::Wash, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Wash> >, false>::~_Sp_ebo_helper()	16	static
shared_ptr_base.h:411:12:std::_Sp_ebo_helper<1, std::allocator<tama::Wash>, true>::~_Sp_ebo_helper()	16	static
shared_ptr_base.h:439:13:std::_Sp_counted_deleter<tama::Wash*, std::__shared_ptr<tama::Wash, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Wash> >, std::allocator<tama::Wash>, (__gnu_cxx::_Lock_policy)0>::_Impl::~_Impl()	16	static
shared_ptr_base.h:463:7:std::_Sp_counted_deleter<_Ptr, _Deleter, _Alloc, _Lp>::_Sp_counted_deleter(_Ptr, _Deleter, const _Alloc&) [with _Ptr = tama::Wash*; _Deleter = std::__shared_ptr<tama::Wash, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Wash> >; _Alloc = std::allocator<tama::Wash>; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	40	static
allocated_ptr.h:78:7:std::__allocated_ptr<_Alloc>& std::__allocated_ptr<_Alloc>::operator=(std::nullptr_t) [with _Alloc = std::allocator<std::_Sp_counted_deleter<tama::Wash*, std::__shared_ptr<tama::Wash, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Wash> >, std::allocator<tama::Wash>, (__gnu_cxx::_Lock_policy)0> >]	16	static
shared_ptr_base.h:1307:16:void std::__shared_ptr<_Tp, _Lp>::_Deleter<_Alloc>::operator()(typename _Alloc::value_type*) [with _Alloc = std::allocator<tama::Wash>; _Tp = tama::Wash; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	32	static
new_allocator.h:81:7:__gnu_cxx::new_allocator<_Tp>::new_allocator(const __gnu_cxx::new_allocator<_Tp>&) [with _Tp = tama::PlayMenu]	16	static
alloc_traits.h:435:7:static _Tp* std::allocator_traits<std::allocator<_Tp1> >::allocate(std::allocator_traits<std::allocator<_Tp1> >::allocator_type&, std::allocator_traits<std::allocator<_Tp1> >::size_type) [with _Tp = tama::PlayMenu]	16	static
allocated_ptr.h:52:7:std::__allocated_ptr<_Alloc>::__allocated_ptr(_Alloc&, std::__allocated_ptr<_Alloc>::pointer) [with _Alloc = std::allocator<tama::PlayMenu>]	24	static
alloc_traits.h:461:7:static void std::allocator_traits<std::allocator<_Tp1> >::deallocate(std::allocator_traits<std::allocator<_Tp1> >::allocator_type&, std::allocator_traits<std::allocator<_Tp1> >::pointer, std::allocator_traits<std::allocator<_Tp1> >::size_type) [with _Tp = tama::PlayMenu]	24	static
allocated_ptr.h:88:26:static std::__allocated_ptr<_Alloc>::value_type* std::__allocated_ptr<_Alloc>::_S_raw_ptr(std::__allocated_ptr<_Alloc>::value_type*) [with _Alloc = std::allocator<tama::PlayMenu>]	16	static
new_allocator.h:135:2:) [with _Up = tama::PlayMenu; _Args = {std::shared_ptr<tama::Context>&}; _Tp = tama::PlayMenu]	32	static
allocator.h:137:2:std::allocator< <template-parameter-1-1> >::allocator(const std::allocator<_Tp1>&) [with _Tp1 = tama::PlayMenu; _Tp = std::_Sp_counted_deleter<tama::PlayMenu*, std::__shared_ptr<tama::PlayMenu, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::PlayMenu> >, std::allocator<tama::PlayMenu>, (__gnu_cxx::_Lock_policy)0>]	16	static
allocator.h:139:7:std::allocator< <template-parameter-1-1> >::~allocator() [with _Tp = std::_Sp_counted_deleter<tama::PlayMenu*, std::__shared_ptr<tama::PlayMenu, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::PlayMenu> >, std::allocator<tama::PlayMenu>, (__gnu_cxx::_Lock_policy)0>]	16	static
allocated_ptr.h:102:5:std::__allocated_ptr<_Alloc> std::__allocate_guarded(_Alloc&) [with _Alloc = std::allocator<std::_Sp_counted_deleter<tama::PlayMenu*, std::__shared_ptr<tama::PlayMenu, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::PlayMenu> >, std::allocator<tama::PlayMenu>, (__gnu_cxx::_Lock_policy)0> >]	16	static
allocated_ptr.h:70:7:std::__allocated_ptr<_Alloc>::~__allocated_ptr() [with _Alloc = std::allocator<std::_Sp_counted_deleter<tama::PlayMenu*, std::__shared_ptr<tama::PlayMenu, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::PlayMenu> >, std::allocator<tama::PlayMenu>, (__gnu_cxx::_Lock_policy)0> >]	16	static
allocated_ptr.h:85:19:std::__allocated_ptr<_Alloc>::value_type* std::__allocated_ptr<_Alloc>::get() [with _Alloc = std::allocator<std::_Sp_counted_deleter<tama::PlayMenu*, std::__shared_ptr<tama::PlayMenu, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::PlayMenu> >, std::allocator<tama::PlayMenu>, (__gnu_cxx::_Lock_policy)0> >]	16	static
shared_ptr_base.h:422:12:std::_Sp_ebo_helper<0, std::__shared_ptr<tama::PlayMenu, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::PlayMenu> >, false>::~_Sp_ebo_helper()	16	static
shared_ptr_base.h:411:12:std::_Sp_ebo_helper<1, std::allocator<tama::PlayMenu>, true>::~_Sp_ebo_helper()	16	static
shared_ptr_base.h:439:13:std::_Sp_counted_deleter<tama::PlayMenu*, std::__shared_ptr<tama::PlayMenu, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::PlayMenu> >, std::allocator<tama::PlayMenu>, (__gnu_cxx::_Lock_policy)0>::_Impl::~_Impl()	16	static
shared_ptr_base.h:463:7:std::_Sp_counted_deleter<_Ptr, _Deleter, _Alloc, _Lp>::_Sp_counted_deleter(_Ptr, _Deleter, const _Alloc&) [with _Ptr = tama::PlayMenu*; _Deleter = std::__shared_ptr<tama::PlayMenu, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::PlayMenu> >; _Alloc = std::allocator<tama::PlayMenu>; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	40	static
allocated_ptr.h:78:7:std::__allocated_ptr<_Alloc>& std::__allocated_ptr<_Alloc>::operator=(std::nullptr_t) [with _Alloc = std::allocator<std::_Sp_counted_deleter<tama::PlayMenu*, std::__shared_ptr<tama::PlayMenu, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::PlayMenu> >, std::allocator<tama::PlayMenu>, (__gnu_cxx::_Lock_policy)0> >]	16	static
shared_ptr_base.h:1307:16:void std::__shared_ptr<_Tp, _Lp>::_Deleter<_Alloc>::operator()(typename _Alloc::value_type*) [with _Alloc = std::allocator<tama::PlayMenu>; _Tp = tama::PlayMenu; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	32	static
new_allocator.h:81:7:__gnu_cxx::new_allocator<_Tp>::new_allocator(const __gnu_cxx::new_allocator<_Tp>&) [with _Tp = tama::Heal]	16	static
alloc_traits.h:435:7:static _Tp* std::allocator_traits<std::allocator<_Tp1> >::allocate(std::allocator_traits<std::allocator<_Tp1> >::allocator_type&, std::allocator_traits<std::allocator<_Tp1> >::size_type) [with _Tp = tama::Heal]	16	static
allocated_ptr.h:52:7:std::__allocated_ptr<_Alloc>::__allocated_ptr(_Alloc&, std::__allocated_ptr<_Alloc>::pointer) [with _Alloc = std::allocator<tama::Heal>]	24	static
alloc_traits.h:461:7:static void std::allocator_traits<std::allocator<_Tp1> >::deallocate(std::allocator_traits<std::allocator<_Tp1> >::allocator_type&, std::allocator_traits<std::allocator<_Tp1> >::pointer, std::allocator_traits<std::allocator<_Tp1> >::size_type) [with _Tp = tama::Heal]	24	static
allocated_ptr.h:88:26:static std::__allocated_ptr<_Alloc>::value_type* std::__allocated_ptr<_Alloc>::_S_raw_ptr(std::__allocated_ptr<_Alloc>::value_type*) [with _Alloc = std::allocator<tama::Heal>]	16	static
new_allocator.h:135:2:) [with _Up = tama::Heal; _Args = {std::shared_ptr<tama::Context>&}; _Tp = tama::Heal]	32	static
allocator.h:137:2:std::allocator< <template-parameter-1-1> >::allocator(const std::allocator<_Tp1>&) [with _Tp1 = tama::Heal; _Tp = std::_Sp_counted_deleter<tama::Heal*, std::__shared_ptr<tama::Heal, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Heal> >, std::allocator<tama::Heal>, (__gnu_cxx::_Lock_policy)0>]	16	static
allocator.h:139:7:std::allocator< <template-parameter-1-1> >::~allocator() [with _Tp = std::_Sp_counted_deleter<tama::Heal*, std::__shared_ptr<tama::Heal, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Heal> >, std::allocator<tama::Heal>, (__gnu_cxx::_Lock_policy)0>]	16	static
allocated_ptr.h:102:5:std::__allocated_ptr<_Alloc> std::__allocate_guarded(_Alloc&) [with _Alloc = std::allocator<std::_Sp_counted_deleter<tama::Heal*, std::__shared_ptr<tama::Heal, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Heal> >, std::allocator<tama::Heal>, (__gnu_cxx::_Lock_policy)0> >]	16	static
allocated_ptr.h:70:7:std::__allocated_ptr<_Alloc>::~__allocated_ptr() [with _Alloc = std::allocator<std::_Sp_counted_deleter<tama::Heal*, std::__shared_ptr<tama::Heal, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Heal> >, std::allocator<tama::Heal>, (__gnu_cxx::_Lock_policy)0> >]	16	static
allocated_ptr.h:85:19:std::__allocated_ptr<_Alloc>::value_type* std::__allocated_ptr<_Alloc>::get() [with _Alloc = std::allocator<std::_Sp_counted_deleter<tama::Heal*, std::__shared_ptr<tama::Heal, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Heal> >, std::allocator<tama::Heal>, (__gnu_cxx::_Lock_policy)0> >]	16	static
shared_ptr_base.h:422:12:std::_Sp_ebo_helper<0, std::__shared_ptr<tama::Heal, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Heal> >, false>::~_Sp_ebo_helper()	16	static
shared_ptr_base.h:411:12:std::_Sp_ebo_helper<1, std::allocator<tama::Heal>, true>::~_Sp_ebo_helper()	16	static
shared_ptr_base.h:439:13:std::_Sp_counted_deleter<tama::Heal*, std::__shared_ptr<tama::Heal, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Heal> >, std::allocator<tama::Heal>, (__gnu_cxx::_Lock_policy)0>::_Impl::~_Impl()	16	static
shared_ptr_base.h:463:7:std::_Sp_counted_deleter<_Ptr, _Deleter, _Alloc, _Lp>::_Sp_counted_deleter(_Ptr, _Deleter, const _Alloc&) [with _Ptr = tama::Heal*; _Deleter = std::__shared_ptr<tama::Heal, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Heal> >; _Alloc = std::allocator<tama::Heal>; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	40	static
allocated_ptr.h:78:7:std::__allocated_ptr<_Alloc>& std::__allocated_ptr<_Alloc>::operator=(std::nullptr_t) [with _Alloc = std::allocator<std::_Sp_counted_deleter<tama::Heal*, std::__shared_ptr<tama::Heal, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Heal> >, std::allocator<tama::Heal>, (__gnu_cxx::_Lock_policy)0> >]	16	static
shared_ptr_base.h:1307:16:void std::__shared_ptr<_Tp, _Lp>::_Deleter<_Alloc>::operator()(typename _Alloc::value_type*) [with _Alloc = std::allocator<tama::Heal>; _Tp = tama::Heal; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	32	static
new_allocator.h:81:7:__gnu_cxx::new_allocator<_Tp>::new_allocator(const __gnu_cxx::new_allocator<_Tp>&) [with _Tp = tama::Lamp]	16	static
alloc_traits.h:435:7:static _Tp* std::allocator_traits<std::allocator<_Tp1> >::allocate(std::allocator_traits<std::allocator<_Tp1> >::allocator_type&, std::allocator_traits<std::allocator<_Tp1> >::size_type) [with _Tp = tama::Lamp]	16	static
allocated_ptr.h:52:7:std::__allocated_ptr<_Alloc>::__allocated_ptr(_Alloc&, std::__allocated_ptr<_Alloc>::pointer) [with _Alloc = std::allocator<tama::Lamp>]	24	static
alloc_traits.h:461:7:static void std::allocator_traits<std::allocator<_Tp1> >::deallocate(std::allocator_traits<std::allocator<_Tp1> >::allocator_type&, std::allocator_traits<std::allocator<_Tp1> >::pointer, std::allocator_traits<std::allocator<_Tp1> >::size_type) [with _Tp = tama::Lamp]	24	static
allocated_ptr.h:88:26:static std::__allocated_ptr<_Alloc>::value_type* std::__allocated_ptr<_Alloc>::_S_raw_ptr(std::__allocated_ptr<_Alloc>::value_type*) [with _Alloc = std::allocator<tama::Lamp>]	16	static
new_allocator.h:135:2:) [with _Up = tama::Lamp; _Args = {std::shared_ptr<tama::Context>&}; _Tp = tama::Lamp]	32	static
allocator.h:137:2:std::allocator< <template-parameter-1-1> >::allocator(const std::allocator<_Tp1>&) [with _Tp1 = tama::Lamp; _Tp = std::_Sp_counted_deleter<tama::Lamp*, std::__shared_ptr<tama::Lamp, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Lamp> >, std::allocator<tama::Lamp>, (__gnu_cxx::_Lock_policy)0>]	16	static
allocator.h:139:7:std::allocator< <template-parameter-1-1> >::~allocator() [with _Tp = std::_Sp_counted_deleter<tama::Lamp*, std::__shared_ptr<tama::Lamp, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Lamp> >, std::allocator<tama::Lamp>, (__gnu_cxx::_Lock_policy)0>]	16	static
allocated_ptr.h:102:5:std::__allocated_ptr<_Alloc> std::__allocate_guarded(_Alloc&) [with _Alloc = std::allocator<std::_Sp_counted_deleter<tama::Lamp*, std::__shared_ptr<tama::Lamp, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Lamp> >, std::allocator<tama::Lamp>, (__gnu_cxx::_Lock_policy)0> >]	16	static
allocated_ptr.h:70:7:std::__allocated_ptr<_Alloc>::~__allocated_ptr() [with _Alloc = std::allocator<std::_Sp_counted_deleter<tama::Lamp*, std::__shared_ptr<tama::Lamp, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Lamp> >, std::allocator<tama::Lamp>, (__gnu_cxx::_Lock_policy)0> >]	16	static
allocated_ptr.h:85:19:std::__allocated_ptr<_Alloc>::value_type* std::__allocated_ptr<_Alloc>::get() [with _Alloc = std::allocator<std::_Sp_counted_deleter<tama::Lamp*, std::__shared_ptr<tama::Lamp, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Lamp> >, std::allocator<tama::Lamp>, (__gnu_cxx::_Lock_policy)0> >]	16	static
shared_ptr_base.h:422:12:std::_Sp_ebo_helper<0, std::__shared_ptr<tama::Lamp, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Lamp> >, false>::~_Sp_ebo_helper()	16	static
shared_ptr_base.h:411:12:std::_Sp_ebo_helper<1, std::allocator<tama::Lamp>, true>::~_Sp_ebo_helper()	16	static
shared_ptr_base.h:439:13:std::_Sp_counted_deleter<tama::Lamp*, std::__shared_ptr<tama::Lamp, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Lamp> >, std::allocator<tama::Lamp>, (__gnu_cxx::_Lock_policy)0>::_Impl::~_Impl()	16	static
shared_ptr_base.h:463:7:std::_Sp_counted_deleter<_Ptr, _Deleter, _Alloc, _Lp>::_Sp_counted_deleter(_Ptr, _Deleter, const _Alloc&) [with _Ptr = tama::Lamp*; _Deleter = std::__shared_ptr<tama::Lamp, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Lamp> >; _Alloc = std::allocator<tama::Lamp>; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	40	static
allocated_ptr.h:78:7:std::__allocated_ptr<_Alloc>& std::__allocated_ptr<_Alloc>::operator=(std::nullptr_t) [with _Alloc = std::allocator<std::_Sp_counted_deleter<tama::Lamp*, std::__shared_ptr<tama::Lamp, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Lamp> >, std::allocator<tama::Lamp>, (__gnu_cxx::_Lock_policy)0> >]	16	static
shared_ptr_base.h:1307:16:void std::__shared_ptr<_Tp, _Lp>::_Deleter<_Alloc>::operator()(typename _Alloc::value_type*) [with _Alloc = std::allocator<tama::Lamp>; _Tp = tama::Lamp; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	32	static
new_allocator.h:81:7:__gnu_cxx::new_allocator<_Tp>::new_allocator(const __gnu_cxx::new_allocator<_Tp>&) [with _Tp = tama::Sprite]	16	static
alloc_traits.h:435:7:static _Tp* std::allocator_traits<std::allocator<_Tp1> >::allocate(std::allocator_traits<std::allocator<_Tp1> >::allocator_type&, std::allocator_traits<std::allocator<_Tp1> >::size_type) [with _Tp = tama::Sprite]	16	static
allocated_ptr.h:52:7:std::__allocated_ptr<_Alloc>::__allocated_ptr(_Alloc&, std::__allocated_ptr<_Alloc>::pointer) [with _Alloc = std::allocator<tama::Sprite>]	24	static
alloc_traits.h:461:7:static void std::allocator_traits<std::allocator<_Tp1> >::deallocate(std::allocator_traits<std::allocator<_Tp1> >::allocator_type&, std::allocator_traits<std::allocator<_Tp1> >::pointer, std::allocator_traits<std::allocator<_Tp1> >::size_type) [with _Tp = tama::Sprite]	24	static
allocated_ptr.h:88:26:static std::__allocated_ptr<_Alloc>::value_type* std::__allocated_ptr<_Alloc>::_S_raw_ptr(std::__allocated_ptr<_Alloc>::value_type*) [with _Alloc = std::allocator<tama::Sprite>]	16	static
new_allocator.h:135:2:) [with _Up = tama::Sprite; _Args = {std::shared_ptr<tama::Texture>, tama::Vec2d}; _Tp = tama::Sprite]	32	static
allocator.h:137:2:std::allocator< <template-parameter-1-1> >::allocator(const std::allocator<_Tp1>&) [with _Tp1 = tama::Sprite; _Tp = std::_Sp_counted_deleter<tama::Sprite*, std::__shared_ptr<tama::Sprite, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Sprite> >, std::allocator<tama::Sprite>, (__gnu_cxx::_Lock_policy)0>]	16	static
allocator.h:139:7:std::allocator< <template-parameter-1-1> >::~allocator() [with _Tp = std::_Sp_counted_deleter<tama::Sprite*, std::__shared_ptr<tama::Sprite, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Sprite> >, std::allocator<tama::Sprite>, (__gnu_cxx::_Lock_policy)0>]	16	static
allocated_ptr.h:102:5:std::__allocated_ptr<_Alloc> std::__allocate_guarded(_Alloc&) [with _Alloc = std::allocator<std::_Sp_counted_deleter<tama::Sprite*, std::__shared_ptr<tama::Sprite, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Sprite> >, std::allocator<tama::Sprite>, (__gnu_cxx::_Lock_policy)0> >]	16	static
allocated_ptr.h:70:7:std::__allocated_ptr<_Alloc>::~__allocated_ptr() [with _Alloc = std::allocator<std::_Sp_counted_deleter<tama::Sprite*, std::__shared_ptr<tama::Sprite, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Sprite> >, std::allocator<tama::Sprite>, (__gnu_cxx::_Lock_policy)0> >]	16	static
allocated_ptr.h:85:19:std::__allocated_ptr<_Alloc>::value_type* std::__allocated_ptr<_Alloc>::get() [with _Alloc = std::allocator<std::_Sp_counted_deleter<tama::Sprite*, std::__shared_ptr<tama::Sprite, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Sprite> >, std::allocator<tama::Sprite>, (__gnu_cxx::_Lock_policy)0> >]	16	static
shared_ptr_base.h:422:12:std::_Sp_ebo_helper<0, std::__shared_ptr<tama::Sprite, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Sprite> >, false>::~_Sp_ebo_helper()	16	static
shared_ptr_base.h:411:12:std::_Sp_ebo_helper<1, std::allocator<tama::Sprite>, true>::~_Sp_ebo_helper()	16	static
shared_ptr_base.h:439:13:std::_Sp_counted_deleter<tama::Sprite*, std::__shared_ptr<tama::Sprite, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Sprite> >, std::allocator<tama::Sprite>, (__gnu_cxx::_Lock_policy)0>::_Impl::~_Impl()	16	static
shared_ptr_base.h:463:7:std::_Sp_counted_deleter<_Ptr, _Deleter, _Alloc, _Lp>::_Sp_counted_deleter(_Ptr, _Deleter, const _Alloc&) [with _Ptr = tama::Sprite*; _Deleter = std::__shared_ptr<tama::Sprite, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Sprite> >; _Alloc = std::allocator<tama::Sprite>; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	40	static
allocated_ptr.h:78:7:std::__allocated_ptr<_Alloc>& std::__allocated_ptr<_Alloc>::operator=(std::nullptr_t) [with _Alloc = std::allocator<std::_Sp_counted_deleter<tama::Sprite*, std::__shared_ptr<tama::Sprite, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Sprite> >, std::allocator<tama::Sprite>, (__gnu_cxx::_Lock_policy)0> >]	16	static
shared_ptr_base.h:1307:16:void std::__shared_ptr<_Tp, _Lp>::_Deleter<_Alloc>::operator()(typename _Alloc::value_type*) [with _Alloc = std::allocator<tama::Sprite>; _Tp = tama::Sprite; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	32	static
new_allocator.h:129:7:__gnu_cxx::new_allocator<_Tp>::size_type __gnu_cxx::new_allocator<_Tp>::max_size() const [with _Tp = std::shared_ptr<tama::Sprite>]	16	static
stl_uninitialized.h:76:9:static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = std::move_iterator<std::shared_ptr<tama::Sprite>*>; _ForwardIterator = std::shared_ptr<tama::Sprite>*; bool _TrivialValueTypes = false]	40	static
stl_algobase.h:338:9:static _OI std::__copy_move<true, false, std::random_access_iterator_tag>::__copy_m(_II, _II, _OI) [with _II = std::shared_ptr<tama::Sprite>*; _OI = std::shared_ptr<tama::Sprite>*]	32	static
shared_ptr_base.h:116:7:std::_Sp_counted_base<_Lp>::_Sp_counted_base() [with __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
tuple:113:7:static constexpr _Head& std::_Head_base<_Idx, _Head, true>::_M_head(std::_Head_base<_Idx, _Head, true>&) [with unsigned int _Idx = 1; _Head = std::default_delete<tama::TextureLoader>]	16	static
new_allocator.h:99:7:_Tp* __gnu_cxx::new_allocator<_Tp>::allocate(__gnu_cxx::new_allocator<_Tp>::size_type, const void*) [with _Tp = tama::TimeView]	24	static
move.h:47:5:constexpr _Tp* std::__addressof(_Tp&) [with _Tp = std::allocator<tama::TimeView>]	16	static
new_allocator.h:116:7:void __gnu_cxx::new_allocator<_Tp>::deallocate(__gnu_cxx::new_allocator<_Tp>::pointer, __gnu_cxx::new_allocator<_Tp>::size_type) [with _Tp = tama::TimeView]	24	static
new_allocator.h:79:7:__gnu_cxx::new_allocator<_Tp>::new_allocator() [with _Tp = std::_Sp_counted_deleter<tama::TimeView*, std::__shared_ptr<tama::TimeView, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::TimeView> >, std::allocator<tama::TimeView>, (__gnu_cxx::_Lock_policy)0>]	16	static
new_allocator.h:86:7:__gnu_cxx::new_allocator<_Tp>::~new_allocator() [with _Tp = std::_Sp_counted_deleter<tama::TimeView*, std::__shared_ptr<tama::TimeView, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::TimeView> >, std::allocator<tama::TimeView>, (__gnu_cxx::_Lock_policy)0>]	16	static
alloc_traits.h:435:7:static _Tp* std::allocator_traits<std::allocator<_Tp1> >::allocate(std::allocator_traits<std::allocator<_Tp1> >::allocator_type&, std::allocator_traits<std::allocator<_Tp1> >::size_type) [with _Tp = std::_Sp_counted_deleter<tama::TimeView*, std::__shared_ptr<tama::TimeView, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::TimeView> >, std::allocator<tama::TimeView>, (__gnu_cxx::_Lock_policy)0>]	16	static
allocated_ptr.h:52:7:std::__allocated_ptr<_Alloc>::__allocated_ptr(_Alloc&, std::__allocated_ptr<_Alloc>::pointer) [with _Alloc = std::allocator<std::_Sp_counted_deleter<tama::TimeView*, std::__shared_ptr<tama::TimeView, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::TimeView> >, std::allocator<tama::TimeView>, (__gnu_cxx::_Lock_policy)0> >]	24	static
alloc_traits.h:461:7:static void std::allocator_traits<std::allocator<_Tp1> >::deallocate(std::allocator_traits<std::allocator<_Tp1> >::allocator_type&, std::allocator_traits<std::allocator<_Tp1> >::pointer, std::allocator_traits<std::allocator<_Tp1> >::size_type) [with _Tp = std::_Sp_counted_deleter<tama::TimeView*, std::__shared_ptr<tama::TimeView, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::TimeView> >, std::allocator<tama::TimeView>, (__gnu_cxx::_Lock_policy)0>]	24	static
allocated_ptr.h:88:26:static std::__allocated_ptr<_Alloc>::value_type* std::__allocated_ptr<_Alloc>::_S_raw_ptr(std::__allocated_ptr<_Alloc>::value_type*) [with _Alloc = std::allocator<std::_Sp_counted_deleter<tama::TimeView*, std::__shared_ptr<tama::TimeView, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::TimeView> >, std::allocator<tama::TimeView>, (__gnu_cxx::_Lock_policy)0> >]	16	static
shared_ptr_base.h:445:2:std::_Sp_counted_deleter<_Ptr, _Deleter, _Alloc, _Lp>::_Impl::_Impl(_Ptr, _Deleter, const _Alloc&) [with _Ptr = tama::TimeView*; _Deleter = std::__shared_ptr<tama::TimeView, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::TimeView> >; _Alloc = std::allocator<tama::TimeView>; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	32	static
alloc_traits.h:486:2:static void std::allocator_traits<std::allocator<_Tp1> >::destroy(std::allocator_traits<std::allocator<_Tp1> >::allocator_type&, _Up*) [with _Up = tama::TimeView; _Tp = tama::TimeView]	16	static
new_allocator.h:99:7:_Tp* __gnu_cxx::new_allocator<_Tp>::allocate(__gnu_cxx::new_allocator<_Tp>::size_type, const void*) [with _Tp = tama::PageOne]	24	static
move.h:47:5:constexpr _Tp* std::__addressof(_Tp&) [with _Tp = std::allocator<tama::PageOne>]	16	static
new_allocator.h:116:7:void __gnu_cxx::new_allocator<_Tp>::deallocate(__gnu_cxx::new_allocator<_Tp>::pointer, __gnu_cxx::new_allocator<_Tp>::size_type) [with _Tp = tama::PageOne]	24	static
new_allocator.h:79:7:__gnu_cxx::new_allocator<_Tp>::new_allocator() [with _Tp = std::_Sp_counted_deleter<tama::PageOne*, std::__shared_ptr<tama::PageOne, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::PageOne> >, std::allocator<tama::PageOne>, (__gnu_cxx::_Lock_policy)0>]	16	static
new_allocator.h:86:7:__gnu_cxx::new_allocator<_Tp>::~new_allocator() [with _Tp = std::_Sp_counted_deleter<tama::PageOne*, std::__shared_ptr<tama::PageOne, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::PageOne> >, std::allocator<tama::PageOne>, (__gnu_cxx::_Lock_policy)0>]	16	static
alloc_traits.h:435:7:static _Tp* std::allocator_traits<std::allocator<_Tp1> >::allocate(std::allocator_traits<std::allocator<_Tp1> >::allocator_type&, std::allocator_traits<std::allocator<_Tp1> >::size_type) [with _Tp = std::_Sp_counted_deleter<tama::PageOne*, std::__shared_ptr<tama::PageOne, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::PageOne> >, std::allocator<tama::PageOne>, (__gnu_cxx::_Lock_policy)0>]	16	static
allocated_ptr.h:52:7:std::__allocated_ptr<_Alloc>::__allocated_ptr(_Alloc&, std::__allocated_ptr<_Alloc>::pointer) [with _Alloc = std::allocator<std::_Sp_counted_deleter<tama::PageOne*, std::__shared_ptr<tama::PageOne, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::PageOne> >, std::allocator<tama::PageOne>, (__gnu_cxx::_Lock_policy)0> >]	24	static
alloc_traits.h:461:7:static void std::allocator_traits<std::allocator<_Tp1> >::deallocate(std::allocator_traits<std::allocator<_Tp1> >::allocator_type&, std::allocator_traits<std::allocator<_Tp1> >::pointer, std::allocator_traits<std::allocator<_Tp1> >::size_type) [with _Tp = std::_Sp_counted_deleter<tama::PageOne*, std::__shared_ptr<tama::PageOne, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::PageOne> >, std::allocator<tama::PageOne>, (__gnu_cxx::_Lock_policy)0>]	24	static
allocated_ptr.h:88:26:static std::__allocated_ptr<_Alloc>::value_type* std::__allocated_ptr<_Alloc>::_S_raw_ptr(std::__allocated_ptr<_Alloc>::value_type*) [with _Alloc = std::allocator<std::_Sp_counted_deleter<tama::PageOne*, std::__shared_ptr<tama::PageOne, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::PageOne> >, std::allocator<tama::PageOne>, (__gnu_cxx::_Lock_policy)0> >]	16	static
shared_ptr_base.h:445:2:std::_Sp_counted_deleter<_Ptr, _Deleter, _Alloc, _Lp>::_Impl::_Impl(_Ptr, _Deleter, const _Alloc&) [with _Ptr = tama::PageOne*; _Deleter = std::__shared_ptr<tama::PageOne, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::PageOne> >; _Alloc = std::allocator<tama::PageOne>; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	32	static
alloc_traits.h:486:2:static void std::allocator_traits<std::allocator<_Tp1> >::destroy(std::allocator_traits<std::allocator<_Tp1> >::allocator_type&, _Up*) [with _Up = tama::PageOne; _Tp = tama::PageOne]	16	static
new_allocator.h:99:7:_Tp* __gnu_cxx::new_allocator<_Tp>::allocate(__gnu_cxx::new_allocator<_Tp>::size_type, const void*) [with _Tp = tama::Eat]	24	static
move.h:47:5:constexpr _Tp* std::__addressof(_Tp&) [with _Tp = std::allocator<tama::Eat>]	16	static
new_allocator.h:116:7:void __gnu_cxx::new_allocator<_Tp>::deallocate(__gnu_cxx::new_allocator<_Tp>::pointer, __gnu_cxx::new_allocator<_Tp>::size_type) [with _Tp = tama::Eat]	24	static
new_allocator.h:79:7:__gnu_cxx::new_allocator<_Tp>::new_allocator() [with _Tp = std::_Sp_counted_deleter<tama::Eat*, std::__shared_ptr<tama::Eat, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Eat> >, std::allocator<tama::Eat>, (__gnu_cxx::_Lock_policy)0>]	16	static
new_allocator.h:86:7:__gnu_cxx::new_allocator<_Tp>::~new_allocator() [with _Tp = std::_Sp_counted_deleter<tama::Eat*, std::__shared_ptr<tama::Eat, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Eat> >, std::allocator<tama::Eat>, (__gnu_cxx::_Lock_policy)0>]	16	static
alloc_traits.h:435:7:static _Tp* std::allocator_traits<std::allocator<_Tp1> >::allocate(std::allocator_traits<std::allocator<_Tp1> >::allocator_type&, std::allocator_traits<std::allocator<_Tp1> >::size_type) [with _Tp = std::_Sp_counted_deleter<tama::Eat*, std::__shared_ptr<tama::Eat, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Eat> >, std::allocator<tama::Eat>, (__gnu_cxx::_Lock_policy)0>]	16	static
allocated_ptr.h:52:7:std::__allocated_ptr<_Alloc>::__allocated_ptr(_Alloc&, std::__allocated_ptr<_Alloc>::pointer) [with _Alloc = std::allocator<std::_Sp_counted_deleter<tama::Eat*, std::__shared_ptr<tama::Eat, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Eat> >, std::allocator<tama::Eat>, (__gnu_cxx::_Lock_policy)0> >]	24	static
alloc_traits.h:461:7:static void std::allocator_traits<std::allocator<_Tp1> >::deallocate(std::allocator_traits<std::allocator<_Tp1> >::allocator_type&, std::allocator_traits<std::allocator<_Tp1> >::pointer, std::allocator_traits<std::allocator<_Tp1> >::size_type) [with _Tp = std::_Sp_counted_deleter<tama::Eat*, std::__shared_ptr<tama::Eat, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Eat> >, std::allocator<tama::Eat>, (__gnu_cxx::_Lock_policy)0>]	24	static
allocated_ptr.h:88:26:static std::__allocated_ptr<_Alloc>::value_type* std::__allocated_ptr<_Alloc>::_S_raw_ptr(std::__allocated_ptr<_Alloc>::value_type*) [with _Alloc = std::allocator<std::_Sp_counted_deleter<tama::Eat*, std::__shared_ptr<tama::Eat, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Eat> >, std::allocator<tama::Eat>, (__gnu_cxx::_Lock_policy)0> >]	16	static
shared_ptr_base.h:445:2:std::_Sp_counted_deleter<_Ptr, _Deleter, _Alloc, _Lp>::_Impl::_Impl(_Ptr, _Deleter, const _Alloc&) [with _Ptr = tama::Eat*; _Deleter = std::__shared_ptr<tama::Eat, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Eat> >; _Alloc = std::allocator<tama::Eat>; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	32	static
alloc_traits.h:486:2:static void std::allocator_traits<std::allocator<_Tp1> >::destroy(std::allocator_traits<std::allocator<_Tp1> >::allocator_type&, _Up*) [with _Up = tama::Eat; _Tp = tama::Eat]	16	static
new_allocator.h:99:7:_Tp* __gnu_cxx::new_allocator<_Tp>::allocate(__gnu_cxx::new_allocator<_Tp>::size_type, const void*) [with _Tp = tama::Wash]	24	static
move.h:47:5:constexpr _Tp* std::__addressof(_Tp&) [with _Tp = std::allocator<tama::Wash>]	16	static
new_allocator.h:116:7:void __gnu_cxx::new_allocator<_Tp>::deallocate(__gnu_cxx::new_allocator<_Tp>::pointer, __gnu_cxx::new_allocator<_Tp>::size_type) [with _Tp = tama::Wash]	24	static
new_allocator.h:79:7:__gnu_cxx::new_allocator<_Tp>::new_allocator() [with _Tp = std::_Sp_counted_deleter<tama::Wash*, std::__shared_ptr<tama::Wash, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Wash> >, std::allocator<tama::Wash>, (__gnu_cxx::_Lock_policy)0>]	16	static
new_allocator.h:86:7:__gnu_cxx::new_allocator<_Tp>::~new_allocator() [with _Tp = std::_Sp_counted_deleter<tama::Wash*, std::__shared_ptr<tama::Wash, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Wash> >, std::allocator<tama::Wash>, (__gnu_cxx::_Lock_policy)0>]	16	static
alloc_traits.h:435:7:static _Tp* std::allocator_traits<std::allocator<_Tp1> >::allocate(std::allocator_traits<std::allocator<_Tp1> >::allocator_type&, std::allocator_traits<std::allocator<_Tp1> >::size_type) [with _Tp = std::_Sp_counted_deleter<tama::Wash*, std::__shared_ptr<tama::Wash, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Wash> >, std::allocator<tama::Wash>, (__gnu_cxx::_Lock_policy)0>]	16	static
allocated_ptr.h:52:7:std::__allocated_ptr<_Alloc>::__allocated_ptr(_Alloc&, std::__allocated_ptr<_Alloc>::pointer) [with _Alloc = std::allocator<std::_Sp_counted_deleter<tama::Wash*, std::__shared_ptr<tama::Wash, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Wash> >, std::allocator<tama::Wash>, (__gnu_cxx::_Lock_policy)0> >]	24	static
alloc_traits.h:461:7:static void std::allocator_traits<std::allocator<_Tp1> >::deallocate(std::allocator_traits<std::allocator<_Tp1> >::allocator_type&, std::allocator_traits<std::allocator<_Tp1> >::pointer, std::allocator_traits<std::allocator<_Tp1> >::size_type) [with _Tp = std::_Sp_counted_deleter<tama::Wash*, std::__shared_ptr<tama::Wash, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Wash> >, std::allocator<tama::Wash>, (__gnu_cxx::_Lock_policy)0>]	24	static
allocated_ptr.h:88:26:static std::__allocated_ptr<_Alloc>::value_type* std::__allocated_ptr<_Alloc>::_S_raw_ptr(std::__allocated_ptr<_Alloc>::value_type*) [with _Alloc = std::allocator<std::_Sp_counted_deleter<tama::Wash*, std::__shared_ptr<tama::Wash, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Wash> >, std::allocator<tama::Wash>, (__gnu_cxx::_Lock_policy)0> >]	16	static
shared_ptr_base.h:445:2:std::_Sp_counted_deleter<_Ptr, _Deleter, _Alloc, _Lp>::_Impl::_Impl(_Ptr, _Deleter, const _Alloc&) [with _Ptr = tama::Wash*; _Deleter = std::__shared_ptr<tama::Wash, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Wash> >; _Alloc = std::allocator<tama::Wash>; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	32	static
alloc_traits.h:486:2:static void std::allocator_traits<std::allocator<_Tp1> >::destroy(std::allocator_traits<std::allocator<_Tp1> >::allocator_type&, _Up*) [with _Up = tama::Wash; _Tp = tama::Wash]	16	static
new_allocator.h:99:7:_Tp* __gnu_cxx::new_allocator<_Tp>::allocate(__gnu_cxx::new_allocator<_Tp>::size_type, const void*) [with _Tp = tama::PlayMenu]	24	static
move.h:47:5:constexpr _Tp* std::__addressof(_Tp&) [with _Tp = std::allocator<tama::PlayMenu>]	16	static
new_allocator.h:116:7:void __gnu_cxx::new_allocator<_Tp>::deallocate(__gnu_cxx::new_allocator<_Tp>::pointer, __gnu_cxx::new_allocator<_Tp>::size_type) [with _Tp = tama::PlayMenu]	24	static
new_allocator.h:79:7:__gnu_cxx::new_allocator<_Tp>::new_allocator() [with _Tp = std::_Sp_counted_deleter<tama::PlayMenu*, std::__shared_ptr<tama::PlayMenu, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::PlayMenu> >, std::allocator<tama::PlayMenu>, (__gnu_cxx::_Lock_policy)0>]	16	static
new_allocator.h:86:7:__gnu_cxx::new_allocator<_Tp>::~new_allocator() [with _Tp = std::_Sp_counted_deleter<tama::PlayMenu*, std::__shared_ptr<tama::PlayMenu, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::PlayMenu> >, std::allocator<tama::PlayMenu>, (__gnu_cxx::_Lock_policy)0>]	16	static
alloc_traits.h:435:7:static _Tp* std::allocator_traits<std::allocator<_Tp1> >::allocate(std::allocator_traits<std::allocator<_Tp1> >::allocator_type&, std::allocator_traits<std::allocator<_Tp1> >::size_type) [with _Tp = std::_Sp_counted_deleter<tama::PlayMenu*, std::__shared_ptr<tama::PlayMenu, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::PlayMenu> >, std::allocator<tama::PlayMenu>, (__gnu_cxx::_Lock_policy)0>]	16	static
allocated_ptr.h:52:7:std::__allocated_ptr<_Alloc>::__allocated_ptr(_Alloc&, std::__allocated_ptr<_Alloc>::pointer) [with _Alloc = std::allocator<std::_Sp_counted_deleter<tama::PlayMenu*, std::__shared_ptr<tama::PlayMenu, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::PlayMenu> >, std::allocator<tama::PlayMenu>, (__gnu_cxx::_Lock_policy)0> >]	24	static
alloc_traits.h:461:7:static void std::allocator_traits<std::allocator<_Tp1> >::deallocate(std::allocator_traits<std::allocator<_Tp1> >::allocator_type&, std::allocator_traits<std::allocator<_Tp1> >::pointer, std::allocator_traits<std::allocator<_Tp1> >::size_type) [with _Tp = std::_Sp_counted_deleter<tama::PlayMenu*, std::__shared_ptr<tama::PlayMenu, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::PlayMenu> >, std::allocator<tama::PlayMenu>, (__gnu_cxx::_Lock_policy)0>]	24	static
allocated_ptr.h:88:26:static std::__allocated_ptr<_Alloc>::value_type* std::__allocated_ptr<_Alloc>::_S_raw_ptr(std::__allocated_ptr<_Alloc>::value_type*) [with _Alloc = std::allocator<std::_Sp_counted_deleter<tama::PlayMenu*, std::__shared_ptr<tama::PlayMenu, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::PlayMenu> >, std::allocator<tama::PlayMenu>, (__gnu_cxx::_Lock_policy)0> >]	16	static
shared_ptr_base.h:445:2:std::_Sp_counted_deleter<_Ptr, _Deleter, _Alloc, _Lp>::_Impl::_Impl(_Ptr, _Deleter, const _Alloc&) [with _Ptr = tama::PlayMenu*; _Deleter = std::__shared_ptr<tama::PlayMenu, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::PlayMenu> >; _Alloc = std::allocator<tama::PlayMenu>; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	32	static
alloc_traits.h:486:2:static void std::allocator_traits<std::allocator<_Tp1> >::destroy(std::allocator_traits<std::allocator<_Tp1> >::allocator_type&, _Up*) [with _Up = tama::PlayMenu; _Tp = tama::PlayMenu]	16	static
new_allocator.h:99:7:_Tp* __gnu_cxx::new_allocator<_Tp>::allocate(__gnu_cxx::new_allocator<_Tp>::size_type, const void*) [with _Tp = tama::Heal]	24	static
move.h:47:5:constexpr _Tp* std::__addressof(_Tp&) [with _Tp = std::allocator<tama::Heal>]	16	static
new_allocator.h:116:7:void __gnu_cxx::new_allocator<_Tp>::deallocate(__gnu_cxx::new_allocator<_Tp>::pointer, __gnu_cxx::new_allocator<_Tp>::size_type) [with _Tp = tama::Heal]	24	static
new_allocator.h:79:7:__gnu_cxx::new_allocator<_Tp>::new_allocator() [with _Tp = std::_Sp_counted_deleter<tama::Heal*, std::__shared_ptr<tama::Heal, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Heal> >, std::allocator<tama::Heal>, (__gnu_cxx::_Lock_policy)0>]	16	static
new_allocator.h:86:7:__gnu_cxx::new_allocator<_Tp>::~new_allocator() [with _Tp = std::_Sp_counted_deleter<tama::Heal*, std::__shared_ptr<tama::Heal, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Heal> >, std::allocator<tama::Heal>, (__gnu_cxx::_Lock_policy)0>]	16	static
alloc_traits.h:435:7:static _Tp* std::allocator_traits<std::allocator<_Tp1> >::allocate(std::allocator_traits<std::allocator<_Tp1> >::allocator_type&, std::allocator_traits<std::allocator<_Tp1> >::size_type) [with _Tp = std::_Sp_counted_deleter<tama::Heal*, std::__shared_ptr<tama::Heal, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Heal> >, std::allocator<tama::Heal>, (__gnu_cxx::_Lock_policy)0>]	16	static
allocated_ptr.h:52:7:std::__allocated_ptr<_Alloc>::__allocated_ptr(_Alloc&, std::__allocated_ptr<_Alloc>::pointer) [with _Alloc = std::allocator<std::_Sp_counted_deleter<tama::Heal*, std::__shared_ptr<tama::Heal, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Heal> >, std::allocator<tama::Heal>, (__gnu_cxx::_Lock_policy)0> >]	24	static
alloc_traits.h:461:7:static void std::allocator_traits<std::allocator<_Tp1> >::deallocate(std::allocator_traits<std::allocator<_Tp1> >::allocator_type&, std::allocator_traits<std::allocator<_Tp1> >::pointer, std::allocator_traits<std::allocator<_Tp1> >::size_type) [with _Tp = std::_Sp_counted_deleter<tama::Heal*, std::__shared_ptr<tama::Heal, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Heal> >, std::allocator<tama::Heal>, (__gnu_cxx::_Lock_policy)0>]	24	static
allocated_ptr.h:88:26:static std::__allocated_ptr<_Alloc>::value_type* std::__allocated_ptr<_Alloc>::_S_raw_ptr(std::__allocated_ptr<_Alloc>::value_type*) [with _Alloc = std::allocator<std::_Sp_counted_deleter<tama::Heal*, std::__shared_ptr<tama::Heal, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Heal> >, std::allocator<tama::Heal>, (__gnu_cxx::_Lock_policy)0> >]	16	static
shared_ptr_base.h:445:2:std::_Sp_counted_deleter<_Ptr, _Deleter, _Alloc, _Lp>::_Impl::_Impl(_Ptr, _Deleter, const _Alloc&) [with _Ptr = tama::Heal*; _Deleter = std::__shared_ptr<tama::Heal, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Heal> >; _Alloc = std::allocator<tama::Heal>; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	32	static
alloc_traits.h:486:2:static void std::allocator_traits<std::allocator<_Tp1> >::destroy(std::allocator_traits<std::allocator<_Tp1> >::allocator_type&, _Up*) [with _Up = tama::Heal; _Tp = tama::Heal]	16	static
new_allocator.h:99:7:_Tp* __gnu_cxx::new_allocator<_Tp>::allocate(__gnu_cxx::new_allocator<_Tp>::size_type, const void*) [with _Tp = tama::Lamp]	24	static
move.h:47:5:constexpr _Tp* std::__addressof(_Tp&) [with _Tp = std::allocator<tama::Lamp>]	16	static
new_allocator.h:116:7:void __gnu_cxx::new_allocator<_Tp>::deallocate(__gnu_cxx::new_allocator<_Tp>::pointer, __gnu_cxx::new_allocator<_Tp>::size_type) [with _Tp = tama::Lamp]	24	static
new_allocator.h:79:7:__gnu_cxx::new_allocator<_Tp>::new_allocator() [with _Tp = std::_Sp_counted_deleter<tama::Lamp*, std::__shared_ptr<tama::Lamp, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Lamp> >, std::allocator<tama::Lamp>, (__gnu_cxx::_Lock_policy)0>]	16	static
new_allocator.h:86:7:__gnu_cxx::new_allocator<_Tp>::~new_allocator() [with _Tp = std::_Sp_counted_deleter<tama::Lamp*, std::__shared_ptr<tama::Lamp, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Lamp> >, std::allocator<tama::Lamp>, (__gnu_cxx::_Lock_policy)0>]	16	static
alloc_traits.h:435:7:static _Tp* std::allocator_traits<std::allocator<_Tp1> >::allocate(std::allocator_traits<std::allocator<_Tp1> >::allocator_type&, std::allocator_traits<std::allocator<_Tp1> >::size_type) [with _Tp = std::_Sp_counted_deleter<tama::Lamp*, std::__shared_ptr<tama::Lamp, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Lamp> >, std::allocator<tama::Lamp>, (__gnu_cxx::_Lock_policy)0>]	16	static
allocated_ptr.h:52:7:std::__allocated_ptr<_Alloc>::__allocated_ptr(_Alloc&, std::__allocated_ptr<_Alloc>::pointer) [with _Alloc = std::allocator<std::_Sp_counted_deleter<tama::Lamp*, std::__shared_ptr<tama::Lamp, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Lamp> >, std::allocator<tama::Lamp>, (__gnu_cxx::_Lock_policy)0> >]	24	static
alloc_traits.h:461:7:static void std::allocator_traits<std::allocator<_Tp1> >::deallocate(std::allocator_traits<std::allocator<_Tp1> >::allocator_type&, std::allocator_traits<std::allocator<_Tp1> >::pointer, std::allocator_traits<std::allocator<_Tp1> >::size_type) [with _Tp = std::_Sp_counted_deleter<tama::Lamp*, std::__shared_ptr<tama::Lamp, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Lamp> >, std::allocator<tama::Lamp>, (__gnu_cxx::_Lock_policy)0>]	24	static
allocated_ptr.h:88:26:static std::__allocated_ptr<_Alloc>::value_type* std::__allocated_ptr<_Alloc>::_S_raw_ptr(std::__allocated_ptr<_Alloc>::value_type*) [with _Alloc = std::allocator<std::_Sp_counted_deleter<tama::Lamp*, std::__shared_ptr<tama::Lamp, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Lamp> >, std::allocator<tama::Lamp>, (__gnu_cxx::_Lock_policy)0> >]	16	static
shared_ptr_base.h:445:2:std::_Sp_counted_deleter<_Ptr, _Deleter, _Alloc, _Lp>::_Impl::_Impl(_Ptr, _Deleter, const _Alloc&) [with _Ptr = tama::Lamp*; _Deleter = std::__shared_ptr<tama::Lamp, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Lamp> >; _Alloc = std::allocator<tama::Lamp>; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	32	static
alloc_traits.h:486:2:static void std::allocator_traits<std::allocator<_Tp1> >::destroy(std::allocator_traits<std::allocator<_Tp1> >::allocator_type&, _Up*) [with _Up = tama::Lamp; _Tp = tama::Lamp]	16	static
new_allocator.h:99:7:_Tp* __gnu_cxx::new_allocator<_Tp>::allocate(__gnu_cxx::new_allocator<_Tp>::size_type, const void*) [with _Tp = tama::Sprite]	24	static
move.h:47:5:constexpr _Tp* std::__addressof(_Tp&) [with _Tp = std::allocator<tama::Sprite>]	16	static
new_allocator.h:116:7:void __gnu_cxx::new_allocator<_Tp>::deallocate(__gnu_cxx::new_allocator<_Tp>::pointer, __gnu_cxx::new_allocator<_Tp>::size_type) [with _Tp = tama::Sprite]	24	static
new_allocator.h:79:7:__gnu_cxx::new_allocator<_Tp>::new_allocator() [with _Tp = std::_Sp_counted_deleter<tama::Sprite*, std::__shared_ptr<tama::Sprite, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Sprite> >, std::allocator<tama::Sprite>, (__gnu_cxx::_Lock_policy)0>]	16	static
new_allocator.h:86:7:__gnu_cxx::new_allocator<_Tp>::~new_allocator() [with _Tp = std::_Sp_counted_deleter<tama::Sprite*, std::__shared_ptr<tama::Sprite, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Sprite> >, std::allocator<tama::Sprite>, (__gnu_cxx::_Lock_policy)0>]	16	static
alloc_traits.h:435:7:static _Tp* std::allocator_traits<std::allocator<_Tp1> >::allocate(std::allocator_traits<std::allocator<_Tp1> >::allocator_type&, std::allocator_traits<std::allocator<_Tp1> >::size_type) [with _Tp = std::_Sp_counted_deleter<tama::Sprite*, std::__shared_ptr<tama::Sprite, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Sprite> >, std::allocator<tama::Sprite>, (__gnu_cxx::_Lock_policy)0>]	16	static
allocated_ptr.h:52:7:std::__allocated_ptr<_Alloc>::__allocated_ptr(_Alloc&, std::__allocated_ptr<_Alloc>::pointer) [with _Alloc = std::allocator<std::_Sp_counted_deleter<tama::Sprite*, std::__shared_ptr<tama::Sprite, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Sprite> >, std::allocator<tama::Sprite>, (__gnu_cxx::_Lock_policy)0> >]	24	static
alloc_traits.h:461:7:static void std::allocator_traits<std::allocator<_Tp1> >::deallocate(std::allocator_traits<std::allocator<_Tp1> >::allocator_type&, std::allocator_traits<std::allocator<_Tp1> >::pointer, std::allocator_traits<std::allocator<_Tp1> >::size_type) [with _Tp = std::_Sp_counted_deleter<tama::Sprite*, std::__shared_ptr<tama::Sprite, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Sprite> >, std::allocator<tama::Sprite>, (__gnu_cxx::_Lock_policy)0>]	24	static
allocated_ptr.h:88:26:static std::__allocated_ptr<_Alloc>::value_type* std::__allocated_ptr<_Alloc>::_S_raw_ptr(std::__allocated_ptr<_Alloc>::value_type*) [with _Alloc = std::allocator<std::_Sp_counted_deleter<tama::Sprite*, std::__shared_ptr<tama::Sprite, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Sprite> >, std::allocator<tama::Sprite>, (__gnu_cxx::_Lock_policy)0> >]	16	static
shared_ptr_base.h:445:2:std::_Sp_counted_deleter<_Ptr, _Deleter, _Alloc, _Lp>::_Impl::_Impl(_Ptr, _Deleter, const _Alloc&) [with _Ptr = tama::Sprite*; _Deleter = std::__shared_ptr<tama::Sprite, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Sprite> >; _Alloc = std::allocator<tama::Sprite>; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	32	static
alloc_traits.h:486:2:static void std::allocator_traits<std::allocator<_Tp1> >::destroy(std::allocator_traits<std::allocator<_Tp1> >::allocator_type&, _Up*) [with _Up = tama::Sprite; _Tp = tama::Sprite]	16	static
stl_iterator.h:1136:5:bool std::operator!=(const std::move_iterator<_IteratorL>&, const std::move_iterator<_IteratorL>&) [with _Iterator = std::shared_ptr<tama::Sprite>*]	16	static
stl_iterator.h:1057:7:std::move_iterator<_Iterator>& std::move_iterator<_Iterator>::operator++() [with _Iterator = std::shared_ptr<tama::Sprite>*]	16	static
stl_iterator.h:1049:7:std::move_iterator<_Iterator>::reference std::move_iterator<_Iterator>::operator*() const [with _Iterator = std::shared_ptr<tama::Sprite>*]	16	static
move.h:73:5:constexpr _Tp&& std::forward(typename std::remove_reference<_From>::type&) [with _Tp = std::shared_ptr<tama::Sprite>]	16	static
stl_construct.h:74:5:) [with _T1 = std::shared_ptr<tama::Sprite>; _Args = {std::shared_ptr<tama::Sprite>}]	24	static
shared_ptr.h:317:7:std::shared_ptr<_Tp>& std::shared_ptr<_Tp>::operator=(std::shared_ptr<_Tp>&&) [with _Tp = tama::Sprite]	24	static
new_allocator.h:129:7:__gnu_cxx::new_allocator<_Tp>::size_type __gnu_cxx::new_allocator<_Tp>::max_size() const [with _Tp = tama::TimeView]	16	static
new_allocator.h:99:7:_Tp* __gnu_cxx::new_allocator<_Tp>::allocate(__gnu_cxx::new_allocator<_Tp>::size_type, const void*) [with _Tp = std::_Sp_counted_deleter<tama::TimeView*, std::__shared_ptr<tama::TimeView, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::TimeView> >, std::allocator<tama::TimeView>, (__gnu_cxx::_Lock_policy)0>]	24	static
move.h:47:5:constexpr _Tp* std::__addressof(_Tp&) [with _Tp = std::allocator<std::_Sp_counted_deleter<tama::TimeView*, std::__shared_ptr<tama::TimeView, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::TimeView> >, std::allocator<tama::TimeView>, (__gnu_cxx::_Lock_policy)0> >]	16	static
new_allocator.h:116:7:void __gnu_cxx::new_allocator<_Tp>::deallocate(__gnu_cxx::new_allocator<_Tp>::pointer, __gnu_cxx::new_allocator<_Tp>::size_type) [with _Tp = std::_Sp_counted_deleter<tama::TimeView*, std::__shared_ptr<tama::TimeView, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::TimeView> >, std::allocator<tama::TimeView>, (__gnu_cxx::_Lock_policy)0>]	24	static
shared_ptr_base.h:425:16:std::_Sp_ebo_helper<_Nm, _Tp, false>::_Sp_ebo_helper(_Tp&&) [with int _Nm = 0; _Tp = std::__shared_ptr<tama::TimeView, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::TimeView> >]	24	static
shared_ptr_base.h:413:16:std::_Sp_ebo_helper<_Nm, _Tp, true>::_Sp_ebo_helper(const _Tp&) [with int _Nm = 1; _Tp = std::allocator<tama::TimeView>]	16	static
TimeView.h:14:11:tama::TimeView::~TimeView()	16	static
new_allocator.h:140:2:void __gnu_cxx::new_allocator<_Tp>::destroy(_Up*) [with _Up = tama::TimeView; _Tp = tama::TimeView]	16	static
new_allocator.h:129:7:__gnu_cxx::new_allocator<_Tp>::size_type __gnu_cxx::new_allocator<_Tp>::max_size() const [with _Tp = tama::PageOne]	16	static
new_allocator.h:99:7:_Tp* __gnu_cxx::new_allocator<_Tp>::allocate(__gnu_cxx::new_allocator<_Tp>::size_type, const void*) [with _Tp = std::_Sp_counted_deleter<tama::PageOne*, std::__shared_ptr<tama::PageOne, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::PageOne> >, std::allocator<tama::PageOne>, (__gnu_cxx::_Lock_policy)0>]	24	static
move.h:47:5:constexpr _Tp* std::__addressof(_Tp&) [with _Tp = std::allocator<std::_Sp_counted_deleter<tama::PageOne*, std::__shared_ptr<tama::PageOne, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::PageOne> >, std::allocator<tama::PageOne>, (__gnu_cxx::_Lock_policy)0> >]	16	static
new_allocator.h:116:7:void __gnu_cxx::new_allocator<_Tp>::deallocate(__gnu_cxx::new_allocator<_Tp>::pointer, __gnu_cxx::new_allocator<_Tp>::size_type) [with _Tp = std::_Sp_counted_deleter<tama::PageOne*, std::__shared_ptr<tama::PageOne, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::PageOne> >, std::allocator<tama::PageOne>, (__gnu_cxx::_Lock_policy)0>]	24	static
shared_ptr_base.h:425:16:std::_Sp_ebo_helper<_Nm, _Tp, false>::_Sp_ebo_helper(_Tp&&) [with int _Nm = 0; _Tp = std::__shared_ptr<tama::PageOne, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::PageOne> >]	24	static
shared_ptr_base.h:413:16:std::_Sp_ebo_helper<_Nm, _Tp, true>::_Sp_ebo_helper(const _Tp&) [with int _Nm = 1; _Tp = std::allocator<tama::PageOne>]	16	static
PageOne.h:14:11:tama::PageOne::~PageOne()	16	static
new_allocator.h:140:2:void __gnu_cxx::new_allocator<_Tp>::destroy(_Up*) [with _Up = tama::PageOne; _Tp = tama::PageOne]	16	static
new_allocator.h:129:7:__gnu_cxx::new_allocator<_Tp>::size_type __gnu_cxx::new_allocator<_Tp>::max_size() const [with _Tp = tama::Eat]	16	static
new_allocator.h:99:7:_Tp* __gnu_cxx::new_allocator<_Tp>::allocate(__gnu_cxx::new_allocator<_Tp>::size_type, const void*) [with _Tp = std::_Sp_counted_deleter<tama::Eat*, std::__shared_ptr<tama::Eat, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Eat> >, std::allocator<tama::Eat>, (__gnu_cxx::_Lock_policy)0>]	24	static
move.h:47:5:constexpr _Tp* std::__addressof(_Tp&) [with _Tp = std::allocator<std::_Sp_counted_deleter<tama::Eat*, std::__shared_ptr<tama::Eat, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Eat> >, std::allocator<tama::Eat>, (__gnu_cxx::_Lock_policy)0> >]	16	static
new_allocator.h:116:7:void __gnu_cxx::new_allocator<_Tp>::deallocate(__gnu_cxx::new_allocator<_Tp>::pointer, __gnu_cxx::new_allocator<_Tp>::size_type) [with _Tp = std::_Sp_counted_deleter<tama::Eat*, std::__shared_ptr<tama::Eat, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Eat> >, std::allocator<tama::Eat>, (__gnu_cxx::_Lock_policy)0>]	24	static
shared_ptr_base.h:425:16:std::_Sp_ebo_helper<_Nm, _Tp, false>::_Sp_ebo_helper(_Tp&&) [with int _Nm = 0; _Tp = std::__shared_ptr<tama::Eat, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Eat> >]	24	static
shared_ptr_base.h:413:16:std::_Sp_ebo_helper<_Nm, _Tp, true>::_Sp_ebo_helper(const _Tp&) [with int _Nm = 1; _Tp = std::allocator<tama::Eat>]	16	static
Menu.h:16:11:tama::Menu::~Menu()	16	static
Eat.h:13:11:tama::Eat::~Eat()	16	static
new_allocator.h:140:2:void __gnu_cxx::new_allocator<_Tp>::destroy(_Up*) [with _Up = tama::Eat; _Tp = tama::Eat]	16	static
new_allocator.h:129:7:__gnu_cxx::new_allocator<_Tp>::size_type __gnu_cxx::new_allocator<_Tp>::max_size() const [with _Tp = tama::Wash]	16	static
new_allocator.h:99:7:_Tp* __gnu_cxx::new_allocator<_Tp>::allocate(__gnu_cxx::new_allocator<_Tp>::size_type, const void*) [with _Tp = std::_Sp_counted_deleter<tama::Wash*, std::__shared_ptr<tama::Wash, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Wash> >, std::allocator<tama::Wash>, (__gnu_cxx::_Lock_policy)0>]	24	static
move.h:47:5:constexpr _Tp* std::__addressof(_Tp&) [with _Tp = std::allocator<std::_Sp_counted_deleter<tama::Wash*, std::__shared_ptr<tama::Wash, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Wash> >, std::allocator<tama::Wash>, (__gnu_cxx::_Lock_policy)0> >]	16	static
new_allocator.h:116:7:void __gnu_cxx::new_allocator<_Tp>::deallocate(__gnu_cxx::new_allocator<_Tp>::pointer, __gnu_cxx::new_allocator<_Tp>::size_type) [with _Tp = std::_Sp_counted_deleter<tama::Wash*, std::__shared_ptr<tama::Wash, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Wash> >, std::allocator<tama::Wash>, (__gnu_cxx::_Lock_policy)0>]	24	static
shared_ptr_base.h:425:16:std::_Sp_ebo_helper<_Nm, _Tp, false>::_Sp_ebo_helper(_Tp&&) [with int _Nm = 0; _Tp = std::__shared_ptr<tama::Wash, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Wash> >]	24	static
shared_ptr_base.h:413:16:std::_Sp_ebo_helper<_Nm, _Tp, true>::_Sp_ebo_helper(const _Tp&) [with int _Nm = 1; _Tp = std::allocator<tama::Wash>]	16	static
Wash.h:17:11:tama::Wash::~Wash()	24	static
new_allocator.h:140:2:void __gnu_cxx::new_allocator<_Tp>::destroy(_Up*) [with _Up = tama::Wash; _Tp = tama::Wash]	16	static
new_allocator.h:129:7:__gnu_cxx::new_allocator<_Tp>::size_type __gnu_cxx::new_allocator<_Tp>::max_size() const [with _Tp = tama::PlayMenu]	16	static
new_allocator.h:99:7:_Tp* __gnu_cxx::new_allocator<_Tp>::allocate(__gnu_cxx::new_allocator<_Tp>::size_type, const void*) [with _Tp = std::_Sp_counted_deleter<tama::PlayMenu*, std::__shared_ptr<tama::PlayMenu, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::PlayMenu> >, std::allocator<tama::PlayMenu>, (__gnu_cxx::_Lock_policy)0>]	24	static
move.h:47:5:constexpr _Tp* std::__addressof(_Tp&) [with _Tp = std::allocator<std::_Sp_counted_deleter<tama::PlayMenu*, std::__shared_ptr<tama::PlayMenu, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::PlayMenu> >, std::allocator<tama::PlayMenu>, (__gnu_cxx::_Lock_policy)0> >]	16	static
new_allocator.h:116:7:void __gnu_cxx::new_allocator<_Tp>::deallocate(__gnu_cxx::new_allocator<_Tp>::pointer, __gnu_cxx::new_allocator<_Tp>::size_type) [with _Tp = std::_Sp_counted_deleter<tama::PlayMenu*, std::__shared_ptr<tama::PlayMenu, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::PlayMenu> >, std::allocator<tama::PlayMenu>, (__gnu_cxx::_Lock_policy)0>]	24	static
shared_ptr_base.h:425:16:std::_Sp_ebo_helper<_Nm, _Tp, false>::_Sp_ebo_helper(_Tp&&) [with int _Nm = 0; _Tp = std::__shared_ptr<tama::PlayMenu, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::PlayMenu> >]	24	static
shared_ptr_base.h:413:16:std::_Sp_ebo_helper<_Nm, _Tp, true>::_Sp_ebo_helper(const _Tp&) [with int _Nm = 1; _Tp = std::allocator<tama::PlayMenu>]	16	static
PlayMenu.h:14:11:tama::PlayMenu::~PlayMenu()	16	static
new_allocator.h:140:2:void __gnu_cxx::new_allocator<_Tp>::destroy(_Up*) [with _Up = tama::PlayMenu; _Tp = tama::PlayMenu]	16	static
new_allocator.h:129:7:__gnu_cxx::new_allocator<_Tp>::size_type __gnu_cxx::new_allocator<_Tp>::max_size() const [with _Tp = tama::Heal]	16	static
new_allocator.h:99:7:_Tp* __gnu_cxx::new_allocator<_Tp>::allocate(__gnu_cxx::new_allocator<_Tp>::size_type, const void*) [with _Tp = std::_Sp_counted_deleter<tama::Heal*, std::__shared_ptr<tama::Heal, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Heal> >, std::allocator<tama::Heal>, (__gnu_cxx::_Lock_policy)0>]	24	static
move.h:47:5:constexpr _Tp* std::__addressof(_Tp&) [with _Tp = std::allocator<std::_Sp_counted_deleter<tama::Heal*, std::__shared_ptr<tama::Heal, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Heal> >, std::allocator<tama::Heal>, (__gnu_cxx::_Lock_policy)0> >]	16	static
new_allocator.h:116:7:void __gnu_cxx::new_allocator<_Tp>::deallocate(__gnu_cxx::new_allocator<_Tp>::pointer, __gnu_cxx::new_allocator<_Tp>::size_type) [with _Tp = std::_Sp_counted_deleter<tama::Heal*, std::__shared_ptr<tama::Heal, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Heal> >, std::allocator<tama::Heal>, (__gnu_cxx::_Lock_policy)0>]	24	static
shared_ptr_base.h:425:16:std::_Sp_ebo_helper<_Nm, _Tp, false>::_Sp_ebo_helper(_Tp&&) [with int _Nm = 0; _Tp = std::__shared_ptr<tama::Heal, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Heal> >]	24	static
shared_ptr_base.h:413:16:std::_Sp_ebo_helper<_Nm, _Tp, true>::_Sp_ebo_helper(const _Tp&) [with int _Nm = 1; _Tp = std::allocator<tama::Heal>]	16	static
Heal.h:16:7:tama::Heal::~Heal()	16	static
new_allocator.h:140:2:void __gnu_cxx::new_allocator<_Tp>::destroy(_Up*) [with _Up = tama::Heal; _Tp = tama::Heal]	16	static
new_allocator.h:129:7:__gnu_cxx::new_allocator<_Tp>::size_type __gnu_cxx::new_allocator<_Tp>::max_size() const [with _Tp = tama::Lamp]	16	static
new_allocator.h:99:7:_Tp* __gnu_cxx::new_allocator<_Tp>::allocate(__gnu_cxx::new_allocator<_Tp>::size_type, const void*) [with _Tp = std::_Sp_counted_deleter<tama::Lamp*, std::__shared_ptr<tama::Lamp, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Lamp> >, std::allocator<tama::Lamp>, (__gnu_cxx::_Lock_policy)0>]	24	static
move.h:47:5:constexpr _Tp* std::__addressof(_Tp&) [with _Tp = std::allocator<std::_Sp_counted_deleter<tama::Lamp*, std::__shared_ptr<tama::Lamp, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Lamp> >, std::allocator<tama::Lamp>, (__gnu_cxx::_Lock_policy)0> >]	16	static
new_allocator.h:116:7:void __gnu_cxx::new_allocator<_Tp>::deallocate(__gnu_cxx::new_allocator<_Tp>::pointer, __gnu_cxx::new_allocator<_Tp>::size_type) [with _Tp = std::_Sp_counted_deleter<tama::Lamp*, std::__shared_ptr<tama::Lamp, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Lamp> >, std::allocator<tama::Lamp>, (__gnu_cxx::_Lock_policy)0>]	24	static
shared_ptr_base.h:425:16:std::_Sp_ebo_helper<_Nm, _Tp, false>::_Sp_ebo_helper(_Tp&&) [with int _Nm = 0; _Tp = std::__shared_ptr<tama::Lamp, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Lamp> >]	24	static
shared_ptr_base.h:413:16:std::_Sp_ebo_helper<_Nm, _Tp, true>::_Sp_ebo_helper(const _Tp&) [with int _Nm = 1; _Tp = std::allocator<tama::Lamp>]	16	static
Lamp.h:13:11:tama::Lamp::~Lamp()	16	static
new_allocator.h:140:2:void __gnu_cxx::new_allocator<_Tp>::destroy(_Up*) [with _Up = tama::Lamp; _Tp = tama::Lamp]	16	static
new_allocator.h:129:7:__gnu_cxx::new_allocator<_Tp>::size_type __gnu_cxx::new_allocator<_Tp>::max_size() const [with _Tp = tama::Sprite]	16	static
new_allocator.h:99:7:_Tp* __gnu_cxx::new_allocator<_Tp>::allocate(__gnu_cxx::new_allocator<_Tp>::size_type, const void*) [with _Tp = std::_Sp_counted_deleter<tama::Sprite*, std::__shared_ptr<tama::Sprite, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Sprite> >, std::allocator<tama::Sprite>, (__gnu_cxx::_Lock_policy)0>]	24	static
move.h:47:5:constexpr _Tp* std::__addressof(_Tp&) [with _Tp = std::allocator<std::_Sp_counted_deleter<tama::Sprite*, std::__shared_ptr<tama::Sprite, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Sprite> >, std::allocator<tama::Sprite>, (__gnu_cxx::_Lock_policy)0> >]	16	static
new_allocator.h:116:7:void __gnu_cxx::new_allocator<_Tp>::deallocate(__gnu_cxx::new_allocator<_Tp>::pointer, __gnu_cxx::new_allocator<_Tp>::size_type) [with _Tp = std::_Sp_counted_deleter<tama::Sprite*, std::__shared_ptr<tama::Sprite, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Sprite> >, std::allocator<tama::Sprite>, (__gnu_cxx::_Lock_policy)0>]	24	static
shared_ptr_base.h:425:16:std::_Sp_ebo_helper<_Nm, _Tp, false>::_Sp_ebo_helper(_Tp&&) [with int _Nm = 0; _Tp = std::__shared_ptr<tama::Sprite, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Sprite> >]	24	static
shared_ptr_base.h:413:16:std::_Sp_ebo_helper<_Nm, _Tp, true>::_Sp_ebo_helper(const _Tp&) [with int _Nm = 1; _Tp = std::allocator<tama::Sprite>]	16	static
new_allocator.h:140:2:void __gnu_cxx::new_allocator<_Tp>::destroy(_Up*) [with _Up = tama::Sprite; _Tp = tama::Sprite]	16	static
stl_iterator.h:1124:5:bool std::operator==(const std::move_iterator<_IteratorL>&, const std::move_iterator<_IteratorL>&) [with _Iterator = std::shared_ptr<tama::Sprite>*]	24	static
move.h:98:5:constexpr typename std::remove_reference< <template-parameter-1-1> >::type&& std::move(_Tp&&) [with _Tp = std::__shared_ptr<tama::Sprite, (__gnu_cxx::_Lock_policy)0>&]	16	static
shared_ptr_base.h:1211:7:std::__shared_ptr<_Tp, _Lp>& std::__shared_ptr<_Tp, _Lp>::operator=(std::__shared_ptr<_Tp, _Lp>&&) [with _Tp = tama::Sprite; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	24	static
new_allocator.h:129:7:__gnu_cxx::new_allocator<_Tp>::size_type __gnu_cxx::new_allocator<_Tp>::max_size() const [with _Tp = std::_Sp_counted_deleter<tama::TimeView*, std::__shared_ptr<tama::TimeView, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::TimeView> >, std::allocator<tama::TimeView>, (__gnu_cxx::_Lock_policy)0>]	16	static
new_allocator.h:129:7:__gnu_cxx::new_allocator<_Tp>::size_type __gnu_cxx::new_allocator<_Tp>::max_size() const [with _Tp = std::_Sp_counted_deleter<tama::PageOne*, std::__shared_ptr<tama::PageOne, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::PageOne> >, std::allocator<tama::PageOne>, (__gnu_cxx::_Lock_policy)0>]	16	static
new_allocator.h:129:7:__gnu_cxx::new_allocator<_Tp>::size_type __gnu_cxx::new_allocator<_Tp>::max_size() const [with _Tp = std::_Sp_counted_deleter<tama::Eat*, std::__shared_ptr<tama::Eat, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Eat> >, std::allocator<tama::Eat>, (__gnu_cxx::_Lock_policy)0>]	16	static
stl_vector.h:433:7:std::vector<_Tp, _Alloc>::~vector() [with _Tp = tama::Text; _Alloc = std::allocator<tama::Text>]	24	static
stl_vector.h:433:7:std::vector<_Tp, _Alloc>::~vector() [with _Tp = std::shared_ptr<tama::Stage>; _Alloc = std::allocator<std::shared_ptr<tama::Stage> >]	24	static
stl_vector.h:433:7:std::vector<_Tp, _Alloc>::~vector() [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]	24	static
new_allocator.h:129:7:__gnu_cxx::new_allocator<_Tp>::size_type __gnu_cxx::new_allocator<_Tp>::max_size() const [with _Tp = std::_Sp_counted_deleter<tama::Wash*, std::__shared_ptr<tama::Wash, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Wash> >, std::allocator<tama::Wash>, (__gnu_cxx::_Lock_policy)0>]	16	static
new_allocator.h:129:7:__gnu_cxx::new_allocator<_Tp>::size_type __gnu_cxx::new_allocator<_Tp>::max_size() const [with _Tp = std::_Sp_counted_deleter<tama::PlayMenu*, std::__shared_ptr<tama::PlayMenu, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::PlayMenu> >, std::allocator<tama::PlayMenu>, (__gnu_cxx::_Lock_policy)0>]	16	static
new_allocator.h:129:7:__gnu_cxx::new_allocator<_Tp>::size_type __gnu_cxx::new_allocator<_Tp>::max_size() const [with _Tp = std::_Sp_counted_deleter<tama::Heal*, std::__shared_ptr<tama::Heal, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Heal> >, std::allocator<tama::Heal>, (__gnu_cxx::_Lock_policy)0>]	16	static
new_allocator.h:129:7:__gnu_cxx::new_allocator<_Tp>::size_type __gnu_cxx::new_allocator<_Tp>::max_size() const [with _Tp = std::_Sp_counted_deleter<tama::Lamp*, std::__shared_ptr<tama::Lamp, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Lamp> >, std::allocator<tama::Lamp>, (__gnu_cxx::_Lock_policy)0>]	16	static
new_allocator.h:129:7:__gnu_cxx::new_allocator<_Tp>::size_type __gnu_cxx::new_allocator<_Tp>::max_size() const [with _Tp = std::_Sp_counted_deleter<tama::Sprite*, std::__shared_ptr<tama::Sprite, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Sprite> >, std::allocator<tama::Sprite>, (__gnu_cxx::_Lock_policy)0>]	16	static
stl_iterator.h:1045:7:std::move_iterator<_Iterator>::iterator_type std::move_iterator<_Iterator>::base() const [with _Iterator = std::shared_ptr<tama::Sprite>*]	16	static
shared_ptr_base.h:1272:7:void std::__shared_ptr<_Tp, _Lp>::swap(std::__shared_ptr<_Tp, _Lp>&) [with _Tp = tama::Sprite; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
stl_vector.h:81:14:std::_Vector_base<tama::Text, std::allocator<tama::Text> >::_Vector_impl::~_Vector_impl()	16	static
stl_vector.h:161:7:std::_Vector_base<_Tp, _Alloc>::~_Vector_base() [with _Tp = tama::Text; _Alloc = std::allocator<tama::Text>]	16	static
stl_vector.h:115:7:std::_Vector_base<_Tp, _Alloc>::_Tp_alloc_type& std::_Vector_base<_Tp, _Alloc>::_M_get_Tp_allocator() [with _Tp = tama::Text; _Alloc = std::allocator<tama::Text>]	16	static
stl_construct.h:203:5:void std::_Destroy(_ForwardIterator, _ForwardIterator, std::allocator<_T2>&) [with _ForwardIterator = tama::Text*; _Tp = tama::Text]	24	static
stl_vector.h:81:14:std::_Vector_base<std::shared_ptr<tama::Stage>, std::allocator<std::shared_ptr<tama::Stage> > >::_Vector_impl::~_Vector_impl()	16	static
stl_vector.h:161:7:std::_Vector_base<_Tp, _Alloc>::~_Vector_base() [with _Tp = std::shared_ptr<tama::Stage>; _Alloc = std::allocator<std::shared_ptr<tama::Stage> >]	16	static
stl_vector.h:115:7:std::_Vector_base<_Tp, _Alloc>::_Tp_alloc_type& std::_Vector_base<_Tp, _Alloc>::_M_get_Tp_allocator() [with _Tp = std::shared_ptr<tama::Stage>; _Alloc = std::allocator<std::shared_ptr<tama::Stage> >]	16	static
stl_construct.h:203:5:void std::_Destroy(_ForwardIterator, _ForwardIterator, std::allocator<_T2>&) [with _ForwardIterator = std::shared_ptr<tama::Stage>*; _Tp = std::shared_ptr<tama::Stage>]	24	static
stl_vector.h:81:14:std::_Vector_base<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >::_Vector_impl::~_Vector_impl()	16	static
stl_vector.h:161:7:std::_Vector_base<_Tp, _Alloc>::~_Vector_base() [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]	16	static
stl_vector.h:115:7:std::_Vector_base<_Tp, _Alloc>::_Tp_alloc_type& std::_Vector_base<_Tp, _Alloc>::_M_get_Tp_allocator() [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]	16	static
stl_construct.h:203:5:void std::_Destroy(_ForwardIterator, _ForwardIterator, std::allocator<_T2>&) [with _ForwardIterator = std::__cxx11::basic_string<char>*; _Tp = std::__cxx11::basic_string<char>]	24	static
move.h:98:5:constexpr typename std::remove_reference< <template-parameter-1-1> >::type&& std::move(_Tp&&) [with _Tp = tama::Sprite*&]	16	static
move.h:187:5:typename std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<_Tp> >, std::is_move_constructible<_Tp>, std::is_move_assignable<_Tp> >::value>::type std::swap(_Tp&, _Tp&) [with _Tp = tama::Sprite*]	24	static
allocator.h:139:7:std::allocator< <template-parameter-1-1> >::~allocator() [with _Tp = tama::Text]	16	static
stl_vector.h:176:7:void std::_Vector_base<_Tp, _Alloc>::_M_deallocate(std::_Vector_base<_Tp, _Alloc>::pointer, std::size_t) [with _Tp = tama::Text; _Alloc = std::allocator<tama::Text>]	24	static
stl_construct.h:127:5:void std::_Destroy(_ForwardIterator, _ForwardIterator) [with _ForwardIterator = tama::Text*]	16	static
allocator.h:139:7:std::allocator< <template-parameter-1-1> >::~allocator() [with _Tp = std::shared_ptr<tama::Stage>]	16	static
stl_vector.h:176:7:void std::_Vector_base<_Tp, _Alloc>::_M_deallocate(std::_Vector_base<_Tp, _Alloc>::pointer, std::size_t) [with _Tp = std::shared_ptr<tama::Stage>; _Alloc = std::allocator<std::shared_ptr<tama::Stage> >]	24	static
stl_construct.h:127:5:void std::_Destroy(_ForwardIterator, _ForwardIterator) [with _ForwardIterator = std::shared_ptr<tama::Stage>*]	16	static
allocator.h:139:7:std::allocator< <template-parameter-1-1> >::~allocator() [with _Tp = std::__cxx11::basic_string<char>]	16	static
stl_vector.h:176:7:void std::_Vector_base<_Tp, _Alloc>::_M_deallocate(std::_Vector_base<_Tp, _Alloc>::pointer, std::size_t) [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]	24	static
stl_construct.h:127:5:void std::_Destroy(_ForwardIterator, _ForwardIterator) [with _ForwardIterator = std::__cxx11::basic_string<char>*]	16	static
new_allocator.h:86:7:__gnu_cxx::new_allocator<_Tp>::~new_allocator() [with _Tp = tama::Text]	16	static
alloc_traits.h:461:7:static void std::allocator_traits<std::allocator<_Tp1> >::deallocate(std::allocator_traits<std::allocator<_Tp1> >::allocator_type&, std::allocator_traits<std::allocator<_Tp1> >::pointer, std::allocator_traits<std::allocator<_Tp1> >::size_type) [with _Tp = tama::Text]	24	static
move.h:47:5:constexpr _Tp* std::__addressof(_Tp&) [with _Tp = tama::Text]	16	static
stl_construct.h:105:9:static void std::_Destroy_aux<<anonymous> >::__destroy(_ForwardIterator, _ForwardIterator) [with _ForwardIterator = tama::Text*; bool <anonymous> = false]	16	static
new_allocator.h:86:7:__gnu_cxx::new_allocator<_Tp>::~new_allocator() [with _Tp = std::shared_ptr<tama::Stage>]	16	static
alloc_traits.h:461:7:static void std::allocator_traits<std::allocator<_Tp1> >::deallocate(std::allocator_traits<std::allocator<_Tp1> >::allocator_type&, std::allocator_traits<std::allocator<_Tp1> >::pointer, std::allocator_traits<std::allocator<_Tp1> >::size_type) [with _Tp = std::shared_ptr<tama::Stage>]	24	static
move.h:47:5:constexpr _Tp* std::__addressof(_Tp&) [with _Tp = std::shared_ptr<tama::Stage>]	16	static
stl_construct.h:105:9:static void std::_Destroy_aux<<anonymous> >::__destroy(_ForwardIterator, _ForwardIterator) [with _ForwardIterator = std::shared_ptr<tama::Stage>*; bool <anonymous> = false]	16	static
new_allocator.h:86:7:__gnu_cxx::new_allocator<_Tp>::~new_allocator() [with _Tp = std::__cxx11::basic_string<char>]	16	static
alloc_traits.h:461:7:static void std::allocator_traits<std::allocator<_Tp1> >::deallocate(std::allocator_traits<std::allocator<_Tp1> >::allocator_type&, std::allocator_traits<std::allocator<_Tp1> >::pointer, std::allocator_traits<std::allocator<_Tp1> >::size_type) [with _Tp = std::__cxx11::basic_string<char>]	24	static
move.h:47:5:constexpr _Tp* std::__addressof(_Tp&) [with _Tp = std::__cxx11::basic_string<char>]	16	static
stl_construct.h:105:9:static void std::_Destroy_aux<<anonymous> >::__destroy(_ForwardIterator, _ForwardIterator) [with _ForwardIterator = std::__cxx11::basic_string<char>*; bool <anonymous> = false]	16	static
new_allocator.h:116:7:void __gnu_cxx::new_allocator<_Tp>::deallocate(__gnu_cxx::new_allocator<_Tp>::pointer, __gnu_cxx::new_allocator<_Tp>::size_type) [with _Tp = tama::Text]	24	static
stl_construct.h:97:5:void std::_Destroy(_Tp*) [with _Tp = tama::Text]	16	static
new_allocator.h:116:7:void __gnu_cxx::new_allocator<_Tp>::deallocate(__gnu_cxx::new_allocator<_Tp>::pointer, __gnu_cxx::new_allocator<_Tp>::size_type) [with _Tp = std::shared_ptr<tama::Stage>]	24	static
stl_construct.h:97:5:void std::_Destroy(_Tp*) [with _Tp = std::shared_ptr<tama::Stage>]	16	static
new_allocator.h:116:7:void __gnu_cxx::new_allocator<_Tp>::deallocate(__gnu_cxx::new_allocator<_Tp>::pointer, __gnu_cxx::new_allocator<_Tp>::size_type) [with _Tp = std::__cxx11::basic_string<char>]	24	static
stl_construct.h:97:5:void std::_Destroy(_Tp*) [with _Tp = std::__cxx11::basic_string<char>]	16	static
shared_ptr_base.h:367:11:std::_Sp_counted_ptr<tama::Sprite*, (__gnu_cxx::_Lock_policy)0>::~_Sp_counted_ptr()	16	static
shared_ptr_base.h:367:11:virtual std::_Sp_counted_ptr<tama::Sprite*, (__gnu_cxx::_Lock_policy)0>::~_Sp_counted_ptr()	16	static
shared_ptr_base.h:466:7:std::_Sp_counted_deleter<_Ptr, _Deleter, _Alloc, _Lp>::~_Sp_counted_deleter() [with _Ptr = tama::Sprite*; _Deleter = std::__shared_ptr<tama::Sprite, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Sprite> >; _Alloc = std::allocator<tama::Sprite>; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
shared_ptr_base.h:466:7:std::_Sp_counted_deleter<_Ptr, _Deleter, _Alloc, _Lp>::~_Sp_counted_deleter() [with _Ptr = tama::Sprite*; _Deleter = std::__shared_ptr<tama::Sprite, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Sprite> >; _Alloc = std::allocator<tama::Sprite>; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
shared_ptr_base.h:469:7:void std::_Sp_counted_deleter<_Ptr, _Deleter, _Alloc, _Lp>::_M_dispose() [with _Ptr = tama::Sprite*; _Deleter = std::__shared_ptr<tama::Sprite, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Sprite> >; _Alloc = std::allocator<tama::Sprite>; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
shared_ptr_base.h:473:7:void std::_Sp_counted_deleter<_Ptr, _Deleter, _Alloc, _Lp>::_M_destroy() [with _Ptr = tama::Sprite*; _Deleter = std::__shared_ptr<tama::Sprite, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Sprite> >; _Alloc = std::allocator<tama::Sprite>; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	32	static
shared_ptr_base.h:481:7:void* std::_Sp_counted_deleter<_Ptr, _Deleter, _Alloc, _Lp>::_M_get_deleter(const std::type_info&) [with _Ptr = tama::Sprite*; _Deleter = std::__shared_ptr<tama::Sprite, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Sprite> >; _Alloc = std::allocator<tama::Sprite>; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
shared_ptr_base.h:466:7:std::_Sp_counted_deleter<_Ptr, _Deleter, _Alloc, _Lp>::~_Sp_counted_deleter() [with _Ptr = tama::Lamp*; _Deleter = std::__shared_ptr<tama::Lamp, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Lamp> >; _Alloc = std::allocator<tama::Lamp>; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
shared_ptr_base.h:466:7:std::_Sp_counted_deleter<_Ptr, _Deleter, _Alloc, _Lp>::~_Sp_counted_deleter() [with _Ptr = tama::Lamp*; _Deleter = std::__shared_ptr<tama::Lamp, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Lamp> >; _Alloc = std::allocator<tama::Lamp>; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
shared_ptr_base.h:469:7:void std::_Sp_counted_deleter<_Ptr, _Deleter, _Alloc, _Lp>::_M_dispose() [with _Ptr = tama::Lamp*; _Deleter = std::__shared_ptr<tama::Lamp, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Lamp> >; _Alloc = std::allocator<tama::Lamp>; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
shared_ptr_base.h:473:7:void std::_Sp_counted_deleter<_Ptr, _Deleter, _Alloc, _Lp>::_M_destroy() [with _Ptr = tama::Lamp*; _Deleter = std::__shared_ptr<tama::Lamp, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Lamp> >; _Alloc = std::allocator<tama::Lamp>; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	32	static
shared_ptr_base.h:481:7:void* std::_Sp_counted_deleter<_Ptr, _Deleter, _Alloc, _Lp>::_M_get_deleter(const std::type_info&) [with _Ptr = tama::Lamp*; _Deleter = std::__shared_ptr<tama::Lamp, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Lamp> >; _Alloc = std::allocator<tama::Lamp>; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
shared_ptr_base.h:466:7:std::_Sp_counted_deleter<_Ptr, _Deleter, _Alloc, _Lp>::~_Sp_counted_deleter() [with _Ptr = tama::Heal*; _Deleter = std::__shared_ptr<tama::Heal, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Heal> >; _Alloc = std::allocator<tama::Heal>; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
shared_ptr_base.h:466:7:std::_Sp_counted_deleter<_Ptr, _Deleter, _Alloc, _Lp>::~_Sp_counted_deleter() [with _Ptr = tama::Heal*; _Deleter = std::__shared_ptr<tama::Heal, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Heal> >; _Alloc = std::allocator<tama::Heal>; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
shared_ptr_base.h:469:7:void std::_Sp_counted_deleter<_Ptr, _Deleter, _Alloc, _Lp>::_M_dispose() [with _Ptr = tama::Heal*; _Deleter = std::__shared_ptr<tama::Heal, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Heal> >; _Alloc = std::allocator<tama::Heal>; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
shared_ptr_base.h:473:7:void std::_Sp_counted_deleter<_Ptr, _Deleter, _Alloc, _Lp>::_M_destroy() [with _Ptr = tama::Heal*; _Deleter = std::__shared_ptr<tama::Heal, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Heal> >; _Alloc = std::allocator<tama::Heal>; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	32	static
shared_ptr_base.h:481:7:void* std::_Sp_counted_deleter<_Ptr, _Deleter, _Alloc, _Lp>::_M_get_deleter(const std::type_info&) [with _Ptr = tama::Heal*; _Deleter = std::__shared_ptr<tama::Heal, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Heal> >; _Alloc = std::allocator<tama::Heal>; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
shared_ptr_base.h:466:7:std::_Sp_counted_deleter<_Ptr, _Deleter, _Alloc, _Lp>::~_Sp_counted_deleter() [with _Ptr = tama::PlayMenu*; _Deleter = std::__shared_ptr<tama::PlayMenu, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::PlayMenu> >; _Alloc = std::allocator<tama::PlayMenu>; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
shared_ptr_base.h:466:7:std::_Sp_counted_deleter<_Ptr, _Deleter, _Alloc, _Lp>::~_Sp_counted_deleter() [with _Ptr = tama::PlayMenu*; _Deleter = std::__shared_ptr<tama::PlayMenu, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::PlayMenu> >; _Alloc = std::allocator<tama::PlayMenu>; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
shared_ptr_base.h:469:7:void std::_Sp_counted_deleter<_Ptr, _Deleter, _Alloc, _Lp>::_M_dispose() [with _Ptr = tama::PlayMenu*; _Deleter = std::__shared_ptr<tama::PlayMenu, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::PlayMenu> >; _Alloc = std::allocator<tama::PlayMenu>; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
shared_ptr_base.h:473:7:void std::_Sp_counted_deleter<_Ptr, _Deleter, _Alloc, _Lp>::_M_destroy() [with _Ptr = tama::PlayMenu*; _Deleter = std::__shared_ptr<tama::PlayMenu, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::PlayMenu> >; _Alloc = std::allocator<tama::PlayMenu>; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	32	static
shared_ptr_base.h:481:7:void* std::_Sp_counted_deleter<_Ptr, _Deleter, _Alloc, _Lp>::_M_get_deleter(const std::type_info&) [with _Ptr = tama::PlayMenu*; _Deleter = std::__shared_ptr<tama::PlayMenu, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::PlayMenu> >; _Alloc = std::allocator<tama::PlayMenu>; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
shared_ptr_base.h:466:7:std::_Sp_counted_deleter<_Ptr, _Deleter, _Alloc, _Lp>::~_Sp_counted_deleter() [with _Ptr = tama::Wash*; _Deleter = std::__shared_ptr<tama::Wash, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Wash> >; _Alloc = std::allocator<tama::Wash>; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
shared_ptr_base.h:466:7:std::_Sp_counted_deleter<_Ptr, _Deleter, _Alloc, _Lp>::~_Sp_counted_deleter() [with _Ptr = tama::Wash*; _Deleter = std::__shared_ptr<tama::Wash, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Wash> >; _Alloc = std::allocator<tama::Wash>; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
shared_ptr_base.h:469:7:void std::_Sp_counted_deleter<_Ptr, _Deleter, _Alloc, _Lp>::_M_dispose() [with _Ptr = tama::Wash*; _Deleter = std::__shared_ptr<tama::Wash, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Wash> >; _Alloc = std::allocator<tama::Wash>; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
shared_ptr_base.h:473:7:void std::_Sp_counted_deleter<_Ptr, _Deleter, _Alloc, _Lp>::_M_destroy() [with _Ptr = tama::Wash*; _Deleter = std::__shared_ptr<tama::Wash, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Wash> >; _Alloc = std::allocator<tama::Wash>; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	32	static
shared_ptr_base.h:481:7:void* std::_Sp_counted_deleter<_Ptr, _Deleter, _Alloc, _Lp>::_M_get_deleter(const std::type_info&) [with _Ptr = tama::Wash*; _Deleter = std::__shared_ptr<tama::Wash, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Wash> >; _Alloc = std::allocator<tama::Wash>; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
shared_ptr_base.h:466:7:std::_Sp_counted_deleter<_Ptr, _Deleter, _Alloc, _Lp>::~_Sp_counted_deleter() [with _Ptr = tama::Eat*; _Deleter = std::__shared_ptr<tama::Eat, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Eat> >; _Alloc = std::allocator<tama::Eat>; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
shared_ptr_base.h:466:7:std::_Sp_counted_deleter<_Ptr, _Deleter, _Alloc, _Lp>::~_Sp_counted_deleter() [with _Ptr = tama::Eat*; _Deleter = std::__shared_ptr<tama::Eat, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Eat> >; _Alloc = std::allocator<tama::Eat>; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
shared_ptr_base.h:469:7:void std::_Sp_counted_deleter<_Ptr, _Deleter, _Alloc, _Lp>::_M_dispose() [with _Ptr = tama::Eat*; _Deleter = std::__shared_ptr<tama::Eat, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Eat> >; _Alloc = std::allocator<tama::Eat>; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
shared_ptr_base.h:473:7:void std::_Sp_counted_deleter<_Ptr, _Deleter, _Alloc, _Lp>::_M_destroy() [with _Ptr = tama::Eat*; _Deleter = std::__shared_ptr<tama::Eat, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Eat> >; _Alloc = std::allocator<tama::Eat>; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	32	static
shared_ptr_base.h:481:7:void* std::_Sp_counted_deleter<_Ptr, _Deleter, _Alloc, _Lp>::_M_get_deleter(const std::type_info&) [with _Ptr = tama::Eat*; _Deleter = std::__shared_ptr<tama::Eat, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Eat> >; _Alloc = std::allocator<tama::Eat>; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
shared_ptr_base.h:466:7:std::_Sp_counted_deleter<_Ptr, _Deleter, _Alloc, _Lp>::~_Sp_counted_deleter() [with _Ptr = tama::PageOne*; _Deleter = std::__shared_ptr<tama::PageOne, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::PageOne> >; _Alloc = std::allocator<tama::PageOne>; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
shared_ptr_base.h:466:7:std::_Sp_counted_deleter<_Ptr, _Deleter, _Alloc, _Lp>::~_Sp_counted_deleter() [with _Ptr = tama::PageOne*; _Deleter = std::__shared_ptr<tama::PageOne, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::PageOne> >; _Alloc = std::allocator<tama::PageOne>; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
shared_ptr_base.h:469:7:void std::_Sp_counted_deleter<_Ptr, _Deleter, _Alloc, _Lp>::_M_dispose() [with _Ptr = tama::PageOne*; _Deleter = std::__shared_ptr<tama::PageOne, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::PageOne> >; _Alloc = std::allocator<tama::PageOne>; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
shared_ptr_base.h:473:7:void std::_Sp_counted_deleter<_Ptr, _Deleter, _Alloc, _Lp>::_M_destroy() [with _Ptr = tama::PageOne*; _Deleter = std::__shared_ptr<tama::PageOne, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::PageOne> >; _Alloc = std::allocator<tama::PageOne>; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	32	static
shared_ptr_base.h:481:7:void* std::_Sp_counted_deleter<_Ptr, _Deleter, _Alloc, _Lp>::_M_get_deleter(const std::type_info&) [with _Ptr = tama::PageOne*; _Deleter = std::__shared_ptr<tama::PageOne, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::PageOne> >; _Alloc = std::allocator<tama::PageOne>; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
shared_ptr_base.h:466:7:std::_Sp_counted_deleter<_Ptr, _Deleter, _Alloc, _Lp>::~_Sp_counted_deleter() [with _Ptr = tama::TimeView*; _Deleter = std::__shared_ptr<tama::TimeView, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::TimeView> >; _Alloc = std::allocator<tama::TimeView>; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
shared_ptr_base.h:466:7:std::_Sp_counted_deleter<_Ptr, _Deleter, _Alloc, _Lp>::~_Sp_counted_deleter() [with _Ptr = tama::TimeView*; _Deleter = std::__shared_ptr<tama::TimeView, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::TimeView> >; _Alloc = std::allocator<tama::TimeView>; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
shared_ptr_base.h:469:7:void std::_Sp_counted_deleter<_Ptr, _Deleter, _Alloc, _Lp>::_M_dispose() [with _Ptr = tama::TimeView*; _Deleter = std::__shared_ptr<tama::TimeView, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::TimeView> >; _Alloc = std::allocator<tama::TimeView>; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
shared_ptr_base.h:473:7:void std::_Sp_counted_deleter<_Ptr, _Deleter, _Alloc, _Lp>::_M_destroy() [with _Ptr = tama::TimeView*; _Deleter = std::__shared_ptr<tama::TimeView, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::TimeView> >; _Alloc = std::allocator<tama::TimeView>; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	32	static
shared_ptr_base.h:481:7:void* std::_Sp_counted_deleter<_Ptr, _Deleter, _Alloc, _Lp>::_M_get_deleter(const std::type_info&) [with _Ptr = tama::TimeView*; _Deleter = std::__shared_ptr<tama::TimeView, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::TimeView> >; _Alloc = std::allocator<tama::TimeView>; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
shared_ptr_base.h:375:7:void std::_Sp_counted_ptr<_Ptr, _Lp>::_M_dispose() [with _Ptr = tama::Sprite*; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	24	static
shared_ptr_base.h:379:7:void std::_Sp_counted_ptr<_Ptr, _Lp>::_M_destroy() [with _Ptr = tama::Sprite*; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
shared_ptr_base.h:383:7:void* std::_Sp_counted_ptr<_Ptr, _Lp>::_M_get_deleter(const std::type_info&) [with _Ptr = tama::Sprite*; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
shared_ptr_base.h:449:12:_Deleter& std::_Sp_counted_deleter<_Ptr, _Deleter, _Alloc, _Lp>::_Impl::_M_del() [with _Ptr = tama::Sprite*; _Deleter = std::__shared_ptr<tama::Sprite, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Sprite> >; _Alloc = std::allocator<tama::Sprite>; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
shared_ptr_base.h:450:10:_Alloc& std::_Sp_counted_deleter<_Ptr, _Deleter, _Alloc, _Lp>::_Impl::_M_alloc() [with _Ptr = tama::Sprite*; _Deleter = std::__shared_ptr<tama::Sprite, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Sprite> >; _Alloc = std::allocator<tama::Sprite>; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
shared_ptr_base.h:449:12:_Deleter& std::_Sp_counted_deleter<_Ptr, _Deleter, _Alloc, _Lp>::_Impl::_M_del() [with _Ptr = tama::Lamp*; _Deleter = std::__shared_ptr<tama::Lamp, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Lamp> >; _Alloc = std::allocator<tama::Lamp>; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
shared_ptr_base.h:450:10:_Alloc& std::_Sp_counted_deleter<_Ptr, _Deleter, _Alloc, _Lp>::_Impl::_M_alloc() [with _Ptr = tama::Lamp*; _Deleter = std::__shared_ptr<tama::Lamp, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Lamp> >; _Alloc = std::allocator<tama::Lamp>; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
shared_ptr_base.h:449:12:_Deleter& std::_Sp_counted_deleter<_Ptr, _Deleter, _Alloc, _Lp>::_Impl::_M_del() [with _Ptr = tama::Heal*; _Deleter = std::__shared_ptr<tama::Heal, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Heal> >; _Alloc = std::allocator<tama::Heal>; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
shared_ptr_base.h:450:10:_Alloc& std::_Sp_counted_deleter<_Ptr, _Deleter, _Alloc, _Lp>::_Impl::_M_alloc() [with _Ptr = tama::Heal*; _Deleter = std::__shared_ptr<tama::Heal, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Heal> >; _Alloc = std::allocator<tama::Heal>; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
shared_ptr_base.h:449:12:_Deleter& std::_Sp_counted_deleter<_Ptr, _Deleter, _Alloc, _Lp>::_Impl::_M_del() [with _Ptr = tama::PlayMenu*; _Deleter = std::__shared_ptr<tama::PlayMenu, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::PlayMenu> >; _Alloc = std::allocator<tama::PlayMenu>; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
shared_ptr_base.h:450:10:_Alloc& std::_Sp_counted_deleter<_Ptr, _Deleter, _Alloc, _Lp>::_Impl::_M_alloc() [with _Ptr = tama::PlayMenu*; _Deleter = std::__shared_ptr<tama::PlayMenu, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::PlayMenu> >; _Alloc = std::allocator<tama::PlayMenu>; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
shared_ptr_base.h:449:12:_Deleter& std::_Sp_counted_deleter<_Ptr, _Deleter, _Alloc, _Lp>::_Impl::_M_del() [with _Ptr = tama::Wash*; _Deleter = std::__shared_ptr<tama::Wash, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Wash> >; _Alloc = std::allocator<tama::Wash>; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
shared_ptr_base.h:450:10:_Alloc& std::_Sp_counted_deleter<_Ptr, _Deleter, _Alloc, _Lp>::_Impl::_M_alloc() [with _Ptr = tama::Wash*; _Deleter = std::__shared_ptr<tama::Wash, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Wash> >; _Alloc = std::allocator<tama::Wash>; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
shared_ptr_base.h:449:12:_Deleter& std::_Sp_counted_deleter<_Ptr, _Deleter, _Alloc, _Lp>::_Impl::_M_del() [with _Ptr = tama::Eat*; _Deleter = std::__shared_ptr<tama::Eat, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Eat> >; _Alloc = std::allocator<tama::Eat>; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
shared_ptr_base.h:450:10:_Alloc& std::_Sp_counted_deleter<_Ptr, _Deleter, _Alloc, _Lp>::_Impl::_M_alloc() [with _Ptr = tama::Eat*; _Deleter = std::__shared_ptr<tama::Eat, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Eat> >; _Alloc = std::allocator<tama::Eat>; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
shared_ptr_base.h:449:12:_Deleter& std::_Sp_counted_deleter<_Ptr, _Deleter, _Alloc, _Lp>::_Impl::_M_del() [with _Ptr = tama::PageOne*; _Deleter = std::__shared_ptr<tama::PageOne, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::PageOne> >; _Alloc = std::allocator<tama::PageOne>; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
shared_ptr_base.h:450:10:_Alloc& std::_Sp_counted_deleter<_Ptr, _Deleter, _Alloc, _Lp>::_Impl::_M_alloc() [with _Ptr = tama::PageOne*; _Deleter = std::__shared_ptr<tama::PageOne, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::PageOne> >; _Alloc = std::allocator<tama::PageOne>; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
shared_ptr_base.h:449:12:_Deleter& std::_Sp_counted_deleter<_Ptr, _Deleter, _Alloc, _Lp>::_Impl::_M_del() [with _Ptr = tama::TimeView*; _Deleter = std::__shared_ptr<tama::TimeView, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::TimeView> >; _Alloc = std::allocator<tama::TimeView>; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
shared_ptr_base.h:450:10:_Alloc& std::_Sp_counted_deleter<_Ptr, _Deleter, _Alloc, _Lp>::_Impl::_M_alloc() [with _Ptr = tama::TimeView*; _Deleter = std::__shared_ptr<tama::TimeView, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::TimeView> >; _Alloc = std::allocator<tama::TimeView>; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)0]	16	static
shared_ptr_base.h:428:7:static _Tp& std::_Sp_ebo_helper<_Nm, _Tp, false>::_S_get(std::_Sp_ebo_helper<_Nm, _Tp, false>&) [with int _Nm = 0; _Tp = std::__shared_ptr<tama::Sprite, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Sprite> >]	16	static
shared_ptr_base.h:417:7:static _Tp& std::_Sp_ebo_helper<_Nm, _Tp, true>::_S_get(std::_Sp_ebo_helper<_Nm, _Tp, true>&) [with int _Nm = 1; _Tp = std::allocator<tama::Sprite>]	16	static
shared_ptr_base.h:428:7:static _Tp& std::_Sp_ebo_helper<_Nm, _Tp, false>::_S_get(std::_Sp_ebo_helper<_Nm, _Tp, false>&) [with int _Nm = 0; _Tp = std::__shared_ptr<tama::Lamp, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Lamp> >]	16	static
shared_ptr_base.h:417:7:static _Tp& std::_Sp_ebo_helper<_Nm, _Tp, true>::_S_get(std::_Sp_ebo_helper<_Nm, _Tp, true>&) [with int _Nm = 1; _Tp = std::allocator<tama::Lamp>]	16	static
shared_ptr_base.h:428:7:static _Tp& std::_Sp_ebo_helper<_Nm, _Tp, false>::_S_get(std::_Sp_ebo_helper<_Nm, _Tp, false>&) [with int _Nm = 0; _Tp = std::__shared_ptr<tama::Heal, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Heal> >]	16	static
shared_ptr_base.h:417:7:static _Tp& std::_Sp_ebo_helper<_Nm, _Tp, true>::_S_get(std::_Sp_ebo_helper<_Nm, _Tp, true>&) [with int _Nm = 1; _Tp = std::allocator<tama::Heal>]	16	static
shared_ptr_base.h:428:7:static _Tp& std::_Sp_ebo_helper<_Nm, _Tp, false>::_S_get(std::_Sp_ebo_helper<_Nm, _Tp, false>&) [with int _Nm = 0; _Tp = std::__shared_ptr<tama::PlayMenu, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::PlayMenu> >]	16	static
shared_ptr_base.h:417:7:static _Tp& std::_Sp_ebo_helper<_Nm, _Tp, true>::_S_get(std::_Sp_ebo_helper<_Nm, _Tp, true>&) [with int _Nm = 1; _Tp = std::allocator<tama::PlayMenu>]	16	static
shared_ptr_base.h:428:7:static _Tp& std::_Sp_ebo_helper<_Nm, _Tp, false>::_S_get(std::_Sp_ebo_helper<_Nm, _Tp, false>&) [with int _Nm = 0; _Tp = std::__shared_ptr<tama::Wash, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Wash> >]	16	static
shared_ptr_base.h:417:7:static _Tp& std::_Sp_ebo_helper<_Nm, _Tp, true>::_S_get(std::_Sp_ebo_helper<_Nm, _Tp, true>&) [with int _Nm = 1; _Tp = std::allocator<tama::Wash>]	16	static
shared_ptr_base.h:428:7:static _Tp& std::_Sp_ebo_helper<_Nm, _Tp, false>::_S_get(std::_Sp_ebo_helper<_Nm, _Tp, false>&) [with int _Nm = 0; _Tp = std::__shared_ptr<tama::Eat, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::Eat> >]	16	static
shared_ptr_base.h:417:7:static _Tp& std::_Sp_ebo_helper<_Nm, _Tp, true>::_S_get(std::_Sp_ebo_helper<_Nm, _Tp, true>&) [with int _Nm = 1; _Tp = std::allocator<tama::Eat>]	16	static
shared_ptr_base.h:428:7:static _Tp& std::_Sp_ebo_helper<_Nm, _Tp, false>::_S_get(std::_Sp_ebo_helper<_Nm, _Tp, false>&) [with int _Nm = 0; _Tp = std::__shared_ptr<tama::PageOne, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::PageOne> >]	16	static
shared_ptr_base.h:417:7:static _Tp& std::_Sp_ebo_helper<_Nm, _Tp, true>::_S_get(std::_Sp_ebo_helper<_Nm, _Tp, true>&) [with int _Nm = 1; _Tp = std::allocator<tama::PageOne>]	16	static
shared_ptr_base.h:428:7:static _Tp& std::_Sp_ebo_helper<_Nm, _Tp, false>::_S_get(std::_Sp_ebo_helper<_Nm, _Tp, false>&) [with int _Nm = 0; _Tp = std::__shared_ptr<tama::TimeView, (__gnu_cxx::_Lock_policy)0>::_Deleter<std::allocator<tama::TimeView> >]	16	static
shared_ptr_base.h:417:7:static _Tp& std::_Sp_ebo_helper<_Nm, _Tp, true>::_S_get(std::_Sp_ebo_helper<_Nm, _Tp, true>&) [with int _Nm = 1; _Tp = std::allocator<tama::TimeView>]	16	static
